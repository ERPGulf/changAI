[
    {
        "input": {
            "doctype": "Company",
            "question": "What\u2019s the full name of our primary registered company named 'HTS Pvt Ltd'?",
            "fields": [
                "company_name"
            ]
        },
        "output": "frappe.db.get_value('Company', {'name': 'HTS Pvt Ltd'}, 'company_name')"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Which country is our company 'NovaTech Solutions' legally registered in?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.db.get_value('Company', {'name': 'NovaTech Solutions'}, 'country')"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "What is the default currency set for 'BrightEdge Ltd' for financial transactions?",
            "fields": [
                "default_currency"
            ]
        },
        "output": "frappe.db.get_value('Company', {'name': 'BrightEdge Ltd'}, 'default_currency')"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "When was 'GreenField Enterprises' established and officially incorporated?",
            "fields": [
                "date_of_establishment",
                "date_of_incorporation"
            ]
        },
        "output": "frappe.db.get_value('Company', {'name': 'GreenField Enterprises'}, ['date_of_establishment', 'date_of_incorporation'])"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Who is listed as the parent company of 'FusionCorp International'?",
            "fields": [
                "parent_company"
            ]
        },
        "output": "frappe.db.get_value('Company', {'name': 'FusionCorp International'}, 'parent_company')"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Has a company logo been uploaded for 'SkyNet Digital Ltd' in the system?",
            "fields": [
                "company_logo"
            ]
        },
        "output": "frappe.db.get_value('Company', {'name': 'SkyNet Digital Ltd'}, 'company_logo')"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Can you check if a logo file is attached for the company 'AlphaBridge Tech'?",
            "fields": [
                "company_logo"
            ]
        },
        "output": "frappe.db.get_value('Company', {'name': 'AlphaBridge Tech'}, 'company_logo')"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "What is the phone number and email address listed for 'Zylor Innovations Pvt Ltd'?",
            "fields": [
                "phone_no",
                "email"
            ]
        },
        "output": "frappe.db.get_value('Company', {'name': 'Zylor Innovations Pvt Ltd'}, ['phone_no', 'email'])"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Which cost center is defined as the default for 'CoreFlex Global Solutions'?",
            "fields": [
                "cost_center"
            ]
        },
        "output": "frappe.db.get_value('Company', {'name': 'CoreFlex Global Solutions'}, 'cost_center')"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Can Galaxy Infotech Ltd create accounts for its child companies?",
            "fields": [
                "allow_account_creation_against_child_company"
            ]
        },
        "output": "frappe.db.get_value('Company', {'name': 'Galaxy Infotech Ltd'}, 'allow_account_creation_against_child_company')"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Is Orion Holdings Pvt Ltd set up to allow child companies to have their own accounts?",
            "fields": [
                "allow_account_creation_against_child_company"
            ]
        },
        "output": "frappe.db.get_value('Company', {'name': 'Orion Holdings Pvt Ltd'}, 'allow_account_creation_against_child_company')"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Can Lambda Systems Pvt Ltd add accounts under its branch companies?",
            "fields": [
                "allow_account_creation_against_child_company"
            ]
        },
        "output": "frappe.db.get_value('Company', {'name': 'Lambda Systems Pvt Ltd'}, 'allow_account_creation_against_child_company')"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "What is the credit limit for Zenith Tech Solutions this year?",
            "fields": [
                "credit_limit"
            ]
        },
        "output": "frappe.db.get_value('Company', {'name': 'Zenith Tech Solutions'}, 'credit_limit')"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "What\u2019s the monthly sales target set for Stellar Industries Ltd?",
            "fields": [
                "monthly_sales_target"
            ]
        },
        "output": "frappe.db.get_value('Company', {'name': 'Stellar Industries Ltd'}, 'monthly_sales_target')"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Is the perpetual inventory feature turned on for our company stock records?",
            "fields": [
                "enable_perpetual_inventory"
            ]
        },
        "output": "frappe.db.get_value('Company', {'is_group': 0}, 'enable_perpetual_inventory')"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Have we enabled both perpetual inventory and provisional accounting for stock transactions?",
            "fields": [
                "enable_perpetual_inventory",
                "enable_provisional_accounting_for_non_stock_items"
            ]
        },
        "output": "frappe.db.get_value('Company', {'is_group': 0}, ['enable_perpetual_inventory', 'enable_provisional_accounting_for_non_stock_items'])"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Can you check which accounts we use for customer receivables and vendor payables?",
            "fields": [
                "default_receivable_account",
                "default_payable_account"
            ]
        },
        "output": "frappe.db.get_value('Company', {'is_group': 0}, ['default_receivable_account', 'default_payable_account'])"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Which account do we use for rounding off entries in our financial reports?",
            "fields": [
                "round_off_account"
            ]
        },
        "output": "frappe.db.get_value('Company', {'is_group': 0}, 'round_off_account')"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "List all registered companies in the system.",
            "fields": [
                "name"
            ]
        },
        "output": "frappe.get_all('Company', filters={'is_group': 0}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Which companies are currently active in our system?",
            "fields": [
                "name",
                "disabled"
            ]
        },
        "output": "frappe.get_all('Company', filters={'is_group': 0, 'disabled': 0}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Can you list all our company branches?",
            "fields": [
                "name",
                "is_group"
            ]
        },
        "output": "frappe.get_all('Company', filters={'is_group': 1}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Which companies have USD as their base currency?",
            "fields": [
                "default_currency"
            ]
        },
        "output": "frappe.get_all('Company', filters={'default_currency': 'USD', 'is_group': 0}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Which country is set for each registered company?",
            "fields": [
                "name",
                "country"
            ]
        },
        "output": "frappe.get_all('Company', filters={'is_group': 0}, fields=['name', 'country'])"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "List companies whose fiscal year starts in April.",
            "fields": [
                "name"
            ]
        },
        "output": "frappe.get_all('Company', filters={'is_group': 0, 'fiscal_year_start_date': '04-01'}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Companies with fiscal year starting in January?",
            "fields": [
                "name"
            ]
        },
        "output": "frappe.get_all('Company', filters={'is_group': 0, 'fiscal_year_start_date': '01-01'}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "List companies where multi-currency accounting is enabled.",
            "fields": [
                "name",
                "default_currency"
            ]
        },
        "output": "frappe.get_all('Company', filters={'is_group': 0}, fields=['name', 'default_currency'])"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Which companies have multi-currency enabled?",
            "fields": [
                "name",
                "default_currency"
            ]
        },
        "output": "frappe.get_all('Company', filters={'is_group': 0}, fields=['name', 'default_currency'])"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Which companies have enabled auto accounting for stock?",
            "fields": [
                "name",
                "auto_accounting_for_stock_settings"
            ]
        },
        "output": "frappe.get_all('Company', filters={'is_group': 0, 'auto_accounting_for_stock_settings': 1}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "List companies where stock auto-accounting is active.",
            "fields": [
                "name",
                "auto_accounting_for_stock_settings"
            ]
        },
        "output": "frappe.get_all('Company', filters={'is_group': 0, 'auto_accounting_for_stock_settings': 1}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Do all companies have tax IDs recorded?",
            "fields": [
                "name",
                "tax_id"
            ]
        },
        "output": "frappe.get_all('Company', filters={'is_group': 0}, fields=['name', 'tax_id'])"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Is a tax ID available for each company?",
            "fields": [
                "name",
                "tax_id"
            ]
        },
        "output": "frappe.get_all('Company', filters={'is_group': 0}, fields=['name', 'tax_id'])"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Show the default cost center for each company.",
            "fields": [
                "name",
                "cost_center"
            ]
        },
        "output": "frappe.get_all('Company', filters={'is_group': 0}, fields=['name', 'cost_center'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "How much did we spend in February?",
            "fields": [
                "posting_date",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Purchase Invoice', filters={'posting_date': ['between', ['2025-02-01', '2025-02-28']]}, fields=['name', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "How much money did we spend this month?",
            "fields": [
                "posting_date",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Purchase Invoice', filters={'posting_date': ['>=', frappe.utils.formatdate(frappe.utils.get_first_day(frappe.utils.nowdate()))]}, fields=['name', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "What's the total value of all bills for April?",
            "fields": [
                "posting_date",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Purchase Invoice', filters={'posting_date': ['between', ['2025-04-01', '2025-04-30']]}, fields=['name', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Show all purchases from DEF supplier.",
            "fields": [
                "supplier",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Purchase Invoice', filters={'supplier': 'DEF'}, fields=['name', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "How many purchase invoices were submitted by Eastline Supplies?",
            "fields": [
                "supplier"
            ]
        },
        "output": "frappe.db.count('Purchase Invoice', {'supplier': 'Eastline Supplies'})"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Any purchase invoices submitted by Global Traders?",
            "fields": [
                "supplier"
            ]
        },
        "output": "frappe.db.exists('Purchase Invoice', {'supplier': 'Global Traders'})"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Show purchase invoices from Eastline Supplies created this month.",
            "fields": [
                "supplier",
                "posting_date"
            ]
        },
        "output": "frappe.get_all('Purchase Invoice', filters={ 'supplier': 'Eastline Supplies', 'posting_date': ['>=', frappe.utils.formatdate(frappe.utils.get_first_day(frappe.utils.nowdate()))] }, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Show all purchases from DEF supplier.",
            "fields": [
                "supplier",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Purchase Invoice', filters={'supplier': 'DEF'}, fields=['name', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "How many purchase invoices were submitted by Eastline Supplies?",
            "fields": [
                "supplier"
            ]
        },
        "output": "frappe.db.count('Purchase Invoice', {'supplier': 'Eastline Supplies'})"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Any purchase invoices submitted by Global Traders?",
            "fields": [
                "supplier"
            ]
        },
        "output": "frappe.db.exists('Purchase Invoice', {'supplier': 'Global Traders'})"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Show purchase invoices from Eastline Supplies created this month.",
            "fields": [
                "supplier",
                "posting_date"
            ]
        },
        "output": "frappe.get_all('Purchase Invoice', filters={ 'supplier': 'Eastline Supplies', 'posting_date': ['>=', frappe.utils.formatdate(frappe.utils.get_first_day(frappe.utils.nowdate()))] }, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Show all purchases from DEF supplier.",
            "fields": [
                "supplier",
                "name"
            ]
        },
        "output": "frappe.db.get_list('Purchase Invoice', filters={'supplier': 'DEF'}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "How many purchase invoices were submitted by Eastline Supplies?",
            "fields": [
                "supplier"
            ]
        },
        "output": "frappe.db.count('Purchase Invoice', filters={'supplier': 'Eastline Supplies'})"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Any purchase invoices submitted by Global Traders?",
            "fields": [
                "supplier"
            ]
        },
        "output": "frappe.db.exists('Purchase Invoice', {'supplier': 'Global Traders'})"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Show purchase invoices from Eastline Supplies created this month.",
            "fields": [
                "supplier",
                "posting_date",
                "name"
            ]
        },
        "output": "frappe.db.get_list('Purchase Invoice', filters={'supplier': 'Eastline Supplies', 'posting_date': ['>=', frappe.utils.get_first_day(frappe.utils.nowdate())]}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "When did we order printer paper last?",
            "fields": [
                "posting_date",
                "items"
            ]
        },
        "output": "frappe.db.get_list('Purchase Invoice', filters={'items.item_name': 'Printer Paper'}, fields=['posting_date'], order_by='posting_date desc', limit=1)"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "When was the last time we ordered toner cartridges?",
            "fields": [
                "posting_date",
                "items"
            ]
        },
        "output": "frappe.db.get_list('Purchase Invoice', filters={'items.item_name': 'Toner Cartridge'}, fields=['posting_date'], order_by='posting_date desc', limit=1)"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Show purchase invoices worth $12,000 posted this month.",
            "fields": [
                "grand_total",
                "posting_date",
                "name"
            ]
        },
        "output": "frappe.db.get_list('Purchase Invoice', filters={ 'grand_total': 12000, 'posting_date': ['>=', frappe.utils.get_first_day(frappe.utils.nowdate())]}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Confirm if Redwood Industries sent a purchase invoice worth $12,000.",
            "fields": [
                "supplier",
                "grand_total"
            ]
        },
        "output": "frappe.db.exists('Purchase Invoice', {'supplier': 'Redwood Industries', 'grand_total': 12000})"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "What's the due date for invoice `PINV-00567`?",
            "fields": [
                "due_date"
            ]
        },
        "output": "frappe.db.get_value('Purchase Invoice', 'PINV-00567', 'due_date')"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "When is payment due for purchase invoice `PINV-00987`?",
            "fields": [
                "due_date"
            ]
        },
        "output": "frappe.db.get_value('Purchase Invoice', 'PINV-00987', 'due_date')"
    },
    {
        "input": {
            "doctype": "Quotation",
            "question": "How do I create a quotation for a new customer?",
            "fields": [
                "quotation_to",
                "party_name",
                "customer_name",
                "transaction_date",
                "valid_till",
                "order_type"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'Quotation', 'quotation_to': 'Customer', 'party_name': 'New Customer', 'transaction_date': frappe.utils.today(), 'order_type': 'Sales' }).insert()"
    },
    {
        "input": {
            "doctype": "Supplier Quotation",
            "question": "How can I enter a quotation received from a supplier?",
            "fields": [
                "supplier",
                "transaction_date",
                "items",
                "valid_till",
                "company"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'Supplier Quotation', 'supplier': 'ABC Traders', 'transaction_date': frappe.utils.today(), 'company': 'HTS Pvt Ltd', 'valid_till': '2025-05-31', 'items': [] }).insert()"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Where can I view submitted sales invoices from last week?",
            "fields": [
                "posting_date",
                "status"
            ]
        },
        "output": "frappe.get_list('Sales Invoice', filters={ 'status': 'Submitted', 'posting_date': ['between', ['2025-04-21', '2025-04-28']] })"
    },
    {
        "input": {
            "doctype": "Attendance",
            "question": "How do I access employee attendance records for March?",
            "fields": [
                "employee",
                "attendance_date",
                "status"
            ]
        },
        "output": "frappe.get_list('Attendance', filters={ 'attendance_date': ['between', ['2025-03-01', '2025-03-31']] })"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "View all active purchase invoices received from suppliers.",
            "fields": [
                "supplier",
                "status"
            ]
        },
        "output": "frappe.get_list('Purchase Invoice', filters={ 'status': 'Unpaid' })"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Show all overdue customer payments this month.",
            "fields": [
                "party_type",
                "party",
                "due_date",
                "status"
            ]
        },
        "output": "frappe.get_list('Payment Entry', filters={ 'party_type': 'Customer', 'due_date': ['<', frappe.utils.today()], 'status': 'Unpaid' })"
    },
    {
        "input": {
            "doctype": "Purchase Order",
            "question": "List all approved purchase orders from last month.",
            "fields": [
                "status",
                "transaction_date"
            ]
        },
        "output": "frappe.get_list('Purchase Order', filters={ 'status': 'To Receive and Bill', 'transaction_date': ['between', ['2025-03-01', '2025-03-31']] })"
    },
    {
        "input": {
            "doctype": "Delivery Note",
            "question": "Track all items sent through delivery notes.",
            "fields": [
                "posting_date",
                "items"
            ]
        },
        "output": "frappe.get_all('Delivery Note', fields=['name', 'posting_date', 'items'])"
    },
    {
        "input": {
            "doctype": "Quotation",
            "question": "Can you help me create a sales quotation for John Traders today?",
            "fields": [
                "quotation_to",
                "party_name",
                "customer_name",
                "transaction_date",
                "valid_till",
                "order_type"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'Quotation', 'quotation_to': 'Customer', 'party_name': 'John Traders', 'transaction_date': frappe.utils.today(), 'valid_till': '2025-05-15', 'order_type': 'Sales' }).insert()"
    },
    {
        "input": {
            "doctype": "Supplier Quotation",
            "question": "I received a price quote from ABC Traders \u2014 how do I enter it?",
            "fields": [
                "supplier",
                "transaction_date",
                "items",
                "valid_till",
                "company"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'Supplier Quotation', 'supplier': 'ABC Traders', 'transaction_date': frappe.utils.today(), 'company': 'HTS Pvt Ltd', 'valid_till': '2025-05-31', 'items': [] }).insert()"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Where can I check all sales invoices we submitted last week?",
            "fields": [
                "posting_date",
                "status"
            ]
        },
        "output": "frappe.get_list('Sales Invoice', filters={ 'status': 'Submitted', 'posting_date': ['between', ['2025-04-21', '2025-04-28']] })"
    },
    {
        "input": {
            "doctype": "Attendance",
            "question": "I'd like to see everyone's attendance for March 2025.",
            "fields": [
                "employee",
                "attendance_date",
                "status"
            ]
        },
        "output": "frappe.get_list('Attendance', filters={ 'attendance_date': ['between', ['2025-03-01', '2025-03-31']] })"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Show me all unpaid bills from our suppliers.",
            "fields": [
                "supplier",
                "status"
            ]
        },
        "output": "frappe.get_list('Purchase Invoice', filters={ 'status': 'Unpaid' })"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Which customer payments are still overdue as of today?",
            "fields": [
                "party_type",
                "party",
                "due_date",
                "status"
            ]
        },
        "output": "frappe.get_list('Payment Entry', filters={ 'party_type': 'Customer', 'due_date': ['<', frappe.utils.today()], 'status': 'Unpaid' })"
    },
    {
        "input": {
            "doctype": "Purchase Order",
            "question": "List all purchase orders we approved last month.",
            "fields": [
                "status",
                "transaction_date"
            ]
        },
        "output": "frappe.get_list('Purchase Order', filters={ 'status': 'To Receive and Bill', 'transaction_date': ['between', ['2025-03-01', '2025-03-31']] })"
    },
    {
        "input": {
            "doctype": "Delivery Note",
            "question": "I want to track items we shipped out recently through delivery notes.",
            "fields": [
                "posting_date",
                "items"
            ]
        },
        "output": "frappe.get_all('Delivery Note', fields=['name', 'posting_date', 'items'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "List all items where the total projected quantity is below 10 units.",
            "fields": [
                "item_code",
                "total_projected_qty"
            ]
        },
        "output": "frappe.get_list('Item', filters={ 'total_projected_qty': ['<', 10] }, fields=['item_code', 'item_name'])"
    },
    {
        "input": {
            "doctype": "Item Group",
            "question": "Create a new item group named 'Retail Products'.",
            "fields": [
                "item_group_name"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'Item Group', 'item_group_name': 'Retail Products', 'is_group': 0 }).insert()"
    },
    {
        "input": {
            "doctype": "Bin",
            "question": "Check stock quantity in bin for item 'AeroDrone X5' at 'Main Store'.",
            "fields": [
                "item_code",
                "warehouse",
                "actual_qty"
            ]
        },
        "output": "frappe.db.get_value('Bin', { 'item_code': 'AeroDrone X5', 'warehouse': 'Main Store' }, 'actual_qty')"
    },
    {
        "input": {
            "doctype": "Bin",
            "question": "Get bin details for warehouse 'Main Store'.",
            "fields": [
                "warehouse"
            ]
        },
        "output": "frappe.get_list('Bin', filters={ 'warehouse': 'Main Store' }, fields=['item_code', 'actual_qty'])"
    },
    {
        "input": {
            "doctype": "Bin",
            "question": "List all bins that have a negative stock quantity.",
            "fields": [
                "actual_qty"
            ]
        },
        "output": "frappe.get_list('Bin', filters={ 'actual_qty': ['<', 0] }, fields=['item_code', 'warehouse', 'actual_qty'])"
    },
    {
        "input": {
            "doctype": "Batch",
            "question": "What is the manufacturing date of batch 'BATCH-009' for item 'AeroDrone X5'?",
            "fields": [
                "manufacturing_date"
            ]
        },
        "output": "frappe.db.get_value('Batch', {'batch_id': 'BATCH-009', 'item': 'AeroDrone X5'}, 'manufacturing_date')"
    },
    {
        "input": {
            "doctype": "Batch",
            "question": "What's the current status and quantity of goods issued under batch 'BATCH-1002'?",
            "fields": [
                "batch_qty",
                "item"
            ]
        },
        "output": "frappe.db.get_value('Batch', {'batch_id': 'BATCH-1002'}, ['batch_qty', 'item'])"
    },
    {
        "input": {
            "doctype": "Serial No",
            "question": "Find serial numbers with an active warranty under item 'SmartWatch Pro'.",
            "fields": [
                "serial_no",
                "warranty_expiry_date",
                "item_code"
            ]
        },
        "output": "frappe.get_list('Serial No', filters={ 'item_code': 'SmartWatch Pro', 'warranty_expiry_date': ['>=', frappe.utils.today()] }, fields=['serial_no'])"
    },
    {
        "input": {
            "doctype": "Stock Reconciliation",
            "question": "How do I reconcile the actual stock for 'FusionPad Tablet' in warehouse 'Main Store'?",
            "fields": [
                "item_code",
                "set_warehouse",
                "company"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'Stock Reconciliation', 'company': 'HTS Pvt Ltd', 'set_warehouse': 'Main Store', 'items': [{'item_code': 'FusionPad Tablet'}] }).insert()"
    },
    {
        "input": {
            "doctype": "Stock Reconciliation",
            "question": "Submit a reconciliation entry to correct quantity mismatches for item 'AeroDrone X5' in warehouse 'Main Store'.",
            "fields": [
                "item_code",
                "set_warehouse",
                "company"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'Stock Reconciliation', 'company': 'HTS Pvt Ltd', 'set_warehouse': 'Main Store', 'items': [{'item_code': 'AeroDrone X5'}] }).insert()"
    },
    {
        "input": {
            "doctype": "Warehouse",
            "question": "Add a new warehouse named 'South Regional Depot' under company 'HTS Pvt Ltd'.",
            "fields": [
                "warehouse_name",
                "company"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'Warehouse', 'warehouse_name': 'South Regional Depot', 'company': 'HTS Pvt Ltd' }).insert()"
    },
    {
        "input": {
            "doctype": "Warehouse",
            "question": "View all inactive or archived warehouses in the system.",
            "fields": [
                "disabled"
            ]
        },
        "output": "frappe.get_list('Warehouse', filters={'disabled': 1}, fields=['warehouse_name', 'company'])"
    },
    {
        "input": {
            "doctype": "UOM",
            "question": "Define a conversion between 'Kilogram' and 'Gram' for stock items.",
            "fields": [
                "uom_name",
                "must_be_whole_number"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'UOM', 'uom_name': 'Gram', 'must_be_whole_number': 0 }).insert()"
    },
    {
        "input": {
            "doctype": "UOM",
            "question": "Add a new unit of measure called 'Milliliter' for liquid tracking.",
            "fields": [
                "uom_name"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'UOM', 'uom_name': 'Milliliter' }).insert()"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Can you check the current status and linked customer for lead ID LEAD-00234?",
            "fields": [
                "lead_name",
                "status",
                "customer"
            ]
        },
        "output": "frappe.db.get_value('Lead', 'LEAD-00234', ['status', 'customer'])"
    },
    {
        "input": {
            "doctype": "Sales Partner",
            "question": "Where can I view the total commission earned by sales partner 'Global Deals LLP' this quarter?",
            "fields": [
                "partner_name",
                "commission_rate"
            ]
        },
        "output": "frappe.db.get_value('Sales Partner', {'partner_name': 'Global Deals LLP'}, 'commission_rate')"
    },
    {
        "input": {
            "doctype": "Opportunity",
            "question": "How can I track all sales opportunities created for Q2 (April to June 2025)?",
            "fields": [
                "transaction_date"
            ]
        },
        "output": "frappe.get_list('Opportunity', filters={ 'transaction_date': ['between', ['2025-04-01', '2025-06-30']] })"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "How do I create a new lead from a website inquiry named 'John Smith'?",
            "fields": [
                "lead_name",
                "email_id",
                "source"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'Lead', 'lead_name': 'John Smith', 'email_id': 'john.smith@example.com', 'source': 'Website' }).insert()"
    },
    {
        "input": {
            "doctype": "BOM",
            "question": "I want to create a new BOM for the product 'SmartWidget X200'. How can I do that?",
            "fields": [
                "item",
                "quantity",
                "items"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'BOM', 'item': 'SmartWidget X200', 'quantity': 1, 'items': [] }).insert()"
    },
    {
        "input": {
            "doctype": "BOM",
            "question": "Where can I check the estimated cost from the BOM for 'HeatShield Panel'?",
            "fields": [
                "total_cost"
            ]
        },
        "output": "frappe.db.get_value('BOM', {'item': 'HeatShield Panel'}, 'total_cost')"
    },
    {
        "input": {
            "doctype": "Work Order",
            "question": "Show the work order linked to production batch 'BATCH-00015'.",
            "fields": [
                "production_item",
                "status"
            ]
        },
        "output": "frappe.get_list('Work Order', filters={'batch_no': 'BATCH-00015'}, fields=['production_item', 'status'])"
    },
    {
        "input": {
            "doctype": "Work Order",
            "question": "Get the current status of work order 'WO-00023'.",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.db.get_value('Work Order', 'WO-00023', 'status')"
    },
    {
        "input": {
            "doctype": "Work Order",
            "question": "Which workstation is assigned to work order 'WO-00045'?",
            "fields": [
                "workstation"
            ]
        },
        "output": "frappe.db.get_value('Work Order', 'WO-00045', 'workstation')"
    },
    {
        "input": {
            "doctype": "Production Plan",
            "question": "List all production plans created for Q2 2025.",
            "fields": [
                "name",
                "company",
                "planned_start_date"
            ]
        },
        "output": "frappe.get_list('Production Plan', filters={'planned_start_date': ['between', ['2025-04-01', '2025-06-30']]}, fields=['name', 'company', 'planned_start_date'])"
    },
    {
        "input": {
            "doctype": "Production Plan",
            "question": "Which work orders are included in production plan 'PP-00014'?",
            "fields": [
                "work_order"
            ]
        },
        "output": "frappe.get_list('Production Plan', filters={'name': 'PP-00014'}, fields=['work_order'])"
    },
    {
        "input": {
            "doctype": "Production Plan",
            "question": "Check the planned quantity for item 'ITEM-0009' in production plan 'PP-00012'.",
            "fields": [
                "planned_qty"
            ]
        },
        "output": "frappe.get_list('Production Plan Item', filters={'parent': 'PP-00012', 'item_code': 'ITEM-0009'}, fields=['planned_qty'])"
    },
    {
        "input": {
            "doctype": "Job Card",
            "question": "Get operation log for job card 'JC-00120'.",
            "fields": [
                "operation",
                "time_logs"
            ]
        },
        "output": "frappe.db.get_value('Job Card', 'JC-00120', ['operation', 'time_logs'])"
    },
    {
        "input": {
            "doctype": "Job Card",
            "question": "Is the job card 'JC-00130' marked as completed?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.db.get_value('Job Card', 'JC-00130', 'status')"
    },
    {
        "input": {
            "doctype": "Job Card",
            "question": "Who is the operator assigned to job card 'JC-00089'?",
            "fields": [
                "employee"
            ]
        },
        "output": "frappe.db.get_value('Job Card', 'JC-00089', 'employee')"
    },
    {
        "input": {
            "doctype": "Salary Slip",
            "question": "Get salary slips for all employees generated for April 2025.",
            "fields": [
                "employee",
                "posting_date"
            ]
        },
        "output": "frappe.get_list('Salary Slip', filters={'posting_date': ['between', ['2025-04-01', '2025-04-30']]}, fields=['employee', 'posting_date'])"
    },
    {
        "input": {
            "doctype": "Salary Slip",
            "question": "Show all deductions applied to salary slip 'SS-00210'.",
            "fields": [
                "deductions"
            ]
        },
        "output": "frappe.db.get_value('Salary Slip', 'SS-00210', 'deductions')"
    },
    {
        "input": {
            "doctype": "BOM",
            "question": "Can you show me the list of raw materials used in the BOM for 'EcoCooler 500'?",
            "fields": [
                "items"
            ]
        },
        "output": "frappe.get_doc('BOM', 'BOM-EC500').items"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "What is the current status of lead 'LEAD-00123' in the CRM?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.db.get_value('Lead', 'LEAD-00123', 'status')"
    },
    {
        "input": {
            "doctype": "Opportunity",
            "question": "Who is assigned as the opportunity owner for deal OPP-00321?",
            "fields": [
                "opportunity_owner"
            ]
        },
        "output": "frappe.db.get_value('Opportunity', 'OPP-00321', 'opportunity_owner')"
    },
    {
        "input": {
            "doctype": "Opportunity",
            "question": "When is the expected closing date for opportunity OPP-00456?",
            "fields": [
                "expected_closing"
            ]
        },
        "output": "frappe.db.get_value('Opportunity', 'OPP-00456', 'expected_closing')"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "What is the designation and email address of employee John Doe?",
            "fields": [
                "designation",
                "personal_email"
            ]
        },
        "output": "frappe.db.get_value('Employee', 'EMP-0001', ['designation', 'personal_email'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "What is the price and description of item 'ITEM-0001'?",
            "fields": [
                "description",
                "standard_rate"
            ]
        },
        "output": "frappe.db.get_value('Item', 'ITEM-0001', ['description', 'standard_rate'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "What are the barcode and stock unit set for item 'AeroDrone X5'?",
            "fields": [
                "barcodes",
                "stock_uom"
            ]
        },
        "output": "frappe.db.get_value('Item', 'AeroDrone X5', ['barcodes', 'stock_uom'])"
    },
    {
        "input": {
            "doctype": "Item Group",
            "question": "Which item group is 'AeroDrone X5' assigned to?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.db.get_value('Item', 'AeroDrone X5', 'item_group')"
    },
    {
        "input": {
            "doctype": "Item Group",
            "question": "Which warehouse is set as default for the item group 'Electronics'?",
            "fields": [
                "default_warehouse"
            ]
        },
        "output": "frappe.db.get_value('Item Group', 'Electronics', 'default_warehouse')"
    },
    {
        "input": {
            "doctype": "Batch",
            "question": "When does the batch 'BATCH-042' of 'EcoFilter Max' expire?",
            "fields": [
                "expiry_date"
            ]
        },
        "output": "frappe.db.get_value('Batch', 'BATCH-042', 'expiry_date')"
    },
    {
        "input": {
            "doctype": "Serial No",
            "question": "What is the maintenance status of serial number 'SN-X5-101'?",
            "fields": [
                "maintenance_status"
            ]
        },
        "output": "frappe.db.get_value('Serial No', 'SN-X5-101', 'maintenance_status')"
    },
    {
        "input": {
            "doctype": "Serial No",
            "question": "What is the current status of serial number 'SN-X7-222'?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.db.get_value('Serial No', 'SN-X7-222', 'status')"
    },
    {
        "input": {
            "doctype": "Warehouse",
            "question": "What is the current address for warehouse 'Main Store'?",
            "fields": [
                "address_line_1"
            ]
        },
        "output": "frappe.db.get_value('Warehouse', 'Main Store', 'address_line_1')"
    },
    {
        "input": {
            "doctype": "UOM",
            "question": "What is the full name of the unit 'Box' used for sales?",
            "fields": [
                "uom_name"
            ]
        },
        "output": "frappe.db.get_value('UOM', 'Box', 'uom_name')"
    },
    {
        "input": {
            "doctype": "Sales Partner",
            "question": "What email address is set for sales partner 'ABC Distributors'?",
            "fields": [
                "email_id"
            ]
        },
        "output": "frappe.db.get_value('Sales Partner', 'ABC Distributors', 'email_id')"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Which territory is assigned to lead LEAD-00045?",
            "fields": [
                "territory"
            ]
        },
        "output": "frappe.db.get_value('Lead', 'LEAD-00045', 'territory')"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Can you list all the companies that are currently active in our ERP system?",
            "fields": [
                "company_name",
                "is_group"
            ]
        },
        "output": "frappe.get_list('Company', filters={'is_group': 0}, fields=['name', 'company_name'])"
    },
    {
        "input": {
            "doctype": "Cost Center",
            "question": "Which cost centers are created to track research and development expenses?",
            "fields": [
                "cost_center_name",
                "company"
            ]
        },
        "output": "frappe.get_list('Cost Center', filters={'cost_center_name': ['like', '%R&D%']}, fields=['name', 'cost_center_name'])"
    },
    {
        "input": {
            "doctype": "Cost Center",
            "question": "Where can I find budget-linked cost centers for the marketing department?",
            "fields": [
                "cost_center_name",
                "company"
            ]
        },
        "output": "frappe.get_list('Cost Center', filters={'cost_center_name': ['like', '%Marketing%']}, fields=['name', 'cost_center_name'])"
    },
    {
        "input": {
            "doctype": "Cost Center",
            "question": "Which cost centers are currently marked as inactive in the system?",
            "fields": [
                "cost_center_name",
                "disabled"
            ]
        },
        "output": "frappe.get_list('Cost Center', filters={'disabled': 1}, fields=['name', 'cost_center_name'])"
    },
    {
        "input": {
            "doctype": "Request for Quotation",
            "question": "Can you show the list of RFQs sent to multiple suppliers this month?",
            "fields": [
                "suppliers",
                "transaction_date",
                "status"
            ]
        },
        "output": "frappe.get_list('Request for Quotation', filters={'transaction_date': ['between', ['2025-04-01', '2025-04-30']]}, fields=['name', 'transaction_date', 'status'])"
    },
    {
        "input": {
            "doctype": "Request for Quotation",
            "question": "What's the current response status for the request for quotation 'RFQ-00045'?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.db.get_value('Request for Quotation', 'RFQ-00045', 'status')"
    },
    {
        "input": {
            "doctype": "Request for Quotation",
            "question": "List RFQs that are still pending or awaiting supplier responses.",
            "fields": [
                "name",
                "status"
            ]
        },
        "output": "frappe.get_list('Request for Quotation', filters={'status': ['in', ['Draft', 'Open']]}, fields=['name', 'status'])"
    },
    {
        "input": {
            "doctype": "Purchase Taxes and Charges",
            "question": "Can you show me the tax templates used for import purchases?",
            "fields": [
                "category",
                "charge_type",
                "rate",
                "account_head"
            ]
        },
        "output": "frappe.get_list('Purchase Taxes and Charges', filters={'category': 'Valuation and Total', 'charge_type': 'Actual'}, fields=['account_head', 'rate'])"
    },
    {
        "input": {
            "doctype": "Purchase Taxes and Charges",
            "question": "What is the surcharge value currently set in our purchase tax settings?",
            "fields": [
                "description",
                "rate"
            ]
        },
        "output": "frappe.get_list('Purchase Taxes and Charges', filters={'description': ['like', '%surcharge%']}, fields=['description', 'rate'])"
    },
    {
        "input": {
            "doctype": "Purchase Taxes and Charges",
            "question": "Which account head is linked to the import charges template?",
            "fields": [
                "account_head",
                "description"
            ]
        },
        "output": "frappe.get_list('Purchase Taxes and Charges', filters={'description': ['like', '%import%']}, fields=['account_head'])"
    },
    {
        "input": {
            "doctype": "Tax Rule",
            "question": "Are there any tax rules that apply 18% GST for purchases made in Delhi?",
            "fields": [
                "billing_state",
                "purchase_tax_template",
                "tax_category"
            ]
        },
        "output": "frappe.get_list('Tax Rule', filters={'billing_state': 'Delhi', 'tax_category': 'GST'}, fields=['purchase_tax_template'])"
    },
    {
        "input": {
            "doctype": "Tax Rule",
            "question": "Which tax rules exclude services from taxation?",
            "fields": [
                "item_group",
                "purchase_tax_template"
            ]
        },
        "output": "frappe.get_list('Tax Rule', filters={'item_group': ['!=', 'Services']}, fields=['purchase_tax_template'])"
    },
    {
        "input": {
            "doctype": "Tax Rule",
            "question": "List all tax rules that are marked inactive or outdated.",
            "fields": [
                "to_date",
                "purchase_tax_template"
            ]
        },
        "output": "frappe.get_list('Tax Rule', filters={'to_date': ['<', frappe.utils.today()]}, fields=['purchase_tax_template'])"
    },
    {
        "input": {
            "doctype": "Pricing Rule",
            "question": "Which pricing rules apply discounts to bulk orders?",
            "fields": [
                "min_qty",
                "discount_percentage",
                "rate"
            ]
        },
        "output": "frappe.get_list('Pricing Rule', filters={'min_qty': ['>', 50]}, fields=['title', 'discount_percentage', 'rate'])"
    },
    {
        "input": {
            "doctype": "Pricing Rule",
            "question": "Can I see pricing rules based on customer group conditions?",
            "fields": [
                "customer_group",
                "rate",
                "discount_percentage"
            ]
        },
        "output": "frappe.get_list('Pricing Rule', filters={'customer_group': ['!=', '']}, fields=['title', 'rate', 'discount_percentage'])"
    },
    {
        "input": {
            "doctype": "Pricing Rule",
            "question": "Which pricing rules are active for seasonal discounts this quarter?",
            "fields": [
                "valid_from",
                "valid_upto",
                "rate",
                "discount_percentage"
            ]
        },
        "output": "frappe.get_list('Pricing Rule', filters={'valid_from': ['<=', frappe.utils.today()], 'valid_upto': ['>=', frappe.utils.today()]}, fields=['title', 'rate', 'discount_percentage'])"
    },
    {
        "input": {
            "doctype": "Mode of Payment",
            "question": "What payment methods like UPI or card are allowed in the system?",
            "fields": [
                "name",
                "type",
                "enabled"
            ]
        },
        "output": "frappe.get_list('Mode of Payment', filters={'enabled': 1}, fields=['name', 'type'])"
    },
    {
        "input": {
            "doctype": "Mode of Payment",
            "question": "Which payment modes are enabled for use in POS?",
            "fields": [
                "name",
                "type",
                "enabled",
                "enable_in_pos"
            ]
        },
        "output": "frappe.get_list('Mode of Payment', filters={'enabled': 1, 'enable_in_pos': 1}, fields=['name', 'type'])"
    },
    {
        "input": {
            "doctype": "Mode of Payment",
            "question": "Is cheque enabled as an accepted payment method?",
            "fields": [
                "name",
                "enabled"
            ]
        },
        "output": "frappe.db.get_value('Mode of Payment', {'name': 'Cheque'}, 'enabled')"
    },
    {
        "input": {
            "doctype": "Sales Taxes and Charges",
            "question": "Which sales tax templates include a 5% VAT rate?",
            "fields": [
                "rate",
                "account_head",
                "charge_type"
            ]
        },
        "output": "frappe.get_list('Sales Taxes and Charges', filters={'rate': 5}, fields=['account_head', 'charge_type'])"
    },
    {
        "input": {
            "doctype": "Sales Taxes and Charges",
            "question": "Which tax accounts are linked to sales tax templates?",
            "fields": [
                "account_head",
                "charge_type"
            ]
        },
        "output": "frappe.get_all('Sales Taxes and Charges', fields=['account_head', 'charge_type'])"
    },
    {
        "input": {
            "doctype": "Sales Taxes and Charges",
            "question": "Are any sales tax templates disabled for inter-state transactions?",
            "fields": [
                "account_head",
                "charge_type",
                "description"
            ]
        },
        "output": "frappe.get_list('Sales Taxes and Charges', filters={'description': ['like', '%inter-state%']}, fields=['account_head', 'charge_type'])"
    },
    {
        "input": {
            "doctype": "Account",
            "question": "What are the active expense accounts in our chart of accounts?",
            "fields": [
                "name",
                "account_type",
                "root_type",
                "is_group",
                "disabled"
            ]
        },
        "output": "frappe.get_list('Account', filters={'account_type': 'Expense', 'disabled': 0}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Account",
            "question": "Can you show me our entire chart of accounts grouped by type?",
            "fields": [
                "name",
                "account_type",
                "root_type"
            ]
        },
        "output": "frappe.get_all('Account', fields=['name', 'account_type', 'root_type'])"
    },
    {
        "input": {
            "doctype": "Account",
            "question": "Which accounts have been marked as frozen?",
            "fields": [
                "name",
                "freeze_account"
            ]
        },
        "output": "frappe.get_list('Account', filters={'freeze_account': 1}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Fiscal Year",
            "question": "What is the end date for the fiscal year 2025\u20132026?",
            "fields": [
                "year",
                "year_end_date"
            ]
        },
        "output": "frappe.db.get_value('Fiscal Year', {'year': '2025\u20132026'}, 'year_end_date')"
    },
    {
        "input": {
            "doctype": "Fiscal Year",
            "question": "Which fiscal year is currently set as the default in the system?",
            "fields": [
                "year",
                "disabled"
            ]
        },
        "output": "frappe.get_list('Fiscal Year', filters={'disabled': 0}, fields=['year'])"
    },
    {
        "input": {
            "doctype": "Currency",
            "question": "Is AED an enabled currency in the system?",
            "fields": [
                "enabled"
            ]
        },
        "output": "frappe.db.get_value('Currency', {'currency_name': 'AED'}, 'enabled')"
    },
    {
        "input": {
            "doctype": "Currency",
            "question": "What's the conversion rate between USD and INR?",
            "fields": [
                "conversion_rate"
            ]
        },
        "output": "frappe.db.get_value('Currency', {'currency_name': 'INR'}, 'conversion_rate')"
    },
    {
        "input": {
            "doctype": "Customer",
            "question": "What GST number is saved for customer 'Globe Enterprises'?",
            "fields": [
                "tax_id"
            ]
        },
        "output": "frappe.db.get_value('Customer', {'customer_name': 'Globe Enterprises'}, 'tax_id')"
    },
    {
        "input": {
            "doctype": "Supplier",
            "question": "Can you show me the GST details for supplier 'NorthStar Pvt Ltd'?",
            "fields": [
                "tax_id"
            ]
        },
        "output": "frappe.db.get_value('Supplier', {'supplier_name': 'NorthStar Pvt Ltd'}, 'tax_id')"
    },
    {
        "input": {
            "doctype": "Quotation",
            "question": "What is the total amount quoted to customer 'GreenMart' in the latest quotation?",
            "fields": [
                "party_name",
                "grand_total"
            ]
        },
        "output": "frappe.get_list('Quotation', filters={'party_name': 'GreenMart'}, fields=['grand_total'], order_by='creation desc', limit=1)"
    },
    {
        "input": {
            "doctype": "Supplier Quotation",
            "question": "When does the quotation from 'Raj Suppliers' expire?",
            "fields": [
                "supplier",
                "valid_till"
            ]
        },
        "output": "frappe.get_list('Supplier Quotation', filters={'supplier': 'Raj Suppliers'}, fields=['valid_till'], order_by='creation desc', limit=1)"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "What is the status of the sales order submitted by customer Ajith?",
            "fields": [
                "customer_name",
                "status"
            ]
        },
        "output": "frappe.get_list('Sales Order', filters={'customer_name': 'Ajith'}, fields=['status'], order_by='creation desc', limit=1)"
    },
    {
        "input": {
            "doctype": "Mode of Payment",
            "question": "Is UPI listed as an active mode of payment in the system?",
            "fields": [
                "mode_of_payment",
                "enabled"
            ]
        },
        "output": "frappe.db.get_value('Mode of Payment', {'mode_of_payment': 'UPI'}, 'enabled')"
    },
    {
        "input": {
            "doctype": "Sales Taxes and Charges",
            "question": "What tax rate is applied for inter-state sales in our current tax settings?",
            "fields": [
                "tax_category",
                "rate",
                "account_head"
            ]
        },
        "output": "frappe.get_list('Sales Taxes and Charges', filters={'tax_category': 'Inter-State Sales'}, fields=['account_head', 'rate'])"
    },
    {
        "input": {
            "doctype": "Purchase Order",
            "question": "Can you show me the details of the purchase order created for the vendor 'Vendora Public'?",
            "fields": [
                "supplier",
                "transaction_date",
                "status"
            ]
        },
        "output": "frappe.get_list('Purchase Order', filters={'supplier': 'Vendora Public'}, fields=['name', 'transaction_date', 'status'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Could you list all the sales invoices that were submitted during the last week?",
            "fields": [
                "posting_date",
                "status"
            ]
        },
        "output": "frappe.get_list('Sales Invoice', filters={'status': 'Submitted', 'posting_date': ['between', ['2025-04-22', '2025-04-29']]})"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Please show me all the purchase invoices that were recorded last month.",
            "fields": [
                "posting_date",
                "supplier",
                "status"
            ]
        },
        "output": "frappe.get_list('Purchase Invoice', filters={'posting_date': ['between', ['2025-03-01', '2025-03-31']]}, fields=['name', 'supplier', 'status'])"
    },
    {
        "input": {
            "doctype": "Delivery Note",
            "question": "Can you show me all delivery notes made in April 2025?",
            "fields": [
                "name",
                "posting_date",
                "customer",
                "grand_total"
            ]
        },
        "output": "frappe.get_list('Delivery Note', filters={'posting_date': ['between', ['2025-04-01', '2025-04-30']]}, fields=['name', 'posting_date', 'customer', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Delivery Note",
            "question": "What warehouse was used for the delivery note DN-00023?",
            "fields": [
                "set_warehouse"
            ]
        },
        "output": "frappe.db.get_value('Delivery Note', 'DN-00023', 'set_warehouse')"
    },
    {
        "input": {
            "doctype": "Sales Partner",
            "question": "What is the commission rate and territory for Sales Partner 'ABC Traders'?",
            "fields": [
                "commission_rate",
                "territory"
            ]
        },
        "output": "frappe.db.get_value('Sales Partner', 'ABC Traders', ['commission_rate', 'territory'])"
    },
    {
        "input": {
            "doctype": "Sales Partner",
            "question": "List all sales partners shown on the website.",
            "fields": [
                "partner_name",
                "territory"
            ]
        },
        "output": "frappe.get_list('Sales Partner', filters={'show_in_website': 1}, fields=['partner_name', 'territory'])"
    },
    {
        "input": {
            "doctype": "Contact",
            "question": "Get the email and phone number of the contact named 'Sana Shaikh'.",
            "fields": [
                "email_id",
                "phone"
            ]
        },
        "output": "frappe.db.get_value('Contact', 'Sana Shaikh', ['email_id', 'phone'])"
    },
    {
        "input": {
            "doctype": "Contact",
            "question": "Can you list all contacts created in the last 7 days?",
            "fields": [
                "first_name",
                "last_name",
                "email_id",
                "phone"
            ]
        },
        "output": "frappe.get_list('Contact', filters={ 'creation': ['>=', frappe.utils.add_days(frappe.utils.today(), -7)] }, fields=['first_name', 'last_name', 'email_id', 'phone'])"
    },
    {
        "input": {
            "doctype": "Address",
            "question": "Show all customer addresses located in Dubai.",
            "fields": [
                "address_title",
                "city",
                "address_line1",
                "customer"
            ]
        },
        "output": "frappe.get_list('Address', filters={ 'city': 'Dubai' }, fields=['address_title', 'address_line1', 'customer'])"
    },
    {
        "input": {
            "doctype": "Opportunity",
            "question": "List all open sales opportunities from the UAE region.",
            "fields": [
                "opportunity_type",
                "status",
                "territory",
                "customer_name"
            ]
        },
        "output": "frappe.get_list('Opportunity', filters={ 'status': 'Open', 'territory': 'UAE' }, fields=['opportunity_type', 'customer_name'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Can you show me all qualified leads with an email address?",
            "fields": [
                "lead_name",
                "email_id",
                "status"
            ]
        },
        "output": "frappe.get_list('Lead', filters={ 'status': 'Qualified', 'email_id': ['!=', ''] }, fields=['lead_name', 'email_id'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Get the name and stock unit of all active items used in manufacturing.",
            "fields": [
                "item_code",
                "item_name",
                "stock_uom",
                "include_item_in_manufacturing"
            ]
        },
        "output": "frappe.get_list('Item', filters={ 'disabled': 0, 'include_item_in_manufacturing': 1 }, fields=['item_code', 'item_name', 'stock_uom'])"
    },
    {
        "input": {
            "doctype": "Item Group",
            "question": "List all item groups currently in use for selling purposes.",
            "fields": [
                "name",
                "is_group"
            ]
        },
        "output": "frappe.get_list('Item Group', filters={ 'is_group': 0 }, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Bin",
            "question": "Show me all bins with negative stock quantity in the system.",
            "fields": [
                "item_code",
                "warehouse",
                "actual_qty"
            ]
        },
        "output": "frappe.get_list('Bin', filters={ 'actual_qty': ['<', 0] }, fields=['item_code', 'warehouse', 'actual_qty'])"
    },
    {
        "input": {
            "doctype": "Bin",
            "question": "Which items have more than 100 units reserved for production?",
            "fields": [
                "item_code",
                "reserved_qty_for_production"
            ]
        },
        "output": "frappe.get_list('Bin', filters={ 'reserved_qty_for_production': ['>', 100] }, fields=['item_code', 'reserved_qty_for_production'])"
    },
    {
        "input": {
            "doctype": "Batch",
            "question": "Find all batches of item 'EcoFilter Max' expiring this month.",
            "fields": [
                "batch_id",
                "item",
                "expiry_date"
            ]
        },
        "output": "frappe.get_list('Batch', filters={ 'item': 'EcoFilter Max', 'expiry_date': ['between', ['2025-05-01', '2025-05-31']] }, fields=['batch_id', 'expiry_date'])"
    },
    {
        "input": {
            "doctype": "Batch",
            "question": "List batches produced by supplier 'FreshChem Ltd'.",
            "fields": [
                "batch_id",
                "supplier",
                "item"
            ]
        },
        "output": "frappe.get_list('Batch', filters={ 'supplier': 'FreshChem Ltd' }, fields=['batch_id', 'item'])"
    },
    {
        "input": {
            "doctype": "Stock Entry",
            "question": "Get all stock entries for raw material transfers this quarter.",
            "fields": [
                "name",
                "stock_entry_type",
                "posting_date",
                "company"
            ]
        },
        "output": "frappe.get_list('Stock Entry', filters={ 'stock_entry_type': 'Material Transfer', 'posting_date': ['between', ['2025-04-01', '2025-06-30']] }, fields=['name', 'posting_date', 'company'])"
    },
    {
        "input": {
            "doctype": "Stock Entry",
            "question": "Which stock entries were submitted for subcontracting orders?",
            "fields": [
                "name",
                "subcontracting_order",
                "stock_entry_type"
            ]
        },
        "output": "frappe.get_list('Stock Entry', filters={ 'stock_entry_type': 'Subcontract', 'subcontracting_order': ['!=', ''] }, fields=['name', 'subcontracting_order'])"
    },
    {
        "input": {
            "doctype": "Stock Ledger Entry",
            "question": "Show all stock movements for item 'Widget-X200' in warehouse 'Main Store'.",
            "fields": [
                "item_code",
                "warehouse",
                "posting_date",
                "actual_qty"
            ]
        },
        "output": "frappe.get_list('Stock Ledger Entry', filters={ 'item_code': 'Widget-X200', 'warehouse': 'Main Store' }, fields=['posting_date', 'actual_qty'])"
    },
    {
        "input": {
            "doctype": "Stock Ledger Entry",
            "question": "Get valuation rate changes for 'Product Y' over the last 30 days.",
            "fields": [
                "item_code",
                "posting_date",
                "valuation_rate"
            ]
        },
        "output": "frappe.get_list('Stock Ledger Entry', filters={ 'item_code': 'Product Y', 'posting_date': ['>=', frappe.utils.add_days(frappe.utils.today(), -30)] }, fields=['posting_date', 'valuation_rate'])"
    },
    {
        "input": {
            "doctype": "Batch",
            "question": "Where can I find the details of the batch with ID 'BATCH-00123'?",
            "fields": [
                "item",
                "manufacturing_date",
                "expiry_date"
            ]
        },
        "output": "frappe.db.get_value('Batch', {'batch_id': 'BATCH-00123'}, ['item', 'manufacturing_date', 'expiry_date'])"
    },
    {
        "input": {
            "doctype": "Serial No",
            "question": "What item is linked to serial number 'SN-9001'?",
            "fields": [
                "item_code",
                "status",
                "warehouse"
            ]
        },
        "output": "frappe.db.get_value('Serial No', {'serial_no': 'SN-9001'}, ['item_code', 'status', 'warehouse'])"
    },
    {
        "input": {
            "doctype": "Stock Reconciliation",
            "question": "Show all stock reconciliations done in April 2025.",
            "fields": [
                "name",
                "posting_date",
                "company"
            ]
        },
        "output": "frappe.get_list('Stock Reconciliation', filters={ 'posting_date': ['between', ['2025-04-01', '2025-04-30']] }, fields=['name', 'posting_date', 'company'])"
    },
    {
        "input": {
            "doctype": "Warehouse",
            "question": "Give me the contact details for the warehouse named 'Main Store'.",
            "fields": [
                "email_id",
                "phone_no",
                "address_line_1"
            ]
        },
        "output": "frappe.db.get_value('Warehouse', {'warehouse_name': 'Main Store'}, ['email_id', 'phone_no', 'address_line_1'])"
    },
    {
        "input": {
            "doctype": "UOM",
            "question": "Is the unit 'Box' enabled in the system?",
            "fields": [
                "enabled"
            ]
        },
        "output": "frappe.db.get_value('UOM', {'uom_name': 'Box'}, 'enabled')"
    },
    {
        "input": {
            "doctype": "Serial No",
            "question": "Where is serial number 'SN-X1005' stored and what is its status?",
            "fields": [
                "warehouse",
                "status"
            ]
        },
        "output": "frappe.db.get_value('Serial No', {'serial_no': 'SN-X1005'}, ['warehouse', 'status'])"
    },
    {
        "input": {
            "doctype": "Stock Reconciliation",
            "question": "Which account was used for the last stock reconciliation?",
            "fields": [
                "expense_account"
            ]
        },
        "output": "frappe.get_list('Stock Reconciliation', fields=['expense_account'], limit=1, order_by='posting_date desc')"
    },
    {
        "input": {
            "doctype": "Warehouse",
            "question": "List all active warehouses for the company 'HTS Pvt Ltd'.",
            "fields": [
                "warehouse_name",
                "disabled"
            ]
        },
        "output": "frappe.get_list('Warehouse', filters={'company': 'HTS Pvt Ltd', 'disabled': 0}, fields=['warehouse_name'])"
    },
    {
        "input": {
            "doctype": "UOM",
            "question": "List all enabled units of measurement used in transactions.",
            "fields": [
                "uom_name",
                "enabled"
            ]
        },
        "output": "frappe.get_list('UOM', filters={'enabled': 1}, fields=['uom_name'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "How can I list all payment entries made by customers this month?",
            "fields": [
                "payment_type",
                "party_type",
                "posting_date"
            ]
        },
        "output": "frappe.get_list('Payment Entry', filters={'payment_type': 'Receive', 'party_type': 'Customer'}, fields=['name', 'party', 'paid_amount', 'posting_date'])"
    },
    {
        "input": {
            "doctype": "Journal Entry",
            "question": "Can you show me journal entries made for tax adjustments?",
            "fields": [
                "voucher_type",
                "posting_date"
            ]
        },
        "output": "frappe.get_list('Journal Entry', filters={'voucher_type': 'Tax Adjustment'}, fields=['name', 'posting_date', 'company'])"
    },
    {
        "input": {
            "doctype": "Journal Entry",
            "question": "What types of information are stored in the Journal Entry doctype?",
            "fields": [
                "voucher_type",
                "posting_date",
                "accounts"
            ]
        },
        "output": "frappe.get_list('Journal Entry', fields=['name', 'voucher_type', 'posting_date', 'total_debit', 'total_credit'])"
    },
    {
        "input": {
            "doctype": "Journal Entry",
            "question": "Where can I find the settings or configurations for journal entries?",
            "fields": [
                "naming_series",
                "voucher_type"
            ]
        },
        "output": "frappe.get_list('Journal Entry', fields=['naming_series', 'voucher_type', 'company'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "What details are maintained in the Purchase Invoice doctype?",
            "fields": [
                "supplier",
                "posting_date",
                "total"
            ]
        },
        "output": "frappe.get_list('Purchase Invoice', fields=['name', 'supplier', 'posting_date', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Where can I check system settings related to Purchase Invoices?",
            "fields": [
                "naming_series",
                "posting_date"
            ]
        },
        "output": "frappe.get_list('Purchase Invoice', fields=['naming_series', 'posting_date', 'company'])"
    },
    {
        "input": {
            "doctype": "Sales Taxes and Charges",
            "question": "What kind of data is stored in the Sales Taxes and Charges doctype?",
            "fields": [
                "charge_type",
                "account_head",
                "rate"
            ]
        },
        "output": "frappe.get_list('Sales Taxes and Charges', fields=['charge_type', 'account_head', 'rate'])"
    },
    {
        "input": {
            "doctype": "Sales Taxes and Charges",
            "question": "Where do I configure default settings for sales tax templates?",
            "fields": [
                "charge_type",
                "description"
            ]
        },
        "output": "frappe.get_list('Sales Taxes and Charges', fields=['name', 'charge_type', 'description'])"
    },
    {
        "input": {
            "doctype": "Pricing Rule",
            "question": "What data can I retrieve from Pricing Rule records?",
            "fields": [
                "title",
                "apply_on",
                "rate"
            ]
        },
        "output": "frappe.get_list('Pricing Rule', fields=['title', 'apply_on', 'rate'])"
    },
    {
        "input": {
            "doctype": "Pricing Rule",
            "question": "Where do I find configuration for discount logic in Pricing Rules?",
            "fields": [
                "discount_amount",
                "apply_discount_on"
            ]
        },
        "output": "frappe.get_list('Pricing Rule', fields=['name', 'apply_discount_on', 'discount_amount'])"
    },
    {
        "input": {
            "doctype": "Tax Rule",
            "question": "What kind of filters are defined in Tax Rule records?",
            "fields": [
                "billing_state",
                "shipping_state",
                "tax_category"
            ]
        },
        "output": "frappe.get_list('Tax Rule', fields=['tax_category', 'billing_state', 'shipping_state'])"
    },
    {
        "input": {
            "doctype": "Tax Rule",
            "question": "Where can I view rules applying to tax categories by state?",
            "fields": [
                "tax_category",
                "billing_state"
            ]
        },
        "output": "frappe.get_list('Tax Rule', fields=['name', 'tax_category', 'billing_state'])"
    },
    {
        "input": {
            "doctype": "Mode of Payment",
            "question": "Can you list all active payment modes used in transactions?",
            "fields": [
                "mode_of_payment",
                "enabled"
            ]
        },
        "output": "frappe.get_list('Mode of Payment', filters={'enabled': 1}, fields=['mode_of_payment'])"
    },
    {
        "input": {
            "doctype": "Mode of Payment",
            "question": "Where can I find all payment types like Cash or Bank?",
            "fields": [
                "mode_of_payment",
                "type"
            ]
        },
        "output": "frappe.get_list('Mode of Payment', fields=['mode_of_payment', 'type'])"
    },
    {
        "input": {
            "doctype": "Account",
            "question": "Show me all group accounts used in the Chart of Accounts.",
            "fields": [
                "account_name",
                "is_group"
            ]
        },
        "output": "frappe.get_list('Account', filters={'is_group': 1}, fields=['account_name'])"
    },
    {
        "input": {
            "doctype": "Account",
            "question": "Where can I check account types and currency settings?",
            "fields": [
                "account_type",
                "account_currency"
            ]
        },
        "output": "frappe.get_list('Account', fields=['name', 'account_type', 'account_currency'])"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Which fields store company identity and tax settings?",
            "fields": [
                "company_name",
                "tax_id",
                "default_currency"
            ]
        },
        "output": "frappe.get_list('Company', fields=['company_name', 'tax_id', 'default_currency'])"
    },
    {
        "input": {
            "doctype": "Company",
            "question": "Where do I find the accounts configured under each company?",
            "fields": [
                "default_bank_account",
                "default_receivable_account",
                "default_payable_account"
            ]
        },
        "output": "frappe.get_list('Company', fields=['name', 'default_bank_account', 'default_receivable_account', 'default_payable_account'])"
    },
    {
        "input": {
            "doctype": "Cost Center",
            "question": "List all active cost centers under a specific company.",
            "fields": [
                "cost_center_name",
                "company",
                "disabled"
            ]
        },
        "output": "frappe.get_list('Cost Center', filters={'disabled': 0}, fields=['cost_center_name', 'company'])"
    },
    {
        "input": {
            "doctype": "Cost Center",
            "question": "How do I check if a cost center is a group node?",
            "fields": [
                "cost_center_name",
                "is_group"
            ]
        },
        "output": "frappe.get_list('Cost Center', fields=['cost_center_name', 'is_group'])"
    },
    {
        "input": {
            "doctype": "Supplier",
            "question": "What is the purpose of the Supplier doctype?",
            "fields": [
                "supplier_name",
                "supplier_type",
                "supplier_group",
                "country"
            ]
        },
        "output": "frappe.get_list('Supplier', fields=['supplier_name', 'supplier_type', 'supplier_group', 'country'])"
    },
    {
        "input": {
            "doctype": "Supplier",
            "question": "Where can I configure settings for Supplier?",
            "fields": [
                "allow_purchase_invoice_creation_without_purchase_order",
                "allow_purchase_invoice_creation_without_purchase_receipt"
            ]
        },
        "output": "frappe.get_list('Supplier', fields=['supplier_name', 'allow_purchase_invoice_creation_without_purchase_order', 'allow_purchase_invoice_creation_without_purchase_receipt'])"
    },
    {
        "input": {
            "doctype": "Purchase Order",
            "question": "What is the purpose of the Purchase Order doctype?",
            "fields": [
                "supplier",
                "company",
                "grand_total"
            ]
        },
        "output": "frappe.get_list('Purchase Order', fields=['supplier', 'company', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Purchase Order",
            "question": "Where can I configure settings for Purchase Order?",
            "fields": [
                "buying_price_list",
                "payment_terms_template"
            ]
        },
        "output": "frappe.get_list('Purchase Order', fields=['name', 'buying_price_list', 'payment_terms_template'])"
    },
    {
        "input": {
            "doctype": "Purchase Receipt",
            "question": "What is the purpose of the Purchase Receipt doctype?",
            "fields": [
                "supplier",
                "company",
                "grand_total"
            ]
        },
        "output": "frappe.get_list('Purchase Receipt', fields=['supplier', 'company', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Purchase Receipt",
            "question": "Where can I configure settings for Purchase Receipt?",
            "fields": [
                "buying_price_list",
                "payment_terms_template"
            ]
        },
        "output": "frappe.get_list('Purchase Receipt', fields=['name', 'buying_price_list', 'payment_terms_template'])"
    },
    {
        "input": {
            "doctype": "Supplier Quotation",
            "question": "What is the purpose of the Supplier Quotation doctype?",
            "fields": [
                "supplier",
                "transaction_date",
                "grand_total"
            ]
        },
        "output": "frappe.get_list('Supplier Quotation', fields=['supplier', 'transaction_date', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Supplier Quotation",
            "question": "Where can I configure settings for Supplier Quotation?",
            "fields": [
                "buying_price_list",
                "payment_terms_template"
            ]
        },
        "output": "frappe.get_list('Supplier Quotation', fields=['name', 'buying_price_list', 'payment_terms_template'])"
    },
    {
        "input": {
            "doctype": "Request for Quotation",
            "question": "What is the purpose of the Request for Quotation doctype?",
            "fields": [
                "transaction_date",
                "company",
                "suppliers"
            ]
        },
        "output": "frappe.get_list('Request for Quotation', fields=['name', 'transaction_date', 'company', 'suppliers'])"
    },
    {
        "input": {
            "doctype": "Purchase Taxes and Charges",
            "question": "What kind of taxes are set in Purchase Taxes and Charges records?",
            "fields": [
                "charge_type",
                "account_head",
                "rate"
            ]
        },
        "output": "frappe.get_list('Purchase Taxes and Charges', fields=['charge_type', 'account_head', 'rate'])"
    },
    {
        "input": {
            "doctype": "Purchase Taxes and Charges",
            "question": "Where can I configure settings for Purchase Taxes and Charges?",
            "fields": [
                "name",
                "category",
                "charge_type",
                "rate",
                "account_head"
            ]
        },
        "output": "frappe.get_list('Purchase Taxes and Charges', fields=['name', 'category', 'charge_type', 'rate', 'account_head'])"
    },
    {
        "input": {
            "doctype": "Project",
            "question": "Create a new project for client onboarding.",
            "fields": [
                "project_name",
                "status",
                "priority"
            ]
        },
        "output": "frappe.get_list('Project', filters={'project_name': ['like', '%client onboarding%']}, fields=['project_name', 'status', 'priority'])"
    },
    {
        "input": {
            "doctype": "Task",
            "question": "Assign a task to the development team.",
            "fields": [
                "subject",
                "status",
                "department"
            ]
        },
        "output": "frappe.get_list('Task', filters={'department': 'Development'}, fields=['subject', 'status', 'department'])"
    },
    {
        "input": {
            "doctype": "Task",
            "question": "What is the purpose of the Task doctype?",
            "fields": [
                "subject",
                "status",
                "project"
            ]
        },
        "output": "frappe.get_list('Task', fields=['subject', 'status', 'project'])"
    },
    {
        "input": {
            "doctype": "Task",
            "question": "Where can I configure settings for Task?",
            "fields": [
                "subject",
                "status"
            ]
        },
        "output": "frappe.get_list('Task', fields=['subject', 'status'])"
    },
    {
        "input": {
            "doctype": "BOM",
            "question": "What is the purpose of the BOM doctype?",
            "fields": [
                "item",
                "quantity",
                "total_cost"
            ]
        },
        "output": "frappe.get_list('BOM', fields=['item', 'quantity', 'total_cost'])"
    },
    {
        "input": {
            "doctype": "BOM",
            "question": "Where can I configure settings for BOM?",
            "fields": [
                "item",
                "is_default"
            ]
        },
        "output": "frappe.get_list('BOM', filters={'is_default': 1}, fields=['item', 'is_default'])"
    },
    {
        "input": {
            "doctype": "Work Order",
            "question": "What is the purpose of the Work Order doctype?",
            "fields": [
                "production_item",
                "bom_no",
                "status"
            ]
        },
        "output": "frappe.get_list('Work Order', fields=['production_item', 'bom_no', 'status'])"
    },
    {
        "input": {
            "doctype": "Work Order",
            "question": "Where can I configure settings for Work Order?",
            "fields": [
                "source_warehouse",
                "wip_warehouse",
                "fg_warehouse"
            ]
        },
        "output": "frappe.get_list('Work Order', fields=['source_warehouse', 'wip_warehouse', 'fg_warehouse'])"
    },
    {
        "input": {
            "doctype": "Production Plan",
            "question": "What is the purpose of the Production Plan doctype?",
            "fields": [
                "company",
                "from_date",
                "to_date",
                "status"
            ]
        },
        "output": "frappe.get_list('Production Plan', fields=['company', 'from_date', 'to_date', 'status'])"
    },
    {
        "input": {
            "doctype": "Job Card",
            "question": "What is the purpose of the Job Card doctype?",
            "fields": [
                "work_order",
                "employee",
                "status"
            ]
        },
        "output": "frappe.get_list('Job Card', fields=['work_order', 'employee', 'status'])"
    },
    {
        "input": {
            "doctype": "Job Card",
            "question": "Show me all job cards with their associated work orders and start dates.",
            "fields": [
                "name",
                "work_order",
                "actual_start_date"
            ]
        },
        "output": "frappe.get_list('Job Card', fields=['name', 'work_order', 'actual_start_date'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "List all employees with their email addresses and departments.",
            "fields": [
                "employee_name",
                "company_email",
                "department"
            ]
        },
        "output": "frappe.get_list('Employee', fields=['employee_name', 'company_email', 'department'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Get all active employees and their contact numbers.",
            "fields": [
                "employee_name",
                "status",
                "cell_number"
            ]
        },
        "output": "frappe.get_list('Employee', fields=['employee_name', 'status', 'cell_number'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Fetch email and phone details for each employee.",
            "fields": [
                "employee_name",
                "company_email",
                "cell_number"
            ]
        },
        "output": "frappe.get_list('Employee', fields=['employee_name', 'company_email', 'cell_number'])"
    },
    {
        "input": {
            "doctype": "Department",
            "question": "List all departments in each company.",
            "fields": [
                "department_name",
                "company"
            ]
        },
        "output": "frappe.get_list('Department', fields=['department_name', 'company'])"
    },
    {
        "input": {
            "doctype": "Department",
            "question": "Show me enabled and grouped departments.",
            "fields": [
                "department_name",
                "company",
                "is_group"
            ]
        },
        "output": "frappe.get_list('Department', fields=['department_name', 'company', 'is_group'])"
    },
    {
        "input": {
            "doctype": "Designation",
            "question": "List all designations with their descriptions.",
            "fields": [
                "designation_name",
                "description"
            ]
        },
        "output": "frappe.get_list('Designation', fields=['designation_name', 'description'])"
    },
    {
        "input": {
            "doctype": "Designation",
            "question": "Get names of all designations in the system.",
            "fields": [
                "designation_name"
            ]
        },
        "output": "frappe.get_list('Designation', fields=['designation_name'])"
    },
    {
        "input": {
            "doctype": "Fiscal Year",
            "question": "List all fiscal years with their start and end dates.",
            "fields": [
                "year",
                "year_start_date",
                "year_end_date"
            ]
        },
        "output": "frappe.get_list('Fiscal Year', fields=['year', 'year_start_date', 'year_end_date'])"
    },
    {
        "input": {
            "doctype": "Fiscal Year",
            "question": "Get fiscal years and their companies.",
            "fields": [
                "year",
                "disabled",
                "companies"
            ]
        },
        "output": "frappe.get_list('Fiscal Year', fields=['year', 'disabled', 'companies'])"
    },
    {
        "input": {
            "doctype": "Currency",
            "question": "List all currencies with their symbols and fractions.",
            "fields": [
                "currency_name",
                "symbol",
                "fraction_units"
            ]
        },
        "output": "frappe.get_list('Currency', fields=['currency_name', 'symbol', 'fraction_units'])"
    },
    {
        "input": {
            "doctype": "Currency",
            "question": "Show all enabled currencies and their formats.",
            "fields": [
                "currency_name",
                "enabled",
                "number_format"
            ]
        },
        "output": "frappe.get_list('Currency', fields=['currency_name', 'enabled', 'number_format'])"
    },
    {
        "input": {
            "doctype": "Buying Settings",
            "question": "Fetch the default price list and purchase order requirements.",
            "fields": [
                "buying_price_list",
                "po_required"
            ]
        },
        "output": "frappe.db.get_value('Buying Settings', None, ['buying_price_list', 'po_required'])"
    },
    {
        "input": {
            "doctype": "Journal Entry",
            "question": "Fetch journal entries created recently for financial records.",
            "fields": [
                "name",
                "posting_date",
                "company",
                "voucher_type",
                "total_debit",
                "total_credit"
            ]
        },
        "output": "frappe.get_list('Journal Entry', filters={'posting_date': ['>=', frappe.utils.add_days(frappe.utils.today(), -30)]}, fields=['name', 'posting_date', 'company', 'voucher_type', 'total_debit', 'total_credit'])"
    },
    {
        "input": {
            "doctype": "Asset Maintenance",
            "question": "Retrieve a list of assets that are currently under maintenance.",
            "fields": [
                "name",
                "asset_name",
                "maintenance_manager",
                "company"
            ]
        },
        "output": "frappe.get_list('Asset Maintenance', filters={}, fields=['name', 'asset_name', 'maintenance_manager', 'company'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Get all payment entries related to customer invoices.",
            "fields": [
                "name",
                "party",
                "payment_type",
                "posting_date",
                "paid_amount",
                "mode_of_payment"
            ]
        },
        "output": "frappe.get_list('Payment Entry', filters={'party_type': 'Customer'}, fields=['name', 'party', 'payment_type', 'posting_date', 'paid_amount', 'mode_of_payment'])"
    },
    {
        "input": {
            "doctype": "Subscription",
            "question": "List all active subscriptions with their start dates.",
            "fields": [
                "name",
                "party",
                "start_date",
                "end_date",
                "company"
            ]
        },
        "output": "frappe.get_list('Subscription', filters={'status': 'Active'}, fields=['name', 'party', 'start_date', 'end_date', 'company'])"
    },
    {
        "input": {
            "doctype": "Production Plan",
            "question": "View all production plans scheduled for the next month.",
            "fields": [
                "name",
                "company",
                "from_date",
                "to_date",
                "status"
            ]
        },
        "output": "frappe.get_list('Production Plan', filters={'from_date': ['>=', frappe.utils.add_months(frappe.utils.today(), 1)]}, fields=['name', 'company', 'from_date', 'to_date', 'status'])"
    },
    {
        "input": {
            "doctype": "Quotation",
            "question": "Can you show me quotations created for customers?",
            "fields": [
                "name",
                "party_name",
                "transaction_date",
                "company",
                "grand_total"
            ]
        },
        "output": "frappe.get_list('Quotation', filters={'quotation_to': 'Customer'}, fields=['name', 'party_name', 'transaction_date', 'company', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Supplier Quotation",
            "question": "List all supplier quotations we\u2019ve received recently.",
            "fields": [
                "name",
                "supplier",
                "transaction_date",
                "company",
                "grand_total"
            ]
        },
        "output": "frappe.get_list('Supplier Quotation', filters={}, fields=['name', 'supplier', 'transaction_date', 'company', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Where can I find or update employee contact details?",
            "fields": [
                "employee_name",
                "cell_number",
                "personal_email",
                "company_email"
            ]
        },
        "output": "frappe.get_list('Employee', filters={}, fields=['employee_name', 'cell_number', 'personal_email', 'company_email'])"
    },
    {
        "input": {
            "doctype": "Delivery Note",
            "question": "How do I check which orders have been delivered recently?",
            "fields": [
                "name",
                "customer",
                "posting_date",
                "status",
                "company"
            ]
        },
        "output": "frappe.get_list('Delivery Note', filters={'status': 'Completed'}, fields=['name', 'customer', 'posting_date', 'status', 'company'])"
    },
    {
        "input": {
            "doctype": "Customer",
            "question": "Where can I view or update a customer's delivery address?",
            "fields": [
                "name",
                "customer_name",
                "customer_address"
            ]
        },
        "output": "frappe.get_list('Customer', filters={}, fields=['name', 'customer_name', 'customer_address'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Show me all sales invoices submitted last week.",
            "fields": [
                "name",
                "customer",
                "posting_date",
                "grand_total",
                "status"
            ]
        },
        "output": "frappe.get_list('Sales Invoice', filters={'posting_date': ['between', [frappe.utils.add_days(frappe.utils.today(), -7), frappe.utils.today()]]}, fields=['name', 'customer', 'posting_date', 'grand_total', 'status'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Can I see all purchase invoices received from suppliers?",
            "fields": [
                "name",
                "supplier",
                "posting_date",
                "grand_total",
                "status"
            ]
        },
        "output": "frappe.get_list('Purchase Invoice', filters={}, fields=['name', 'supplier', 'posting_date', 'grand_total', 'status'])"
    },
    {
        "input": {
            "doctype": "Journal Entry",
            "question": "List all journal entries posted this month.",
            "fields": [
                "name",
                "posting_date",
                "company",
                "voucher_type",
                "total_debit",
                "total_credit"
            ]
        },
        "output": "frappe.get_list('Journal Entry', filters={'posting_date': ['>=', frappe.utils.get_first_day(frappe.utils.today())]}, fields=['name', 'posting_date', 'company', 'voucher_type', 'total_debit', 'total_credit'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "View all payment entries linked to customer invoices.",
            "fields": [
                "name",
                "party",
                "payment_type",
                "posting_date",
                "paid_amount"
            ]
        },
        "output": "frappe.get_list('Payment Entry', filters={'party_type': 'Customer'}, fields=['name', 'party', 'payment_type', 'posting_date', 'paid_amount'])"
    },
    {
        "input": {
            "doctype": "Production Plan",
            "question": "Show me all production plans for March orders.",
            "fields": [
                "name",
                "from_date",
                "to_date",
                "status",
                "company"
            ]
        },
        "output": "frappe.get_list('Production Plan', filters={'from_date': ['between', ['2025-03-01', '2025-03-31']]}, fields=['name', 'from_date', 'to_date', 'status', 'company'])"
    },
    {
        "input": {
            "doctype": "Stock Reservation Entry",
            "question": "Which items are currently reserved in stock for production?",
            "fields": [
                "item_code",
                "reserved_qty",
                "warehouse",
                "voucher_type",
                "status"
            ]
        },
        "output": "frappe.get_list('Stock Reservation Entry', filters={}, fields=['item_code', 'reserved_qty', 'warehouse', 'voucher_type', 'status'])"
    },
    {
        "input": {
            "doctype": "Purchase Order",
            "question": "What purchase orders did we issue last month to suppliers?",
            "fields": [
                "name",
                "supplier",
                "transaction_date",
                "company",
                "grand_total"
            ]
        },
        "output": "frappe.get_list('Purchase Order', filters={'transaction_date': ['between', ['2025-04-01', '2025-04-30']]}, fields=['name', 'supplier', 'transaction_date', 'company', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Purchase Order",
            "question": "Which supplier has the highest total order value this quarter?",
            "fields": [
                "supplier",
                "grand_total"
            ]
        },
        "output": "frappe.get_list('Purchase Order', filters={'transaction_date': ['between', ['2025-01-01', '2025-03-31']]}, fields=['supplier', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Pricing Rule Item Group",
            "question": "What discount rules are defined for the 'Electronics' item group?",
            "fields": [
                "item_group",
                "uom"
            ]
        },
        "output": "frappe.get_list('Pricing Rule Item Group', filters={'item_group': 'Electronics'}, fields=['item_group', 'uom'])"
    },
    {
        "input": {
            "doctype": "Pricing Rule Item Group",
            "question": "Are there pricing rules based on unit of measurement?",
            "fields": [
                "item_group",
                "uom"
            ]
        },
        "output": "frappe.get_list('Pricing Rule Item Group', filters={'uom': ['!=', '']}, fields=['item_group', 'uom'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Which purchase invoices are overdue for payment?",
            "fields": [
                "name",
                "supplier",
                "posting_date",
                "due_date",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_list('Purchase Invoice', filters={'outstanding_amount': ['>', 0], 'due_date': ['<', frappe.utils.today()]}, fields=['name', 'supplier', 'posting_date', 'due_date', 'outstanding_amount'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Can I get a list of invoices with outstanding amounts over $5000?",
            "fields": [
                "name",
                "supplier",
                "posting_date",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_list('Purchase Invoice', filters={'outstanding_amount': ['>', 5000]}, fields=['name', 'supplier', 'posting_date', 'outstanding_amount'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "How many invoices include both items and tax charges?",
            "fields": [
                "name",
                "items",
                "taxes"
            ]
        },
        "output": "frappe.get_list('Purchase Invoice', filters={'items': ['!=', []], 'taxes': ['!=', []]}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Help Article",
            "question": "Are there any help articles not yet published?",
            "fields": [
                "title",
                "published"
            ]
        },
        "output": "frappe.get_list('Help Article', filters={'published': 0}, fields=['title', 'published'])"
    },
    {
        "input": {
            "doctype": "Purchase Order",
            "question": "Show me purchase orders with a delivery schedule next week.",
            "fields": [
                "name",
                "supplier",
                "schedule_date",
                "company"
            ]
        },
        "output": "frappe.get_list('Purchase Order', filters={'schedule_date': ['between', [frappe.utils.add_days(frappe.utils.today(), 1), frappe.utils.add_days(frappe.utils.today(), 7)]]}, fields=['name', 'supplier', 'schedule_date', 'company'])"
    },
    {
        "input": {
            "doctype": "Purchase Order",
            "question": "Can I view all purchase orders that have not yet been billed?",
            "fields": [
                "name",
                "supplier",
                "per_billed"
            ]
        },
        "output": "frappe.get_list('Purchase Order', filters={'per_billed': ['<', 100]}, fields=['name', 'supplier', 'per_billed'])"
    },
    {
        "input": {
            "doctype": "Purchase Order",
            "question": "Which purchase orders include taxes and shipping charges?",
            "fields": [
                "name",
                "taxes_and_charges",
                "shipping_rule"
            ]
        },
        "output": "frappe.get_list('Purchase Order', filters={'taxes_and_charges': ['!=', ''], 'shipping_rule': ['!=', '']}, fields=['name', 'taxes_and_charges', 'shipping_rule'])"
    },
    {
        "input": {
            "doctype": "Help Article",
            "question": "Show me articles authored by \u201cJane Smith\u201d.",
            "fields": [
                "title",
                "author",
                "published"
            ]
        },
        "output": "frappe.get_list('Help Article', filters={'author': 'Jane Smith'}, fields=['title', 'author', 'published'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Show all purchase invoices billed by \u201cAcme Supplies\u201d last quarter.",
            "fields": [
                "name",
                "supplier",
                "posting_date",
                "grand_total"
            ]
        },
        "output": "frappe.get_list('Purchase Invoice', filters={'supplier': 'Acme Supplies', 'posting_date': ['between', ['2025-01-01', '2025-03-31']]}, fields=['name', 'supplier', 'posting_date', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "What is the total billed amount from each supplier this month?",
            "fields": [
                "supplier",
                "grand_total"
            ]
        },
        "output": "frappe.get_list('Purchase Invoice', filters={'posting_date': ['between', ['2025-05-01', '2025-05-31']]}, fields=['supplier', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Subscription",
            "question": "Which customers have subscriptions ending this month?",
            "fields": [
                "party",
                "end_date"
            ]
        },
        "output": "frappe.get_list('Subscription', filters={'end_date': ['between', ['2025-05-01', '2025-05-31']]}, fields=['party', 'end_date'])"
    },
    {
        "input": {
            "doctype": "Subscription",
            "question": "Show me subscriptions that include additional discounts.",
            "fields": [
                "party",
                "additional_discount_percentage",
                "additional_discount_amount"
            ]
        },
        "output": "frappe.get_list('Subscription', filters={'additional_discount_percentage': ['>', 0]}, fields=['party', 'additional_discount_percentage', 'additional_discount_amount'])"
    },
    {
        "input": {
            "doctype": "Subscription",
            "question": "How many subscriptions are set to auto-submit invoices?",
            "fields": [
                "party",
                "submit_invoice"
            ]
        },
        "output": "frappe.get_list('Subscription', filters={'submit_invoice': 1}, fields=['party', 'submit_invoice'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "List overdue purchase invoices posted on March 1, 2024.",
            "fields": [
                "name",
                "posting_date",
                "due_date",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_list('Purchase Invoice', filters={'posting_date': '2024-03-01', 'outstanding_amount': ['>', 0], 'due_date': ['<', frappe.utils.today()]}, fields=['name', 'posting_date', 'due_date', 'outstanding_amount'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Any overdue purchase invoices from 9th April 2001?",
            "fields": [
                "name",
                "posting_date",
                "due_date",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_list('Purchase Invoice', filters={'posting_date': '2001-04-09', 'outstanding_amount': ['>', 0], 'due_date': ['<', frappe.utils.today()]}, fields=['name', 'posting_date', 'due_date', 'outstanding_amount'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Does purchase invoice `PINV-00712` exist?",
            "fields": [
                "name"
            ]
        },
        "output": "frappe.db.exists('Purchase Invoice', 'PINV-00712')"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Can you check if invoice `PINV-00123` is in the system?",
            "fields": [
                "name"
            ]
        },
        "output": "frappe.db.exists('Purchase Invoice', 'PINV-00123')"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Fetch full details of purchase invoice `PINV-00456`.",
            "fields": [
                "*"
            ]
        },
        "output": "frappe.get_doc('Purchase Invoice', 'PINV-00456')"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Has purchase invoice `PINV-00021` been fully paid off?",
            "fields": [
                "name",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_value('Purchase Invoice', 'PINV-00021', 'outstanding_amount')"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Is there any balance left on invoice `PINV-00456`?",
            "fields": [
                "name",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_value('Purchase Invoice', 'PINV-00456', 'outstanding_amount')"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "List all purchase invoices created today.",
            "fields": [
                "name",
                "posting_date",
                "supplier",
                "grand_total"
            ]
        },
        "output": "frappe.get_list('Purchase Invoice', filters={'posting_date': frappe.utils.today()}, fields=['name', 'posting_date', 'supplier', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Show me today's submitted purchase invoices.",
            "fields": [
                "name",
                "posting_date",
                "supplier",
                "grand_total",
                "status"
            ]
        },
        "output": "frappe.get_list('Purchase Invoice', filters={'posting_date': frappe.utils.today(), 'status': 'Submitted'}, fields=['name', 'posting_date', 'supplier', 'grand_total', 'status'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Total number of purchase invoices created last week?",
            "fields": [
                "name"
            ]
        },
        "output": "frappe.db.count('Purchase Invoice', {'posting_date': ['between', [frappe.utils.add_days(frappe.utils.today(), -7), frappe.utils.today()]]})"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Is purchase invoice `PINV-00456` a return or a normal one?",
            "fields": [
                "is_return"
            ]
        },
        "output": "frappe.get_value('Purchase Invoice', 'PINV-00456', 'is_return')"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Which currency and exchange rate were used for transaction on invoice `vctx4ujun8`?",
            "fields": [
                "currency",
                "conversion_rate"
            ]
        },
        "output": "frappe.get_value('Purchase Invoice', 'vctx4ujun8', ['currency', 'conversion_rate'])"
    },
    {
        "input": {
            "doctype": "Purchase Invoice",
            "question": "Can you tell me the cost center this invoice `INV-00987` is booked against?",
            "fields": [
                "cost_center"
            ]
        },
        "output": "frappe.get_value('Purchase Invoice', 'INV-00987', 'cost_center')"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "What is the description of the landed cost component 'LCTC-0001'?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0001', 'description')"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "Can you provide the details of the landed cost component 'LCTC-0002'?",
            "fields": [
                "*"
            ]
        },
        "output": "frappe.get_doc('Landed Cost Taxes and Charges', 'LCTC-0002')"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "Which expense account is used for the landed cost 'LCTC-0003'?",
            "fields": [
                "expense_account"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0003', 'expense_account')"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "What expense account is associated with landed cost component 'LCTC-0004'?",
            "fields": [
                "expense_account"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0004', 'expense_account')"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "Is there a corrective cost included for landed cost 'LCTC-0005'?",
            "fields": [
                "has_corrective_cost"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0005', 'has_corrective_cost')"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "Is there any correction cost included in the charge 'LCTC-0006'?",
            "fields": [
                "has_corrective_cost"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0006', 'has_corrective_cost')"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "What\u2019s the total amount for landed cost 'LCTC-0007' in company currency?",
            "fields": [
                "base_amount"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0007', 'base_amount')"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "How much is the landed cost 'LCTC-0008' charge in the company\u2019s currency?",
            "fields": [
                "base_amount"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0008', 'base_amount')"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "Which currency is used for landed cost 'LCTC-0009'?",
            "fields": [
                "account_currency"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0009', 'account_currency')"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "What currency is applied to landed cost 'LCTC-0010'?",
            "fields": [
                "account_currency"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0010', 'account_currency')"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "Was an exchange rate applied to the charge 'LCTC-0011'?",
            "fields": [
                "exchange_rate"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0011', 'exchange_rate')"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "Is there an exchange rate applied for the charge 'LCTC-0012'?",
            "fields": [
                "exchange_rate"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0012', 'exchange_rate')"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "Is tax or charge mandatory for landed cost 'LCTC-0013'?",
            "fields": [
                "amount"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0013', 'amount')"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "Do we need to fill in the tax or charge for the transaction 'LCTC-0014'?",
            "fields": [
                "amount"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0014', 'amount')"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "How is the base amount calculated for the landed cost 'LCTC-0015'?",
            "fields": [
                "amount",
                "exchange_rate",
                "base_amount"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0015', ['amount', 'exchange_rate', 'base_amount'])"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "How is the base amount for landed cost 'LCTC-0016' determined?",
            "fields": [
                "amount",
                "exchange_rate",
                "base_amount"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0016', ['amount', 'exchange_rate', 'base_amount'])"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "Does landed cost 'LCTC-0017' apply at the item level?",
            "fields": [
                "expense_account"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0017', 'expense_account')"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "Is landed cost 'LCTC-0018' applied at the individual item level?",
            "fields": [
                "expense_account"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0018', 'expense_account')"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "Is the row 'LCTC-0019' linked to any supplier invoice?",
            "fields": [
                "expense_account"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0019', 'expense_account')"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "Is landed cost 'LCTC-0020' linked to a supplier invoice?",
            "fields": [
                "expense_account"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0020', 'expense_account')"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "What\u2019s the difference between amount and base amount in landed cost 'LCTC-0021'?",
            "fields": [
                "amount",
                "base_amount"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0021', ['amount', 'base_amount'])"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "What is the difference between the base amount and the amount in the entry 'LCTC-0022'?",
            "fields": [
                "amount",
                "base_amount"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0022', ['amount', 'base_amount'])"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "Was landed cost 'LCTC-0023' meant for customs or freight?",
            "fields": [
                "expense_account"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0023', 'expense_account')"
    },
    {
        "input": {
            "doctype": "Landed Cost Taxes and Charges",
            "question": "Is landed cost 'LCTC-0024' intended for customs or freight purposes?",
            "fields": [
                "expense_account"
            ]
        },
        "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0024', 'expense_account')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Do we unlink payments automatically when invoices are cancelled?",
            "fields": [
                "unlink_payment_on_cancellation_of_invoice"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'unlink_payment_on_cancellation_of_invoice')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "When an invoice is cancelled, does the system unlink the payment right away?",
            "fields": [
                "unlink_payment_on_cancellation_of_invoice"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'unlink_payment_on_cancellation_of_invoice')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Can we cancel an order and unlink any advance payments related to it?",
            "fields": [
                "unlink_advance_payment_on_cancelation_of_order"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'unlink_advance_payment_on_cancelation_of_order')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Are advance payments automatically unlinked if the order is cancelled?",
            "fields": [
                "unlink_advance_payment_on_cancelation_of_order"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'unlink_advance_payment_on_cancelation_of_order')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Is the immutable ledger feature enabled for our accounting records?",
            "fields": [
                "enable_immutable_ledger"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'enable_immutable_ledger')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Does the system prevent any changes to the ledger once the immutable ledger feature is enabled?",
            "fields": [
                "enable_immutable_ledger"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'enable_immutable_ledger')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Are we able to exceed the billing limit set by the system?",
            "fields": [
                "over_billing_allowance"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'over_billing_allowance')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Can billing amounts exceed the set limits in the system?",
            "fields": [
                "over_billing_allowance"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'over_billing_allowance')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Is tax loss booked when early payment discounts are applied?",
            "fields": [
                "book_tax_discount_loss"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'book_tax_discount_loss')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Do we book tax loss when early payment discounts are given to customers?",
            "fields": [
                "book_tax_discount_loss"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'book_tax_discount_loss')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Can payment terms be fetched automatically when orders are placed?",
            "fields": [
                "automatically_fetch_payment_terms"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'automatically_fetch_payment_terms')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Are payment terms pulled in automatically when an order is created?",
            "fields": [
                "automatically_fetch_payment_terms"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'automatically_fetch_payment_terms')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Do we display taxes in a table format on printed invoices?",
            "fields": [
                "show_taxes_as_table_in_print"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'show_taxes_as_table_in_print')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Are taxes shown as a table in the invoice printouts?",
            "fields": [
                "show_taxes_as_table_in_print"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'show_taxes_as_table_in_print')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Can credit limits be overridden based on user roles?",
            "fields": [
                "role_allowed_to_over_bill"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'role_allowed_to_over_bill')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Are roles in the system assigned with the ability to override credit limits?",
            "fields": [
                "role_allowed_to_over_bill"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'role_allowed_to_over_bill')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Do we update ledger entries when payment amounts are changed?",
            "fields": [
                "post_change_gl_entries"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'post_change_gl_entries')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Are ledger entries adjusted when the payment amount is modified?",
            "fields": [
                "post_change_gl_entries"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'post_change_gl_entries')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Are depreciation entries automatically recorded in the system?",
            "fields": [
                "book_asset_depreciation_entry_automatically"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'book_asset_depreciation_entry_automatically')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Does the system automatically calculate and record depreciation entries?",
            "fields": [
                "book_asset_depreciation_entry_automatically"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'book_asset_depreciation_entry_automatically')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Have we frozen any accounts for a specific date range?",
            "fields": [
                "acc_frozen_upto"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'acc_frozen_upto')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Are there any accounts frozen until a certain date in the system?",
            "fields": [
                "acc_frozen_upto"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'acc_frozen_upto')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Is party matching enabled for bank reconciliation?",
            "fields": [
                "enable_party_matching"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'enable_party_matching')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Do we enable party matching for reconciliation purposes?",
            "fields": [
                "enable_party_matching"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'enable_party_matching')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Is fuzzy matching enabled to reconcile parties?",
            "fields": [
                "enable_fuzzy_matching"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'enable_fuzzy_matching')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Do we use fuzzy matching to reconcile parties in the system?",
            "fields": [
                "enable_fuzzy_matching"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'enable_fuzzy_matching')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Can we manually apply a discount to a customer's invoice?",
            "fields": [
                "book_tax_discount_loss"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'book_tax_discount_loss')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Is it possible to apply discounts manually on an invoice?",
            "fields": [
                "book_tax_discount_loss"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'book_tax_discount_loss')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Can I adjust the discount on a customer's invoice directly?",
            "fields": [
                "book_tax_discount_loss"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'book_tax_discount_loss')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "How can I adjust payment terms for a specific invoice after it's been created?",
            "fields": [
                "automatically_fetch_payment_terms"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'automatically_fetch_payment_terms')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Can payment terms be changed after an invoice is issued?",
            "fields": [
                "automatically_fetch_payment_terms"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'automatically_fetch_payment_terms')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Is there a way to update the payment terms once an invoice is created?",
            "fields": [
                "automatically_fetch_payment_terms"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'automatically_fetch_payment_terms')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Can we process a refund for a payment that was previously reconciled?",
            "fields": [
                "auto_reconcile_payments"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'auto_reconcile_payments')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Is it possible to issue a refund for a reconciled payment?",
            "fields": [
                "auto_reconcile_payments"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'auto_reconcile_payments')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Can a payment that\u2019s been reconciled be refunded?",
            "fields": [
                "auto_reconcile_payments"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'auto_reconcile_payments')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "How do we handle partial payments when an order is canceled?",
            "fields": [
                "unlink_advance_payment_on_cancelation_of_order"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'unlink_advance_payment_on_cancelation_of_order')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "What happens to partial payments when an order is canceled?",
            "fields": [
                "unlink_advance_payment_on_cancelation_of_order"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'unlink_advance_payment_on_cancelation_of_order')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Do we refund partial payments if an order is canceled?",
            "fields": [
                "unlink_advance_payment_on_cancelation_of_order"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'unlink_advance_payment_on_cancelation_of_order')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Can a user with a specific role approve billing over a preset limit?",
            "fields": [
                "role_allowed_to_over_bill"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'role_allowed_to_over_bill')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Are there any role-based permissions for approving over-limit billing?",
            "fields": [
                "role_allowed_to_over_bill"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'role_allowed_to_over_bill')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Can certain roles approve billing amounts that exceed the set limit?",
            "fields": [
                "role_allowed_to_over_bill"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'role_allowed_to_over_bill')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "How do we control who has access to view payment details in the system?",
            "fields": [
                "role_allowed_to_over_bill"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'role_allowed_to_over_bill')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Can we restrict access to payment details based on user roles?",
            "fields": [
                "role_allowed_to_over_bill"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'role_allowed_to_over_bill')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "How do we manage user permissions to view payment information?",
            "fields": [
                "role_allowed_to_over_bill"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'role_allowed_to_over_bill')"
    },
    {
        "input": {
            "doctype": "Accounts Settings",
            "question": "Do we allow multi-currency invoices for customers from different countries?",
            "fields": [
                "allow_multi_currency_invoices_against_single_party_account"
            ]
        },
        "output": "frappe.db.get_value('Accounts Settings', None, 'allow_multi_currency_invoices_against_single_party_account')"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Show all leads from this month related to marketing.",
            "fields": [
                "lead_name",
                "market_segment",
                "source"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'market_segment': 'Marketing', 'creation': ('>=', frappe.utils.nowdate().replace(day=1))}, fields=['lead_name', 'market_segment', 'source'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Which leads came from 'Spring Promo' this month?",
            "fields": [
                "lead_name",
                "campaign_name",
                "creation"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'campaign_name': 'Spring Promo', 'creation': ('>=', frappe.utils.nowdate().replace(day=1))}, fields=['lead_name', 'campaign_name', 'creation'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "What leads are assigned to 'Ahmad bin Khalid'?",
            "fields": [
                "lead_name",
                "lead_owner"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'lead_owner': 'Ahmad bin Khalid'}, fields=['lead_name', 'lead_owner'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Which leads are assigned to 'David Clark'?",
            "fields": [
                "lead_name",
                "lead_owner"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'lead_owner': 'David Clark'}, fields=['lead_name', 'lead_owner'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "What\u2019s the status of lead 'L-2022-010'?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_value('Lead', 'L-2022-010', 'status')"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "Can you give me the details of the sales order placed by customer Jane Smith on 15th March?",
            "fields": [
                "name",
                "customer",
                "transaction_date",
                "grand_total"
            ]
        },
        "output": "frappe.get_list('Sales Order', filters={'customer': 'Jane Smith', 'transaction_date': '2024-03-15'}, fields=['name', 'customer', 'transaction_date', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "What is the current status of my sales order with ID is_1989?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_value('Sales Order', 'is_1989', 'status')"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "How much do I owe for the sales order AS_190?",
            "fields": [
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_value('Sales Order', 'AS_190', 'outstanding_amount')"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "What items are included in the sales order SO156?",
            "fields": [
                "items"
            ]
        },
        "output": "frappe.get_value('Sales Order', 'SO156', 'items')"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "Can you tell me the expected delivery date for sales order Sales_101?",
            "fields": [
                "delivery_date"
            ]
        },
        "output": "frappe.get_value('Sales Order', 'Sales_101', 'delivery_date')"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "Who is the customer for sales order item_910, and what is their contact information?",
            "fields": [
                "customer",
                "contact_person",
                "contact_email",
                "contact_mobile"
            ]
        },
        "output": "frappe.get_value('Sales Order', 'item_910', ['customer', 'contact_person', 'contact_email', 'contact_mobile'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "Has the payment been received for sales order SO-45672?",
            "fields": [
                "per_billed",
                "per_delivered",
                "billing_status"
            ]
        },
        "output": "frappe.get_value('Sales Order', 'SO-45672', ['per_billed', 'per_delivered', 'billing_status'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "Can I modify the items in sales order s_001 before shipping?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_value('Sales Order', 's_001', 'status')"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "Can you cancel the sales order SO-87654?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_value('Sales Order', 'SO-87654', 'status')"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "What discount was applied to sales order ksjidusidjs for customer ABC Corp?",
            "fields": [
                "discount_amount",
                "additional_discount_percentage"
            ]
        },
        "output": "frappe.get_value('Sales Order', 'ksjidusidjs', ['discount_amount', 'additional_discount_percentage'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice Item",
            "question": "How many Mango Juice bottles did we sell last week?",
            "fields": [
                "item_name",
                "qty"
            ]
        },
        "output": "from frappe.utils import now_datetime, add_days\nfrappe.db.count('Sales Invoice Item', {'item_name': 'Mango Juice', 'creation': ['between', [add_days(now_datetime(), -7), now_datetime()]]})"
    },
    {
        "input": {
            "doctype": "Sales Invoice Item",
            "question": "How many Apple Cider bottles did we sell on March 15th?",
            "fields": [
                "item_name",
                "qty"
            ]
        },
        "output": "frappe.db.count('Sales Invoice Item', {'item_name': 'Apple Cider', 'creation': ['between', ['2024-03-15 00:00:00', '2024-03-15 23:59:59']]})"
    },
    {
        "input": {
            "doctype": "Sales Invoice Item",
            "question": "How many jars of Organic Honey did we sell in the past 30 days?",
            "fields": [
                "item_name",
                "qty"
            ]
        },
        "output": "from frappe.utils import now_datetime, add_days\nfrappe.db.count('Sales Invoice Item', {'item_name': 'Organic Honey', 'creation': ['between', [add_days(now_datetime(), -30), now_datetime()]]})"
    },
    {
        "input": {
            "doctype": "Sales Invoice Item",
            "question": "How many bottles of Premium Olive Oil did we sell in the first quarter?",
            "fields": [
                "item_name",
                "qty"
            ]
        },
        "output": "frappe.db.count('Sales Invoice Item', {'item_name': 'Premium Olive Oil', 'creation': ['between', ['2024-01-01 00:00:00', '2024-03-31 23:59:59']]})"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "How many orders did Global Foods make last month?",
            "fields": [
                "customer",
                "transaction_date"
            ]
        },
        "output": "from frappe.utils import get_first_day, get_last_day, add_months, nowdate\nfrappe.db.count('Sales Order', {'customer': 'Global Foods', 'transaction_date': ['between', [get_first_day(add_months(nowdate(), -1)), get_last_day(add_months(nowdate(), -1))]]})"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Show all leads from this month related to marketing.",
            "fields": [
                "lead_name",
                "market_segment",
                "creation"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'market_segment': 'Marketing', 'creation': ['>=', frappe.utils.nowdate().replace(day=1)]}, fields=['lead_name', 'market_segment', 'creation'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Which leads came from 'Spring Promo' this month?",
            "fields": [
                "lead_name",
                "campaign_name",
                "creation"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'campaign_name': 'Spring Promo', 'creation': ['>=', frappe.utils.nowdate().replace(day=1)]}, fields=['lead_name', 'campaign_name', 'creation'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "What leads are assigned to 'Ahmad bin Khalid'?",
            "fields": [
                "lead_name",
                "lead_owner"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'lead_owner': 'Ahmad bin Khalid'}, fields=['lead_name', 'lead_owner'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Which leads are assigned to 'David Clark'?",
            "fields": [
                "lead_name",
                "lead_owner"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'lead_owner': 'David Clark'}, fields=['lead_name', 'lead_owner'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "What\u2019s the status of lead 'L-2022-010'?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_value('Lead', 'L-2022-010', 'status')"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Can you show me the sales invoice for order SO-12345?",
            "fields": [
                "po_no",
                "customer",
                "items",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={'po_no': 'SO-12345'}, fields=['name', 'customer', 'items', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "What is the amount on the sales invoice SI-45678?",
            "fields": [
                "grand_total"
            ]
        },
        "output": "frappe.get_value('Sales Invoice', 'SI-45678', 'grand_total')"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Has the customer paid for invoice SI-22334?",
            "fields": [
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_value('Sales Invoice', 'SI-22334', 'outstanding_amount')"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "How much is left to pay on sales invoice SI-33445?",
            "fields": [
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_value('Sales Invoice', 'SI-33445', 'outstanding_amount')"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "When is the payment due for sales invoice SI-33456?",
            "fields": [
                "due_date"
            ]
        },
        "output": "frappe.get_value('Sales Invoice', 'SI-33456', 'due_date')"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Is sales invoice SI-44556 overdue?",
            "fields": [
                "due_date"
            ]
        },
        "output": "frappe.get_value('Sales Invoice', 'SI-44556', 'due_date')"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "What products were billed on sales invoice SI-12312?",
            "fields": [
                "items"
            ]
        },
        "output": "frappe.get_value('Sales Invoice', 'SI-12312', 'items')"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "What discount was applied to sales invoice SI-33445?",
            "fields": [
                "discount_amount",
                "additional_discount_percentage"
            ]
        },
        "output": "frappe.get_value('Sales Invoice', 'SI-33445', ['discount_amount', 'additional_discount_percentage'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Can you send me a copy of sales invoice SI-22334? (retrieval part only)",
            "fields": [
                "name"
            ]
        },
        "output": "frappe.get_value('Sales Invoice', 'SI-22334', 'name')"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "When was sales invoice SI-76565 created?",
            "fields": [
                "creation"
            ]
        },
        "output": "frappe.get_value('Sales Invoice', 'SI-76565', 'creation')"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Has sales invoice SI-55667 been approved?",
            "fields": [
                "docstatus"
            ]
        },
        "output": "frappe.get_value('Sales Invoice', 'SI-55667', 'docstatus')"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Who approved sales invoice SI-33445?",
            "fields": [
                "owner"
            ]
        },
        "output": "frappe.get_value('Sales Invoice', 'SI-33445', 'owner')"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Can you show the sales invoice for customer John Doe?",
            "fields": [
                "name",
                "grand_total",
                "posting_date"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={'customer': 'John Doe'}, fields=['name', 'grand_total', 'posting_date'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "How much did we charge customer ABC Corp in their last invoice?",
            "fields": [
                "name",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={'customer': 'ABC Corp'}, fields=['name', 'grand_total'], order_by='posting_date desc', limit=1)"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Has sales invoice SI-55667 been refunded yet?",
            "fields": [
                "is_return"
            ]
        },
        "output": "frappe.get_value('Sales Invoice', 'SI-55667', 'is_return')"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Was there a late fee added to sales invoice SI-33445?",
            "fields": [
                "other_charges_calculation"
            ]
        },
        "output": "frappe.get_value('Sales Invoice', 'SI-33445', 'other_charges_calculation')"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "How much was the late fee on sales invoice SI-55667?",
            "fields": [
                "other_charges_calculation"
            ]
        },
        "output": "frappe.get_value('Sales Invoice', 'SI-55667', 'other_charges_calculation')"
    },
    {
        "input": {
            "doctype": "Quotation",
            "question": "Can you show me the sales quotation Q-12345 for March 10th 2024?",
            "fields": [
                "name",
                "customer",
                "items",
                "grand_total",
                "transaction_date"
            ]
        },
        "output": "frappe.get_all('Quotation', filters={'name': 'Q-12345', 'transaction_date': '2024-03-10'}, fields=['name', 'customer', 'items', 'grand_total', 'transaction_date'])"
    },
    {
        "input": {
            "doctype": "Quotation",
            "question": "What is the total amount on sales quotation Q-67890 for Global Tech?",
            "fields": [
                "grand_total"
            ]
        },
        "output": "frappe.get_value('Quotation', {'name': 'Q-67890', 'customer': 'Global Tech'}, 'grand_total')"
    },
    {
        "input": {
            "doctype": "Quotation",
            "question": "What is the status of sales quotation Q-22334 for Yenmuim Corp?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_value('Quotation', {'name': 'Q-22334', 'customer': 'Yenmuim Corp'}, 'status')"
    },
    {
        "input": {
            "doctype": "Quotation",
            "question": "Has sales quotation Q-33445 been approved for Kuywett Electronics?",
            "fields": [
                "docstatus"
            ]
        },
        "output": "frappe.get_value('Quotation', {'name': 'Q-33445', 'customer': 'Kuywett Electronics'}, 'docstatus')"
    },
    {
        "input": {
            "doctype": "Quotation",
            "question": "What items are listed in sales quotation Q-11223 for Organic Goods?",
            "fields": [
                "items"
            ]
        },
        "output": "frappe.get_value('Quotation', {'name': 'Q-11223', 'customer': 'Organic Goods'}, 'items')"
    },
    {
        "input": {
            "doctype": "Quotation",
            "question": "Can you list the products in sales quotation Q-55667 for Eco Solutions?",
            "fields": [
                "items"
            ]
        },
        "output": "frappe.get_value('Quotation', {'name': 'Q-55667', 'customer': 'Eco Solutions'}, 'items')"
    },
    {
        "input": {
            "doctype": "Quotation",
            "question": "Can you show the sales quotation Q-44556 for Bright Foods?",
            "fields": [
                "name",
                "items",
                "grand_total"
            ]
        },
        "output": "frappe.get_value('Quotation', {'name': 'Q-44556', 'customer': 'Bright Foods'}, ['name', 'items', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Quotation",
            "question": "What was the price for GreenTech Industries in quotation Q-77899?",
            "fields": [
                "grand_total"
            ]
        },
        "output": "frappe.get_value('Quotation', {'name': 'Q-77899', 'customer': 'GreenTech Industries'}, 'grand_total')"
    },
    {
        "input": {
            "doctype": "Quotation",
            "question": "When does sales quotation Q-22345 expire for Innovate Ltd?",
            "fields": [
                "valid_till"
            ]
        },
        "output": "frappe.get_value('Quotation', {'name': 'Q-22345', 'customer': 'Innovate Ltd'}, 'valid_till')"
    },
    {
        "input": {
            "doctype": "Quotation",
            "question": "Has sales quotation Q-33456 expired for ModernTech Supplies?",
            "fields": [
                "valid_till"
            ]
        },
        "output": "frappe.get_value('Quotation', {'name': 'Q-33456', 'customer': 'ModernTech Supplies'}, 'valid_till')"
    },
    {
        "input": {
            "doctype": "Customer",
            "question": "What is the email address of customer John Doe?",
            "fields": [
                "email_id"
            ]
        },
        "output": "frappe.get_value('Customer', {'customer_name': 'John Doe'}, 'email_id')"
    },
    {
        "input": {
            "doctype": "Customer",
            "question": "When was customer falikn Corp created in the system?",
            "fields": [
                "creation"
            ]
        },
        "output": "frappe.get_value('Customer', {'customer_name': 'falikn Corp'}, 'creation')"
    },
    {
        "input": {
            "doctype": "Customer",
            "question": "What is the credit limit assigned to customer Fresh Mart?",
            "fields": [
                "credit_limits"
            ]
        },
        "output": "frappe.get_value('Customer', {'customer_name': 'Fresh Mart'}, 'credit_limits')"
    },
    {
        "input": {
            "doctype": "Customer",
            "question": "What is the primary contact number for customer Zenith Traders?",
            "fields": [
                "mobile_no"
            ]
        },
        "output": "frappe.get_value('Customer', {'customer_name': 'Zenith Traders'}, 'mobile_no')"
    },
    {
        "input": {
            "doctype": "Customer",
            "question": "What is the default currency used by customer Alpha Foods?",
            "fields": [
                "default_currency"
            ]
        },
        "output": "frappe.get_value('Customer', {'customer_name': 'Alpha Foods'}, 'default_currency')"
    },
    {
        "input": {
            "doctype": "Sales Person",
            "question": "What is the email ID of sales person Ahmed Khan?",
            "fields": [
                "employee"
            ]
        },
        "output": "frappe.get_value('Sales Person', {'sales_person_name': 'Ahmed Khan'}, 'employee')"
    },
    {
        "input": {
            "doctype": "Sales Person",
            "question": "When was sales person Jason Lee added to the system?",
            "fields": [
                "creation"
            ]
        },
        "output": "frappe.get_value('Sales Person', {'sales_person_name': 'Jason Lee'}, 'creation')"
    },
    {
        "input": {
            "doctype": "Sales Person",
            "question": "What is the employee ID of sales person Maria Gomez?",
            "fields": [
                "employee"
            ]
        },
        "output": "frappe.get_value('Sales Person', {'sales_person_name': 'Maria Gomez'}, 'employee')"
    },
    {
        "input": {
            "doctype": "Sales Person",
            "question": "What is the territory assigned to sales person Ramesh Patel?",
            "fields": [
                "name"
            ]
        },
        "output": "frappe.get_value('Sales Person', {'sales_person_name': 'Ramesh Patel'}, 'name')"
    },
    {
        "input": {
            "doctype": "Delivery Note",
            "question": "When was delivery note DN-00045 submitted?",
            "fields": [
                "posting_date"
            ]
        },
        "output": "frappe.get_value('Delivery Note', 'DN-00045', 'posting_date')"
    },
    {
        "input": {
            "doctype": "Delivery Note",
            "question": "What is the total quantity in delivery note DN-00123?",
            "fields": [
                "total_qty"
            ]
        },
        "output": "frappe.get_value('Delivery Note', 'DN-00123', 'total_qty')"
    },
    {
        "input": {
            "doctype": "Delivery Note",
            "question": "Which customer was delivery note DN-00321 issued to?",
            "fields": [
                "customer"
            ]
        },
        "output": "frappe.get_value('Delivery Note', 'DN-00321', 'customer')"
    },
    {
        "input": {
            "doctype": "Delivery Note",
            "question": "What is the status of delivery note DN-00210?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_value('Delivery Note', 'DN-00210', 'status')"
    },
    {
        "input": {
            "doctype": "Delivery Note",
            "question": "Who created delivery note DN-00456?",
            "fields": [
                "owner"
            ]
        },
        "output": "frappe.get_value('Delivery Note', 'DN-00456', 'owner')"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "What is the stock unit of item Mango Juice?",
            "fields": [
                "stock_uom"
            ]
        },
        "output": "frappe.get_value('Item', {'item_name': 'Mango Juice'}, 'stock_uom')"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "What is the standard selling rate of item Organic Honey?",
            "fields": [
                "standard_rate"
            ]
        },
        "output": "frappe.get_value('Item', {'item_name': 'Organic Honey'}, 'standard_rate')"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "What is the default warehouse for item Premium Olive Oil?",
            "fields": [
                "set_warehouse"
            ]
        },
        "output": "frappe.get_value('Item', {'item_name': 'Premium Olive Oil'}, 'set_warehouse')"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "What brand is assigned to item Fresh Apple Cider?",
            "fields": [
                "brand"
            ]
        },
        "output": "frappe.get_value('Item', {'item_name': 'Fresh Apple Cider'}, 'brand')"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "When was item Golden Syrup last updated?",
            "fields": [
                "modified"
            ]
        },
        "output": "frappe.get_value('Item', {'item_name': 'Golden Syrup'}, 'modified')"
    },
    {
        "input": {
            "doctype": "Price List",
            "question": "What is the currency used in the Standard Selling price list?",
            "fields": [
                "currency"
            ]
        },
        "output": "frappe.get_value('Price List', 'Standard Selling', 'currency')"
    },
    {
        "input": {
            "doctype": "Price List",
            "question": "When was the Wholesale Price List last modified?",
            "fields": [
                "modified"
            ]
        },
        "output": "frappe.get_value('Price List', 'Wholesale Price List', 'modified')"
    },
    {
        "input": {
            "doctype": "Price List",
            "question": "Is the Export Price List enabled?",
            "fields": [
                "enabled"
            ]
        },
        "output": "frappe.get_value('Price List', 'Export Price List', 'enabled')"
    },
    {
        "input": {
            "doctype": "Price List",
            "question": "What is the buying/selling type of the Dealer Rate List?",
            "fields": [
                "buying",
                "selling"
            ]
        },
        "output": "frappe.get_value('Price List', 'Dealer Rate List', ['buying', 'selling'])"
    },
    {
        "input": {
            "doctype": "Price List",
            "question": "What is the territory assigned to the Retail Price List?",
            "fields": [
                "countries"
            ]
        },
        "output": "frappe.get_value('Price List', 'Retail Price List', 'countries')"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "How is lead 'L-2023-101' progressing?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_value('Lead', 'L-2023-101', 'status')"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Show me the qualified leads from the 'Trade Show'.",
            "fields": [
                "lead_name",
                "status"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'source': 'Trade Show', 'status': 'Qualified'}, fields=['lead_name', 'status'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Which leads came from the 'Tech Conference'?",
            "fields": [
                "lead_name",
                "source"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'source': 'Tech Conference'}, fields=['lead_name', 'source'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Who are the new leads this week?",
            "fields": [
                "lead_name",
                "creation"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -7)]}, fields=['lead_name', 'creation'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Which new leads did we get from 'Summer Discount'?",
            "fields": [
                "lead_name",
                "source"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'source': 'Summer Discount'}, fields=['lead_name', 'source'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "How many new leads did we get last month from 'Global Expo'?",
            "fields": [
                "name"
            ]
        },
        "output": "frappe.db.count('Lead', {'source': 'Global Expo', 'creation': ['between', [frappe.utils.add_months(frappe.utils.nowdate(), -1), frappe.utils.nowdate()]]})"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "How is lead 'L-2023-101' progressing?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_value('Lead', 'L-2023-101', 'status')"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Show me the qualified leads from the 'Trade Show'.",
            "fields": [
                "lead_name",
                "status"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'source': 'Trade Show', 'status': 'Qualified'}, fields=['lead_name', 'status'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Which leads came from the 'Tech Conference'?",
            "fields": [
                "lead_name",
                "source"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'source': 'Tech Conference'}, fields=['lead_name', 'source'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Who are the new leads this week?",
            "fields": [
                "lead_name",
                "creation"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -7)]}, fields=['lead_name', 'creation'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Which new leads did we get from 'Summer Discount'?",
            "fields": [
                "lead_name",
                "source"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'source': 'Summer Discount'}, fields=['lead_name', 'source'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "How many new leads did we get last month from 'Global Expo'?",
            "fields": [
                "name"
            ]
        },
        "output": "frappe.db.count('Lead', {'source': 'Global Expo', 'creation': ['between', [frappe.utils.add_months(frappe.utils.nowdate(), -1), frappe.utils.nowdate()]]})"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "How is lead 'L-2023-101' progressing?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_value('Lead', 'L-2023-101', 'status')"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Show me the qualified leads from the 'Trade Show'.",
            "fields": [
                "lead_name",
                "status"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'source': 'Trade Show', 'status': 'Qualified'}, fields=['lead_name', 'status'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Which leads came from the 'Tech Conference'?",
            "fields": [
                "lead_name",
                "source"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'source': 'Tech Conference'}, fields=['lead_name', 'source'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Who are the new leads this week?",
            "fields": [
                "lead_name",
                "creation"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -7)]}, fields=['lead_name', 'creation'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Which new leads did we get from 'Summer Discount'?",
            "fields": [
                "lead_name",
                "source"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'source': 'Summer Discount'}, fields=['lead_name', 'source'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "How many new leads did we get last month from 'Global Expo'?",
            "fields": [
                "name"
            ]
        },
        "output": "frappe.db.count('Lead', {'source': 'Global Expo', 'creation': ['between', [frappe.utils.add_months(frappe.utils.nowdate(), -1), frappe.utils.nowdate()]]})"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "How many leads did we get last month from 'Summer Promo'?",
            "fields": [
                "name"
            ]
        },
        "output": "frappe.db.count('Lead', {'source': 'Summer Promo', 'creation': ['between', [frappe.utils.add_months(frappe.utils.nowdate(), -1), frappe.utils.nowdate()]]})"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Show me all leads from 'Product Launch Event'.",
            "fields": [
                "lead_name",
                "source"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'source': 'Product Launch Event'}, fields=['lead_name', 'source'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Which leads were qualified at the 'New Year Sales'?",
            "fields": [
                "lead_name",
                "status",
                "source"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'source': 'New Year Sales', 'status': 'Qualified'}, fields=['lead_name', 'status', 'source'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "What\u2019s the status of the leads assigned to 'Mohammed Al-Mansoori'?",
            "fields": [
                "lead_name",
                "status"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'lead_owner': 'Mohammed Al-Mansoori'}, fields=['lead_name', 'status'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "How are the leads assigned to 'Bonanza Launch' doing?",
            "fields": [
                "lead_name",
                "status"
            ]
        },
        "output": "frappe.get_list('Lead', filters={'source': 'Bonanza Launch'}, fields=['lead_name', 'status'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "What leads have the email 'aysha.razak@example.com' from 'Next-Gen Product Launch'?",
            "fields": [
                "lead_name",
                "email_id",
                "campaign_name"
            ]
        },
        "output": "frappe.get_all('Lead', filters={'email_id': 'aysha.razak@example.com', 'campaign_name': 'Next-Gen Product Launch'}, fields=['lead_name', 'email_id', 'campaign_name'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "How many leads from 'Trade Show' are still marked as 'New'?",
            "fields": [
                "campaign_name",
                "status"
            ]
        },
        "output": "frappe.db.count('Lead', filters={'campaign_name': 'Trade Show', 'status': 'New'})"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Which leads from 'Product Launch Event' have a high annual revenue?",
            "fields": [
                "lead_name",
                "campaign_name",
                "annual_revenue"
            ]
        },
        "output": "frappe.get_all('Lead', filters={\"campaign_name\": \"Product Launch Event\", \"annual_revenue\": [\">\", 1000000]}, fields=[\"lead_name\", \"campaign_name\", \"annual_revenue\"])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "How does this month\u2019s lead generation compare to last month\u2019s for 'Tech Innovators Expo'?",
            "fields": [
                "campaign_name",
                "creation"
            ]
        },
        "output": "frappe.get_all('Lead', filters={\"campaign_name\": \"Tech Innovators Expo\", \"creation\": [\"between\", [frappe.utils.get_first_day(frappe.utils.nowdate()), frappe.utils.get_last_day(frappe.utils.nowdate())]]}, fields=[\"name\"])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "What\u2019s the difference in conversion rates between leads from 'Online Webinar' and 'Summer Sales'?",
            "fields": [
                "campaign_name",
                "qualification_status"
            ]
        },
        "output": "frappe.get_all('Lead', filters={\"campaign_name\": [\"in\", [\"Online Webinar\", \"Summer Sales\"]]}, fields=[\"campaign_name\", \"qualification_status\"])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Can you list the currently qualified leads from 'Tech Innovators Expo'?",
            "fields": [
                "lead_name",
                "campaign_name",
                "qualification_status"
            ]
        },
        "output": "frappe.get_all('Lead', filters={\"campaign_name\": \"Tech Innovators Expo\", \"qualification_status\": \"Qualified\"}, fields=[\"lead_name\", \"campaign_name\", \"qualification_status\"])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Can you list the currently qualified leads from 'Tech Innovators Expo'?",
            "fields": [
                "qualification_status",
                "campaign_name"
            ]
        },
        "output": "frappe.get_all('Lead', filters={'qualification_status': 'Qualified', 'campaign_name': 'Tech Innovators Expo'}, fields=['name', 'lead_name', 'status'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Are there any unqualified leads from 'Summer Sales'?",
            "fields": [
                "qualification_status",
                "campaign_name"
            ]
        },
        "output": "frappe.get_all('Lead', filters={'qualification_status': 'Unqualified', 'campaign_name': 'Summer Sales'}, fields=['name', 'lead_name'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "Show me the leads created in the last two weeks for 'Tech Innovators Expo'.",
            "fields": [
                "creation",
                "campaign_name"
            ]
        },
        "output": "frappe.get_all('Lead', filters={'campaign_name': 'Tech Innovators Expo', 'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -14)]}, fields=['name', 'lead_name', 'creation'])"
    },
    {
        "input": {
            "doctype": "Lead",
            "question": "How many leads were generated last month from the 'Introducing the Future' campaign?",
            "fields": [
                "campaign_name",
                "creation"
            ]
        },
        "output": "frappe.db.count('Lead', filters={'campaign_name': 'Introducing the Future', 'creation': ['between', [frappe.utils.get_first_day(frappe.utils.add_months(frappe.utils.nowdate(), -1)), frappe.utils.get_last_day(frappe.utils.add_months(frappe.utils.nowdate(), -1))]]})"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Who still owes us payments from SteelWorks Ltd.?",
            "fields": [
                "party",
                "party_type",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_all('Payment Entry', filters={'party_type': 'Customer', 'party': 'SteelWorks Ltd.', 'outstanding_amount': ['>', 0]}, fields=['name', 'party', 'outstanding_amount'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Did we receive payment from GreenTech Innovations for invoice 'GT-302'?",
            "fields": [
                "party",
                "references"
            ]
        },
        "output": "frappe.get_all('Payment Entry', filters={'party': 'GreenTech Innovations', 'references.reference_name': 'GT-302'}, fields=['name', 'paid_amount'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "What's the outstanding amount for John Williams?",
            "fields": [
                "party",
                "party_type",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_all('Payment Entry', filters={'party_type': 'Customer', 'party': 'John Williams', 'outstanding_amount': ['>', 0]}, fields=['name', 'outstanding_amount'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Have we received all the payments we\u2019re owed for invoices 'INV-501' and 'INV-502'?",
            "fields": [
                "references"
            ]
        },
        "output": "frappe.get_all('Payment Entry', filters={'references.reference_name': ['in', ['INV-501', 'INV-502']]}, fields=['name', 'party', 'paid_amount'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Did we pay Fresh Supplies for invoice 'FS-123'?",
            "fields": [
                "party",
                "references",
                "payment_type"
            ]
        },
        "output": "frappe.get_all('Payment Entry', filters={'party': 'Fresh Supplies', 'references.reference_name': 'FS-123', 'payment_type': 'Pay'}, fields=['name', 'paid_amount'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Which invoices still need to be paid for Pinnacle Industries?",
            "fields": [
                "party",
                "references",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_all('Payment Entry', filters={'party': 'Pinnacle Industries', 'outstanding_amount': ['>', 0]}, fields=['name', 'references', 'outstanding_amount'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Everyone paid up yet for invoice 'INV-103' from Horizon Enterprises?",
            "fields": [
                "party",
                "references",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_all('Payment Entry', filters={'party': 'Horizon Enterprises', 'references.reference_name': 'INV-103'}, fields=['name', 'outstanding_amount'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Who still owes us payments for 'INV-105' from Tech Solutions?",
            "fields": [
                "party",
                "references",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_all('Payment Entry', filters={'party': 'Tech Solutions', 'references.reference_name': 'INV-105', 'outstanding_amount': ['>', 0]}, fields=['name', 'outstanding_amount'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Did we pay Fresh Foods their invoice 'FF-789'?",
            "fields": [
                "party",
                "references",
                "payment_type"
            ]
        },
        "output": "frappe.get_all('Payment Entry', filters={'party': 'Fresh Foods', 'references.reference_name': 'FF-789', 'payment_type': 'Pay'}, fields=['name', 'paid_amount'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Who hasn't paid their bill yet for invoice 'INV-110' from Elite Traders?",
            "fields": [
                "party",
                "references",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_all('Payment Entry', filters={'party': 'Elite Traders', 'references.reference_name': 'INV-110', 'outstanding_amount': ['>', 0]}, fields=['name', 'outstanding_amount'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Who owes us money from Finovate Solutions for 'INV-113'?",
            "fields": [
                "party",
                "references",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_all('Payment Entry', filters={'party': 'Finovate Solutions', 'references.reference_name': 'INV-113', 'outstanding_amount': ['>', 0]}, fields=['name', 'outstanding_amount'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Which bills still haven\u2019t been paid from customer 'Quantum Industries'?",
            "fields": [
                "party",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_all('Payment Entry', filters={'party': 'Quantum Industries', 'outstanding_amount': ['>', 0]}, fields=['name', 'references', 'outstanding_amount'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "What\u2019s the total outstanding amount for invoice 'INV-207' from InnovateTech?",
            "fields": [
                "party",
                "references",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_all('Payment Entry', filters={'party': 'InnovateTech', 'references.reference_name': 'INV-207'}, fields=['name', 'outstanding_amount'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Did we receive payment from Urban Mart Ltd for invoice 'UM-123'?",
            "fields": [
                "party",
                "references",
                "payment_type"
            ]
        },
        "output": "frappe.get_all('Payment Entry', filters={'party': 'Urban Mart Ltd', 'references.reference_name': 'UM-123', 'payment_type': 'Receive'}, fields=['name', 'paid_amount'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Has everyone paid their bills for invoices 'INV-101' and 'INV-202' from Business Solutions?",
            "fields": [
                "party",
                "references",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_all('Payment Entry', filters={'party': 'Business Solutions', 'references.reference_name': ['in', ['INV-101', 'INV-202']], 'outstanding_amount': ['<=', 0]}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Are there any overdue payments for 'TechnoWorks Ltd'?",
            "fields": [
                "party",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_all('Payment Entry', filters={'party': 'TechnoWorks Ltd', 'outstanding_amount': ['>', 0]}, fields=['name', 'posting_date', 'outstanding_amount'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Did we get paid by XYZ Corp for invoice 'XYZ-789'?",
            "fields": [
                "party",
                "references",
                "payment_type"
            ]
        },
        "output": "frappe.get_all('Payment Entry', filters={'party': 'XYZ Corp', 'references.reference_name': 'XYZ-789', 'payment_type': 'Receive'}, fields=['name', 'paid_amount'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Have we settled the bill with the vendor 'Fresh Supplies' for invoice 'FS-501'?",
            "fields": [
                "party",
                "references",
                "payment_type",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_all('Payment Entry', filters={'party': 'Fresh Supplies', 'references.reference_name': 'FS-501', 'payment_type': 'Pay', 'outstanding_amount': ['<=', 0]}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "How much does John Williams still owe us?",
            "fields": [
                "party",
                "outstanding_amount"
            ]
        },
        "output": "frappe.db.get_value('Payment Entry', {'party': 'John Williams'}, 'outstanding_amount')"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Have we received all payments for invoices 'INV-501' and 'INV-502' this month?",
            "fields": [
                "references",
                "status"
            ]
        },
        "output": "frappe.db.get_all('Payment Entry', filters={'references': ['in', ['INV-501', 'INV-502']], 'posting_date': ['between', ['2025-04-01', '2025-04-30']]}, fields=['name', 'status'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Did we pay Fresh Supplies the full amount for invoice 'FS-123'?",
            "fields": [
                "party",
                "references",
                "paid_amount",
                "base_total_allocated_amount"
            ]
        },
        "output": "frappe.db.get_value('Payment Entry', {'party': 'Fresh Supplies', 'references': 'FS-123'}, ['paid_amount', 'base_total_allocated_amount'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Which invoices are unpaid for Pinnacle Industries between 'INV-101' and 'INV-105'?",
            "fields": [
                "party",
                "references",
                "status"
            ]
        },
        "output": "frappe.db.get_all('Payment Entry', filters={'party': 'Pinnacle Industries', 'references': ['in', ['INV-101', 'INV-102', 'INV-103', 'INV-104', 'INV-105']], 'status': ['!=', 'Paid']}, fields=['name', 'references'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Has everyone paid up yet for invoice 'INV-103' from Horizon Enterprises?",
            "fields": [
                "party",
                "references",
                "status"
            ]
        },
        "output": "frappe.db.get_value('Payment Entry', {'party': 'Horizon Enterprises', 'references': 'INV-103'}, 'status')"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Who still owes us payments for 'INV-105' from Tech Solutions?",
            "fields": [
                "party",
                "references",
                "outstanding_amount"
            ]
        },
        "output": "frappe.db.get_value('Payment Entry', {'party': 'Tech Solutions', 'references': 'INV-105'}, 'outstanding_amount')"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Did we pay Fresh Foods their invoice 'FF-789'?",
            "fields": [
                "party",
                "references",
                "paid_amount"
            ]
        },
        "output": "frappe.db.get_value('Payment Entry', {'party': 'Fresh Foods', 'references': 'FF-789'}, 'paid_amount')"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Who hasn't paid their bill yet for invoice 'INV-110' from Elite Traders?",
            "fields": [
                "party",
                "references",
                "outstanding_amount"
            ]
        },
        "output": "frappe.db.get_value('Payment Entry', {'party': 'Elite Traders', 'references': 'INV-110'}, 'outstanding_amount')"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Who owes us money from Finovate Solutions for 'INV-113'?",
            "fields": [
                "party",
                "references",
                "outstanding_amount"
            ]
        },
        "output": "frappe.db.get_value('Payment Entry', {'party': 'Finovate Solutions', 'references': 'INV-113'}, 'outstanding_amount')"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Which bills still haven\u2019t been paid from customer 'Quantum Industries'?",
            "fields": [
                "party",
                "status"
            ]
        },
        "output": "frappe.db.get_all('Payment Entry', filters={'party': 'Quantum Industries', 'status': ['!=', 'Paid']}, fields=['name', 'references'])"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "What\u2019s the total outstanding amount for invoice 'INV-207' from NextGen Solutions?",
            "fields": [
                "party",
                "references",
                "outstanding_amount"
            ]
        },
        "output": "frappe.db.get_value('Payment Entry', {'party': 'NextGen Solutions', 'references': 'INV-207'}, 'outstanding_amount')"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Did we receive payment from Urban Mart Ltd for invoice 'UM-123'?",
            "fields": [
                "party",
                "references",
                "paid_amount"
            ]
        },
        "output": "frappe.db.get_value('Payment Entry', {'party': 'Urban Mart Ltd', 'references': 'UM-123'}, 'paid_amount')"
    },
    {
        "input": {
            "doctype": "Payment Entry",
            "question": "Can you provide a list of all payment entries linked to 'Tech Innovations Ltd.' for the last quarter?",
            "fields": [
                "party",
                "posting_date"
            ]
        },
        "output": "frappe.get_all('Payment Entry', filters={'party': 'Tech Innovations Ltd.', 'posting_date': ['>=', frappe.utils.add_months(frappe.utils.today(), -3)]}, fields=['name', 'party', 'posting_date'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Show all items with a rate of $50 or more",
            "fields": [
                "item_name",
                "standard_rate"
            ]
        },
        "output": "frappe.get_all('Item', filters={'standard_rate': ['>=', 50]}, fields=['item_name', 'standard_rate'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Which items are still marked as active or not closed?",
            "fields": [
                "item_name",
                "disabled"
            ]
        },
        "output": "frappe.get_all('Item', filters={'disabled': 0}, fields=['item_name'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Fetch open items with item code ITEM-1001.",
            "fields": [
                "item_code",
                "disabled"
            ]
        },
        "output": "frappe.get_all('Item', filters={'item_code': 'ITEM-1001', 'disabled': 0}, fields=['item_code', 'item_name'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Any open items with the item code ITEM-1002?",
            "fields": [
                "item_code",
                "disabled"
            ]
        },
        "output": "frappe.get_all('Item', filters={'item_code': 'ITEM-1002', 'disabled': 0}, fields=['item_code', 'item_name'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Which items have missing or late entries?",
            "fields": [
                "item_code",
                "end_of_life"
            ]
        },
        "output": "frappe.get_all('Item', filters={'end_of_life': ['<', frappe.utils.today()]}, fields=['item_code', 'item_name', 'end_of_life'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "How many items did we create last month?",
            "fields": [
                "creation"
            ]
        },
        "output": "len(frappe.get_all('Item', filters={'creation': ['between', [frappe.utils.add_months(frappe.utils.today(), -1), frappe.utils.today()]]}))"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Show me items with unit 'Nos' and open status.",
            "fields": [
                "stock_uom",
                "disabled"
            ]
        },
        "output": "frappe.get_all('Item', filters={'stock_uom': 'Nos', 'disabled': 0}, fields=['item_code', 'item_name'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "How much rice is in stock?",
            "fields": [
                "item_code",
                "total_projected_qty"
            ]
        },
        "output": "frappe.get_all('Item', filters={'item_name': ['like', '%rice%']}, fields=['item_code', 'item_name', 'total_projected_qty'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Do we have enough items in the warehouse?",
            "fields": [
                "item_code",
                "total_projected_qty",
                "reorder_levels"
            ]
        },
        "output": "frappe.get_all('Item', filters={'total_projected_qty': ['<=', 0]}, fields=['item_code', 'item_name', 'total_projected_qty'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Any items running low?",
            "fields": [
                "item_code",
                "total_projected_qty"
            ]
        },
        "output": "frappe.get_all('Item', filters={'total_projected_qty': ['<', 10]}, fields=['item_code', 'item_name', 'total_projected_qty'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "What electronics do we have?",
            "fields": [
                "item_code",
                "item_group"
            ]
        },
        "output": "frappe.get_all('Item', filters={'item_group': 'Electronics'}, fields=['item_code', 'item_name', 'item_group'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Show items with color 'Red' and weight '500g'.",
            "fields": [
                "item_code",
                "attributes",
                "weight_per_unit"
            ]
        },
        "output": "frappe.get_all('Item', filters={'weight_per_unit': 500, 'attributes': ['like', '%Red%']}, fields=['item_code', 'item_name', 'weight_per_unit'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Show items approaching expiry in the next 30 days.",
            "fields": [
                "item_code",
                "end_of_life"
            ]
        },
        "output": "frappe.get_all('Item', filters={'end_of_life': ['between', [frappe.utils.today(), frappe.utils.add_days(frappe.utils.today(), 30)]]}, fields=['item_code', 'item_name', 'end_of_life'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Which items have batch numbers due for recall?",
            "fields": [
                "item_code",
                "has_batch_no"
            ]
        },
        "output": "frappe.get_all('Item', filters={'has_batch_no': 1}, fields=['item_code', 'item_name', 'has_batch_no'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Which items were transferred between warehouses last week?",
            "fields": [
                "item_code"
            ]
        },
        "output": "frappe.db.get_all('Stock Ledger Entry', filters={'posting_date': ['between', [frappe.utils.add_days(frappe.utils.today(), -7), frappe.utils.today()]], 'voucher_type': 'Stock Entry'}, fields=['item_code', 'warehouse', 'qty', 'posting_date'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "How much stock was moved from warehouse A to warehouse B?",
            "fields": [
                "item_code",
                "warehouse",
                "qty"
            ]
        },
        "output": "frappe.db.get_all('Stock Ledger Entry', filters={'from_warehouse': 'Warehouse A', 'to_warehouse': 'Warehouse B'}, fields=['item_code', 'qty'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Show items with a discount rate above 10%.",
            "fields": [
                "item_code",
                "max_discount"
            ]
        },
        "output": "frappe.get_all('Item', filters={'max_discount': ['>', 10]}, fields=['item_code', 'item_name', 'max_discount'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Show items with unit 'kg' and below reorder level.",
            "fields": [
                "item_code",
                "stock_uom",
                "total_projected_qty"
            ]
        },
        "output": "frappe.get_all('Item', filters={'stock_uom': 'kg', 'total_projected_qty': ['<', 10]}, fields=['item_code', 'item_name', 'total_projected_qty'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Show all items with UOM 'kg' and a price greater than $100.",
            "fields": [
                "item_code",
                "stock_uom",
                "standard_rate"
            ]
        },
        "output": "frappe.get_all('Item', filters={'stock_uom': 'kg', 'standard_rate': ['>', 100]}, fields=['item_code', 'item_name', 'standard_rate'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Show items that have been marked 'on hold' or 'delayed in delivery'.",
            "fields": [
                "item_code",
                "item_name",
                "description"
            ]
        },
        "output": "frappe.get_all('Item', filters=[['description', 'like', '%on hold%'], ['description', 'like', '%delayed%']], fields=['item_code', 'item_name', 'description'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "What items are requested by customer 'ABC Corp'?",
            "fields": [
                "item_code",
                "customer"
            ]
        },
        "output": "frappe.get_all('Item', filters={'customer': 'ABC Corp'}, fields=['item_code', 'item_name'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "What items were ordered by 'XYZ Ltd' in the last month?",
            "fields": [
                "item_code",
                "item_name",
                "customer",
                "creation"
            ]
        },
        "output": "frappe.get_all('Item', filters={'customer': 'XYZ Ltd'}, fields=['item_code', 'item_name'], filters={'creation': ['>=', frappe.utils.add_months(frappe.utils.nowdate(), -1)]})"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Show items available in both 'Warehouse A' and 'Warehouse B'.",
            "fields": [
                "item_code",
                "item_name"
            ]
        },
        "output": "frappe.get_all('Item', filters=[['warehouse', 'in', ['Warehouse A', 'Warehouse B']]], fields=['item_code', 'item_name'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "What items are in stock at 'Warehouse X' but out of stock at 'Warehouse Y'?",
            "fields": [
                "item_code",
                "item_name"
            ]
        },
        "output": "frappe.get_all('Item', filters={'warehouse': 'Warehouse X'}, fields=['item_code', 'item_name'])  # Out of stock comparison requires custom script"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "How many items were returned in the last month?",
            "fields": [
                "item_code",
                "item_name",
                "creation"
            ]
        },
        "output": "frappe.db.count('Item', filters={'is_return': 1, 'creation': ['>=', frappe.utils.add_months(frappe.utils.nowdate(), -1)]})  # Assumes 'is_return' custom field"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Show all items transferred from 'Warehouse A' to 'Warehouse B' in the last quarter.",
            "fields": [
                "item_code",
                "item_name"
            ]
        },
        "output": "frappe.get_all('Item', filters=[['warehouse', '=', 'Warehouse B']], fields=['item_code', 'item_name'])  # Item transfers tracked via Stock Entry"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "What items are part of the ongoing sale with a discount of 20% or more?",
            "fields": [
                "item_code",
                "item_name",
                "max_discount"
            ]
        },
        "output": "frappe.get_all('Item', filters={ 'max_discount': ['>=', 20] }, fields=['item_code', 'item_name', 'max_discount'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Show items currently on promotional offer for the 'Black Friday Sale'.",
            "fields": [
                "item_code",
                "item_name",
                "description"
            ]
        },
        "output": "frappe.get_all('Item', filters={ 'description': ['like', '%Black Friday Sale%'] }, fields=['item_code', 'item_name', 'description'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Which items are part of the ongoing production batch?",
            "fields": [
                "item_code",
                "item_name",
                "default_bom"
            ]
        },
        "output": "frappe.get_all('Item', filters={ 'default_bom': ['!=', ''] }, fields=['item_code', 'item_name', 'default_bom'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Show me items used in manufacturing 'Product X'.",
            "fields": [
                "item_code",
                "item_name",
                "default_bom"
            ]
        },
        "output": "frappe.get_all('Item', filters={ 'variant_of': 'Product X' }, fields=['item_code', 'item_name'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Which items were returned by 'ABC Corp' in the past 30 days?",
            "fields": [
                "item_code",
                "customer",
                "posting_date",
                "is_return"
            ]
        },
        "output": "frappe.get_all('Item', filters={'customer': 'ABC Corp', 'is_return': 1, 'posting_date': ['>=', frappe.utils.add_days(frappe.utils.today(), -30)]}, fields=['item_code', 'item_name'])"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "How can we track material usage in work orders with the BOM?",
            "fields": [
                "backflush_raw_materials_based_on"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').backflush_raw_materials_based_on"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Is there a way to track material use in work orders with the BOM?",
            "fields": [
                "backflush_raw_materials_based_on"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').backflush_raw_materials_based_on"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "How do we calculate material usage for work orders based on the BOM?",
            "fields": [
                "backflush_raw_materials_based_on"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').backflush_raw_materials_based_on"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Can we specify different consumption rates for materials at various production stages?",
            "fields": [
                "material_consumption_at_operation_level"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').material_consumption_at_operation_level"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Is it possible to adjust material consumption rates depending on the production stage?",
            "fields": [
                "material_consumption_at_operation_level"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').material_consumption_at_operation_level"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Can we change material consumption rates as the production process progresses?",
            "fields": [
                "material_consumption_at_operation_level"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').material_consumption_at_operation_level"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "How do we figure out the raw material usage for sub-assemblies?",
            "fields": [
                "backflush_raw_materials_based_on",
                "allow_sub_assembly_item_backflush"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').allow_sub_assembly_item_backflush"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "What\u2019s the method to calculate raw material usage for sub-assemblies?",
            "fields": [
                "backflush_raw_materials_based_on",
                "allow_sub_assembly_item_backflush"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').backflush_raw_materials_based_on"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Can we specify different consumption rates for materials at various production stages?",
            "fields": [
                "material_consumption"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').material_consumption"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Is it possible to adjust material consumption rates depending on the production stage?",
            "fields": [
                "material_consumption"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').material_consumption"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Can we change material consumption rates as the production process progresses?",
            "fields": [
                "material_consumption"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').material_consumption"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "How do we figure out the raw material usage for sub-assemblies?",
            "fields": [
                "set_op_cost_and_scrap_from_sub_assemblies"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').set_op_cost_and_scrap_from_sub_assemblies"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "What\u2019s the method to calculate raw material usage for sub-assemblies?",
            "fields": [
                "set_op_cost_and_scrap_from_sub_assemblies"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').set_op_cost_and_scrap_from_sub_assemblies"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Can we track work orders separately depending on different BOM versions?",
            "fields": [
                "validate_components_quantities_per_bom"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').validate_components_quantities_per_bom"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Is it possible to track work orders based on the BOM version?",
            "fields": [
                "validate_components_quantities_per_bom"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').validate_components_quantities_per_bom"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "How do we manage different BOM versions for work orders?",
            "fields": [
                "validate_components_quantities_per_bom"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').validate_components_quantities_per_bom"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Can we set material wastage percentages directly within the BOM?",
            "fields": [
                "validate_components_quantities_per_bom"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').validate_components_quantities_per_bom"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Is it possible to include material wastage percentages in the BOM?",
            "fields": [
                "validate_components_quantities_per_bom"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').validate_components_quantities_per_bom"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Can we manage wastage percentages for materials directly in the BOM?",
            "fields": [
                "validate_components_quantities_per_bom"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').validate_components_quantities_per_bom"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Do we need to track separate stock for WIP and finished goods?",
            "fields": [
                "default_wip_warehouse",
                "default_fg_warehouse"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_wip_warehouse, frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_fg_warehouse"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Should WIP and finished goods be tracked separately in the system?",
            "fields": [
                "default_wip_warehouse",
                "default_fg_warehouse"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_wip_warehouse, frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_fg_warehouse"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Do we maintain separate inventory for WIP and finished goods?",
            "fields": [
                "default_wip_warehouse",
                "default_fg_warehouse"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_wip_warehouse, frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_fg_warehouse"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "How  we manage the warehouse for finished goods in ERPNext?",
            "fields": [
                "default_fg_warehouse"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_fg_warehouse"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Where do we store finished goods in ERPNext?",
            "fields": [
                "default_fg_warehouse"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_fg_warehouse"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Where should finished goods be managed in ERPNext?",
            "fields": [
                "default_fg_warehouse"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_fg_warehouse"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Are we tracking the time spent on each operation for work orders?",
            "fields": [
                "job_card_excess_transfer",
                "mins_between_operations"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').mins_between_operations"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Can we track the time used in each operation for work orders?",
            "fields": [
                "mins_between_operations"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').mins_between_operations"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Do we monitor time spent on operations for work orders?",
            "fields": [
                "mins_between_operations"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').mins_between_operations"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Can we track the production rate at each workstation in real-time?",
            "fields": [
                "disable_capacity_planning",
                "allow_overtime",
                "allow_production_on_holidays"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').disable_capacity_planning"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "How can we monitor the production rate per workstation in real-time?",
            "fields": [
                "disable_capacity_planning"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').disable_capacity_planning"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Is real-time tracking of production rates possible for workstations?",
            "fields": [
                "disable_capacity_planning"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').disable_capacity_planning"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Can we forecast production capacity needs based on future work orders?",
            "fields": [
                "capacity_planning",
                "capacity_planning_for_days"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').capacity_planning"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Is it possible to forecast production needs based on upcoming work orders?",
            "fields": [
                "capacity_planning",
                "capacity_planning_for_days"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').capacity_planning_for_days"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Can we predict future production capacity based on work orders?",
            "fields": [
                "capacity_planning"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').capacity_planning"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Is raw material cost linked directly to the consumption entry in ERPNext?",
            "fields": [
                "get_rm_cost_from_consumption_entry"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').get_rm_cost_from_consumption_entry"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Can raw material costs be tied directly to consumption entries in ERPNext?",
            "fields": [
                "get_rm_cost_from_consumption_entry"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').get_rm_cost_from_consumption_entry"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Is raw material cost reflected in consumption entries in ERPNext?",
            "fields": [
                "get_rm_cost_from_consumption_entry"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').get_rm_cost_from_consumption_entry"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "What\u2019s the default warehouse for work-in-progress items in ERPNext?",
            "fields": [
                "default_wip_warehouse"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_wip_warehouse"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Where are work-in-progress items stored by default in ERPNext?",
            "fields": [
                "default_wip_warehouse"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_wip_warehouse"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "What warehouse is used by default for WIP in ERPNext?",
            "fields": [
                "default_wip_warehouse"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_wip_warehouse"
    },
    {
        "input": {
            "doctype": "Manufacturing Settings",
            "question": "Do we track the time taken for each process step during production?",
            "fields": [
                "mins_between_operations"
            ]
        },
        "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').mins_between_operations"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "What's the total value of pending orders?",
            "fields": [
                "status",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={'status': 'Unpaid'}, fields=['grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "How many items are currently backordered?",
            "fields": [
                "item_name",
                "delivered_qty",
                "qty"
            ]
        },
        "output": "frappe.get_all('Sales Invoice Item', filters={'delivered_qty': ['<', 'qty']}, fields=['item_name'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "What's the total value of sales orders generated this month?",
            "fields": [
                "posting_date",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={\"posting_date\": [\"between\", [frappe.utils.get_first_day(frappe.utils.nowdate()), frappe.utils.get_last_day(frappe.utils.nowdate())]]}, fields=['grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "What is the quantity of backordered items for customer 'Delta Electronics'?",
            "fields": [
                "customer",
                "item_name",
                "qty",
                "delivered_qty"
            ]
        },
        "output": "frappe.get_all('Sales Invoice Item', filters={'parenttype': 'Sales Invoice', 'customer': 'Delta Electronics', 'delivered_qty': ['<', 'qty']}, fields=['item_name', 'qty', 'delivered_qty'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "What is the total value of sales orders placed by 'ByteWorks Ltd' this month?",
            "fields": [
                "customer",
                "posting_date",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={\"customer\": \"ByteWorks Ltd\", \"posting_date\": [\"between\", [frappe.utils.get_first_day(frappe.utils.nowdate()), frappe.utils.get_last_day(frappe.utils.nowdate())]]}, fields=['grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "What's the total value of pending orders?",
            "fields": [
                "status",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={'status': 'Unpaid'}, fields=['grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "How many items are currently backordered?",
            "fields": [
                "item_name",
                "delivered_qty",
                "qty"
            ]
        },
        "output": "frappe.get_all('Sales Invoice Item', filters={'delivered_qty': ['<', 'qty']}, fields=['item_name'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Did we meet our sales targets for the previous quarter?",
            "fields": [
                "posting_date",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={\"posting_date\": [\"between\", [frappe.utils.add_months(frappe.utils.get_first_day(frappe.utils.nowdate()), -3), frappe.utils.get_first_day(frappe.utils.nowdate())]]}, fields=['grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "How many sales orders were created during February?",
            "fields": [
                "posting_date"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={\"posting_date\": [\"between\", ['2025-02-01', '2025-02-28']]}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "How many sales orders were placed with status 'Delivered' this quarter?",
            "fields": [
                "name",
                "status",
                "posting_date"
            ]
        },
        "output": "frappe.db.count('Sales Invoice', filters={'status': 'Delivered', 'posting_date': ['between', [frappe.utils.get_quarter_start(frappe.utils.today()), frappe.utils.today()]]})"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Please show all sales orders placed by customers from 'East Coast' this week.",
            "fields": [
                "name",
                "customer",
                "territory",
                "posting_date"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={'territory': 'East Coast', 'posting_date': ['between', [frappe.utils.add_days(frappe.utils.today(), -7), frappe.utils.today()]]}, fields=['name', 'customer', 'territory'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "What is the status of the sales orders placed by top-tier customer 'TechGlobal Inc' this week?",
            "fields": [
                "name",
                "customer",
                "status",
                "posting_date"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={'customer': 'TechGlobal Inc', 'posting_date': ['between', [frappe.utils.add_days(frappe.utils.today(), -7), frappe.utils.today()]]}, fields=['name', 'status'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Can you display the sales orders created by customers from Chicago this week?",
            "fields": [
                "name",
                "customer",
                "customer_address",
                "posting_date"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={'customer_address': ['like', '%Chicago%'], 'posting_date': ['between', [frappe.utils.add_days(frappe.utils.today(), -7), frappe.utils.today()]]}, fields=['name', 'customer', 'customer_address'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "List all the sales orders created this month for product 'Apple MacBook Pro'.",
            "fields": [
                "name",
                "items",
                "item_name",
                "posting_date"
            ]
        },
        "output": "frappe.get_all('Sales Invoice Item', filters={'item_name': 'Apple MacBook Pro', 'parenttype': 'Sales Invoice', 'posting_date': ['between', [frappe.utils.get_first_day(frappe.utils.today()), frappe.utils.today()]]}, fields=['parent as sales_invoice', 'item_name'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "How many sales orders were generated in the last 7 days?",
            "fields": [
                "name",
                "posting_date"
            ]
        },
        "output": "frappe.db.count('Sales Invoice', filters={'posting_date': ['between', [frappe.utils.add_days(frappe.utils.today(), -7), frappe.utils.today()]]})"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "How much value in sales orders was processed by the 'Marketing Division' this quarter?",
            "fields": [
                "name",
                "department",
                "base_grand_total",
                "posting_date"
            ]
        },
        "output": "frappe.db.get_value('Sales Invoice', {'department': 'Marketing Division', 'posting_date': ['between', [frappe.utils.get_quarter_start(frappe.utils.today()), frappe.utils.today()]]}, ['sum(base_grand_total)'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "What was the total sales order value for the second quarter?",
            "fields": [
                "name",
                "grand_total",
                "posting_date"
            ]
        },
        "output": "frappe.db.get_value('Sales Invoice', {'posting_date': ['between', ['2025-04-01', '2025-06-30']]}, ['sum(grand_total)'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "What is the total value of open sales orders worth over $20,000?",
            "fields": [
                "name",
                "grand_total",
                "status"
            ]
        },
        "output": "frappe.db.get_value('Sales Invoice', {'status': 'Unpaid', 'grand_total': ['>', 20000]}, ['sum(grand_total)'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "List all sales orders created with a  value greater than $15,000 for 'Fusion Enterprises'.",
            "fields": [
                "name",
                "grand_total",
                "customer"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Fusion Enterprises', 'grand_total': ['>', 15000]}, fields=['name', 'grand_total', 'customer'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "show me all sales orders created by 'NorthStar Technologies' this month?",
            "fields": [
                "name",
                "customer",
                "posting_date"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={'customer': 'NorthStar Technologies', 'posting_date': ['between', [frappe.utils.get_first_day(frappe.utils.today()), frappe.utils.today()]]}, fields=['name', 'customer', 'posting_date'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "How many sales orders were made for the 'MountainPeak Development' project?",
            "fields": [
                "name",
                "project"
            ]
        },
        "output": "frappe.db.count('Sales Invoice', filters={'project': 'MountainPeak Development'})"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Can you show me the details of open sales orders from last month for 'CloudServe Solutions'?",
            "fields": [
                "name",
                "customer",
                "status",
                "posting_date",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={'customer': 'CloudServe Solutions', 'status': 'Unpaid', 'posting_date': ['between', [frappe.utils.add_months(frappe.utils.get_first_day(frappe.utils.today()), -1), frappe.utils.add_days(frappe.utils.get_first_day(frappe.utils.today()), -1)] ]}, fields=['name', 'customer', 'grand_total', 'status'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "What's the total value of sales orders with a payment status 'Pending' for 'BrightTech Innovations'?",
            "fields": [
                "customer",
                "status",
                "outstanding_amount",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={'customer': 'BrightTech Innovations', 'status': 'Unpaid'}, fields=['name', 'grand_total', 'outstanding_amount'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Please list all the sales orders that were created last week for product 'Ultra Wireless Router'.",
            "fields": [
                "posting_date",
                "items",
                "item_name"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['between', ['last_week_start', 'last_week_end']], 'items.item_name': 'Ultra Wireless Router'}, fields=['name', 'posting_date', 'items'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "How many sales orders were confirmed in the past 30 days for 'SmartTech Enterprises'?",
            "fields": [
                "customer",
                "posting_date"
            ]
        },
        "output": "frappe.db.count('Sales Invoice', filters={'customer': 'SmartTech Enterprises', 'posting_date': ['>', '30_days_ago']})"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "What\u2019s the total sales order value for 'iPhone 14' in the past quarter?",
            "fields": [
                "items",
                "item_name",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['between', ['last_quarter_start', 'last_quarter_end']], 'items.item_name': 'iPhone 14'}, fields=['name', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Any Sales Invoices linked to the 'Crescent Towers' project?",
            "fields": [
                "project"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={'project': 'Crescent Towers'}, fields=['name', 'project'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Are there any sales invoices linked to 'Oceanic Ventures'?",
            "fields": [
                "customer"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Oceanic Ventures'}, fields=['name', 'customer'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "What\u2019s the total sales value of invoices that are still unpaid for customer 'Global Enterprises'?",
            "fields": [
                "customer",
                "outstanding_amount",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Global Enterprises', 'outstanding_amount': ['>', 0]}, fields=['grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "What's the total value of pending orders?",
            "fields": [
                "status",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={'status': 'To Deliver and Bill'}, fields=['grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "How many items are currently backordered?",
            "fields": [
                "items",
                "delivered_qty",
                "qty"
            ]
        },
        "output": "frappe.get_all('Sales Order Item', filters={'delivered_qty': ['<', 'qty']}, fields=['item_code'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "What's the total value of sales orders generated this month?",
            "fields": [
                "transaction_date",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={ 'transaction_date': ['between', ['2025-05-01', '2025-05-31']] }, fields=['grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "What is the quantity of backordered items for customer 'Delta Electronics'?",
            "fields": [
                "customer",
                "items",
                "delivered_qty",
                "qty"
            ]
        },
        "output": "frappe.get_all('Sales Order Item', filters={'parenttype': 'Sales Order', 'parent.customer': 'Delta Electronics', 'delivered_qty': ['<', 'qty']}, fields=['item_code', 'qty'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "Did we meet our sales targets for the previous quarter?",
            "fields": [
                "transaction_date",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={ 'transaction_date': ['between', ['2025-01-01', '2025-03-31']] }, fields=['grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "How many sales orders were created during March?",
            "fields": [
                "transaction_date",
                "name"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={ 'transaction_date': ['between', ['2025-03-01', '2025-03-31']] }, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "What is the total value of sales orders placed by 'TechPro Solutions' this month?",
            "fields": [
                "customer",
                "transaction_date",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={ 'customer': 'TechPro Solutions', 'transaction_date': ['between', ['2025-05-01', '2025-05-31']] }, fields=['grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "How many sales orders were placed with status 'Delivered' this quarter?",
            "fields": [
                "name",
                "status",
                "transaction_date"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={'status': 'Delivered', 'transaction_date': ('between', ['2025-01-01', '2025-03-31'])}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "Please show all sales orders placed by customers from the 'West Coast' this week.",
            "fields": [
                "name",
                "territory",
                "transaction_date"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={'territory': 'West Coast', 'transaction_date': ('between', ['2025-04-25', '2025-05-01'])}, fields=['name', 'customer'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "What is the status of the sales orders placed by top-tier customers 'Global Enterprises' this week?",
            "fields": [
                "name",
                "customer",
                "transaction_date",
                "status"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={'customer': 'Global Enterprises', 'transaction_date': ('between', ['2025-04-25', '2025-05-01'])}, fields=['name', 'status'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "Can you display the sales orders created by customers from New York this week?",
            "fields": [
                "name",
                "customer",
                "transaction_date",
                "territory"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={'territory': 'New York', 'transaction_date': ('between', ['2025-04-25', '2025-05-01'])}, fields=['name', 'customer'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "List all the sales orders created this month for product 'Smartphone XYZ'.",
            "fields": [
                "name",
                "items",
                "transaction_date"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={'transaction_date': ('between', ['2025-05-01', '2025-05-31'])}, fields=['name'], filters_nested={'items': {'item_name': 'Smartphone XYZ'}})"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "How many sales orders were generated in the last 7 days?",
            "fields": [
                "name",
                "transaction_date"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={'transaction_date': ('between', ['2025-04-24', '2025-05-01'])}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "How much value in sales orders was processed by the 'Finance Division' this quarter?",
            "fields": [
                "grand_total",
                "cost_center",
                "transaction_date"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={'cost_center': 'Finance Division', 'transaction_date': ('between', ['2025-01-01', '2025-03-31'])}, fields=['grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "What was the total sales order value for the second quarter?",
            "fields": [
                "grand_total",
                "transaction_date"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={'transaction_date': ('between', ['2025-04-01', '2025-06-30'])}, fields=['grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "What is the total value of open sales orders worth over $10,000?",
            "fields": [
                "grand_total",
                "status"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={'status': 'Open', 'grand_total': ('>', 10000)}, fields=['grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "List all sales orders created with a total value greater than $5,000 for 'HighTech Corp'.",
            "fields": [
                "customer",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={'customer': 'HighTech Corp', 'grand_total': ('>', 5000)}, fields=['name', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "Can you show me all sales orders created by 'Greenfield Ltd.' this month?",
            "fields": [
                "customer",
                "transaction_date"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={'customer': 'Greenfield Ltd.', 'transaction_date': ('between', ['2025-05-01', '2025-05-31'])}, fields=['name', 'transaction_date'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "How many sales orders were made for the 'Redwood Project'?",
            "fields": [
                "project"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={'project': 'Redwood Project'}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "Can you show me the details of open sales orders from last month for 'TechFusion Inc.'?",
            "fields": [
                "customer",
                "status",
                "transaction_date"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={'customer': 'TechFusion Inc.', 'status': 'To Deliver and Bill', 'transaction_date': ['between', ['2025-04-01', '2025-04-30']]}, fields=['name', 'customer', 'status', 'grand_total', 'transaction_date'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "What's the total value of sales orders with a payment status 'Pending' for 'Global Enterprises'?",
            "fields": [
                "customer",
                "status",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={'customer': 'Global Enterprises', 'billing_status': 'Not Billed'}, fields=['name', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "Please list all the sales orders that were created last week for product 'Wireless Router'.",
            "fields": [
                "transaction_date",
                "items"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={'transaction_date': ['between', ['2025-04-21', '2025-04-27']], 'items.item_name': 'Wireless Router'}, fields=['name', 'customer', 'transaction_date', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "How many sales orders were confirmed in the past 30 days for 'TechPro Solutions'?",
            "fields": [
                "customer",
                "transaction_date"
            ]
        },
        "output": "frappe.db.count('Sales Order', filters={'customer': 'TechPro Solutions', 'transaction_date': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -30)]})"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "What\u2019s the total sales order value for 'Smartphone XYZ' in the past quarter?",
            "fields": [
                "items",
                "transaction_date",
                "grand_total"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={'transaction_date': ['between', ['2025-01-01', '2025-03-31']], 'items.item_name': 'Smartphone XYZ'}, fields=['name', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "How do the sales orders from last month compare with this month?",
            "fields": [
                "transaction_date",
                "grand_total"
            ]
        },
        "output": "last_month = frappe.get_all('Sales Order', filters={'transaction_date': ['between', ['2025-03-01', '2025-03-31']]}, fields=['grand_total'])\nthis_month = frappe.get_all('Sales Order', filters={'transaction_date': ['between', ['2025-04-01', '2025-04-30']]}, fields=['grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "How many sales orders were placed by new customers this month?",
            "fields": [
                "customer",
                "transaction_date"
            ]
        },
        "output": "# Assuming you have a custom field or logic to identify new customers\ndocuments = frappe.get_all('Sales Order', filters={'transaction_date': ['between', ['2025-05-01', '2025-05-31']]}, fields=['customer'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "How many sales orders were created in the 'North East' region this quarter?",
            "fields": [
                "territory",
                "transaction_date"
            ]
        },
        "output": "frappe.db.count('Sales Order', filters={'territory': 'North East', 'transaction_date': ['between', ['2025-01-01', '2025-03-31']]})"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "How many sales orders were cancelled last week?",
            "fields": [
                "transaction_date",
                "status"
            ]
        },
        "output": "frappe.db.count('Sales Order', filters={'status': 'Cancelled', 'transaction_date': ['between', ['2025-04-21', '2025-04-27']]})"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "How many sales orders were made for product group 'Smartphones' this quarter?",
            "fields": [
                "transaction_date",
                "items.item_group"
            ]
        },
        "output": "frappe.db.count('Sales Order', filters={'transaction_date': ['between', ['2025-01-01', '2025-03-31']], 'items.item_group': 'Smartphones'})"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "What\u2019s the trend in sales orders placed by 'TechPro Solutions' over the last six months?",
            "fields": [
                "transaction_date",
                "customer"
            ]
        },
        "output": "frappe.get_all('Sales Order', filters={'customer': 'TechPro Solutions', 'transaction_date': ['between', ['2024-11-01', '2025-04-30']]}, fields=['transaction_date', 'grand_total'])"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "What is the average value of sales orders created this month?",
            "fields": [
                "transaction_date",
                "grand_total"
            ]
        },
        "output": "frappe.db.sql(\"SELECT AVG(grand_total) FROM `tabSales Order` WHERE transaction_date BETWEEN '2025-05-01' AND '2025-05-31'\")[0][0]"
    },
    {
        "input": {
            "doctype": "Sales Order",
            "question": "How many sales orders for 'Smartphone XYZ' are pending due to stock unavailability?",
            "fields": [
                "items.item_name",
                "delivery_status"
            ]
        },
        "output": "frappe.db.count('Sales Order', filters={'items.item_name': 'Smartphone XYZ', 'delivery_status': 'Not Delivered'})"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Is anyone on leave today?",
            "fields": [
                "employee",
                "status"
            ]
        },
        "output": "frappe.get_all('Leave Application', filters={'from_date': ['<=', '2025-05-01'], 'to_date': ['>=', '2025-05-01'], 'status': 'Approved'}, fields=['employee'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "How many employees are in the Sales department?",
            "fields": [
                "department"
            ]
        },
        "output": "frappe.db.count('Employee', filters={'department': 'Sales'})"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Who joined last quarter?",
            "fields": [
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-01-01', '2025-03-31']]}, fields=['name', 'employee_name'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Show me the list of all team leads.",
            "fields": [
                "designation"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'designation': 'Team Lead'}, fields=['name', 'employee_name', 'department'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Who was hired last month?",
            "fields": [
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-01', '2025-04-30']]}, fields=['name', 'employee_name'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "How many employees are currently on payroll?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.db.count('Employee', filters={'status': 'Active'})"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Show the employee directory.",
            "fields": [
                "employee_name",
                "department",
                "designation",
                "status"
            ]
        },
        "output": "frappe.get_all('Employee', fields=['name', 'employee_name', 'department', 'designation', 'status'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Who recently resigned?",
            "fields": [
                "status",
                "relieving_date"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'status': 'Left'}, fields=['name', 'employee_name', 'relieving_date'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "How many employees are eligible for retirement this year?",
            "fields": [
                "date_of_birth"
            ]
        },
        "output": "frappe.db.count('Employee', filters={ 'date_of_birth': ['<=', '1960-12-31'] })"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "How many employees are on a probationary period?",
            "fields": [
                "employment_type"
            ]
        },
        "output": "frappe.db.count('Employee', filters={'employment_type': 'Probation'})"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "How many employees have been with us for over 5 years?",
            "fields": [
                "date_of_joining"
            ]
        },
        "output": "frappe.db.count('Employee', filters={ 'date_of_joining': ['<=', frappe.utils.add_days(frappe.utils.nowdate(), -1825)] })"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "List employees connected to Project 'Alpha Construction'.",
            "fields": [
                "project"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'project': 'Alpha Construction'}, fields=['name', 'employee_name', 'project'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Who recently resigned?",
            "fields": [
                "employee_name",
                "status",
                "relieving_date"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'status': 'Left'}, fields=['employee_name', 'status', 'relieving_date'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "How many employees are eligible for retirement this year?",
            "fields": [
                "employee_name",
                "date_of_birth"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_birth': ['<=', '1965-12-31']}, fields=['employee_name'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "How many employees are on a probationary period?",
            "fields": [
                "employee_name",
                "employment_type"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'employment_type': 'Probation'}, fields=['employee_name'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "How many employees are using the new system?",
            "fields": [
                "employee_name",
                "status"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'status': 'Active'}, fields=['employee_name'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "How many employees have been with us for over 5 years?",
            "fields": [
                "employee_name",
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': ['<=', '2020-05-01']}, fields=['employee_name'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "List employees connected to Project 'Alpha Construction'.",
            "fields": [
                "employee_name",
                "project"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'project': 'Alpha Construction'}, fields=['employee_name', 'project'])"
    },
    {
        "input": {
            "doctype": "Customer",
            "question": "Which customers have not paid yet from the retail group?",
            "fields": [
                "customer_name",
                "customer_group",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_all('Customer', filters={'customer_group': 'Retail'}, fields=['customer_name'], filters_ext={'outstanding_amount': ['>', 0]})"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Which departments had the most employees join this week?",
            "fields": [
                "employee_name",
                "department",
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-25', '2025-05-01']]}, fields=['department'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "What\u2019s the employee hiring trend this quarter?",
            "fields": [
                "employee_name",
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-01', '2025-06-30']]}, fields=['date_of_joining'])"
    },
    {
        "input": {
            "doctype": "Customer",
            "question": "Show customers from top territories this week.",
            "fields": [
                "customer_name",
                "territory",
                "creation"
            ]
        },
        "output": "frappe.get_all('Customer', filters={'creation': ['between', ['2025-04-25', '2025-05-01']]}, fields=['customer_name', 'territory'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "List employees named John Kim added this month.",
            "fields": [
                "employee_name",
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'employee_name': 'John Kim', 'date_of_joining': ['between', ['2025-05-01', '2025-05-31']]}, fields=['employee_name', 'date_of_joining'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "What's the trend in new employee joining dates this quarter?",
            "fields": [
                "employee_name",
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-01', '2025-06-30']]}, fields=['employee_name', 'date_of_joining'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "How many employee records are pending approval?",
            "fields": [
                "employee_name",
                "status"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'status': 'Pending'}, fields=['name', 'employee_name'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Summarize employees added last quarter.",
            "fields": [
                "employee_name",
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-01-01', '2025-03-31']]}, fields=['employee_name', 'date_of_joining'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Total number of employees added this year.",
            "fields": [
                "name"
            ]
        },
        "output": "frappe.db.count('Employee', {'date_of_joining': ['between', ['2025-01-01', '2025-12-31']]})"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Fetch employees who joined on January 1 and are marked as active.",
            "fields": [
                "employee_name",
                "date_of_joining",
                "status"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': '2025-01-01', 'status': 'Active'}, fields=['employee_name', 'date_of_joining', 'status'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Show employees with the highest activity this week.",
            "fields": [
                "employee_name",
                "modified"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'modified': ['between', ['2025-04-25', '2025-05-01']]}, fields=['employee_name', 'modified'], order_by='modified desc')"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Which employees in Finance have an open status?",
            "fields": [
                "employee_name",
                "department",
                "status"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'department': 'Finance', 'status': 'Open'}, fields=['employee_name', 'department', 'status'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Which employees are still pending?",
            "fields": [
                "employee_name",
                "status"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'status': 'Pending'}, fields=['employee_name', 'status'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Which employees have not been processed yet?",
            "fields": [
                "employee_name",
                "status"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'status': 'Pending'}, fields=['employee_name', 'status'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Who's assigned to the 'Lakeside Park' project?",
            "fields": [
                "employee_name",
                "project"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'project': 'Lakeside Park'}, fields=['employee_name', 'project'])"
    },
    {
        "input": {
            "doctype": "Customer",
            "question": "Which customers have not paid yet from the retail group?",
            "fields": [
                "customer_name",
                "customer_group",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_all('Customer', filters={'customer_group': 'Retail', 'outstanding_amount': ['>', 0]}, fields=['customer_name', 'outstanding_amount'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Which departments had the most employees join this week?",
            "fields": [
                "department",
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-28', '2025-05-04']]}, fields=['department'], group_by='department', order_by='count(*) desc')"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "What\u2019s the employee hiring trend this quarter?",
            "fields": [
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-01', '2025-06-30']]}, fields=['date_of_joining'], order_by='date_of_joining asc')"
    },
    {
        "input": {
            "doctype": "Customer",
            "question": "Show customers from top territories this week.",
            "fields": [
                "customer_name",
                "territory"
            ]
        },
        "output": "frappe.get_all('Customer', filters={'creation': ['between', ['2025-04-28', '2025-05-04']]}, fields=['customer_name', 'territory'], order_by='territory desc')"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "List employees named John Kim added this month.",
            "fields": [
                "employee_name",
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'employee_name': 'John Kim', 'date_of_joining': ['between', ['2025-05-01', '2025-05-31']]}, fields=['name', 'employee_name', 'date_of_joining'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "What's the trend in new employee joining dates this quarter?",
            "fields": [
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-01', '2025-06-30']]}, fields=['date_of_joining'], order_by='date_of_joining asc')"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "How many employee records are pending approval?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'status': 'Pending'}, fields=['name', 'employee_name'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Summarize employees added last quarter.",
            "fields": [
                "employee_name",
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-01-01', '2025-03-31']]}, fields=['employee_name', 'date_of_joining'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Total number of employees added this year.",
            "fields": [
                "name"
            ]
        },
        "output": "frappe.db.count('Employee', {'date_of_joining': ['between', ['2025-01-01', '2025-12-31']]})"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Fetch employees who joined on January 1 and are marked as active.",
            "fields": [
                "employee_name",
                "status",
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'status': 'Active', 'date_of_joining': '2025-01-01'}, fields=['employee_name', 'date_of_joining'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Show employees with the highest activity this week.",
            "fields": [
                "employee_name",
                "modified"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'modified': ['between', ['2025-04-28', '2025-05-04']]}, fields=['employee_name', 'modified'], order_by='modified desc')"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Which employees in Finance have an open status?",
            "fields": [
                "employee_name",
                "department",
                "status"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'department': 'Finance', 'status': 'Open'}, fields=['employee_name', 'status'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Which employees are still pending?",
            "fields": [
                "employee_name",
                "status"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'status': 'Pending'}, fields=['employee_name', 'status'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Which employees have not been processed yet?",
            "fields": [
                "employee_name",
                "status"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'status': 'Draft'}, fields=['employee_name', 'status'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Who's assigned to the 'Lakeside Park' project?",
            "fields": [
                "employee_name",
                "project"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'project': 'Lakeside Park'}, fields=['employee_name', 'project'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Which employees are assigned to the 'Maple Ridge Expansion' project?",
            "fields": [
                "employee_name",
                "project"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'project': 'Maple Ridge Expansion'}, fields=['employee_name', 'project'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Any employees linked to the 'Sunset Villas' project?",
            "fields": [
                "employee_name",
                "project"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'project': 'Sunset Villas'}, fields=['employee_name', 'project'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Which employees are assigned to the 'Blue Ocean Resort' project?",
            "fields": [
                "employee_name",
                "project"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'project': 'Blue Ocean Resort'}, fields=['employee_name', 'project'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "How many employees received performance awards last quarter?",
            "fields": [
                "employee_name",
                "feedback"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'feedback': ['like', '%award%'], 'date_of_joining': ['between', ['2025-01-01', '2025-03-31']]}, fields=['employee_name', 'feedback'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "How many employees have been promoted to managerial roles this year?",
            "fields": [
                "employee_name",
                "designation"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'designation': ['like', '%Manager%'], 'date_of_joining': ['between', ['2025-01-01', '2025-12-31']]}, fields=['employee_name', 'designation', 'date_of_joining'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "How many employees are on maternity leave?",
            "fields": [
                "employee_name",
                "status",
                "gender"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'gender': 'Female', 'status': 'On Leave'}, fields=['employee_name', 'status', 'gender'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Which departments had the most employees join this week?",
            "fields": [
                "department",
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-28', '2025-05-04']]}, fields=['department'], group_by='department', order_by='count(*) desc')"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "What\u2019s the employee hiring trend this quarter?",
            "fields": [
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-01', '2025-06-30']]}, fields=['employee_name', 'date_of_joining'], order_by='date_of_joining asc')"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "List employees named John Kim added this month.",
            "fields": [
                "employee_name",
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'employee_name': 'John Kim', 'date_of_joining': ['between', ['2025-05-01', '2025-05-31']]}, fields=['employee', 'employee_name', 'date_of_joining'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "What's the trend in new employee joining dates this quarter?",
            "fields": [
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-01', '2025-06-30']]}, fields=['date_of_joining'], order_by='date_of_joining asc')"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "How many employee records are pending approval?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'status': 'Pending'}, fields=['employee_name', 'status'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Summarize employees added last quarter.",
            "fields": [
                "employee_name",
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-01-01', '2025-03-31']]}, fields=['employee_name', 'date_of_joining'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Total number of employees added this year.",
            "fields": [
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-01-01', '2025-12-31']]}, fields=['employee_name'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Fetch employees who joined on January 1 and are marked as active.",
            "fields": [
                "date_of_joining",
                "status"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': '2025-01-01', 'status': 'Active'}, fields=['employee_name', 'status'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Show employees with the highest activity this week.",
            "fields": [
                "employee_name",
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-28', '2025-05-04']]}, fields=['employee_name', 'date_of_joining'], order_by='date_of_joining desc')"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Which employees in Finance have an open status?",
            "fields": [
                "department",
                "status"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'department': 'Finance', 'status': 'Open'}, fields=['employee_name', 'status'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Which employees are still pending?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'status': 'Pending'}, fields=['employee_name'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Which employees have not been processed yet?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'status': 'Not Processed'}, fields=['employee_name'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Who's assigned to the 'Lakeside Park' project?",
            "fields": [
                "employee_name",
                "project"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'project': 'Lakeside Park'}, fields=['employee_name', 'project'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Which employees are assigned to the 'Maple Ridge Expansion' project?",
            "fields": [
                "employee_name",
                "project"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'project': 'Maple Ridge Expansion'}, fields=['employee_name', 'project'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Any employees linked to the 'Sunset Villas' project?",
            "fields": [
                "employee_name",
                "project"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'project': 'Sunset Villas'}, fields=['employee_name', 'project'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Which employees are assigned to the 'Blue Ocean Resort' project?",
            "fields": [
                "employee_name",
                "project"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'project': 'Blue Ocean Resort'}, fields=['employee_name', 'project'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Which department had the most employees join recently?",
            "fields": [
                "department",
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': ['>', '2025-04-01']}, fields=['department'], group_by='department', order_by='count(*) desc')"
    },
    {
        "input": {
            "doctype": "Customer",
            "question": "Which customers have not paid yet from the retail group?",
            "fields": [
                "customer_name",
                "customer_group",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_all('Customer', filters={'customer_group': 'Retail', 'outstanding_amount': ['>', 0]}, fields=['customer_name', 'customer_group', 'outstanding_amount'])"
    },
    {
        "input": {
            "doctype": "Customer",
            "question": "Show customers from top territories this week.",
            "fields": [
                "territory",
                "creation"
            ]
        },
        "output": "frappe.get_all('Customer', filters={'creation': ['between', ['2025-04-28', '2025-05-04']]}, fields=['name', 'territory'], order_by='territory')"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "List employees named John Kim added this month.",
            "fields": [
                "employee_name",
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'employee_name': 'John Kim', 'date_of_joining': ['between', ['2025-05-01', '2025-05-31']]}, fields=['name', 'employee_name', 'date_of_joining'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Which department had the most employees join recently?",
            "fields": [
                "department",
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': ['>=', '2025-04-01']}, fields=['department'], group_by='department', order_by='count(*) desc')"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "How many employees have been promoted to managerial roles this year?",
            "fields": [
                "employee_name",
                "designation",
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'designation': ['like', '%Manager%'], 'date_of_joining': ['between', ['2025-01-01', '2025-12-31']]}, fields=['employee_name', 'designation', 'date_of_joining'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Which employees have been transferred to a new department this month?",
            "fields": [
                "employee_name",
                "department",
                "date_of_joining"
            ]
        },
        "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-05-01', '2025-05-31']]}, fields=['employee_name', 'department', 'date_of_joining'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Who is currently listed as the custodian for asset PRINTER-HX200?",
            "fields": [
                "asset_name",
                "custodian"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'asset_name': 'PRINTER-HX200'}, fields=['custodian'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Can you tell me who\u2019s holding PROJECTOR-K980 right now?",
            "fields": [
                "asset_name",
                "custodian"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'asset_name': 'PROJECTOR-K980'}, fields=['custodian'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Any idea who\u2019s responsible for that scanner SCANMASTER-XL2?",
            "fields": [
                "asset_name",
                "custodian"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'asset_name': 'SCANMASTER-XL2'}, fields=['custodian'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Which department is responsible for managing the asset SERVER-R900?",
            "fields": [
                "asset_name",
                "department"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'asset_name': 'SERVER-R900'}, fields=['department'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Who's in charge of SWITCH-GX500?",
            "fields": [
                "asset_name",
                "custodian"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'asset_name': 'SWITCH-GX500'}, fields=['custodian'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "What team owns the FIREWALL-EDGE02 machine?",
            "fields": [
                "asset_name",
                "department"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'asset_name': 'FIREWALL-EDGE02'}, fields=['department'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "List all assets insured under policy number INS-2024-221.",
            "fields": [
                "asset_name",
                "policy_number"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'policy_number': 'INS-2024-221'}, fields=['name', 'asset_name', 'policy_number'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Which assets are covered by INS-2024-309?",
            "fields": [
                "asset_name",
                "policy_number"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'policy_number': 'INS-2024-309'}, fields=['name', 'asset_name', 'policy_number'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Can you pull up everything linked to policy INS-2025-088?",
            "fields": [
                "asset_name",
                "policy_number",
                "insured_value",
                "insurance_start_date",
                "insurance_end_date"
            ]
        },
        "output": "frappe.get_doc('Asset', {'policy_number': 'INS-2025-088'})"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Are there any assets with insurance ending this month?",
            "fields": [
                "insurance_end_date"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'insurance_end_date': ['between', ['2025-05-01', '2025-05-31']]}, fields=['asset_name', 'insurance_end_date'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Which assets need insurance renewal this month?",
            "fields": [
                "insurance_end_date"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'insurance_end_date': ['between', ['2025-05-01', '2025-05-31']]}, fields=['asset_name', 'insurance_end_date'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Anything due for insurance expiry right now?",
            "fields": [
                "insurance_end_date"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'insurance_end_date': ['<=', '2025-05-01']}, fields=['asset_name', 'insurance_end_date'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Which assets haven\u2019t been fully depreciated yet?",
            "fields": [
                "asset_name",
                "is_fully_depreciated"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'is_fully_depreciated': 0}, fields=['name', 'asset_name', 'is_fully_depreciated'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Show me all assets still depreciating.",
            "fields": [
                "asset_name",
                "is_fully_depreciated"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'is_fully_depreciated': 0}, fields=['name', 'asset_name'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Do we have any items that aren't fully depreciated?",
            "fields": [
                "is_fully_depreciated"
            ]
        },
        "output": "frappe.db.count('Asset', filters={'is_fully_depreciated': 0})"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "What depreciation frequency is set for asset PROJECTOR-LD320?",
            "fields": [
                "asset_name",
                "frequency_of_depreciation"
            ]
        },
        "output": "frappe.get_value('Asset', {'asset_name': 'PROJECTOR-LD320'}, 'frequency_of_depreciation')"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "How often do we depreciate SCANNER-BR410?",
            "fields": [
                "asset_name",
                "frequency_of_depreciation"
            ]
        },
        "output": "frappe.get_value('Asset', {'asset_name': 'SCANNER-BR410'}, 'frequency_of_depreciation')"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Is ROUTER-WAVE700 on yearly depreciation?",
            "fields": [
                "asset_name",
                "frequency_of_depreciation"
            ]
        },
        "output": "frappe.get_value('Asset', {'asset_name': 'ROUTER-WAVE700'}, 'frequency_of_depreciation')"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "When is the next depreciation scheduled for asset VEHICLE-B450?",
            "fields": [
                "next_depreciation_date"
            ]
        },
        "output": "frappe.get_value('Asset', 'VEHICLE-B450', 'next_depreciation_date')"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Show me the purchase receipt linked to asset MONITOR-VX992.",
            "fields": [
                "purchase_receipt"
            ]
        },
        "output": "frappe.get_value('Asset', 'MONITOR-VX992', 'purchase_receipt')"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Which assets are tied to Purchase Invoice INV-2025-0843?",
            "fields": [
                "purchase_invoice"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'purchase_invoice': 'INV-2025-0843'}, fields=['name', 'asset_name'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "What's the gross purchase amount of asset LAPTOP-ZBOOK-G5?",
            "fields": [
                "gross_purchase_amount"
            ]
        },
        "output": "frappe.get_value('Asset', 'LAPTOP-ZBOOK-G5', 'gross_purchase_amount')"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "List all assets under cost center 'Marketing-CC1'.",
            "fields": [
                "cost_center"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'cost_center': 'Marketing-CC1'}, fields=['name', 'asset_name', 'cost_center'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Find all assets owned by our Qatar branch.",
            "fields": [
                "company"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'company': 'Qatar'}, fields=['name', 'asset_name', 'company'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Show the depreciation schedule for asset 'Laptop-001'.",
            "fields": [
                "depreciation_schedule_view"
            ]
        },
        "output": "frappe.get_value('Asset', 'Laptop-001', 'depreciation_schedule_view')"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "List all assets due for maintenance this quarter.",
            "fields": [
                "maintenance_required"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'maintenance_required': 1}, fields=['name', 'asset_name', 'maintenance_required'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "What's the current value of asset 'Machine-001'?",
            "fields": [
                "value_after_depreciation"
            ]
        },
        "output": "frappe.get_value('Asset', 'Machine-001', 'value_after_depreciation')"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Which assets haven\u2019t been fully depreciated yet?",
            "fields": [
                "is_fully_depreciated"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'is_fully_depreciated': 0}, fields=['name', 'asset_name'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "What depreciation frequency is set for asset PROJECTOR-LD320?",
            "fields": [
                "frequency_of_depreciation"
            ]
        },
        "output": "frappe.get_value('Asset', 'PROJECTOR-LD320', 'frequency_of_depreciation')"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Which assets are covered by INS-2024-309?",
            "fields": [
                "policy_number"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'policy_number': 'INS-2024-309'}, fields=['name', 'asset_name', 'policy_number'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Next depreciation date for CAMERA-ZN80?",
            "fields": [
                "next_depreciation_date"
            ]
        },
        "output": "frappe.get_value('Asset', 'CAMERA-ZN80', 'next_depreciation_date')"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Which purchase receipt was used for MONITOR-VX992?",
            "fields": [
                "purchase_receipt"
            ]
        },
        "output": "frappe.get_value('Asset', 'MONITOR-VX992', 'purchase_receipt')"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Which assets are tied to Purchase Invoice INV-2025-0843?",
            "fields": [
                "purchase_invoice"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'purchase_invoice': 'INV-2025-0843'}, fields=['name', 'asset_name', 'purchase_invoice'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "What's the gross purchase amount of asset LAPTOP-ZBOOK-G5?",
            "fields": [
                "gross_purchase_amount"
            ]
        },
        "output": "frappe.get_value('Asset', 'LAPTOP-ZBOOK-G5', 'gross_purchase_amount')"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "List all assets under cost center 'Marketing-CC1'.",
            "fields": [
                "cost_center"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'cost_center': 'Marketing-CC1'}, fields=['name', 'asset_name', 'cost_center'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "What\u2019s the total value of our capex items?",
            "fields": [
                "purchase_amount"
            ]
        },
        "output": "frappe.db.get_value('Asset', {'docstatus': 1}, 'sum(purchase_amount)', as_dict=True)"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Show the depreciation schedule for asset 'Laptop-001'.",
            "fields": [
                "depreciation_schedule_view"
            ]
        },
        "output": "frappe.get_value('Asset', 'Laptop-001', 'depreciation_schedule_view')"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "List all assets due for maintenance this quarter.",
            "fields": [
                "maintenance_required"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'maintenance_required': 1}, fields=['name', 'asset_name', 'maintenance_required'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "What's the current value of asset 'Machine-001'?",
            "fields": [
                "value_after_depreciation"
            ]
        },
        "output": "frappe.get_value('Asset', 'Machine-001', 'value_after_depreciation')"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Show value changes to the 'Server-A' over the year.",
            "fields": [
                "value_after_depreciation",
                "depreciation_schedule_view"
            ]
        },
        "output": "frappe.get_value('Asset', 'Server-A', ['value_after_depreciation', 'depreciation_schedule_view'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Report assets that require maintenance this week.",
            "fields": [
                "maintenance_required"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'maintenance_required': 1}, fields=['name', 'asset_name', 'maintenance_required'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Find all assets owned by our Qatar branch.",
            "fields": [
                "location"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'location': 'Qatar'}, fields=['name', 'asset_name', 'location'])"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Can you pull the depreciation details for PRINTER-XD450?",
            "fields": [
                "depreciation_schedule_view"
            ]
        },
        "output": "frappe.get_value('Asset', 'PRINTER-XD450', 'depreciation_schedule_view')"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "How much is CAMERA-ZY202 worth on the books right now?",
            "fields": [
                "value_after_depreciation"
            ]
        },
        "output": "frappe.get_value('Asset', 'CAMERA-ZY202', 'value_after_depreciation')"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "Give me the yearly valuation trend for STORAGE-BX600.",
            "fields": [
                "depreciation_schedule_view"
            ]
        },
        "output": "frappe.get_value('Asset', 'STORAGE-BX600', 'depreciation_schedule_view')"
    },
    {
        "input": {
            "doctype": "Asset",
            "question": "What were the value changes recorded for ROUTER-GT950 this year?",
            "fields": [
                "asset_name",
                "value_after_depreciation"
            ]
        },
        "output": "frappe.get_all('Asset', filters={'asset_name': 'ROUTER-GT950'}, fields=['asset_name', 'value_after_depreciation'])"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "Can I set up automatic backups to my S3 bucket in the system?",
            "fields": [
                "bucket",
                "enabled",
                "frequency"
            ]
        },
        "output": "frappe.get_doc('S3 Backup Settings')"
    },
    {
        "input": {
            "doctype": "Finance Book",
            "question": "Where can I view the list of finance books used in our company?",
            "fields": [
                "finance_book_name"
            ]
        },
        "output": "frappe.get_all('Finance Book', fields=['finance_book_name'])"
    },
    {
        "input": {
            "doctype": "Finance Book",
            "question": "Can I rename or update the name of an existing finance book?",
            "fields": [
                "finance_book_name"
            ]
        },
        "output": "frappe.set_value('Finance Book', 'OLD_BOOK_NAME', 'finance_book_name', 'NEW_BOOK_NAME')"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "What are the different UOM categories defined in our system?",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.get_all('UOM Category', fields=['category_name'])"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "Can I create a new UOM category for packaging units?",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.get_doc({'doctype': 'UOM Category', 'category_name': 'Packaging Units'}).insert()"
    },
    {
        "input": {
            "doctype": "Finance Book",
            "question": "What finance books are used by default for journal entries?",
            "fields": [
                "finance_book_name"
            ]
        },
        "output": "frappe.get_all('Finance Book', filters={}, fields=['finance_book_name'])"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "What are the different UOM categories defined in our system?",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.get_all('UOM Category', fields=['category_name'])"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "Where can I find the category for weight-based units of measure?",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.get_all('UOM Category', filters={'category_name': 'Weight'}, fields=['category_name'])"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "Can I create a new UOM category for packaging units?",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.insert({'doctype': 'UOM Category', 'category_name': 'Packaging'})"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "Can I set up automatic backups to my S3 bucket in the system?",
            "fields": [
                "enabled",
                "bucket",
                "endpoint_url",
                "frequency"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'S3 Backup Settings', 'enabled': 1, 'bucket': 'your-bucket-name', 'endpoint_url': 'https://s3.amazonaws.com', 'frequency': 'Daily' }).insert()"
    },
    {
        "input": {
            "doctype": "Finance Book",
            "question": "Where can I view the list of finance books used in our company?",
            "fields": [
                "finance_book_name"
            ]
        },
        "output": "frappe.get_all('Finance Book', fields=['finance_book_name'])"
    },
    {
        "input": {
            "doctype": "Finance Book",
            "question": "Can I rename or update the name of an existing finance book?",
            "fields": [
                "finance_book_name"
            ]
        },
        "output": "frappe.db.set_value('Finance Book', 'EXISTING_BOOK_NAME', 'finance_book_name', 'NEW_BOOK_NAME')"
    },
    {
        "input": {
            "doctype": "Finance Book",
            "question": "List all finance books currently set up in the system.",
            "fields": [
                "finance_book_name"
            ]
        },
        "output": "frappe.get_all('Finance Book', fields=['finance_book_name'])"
    },
    {
        "input": {
            "doctype": "Finance Book",
            "question": "How do I add a new finance book for an overseas branch?",
            "fields": [
                "finance_book_name"
            ]
        },
        "output": "frappe.get_doc({'doctype': 'Finance Book', 'finance_book_name': 'Overseas Branch Book'}).insert()"
    },
    {
        "input": {
            "doctype": "Finance Book",
            "question": "Is there a finance book for our Singapore entity?",
            "fields": [
                "finance_book_name"
            ]
        },
        "output": "frappe.db.exists('Finance Book', {'finance_book_name': 'Singapore Entity'})"
    },
    {
        "input": {
            "doctype": "Finance Book",
            "question": "Show all finance books used for tax reporting purposes.",
            "fields": [
                "finance_book_name"
            ]
        },
        "output": "frappe.get_all('Finance Book', filters={'finance_book_name': ['like', '%Tax%']}, fields=['finance_book_name'])"
    },
    {
        "input": {
            "doctype": "Finance Book",
            "question": "Which finance books are linked to our international subsidiaries?",
            "fields": [
                "finance_book_name"
            ]
        },
        "output": "frappe.get_all('Finance Book', filters={'finance_book_name': ['like', '%International%']}, fields=['finance_book_name'])"
    },
    {
        "input": {
            "doctype": "Finance Book",
            "question": "How many finance books are currently active in our system?",
            "fields": [
                "finance_book_name"
            ]
        },
        "output": "frappe.db.count('Finance Book')"
    },
    {
        "input": {
            "doctype": "Finance Book",
            "question": "Where are the names of all configured finance books stored?",
            "fields": [
                "finance_book_name"
            ]
        },
        "output": "frappe.get_all('Finance Book', fields=['finance_book_name'])"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "What are the different UOM categories defined in our system?",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.get_all('UOM Category', fields=['category_name'])"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "Where can I find the category for weight-based units of measure?",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.get_all('UOM Category', filters={'category_name': 'Weight'}, fields=['name', 'category_name'])"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "Can I create a new UOM category for packaging units?",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.get_doc({'doctype': 'UOM Category', 'category_name': 'Packaging'}).insert()"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "Can I preview how many characters and messages my SMS will consume?",
            "fields": [
                "total_characters",
                "total_messages"
            ]
        },
        "output": "frappe.get_all('SMS Center', fields=['total_characters', 'total_messages'])"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "Where do I write the SMS text before sending it to multiple contacts?",
            "fields": [
                "message"
            ]
        },
        "output": "frappe.get_all('SMS Center', fields=['message'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "List all production plan material requests created this week.",
            "fields": [
                "material_request",
                "material_request_date"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', filters={'material_request_date': ['between', ['2025-04-28', '2025-05-04']]}, fields=['material_request', 'material_request_date'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "Can I fetch all material request dates linked to production planning?",
            "fields": [
                "material_request_date"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', fields=['material_request_date'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "Where can I see which material requests are linked to a production plan?",
            "fields": [
                "material_request"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', fields=['material_request'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "I need to check when each material request was created in a production plan.",
            "fields": [
                "material_request",
                "material_request_date"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', fields=['material_request', 'material_request_date'])"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "Which module lets me define a list of receivers and send a common SMS?",
            "fields": [
                "receiver_list"
            ]
        },
        "output": "frappe.get_all('SMS Center', fields=['receiver_list'])"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "I want to create a message for all sales partners, where do I do that?",
            "fields": [
                "sales_partner",
                "message"
            ]
        },
        "output": "frappe.get_all('SMS Center', filters={'sales_partner': ['!=', '']}, fields=['sales_partner', 'message'])"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "Is there a way to quickly send an update to all supplier contacts?",
            "fields": [
                "supplier",
                "message"
            ]
        },
        "output": "frappe.get_all('SMS Center', filters={'supplier': ['!=', '']}, fields=['supplier', 'message'])"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "How do I filter customers by department before sending them an SMS?",
            "fields": [
                "customer",
                "department"
            ]
        },
        "output": "frappe.get_all('SMS Center', filters={'department': ['!=', '']}, fields=['customer', 'department'])"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "How do I track how many messages were sent through an SMS broadcast?",
            "fields": [
                "total_messages"
            ]
        },
        "output": "frappe.get_all('SMS Center', fields=['name', 'total_messages'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "Which material request is connected to the current production plan?",
            "fields": [
                "material_request"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', fields=['material_request'])"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "Can I preview how many characters and messages my SMS will consume?",
            "fields": [
                "total_characters",
                "total_messages"
            ]
        },
        "output": "frappe.get_all('SMS Center', fields=['name', 'total_characters', 'total_messages'])"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "Where do I write the SMS text before sending it to multiple contacts?",
            "fields": [
                "message"
            ]
        },
        "output": "frappe.get_all('SMS Center', fields=['name', 'message'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "Where can I see which material requests are linked to a production plan?",
            "fields": [
                "material_request"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', fields=['material_request'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "Show me all the material requests generated from production planning.",
            "fields": [
                "material_request"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', fields=['material_request'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "Which table stores the material request and its date under a production plan?",
            "fields": [
                "material_request",
                "material_request_date"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', fields=['material_request', 'material_request_date'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "I need to check when each material request was created in a production plan.",
            "fields": [
                "material_request",
                "material_request_date"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', fields=['material_request', 'material_request_date'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "Can I fetch all material request dates linked to production planning?",
            "fields": [
                "material_request_date"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', fields=['material_request_date'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "How do I view the list of requested raw materials from a production plan?",
            "fields": [
                "material_request"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', fields=['material_request'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "Where can I find which material request was generated for this production order?",
            "fields": [
                "material_request"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', fields=['material_request'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "Which material request is connected to the current production plan?",
            "fields": [
                "material_request"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', fields=['material_request'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "List all production plan material requests created this week.",
            "fields": [
                "material_request",
                "material_request_date"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', filters={'material_request_date': ['between', ['2025-04-29', '2025-05-05']]}, fields=['material_request', 'material_request_date'])"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "How can I send a bulk message to all active employees in one go?",
            "fields": [
                "receiver_list",
                "message",
                "send_sms"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'SMS Center', 'receiver_list': 'Active Employees', 'message': 'Your message here' }).send_sms()"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "Is it possible to send a notification to all open leads at once?",
            "fields": [
                "receiver_list",
                "message"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'SMS Center', 'receiver_list': 'Open Leads', 'message': 'Reminder: follow-up required.' }).send_sms()"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "I want to create a message for all sales partners, where do I do that?",
            "fields": [
                "sales_partner",
                "message"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'SMS Center', 'sales_partner': 'All', 'message': 'New promotion available.' }).send_sms()"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "Which module lets me define a list of receivers and send a common SMS?",
            "fields": [
                "create_receiver_list",
                "receiver_list",
                "message"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'SMS Center', 'create_receiver_list': 1, 'receiver_list': 'Custom Group', 'message': 'Hello all' }).send_sms()"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "Can I preview how many characters and messages my SMS will consume?",
            "fields": [
                "total_characters",
                "total_messages"
            ]
        },
        "output": "frappe.get_value('SMS Center', {'name': 'Last SMS'}, ['total_characters', 'total_messages'])"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "How do I filter customers by department before sending them an SMS?",
            "fields": [
                "customer",
                "department",
                "message"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'SMS Center', 'customer': 'All', 'department': 'Sales', 'message': 'Meeting at 10 AM' }).send_sms()"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "Is there a way to quickly send an update to all supplier contacts?",
            "fields": [
                "supplier",
                "message"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'SMS Center', 'supplier': 'All', 'message': 'Please note the upcoming changes.' }).send_sms()"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "How do I track how many messages were sent through an SMS broadcast?",
            "fields": [
                "total_messages"
            ]
        },
        "output": "frappe.get_value('SMS Center', {'name': 'Last Broadcast'}, 'total_messages')"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "Where do I write the SMS text before sending it to multiple contacts?",
            "fields": [
                "message"
            ]
        },
        "output": "frappe.get_doc('SMS Center', 'Draft SMS').message"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "Where can I see which material requests are linked to a production plan?",
            "fields": [
                "material_request"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', fields=['material_request'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "Show me all the material requests generated from production planning.",
            "fields": [
                "material_request",
                "material_request_date"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', fields=['material_request', 'material_request_date'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "Which table stores the material request and its date under a production plan?",
            "fields": [
                "material_request",
                "material_request_date"
            ]
        },
        "output": "frappe.get_list('Production Plan Material Request', fields=['material_request', 'material_request_date'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "I need to check when each material request was created in a production plan.",
            "fields": [
                "material_request",
                "material_request_date"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', fields=['material_request', 'material_request_date'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "Can I fetch all material request dates linked to production planning?",
            "fields": [
                "material_request_date"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', fields=['material_request_date'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "How do I view the list of requested raw materials from a production plan?",
            "fields": [
                "material_request"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', fields=['material_request'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "Where can I find which material request was generated for this production order?",
            "fields": [
                "material_request"
            ]
        },
        "output": "frappe.get_list('Production Plan Material Request', filters={'production_order': 'PROD-ORDER-001'}, fields=['material_request'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "Which material request is connected to the current production plan?",
            "fields": [
                "material_request"
            ]
        },
        "output": "frappe.get_value('Production Plan Material Request', {'production_plan': 'PROD-PLAN-2025-0001'}, 'material_request')"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "List all production plan material requests created this week.",
            "fields": [
                "material_request",
                "material_request_date"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', filters={'material_request_date': ['between', ['2025-04-29', '2025-05-05']]}, fields=['material_request', 'material_request_date'])"
    },
    {
        "input": {
            "doctype": "Project Type",
            "question": "Can I get a list of all the different project types we\u2019ve created?",
            "fields": [
                "project_type"
            ]
        },
        "output": "frappe.get_all('Project Type', fields=['project_type'])"
    },
    {
        "input": {
            "doctype": "Project Type",
            "question": "What project types are currently defined in the system?",
            "fields": [
                "project_type"
            ]
        },
        "output": "frappe.get_all('Project Type', fields=['project_type'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "Has a material request been made for this production plan yet?",
            "fields": [
                "material_request"
            ]
        },
        "output": "frappe.db.exists('Production Plan Material Request', {'material_request': ['!=', '']})"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "Where is the record of raw material requests linked to a production plan stored?",
            "fields": [
                "material_request",
                "material_request_date"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', fields=['material_request', 'material_request_date'])"
    },
    {
        "input": {
            "doctype": "Production Plan Material Request",
            "question": "I want to view all linked material request dates under a specific plan.",
            "fields": [
                "material_request_date"
            ]
        },
        "output": "frappe.get_all('Production Plan Material Request', fields=['material_request_date'])"
    },
    {
        "input": {
            "doctype": "Project Type",
            "question": "Can I get a list of all the different project types we\u2019ve created?",
            "fields": [
                "project_type"
            ]
        },
        "output": "frappe.get_all('Project Type', fields=['project_type'])"
    },
    {
        "input": {
            "doctype": "Project Type",
            "question": "What project types are currently defined in the system?",
            "fields": [
                "project_type"
            ]
        },
        "output": "frappe.get_all('Project Type', fields=['project_type'])"
    },
    {
        "input": {
            "doctype": "Production Plan Sales Order",
            "question": "Can I fetch the sales order date and total for each linked sales order?",
            "fields": [
                "sales_order",
                "sales_order_date",
                "sales_order_amount"
            ]
        },
        "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order', 'sales_order_date', 'sales_order_amount'])"
    },
    {
        "input": {
            "doctype": "Production Plan Sales Order",
            "question": "Give me a list of all sales order numbers included in this production schedule.",
            "fields": [
                "sales_order"
            ]
        },
        "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order'])"
    },
    {
        "input": {
            "doctype": "Production Plan Sales Order",
            "question": "Which sales orders from customers have been linked to this production plan?",
            "fields": [
                "sales_order"
            ]
        },
        "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order'])"
    },
    {
        "input": {
            "doctype": "Production Plan Sales Order",
            "question": "What\u2019s the total value of sales orders being planned for production?",
            "fields": [
                "sales_order_amount"
            ]
        },
        "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order_amount'])"
    },
    {
        "input": {
            "doctype": "Production Plan Sales Order",
            "question": "I want to check the sales order dates involved in production planning.",
            "fields": [
                "sales_order_date"
            ]
        },
        "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order_date'])"
    },
    {
        "input": {
            "doctype": "Production Plan Sales Order",
            "question": "List all sales orders by customer for this production plan.",
            "fields": [
                "sales_order",
                "customer"
            ]
        },
        "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order', 'customer'])"
    },
    {
        "input": {
            "doctype": "Production Plan Sales Order",
            "question": "Where can I find the grand total of each sales order under a production plan?",
            "fields": [
                "sales_order",
                "sales_order_amount"
            ]
        },
        "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order', 'sales_order_amount'])"
    },
    {
        "input": {
            "doctype": "Production Plan Sales Order",
            "question": "Show me the sales orders included in this production planning process.",
            "fields": [
                "sales_order"
            ]
        },
        "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order'])"
    },
    {
        "input": {
            "doctype": "Production Plan Sales Order",
            "question": "Which customers have sales orders linked to a production plan?",
            "fields": [
                "customer"
            ]
        },
        "output": "frappe.get_all('Production Plan Sales Order', fields=['customer'])"
    },
    {
        "input": {
            "doctype": "Production Plan Sales Order",
            "question": "Can I view which sales orders are tied to a specific production plan?",
            "fields": [
                "sales_order",
                "parent"
            ]
        },
        "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order', 'parent'])"
    },
    {
        "input": {
            "doctype": "Production Plan Sales Order",
            "question": "Which sales orders from customers have been linked to this production plan?",
            "fields": [
                "sales_order",
                "customer",
                "parent"
            ]
        },
        "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order', 'customer', 'parent'])"
    },
    {
        "input": {
            "doctype": "Production Plan Sales Order",
            "question": "What\u2019s the total value of sales orders being planned for production?",
            "fields": [
                "sales_order_amount"
            ]
        },
        "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order_amount'])"
    },
    {
        "input": {
            "doctype": "Production Plan Sales Order",
            "question": "Give me a list of all sales order numbers included in this production schedule.",
            "fields": [
                "sales_order"
            ]
        },
        "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order'])"
    },
    {
        "input": {
            "doctype": "Production Plan Sales Order",
            "question": "Has the customer\u2019s sales order been considered in the production plan?",
            "fields": [
                "sales_order",
                "customer"
            ]
        },
        "output": "frappe.get_all('Production Plan Sales Order', filters={'customer': '<<Customer Name>>'}, fields=['sales_order'])"
    },
    {
        "input": {
            "doctype": "Production Plan Sales Order",
            "question": "Can I fetch the sales order date and total for each linked sales order?",
            "fields": [
                "sales_order_date",
                "sales_order_amount"
            ]
        },
        "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order_date', 'sales_order_amount'])"
    },
    {
        "input": {
            "doctype": "Project Type",
            "question": "Can I get a list of all the different project types we\u2019ve created?",
            "fields": [
                "project_type"
            ]
        },
        "output": "frappe.get_all('Project Type', fields=['project_type'])"
    },
    {
        "input": {
            "doctype": "Project Type",
            "question": "What project types are currently defined in the system?",
            "fields": [
                "project_type",
                "description"
            ]
        },
        "output": "frappe.get_all('Project Type', fields=['project_type', 'description'])"
    },
    {
        "input": {
            "doctype": "Project Type",
            "question": "Show me all types of projects listed with their descriptions.",
            "fields": [
                "project_type",
                "description"
            ]
        },
        "output": "frappe.get_all('Project Type', fields=['project_type', 'description'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Can you show me all defined activity types and their default rates?",
            "fields": [
                "activity_type",
                "billing_rate",
                "costing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Type', fields=['activity_type', 'billing_rate', 'costing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Where do we set the default billing and costing rate for each activity?",
            "fields": [
                "activity_type",
                "billing_rate",
                "costing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Type', fields=['activity_type', 'billing_rate', 'costing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Which activity types are active and which ones are disabled?",
            "fields": [
                "activity_type",
                "disabled"
            ]
        },
        "output": "frappe.get_all('Activity Type', fields=['activity_type', 'disabled'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Do we have an activity type for design work with a set billing rate?",
            "fields": [
                "activity_type",
                "billing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Type', filters={'activity_type': 'Design'}, fields=['activity_type', 'billing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Which activity types are currently disabled in the system?",
            "fields": [
                "activity_type",
                "disabled"
            ]
        },
        "output": "frappe.get_all('Activity Type', filters={'disabled': 1}, fields=['activity_type', 'disabled'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "List all active activity types used in projects.",
            "fields": [
                "activity_type",
                "disabled"
            ]
        },
        "output": "frappe.get_all('Activity Type', filters={'disabled': 0}, fields=['activity_type'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Show me all activity types with their billing and costing rates.",
            "fields": [
                "activity_type",
                "billing_rate",
                "costing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Type', fields=['activity_type', 'billing_rate', 'costing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "What are the billing and costing rates for the activity type 'Consulting'?",
            "fields": [
                "activity_type",
                "billing_rate",
                "costing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Type', filters={'activity_type': 'Consulting'}, fields=['billing_rate', 'costing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Fetch the costing rate of 'Installation' activity type.",
            "fields": [
                "activity_type",
                "costing_rate"
            ]
        },
        "output": "frappe.get_value('Activity Type', {'activity_type': 'Installation'}, 'costing_rate')"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Is the activity type 'Field Support' currently enabled?",
            "fields": [
                "activity_type",
                "disabled"
            ]
        },
        "output": "frappe.get_value('Activity Type', {'activity_type': 'Field Support'}, 'disabled')"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Where can I see the rates associated with each task type?",
            "fields": [
                "activity_type",
                "billing_rate",
                "costing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Type', fields=['activity_type', 'billing_rate', 'costing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Which activity types are active and which ones are disabled?",
            "fields": [
                "activity_type",
                "disabled"
            ]
        },
        "output": "frappe.get_all('Activity Type', fields=['activity_type', 'disabled'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Can you list all defined activity types in the system?",
            "fields": [
                "activity_type"
            ]
        },
        "output": "frappe.get_all('Activity Type', fields=['activity_type'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Show billing and costing rates for all activity types.",
            "fields": [
                "billing_rate",
                "costing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Type', fields=['billing_rate', 'costing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Give me the billing rate for 'Design Work'.",
            "fields": [
                "activity_type",
                "billing_rate"
            ]
        },
        "output": "frappe.get_value('Activity Type', {'activity_type': 'Design Work'}, 'billing_rate')"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Retrieve all activity types where costing rate exceeds 100.",
            "fields": [
                "activity_type",
                "costing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Type', filters={\"costing_rate\": [\">\", 100]}, fields=['activity_type', 'costing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "What activity types have a billing rate set to zero?",
            "fields": [
                "activity_type",
                "billing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Type', filters={'billing_rate': 0}, fields=['activity_type', 'billing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Which activities are marked as disabled?",
            "fields": [
                "activity_type",
                "disabled"
            ]
        },
        "output": "frappe.get_all('Activity Type', filters={'disabled': 1}, fields=['activity_type', 'disabled'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "List all activities with billing rate higher than costing rate.",
            "fields": [
                "activity_type",
                "billing_rate",
                "costing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Type', fields=['activity_type', 'billing_rate', 'costing_rate'])  # Filter in code since Frappe does not support field comparison in DB"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Which activity types have both rates configured?",
            "fields": [
                "activity_type",
                "billing_rate",
                "costing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Type', filters={\"billing_rate\": [\">\", 0], \"costing_rate\": [\">\", 0]}, fields=['activity_type', 'billing_rate', 'costing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Find all active activity types for project billing.",
            "fields": [
                "activity_type",
                "disabled"
            ]
        },
        "output": "frappe.get_all('Activity Type', filters={'disabled': 0}, fields=['activity_type'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Fetch costing rate for 'Installation'.",
            "fields": [
                "activity_type",
                "costing_rate"
            ]
        },
        "output": "frappe.get_value('Activity Type', {'activity_type': 'Installation'}, 'costing_rate')"
    },
    {
        "input": {
            "doctype": "Project Type",
            "question": "Where do we store the description of each project type?",
            "fields": [
                "project_type",
                "description"
            ]
        },
        "output": "frappe.get_all('Project Type', fields=['project_type', 'description'])"
    },
    {
        "input": {
            "doctype": "Project Type",
            "question": "Is there a place to view all project categories we handle?",
            "fields": [
                "project_type",
                "description"
            ]
        },
        "output": "frappe.get_all('Project Type', fields=['project_type', 'description'])"
    },
    {
        "input": {
            "doctype": "Project Type",
            "question": "Which table holds our standard project types and their explanations?",
            "fields": [
                "project_type",
                "description"
            ]
        },
        "output": "frappe.get_all('Project Type', fields=['project_type', 'description'])"
    },
    {
        "input": {
            "doctype": "Project Type",
            "question": "Where can I find a description of internal vs external project types?",
            "fields": [
                "project_type",
                "description"
            ]
        },
        "output": "frappe.get_all('Project Type', fields=['project_type', 'description'])"
    },
    {
        "input": {
            "doctype": "Project Type",
            "question": "Show me all types of projects listed with their descriptions.",
            "fields": [
                "project_type",
                "description"
            ]
        },
        "output": "frappe.get_all('Project Type', fields=['project_type', 'description'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Can you show me all defined activity types and their default rates?",
            "fields": [
                "activity_type",
                "costing_rate",
                "billing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Type', fields=['activity_type', 'costing_rate', 'billing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Where do we set the default billing and costing rate for each activity?",
            "fields": [
                "activity_type",
                "costing_rate",
                "billing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Type', fields=['activity_type', 'costing_rate', 'billing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "What activities are listed for project time tracking?",
            "fields": [
                "activity_type"
            ]
        },
        "output": "frappe.get_all('Activity Type', fields=['activity_type'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "I need to review the list of activity types we use in our projects.",
            "fields": [
                "activity_type"
            ]
        },
        "output": "frappe.get_all('Activity Type', fields=['activity_type'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Which activity types are active and which ones are disabled?",
            "fields": [
                "activity_type",
                "disabled"
            ]
        },
        "output": "frappe.get_all('Activity Type', fields=['activity_type', 'disabled'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Do we have an activity type for design work with a set billing rate?",
            "fields": [
                "activity_type",
                "billing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Type', filters={'activity_type': 'Design'}, fields=['activity_type', 'billing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "What\u2019s the default costing rate for installation activities?",
            "fields": [
                "activity_type",
                "costing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Type', filters={'activity_type': 'Installation'}, fields=['activity_type', 'costing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Where can I add a new activity type for field support?",
            "fields": [
                "activity_type"
            ]
        },
        "output": "frappe.get_all('Activity Type', filters={'activity_type': 'Field Support'}, fields=['activity_type'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Is there a place to see the rates associated with each task type?",
            "fields": [
                "activity_type",
                "costing_rate",
                "billing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Type', fields=['activity_type', 'costing_rate', 'billing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Can I disable an outdated activity type without deleting it?",
            "fields": [
                "activity_type",
                "disabled"
            ]
        },
        "output": "frappe.get_all('Activity Type', filters={'disabled': 0}, fields=['activity_type'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Can we update the billing rate for a specific activity type?",
            "fields": [
                "activity_type",
                "billing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Type', fields=['activity_type', 'billing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Can I disable an outdated activity type without deleting it?",
            "fields": [
                "activity_type",
                "disabled"
            ]
        },
        "output": "frappe.get_all('Activity Type', filters={'disabled': 0}, fields=['activity_type', 'disabled'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Where can I add a new activity type for field support?",
            "fields": [
                "activity_type"
            ]
        },
        "output": "frappe.get_all('Activity Type', filters={'activity_type': 'Field Support'}, fields=['activity_type'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Is there a place to see the rates associated with each task type?",
            "fields": [
                "activity_type",
                "billing_rate",
                "costing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Type', fields=['activity_type', 'billing_rate', 'costing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "Can we update the billing rate for a specific activity type?",
            "fields": [
                "activity_type",
                "billing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Type', filters={'activity_type': 'Design Work'}, fields=['activity_type', 'billing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Type",
            "question": "List all activity types available for timesheet entry.",
            "fields": [
                "activity_type"
            ]
        },
        "output": "frappe.get_all('Activity Type', fields=['activity_type'])"
    },
    {
        "input": {
            "doctype": "BOM Website Operation",
            "question": "What are the operations listed for the website BOM view?",
            "fields": [
                "operation"
            ]
        },
        "output": "frappe.get_all('BOM Website Operation', fields=['operation'])"
    },
    {
        "input": {
            "doctype": "BOM Website Operation",
            "question": "Where can I define the operation time for each step in the website BOM?",
            "fields": [
                "operation",
                "time_in_mins"
            ]
        },
        "output": "frappe.get_all('BOM Website Operation', fields=['operation', 'time_in_mins'])"
    },
    {
        "input": {
            "doctype": "BOM Website Operation",
            "question": "Is there a way to show operation images on the website BOM page?",
            "fields": [
                "operation",
                "website_image"
            ]
        },
        "output": "frappe.get_all('BOM Website Operation', fields=['operation', 'website_image'])"
    },
    {
        "input": {
            "doctype": "BOM Website Operation",
            "question": "Can I link workstations to each BOM operation visible on the website?",
            "fields": [
                "operation",
                "workstation"
            ]
        },
        "output": "frappe.get_all('BOM Website Operation', fields=['operation', 'workstation'])"
    },
    {
        "input": {
            "doctype": "BOM Website Operation",
            "question": "Show me all operations with thumbnails configured for the BOM website view.",
            "fields": [
                "operation",
                "thumbnail"
            ]
        },
        "output": "frappe.get_all('BOM Website Operation', filters={'thumbnail': ['!=', '']}, fields=['operation', 'thumbnail'])"
    },
    {
        "input": {
            "doctype": "BOM Website Operation",
            "question": "Where do we track the time in minutes for each operation in the online BOM?",
            "fields": [
                "operation",
                "time_in_mins"
            ]
        },
        "output": "frappe.get_all('BOM Website Operation', fields=['operation', 'time_in_mins'])"
    },
    {
        "input": {
            "doctype": "BOM Website Operation",
            "question": "Do website operations in BOM support image attachments?",
            "fields": [
                "operation",
                "website_image"
            ]
        },
        "output": "frappe.get_all('BOM Website Operation', filters={'website_image': ['!=', '']}, fields=['operation', 'website_image'])"
    },
    {
        "input": {
            "doctype": "BOM Website Operation",
            "question": "List the workstation assigned to each BOM operation for web display.",
            "fields": [
                "operation",
                "workstation"
            ]
        },
        "output": "frappe.get_all('BOM Website Operation', fields=['operation', 'workstation'])"
    },
    {
        "input": {
            "doctype": "BOM Website Operation",
            "question": "Which BOM operations are set with less than 10 minutes of operation time?",
            "fields": [
                "operation",
                "time_in_mins"
            ]
        },
        "output": "frappe.get_all('BOM Website Operation', filters={'time_in_mins': ['<', 10]}, fields=['operation', 'time_in_mins'])"
    },
    {
        "input": {
            "doctype": "BOM Website Operation",
            "question": "Are there any BOM operations on the site missing a workstation link?",
            "fields": [
                "operation",
                "workstation"
            ]
        },
        "output": "frappe.get_all('BOM Website Operation', filters={'workstation': ['is', 'not set']}, fields=['operation'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "Which items are shown in the website view of the BOM?",
            "fields": [
                "item_code",
                "item_name"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', fields=['item_code', 'item_name'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "Can I display item images for each BOM component online?",
            "fields": [
                "item_code",
                "website_image"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', filters={'website_image': ['!=', '']}, fields=['item_code', 'website_image'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "Where do we set the quantity for each BOM item visible on the website?",
            "fields": [
                "item_code",
                "qty"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', fields=['item_code', 'qty'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "Show all website items used in a specific BOM structure.",
            "fields": [
                "item_code",
                "item_name",
                "description"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', fields=['item_code', 'item_name', 'description'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "Which BOM items have detailed descriptions for web display?",
            "fields": [
                "item_code",
                "description"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', filters={'description': ['!=', '']}, fields=['item_code', 'description'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "Is there a section to manage item thumbnails in the BOM website view?",
            "fields": [
                "item_code",
                "website_image"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', filters={'website_image': ['!=', '']}, fields=['item_code', 'website_image'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "What are the item codes listed for BOM website components?",
            "fields": [
                "item_code"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', fields=['item_code'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "Can I link additional item data for each BOM part on the website?",
            "fields": [
                "item_code",
                "description"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', fields=['item_code', 'description'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "Where can I update the name and description of items for website BOM display?",
            "fields": [
                "item_name",
                "description"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', fields=['item_name', 'description'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "How do I upload images for each BOM item shown on the web?",
            "fields": [
                "item_code",
                "website_image"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', filters={'website_image': ['!=', '']}, fields=['item_code', 'website_image'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "List all BOM website items with their respective quantities and descriptions.",
            "fields": [
                "item_code",
                "qty",
                "description"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', fields=['item_code', 'qty', 'description'])"
    },
    {
        "input": {
            "doctype": "BOM Website Operation",
            "question": "Are there any BOM operations on the site missing a workstation link?",
            "fields": [
                "operation",
                "workstation"
            ]
        },
        "output": "frappe.get_all('BOM Website Operation', filters={'workstation': ['is', 'null']}, fields=['operation'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "Which items are shown in the website view of the BOM?",
            "fields": [
                "item_code",
                "item_name"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', fields=['item_code', 'item_name'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "Can I display item images for each BOM component online?",
            "fields": [
                "item_code",
                "website_image"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', filters={'website_image': ['!=', '']}, fields=['item_code', 'website_image'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "Where do we set the quantity for each BOM item visible on the website?",
            "fields": [
                "item_code",
                "qty"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', fields=['item_code', 'qty'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "Show all website items used in a specific BOM structure.",
            "fields": [
                "item_code",
                "item_name",
                "description"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', fields=['item_code', 'item_name', 'description'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "Which BOM items have detailed descriptions for web display?",
            "fields": [
                "item_code",
                "description"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', filters={'description': ['!=', '']}, fields=['item_code', 'description'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "Is there a section to manage item thumbnails in the BOM website view?",
            "fields": [
                "item_code",
                "website_image"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', filters={'website_image': ['!=', '']}, fields=['item_code', 'website_image'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "What are the item codes listed for BOM website components?",
            "fields": [
                "item_code"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', fields=['item_code'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "Can I link additional item data for each BOM part on the website?",
            "fields": [
                "item_code",
                "description"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', filters={'description': ['!=', '']}, fields=['item_code', 'description'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "Where can I update the name and description of items for website BOM display?",
            "fields": [
                "item_name",
                "description"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', fields=['item_name', 'description'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "How do I upload images for each BOM item shown on the web?",
            "fields": [
                "item_code",
                "website_image"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', fields=['item_code', 'website_image'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "List all BOM website items with their respective quantities and descriptions.",
            "fields": [
                "item_code",
                "qty",
                "description"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', fields=['item_code', 'qty', 'description'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "Which website BOM items are missing an image attachment?",
            "fields": [
                "item_code",
                "website_image"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', filters={'website_image': ''}, fields=['item_code', 'website_image'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "Which item groups are available in the POS system?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "Can I see what item groups are linked to POS?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "What item group options are configured for the POS interface?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "List all item groups that are used in point-of-sale.",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "Where can I define item groups for POS usage?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "Do we have a record of item groups configured in the POS?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "Which groups of items are available to sell through POS?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "How do I update item groups in our POS system?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "Is there a list of item groups assigned specifically to POS terminals?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "Can I filter sales by item groups in the POS?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "Show me all POS item groups added recently.",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'], order_by='creation desc')"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "Where are the item group settings for POS transactions stored?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "BOM Website Item",
            "question": "Which website BOM items are missing an image attachment?",
            "fields": [
                "item_code",
                "website_image"
            ]
        },
        "output": "frappe.get_all('BOM Website Item', filters={'website_image': ''}, fields=['item_code', 'website_image'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "Which item groups are available in the POS system?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "Can I see what item groups are linked to POS?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "What item group options are configured for the POS interface?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "List all item groups that are used in point-of-sale.",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "Where can I define item groups for POS usage?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "Do we have a record of item groups configured in the POS?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "Which groups of items are available to sell through POS?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "How do I update item groups in our POS system?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "Is there a list of item groups assigned specifically to POS terminals?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "Can I filter sales by item groups in the POS?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "Show me all POS item groups added recently.",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'], order_by='creation desc')"
    },
    {
        "input": {
            "doctype": "POS Item Group",
            "question": "Where are the item group settings for POS transactions stored?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "POS Customer Group",
            "question": "Which customer groups are enabled for POS transactions?",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
    },
    {
        "input": {
            "doctype": "POS Customer Group",
            "question": "Can I view the list of customer groups linked to POS?",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
    },
    {
        "input": {
            "doctype": "POS Customer Group",
            "question": "What customer groups are configured to work with the POS system?",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
    },
    {
        "input": {
            "doctype": "POS Customer Group",
            "question": "List all customer groups available for point-of-sale operations.",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
    },
    {
        "input": {
            "doctype": "POS Customer Group",
            "question": "Where do we assign customer groups for POS usage?",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
    },
    {
        "input": {
            "doctype": "POS Customer Group",
            "question": "Do we support group-based customer discounts in POS?",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
    },
    {
        "input": {
            "doctype": "POS Customer Group",
            "question": "Can I update customer groups used in POS billing?",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
    },
    {
        "input": {
            "doctype": "POS Customer Group",
            "question": "How are customer groups mapped in the POS configuration?",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
    },
    {
        "input": {
            "doctype": "POS Customer Group",
            "question": "Is there a way to restrict POS access by customer group?",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
    },
    {
        "input": {
            "doctype": "POS Customer Group",
            "question": "Which customer segments are active for POS checkout?",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
    },
    {
        "input": {
            "doctype": "POS Customer Group",
            "question": "Show me all customer groups set up for retail POS sales.",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
    },
    {
        "input": {
            "doctype": "POS Customer Group",
            "question": "What\u2019s the process to assign new customer groups in POS?",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
    },
    {
        "input": {
            "doctype": "Branch",
            "question": "Can you show me a list of all our active branches?",
            "fields": [
                "branch"
            ]
        },
        "output": "frappe.get_all('Branch', fields=['branch'])"
    },
    {
        "input": {
            "doctype": "Branch",
            "question": "Is there a branch registered under the name Downtown Store?",
            "fields": [
                "branch"
            ]
        },
        "output": "frappe.db.exists('Branch', {'branch': 'Downtown Store'})"
    },
    {
        "input": {
            "doctype": "Branch",
            "question": "Are branch names stored somewhere in the ERP system?",
            "fields": [
                "branch"
            ]
        },
        "output": "frappe.get_all('Branch', fields=['branch'])"
    },
    {
        "input": {
            "doctype": "Branch",
            "question": "Where do I manage our store and branch records?",
            "fields": [
                "branch"
            ]
        },
        "output": "frappe.get_all('Branch', fields=['branch'])"
    },
    {
        "input": {
            "doctype": "Branch",
            "question": "Can I get the details of the South Branch?",
            "fields": [
                "branch"
            ]
        },
        "output": "frappe.get_all('Branch', filters={'branch': 'South Branch'}, fields=['branch'])"
    },
    {
        "input": {
            "doctype": "Branch",
            "question": "Which branch is associated with our new distribution center?",
            "fields": [
                "branch"
            ]
        },
        "output": "frappe.get_all('Branch', filters={'branch': 'Distribution Center'}, fields=['branch'])"
    },
    {
        "input": {
            "doctype": "Branch",
            "question": "Are branch names stored somewhere in the ERP system?",
            "fields": [
                "branch"
            ]
        },
        "output": "frappe.get_all('Branch', fields=['branch'])"
    },
    {
        "input": {
            "doctype": "Branch",
            "question": "Can we rename a branch entry in the ERP?",
            "fields": [
                "branch"
            ]
        },
        "output": "frappe.get_all('Branch', fields=['branch'])"
    },
    {
        "input": {
            "doctype": "Branch",
            "question": "I need to create a record for the new Mumbai branch\u2014how do I do that?",
            "fields": [
                "branch"
            ]
        },
        "output": "frappe.get_all('Branch', filters={'branch': 'Mumbai'}, fields=['branch'])"
    },
    {
        "input": {
            "doctype": "BOM Website Operation",
            "question": "Can we filter BOM website operations by operation name or time?",
            "fields": [
                "operation",
                "time_in_mins"
            ]
        },
        "output": "frappe.get_all('BOM Website Operation', filters={'operation': ['!=', ''], 'time_in_mins': ['>', 0]}, fields=['operation', 'time_in_mins'])"
    },
    {
        "input": {
            "doctype": "Project Type",
            "question": "List out our project types so I can assign one to a new project.",
            "fields": [
                "project_type"
            ]
        },
        "output": "frappe.get_all('Project Type', fields=['project_type'])"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "Can I choose a specific branch and notify its customers only via SMS?",
            "fields": [
                "branch",
                "customer",
                "message"
            ]
        },
        "output": "frappe.get_all('SMS Center', filters={'branch': 'Specific Branch'}, fields=['customer', 'message'])"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "List all UOM categories used in item conversion.",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.get_all('UOM Category', fields=['category_name'])"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "Is there a separate UOM category for liquids?",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.get_all('UOM Category', filters={'category_name': 'Liquids'}, fields=['category_name'])"
    },
    {
        "input": {
            "doctype": "Website Item Group",
            "question": "Where do I configure which item groups appear on our website?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "BOM Website Operation",
            "question": "Can we filter BOM website operations by operation name or time?",
            "fields": [
                "operation",
                "time_in_mins"
            ]
        },
        "output": "frappe.get_all('BOM Website Operation', filters={'operation': ['!=', ''], 'time_in_mins': ['>', 0]}, fields=['operation', 'time_in_mins'])"
    },
    {
        "input": {
            "doctype": "Project Type",
            "question": "List out our project types so I can assign one to a new project.",
            "fields": [
                "project_type"
            ]
        },
        "output": "frappe.get_all('Project Type', fields=['project_type'])"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "List all UOM categories used in item conversion.",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.get_all('UOM Category', fields=['category_name'])"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "Is there a separate UOM category for liquids?",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.get_all('UOM Category', filters={'category_name': 'Liquids'}, fields=['category_name'])"
    },
    {
        "input": {
            "doctype": "Website Item Group",
            "question": "Where do I configure which item groups appear on our website?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "BOM Website Operation",
            "question": "Can we filter BOM website operations by operation name or time?",
            "fields": [
                "operation",
                "time_in_mins"
            ]
        },
        "output": "frappe.get_all('BOM Website Operation', filters={'operation': ['!=', ''], 'time_in_mins': ['>', 0]}, fields=['operation', 'time_in_mins'])"
    },
    {
        "input": {
            "doctype": "BOM Website Operation",
            "question": "How are BOM operation steps displayed with images on the website?",
            "fields": [
                "operation",
                "website_image",
                "thumbnail"
            ]
        },
        "output": "frappe.get_all('BOM Website Operation', fields=['operation', 'website_image', 'thumbnail'])"
    },
    {
        "input": {
            "doctype": "Project Type",
            "question": "List out our project types so I can assign one to a new project.",
            "fields": [
                "project_type"
            ]
        },
        "output": "frappe.get_all('Project Type', fields=['project_type'])"
    },
    {
        "input": {
            "doctype": "Project Type",
            "question": "Where can I find a list of all project type labels and their purpose?",
            "fields": [
                "project_type",
                "description"
            ]
        },
        "output": "frappe.get_all('Project Type', fields=['project_type', 'description'])"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "Can I choose a specific branch and notify its customers only via SMS?",
            "fields": [
                "branch",
                "customer",
                "send_sms"
            ]
        },
        "output": "frappe.get_all('SMS Center', filters={'branch': ['!=', ''], 'customer': ['!=', '']}, fields=['branch', 'customer', 'send_sms'])"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "What's the easiest way to notify all departments about a new update?",
            "fields": [
                "department",
                "message"
            ]
        },
        "output": "frappe.get_all('SMS Center', filters={'department': ['!=', '']}, fields=['department', 'message'])"
    },
    {
        "input": {
            "doctype": "SMS Center",
            "question": "How do I send SMS updates to customers from a particular sales partner?",
            "fields": [
                "sales_partner",
                "customer",
                "send_sms"
            ]
        },
        "output": "frappe.get_all('SMS Center', filters={'sales_partner': ['!=', ''], 'customer': ['!=', '']}, fields=['sales_partner', 'customer', 'send_sms'])"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "List all UOM categories used in item conversion.",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.get_all('UOM Category', fields=['category_name'])"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "Is there a separate UOM category for liquids?",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.get_all('UOM Category', filters={'category_name': 'Liquid'}, fields=['category_name'])"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "Which UOM category does 'Box' belong to?",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.get_all('UOM Category', filters={'category_name': 'Box'}, fields=['category_name'])"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "Show me all the categories defined for unit of measurement.",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.get_all('UOM Category', fields=['category_name'])"
    },
    {
        "input": {
            "doctype": "Website Item Group",
            "question": "Where do I configure which item groups appear on our website?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "Website Item Group",
            "question": "How do I make a product category visible in the online store?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "Website Item Group",
            "question": "Can I check which item groups are listed on our website shop page?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "Website Item Group",
            "question": "Is there a way to control item group visibility for the website?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "Website Item Group",
            "question": "List all the item groups currently shown on the website.",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "Website Item Group",
            "question": "Where do I manage the product groupings for our website catalog?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "Website Item Group",
            "question": "Which section handles the configuration of website product categories?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "Website Item Group",
            "question": "Can you show me the setup for website-visible item groups?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "Website Item Group",
            "question": "Where can I update the categories featured on the website?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "Website Item Group",
            "question": "What\u2019s the doctype for linking item groups to website display?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "Website Item Group",
            "question": "How do I ensure only specific item groups are shown online?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "Website Item Group",
            "question": "Is there a way to organize product categories just for website use?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Detail",
            "question": "Where can I set up the conversion factor for different UOMs of an item?",
            "fields": [
                "uom",
                "conversion_factor"
            ]
        },
        "output": "frappe.get_all('UOM Conversion Detail', fields=['uom', 'conversion_factor'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Detail",
            "question": "How do I convert pieces to cartons in the system for a product?",
            "fields": [
                "uom",
                "conversion_factor"
            ]
        },
        "output": "frappe.get_all('UOM Conversion Detail', filters={'uom': 'Carton'}, fields=['uom', 'conversion_factor'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Detail",
            "question": "I need to define how many boxes equal one pallet\u2014where should I do that?",
            "fields": [
                "uom",
                "conversion_factor"
            ]
        },
        "output": "frappe.get_all('UOM Conversion Detail', filters={'uom': 'Pallet'}, fields=['uom', 'conversion_factor'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Detail",
            "question": "Can I configure UOM conversion for stock items?",
            "fields": [
                "uom",
                "conversion_factor"
            ]
        },
        "output": "frappe.get_all('UOM Conversion Detail', fields=['uom', 'conversion_factor'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Detail",
            "question": "What\u2019s the correct place to input UOM conversion factors?",
            "fields": [
                "uom",
                "conversion_factor"
            ]
        },
        "output": "frappe.get_all('UOM Conversion Detail', fields=['uom', 'conversion_factor'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Detail",
            "question": "Which doctype allows me to assign multiple UOMs to a product?",
            "fields": [
                "uom",
                "conversion_factor"
            ]
        },
        "output": "frappe.get_all('UOM Conversion Detail', fields=['uom', 'conversion_factor'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Detail",
            "question": "Where do I define how many units make up a case for an item?",
            "fields": [
                "uom",
                "conversion_factor"
            ]
        },
        "output": "frappe.get_all('UOM Conversion Detail', filters={'uom': 'Case'}, fields=['uom', 'conversion_factor'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Detail",
            "question": "How do I handle unit conversions like meter to centimeter for stock?",
            "fields": [
                "uom",
                "conversion_factor"
            ]
        },
        "output": "frappe.get_all('UOM Conversion Detail', filters={'uom': ['in', ['Meter', 'Centimeter']]}, fields=['uom', 'conversion_factor'])"
    },
    {
        "input": {
            "doctype": "Website Item Group",
            "question": "List all item groups used for product display on the website.",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "Website Item Group",
            "question": "Can you show me all website item group records currently in the system?",
            "fields": [
                "item_group"
            ]
        },
        "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Detail",
            "question": "List all UOM conversion factors configured for products.",
            "fields": [
                "uom",
                "conversion_factor"
            ]
        },
        "output": "frappe.get_all('UOM Conversion Detail', fields=['uom', 'conversion_factor'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Detail",
            "question": "Fetch conversion factors for items using pallet as the base UOM.",
            "fields": [
                "uom",
                "conversion_factor"
            ]
        },
        "output": "frappe.get_all('UOM Conversion Detail', filters={'uom': 'Pallet'}, fields=['uom', 'conversion_factor'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Detail",
            "question": "Show all defined conversion factors where UOM is 'Box'.",
            "fields": [
                "uom",
                "conversion_factor"
            ]
        },
        "output": "frappe.get_all('UOM Conversion Detail', filters={'uom': 'Box'}, fields=['uom', 'conversion_factor'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Detail",
            "question": "Show me where the conversion factor for item packaging is stored.",
            "fields": [
                "uom",
                "conversion_factor"
            ]
        },
        "output": "frappe.get_all('UOM Conversion Detail', fields=['uom', 'conversion_factor'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Detail",
            "question": "Where is the UOM to conversion ratio defined in the system?",
            "fields": [
                "uom",
                "conversion_factor"
            ]
        },
        "output": "frappe.get_all('UOM Conversion Detail', fields=['uom', 'conversion_factor'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Detail",
            "question": "How does ERPNext know how many dozens are in a carton?",
            "fields": [
                "uom",
                "conversion_factor"
            ]
        },
        "output": "frappe.get_all('UOM Conversion Detail', filters={'uom': 'Dozen'}, fields=['uom', 'conversion_factor'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Country",
            "question": "Where can I assign specific countries to a shipping rule?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_all('Shipping Rule Country', fields=['country'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Country",
            "question": "Can I restrict a shipping rule to only apply in Germany and France?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_all('Shipping Rule Country', filters={'country': ['in', ['Germany', 'France']]}, fields=['country'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Country",
            "question": "Which doctype links countries to their applicable shipping rules?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_all('Shipping Rule Country', fields=['country'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Country",
            "question": "How do I set up different shipping policies for each country?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_all('Shipping Rule Country', fields=['country'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Country",
            "question": "I need to configure which countries are eligible under a shipping plan\u2014where do I do that?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_all('Shipping Rule Country', fields=['country'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Country",
            "question": "Can I define a list of countries for a free shipping rule?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_all('Shipping Rule Country', fields=['country'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Country",
            "question": "Where can I add allowed countries under my custom shipping rule?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_all('Shipping Rule Country', fields=['country'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Country",
            "question": "Which form lets me define country-wise shipping availability?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_all('Shipping Rule Country', fields=['country'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Country",
            "question": "I want to allow shipping to the US only for this rule\u2014where do I configure that?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_all('Shipping Rule Country', filters={'country': 'United States'}, fields=['country'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Country",
            "question": "How can I list countries where a specific shipping method applies?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_all('Shipping Rule Country', fields=['country'])"
    },
    {
        "input": {
            "doctype": "Project",
            "question": "List all active projects created in the last 30 days.",
            "fields": [
                "name",
                "status",
                "creation"
            ]
        },
        "output": "frappe.get_list('Project', filters={ 'status': 'Active', 'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -30)] }, fields=['name', 'status', 'creation'])"
    },
    {
        "input": {
            "doctype": "Employee",
            "question": "Which employees joined this year?",
            "fields": [
                "employee_name",
                "date_of_joining"
            ]
        },
        "output": "frappe.get_list('Employee', filters={ 'date_of_joining': ['between', ['2025-01-01', '2025-12-31']] }, fields=['employee_name', 'date_of_joining'])"
    },
    {
        "input": {
            "doctype": "Customer",
            "question": "List all customers from Qatar.",
            "fields": [
                "customer_name",
                "country"
            ]
        },
        "output": "frappe.get_list('Customer', filters={ 'country': 'Qatar' }, fields=['customer_name', 'country'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "Show all sales invoices with outstanding amount greater than 1000.",
            "fields": [
                "name",
                "outstanding_amount"
            ]
        },
        "output": "frappe.get_list('Sales Invoice', filters={ 'outstanding_amount': ['>', 1000] }, fields=['name', 'outstanding_amount'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Condition",
            "question": "List all shipping conditions where the order value starts at $100.",
            "fields": [
                "from_value",
                "to_value",
                "shipping_amount"
            ]
        },
        "output": "frappe.get_list('Shipping Rule Condition', filters={'from_value': 100}, fields=['from_value', 'to_value', 'shipping_amount'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Condition",
            "question": "Can you show me conditions where shipping amount is greater than 50?",
            "fields": [
                "from_value",
                "to_value",
                "shipping_amount"
            ]
        },
        "output": "frappe.get_list('Shipping Rule Condition', filters={\"shipping_amount\": [\">\", 50]}, fields=['from_value', 'to_value', 'shipping_amount'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Condition",
            "question": "Fetch all records where the to_value is less than 500.",
            "fields": [
                "from_value",
                "to_value",
                "shipping_amount"
            ]
        },
        "output": "frappe.get_list('Shipping Rule Condition', filters={\"to_value\": [\"<\", 500]}, fields=['from_value', 'to_value', 'shipping_amount'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Condition",
            "question": "Give me all shipping tiers that span from 0 to 999.",
            "fields": [
                "from_value",
                "to_value",
                "shipping_amount"
            ]
        },
        "output": "frappe.get_list('Shipping Rule Condition', filters={\"from_value\": 0, \"to_value\": 999}, fields=['from_value', 'to_value', 'shipping_amount'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Condition",
            "question": "Get shipping rules where the shipping cost is exactly 25.",
            "fields": [
                "from_value",
                "to_value",
                "shipping_amount"
            ]
        },
        "output": "frappe.get_list('Shipping Rule Condition', filters={\"shipping_amount\": 25}, fields=['from_value', 'to_value', 'shipping_amount'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Country",
            "question": "Can I apply a different shipping rate based on destination country?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_list('Shipping Rule Country', fields=['country'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Country",
            "question": "Where is the country selection stored for each shipping rule?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_list('Shipping Rule Country', fields=['country'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Condition",
            "question": "How do I define shipping charges based on order value range?",
            "fields": [
                "from_value",
                "to_value",
                "shipping_amount"
            ]
        },
        "output": "frappe.get_list('Shipping Rule Condition', fields=['from_value', 'to_value', 'shipping_amount'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Condition",
            "question": "Where can I set a shipping amount for orders between $100 and $500?",
            "fields": [
                "from_value",
                "to_value",
                "shipping_amount"
            ]
        },
        "output": "frappe.get_list('Shipping Rule Condition', filters={\"from_value\": 100, \"to_value\": 500}, fields=['from_value', 'to_value', 'shipping_amount'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Condition",
            "question": "Can I charge different shipping fees based on cart total?",
            "fields": [
                "from_value",
                "to_value",
                "shipping_amount"
            ]
        },
        "output": "frappe.get_list('Shipping Rule Condition', fields=['from_value', 'to_value', 'shipping_amount'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Condition",
            "question": "Which doctype allows setting minimum order value for a shipping rate?",
            "fields": [
                "from_value"
            ]
        },
        "output": "frappe.get_list('Shipping Rule Condition', fields=['from_value'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Condition",
            "question": "Is there a way to define tiered shipping costs based on purchase amount?",
            "fields": [
                "from_value",
                "to_value",
                "shipping_amount"
            ]
        },
        "output": "frappe.get_list('Shipping Rule Condition', fields=['from_value', 'to_value', 'shipping_amount'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Condition",
            "question": "How do I apply a fixed shipping fee if the order value is above $1000?",
            "fields": [
                "from_value",
                "shipping_amount"
            ]
        },
        "output": "frappe.get_list('Shipping Rule Condition', filters={\"from_value\": [\">\", 1000]}, fields=['from_value', 'shipping_amount'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Condition",
            "question": "Can I configure shipping fees to vary by order subtotal?",
            "fields": [
                "from_value",
                "to_value",
                "shipping_amount"
            ]
        },
        "output": "frappe.get_list('Shipping Rule Condition', fields=['from_value', 'to_value', 'shipping_amount'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Condition",
            "question": "Where can I define the shipping amount for a specific value range?",
            "fields": [
                "from_value",
                "to_value",
                "shipping_amount"
            ]
        },
        "output": "frappe.get_list('Shipping Rule Condition', filters={\"from_value\": [\">=\", 0]}, fields=['from_value', 'to_value', 'shipping_amount'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Condition",
            "question": "If I want to set a shipping fee only for small orders, where should I do that?",
            "fields": [
                "to_value",
                "shipping_amount"
            ]
        },
        "output": "frappe.get_list('Shipping Rule Condition', filters={\"to_value\": [\"<=\", 100]}, fields=['to_value', 'shipping_amount'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Condition",
            "question": "Which table lets me define from and to values for shipping tiers?",
            "fields": [
                "from_value",
                "to_value"
            ]
        },
        "output": "frappe.get_list('Shipping Rule Condition', fields=['from_value', 'to_value'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Condition",
            "question": "How do I control shipping rates based on the value of goods purchased?",
            "fields": [
                "from_value",
                "to_value",
                "shipping_amount"
            ]
        },
        "output": "frappe.get_list('Shipping Rule Condition', fields=['from_value', 'to_value', 'shipping_amount'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule Condition",
            "question": "Where do I input currency-based shipping charges by order value?",
            "fields": [
                "from_value",
                "to_value",
                "shipping_amount"
            ]
        },
        "output": "frappe.get_list('Shipping Rule Condition', fields=['from_value', 'to_value', 'shipping_amount'])"
    },
    {
        "input": {
            "doctype": "Price List Country",
            "question": "How can I assign a country to a specific price list?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_list('Price List Country', fields=['country'])"
    },
    {
        "input": {
            "doctype": "Price List Country",
            "question": "Is there a way to link different price lists to different countries?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_list('Price List Country', fields=['country'])"
    },
    {
        "input": {
            "doctype": "Price List Country",
            "question": "Can I define which price list applies to customers in Germany?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_list('Price List Country', filters={'country': 'Germany'}, fields=['country'])"
    },
    {
        "input": {
            "doctype": "Price List Country",
            "question": "Where do I set up country-specific pricing rules?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_list('Price List Country', fields=['country'])"
    },
    {
        "input": {
            "doctype": "Price List Country",
            "question": "Which doctype lets me tag a country to a price list for localization?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_list('Price List Country', fields=['country'])"
    },
    {
        "input": {
            "doctype": "Price List Country",
            "question": "How do I associate a price list with a customer's country?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_list('Price List Country', fields=['country'])"
    },
    {
        "input": {
            "doctype": "Price List Country",
            "question": "Can I control which price list is active in the US versus Canada?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_list('Price List Country', filters={'country': ['in', ['United States', 'Canada']]}, fields=['country'])"
    },
    {
        "input": {
            "doctype": "Price List Country",
            "question": "Where do I define country restrictions for a price list?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_list('Price List Country', fields=['country'])"
    },
    {
        "input": {
            "doctype": "Price List Country",
            "question": "I want my India customers to see INR pricing. How do I set that?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_list('Price List Country', filters={'country': 'India'}, fields=['country'])"
    },
    {
        "input": {
            "doctype": "Price List Country",
            "question": "What\u2019s the correct place to connect countries with price lists?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_list('Price List Country', fields=['country'])"
    },
    {
        "input": {
            "doctype": "Price List Country",
            "question": "Can price lists be limited to specific countries?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_list('Price List Country', fields=['country'])"
    },
    {
        "input": {
            "doctype": "Monthly Distribution Percentage",
            "question": "Where do I define the budget allocation for each month?",
            "fields": [
                "month",
                "percentage_allocation"
            ]
        },
        "output": "frappe.get_list('Monthly Distribution Percentage', fields=['month', 'percentage_allocation'])"
    },
    {
        "input": {
            "doctype": "Monthly Distribution Percentage",
            "question": "How can I assign specific percentage distributions to different months?",
            "fields": [
                "month",
                "percentage_allocation"
            ]
        },
        "output": "frappe.get_list('Monthly Distribution Percentage', fields=['month', 'percentage_allocation'])"
    },
    {
        "input": {
            "doctype": "Monthly Distribution Percentage",
            "question": "Can I spread annual expenses across all months in ERPNext?",
            "fields": [
                "month",
                "percentage_allocation"
            ]
        },
        "output": "frappe.get_list('Monthly Distribution Percentage', fields=['month', 'percentage_allocation'])"
    },
    {
        "input": {
            "doctype": "Monthly Distribution Percentage",
            "question": "What is the doctype for entering monthly percentage allocations?",
            "fields": [
                "month",
                "percentage_allocation"
            ]
        },
        "output": "frappe.get_list('Monthly Distribution Percentage', fields=['month', 'percentage_allocation'])"
    },
    {
        "input": {
            "doctype": "Monthly Distribution Percentage",
            "question": "Which table lets me set monthly percentages for planning purposes?",
            "fields": [
                "month",
                "percentage_allocation"
            ]
        },
        "output": "frappe.get_list('Monthly Distribution Percentage', fields=['month', 'percentage_allocation'])"
    },
    {
        "input": {
            "doctype": "Monthly Distribution Percentage",
            "question": "How do I configure monthly split for budget distribution?",
            "fields": [
                "month",
                "percentage_allocation"
            ]
        },
        "output": "frappe.get_list('Monthly Distribution Percentage', fields=['month', 'percentage_allocation'])"
    },
    {
        "input": {
            "doctype": "Monthly Distribution Percentage",
            "question": "Is there a way to distribute a percentage budget for each calendar month?",
            "fields": [
                "month",
                "percentage_allocation"
            ]
        },
        "output": "frappe.get_list('Monthly Distribution Percentage', fields=['month', 'percentage_allocation'])"
    },
    {
        "input": {
            "doctype": "Monthly Distribution Percentage",
            "question": "Where can I record the percentage of budget used in April?",
            "fields": [
                "month",
                "percentage_allocation"
            ]
        },
        "output": "frappe.get_list('Monthly Distribution Percentage', filters={'month': 'April'}, fields=['month', 'percentage_allocation'])"
    },
    {
        "input": {
            "doctype": "Monthly Distribution Percentage",
            "question": "Can I define month-wise cost distribution in ERP?",
            "fields": [
                "month",
                "percentage_allocation"
            ]
        },
        "output": "frappe.get_list('Monthly Distribution Percentage', fields=['month', 'percentage_allocation'])"
    },
    {
        "input": {
            "doctype": "Item Website Specification",
            "question": "Where can I add website-specific labels and descriptions for my items?",
            "fields": [
                "label",
                "description"
            ]
        },
        "output": "frappe.get_list('Item Website Specification', fields=['label', 'description'])"
    },
    {
        "input": {
            "doctype": "Item Website Specification",
            "question": "How do I define detailed product specs for display on the website?",
            "fields": [
                "label",
                "description"
            ]
        },
        "output": "frappe.get_list('Item Website Specification', fields=['label', 'description'])"
    },
    {
        "input": {
            "doctype": "Item Website Specification",
            "question": "Can I show custom specification labels for each item online?",
            "fields": [
                "label",
                "description"
            ]
        },
        "output": "frappe.get_list('Item Website Specification', fields=['label', 'description'])"
    },
    {
        "input": {
            "doctype": "Item Website Specification",
            "question": "Is there a way to display item features with headings on the website?",
            "fields": [
                "label",
                "description"
            ]
        },
        "output": "frappe.get_list('Item Website Specification', fields=['label', 'description'])"
    },
    {
        "input": {
            "doctype": "Item Website Specification",
            "question": "Where do I input website specs for a product like 'Weight: 5kg' or 'Material: Steel'?",
            "fields": [
                "label",
                "description"
            ]
        },
        "output": "frappe.get_list('Item Website Specification', fields=['label', 'description'])"
    },
    {
        "input": {
            "doctype": "Item Website Specification",
            "question": "Which doctype helps organize item details under separate website sections?",
            "fields": [
                "label",
                "description"
            ]
        },
        "output": "frappe.get_list('Item Website Specification', fields=['label', 'description'])"
    },
    {
        "input": {
            "doctype": "Item Website Specification",
            "question": "How do I add descriptive specifications for items that appear on the shop page?",
            "fields": [
                "label",
                "description"
            ]
        },
        "output": "frappe.get_list('Item Website Specification', fields=['label', 'description'])"
    },
    {
        "input": {
            "doctype": "Item Website Specification",
            "question": "I want to group product information under headings like 'Specifications' or 'Highlights'. Where do I do that?",
            "fields": [
                "label",
                "description"
            ]
        },
        "output": "frappe.get_list('Item Website Specification', fields=['label', 'description'])"
    },
    {
        "input": {
            "doctype": "Item Website Specification",
            "question": "What section should I use to enter extra text-based details for an item on the web?",
            "fields": [
                "label",
                "description"
            ]
        },
        "output": "frappe.get_list('Item Website Specification', fields=['label', 'description'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "How can I specify the size or color for an item variant?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', fields=['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "Where do I link item attributes like 'Material' to their values for each variant?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', filters={'item_attribute': 'Material'}, fields=['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "I want to define different variants of a T-shirt based on color. Which doctype should I use?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', filters={'item_attribute': 'Color'}, fields=['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "How do I map the attribute 'Size' to 'Large' for a variant of an item?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', filters={'item_attribute': 'Size', 'item_attribute_value': 'Large'}, fields=['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "Which form lets me assign a value to an attribute like 'Length' for a product?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', filters={'item_attribute': 'Length'}, fields=['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "Where can I manage the specific characteristics for each item version like color or size?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', fields=['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "Is there a way to configure item variants with selected attributes and their values?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', fields=['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "How do I record that this jacket variant is made of leather?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', filters={'item_attribute_value': 'Leather'}, fields=['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Cheque Print Template",
            "question": "Where do I configure the layout for printing cheques for different banks?",
            "fields": [
                "bank_name",
                "cheque_width",
                "cheque_height",
                "starting_position_from_top_edge"
            ]
        },
        "output": "frappe.get_all('Cheque Print Template', fields=['bank_name', 'cheque_width', 'cheque_height', 'starting_position_from_top_edge'])"
    },
    {
        "input": {
            "doctype": "Cheque Print Template",
            "question": "Is there a way to set the position of the payer\u2019s name and date on a cheque?",
            "fields": [
                "payer_name_from_top_edge",
                "payer_name_from_left_edge",
                "date_dist_from_top_edge",
                "date_dist_from_left_edge"
            ]
        },
        "output": "frappe.get_list('Cheque Print Template', fields=['payer_name_from_top_edge', 'payer_name_from_left_edge', 'date_dist_from_top_edge', 'date_dist_from_left_edge'])"
    },
    {
        "input": {
            "doctype": "Cheque Print Template",
            "question": "Where can I upload scanned cheque templates for visual alignment?",
            "fields": [
                "bank_name",
                "scanned_cheque"
            ]
        },
        "output": "frappe.get_list('Cheque Print Template', fields=['bank_name', 'scanned_cheque'])"
    },
    {
        "input": {
            "doctype": "Cheque Print Template",
            "question": "Can I enable an option to include an 'Account Payable' label on printed cheques?",
            "fields": [
                "bank_name",
                "is_account_payable"
            ]
        },
        "output": "frappe.get_all('Cheque Print Template', filters={'is_account_payable': 1}, fields=['bank_name', 'is_account_payable'])"
    },
    {
        "input": {
            "doctype": "Cheque Print Template",
            "question": "Where can I define spacing and width for cheque amounts in words?",
            "fields": [
                "amt_in_words_line_spacing",
                "amt_in_word_width"
            ]
        },
        "output": "frappe.get_list('Cheque Print Template', fields=['amt_in_words_line_spacing', 'amt_in_word_width'])"
    },
    {
        "input": {
            "doctype": "Cheque Print Template",
            "question": "Which template lets me adjust the distance of account number from the top and left edges?",
            "fields": [
                "bank_name",
                "acc_no_dist_from_top_edge",
                "acc_no_dist_from_left_edge"
            ]
        },
        "output": "frappe.get_list('Cheque Print Template', fields=['bank_name', 'acc_no_dist_from_top_edge', 'acc_no_dist_from_left_edge'])"
    },
    {
        "input": {
            "doctype": "Cheque Print Template",
            "question": "How do I configure cheque dimensions for a specific print format?",
            "fields": [
                "cheque_width",
                "cheque_height",
                "has_print_format"
            ]
        },
        "output": "frappe.get_all('Cheque Print Template', filters={'has_print_format': 1}, fields=['cheque_width', 'cheque_height', 'has_print_format'])"
    },
    {
        "input": {
            "doctype": "Cheque Print Template",
            "question": "How can I define the cheque size and margins for Citibank?",
            "fields": [
                "bank_name",
                "cheque_width",
                "cheque_height",
                "starting_position_from_top_edge"
            ]
        },
        "output": "frappe.get_value('Cheque Print Template', {'bank_name': 'Citibank'}, ['cheque_width', 'cheque_height', 'starting_position_from_top_edge'])"
    },
    {
        "input": {
            "doctype": "Authorization Control",
            "question": "Where can I manage who can approve transactions in ERPNext?",
            "fields": [
                "approval_doctype",
                "approving_user",
                "approval_limit"
            ]
        },
        "output": "frappe.get_list('Authorization Control', fields=['approval_doctype', 'approving_user', 'approval_limit'])"
    },
    {
        "input": {
            "doctype": "Authorization Control",
            "question": "How do I control user authorization levels for financial documents?",
            "fields": [
                "approval_doctype",
                "approving_user",
                "approval_limit"
            ]
        },
        "output": "frappe.get_list('Authorization Control', filters={'approval_doctype': 'Journal Entry'}, fields=['approving_user', 'approval_limit'])"
    },
    {
        "input": {
            "doctype": "Authorization Control",
            "question": "Can I create rules that restrict financial approvals based on amount?",
            "fields": [
                "approval_doctype",
                "approval_limit"
            ]
        },
        "output": "frappe.get_list('Authorization Control', filters={'approval_doctype': 'Purchase Order'}, fields=['approval_limit'])"
    },
    {
        "input": {
            "doctype": "Authorization Control",
            "question": "How do I define who is allowed to authorize high-value purchase orders?",
            "fields": [
                "approval_doctype",
                "approving_user",
                "approval_limit"
            ]
        },
        "output": "frappe.get_list('Authorization Control', filters={'approval_doctype': 'Purchase Order'}, fields=['approving_user', 'approval_limit'])"
    },
    {
        "input": {
            "doctype": "Authorization Control",
            "question": "Where do I configure hierarchical approval rules in ERPNext?",
            "fields": [
                "approval_doctype",
                "approving_user",
                "approval_level"
            ]
        },
        "output": "frappe.get_list('Authorization Control', fields=['approval_doctype', 'approving_user', 'approval_level'])"
    },
    {
        "input": {
            "doctype": "Item Attribute Value",
            "question": "Where can I add new values like 'Red', 'Blue', or 'Green' for the color attribute?",
            "fields": [
                "attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Attribute Value', filters={'attribute_value': ['in', ['Red', 'Blue', 'Green']]}, fields=['attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Attribute Value",
            "question": "How can I specify the abbreviation for an attribute value like XL for Extra Large?",
            "fields": [
                "attribute_value",
                "abbr"
            ]
        },
        "output": "frappe.get_value('Item Attribute Value', {'attribute_value': 'XL'}, ['attribute_value', 'abbr'])"
    },
    {
        "input": {
            "doctype": "Item Attribute Value",
            "question": "Is there a place to manage values like 'Cotton' or 'Silk' under the Material attribute?",
            "fields": [
                "attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Attribute Value', filters={'attribute_value': ['in', ['Cotton', 'Silk']]}, fields=['attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "Where can I assign the value 'XL' to the attribute 'Size' for a clothing item?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', filters={'item_attribute': 'Size', 'item_attribute_value': 'XL'}, fields=['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "How do I map the attribute 'Size' to 'Large' for a variant of an item?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', filters={'item_attribute': 'Size', 'item_attribute_value': 'Large'}, fields=['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "Which form lets me assign a value to an attribute like 'Length' for a product?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', filters={'item_attribute': 'Length'}, fields=['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "Where can I assign the value 'XL' to the attribute 'Size' for a clothing item?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', filters={'item_attribute': 'Size', 'item_attribute_value': 'XL'}, fields=['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Attribute Value",
            "question": "Where can I add new values like 'Red', 'Blue', or 'Green' for the color attribute?",
            "fields": [
                "attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Attribute Value', filters={'attribute_value': ['in', ['Red', 'Blue', 'Green']]}, fields=['attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Attribute Value",
            "question": "I want to define possible size options like S, M, L for items. Which doctype should I use?",
            "fields": [
                "attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Attribute Value', filters={'attribute_value': ['in', ['S', 'M', 'L']]}, fields=['attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Attribute Value",
            "question": "How can I specify the abbreviation for an attribute value like XL for Extra Large?",
            "fields": [
                "attribute_value",
                "abbr"
            ]
        },
        "output": "frappe.get_value('Item Attribute Value', {'attribute_value': 'XL'}, ['attribute_value', 'abbr'])"
    },
    {
        "input": {
            "doctype": "Item Attribute Value",
            "question": "Which form lets me set the short code or abbreviation for each attribute value?",
            "fields": [
                "attribute_value",
                "abbr"
            ]
        },
        "output": "frappe.get_list('Item Attribute Value', fields=['attribute_value', 'abbr'])"
    },
    {
        "input": {
            "doctype": "Item Attribute Value",
            "question": "Is there a place to manage values like 'Cotton' or 'Silk' under the Material attribute?",
            "fields": [
                "attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Attribute Value', filters={'attribute_value': ['in', ['Cotton', 'Silk']]}, fields=['attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Attribute Value",
            "question": "Where do I store the actual values that belong to item attributes in ERPNext?",
            "fields": [
                "attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Attribute Value', fields=['attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Attribute Value",
            "question": "Can I update or edit the abbreviation linked to a specific attribute value?",
            "fields": [
                "attribute_value",
                "abbr"
            ]
        },
        "output": "frappe.get_value('Item Attribute Value', {'attribute_value': 'XL'}, ['abbr'])"
    },
    {
        "input": {
            "doctype": "Item Attribute Value",
            "question": "What doctype should I use to maintain all the allowed values for an item attribute?",
            "fields": [
                "attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Attribute Value', fields=['attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Attribute Value",
            "question": "How do I make sure the attribute value 'XL' is available for product variants?",
            "fields": [
                "attribute_value"
            ]
        },
        "output": "frappe.get_value('Item Attribute Value', {'attribute_value': 'XL'}, ['attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Attribute Value",
            "question": "Where do I manage a list of attribute values used for item variants?",
            "fields": [
                "attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Attribute Value', fields=['attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Attribute Value",
            "question": "If I need to add a new fabric type like 'Denim' to an attribute, which doctype should I modify?",
            "fields": [
                "attribute_value"
            ]
        },
        "output": "frappe.get_value('Item Attribute Value', {'attribute_value': 'Denim'}, ['attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "How can I specify the size or color for an item variant?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', {'item_attribute': 'Color'}, ['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "Where do I link item attributes like 'Material' to their values for each variant?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', {'item_attribute': 'Material'}, ['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "I want to define different variants of a T-shirt based on color. Which doctype should I use?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', {'item_attribute': 'Color'}, ['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "How do I map the attribute 'Size' to 'Large' for a variant of an item?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', {'item_attribute': 'Size', 'item_attribute_value': 'Large'}, ['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "Where can I track the internal transfers of an employee across different departments?",
            "fields": [
                "branch",
                "department",
                "designation",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_all('Employee Internal Work History', fields=['branch', 'department', 'designation', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "How can I record an employee\u2019s previous roles within the same company?",
            "fields": [
                "branch",
                "department",
                "designation",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_all('Employee Internal Work History', fields=['branch', 'department', 'designation', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "Which form allows me to log branch changes for an employee over time?",
            "fields": [
                "branch",
                "department",
                "designation",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_all('Employee Internal Work History', fields=['branch', 'department', 'designation', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "Can I see when and where an employee held different designations?",
            "fields": [
                "branch",
                "department",
                "designation",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_all('Employee Internal Work History', fields=['branch', 'department', 'designation', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "Is there a record of the departments an employee worked in since joining?",
            "fields": [
                "branch",
                "department",
                "designation",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_all('Employee Internal Work History', fields=['branch', 'department', 'designation', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "How do I track an employee\u2019s job history within the company including department and dates?",
            "fields": [
                "branch",
                "department",
                "designation",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_all('Employee Internal Work History', fields=['branch', 'department', 'designation', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "Where can I view an employee's timeline of roles and designations internally?",
            "fields": [
                "branch",
                "department",
                "designation",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_all('Employee Internal Work History', fields=['branch', 'department', 'designation', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "Which doctype lets me document an employee\u2019s movement from one branch to another?",
            "fields": [
                "branch",
                "department",
                "designation",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_all('Employee Internal Work History', fields=['branch', 'department', 'designation', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "Can I keep a record of internal department changes for HR auditing purposes?",
            "fields": [
                "branch",
                "department",
                "designation",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_all('Employee Internal Work History', fields=['branch', 'department', 'designation', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "How can I document the companies an employee worked for before joining the organization?",
            "fields": [
                "company_name",
                "designation",
                "salary",
                "address",
                "contact",
                "total_experience"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'salary', 'address', 'contact', 'total_experience'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Where can I record details of the previous jobs an employee held before joining our company?",
            "fields": [
                "company_name",
                "designation",
                "salary",
                "address",
                "contact",
                "total_experience"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'salary', 'address', 'contact', 'total_experience'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Can I track the previous companies an employee worked for, including their salary details?",
            "fields": [
                "company_name",
                "salary",
                "total_experience"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'salary', 'total_experience'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "How can I store the address and contact details of an employee\u2019s previous employers?",
            "fields": [
                "company_name",
                "address",
                "contact"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'address', 'contact'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Where can I document the previous job roles and their associated salaries for an employee?",
            "fields": [
                "company_name",
                "designation",
                "salary"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'salary'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "How can I store an employee\u2019s educational qualifications, including university and degree information?",
            "fields": [
                "school_univ",
                "qualification",
                "level",
                "year_of_passing"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['school_univ', 'qualification', 'level', 'year_of_passing'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "Is there a place to record the major subjects studied by an employee during their education?",
            "fields": [
                "school_univ",
                "maj_opt_subj"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['school_univ', 'maj_opt_subj'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "Where can I record an employee\u2019s grade or percentage for their degree?",
            "fields": [
                "class_per"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['class_per'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "Can I document the year an employee graduated from their university?",
            "fields": [
                "year_of_passing"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['year_of_passing'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "How do I track the educational qualifications of an employee, including their graduation year?",
            "fields": [
                "qualification",
                "year_of_passing"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['qualification', 'year_of_passing'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "How do I track an employee's internal transfer history between different departments?",
            "fields": [
                "branch",
                "department",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "Where can I record the employee's job history within the same organization, including their branch and department?",
            "fields": [
                "branch",
                "department",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Can I track an employee's entire external career history with multiple companies?",
            "fields": [
                "company_name",
                "designation",
                "total_experience"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'total_experience'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "How do I store detailed academic qualifications for an employee including their degree, university, and year?",
            "fields": [
                "qualification",
                "school_univ",
                "year_of_passing"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['qualification', 'school_univ', 'year_of_passing'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Where can I record salary details for an employee\u2019s previous jobs?",
            "fields": [
                "company_name",
                "salary"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'salary'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Can I store the total experience of an employee from their previous employers?",
            "fields": [
                "company_name",
                "total_experience"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'total_experience'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "How can I find out the total amount of all paid invoices for the last month?",
            "fields": [
                "total_amount",
                "status",
                "date"
            ]
        },
        "output": "frappe.get_list('Sales Invoice', {'status': 'Paid', 'date': ['>=', '2023-03-01'], 'date': ['<=', '2023-03-31']}, ['total_amount'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "Where do I store the date range of an employee's internal transfers between different departments?",
            "fields": [
                "department",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['department', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Can I track all the companies an employee worked for, with the start and end dates for each role?",
            "fields": [
                "company_name",
                "designation",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "How can I track the educational qualifications of an employee, including their grade and university?",
            "fields": [
                "qualification",
                "school_univ",
                "class_per"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['qualification', 'school_univ', 'class_per'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "How can I check the available stock for product 'ABC123' in the warehouse?",
            "fields": [
                "item_code",
                "stock_qty",
                "warehouse"
            ]
        },
        "output": "frappe.get_list('Item', {'item_code': 'ABC123'}, ['stock_qty', 'warehouse'])"
    },
    {
        "input": {
            "doctype": "Purchase Order",
            "question": "What is the status and delivery date of the orders placed for 'Product X' in the last quarter?",
            "fields": [
                "status",
                "delivery_date"
            ]
        },
        "output": "frappe.get_list('Purchase Order', {'item': 'Product X', 'date': ['>=', '2023-01-01'], 'date': ['<=', '2023-03-31']}, ['status', 'delivery_date'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "How much revenue was generated from 'Product Y' sold to 'Customer Z' last week?",
            "fields": [
                "total_amount",
                "item_code",
                "customer"
            ]
        },
        "output": "frappe.get_list('Sales Invoice', {'item_code': 'Product Y', 'customer': 'Customer Z', 'date': ['>=', '2023-04-01'], 'date': ['<=', '2023-04-07']}, ['total_amount'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Can I find an employee's previous salary details along with the company they worked at?",
            "fields": [
                "company_name",
                "salary"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'salary'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "Which qualification does an employee hold, and from which university did they graduate?",
            "fields": [
                "qualification",
                "school_univ"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['qualification', 'school_univ'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "Where can I track an employee's internal movement across departments with their joining dates?",
            "fields": [
                "department",
                "from_date"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['department', 'from_date'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "How do I record an employee\u2019s previous companies, including job titles and total experience?",
            "fields": [
                "company_name",
                "designation",
                "total_experience"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'total_experience'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "What is the total amount generated from all paid invoices of 'Customer X' this year?",
            "fields": [
                "total_amount",
                "customer",
                "status"
            ]
        },
        "output": "frappe.get_list('Sales Invoice', {'customer': 'Customer X', 'status': 'Paid', 'date': ['>=', '2023-01-01'], 'date': ['<=', '2023-12-31']}, ['total_amount'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "How many units of 'Product X' have been sold in the last 6 months?",
            "fields": [
                "item_code",
                "quantity_sold"
            ]
        },
        "output": "frappe.get_list('Sales Invoice', {'item_code': 'Product X', 'date': ['>=', '2022-10-01'], 'date': ['<=', '2023-03-31']}, ['quantity_sold'])"
    },
    {
        "input": {
            "doctype": "Purchase Order",
            "question": "Where do I find the total ordered quantity for 'Product Y' across all suppliers?",
            "fields": [
                "item_code",
                "quantity_ordered",
                "supplier"
            ]
        },
        "output": "frappe.get_list('Purchase Order', {'item_code': 'Product Y'}, ['quantity_ordered', 'supplier'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "How can I track the available stock for all products in warehouse 'W-101'?",
            "fields": [
                "item_code",
                "stock_qty",
                "warehouse"
            ]
        },
        "output": "frappe.get_list('Item', {'warehouse': 'W-101'}, ['item_code', 'stock_qty'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "How can I document an employee\u2019s transfer history including start and end dates?",
            "fields": [
                "branch",
                "department",
                "designation",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'designation', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Where can I record an employee\u2019s past work experiences before joining our company?",
            "fields": [
                "company_name",
                "designation",
                "salary",
                "address",
                "contact",
                "total_experience"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'salary', 'address', 'contact', 'total_experience'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "How do I track the previous companies an employee worked for?",
            "fields": [
                "company_name",
                "designation",
                "total_experience"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'total_experience'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Is there a way to store an employee\u2019s total experience from past jobs?",
            "fields": [
                "company_name",
                "total_experience"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'total_experience'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Where can I document the designations held by an employee at previous organizations?",
            "fields": [
                "company_name",
                "designation"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Can I maintain a record of previous salaries drawn by an employee?",
            "fields": [
                "company_name",
                "salary"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'salary'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Which module captures external companies an employee worked with before joining?",
            "fields": [
                "company_name"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "How do I record the address and contact details of an employee\u2019s previous employers?",
            "fields": [
                "company_name",
                "address",
                "contact"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'address', 'contact'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Is there a section to log an employee's entire external career history?",
            "fields": [
                "company_name",
                "designation",
                "total_experience"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'total_experience'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Which doctype stores past job roles and salaries for new hires?",
            "fields": [
                "company_name",
                "designation",
                "salary"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'salary'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "Where can I store an employee\u2019s academic qualifications?",
            "fields": [
                "school_univ",
                "qualification",
                "level",
                "year_of_passing"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['school_univ', 'qualification', 'level', 'year_of_passing'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "How do I track which university an employee graduated from?",
            "fields": [
                "school_univ"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['school_univ'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "Is there a section to capture the level of education for employees?",
            "fields": [
                "level"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['level'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "Can I record the year of passing for each qualification of an employee?",
            "fields": [
                "year_of_passing"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['year_of_passing'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "Where do I enter an employee\u2019s grade or percentage for their degree?",
            "fields": [
                "class_per"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['class_per'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "How can I document the major subjects an employee studied?",
            "fields": [
                "maj_opt_subj"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['maj_opt_subj'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "Which form lets me input graduation and post-graduation details for employees?",
            "fields": [
                "qualification",
                "school_univ"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['qualification', 'school_univ'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "Can I list all academic credentials of a staff member?",
            "fields": [
                "school_univ",
                "qualification",
                "level",
                "year_of_passing"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['school_univ', 'qualification', 'level', 'year_of_passing'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "Where can I maintain records of employees' educational backgrounds?",
            "fields": [
                "school_univ",
                "qualification",
                "level"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['school_univ', 'qualification', 'level'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "Is there a way to track optional subjects studied by an employee?",
            "fields": [
                "maj_opt_subj"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['maj_opt_subj'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "Which module stores school or university names for each employee?",
            "fields": [
                "school_univ"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['school_univ'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "How do I capture employee education details like level, year, and score?",
            "fields": [
                "level",
                "year_of_passing",
                "class_per"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['level', 'year_of_passing', 'class_per'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Can I view all external work experiences of a specific employee in one place?",
            "fields": [
                "company_name",
                "designation",
                "total_experience"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'total_experience'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Where can I list an employee\u2019s last few companies and their designations there?",
            "fields": [
                "company_name",
                "designation"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Which form should I use to record the total number of years an employee worked before joining us?",
            "fields": [
                "company_name",
                "total_experience"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'total_experience'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "Where do I store information about an employee\u2019s past designations within our company?",
            "fields": [
                "branch",
                "department",
                "designation"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'designation'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "I need to track which departments an employee worked in last year. Which module should I use?",
            "fields": [
                "branch",
                "department",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "Which form lets me assign a value to an attribute like 'Length' for a product?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', {'item_attribute': 'Length'}, ['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "How do I retrieve the total amount of all paid invoices issued last month?",
            "fields": [
                "total_amount",
                "status",
                "date"
            ]
        },
        "output": "frappe.get_list('Sales Invoice', {'status': 'Paid', 'date': ['>=', '2023-03-01'], 'date': ['<=', '2023-03-31']}, ['total_amount'])"
    },
    {
        "input": {
            "doctype": "Sales Invoice",
            "question": "What is the total amount generated from all invoices in the last quarter?",
            "fields": [
                "total_amount",
                "status",
                "date"
            ]
        },
        "output": "frappe.get_list('Sales Invoice', {'status': 'Paid', 'date': ['>=', '2023-01-01'], 'date': ['<=', '2023-03-31']}, ['total_amount'])"
    },
    {
        "input": {
            "doctype": "Purchase Order",
            "question": "How can I check the total number of items ordered for 'Product A' in the last 6 months?",
            "fields": [
                "item_code",
                "quantity_ordered"
            ]
        },
        "output": "frappe.get_list('Purchase Order', {'item_code': 'Product A', 'date': ['>=', '2022-10-01'], 'date': ['<=', '2023-03-31']}, ['quantity_ordered'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "Where can I find all available stock quantities for 'Product B' across warehouses?",
            "fields": [
                "item_code",
                "stock_qty",
                "warehouse"
            ]
        },
        "output": "frappe.get_list('Item', {'item_code': 'Product B'}, ['stock_qty', 'warehouse'])"
    },
    {
        "input": {
            "doctype": "Item",
            "question": "How do I get the total stock available for all products in 'Warehouse A'?",
            "fields": [
                "item_code",
                "stock_qty",
                "warehouse"
            ]
        },
        "output": "frappe.get_list('Item', {'warehouse': 'Warehouse A'}, ['item_code', 'stock_qty'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "Can I list all academic credentials of a staff member?",
            "fields": [
                "school_univ",
                "qualification",
                "level",
                "year_of_passing",
                "class_per",
                "maj_opt_subj"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['school_univ', 'qualification', 'level', 'year_of_passing', 'class_per', 'maj_opt_subj'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "Where can I maintain records of employees' educational backgrounds?",
            "fields": [
                "school_univ",
                "qualification",
                "level",
                "year_of_passing",
                "class_per",
                "maj_opt_subj"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['school_univ', 'qualification', 'level', 'year_of_passing', 'class_per', 'maj_opt_subj'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "Is there a way to track optional subjects studied by an employee?",
            "fields": [
                "maj_opt_subj"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['maj_opt_subj'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "Which module stores school or university names for each employee?",
            "fields": [
                "school_univ"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['school_univ'])"
    },
    {
        "input": {
            "doctype": "Employee Education",
            "question": "How do I capture employee education details like level, year, and score?",
            "fields": [
                "level",
                "year_of_passing",
                "class_per"
            ]
        },
        "output": "frappe.get_list('Employee Education', ['level', 'year_of_passing', 'class_per'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Can I view all external work experiences of a specific employee in one place?",
            "fields": [
                "company_name",
                "designation",
                "total_experience"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'total_experience'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Where can I list an employee\u2019s last few companies and their designations there?",
            "fields": [
                "company_name",
                "designation"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation'])"
    },
    {
        "input": {
            "doctype": "Employee External Work History",
            "question": "Which form should I use to record the total number of years an employee worked before joining us?",
            "fields": [
                "company_name",
                "total_experience"
            ]
        },
        "output": "frappe.get_list('Employee External Work History', ['company_name', 'total_experience'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "Where do I store information about an employee\u2019s past designations within our company?",
            "fields": [
                "branch",
                "department",
                "designation",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'designation', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "I need to track which departments an employee worked in last year. Which module should I use?",
            "fields": [
                "branch",
                "department",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "Which form lets me assign a value to an attribute like 'Length' for a product?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', {'item_attribute': 'Length'}, ['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "Where can I manage the specific characteristics for each item version like color or size?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', ['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "Is there a way to configure item variants with selected attributes and their values?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', ['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "How do I record that this jacket variant is made of leather?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', ['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "Which doctype helps link 'Material' as Cotton for a specific product variant?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', {'item_attribute': 'Material', 'item_attribute_value': 'Cotton'}, ['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "Where can I assign the value 'XL' to the attribute 'Size' for a clothing item?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', {'item_attribute': 'Size', 'item_attribute_value': 'XL'}, ['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "I need to store the value of each attribute combination for an item variant. Where do I do that?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', ['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "What do I use to match an attribute like 'Color' with its value like 'Red' for each variant?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', {'item_attribute': 'Color', 'item_attribute_value': 'Red'}, ['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "Where can I track the internal transfers of an employee across different departments?",
            "fields": [
                "branch",
                "department",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "How can I record an employee\u2019s previous roles within the same company?",
            "fields": [
                "branch",
                "department",
                "designation",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'designation', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "Which form allows me to log branch changes for an employee over time?",
            "fields": [
                "branch",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['branch', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "Can I see when and where an employee held different designations?",
            "fields": [
                "branch",
                "department",
                "designation",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'designation', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "Is there a record of the departments an employee worked in since joining?",
            "fields": [
                "branch",
                "department",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "How do I track an employee\u2019s job history within the company including department and dates?",
            "fields": [
                "branch",
                "department",
                "designation",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'designation', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "Where can I view an employee's timeline of roles and designations internally?",
            "fields": [
                "branch",
                "department",
                "designation",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'designation', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "Which doctype lets me document an employee\u2019s movement from one branch to another?",
            "fields": [
                "branch",
                "department",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "Can I keep a record of internal department changes for HR auditing purposes?",
            "fields": [
                "branch",
                "department",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "How can I document an employee\u2019s transfer history including start and end dates?",
            "fields": [
                "branch",
                "department",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "Where do I store information about an employee\u2019s past designations within our company?",
            "fields": [
                "branch",
                "department",
                "designation",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'designation', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Employee Internal Work History",
            "question": "I need to track which departments an employee worked in last year. Which module should I use?",
            "fields": [
                "branch",
                "department",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Item Attribute Value",
            "question": "I need to create value options for the 'Style' attribute like 'Modern' and 'Classic'. Where can I do that?",
            "fields": [
                "attribute_value",
                "abbr"
            ]
        },
        "output": "frappe.get_list('Item Attribute Value', {'attribute_value': ['Modern', 'Classic']}, ['attribute_value', 'abbr'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "I need to store the value of each attribute combination for an item variant. Where do I do that?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', ['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant",
            "question": "What do I use to match an attribute like 'Color' with its value like 'Red' for each variant?",
            "fields": [
                "item_attribute",
                "item_attribute_value"
            ]
        },
        "output": "frappe.get_list('Item Variant', {'item_attribute': 'Color', 'item_attribute_value': 'Red'}, ['item_attribute', 'item_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Website Specification",
            "question": "Can I show multiple labeled descriptions under an item\u2019s product page?",
            "fields": [
                "item",
                "description"
            ]
        },
        "output": "frappe.get_list('Item Website Specification', ['item', 'description'])"
    },
    {
        "input": {
            "doctype": "Item Website Specification",
            "question": "Where can I edit the information users see in the specification tab on my item webpage?",
            "fields": [
                "item",
                "description"
            ]
        },
        "output": "frappe.get_list('Item Website Specification', ['item', 'description'])"
    },
    {
        "input": {
            "doctype": "Item Website Specification",
            "question": "Is there a field to hold website content describing product features for each item?",
            "fields": [
                "item",
                "description"
            ]
        },
        "output": "frappe.get_list('Item Website Specification', ['item', 'description'])"
    },
    {
        "input": {
            "doctype": "Monthly Distribution Percentage",
            "question": "I need to allocate 10% of budget to June. Where do I do that?",
            "fields": [
                "month",
                "percentage_allocation"
            ]
        },
        "output": "frappe.get_list('Monthly Distribution Percentage', {'month': 'June'}, ['month', 'percentage_allocation'])"
    },
    {
        "input": {
            "doctype": "Monthly Distribution Percentage",
            "question": "How to assign monthly weights for a yearly financial plan?",
            "fields": [
                "month",
                "percentage_allocation"
            ]
        },
        "output": "frappe.get_list('Monthly Distribution Percentage', ['month', 'percentage_allocation'])"
    },
    {
        "input": {
            "doctype": "Monthly Distribution Percentage",
            "question": "Which doctype is used for defining each month's allocation rate?",
            "fields": [
                "month",
                "percentage_allocation"
            ]
        },
        "output": "frappe.get_list('Monthly Distribution Percentage', ['month', 'percentage_allocation'])"
    },
    {
        "input": {
            "doctype": "Price List Country",
            "question": "Which doctype helps apply different pricing by geography?",
            "fields": [
                "country"
            ]
        },
        "output": "frappe.get_list('Price List Country', ['country'])"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "Where can I configure a new unit category for digital items?",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.get_list('UOM Category', ['category_name'])"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "How do I manage categories of UOMs in ERPNext?",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.get_list('UOM Category', ['category_name'])"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "What category is used for length measurements?",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.get_list('UOM Category', ['category_name'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "Which requirements have already been fulfilled for this contract?",
            "fields": [
                "fulfilled",
                "requirement"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 1}, ['fulfilled', 'requirement'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "Can I check off fulfilled tasks in the contract fulfilment checklist?",
            "fields": [
                "fulfilled",
                "requirement"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 1}, ['fulfilled', 'requirement'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "Where can I review all pending contract requirements?",
            "fields": [
                "fulfilled",
                "requirement"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 0}, ['fulfilled', 'requirement'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "List all the notes added for unfulfilled contract requirements.",
            "fields": [
                "fulfilled",
                "requirement",
                "notes"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 0}, ['requirement', 'notes'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "How do I update notes for a contract requirement that\u2019s still pending?",
            "fields": [
                "fulfilled",
                "requirement",
                "notes"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 0}, ['requirement', 'notes'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "Which contract checklist items have been marked as fulfilled?",
            "fields": [
                "fulfilled",
                "requirement"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 1}, ['fulfilled', 'requirement'])"
    },
    {
        "input": {
            "doctype": "Projects Settings",
            "question": "Can we allow scheduling overlaps for workstations in project tasks?",
            "fields": [
                "timesheet_sb",
                "ignore_workstation_time_overlap"
            ]
        },
        "output": "frappe.get_value('Projects Settings', ['ignore_workstation_time_overlap'])"
    },
    {
        "input": {
            "doctype": "Projects Settings",
            "question": "How do I ignore user time conflicts during project planning?",
            "fields": [
                "timesheet_sb",
                "ignore_user_time_overlap"
            ]
        },
        "output": "frappe.get_value('Projects Settings', ['ignore_user_time_overlap'])"
    },
    {
        "input": {
            "doctype": "Projects Settings",
            "question": "Where can I toggle settings for employee time overlap in projects?",
            "fields": [
                "timesheet_sb",
                "ignore_employee_time_overlap"
            ]
        },
        "output": "frappe.get_value('Projects Settings', ['ignore_employee_time_overlap'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program Collection",
            "question": "What is the minimum amount a customer needs to spend to enter each loyalty tier?",
            "fields": [
                "tier_name",
                "min_spent"
            ]
        },
        "output": "frappe.get_list('Loyalty Program Collection', ['tier_name', 'min_spent'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program Collection",
            "question": "How is the collection factor calculated for loyalty tiers?",
            "fields": [
                "tier_name",
                "collection_factor"
            ]
        },
        "output": "frappe.get_list('Loyalty Program Collection', ['tier_name', 'collection_factor'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program Collection",
            "question": "List all loyalty program tiers and their required spending.",
            "fields": [
                "tier_name",
                "min_spent"
            ]
        },
        "output": "frappe.get_list('Loyalty Program Collection', ['tier_name', 'min_spent'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program Collection",
            "question": "Which loyalty tier requires the highest total spending?",
            "fields": [
                "tier_name",
                "min_spent"
            ]
        },
        "output": "frappe.get_list('Loyalty Program Collection', ['tier_name', 'min_spent'], {'min_spent': ['>', 0]})"
    },
    {
        "input": {
            "doctype": "Loyalty Program Collection",
            "question": "Can I view all tier names and LP conversion rates in the loyalty program?",
            "fields": [
                "tier_name",
                "collection_factor"
            ]
        },
        "output": "frappe.get_list('Loyalty Program Collection', ['tier_name', 'collection_factor'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program Collection",
            "question": "How many loyalty tiers are defined in the system?",
            "fields": [
                "tier_name"
            ]
        },
        "output": "frappe.get_list('Loyalty Program Collection', ['tier_name'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program Collection",
            "question": "Which tier offers the best collection factor for loyalty points?",
            "fields": [
                "tier_name",
                "collection_factor"
            ]
        },
        "output": "frappe.get_list('Loyalty Program Collection', {'collection_factor': ['>', 0]}, ['tier_name', 'collection_factor'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program Collection",
            "question": "Show me loyalty tiers based on customer spending thresholds.",
            "fields": [
                "tier_name",
                "min_spent"
            ]
        },
        "output": "frappe.get_list('Loyalty Program Collection', ['tier_name', 'min_spent'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program Collection",
            "question": "Is there a loyalty program tier with no minimum spend?",
            "fields": [
                "tier_name",
                "min_spent"
            ]
        },
        "output": "frappe.get_list('Loyalty Program Collection', {'min_spent': 0}, ['tier_name', 'min_spent'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program Collection",
            "question": "List loyalty program tiers and how much spending is needed for each.",
            "fields": [
                "tier_name",
                "min_spent"
            ]
        },
        "output": "frappe.get_list('Loyalty Program Collection', ['tier_name', 'min_spent'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program Collection",
            "question": "What\u2019s the LP collection rate for each loyalty tier?",
            "fields": [
                "tier_name",
                "collection_factor"
            ]
        },
        "output": "frappe.get_list('Loyalty Program Collection', ['tier_name', 'collection_factor'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program Collection",
            "question": "Give me details of loyalty program tiers and collection multipliers.",
            "fields": [
                "tier_name",
                "collection_factor"
            ]
        },
        "output": "frappe.get_list('Loyalty Program Collection', ['tier_name', 'collection_factor'])"
    },
    {
        "input": {
            "doctype": "Share Balance",
            "question": "What is the current share balance for each share type?",
            "fields": [
                "share_type",
                "no_of_shares"
            ]
        },
        "output": "frappe.get_list('Share Balance', ['share_type', 'no_of_shares'])"
    },
    {
        "input": {
            "doctype": "Share Balance",
            "question": "Show me the range of share numbers and total amount issued.",
            "fields": [
                "share_type",
                "from_no",
                "to_no",
                "amount"
            ]
        },
        "output": "frappe.get_list('Share Balance', ['share_type', 'from_no', 'to_no', 'amount'])"
    },
    {
        "input": {
            "doctype": "Share Balance",
            "question": "List all shares that are marked as purchased.",
            "fields": [
                "share_type",
                "current_state"
            ]
        },
        "output": "frappe.get_list('Share Balance', {'current_state': 'purchased'}, ['share_type', 'current_state'])"
    },
    {
        "input": {
            "doctype": "Share Balance",
            "question": "How many shares were issued for each share type and at what rate?",
            "fields": [
                "share_type",
                "no_of_shares",
                "rate"
            ]
        },
        "output": "frappe.get_list('Share Balance', ['share_type', 'no_of_shares', 'rate'])"
    },
    {
        "input": {
            "doctype": "Share Balance",
            "question": "Can I see share balances specific to companies only?",
            "fields": [
                "share_type",
                "is_company",
                "no_of_shares"
            ]
        },
        "output": "frappe.get_list('Share Balance', {'is_company': 1}, ['share_type', 'no_of_shares'])"
    },
    {
        "input": {
            "doctype": "Share Balance",
            "question": "What's the total number of shares issued in the system?",
            "fields": [
                "no_of_shares"
            ]
        },
        "output": "frappe.get_list('Share Balance', ['no_of_shares'])"
    },
    {
        "input": {
            "doctype": "Share Balance",
            "question": "Do we maintain share rate and count details for every share type?",
            "fields": [
                "share_type",
                "rate",
                "no_of_shares"
            ]
        },
        "output": "frappe.get_list('Share Balance', ['share_type', 'rate', 'no_of_shares'])"
    },
    {
        "input": {
            "doctype": "Share Balance",
            "question": "Are there any shares in the system currently in issued state?",
            "fields": [
                "share_type",
                "current_state"
            ]
        },
        "output": "frappe.get_list('Share Balance', {'current_state': 'issued'}, ['share_type', 'current_state'])"
    },
    {
        "input": {
            "doctype": "Share Balance",
            "question": "Where can I find the starting and ending share numbers for each type?",
            "fields": [
                "share_type",
                "from_no",
                "to_no"
            ]
        },
        "output": "frappe.get_list('Share Balance', ['share_type', 'from_no', 'to_no'])"
    },
    {
        "input": {
            "doctype": "Share Balance",
            "question": "List all share types along with their current state and amount.",
            "fields": [
                "share_type",
                "current_state",
                "amount"
            ]
        },
        "output": "frappe.get_list('Share Balance', ['share_type', 'current_state', 'amount'])"
    },
    {
        "input": {
            "doctype": "Share Balance",
            "question": "How is the share value calculated from number and rate?",
            "fields": [
                "no_of_shares",
                "rate",
                "amount"
            ]
        },
        "output": "frappe.get_list('Share Balance', ['no_of_shares', 'rate', 'amount'])"
    },
    {
        "input": {
            "doctype": "Share Balance",
            "question": "Do we have a record of company-owned shares separately?",
            "fields": [
                "is_company",
                "share_type",
                "no_of_shares"
            ]
        },
        "output": "frappe.get_list('Share Balance', {'is_company': 1}, ['share_type', 'no_of_shares'])"
    },
    {
        "input": {
            "doctype": "Opportunity Type",
            "question": "What are the different opportunity types defined in our system?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Opportunity Type', ['description'])"
    },
    {
        "input": {
            "doctype": "Opportunity Type",
            "question": "Can I see the description of each opportunity type?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Opportunity Type', ['description'])"
    },
    {
        "input": {
            "doctype": "Opportunity Type",
            "question": "List all types of opportunities used in our CRM module.",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Opportunity Type', ['description'])"
    },
    {
        "input": {
            "doctype": "Opportunity Type",
            "question": "How do we categorize different business opportunities?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Opportunity Type', ['description'])"
    },
    {
        "input": {
            "doctype": "Opportunity Type",
            "question": "Where do I define or manage opportunity categories?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Opportunity Type', ['description'])"
    },
    {
        "input": {
            "doctype": "Opportunity Type",
            "question": "Which opportunity types are currently available in the system?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Opportunity Type', ['description'])"
    },
    {
        "input": {
            "doctype": "Opportunity Type",
            "question": "Do we have a type defined for service-related opportunities?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Opportunity Type', {'description': 'service-related'}, ['description'])"
    },
    {
        "input": {
            "doctype": "Opportunity Type",
            "question": "Can I customize the descriptions for each opportunity type?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Opportunity Type', ['description'])"
    },
    {
        "input": {
            "doctype": "Opportunity Type",
            "question": "Is there a section where I can maintain opportunity labels?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Opportunity Type', ['description'])"
    },
    {
        "input": {
            "doctype": "Opportunity Type",
            "question": "How do I manage predefined opportunity types in our CRM?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Opportunity Type', ['description'])"
    },
    {
        "input": {
            "doctype": "Opportunity Type",
            "question": "Are opportunity types linked to any specific workflow?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Opportunity Type', ['description'])"
    },
    {
        "input": {
            "doctype": "Opportunity Type",
            "question": "What\u2019s the purpose of descriptions under each opportunity type?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Opportunity Type', ['description'])"
    },
    {
        "input": {
            "doctype": "Projects Settings",
            "question": "Are workstation schedule clashes ignored in our project setup?",
            "fields": [
                "ignore_workstation_time_overlap"
            ]
        },
        "output": "frappe.get_value('Projects Settings', ['ignore_workstation_time_overlap'])"
    },
    {
        "input": {
            "doctype": "Projects Settings",
            "question": "Show project settings related to time conflicts for users and employees.",
            "fields": [
                "ignore_user_time_overlap",
                "ignore_employee_time_overlap"
            ]
        },
        "output": "frappe.get_value('Projects Settings', ['ignore_user_time_overlap', 'ignore_employee_time_overlap'])"
    },
    {
        "input": {
            "doctype": "Projects Settings",
            "question": "Can we allow overlapping bookings for employees in project tasks?",
            "fields": [
                "ignore_employee_time_overlap"
            ]
        },
        "output": "frappe.get_value('Projects Settings', ['ignore_employee_time_overlap'])"
    },
    {
        "input": {
            "doctype": "Projects Settings",
            "question": "Do project settings allow multiple users to be scheduled at the same time?",
            "fields": [
                "ignore_user_time_overlap"
            ]
        },
        "output": "frappe.get_value('Projects Settings', ['ignore_user_time_overlap'])"
    },
    {
        "input": {
            "doctype": "Projects Settings",
            "question": "Is employee time overlap restricted in project configurations?",
            "fields": [
                "ignore_employee_time_overlap"
            ]
        },
        "output": "frappe.get_value('Projects Settings', ['ignore_employee_time_overlap'])"
    },
    {
        "input": {
            "doctype": "Projects Settings",
            "question": "Where do I configure project-level scheduling overlaps for users?",
            "fields": [
                "ignore_user_time_overlap"
            ]
        },
        "output": "frappe.get_value('Projects Settings', ['ignore_user_time_overlap'])"
    },
    {
        "input": {
            "doctype": "Projects Settings",
            "question": "Can I prevent time clashes for workstations in project operations?",
            "fields": [
                "ignore_workstation_time_overlap"
            ]
        },
        "output": "frappe.get_value('Projects Settings', ['ignore_workstation_time_overlap'])"
    },
    {
        "input": {
            "doctype": "Projects Settings",
            "question": "What are the overlap rules set for project resource planning?",
            "fields": [
                "ignore_user_time_overlap",
                "ignore_employee_time_overlap",
                "ignore_workstation_time_overlap"
            ]
        },
        "output": "frappe.get_value('Projects Settings', ['ignore_user_time_overlap', 'ignore_employee_time_overlap', 'ignore_workstation_time_overlap'])"
    },
    {
        "input": {
            "doctype": "Projects Settings",
            "question": "Is it possible to ignore workstation overlap in projects?",
            "fields": [
                "ignore_workstation_time_overlap"
            ]
        },
        "output": "frappe.get_value('Projects Settings', ['ignore_workstation_time_overlap'])"
    },
    {
        "input": {
            "doctype": "Mode of Payment Account",
            "question": "What is the default account used for payments in our company?",
            "fields": [
                "company",
                "default_account"
            ]
        },
        "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
    },
    {
        "input": {
            "doctype": "Mode of Payment Account",
            "question": "Show me the mapping between company and its payment account.",
            "fields": [
                "company",
                "default_account"
            ]
        },
        "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
    },
    {
        "input": {
            "doctype": "Mode of Payment Account",
            "question": "Where can I set the default account for a specific mode of payment?",
            "fields": [
                "company",
                "default_account"
            ]
        },
        "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
    },
    {
        "input": {
            "doctype": "Mode of Payment Account",
            "question": "Which account is linked to our payment gateway for ABC Ltd.?",
            "fields": [
                "company",
                "default_account"
            ]
        },
        "output": "frappe.get_list('Mode of Payment Account', {'company': 'ABC Ltd.'}, ['company', 'default_account'])"
    },
    {
        "input": {
            "doctype": "Mode of Payment Account",
            "question": "Can I assign a different default account per company for payments?",
            "fields": [
                "company",
                "default_account"
            ]
        },
        "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
    },
    {
        "input": {
            "doctype": "Mode of Payment Account",
            "question": "Is there a separate default payment account for each business unit?",
            "fields": [
                "company",
                "default_account"
            ]
        },
        "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
    },
    {
        "input": {
            "doctype": "Mode of Payment Account",
            "question": "How are default payment accounts configured per company?",
            "fields": [
                "company",
                "default_account"
            ]
        },
        "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
    },
    {
        "input": {
            "doctype": "Mode of Payment Account",
            "question": "List all mode of payment accounts set up for my organization.",
            "fields": [
                "company",
                "default_account"
            ]
        },
        "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
    },
    {
        "input": {
            "doctype": "Mode of Payment Account",
            "question": "Do we have default accounts assigned for each payment mode?",
            "fields": [
                "company",
                "default_account"
            ]
        },
        "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
    },
    {
        "input": {
            "doctype": "Mode of Payment Account",
            "question": "Can I configure payment accounts for multiple companies?",
            "fields": [
                "company",
                "default_account"
            ]
        },
        "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
    },
    {
        "input": {
            "doctype": "Mode of Payment Account",
            "question": "Where are company-specific payment accounts managed?",
            "fields": [
                "company",
                "default_account"
            ]
        },
        "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
    },
    {
        "input": {
            "doctype": "Mode of Payment Account",
            "question": "Is there a mapping between company and payment ledger?",
            "fields": [
                "company",
                "default_account"
            ]
        },
        "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
    },
    {
        "input": {
            "doctype": "Item Variant Settings",
            "question": "Where can I prevent automatic updates to item variants on save?",
            "fields": [
                "do_not_update_variants"
            ]
        },
        "output": "frappe.get_value('Item Variant Settings', ['do_not_update_variants'])"
    },
    {
        "input": {
            "doctype": "Item Variant Settings",
            "question": "How do I allow renaming of attribute values in item variants?",
            "fields": [
                "allow_rename_attribute_value"
            ]
        },
        "output": "frappe.get_value('Item Variant Settings', ['allow_rename_attribute_value'])"
    },
    {
        "input": {
            "doctype": "Item Variant Settings",
            "question": "Is there a way to stop variant updates during item changes?",
            "fields": [
                "do_not_update_variants"
            ]
        },
        "output": "frappe.get_value('Item Variant Settings', ['do_not_update_variants'])"
    },
    {
        "input": {
            "doctype": "Item Variant Settings",
            "question": "Which settings control behavior of item variants in ERPNext?",
            "fields": [
                "do_not_update_variants",
                "allow_rename_attribute_value",
                "copy_fields_to_variant"
            ]
        },
        "output": "frappe.get_value('Item Variant Settings', ['do_not_update_variants', 'allow_rename_attribute_value', 'copy_fields_to_variant'])"
    },
    {
        "input": {
            "doctype": "Item Variant Settings",
            "question": "Where do I configure allowed variant fields for item templates?",
            "fields": [
                "fields"
            ]
        },
        "output": "frappe.get_value('Item Variant Settings', ['fields'])"
    },
    {
        "input": {
            "doctype": "Item Variant Settings",
            "question": "What happens if I uncheck auto-update for item variants?",
            "fields": [
                "do_not_update_variants"
            ]
        },
        "output": "frappe.get_value('Item Variant Settings', ['do_not_update_variants'])"
    },
    {
        "input": {
            "doctype": "Item Variant Settings",
            "question": "Can I manage which fields affect item variant generation?",
            "fields": [
                "copy_fields_to_variant"
            ]
        },
        "output": "frappe.get_value('Item Variant Settings', ['copy_fields_to_variant'])"
    },
    {
        "input": {
            "doctype": "Item Variant Settings",
            "question": "Where can I view or change item variant field mappings?",
            "fields": [
                "fields"
            ]
        },
        "output": "frappe.get_value('Item Variant Settings', ['fields'])"
    },
    {
        "input": {
            "doctype": "Item Variant Settings",
            "question": "How to avoid triggering variant update logic in item master?",
            "fields": [
                "do_not_update_variants"
            ]
        },
        "output": "frappe.get_value('Item Variant Settings', ['do_not_update_variants'])"
    },
    {
        "input": {
            "doctype": "Item Variant Settings",
            "question": "Can we customize field selection logic for item variants?",
            "fields": [
                "fields"
            ]
        },
        "output": "frappe.get_value('Item Variant Settings', ['fields'])"
    },
    {
        "input": {
            "doctype": "Item Variant Settings",
            "question": "Which settings influence how variants behave after attribute changes?",
            "fields": [
                "do_not_update_variants"
            ]
        },
        "output": "frappe.get_value('Item Variant Settings', ['do_not_update_variants'])"
    },
    {
        "input": {
            "doctype": "Item Variant Settings",
            "question": "Where do I set which fields update across item variants?",
            "fields": [
                "copy_fields_to_variant"
            ]
        },
        "output": "frappe.get_value('Item Variant Settings', ['copy_fields_to_variant'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "Can I see the contract checklist that was amended from another version?",
            "fields": [
                "amended_from",
                "requirement"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'amended_from': 1}, ['amended_from', 'requirement'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "Are there any notes attached to the completed contract tasks?",
            "fields": [
                "fulfilled",
                "cb_notes",
                "notes"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 1}, ['fulfilled', 'cb_notes', 'notes'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "Is there a way to track checklist items carried over from a previous contract?",
            "fields": [
                "amended_from",
                "requirement"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'amended_from': 1}, ['amended_from', 'requirement'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "Show me the full contract fulfilment checklist and their statuses.",
            "fields": [
                "requirement",
                "fulfilled",
                "notes"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', ['requirement', 'fulfilled', 'notes'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "What checklist items are still pending fulfilment for the contract?",
            "fields": [
                "requirement",
                "fulfilled"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 0}, ['requirement', 'fulfilled'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "Which contract fulfilment entries have no notes added yet?",
            "fields": [
                "requirement",
                "notes"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'notes': ''}, ['requirement', 'notes'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "Which requirements have already been fulfilled for this contract?",
            "fields": [
                "fulfilled",
                "requirement"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 1}, ['fulfilled', 'requirement'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "Can I check off fulfilled tasks in the contract fulfilment checklist?",
            "fields": [
                "fulfilled",
                "cb_notes"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 1}, ['fulfilled', 'cb_notes'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "Where can I review all pending contract requirements?",
            "fields": [
                "requirement",
                "fulfilled"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 0}, ['requirement', 'fulfilled'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "List all the notes added for unfulfilled contract requirements.",
            "fields": [
                "notes",
                "requirement"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 0}, ['notes', 'requirement'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "How do I update notes for a contract requirement that\u2019s still pending?",
            "fields": [
                "notes",
                "fulfilled",
                "requirement"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 0}, ['notes', 'fulfilled', 'requirement'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "Which contract checklist items have been marked as fulfilled?",
            "fields": [
                "requirement",
                "fulfilled"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 1}, ['requirement', 'fulfilled'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "Can I see the contract checklist that was amended from another version?",
            "fields": [
                "amended_from",
                "requirement"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'amended_from': 1}, ['amended_from', 'requirement'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "Are there any notes attached to the completed contract tasks?",
            "fields": [
                "fulfilled",
                "cb_notes",
                "notes"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 1}, ['fulfilled', 'cb_notes', 'notes'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "Is there a way to track checklist items carried over from a previous contract?",
            "fields": [
                "amended_from",
                "requirement"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'amended_from': 1}, ['amended_from', 'requirement'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "Show me the full contract fulfilment checklist and their statuses.",
            "fields": [
                "requirement",
                "fulfilled",
                "notes"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', ['requirement', 'fulfilled', 'notes'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "What checklist items are still pending fulfilment for the contract?",
            "fields": [
                "requirement",
                "fulfilled"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 0}, ['requirement', 'fulfilled'])"
    },
    {
        "input": {
            "doctype": "Contract Fulfilment Checklist",
            "question": "Which contract fulfilment entries have no notes added yet?",
            "fields": [
                "notes",
                "fulfilled"
            ]
        },
        "output": "frappe.get_list('Contract Fulfilment Checklist', {'notes': ''}, ['notes', 'fulfilled'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "What are the default fulfilment terms included in contract templates?",
            "fields": [
                "fulfilment_terms"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['fulfilment_terms'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "List all predefined requirements added in the contract template.",
            "fields": [
                "requirements"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['requirements'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "Can I define custom requirements for contract templates?",
            "fields": [
                "custom_requirements"
            ]
        },
        "output": "frappe.get_value('Contract Template Fulfilment Terms', ['custom_requirements'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "Where do I add fulfilment terms while designing a contract template?",
            "fields": [
                "fulfilment_terms"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['fulfilment_terms'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "Which section stores fulfilment requirements for contract templates?",
            "fields": [
                "section"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['section'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "Is there a way to view all requirement terms tied to templates?",
            "fields": [
                "requirement_terms"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['requirement_terms'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "How do I reuse requirement terms across different contract templates?",
            "fields": [
                "requirement_terms"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['requirement_terms'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "Can I copy fulfilment terms from one contract template to another?",
            "fields": [
                "fulfilment_terms"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['fulfilment_terms'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "What requirement terms are automatically included in contracts?",
            "fields": [
                "requirement_terms"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['requirement_terms'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "Show me the standard terms added in our contract template setups.",
            "fields": [
                "standard_terms"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['standard_terms'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "Where are template-specific contract fulfilment terms managed?",
            "fields": [
                "template_specific_terms"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['template_specific_terms'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "How are the contract template terms different from checklist items?",
            "fields": [
                "contract_terms",
                "checklist_items"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['contract_terms', 'checklist_items'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "What are the default fulfilment terms included in contract templates?",
            "fields": [
                "fulfilment_terms"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['fulfilment_terms'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "List all predefined requirements added in the contract template.",
            "fields": [
                "predefined_requirements"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['predefined_requirements'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "Can I define custom requirements for contract templates?",
            "fields": [
                "custom_requirements"
            ]
        },
        "output": "frappe.get_value('Contract Template Fulfilment Terms', ['custom_requirements'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "Where do I add fulfilment terms while designing a contract template?",
            "fields": [
                "fulfilment_terms"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['fulfilment_terms'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "Which section stores fulfilment requirements for contract templates?",
            "fields": [
                "section"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['section'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "Is there a way to view all requirement terms tied to templates?",
            "fields": [
                "requirement_terms"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['requirement_terms'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "How do I reuse requirement terms across different contract templates?",
            "fields": [
                "requirement_terms"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['requirement_terms'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "Can I copy fulfilment terms from one contract template to another?",
            "fields": [
                "fulfilment_terms"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['fulfilment_terms'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "What requirement terms are automatically included in contracts?",
            "fields": [
                "requirement_terms"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['requirement_terms'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "Show me the standard terms added in our contract template setups.",
            "fields": [
                "standard_terms"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['standard_terms'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "Where are template-specific contract fulfilment terms managed?",
            "fields": [
                "template_specific_terms"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['template_specific_terms'])"
    },
    {
        "input": {
            "doctype": "Contract Template Fulfilment Terms",
            "question": "How are the contract template terms different from checklist items?",
            "fields": [
                "contract_terms",
                "checklist_items"
            ]
        },
        "output": "frappe.get_list('Contract Template Fulfilment Terms', ['contract_terms', 'checklist_items'])"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "Which UOM categories are mandatory during UOM conversion?",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.get_list('UOM Category', {'mandatory': 1}, ['category_name'])"
    },
    {
        "input": {
            "doctype": "UOM Category",
            "question": "Can I rename an existing UOM category without affecting items?",
            "fields": [
                "category_name"
            ]
        },
        "output": "frappe.get_list('UOM Category', ['category_name'])"
    },
    {
        "input": {
            "doctype": "Party Type",
            "question": "How can I configure party types like Customer or Supplier for transactions?",
            "fields": [
                "party_type",
                "account_type"
            ]
        },
        "output": "frappe.get_list('Party Type', ['party_type', 'account_type'])"
    },
    {
        "input": {
            "doctype": "Party Type",
            "question": "Which party types are linked with the Payable account type?",
            "fields": [
                "party_type",
                "account_type"
            ]
        },
        "output": "frappe.get_list('Party Type', {'account_type': 'Payable'}, ['party_type', 'account_type'])"
    },
    {
        "input": {
            "doctype": "Party Type",
            "question": "Show all party types set up in the ERP system.",
            "fields": [
                "party_type",
                "account_type"
            ]
        },
        "output": "frappe.get_list('Party Type', ['party_type', 'account_type'])"
    },
    {
        "input": {
            "doctype": "Party Type",
            "question": "Is there a party type defined for Employees in the chart of accounts?",
            "fields": [
                "party_type"
            ]
        },
        "output": "frappe.get_list('Party Type', {'party_type': 'Employee'}, ['party_type'])"
    },
    {
        "input": {
            "doctype": "Party Type",
            "question": "Which party type is associated with the Receivable account group?",
            "fields": [
                "party_type",
                "account_type"
            ]
        },
        "output": "frappe.get_list('Party Type', {'account_type': 'Receivable'}, ['party_type', 'account_type'])"
    },
    {
        "input": {
            "doctype": "Party Type",
            "question": "Can I map a new party type to both Payable and Receivable accounts?",
            "fields": [
                "party_type",
                "account_type"
            ]
        },
        "output": "frappe.get_list('Party Type', {'account_type': ['Payable', 'Receivable']}, ['party_type', 'account_type'])"
    },
    {
        "input": {
            "doctype": "Party Type",
            "question": "Where do I define account types for different party types?",
            "fields": [
                "party_type",
                "account_type"
            ]
        },
        "output": "frappe.get_list('Party Type', ['party_type', 'account_type'])"
    },
    {
        "input": {
            "doctype": "Party Type",
            "question": "Do we have any party type other than Customer or Supplier configured?",
            "fields": [
                "party_type"
            ]
        },
        "output": "frappe.get_list('Party Type', {'party_type': {'$nin': ['Customer', 'Supplier']}}, ['party_type'])"
    },
    {
        "input": {
            "doctype": "Party Type",
            "question": "What account type is assigned to party type 'Shareholder'?",
            "fields": [
                "party_type",
                "account_type"
            ]
        },
        "output": "frappe.get_list('Party Type', {'party_type': 'Shareholder'}, ['party_type', 'account_type'])"
    },
    {
        "input": {
            "doctype": "Party Type",
            "question": "List all party types and their associated account types.",
            "fields": [
                "party_type",
                "account_type"
            ]
        },
        "output": "frappe.get_list('Party Type', ['party_type', 'account_type'])"
    },
    {
        "input": {
            "doctype": "Party Type",
            "question": "How is the default account type decided for each party type?",
            "fields": [
                "party_type",
                "account_type"
            ]
        },
        "output": "frappe.get_list('Party Type', ['party_type', 'account_type'])"
    },
    {
        "input": {
            "doctype": "Party Type",
            "question": "Where can I edit the account type for a specific party type?",
            "fields": [
                "party_type",
                "account_type"
            ]
        },
        "output": "frappe.get_list('Party Type', ['party_type', 'account_type'])"
    },
    {
        "input": {
            "doctype": "Routing",
            "question": "Where can I define or manage the routing steps for manufacturing operations?",
            "fields": [
                "routing_name",
                "operations"
            ]
        },
        "output": "frappe.get_list('Routing', ['routing_name', 'operations'])"
    },
    {
        "input": {
            "doctype": "Routing",
            "question": "Can I see the list of routings that are currently disabled?",
            "fields": [
                "routing_name",
                "disabled"
            ]
        },
        "output": "frappe.get_list('Routing', {'disabled': 1}, ['routing_name', 'disabled'])"
    },
    {
        "input": {
            "doctype": "Routing",
            "question": "What is the routing name used for assembling the new generator unit?",
            "fields": [
                "routing_name"
            ]
        },
        "output": "frappe.get_list('Routing', {'routing_name': 'Generator Assembly'}, ['routing_name'])"
    },
    {
        "input": {
            "doctype": "Routing",
            "question": "Which document stores the operation flow used in a BOM process?",
            "fields": [
                "operations"
            ]
        },
        "output": "frappe.get_list('Routing', ['operations'])"
    },
    {
        "input": {
            "doctype": "Routing",
            "question": "Is there a way to deactivate a routing without deleting it?",
            "fields": [
                "routing_name",
                "disabled"
            ]
        },
        "output": "frappe.get_list('Routing', {'disabled': 1}, ['routing_name', 'disabled'])"
    },
    {
        "input": {
            "doctype": "Routing",
            "question": "Where do I view all BOM operations linked to a specific routing?",
            "fields": [
                "routing_name",
                "operations"
            ]
        },
        "output": "frappe.get_list('Routing', ['routing_name', 'operations'])"
    },
    {
        "input": {
            "doctype": "Routing",
            "question": "What ERP record helps organize the sequence of manufacturing tasks?",
            "fields": [
                "routing_name",
                "operations"
            ]
        },
        "output": "frappe.get_list('Routing', ['routing_name', 'operations'])"
    },
    {
        "input": {
            "doctype": "Routing",
            "question": "Show me the routing used for our engine assembly line.",
            "fields": [
                "routing_name"
            ]
        },
        "output": "frappe.get_list('Routing', {'routing_name': 'Engine Assembly'}, ['routing_name'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "Where can I define the types of shares available for employees or users?",
            "fields": [
                "title",
                "description"
            ]
        },
        "output": "frappe.get_list('Share Type', ['title', 'description'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "I need to update the description of a specific share type. Where do I do that?",
            "fields": [
                "title",
                "description"
            ]
        },
        "output": "frappe.get_list('Share Type', ['title', 'description'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "Show me all the share types we\u2019ve created in the system.",
            "fields": [
                "title",
                "description"
            ]
        },
        "output": "frappe.get_list('Share Type', ['title', 'description'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "Can I add a long description to a share type to explain its purpose?",
            "fields": [
                "title",
                "description"
            ]
        },
        "output": "frappe.get_list('Share Type', ['title', 'description'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "How do I create a new share type with a specific title?",
            "fields": [
                "title",
                "description"
            ]
        },
        "output": "frappe.get_list('Share Type', ['title', 'description'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "What doctype stores information about different types of shares we assign?",
            "fields": [
                "title",
                "description"
            ]
        },
        "output": "frappe.get_list('Share Type', ['title', 'description'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "Is there a section to describe the purpose of each share type?",
            "fields": [
                "title",
                "description"
            ]
        },
        "output": "frappe.get_list('Share Type', ['title', 'description'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "Where can I maintain the master list of share types in ERPNext?",
            "fields": [
                "title",
                "description"
            ]
        },
        "output": "frappe.get_list('Share Type', ['title', 'description'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "Can I list all titles of the share types defined in our system?",
            "fields": [
                "title"
            ]
        },
        "output": "frappe.get_list('Share Type', ['title'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "How do I view or edit a share type\u2019s details like name and description?",
            "fields": [
                "title",
                "description"
            ]
        },
        "output": "frappe.get_list('Share Type', ['title', 'description'])"
    },
    {
        "input": {
            "doctype": "BOM Update Tool",
            "question": "How do I replace an old BOM with a new one across items?",
            "fields": [
                "current_bom",
                "new_bom"
            ]
        },
        "output": "frappe.get_list('BOM Update Tool', ['current_bom', 'new_bom'])"
    },
    {
        "input": {
            "doctype": "BOM Update Tool",
            "question": "Is there a tool that lets me update BOMs in bulk?",
            "fields": [
                "current_bom",
                "new_bom"
            ]
        },
        "output": "frappe.get_list('BOM Update Tool', ['current_bom', 'new_bom'])"
    },
    {
        "input": {
            "doctype": "BOM Update Tool",
            "question": "Which doctype allows me to assign a new BOM to replace the existing one?",
            "fields": [
                "current_bom",
                "new_bom"
            ]
        },
        "output": "frappe.get_list('BOM Update Tool', ['current_bom', 'new_bom'])"
    },
    {
        "input": {
            "doctype": "Party Type",
            "question": "List all party types and their associated account types.",
            "fields": [
                "party_type",
                "account_type"
            ]
        },
        "output": "frappe.get_list('Party Type', ['party_type', 'account_type'])"
    },
    {
        "input": {
            "doctype": "Party Type",
            "question": "How is the default account type decided for each party type?",
            "fields": [
                "party_type",
                "account_type"
            ]
        },
        "output": "frappe.get_list('Party Type', ['party_type', 'account_type'])"
    },
    {
        "input": {
            "doctype": "Party Type",
            "question": "Where can I edit the account type for a specific party type?",
            "fields": [
                "party_type",
                "account_type"
            ]
        },
        "output": "frappe.get_list('Party Type', ['party_type', 'account_type'])"
    },
    {
        "input": {
            "doctype": "Routing",
            "question": "Where can I define or manage the routing steps for manufacturing operations?",
            "fields": [
                "routing_name",
                "operations"
            ]
        },
        "output": "frappe.get_list('Routing', ['routing_name', 'operations'])"
    },
    {
        "input": {
            "doctype": "Routing",
            "question": "Can I see the list of routings that are currently disabled?",
            "fields": [
                "routing_name",
                "disabled"
            ]
        },
        "output": "frappe.get_list('Routing', {'disabled': 1}, ['routing_name', 'disabled'])"
    },
    {
        "input": {
            "doctype": "Routing",
            "question": "What is the routing name used for assembling the new generator unit?",
            "fields": [
                "routing_name"
            ]
        },
        "output": "frappe.get_list('Routing', {'routing_name': 'new generator unit'}, ['routing_name'])"
    },
    {
        "input": {
            "doctype": "Routing",
            "question": "Which document stores the operation flow used in a BOM process?",
            "fields": [
                "routing_name",
                "operations"
            ]
        },
        "output": "frappe.get_list('Routing', {'operations': 'BOM process'}, ['routing_name', 'operations'])"
    },
    {
        "input": {
            "doctype": "Routing",
            "question": "Is there a way to deactivate a routing without deleting it?",
            "fields": [
                "routing_name",
                "disabled"
            ]
        },
        "output": "frappe.get_list('Routing', {'disabled': 1}, ['routing_name', 'disabled'])"
    },
    {
        "input": {
            "doctype": "Routing",
            "question": "Where do I view all BOM operations linked to a specific routing?",
            "fields": [
                "routing_name",
                "operations"
            ]
        },
        "output": "frappe.get_list('Routing', {'routing_name': 'specific routing'}, ['routing_name', 'operations'])"
    },
    {
        "input": {
            "doctype": "Routing",
            "question": "What ERP record helps organize the sequence of manufacturing tasks?",
            "fields": [
                "routing_name",
                "operations"
            ]
        },
        "output": "frappe.get_list('Routing', ['routing_name', 'operations'])"
    },
    {
        "input": {
            "doctype": "Routing",
            "question": "Show me the routing used for our engine assembly line.",
            "fields": [
                "routing_name"
            ]
        },
        "output": "frappe.get_list('Routing', {'routing_name': 'engine assembly line'}, ['routing_name'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "Where can I define the types of shares available for employees or users?",
            "fields": [
                "title",
                "description"
            ]
        },
        "output": "frappe.get_list('Share Type', ['title', 'description'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "I need to update the description of a specific share type. Where do I do that?",
            "fields": [
                "title",
                "description"
            ]
        },
        "output": "frappe.get_list('Share Type', ['title', 'description'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "Show me all the share types we\u2019ve created in the system.",
            "fields": [
                "title",
                "description"
            ]
        },
        "output": "frappe.get_list('Share Type', ['title', 'description'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "Can I add a long description to a share type to explain its purpose?",
            "fields": [
                "title",
                "description"
            ]
        },
        "output": "frappe.get_list('Share Type', ['title', 'description'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "How do I create a new share type with a specific title?",
            "fields": [
                "title",
                "description"
            ]
        },
        "output": "frappe.get_list('Share Type', ['title', 'description'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "What doctype stores information about different types of shares we assign?",
            "fields": [
                "title",
                "description"
            ]
        },
        "output": "frappe.get_list('Share Type', ['title', 'description'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "Is there a section to describe the purpose of each share type?",
            "fields": [
                "title",
                "description"
            ]
        },
        "output": "frappe.get_list('Share Type', ['title', 'description'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "Where can I maintain the master list of share types in ERPNext?",
            "fields": [
                "title",
                "description"
            ]
        },
        "output": "frappe.get_list('Share Type', ['title', 'description'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "Can I list all titles of the share types defined in our system?",
            "fields": [
                "title"
            ]
        },
        "output": "frappe.get_list('Share Type', ['title'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "How do I view or edit a share type\u2019s details like name and description?",
            "fields": [
                "title",
                "description"
            ]
        },
        "output": "frappe.get_list('Share Type', ['title', 'description'])"
    },
    {
        "input": {
            "doctype": "BOM Update Tool",
            "question": "How do I replace an old BOM with a new one across items?",
            "fields": [
                "current_bom",
                "new_bom",
                "replace"
            ]
        },
        "output": "frappe.get_list('BOM Update Tool', ['current_bom', 'new_bom', 'replace'])"
    },
    {
        "input": {
            "doctype": "BOM Update Tool",
            "question": "Is there a tool that lets me update BOMs in bulk?",
            "fields": [
                "replace_bom_section",
                "current_bom",
                "new_bom"
            ]
        },
        "output": "frappe.get_list('BOM Update Tool', ['replace_bom_section', 'current_bom', 'new_bom'])"
    },
    {
        "input": {
            "doctype": "BOM Update Tool",
            "question": "Which doctype allows me to assign a new BOM to replace the existing one?",
            "fields": [
                "replace_bom_section",
                "current_bom",
                "new_bom"
            ]
        },
        "output": "frappe.get_list('BOM Update Tool', ['replace_bom_section', 'current_bom', 'new_bom'])"
    },
    {
        "input": {
            "doctype": "BOM Update Tool",
            "question": "Where can I update all BOMs to reflect the latest price data?",
            "fields": [
                "update_cost_section",
                "update_latest_price_in_all_boms"
            ]
        },
        "output": "frappe.get_list('BOM Update Tool', ['update_cost_section', 'update_latest_price_in_all_boms'])"
    },
    {
        "input": {
            "doctype": "BOM Update Tool",
            "question": "Can I select a new BOM and automatically replace it across items?",
            "fields": [
                "current_bom",
                "new_bom",
                "replace"
            ]
        },
        "output": "frappe.get_list('BOM Update Tool', ['current_bom', 'new_bom', 'replace'])"
    },
    {
        "input": {
            "doctype": "BOM Update Tool",
            "question": "What tool allows replacing one BOM with another in the system?",
            "fields": [
                "current_bom",
                "new_bom",
                "replace"
            ]
        },
        "output": "frappe.get_list('BOM Update Tool', ['current_bom', 'new_bom', 'replace'])"
    },
    {
        "input": {
            "doctype": "BOM Update Tool",
            "question": "Is there a utility to update BOM references and refresh their prices?",
            "fields": [
                "update_cost_section",
                "update_latest_price_in_all_boms"
            ]
        },
        "output": "frappe.get_list('BOM Update Tool', ['update_cost_section', 'update_latest_price_in_all_boms'])"
    },
    {
        "input": {
            "doctype": "BOM Update Tool",
            "question": "How do I switch to a newer BOM version across multiple records?",
            "fields": [
                "current_bom",
                "new_bom",
                "replace"
            ]
        },
        "output": "frappe.get_list('BOM Update Tool', ['current_bom', 'new_bom', 'replace'])"
    },
    {
        "input": {
            "doctype": "BOM Update Tool",
            "question": "Can I replace BOMs in bulk without editing each item manually?",
            "fields": [
                "current_bom",
                "new_bom",
                "replace"
            ]
        },
        "output": "frappe.get_list('BOM Update Tool', ['current_bom', 'new_bom', 'replace'])"
    },
    {
        "input": {
            "doctype": "BOM Update Tool",
            "question": "Show me where I can change the default BOMs using a batch action.",
            "fields": [
                "replace_bom_section",
                "current_bom",
                "new_bom"
            ]
        },
        "output": "frappe.get_list('BOM Update Tool', ['replace_bom_section', 'current_bom', 'new_bom'])"
    },
    {
        "input": {
            "doctype": "Linked Location",
            "question": "How do I link a new warehouse or site location to the system?",
            "fields": [
                "location"
            ]
        },
        "output": "frappe.get_list('Linked Location', ['location'])"
    },
    {
        "input": {
            "doctype": "Linked Location",
            "question": "Can I see all the physical locations we've linked in ERPNext?",
            "fields": [
                "location"
            ]
        },
        "output": "frappe.get_list('Linked Location', ['location'])"
    },
    {
        "input": {
            "doctype": "Linked Location",
            "question": "Which document links each location to our logistics structure?",
            "fields": [
                "location"
            ]
        },
        "output": "frappe.get_list('Linked Location', ['location'])"
    },
    {
        "input": {
            "doctype": "Linked Location",
            "question": "Where can I configure location references used across modules?",
            "fields": [
                "location"
            ]
        },
        "output": "frappe.get_list('Linked Location', ['location'])"
    },
    {
        "input": {
            "doctype": "Linked Location",
            "question": "Is there a document where I can add or modify linked warehouse locations?",
            "fields": [
                "location"
            ]
        },
        "output": "frappe.get_list('Linked Location', ['location'])"
    },
    {
        "input": {
            "doctype": "Linked Location",
            "question": "I want to track transactions based on site locations. Where should I link them?",
            "fields": [
                "location"
            ]
        },
        "output": "frappe.get_list('Linked Location', ['location'])"
    },
    {
        "input": {
            "doctype": "Linked Location",
            "question": "How are locations mapped to transactions or users?",
            "fields": [
                "location"
            ]
        },
        "output": "frappe.get_list('Linked Location', ['location'])"
    },
    {
        "input": {
            "doctype": "Linked Location",
            "question": "Where do we store linked addresses or logistics points?",
            "fields": [
                "location"
            ]
        },
        "output": "frappe.get_list('Linked Location', ['location'])"
    },
    {
        "input": {
            "doctype": "Linked Location",
            "question": "Is there a setup to associate records with a specific warehouse location?",
            "fields": [
                "location"
            ]
        },
        "output": "frappe.get_list('Linked Location', ['location'])"
    },
    {
        "input": {
            "doctype": "Linked Location",
            "question": "Can I create a location link for a new service site?",
            "fields": [
                "location"
            ]
        },
        "output": "frappe.get_list('Linked Location', ['location'])"
    },
    {
        "input": {
            "doctype": "Linked Location",
            "question": "How do I manage the list of locations linked to a document type?",
            "fields": [
                "location"
            ]
        },
        "output": "frappe.get_list('Linked Location', ['location'])"
    },
    {
        "input": {
            "doctype": "Linked Location",
            "question": "Where are location links configured in ERPNext?",
            "fields": [
                "location"
            ]
        },
        "output": "frappe.get_list('Linked Location', ['location'])"
    },
    {
        "input": {
            "doctype": "Support Search Source",
            "question": "Where can I configure external sources to fetch support content from?",
            "fields": [
                "source",
                "query_route",
                "response_path"
            ]
        },
        "output": "frappe.get_list('Support Search Source', ['source', 'query_route', 'response_path'])"
    },
    {
        "input": {
            "doctype": "Support Search Source",
            "question": "I want to connect an API as a support data source. Where do I set that up?",
            "fields": [
                "source",
                "query_route",
                "response_path"
            ]
        },
        "output": "frappe.get_list('Support Search Source', ['source', 'query_route', 'response_path'])"
    },
    {
        "input": {
            "doctype": "Support Search Source",
            "question": "How do I add a search source with a custom query route and response path?",
            "fields": [
                "source",
                "query_route",
                "response_path"
            ]
        },
        "output": "frappe.get_list('Support Search Source', ['source', 'query_route', 'response_path'])"
    },
    {
        "input": {
            "doctype": "Currency Exchange",
            "question": "What was the USD to EUR exchange rate last Friday?",
            "fields": [
                "from_currency",
                "to_currency",
                "exchange_rate",
                "date"
            ]
        },
        "output": "frappe.get_list('Currency Exchange', {'from_currency': 'USD', 'to_currency': 'EUR'}, ['exchange_rate', 'date'])"
    },
    {
        "input": {
            "doctype": "Currency Exchange",
            "question": "Can I view the exchange rate used for buying GBP on 2024-12-15?",
            "fields": [
                "from_currency",
                "to_currency",
                "exchange_rate",
                "date",
                "for_buying"
            ]
        },
        "output": "frappe.get_list('Currency Exchange', {'from_currency': 'GBP', 'to_currency': 'USD', 'date': '2024-12-15', 'for_buying': 1}, ['exchange_rate'])"
    },
    {
        "input": {
            "doctype": "Currency Exchange",
            "question": "How do we define currency exchange rates for selling transactions?",
            "fields": [
                "from_currency",
                "to_currency",
                "exchange_rate",
                "for_selling"
            ]
        },
        "output": "frappe.get_list('Currency Exchange', {'for_selling': 1}, ['from_currency', 'to_currency', 'exchange_rate'])"
    },
    {
        "input": {
            "doctype": "Currency Exchange",
            "question": "Show all recorded currency exchange rates involving INR.",
            "fields": [
                "from_currency",
                "to_currency",
                "exchange_rate",
                "date"
            ]
        },
        "output": "frappe.get_list('Currency Exchange', {'from_currency': 'INR'}, ['from_currency', 'to_currency', 'exchange_rate', 'date'])"
    },
    {
        "input": {
            "doctype": "Currency Exchange",
            "question": "What is the latest exchange rate from AED to USD?",
            "fields": [
                "from_currency",
                "to_currency",
                "exchange_rate",
                "date"
            ]
        },
        "output": "frappe.get_list('Currency Exchange', {'from_currency': 'AED', 'to_currency': 'USD'}, ['exchange_rate', 'date'])"
    },
    {
        "input": {
            "doctype": "Currency Exchange",
            "question": "Where can I update the exchange rate for EUR to JPY?",
            "fields": [
                "from_currency",
                "to_currency",
                "exchange_rate"
            ]
        },
        "output": "frappe.get_list('Currency Exchange', {'from_currency': 'EUR', 'to_currency': 'JPY'}, ['exchange_rate'])"
    },
    {
        "input": {
            "doctype": "Currency Exchange",
            "question": "Is there a way to set separate rates for buying and selling currencies?",
            "fields": [
                "from_currency",
                "to_currency",
                "exchange_rate",
                "for_buying",
                "for_selling"
            ]
        },
        "output": "frappe.get_list('Currency Exchange', {'for_buying': 1, 'for_selling': 1}, ['from_currency', 'to_currency', 'exchange_rate'])"
    },
    {
        "input": {
            "doctype": "Currency Exchange",
            "question": "List all exchange rates recorded for transactions dated April 1st, 2025.",
            "fields": [
                "from_currency",
                "to_currency",
                "exchange_rate",
                "date"
            ]
        },
        "output": "frappe.get_list('Currency Exchange', {'date': '2025-04-01'}, ['from_currency', 'to_currency', 'exchange_rate'])"
    },
    {
        "input": {
            "doctype": "Currency Exchange",
            "question": "How do we manage historical exchange rates in the system?",
            "fields": [
                "from_currency",
                "to_currency",
                "exchange_rate",
                "date"
            ]
        },
        "output": "frappe.get_list('Currency Exchange', {}, ['from_currency', 'to_currency', 'exchange_rate', 'date'])"
    },
    {
        "input": {
            "doctype": "Currency Exchange",
            "question": "Has the system captured any exchange rate for SGD to MYR recently?",
            "fields": [
                "from_currency",
                "to_currency",
                "exchange_rate",
                "date"
            ]
        },
        "output": "frappe.get_list('Currency Exchange', {'from_currency': 'SGD', 'to_currency': 'MYR'}, ['exchange_rate', 'date'])"
    },
    {
        "input": {
            "doctype": "Currency Exchange",
            "question": "Which currency pairs have exchange rates defined for both buying and selling?",
            "fields": [
                "from_currency",
                "to_currency",
                "exchange_rate",
                "for_buying",
                "for_selling"
            ]
        },
        "output": "frappe.get_list('Currency Exchange', {'for_buying': 1, 'for_selling': 1}, ['from_currency', 'to_currency', 'exchange_rate'])"
    },
    {
        "input": {
            "doctype": "Currency Exchange",
            "question": "Where can I find daily exchange rate updates in ERPNext?",
            "fields": [
                "from_currency",
                "to_currency",
                "exchange_rate",
                "date"
            ]
        },
        "output": "frappe.get_list('Currency Exchange', {}, ['from_currency', 'to_currency', 'exchange_rate', 'date'])"
    },
    {
        "input": {
            "doctype": "Asset Category Account",
            "question": "Which accounts are used for fixed assets in ABC Corp?",
            "fields": [
                "company_name",
                "fixed_asset_account",
                "accumulated_depreciation_account",
                "depreciation_expense_account",
                "capital_work_in_progress_account"
            ]
        },
        "output": "frappe.get_list('Asset Category Account', {'company_name': 'ABC Corp'}, ['fixed_asset_account', 'accumulated_depreciation_account', 'depreciation_expense_account', 'capital_work_in_progress_account'])"
    },
    {
        "input": {
            "doctype": "Asset Category Account",
            "question": "Where can I find the depreciation expense account linked to an asset category?",
            "fields": [
                "depreciation_expense_account"
            ]
        },
        "output": "frappe.get_list('Asset Category Account', {}, ['depreciation_expense_account'])"
    },
    {
        "input": {
            "doctype": "Asset Category Account",
            "question": "Does each company have its own fixed asset account setup?",
            "fields": [
                "company_name",
                "fixed_asset_account"
            ]
        },
        "output": "frappe.get_list('Asset Category Account', {}, ['company_name', 'fixed_asset_account'])"
    },
    {
        "input": {
            "doctype": "Asset Category Account",
            "question": "Which account is used for capital work in progress under asset categories?",
            "fields": [
                "capital_work_in_progress_account"
            ]
        },
        "output": "frappe.get_list('Asset Category Account', {}, ['capital_work_in_progress_account'])"
    },
    {
        "input": {
            "doctype": "Asset Category Account",
            "question": "List all depreciation and accumulated depreciation accounts for asset groups.",
            "fields": [
                "depreciation_expense_account",
                "accumulated_depreciation_account"
            ]
        },
        "output": "frappe.get_list('Asset Category Account', {}, ['depreciation_expense_account', 'accumulated_depreciation_account'])"
    },
    {
        "input": {
            "doctype": "Asset Category Account",
            "question": "Can I review the company-wise mapping of fixed asset accounts?",
            "fields": [
                "company_name",
                "fixed_asset_account"
            ]
        },
        "output": "frappe.get_list('Asset Category Account', {}, ['company_name', 'fixed_asset_account'])"
    },
    {
        "input": {
            "doctype": "Asset Category Account",
            "question": "What account settings apply to asset purchases in XYZ Ltd?",
            "fields": [
                "company_name",
                "fixed_asset_account",
                "depreciation_expense_account"
            ]
        },
        "output": "frappe.get_list('Asset Category Account', {'company_name': 'XYZ Ltd'}, ['fixed_asset_account', 'depreciation_expense_account'])"
    },
    {
        "input": {
            "doctype": "Asset Category Account",
            "question": "Where are fixed asset account details stored for each company?",
            "fields": [
                "company_name",
                "fixed_asset_account"
            ]
        },
        "output": "frappe.get_list('Asset Category Account', {}, ['company_name', 'fixed_asset_account'])"
    },
    {
        "input": {
            "doctype": "Asset Category Account",
            "question": "Are depreciation accounts mandatory in asset category setup?",
            "fields": [
                "depreciation_expense_account"
            ]
        },
        "output": "frappe.get_list('Asset Category Account', {}, ['depreciation_expense_account'])"
    },
    {
        "input": {
            "doctype": "Asset Category Account",
            "question": "Which companies have both depreciation and capital work-in-progress accounts defined?",
            "fields": [
                "company_name",
                "depreciation_expense_account",
                "capital_work_in_progress_account"
            ]
        },
        "output": "frappe.get_list('Asset Category Account', {'depreciation_expense_account': ['!=', ''], 'capital_work_in_progress_account': ['!=', '']}, ['company_name', 'depreciation_expense_account', 'capital_work_in_progress_account'])"
    },
    {
        "input": {
            "doctype": "Asset Category Account",
            "question": "What fixed asset account is linked to our plant machinery?",
            "fields": [
                "fixed_asset_account"
            ]
        },
        "output": "frappe.get_list('Asset Category Account', {'fixed_asset_account': 'plant machinery'}, ['fixed_asset_account'])"
    },
    {
        "input": {
            "doctype": "Asset Category Account",
            "question": "How do I assign account heads for fixed assets in a new company?",
            "fields": [
                "company_name",
                "fixed_asset_account"
            ]
        },
        "output": "frappe.get_list('Asset Category Account', {'company_name': 'new company'}, ['fixed_asset_account'])"
    },
    {
        "input": {
            "doctype": "Support Search Source",
            "question": "Where do I define the base URL and parameters for a support API source?",
            "fields": [
                "base_url",
                "query_options_sb",
                "query_route"
            ]
        },
        "output": "frappe.get_list('Support Search Source', {}, ['base_url', 'query_options_sb', 'query_route'])"
    },
    {
        "input": {
            "doctype": "Support Search Source",
            "question": "Is there a way to pull search results dynamically from another system?",
            "fields": [
                "source_name",
                "source_type"
            ]
        },
        "output": "frappe.get_list('Support Search Source', {'source_type': 'dynamic'}, ['source_name', 'source_type'])"
    },
    {
        "input": {
            "doctype": "Support Search Source",
            "question": "Can I configure both GET and POST sources for support queries?",
            "fields": [
                "source_type",
                "query_route",
                "post_route"
            ]
        },
        "output": "frappe.get_list('Support Search Source', {'source_type': ['in', ['GET', 'POST']]}, ['source_type', 'query_route', 'post_route'])"
    },
    {
        "input": {
            "doctype": "Support Search Source",
            "question": "How can I customize the key fields to display in external search results?",
            "fields": [
                "result_title_field",
                "result_preview_field",
                "result_route_field"
            ]
        },
        "output": "frappe.get_list('Support Search Source', {}, ['result_title_field', 'result_preview_field', 'result_route_field'])"
    },
    {
        "input": {
            "doctype": "Support Search Source",
            "question": "Where is the post route key list defined for a support source?",
            "fields": [
                "post_route_key_list"
            ]
        },
        "output": "frappe.get_list('Support Search Source', {}, ['post_route_key_list'])"
    },
    {
        "input": {
            "doctype": "Support Search Source",
            "question": "Which doctype manages third-party support search endpoints?",
            "fields": [
                "source_doctype"
            ]
        },
        "output": "frappe.get_list('Support Search Source', {}, ['source_doctype'])"
    },
    {
        "input": {
            "doctype": "Support Search Source",
            "question": "Is there a field to define the title and preview fields for fetched results?",
            "fields": [
                "result_title_field",
                "result_preview_field"
            ]
        },
        "output": "frappe.get_list('Support Search Source', {}, ['result_title_field', 'result_preview_field'])"
    },
    {
        "input": {
            "doctype": "Support Search Source",
            "question": "Can I link a doctype to a support source and define its route behavior?",
            "fields": [
                "source_doctype",
                "query_route",
                "post_route"
            ]
        },
        "output": "frappe.get_list('Support Search Source', {}, ['source_doctype', 'query_route', 'post_route'])"
    },
    {
        "input": {
            "doctype": "Support Search Source",
            "question": "How can I map a query param and result key for a support source?",
            "fields": [
                "search_term_param_name",
                "response_result_key_path"
            ]
        },
        "output": "frappe.get_list('Support Search Source', {}, ['search_term_param_name', 'response_result_key_path'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "Is there a field for a text description of each share type?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Share Type', {}, ['description'])"
    },
    {
        "input": {
            "doctype": "Share Type",
            "question": "Which document stores the labels and notes for share classifications?",
            "fields": [
                "title",
                "description"
            ]
        },
        "output": "frappe.get_list('Share Type', {}, ['title', 'description'])"
    },
    {
        "input": {
            "doctype": "Routing",
            "question": "Can I assign multiple BOM operations under a single routing plan?",
            "fields": [
                "operations"
            ]
        },
        "output": "frappe.get_list('Routing', {}, ['operations'])"
    },
    {
        "input": {
            "doctype": "Routing",
            "question": "List all active routings available in the system.",
            "fields": [
                "routing_name",
                "disabled"
            ]
        },
        "output": "frappe.get_list('Routing', { 'disabled': 0 }, ['routing_name'])"
    },
    {
        "input": {
            "doctype": "Routing",
            "question": "How do I configure a routing for a new batch production?",
            "fields": [
                "routing_name",
                "operations"
            ]
        },
        "output": "frappe.get_list('Routing', {}, ['routing_name', 'operations'])"
    },
    {
        "input": {
            "doctype": "Routing",
            "question": "Where are the routing names and their operations recorded?",
            "fields": [
                "routing_name",
                "operations"
            ]
        },
        "output": "frappe.get_list('Routing', {}, ['routing_name', 'operations'])"
    },
    {
        "input": {
            "doctype": "Delivery Settings",
            "question": "Where do we configure the email template used for dispatch notifications?",
            "fields": [
                "dispatch_template"
            ]
        },
        "output": "frappe.get_value('Delivery Settings', {}, 'dispatch_template')"
    },
    {
        "input": {
            "doctype": "Delivery Settings",
            "question": "Can I check which print format is used as an attachment in delivery notifications?",
            "fields": [
                "dispatch_attachment"
            ]
        },
        "output": "frappe.get_value('Delivery Settings', {}, 'dispatch_attachment')"
    },
    {
        "input": {
            "doctype": "Delivery Settings",
            "question": "Is there a setting to send dispatch emails with attachments automatically?",
            "fields": [
                "send_with_attachment"
            ]
        },
        "output": "frappe.get_value('Delivery Settings', {}, 'send_with_attachment')"
    },
    {
        "input": {
            "doctype": "Delivery Settings",
            "question": "Where can I find the setting to delay between delivery stops during a trip?",
            "fields": [
                "stop_delay"
            ]
        },
        "output": "frappe.get_value('Delivery Settings', {}, 'stop_delay')"
    },
    {
        "input": {
            "doctype": "Delivery Settings",
            "question": "Which configuration determines if a dispatch email includes an attachment?",
            "fields": [
                "send_with_attachment"
            ]
        },
        "output": "frappe.get_value('Delivery Settings', {}, 'send_with_attachment')"
    },
    {
        "input": {
            "doctype": "Delivery Settings",
            "question": "Can I update the email format used to notify customers about delivery?",
            "fields": [
                "dispatch_template"
            ]
        },
        "output": "frappe.get_value('Delivery Settings', {}, 'dispatch_template')"
    },
    {
        "input": {
            "doctype": "Delivery Settings",
            "question": "Where do I define the number of minutes to wait between delivery stops?",
            "fields": [
                "stop_delay"
            ]
        },
        "output": "frappe.get_value('Delivery Settings', {}, 'stop_delay')"
    },
    {
        "input": {
            "doctype": "Delivery Settings",
            "question": "What controls whether we attach print formats to dispatch notification emails?",
            "fields": [
                "dispatch_attachment"
            ]
        },
        "output": "frappe.get_value('Delivery Settings', {}, 'dispatch_attachment')"
    },
    {
        "input": {
            "doctype": "Delivery Settings",
            "question": "How do I configure which print format is used during a delivery dispatch?",
            "fields": [
                "dispatch_template"
            ]
        },
        "output": "frappe.get_value('Delivery Settings', {}, 'dispatch_template')"
    },
    {
        "input": {
            "doctype": "Delivery Settings",
            "question": "Can we manage the timing gap between each stop in a delivery route?",
            "fields": [
                "stop_delay"
            ]
        },
        "output": "frappe.get_value('Delivery Settings', {}, 'stop_delay')"
    },
    {
        "input": {
            "doctype": "Bank Guarantee",
            "question": "Where do I record details of a provided bank guarantee linked to a customer project?",
            "fields": [
                "reference_doctype",
                "reference_docname",
                "project"
            ]
        },
        "output": "frappe.get_value('Bank Guarantee', {}, ['reference_doctype', 'reference_docname', 'project'])"
    },
    {
        "input": {
            "doctype": "Bank Guarantee",
            "question": "How can I capture the bank, bank account, and SWIFT number for a guarantee?",
            "fields": [
                "bank",
                "bank_account",
                "swift_number"
            ]
        },
        "output": "frappe.get_value('Bank Guarantee', {}, ['bank', 'bank_account', 'swift_number'])"
    },
    {
        "input": {
            "doctype": "Bank Guarantee",
            "question": "Is there a place to store the IBAN and branch code for bank guarantee processing?",
            "fields": [
                "iban",
                "branch_code"
            ]
        },
        "output": "frappe.get_value('Bank Guarantee', {}, ['iban', 'branch_code'])"
    },
    {
        "input": {
            "doctype": "Bank Guarantee",
            "question": "Where can I set the amount, start date, and validity of a bank guarantee?",
            "fields": [
                "amount",
                "start_date",
                "validity"
            ]
        },
        "output": "frappe.get_value('Bank Guarantee', {}, ['amount', 'start_date', 'validity'])"
    },
    {
        "input": {
            "doctype": "Bank Guarantee",
            "question": "Can I store clauses or additional terms related to the bank guarantee?",
            "fields": [
                "more_information"
            ]
        },
        "output": "frappe.get_value('Bank Guarantee', {}, 'more_information')"
    },
    {
        "input": {
            "doctype": "Bank Guarantee",
            "question": "Which document holds the reference to a supplier's fixed deposit and margin money?",
            "fields": [
                "fixed_deposit_number",
                "margin_money"
            ]
        },
        "output": "frappe.get_value('Bank Guarantee', {}, ['fixed_deposit_number', 'margin_money'])"
    },
    {
        "input": {
            "doctype": "Bank Guarantee",
            "question": "Where do I maintain the bank guarantee number and the name of the beneficiary?",
            "fields": [
                "bank_guarantee_number",
                "name_of_beneficiary"
            ]
        },
        "output": "frappe.get_value('Bank Guarantee', {}, ['bank_guarantee_number', 'name_of_beneficiary'])"
    },
    {
        "input": {
            "doctype": "Bank Guarantee",
            "question": "How can I track charges incurred for issuing a bank guarantee?",
            "fields": [
                "charges"
            ]
        },
        "output": "frappe.get_value('Bank Guarantee', {}, 'charges')"
    },
    {
        "input": {
            "doctype": "Bank Guarantee",
            "question": "Is there a form where I can input a dynamic reference to a project or invoice for the guarantee?",
            "fields": [
                "project",
                "reference_doctype",
                "reference_docname"
            ]
        },
        "output": "frappe.get_value('Bank Guarantee', {}, ['project', 'reference_doctype', 'reference_docname'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Factor",
            "question": "Where can I define how many boxes equal one pallet for a product category?",
            "fields": [
                "category",
                "from_uom",
                "to_uom"
            ]
        },
        "output": "frappe.get_value('UOM Conversion Factor', {'category': 'product'}, ['from_uom', 'to_uom'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Factor",
            "question": "How do I set up the conversion from kilograms to grams in a specific category?",
            "fields": [
                "category",
                "from_uom",
                "to_uom"
            ]
        },
        "output": "frappe.get_value('UOM Conversion Factor', {'category': 'Weight'}, ['from_uom', 'to_uom'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Factor",
            "question": "Can I create a rule to convert meters to centimeters under a UOM category?",
            "fields": [
                "category",
                "from_uom",
                "to_uom"
            ]
        },
        "output": "frappe.get_value('UOM Conversion Factor', {'category': 'Length'}, ['from_uom', 'to_uom'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Factor",
            "question": "Where do I input the factor to convert from cartons to units?",
            "fields": [
                "category",
                "from_uom",
                "to_uom"
            ]
        },
        "output": "frappe.get_value('UOM Conversion Factor', {'category': 'Packaging'}, ['from_uom', 'to_uom'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Factor",
            "question": "How is the conversion value defined between 'From' and 'To' UOMs?",
            "fields": [
                "from_uom",
                "to_uom",
                "value"
            ]
        },
        "output": "frappe.get_value('UOM Conversion Factor', {}, ['from_uom', 'to_uom', 'value'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Factor",
            "question": "Where can I specify a UOM conversion within the 'Weight' category?",
            "fields": [
                "category",
                "from_uom",
                "to_uom"
            ]
        },
        "output": "frappe.get_value('UOM Conversion Factor', {'category': 'Weight'}, ['from_uom', 'to_uom'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Factor",
            "question": "What document do I use to declare that 1 box equals 12 pieces?",
            "fields": [
                "category",
                "from_uom",
                "to_uom",
                "value"
            ]
        },
        "output": "frappe.get_value('UOM Conversion Factor', {'category': 'Packaging'}, ['from_uom', 'to_uom', 'value'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Factor",
            "question": "Can I map a conversion from dozens to units under a category?",
            "fields": [
                "category",
                "from_uom",
                "to_uom"
            ]
        },
        "output": "frappe.get_value('UOM Conversion Factor', {'category': 'Packaging'}, ['from_uom', 'to_uom'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Factor",
            "question": "Is there a place to manage all unit of measurement conversions by category?",
            "fields": [
                "category",
                "from_uom",
                "to_uom"
            ]
        },
        "output": "frappe.get_all('UOM Conversion Factor', filters={'category': 'Weight'}, fields=['from_uom', 'to_uom'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Factor",
            "question": "How do I enter the value to convert from gallons to liters?",
            "fields": [
                "category",
                "from_uom",
                "to_uom",
                "value"
            ]
        },
        "output": "frappe.get_all('UOM Conversion Factor', filters={'from_uom': 'gallons', 'to_uom': 'liters'}, fields=['value'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Factor",
            "question": "Which form holds the link between different units like 'kg' and 'lb'?",
            "fields": [
                "category",
                "from_uom",
                "to_uom",
                "value"
            ]
        },
        "output": "frappe.get_all('UOM Conversion Factor', filters={'from_uom': 'kg', 'to_uom': 'lb'}, fields=['value'])"
    },
    {
        "input": {
            "doctype": "UOM Conversion Factor",
            "question": "Can I update a conversion factor between pieces and packets?",
            "fields": [
                "category",
                "from_uom",
                "to_uom",
                "value"
            ]
        },
        "output": "frappe.get_all('UOM Conversion Factor', filters={'from_uom': 'pieces', 'to_uom': 'packets'}, fields=['value'])"
    },
    {
        "input": {
            "doctype": "Bank Guarantee",
            "question": "Which form captures whether the guarantee is for receiving or providing?",
            "fields": [
                "bg_type"
            ]
        },
        "output": "frappe.get_all('Bank Guarantee', fields=['name', 'bg_type'])"
    },
    {
        "input": {
            "doctype": "Bank Guarantee",
            "question": "Can I view or edit a previous version of a bank guarantee that was amended?",
            "fields": [
                "name",
                "amended_from"
            ]
        },
        "output": "frappe.get_all('Bank Guarantee', filters={'amended_from': ['!=', '']}, fields=['name', 'amended_from'])"
    },
    {
        "input": {
            "doctype": "Bank Guarantee",
            "question": "Where do we track bank guarantees tied to a specific customer or supplier?",
            "fields": [
                "customer",
                "supplier"
            ]
        },
        "output": "frappe.get_all('Bank Guarantee', filters=[['customer', '!=', ''], ['supplier', '!=', '']], fields=['name', 'customer', 'supplier'])"
    },
    {
        "input": {
            "doctype": "Delivery Settings",
            "question": "Where is the dispatch template for delivery trips configured?",
            "fields": [
                "dispatch_template"
            ]
        },
        "output": "frappe.get_single_value('Delivery Settings', 'dispatch_template')"
    },
    {
        "input": {
            "doctype": "Delivery Settings",
            "question": "How do we enable or disable sending delivery emails with attachments?",
            "fields": [
                "send_with_attachment"
            ]
        },
        "output": "frappe.get_single_value('Delivery Settings', 'send_with_attachment')"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "Where do I enter the Access Key ID for my cloud backup?",
            "fields": [
                "access_key_id"
            ]
        },
        "output": "frappe.get_single_value('S3 Backup Settings', 'access_key_id')"
    },
    {
        "input": {
            "doctype": "User Select Document Type",
            "question": "How can I select a document type for a user?",
            "fields": [
                "document_type"
            ]
        },
        "output": "frappe.get_all('User Select Document Type', fields=['user', 'document_type'])"
    },
    {
        "input": {
            "doctype": "Workspace Chart",
            "question": "How do I create a new workspace chart?",
            "fields": [
                "chart_name"
            ]
        },
        "output": "frappe.get_doc({'doctype': 'Workspace Chart', 'chart_name': 'New Chart'}).insert()"
    },
    {
        "input": {
            "doctype": "Workspace Chart",
            "question": "Can I add multiple charts to a single workspace?",
            "fields": [
                "chart_name"
            ]
        },
        "output": "frappe.get_all('Workspace Chart', fields=['chart_name'])"
    },
    {
        "input": {
            "doctype": "Workspace Chart",
            "question": "How do I customize the chart label in the workspace?",
            "fields": [
                "chart_name",
                "label"
            ]
        },
        "output": "frappe.get_all('Workspace Chart', fields=['chart_name', 'label'])"
    },
    {
        "input": {
            "doctype": "Workspace Chart",
            "question": "List all chart names defined in workspaces.",
            "fields": [
                "chart_name"
            ]
        },
        "output": "frappe.get_all('Workspace Chart', fields=['chart_name'])"
    },
    {
        "input": {
            "doctype": "Workspace Chart",
            "question": "Retrieve all chart names and labels from workspace charts.",
            "fields": [
                "chart_name",
                "label"
            ]
        },
        "output": "frappe.get_all('Workspace Chart', fields=['chart_name', 'label'])"
    },
    {
        "input": {
            "doctype": "Bank Clearance Detail",
            "question": "Get all payment entries that are still pending bank clearance.",
            "fields": [
                "reference_name",
                "clearance_date"
            ]
        },
        "output": "frappe.get_all('Bank Clearance Detail', filters={'clearance_date': ['is', 'null']}, fields=['reference_name'])"
    },
    {
        "input": {
            "doctype": "Bank Clearance Detail",
            "question": "Fetch all cleared cheques along with their clearance dates.",
            "fields": [
                "reference_name",
                "clearance_date"
            ]
        },
        "output": "frappe.get_all('Bank Clearance Detail', filters={'clearance_date': ['!=', '']}, fields=['reference_name', 'clearance_date'])"
    },
    {
        "input": {
            "doctype": "Bank Clearance Detail",
            "question": "How many cheques were issued this month?",
            "fields": [
                "cheque_date"
            ]
        },
        "output": "from frappe.utils import get_first_day, get_last_day, nowdate;\nfrappe.db.count('Bank Clearance Detail', filters={\n  'cheque_date': ['between', [get_first_day(nowdate()), get_last_day(nowdate())]]\n})"
    },
    {
        "input": {
            "doctype": "Bank Clearance Detail",
            "question": "Check if any payment entry is still awaiting clearance.",
            "fields": [
                "clearance_date"
            ]
        },
        "output": "frappe.db.exists('Bank Clearance Detail', {'clearance_date': ['is', 'null']})"
    },
    {
        "input": {
            "doctype": "Bank Clearance Detail",
            "question": "Fetch the total amount of payments posted on April 1st.",
            "fields": [
                "amount",
                "posting_date"
            ]
        },
        "output": "frappe.db.get_value('Bank Clearance Detail', {'posting_date': '2025-04-01'}, 'sum(amount)')"
    },
    {
        "input": {
            "doctype": "Bank Clearance Detail",
            "question": "List entries where cheque date and clearance date do not match.",
            "fields": [
                "cheque_date",
                "clearance_date",
                "payment_entry"
            ]
        },
        "output": "frappe.get_all('Bank Clearance Detail', filters=[['cheque_date', '!=', 'clearance_date']], fields=['payment_entry', 'cheque_date', 'clearance_date'])"
    },
    {
        "input": {
            "doctype": "Bank Clearance Detail",
            "question": "Get payment entries linked to a specific against account.",
            "fields": [
                "payment_entry",
                "against_account"
            ]
        },
        "output": "frappe.get_all('Bank Clearance Detail', filters={'against_account': 'Account XYZ'}, fields=['payment_entry', 'against_account'])"
    },
    {
        "input": {
            "doctype": "Item Alternative",
            "question": "Retrieve all alternative items available if a product is out of stock.",
            "fields": [
                "item_code",
                "alternative_item_code"
            ]
        },
        "output": "frappe.get_all('Item Alternative', fields=['item_code', 'alternative_item_code'])"
    },
    {
        "input": {
            "doctype": "Item Alternative",
            "question": "Get all alternatives defined for item code ITM-001.",
            "fields": [
                "item_code",
                "alternative_item_code"
            ]
        },
        "output": "frappe.get_all('Item Alternative', filters={'item_code': 'ITM-001'}, fields=['alternative_item_code'])"
    },
    {
        "input": {
            "doctype": "Item Alternative",
            "question": "Find all alternative items marked as two-way replacements.",
            "fields": [
                "item_code",
                "alternative_item_code",
                "two_way"
            ]
        },
        "output": "frappe.get_all('Item Alternative', filters={'two_way': 1}, fields=['item_code', 'alternative_item_code'])"
    },
    {
        "input": {
            "doctype": "Item Alternative",
            "question": "List all item pairs that support mutual replacement.",
            "fields": [
                "item_code",
                "alternative_item_code",
                "two_way"
            ]
        },
        "output": "frappe.get_all('Item Alternative', filters={'two_way': 1}, fields=['item_code', 'alternative_item_code'])"
    },
    {
        "input": {
            "doctype": "Item Alternative",
            "question": "Get all items that already have alternatives linked.",
            "fields": [
                "item_code"
            ]
        },
        "output": "frappe.get_all('Item Alternative', distinct=True, fields=['item_code'])"
    },
    {
        "input": {
            "doctype": "Item Alternative",
            "question": "List all products that have substitutes configured.",
            "fields": [
                "item_code",
                "alternative_item_code"
            ]
        },
        "output": "frappe.get_all('Item Alternative', distinct=True, fields=['item_code'])"
    },
    {
        "input": {
            "doctype": "Item Alternative",
            "question": "Show a list of primary items along with their fallback alternatives.",
            "fields": [
                "item_code",
                "alternative_item_code"
            ]
        },
        "output": "frappe.get_all('Item Alternative', fields=['item_code', 'alternative_item_code'])"
    },
    {
        "input": {
            "doctype": "Item Alternative",
            "question": "Fetch the alternative item name for each product.",
            "fields": [
                "item_code",
                "alternative_item_name"
            ]
        },
        "output": "frappe.get_all('Item Alternative', fields=['item_code', 'alternative_item_name'])"
    },
    {
        "input": {
            "doctype": "Item Alternative",
            "question": "Retrieve all substitute item relationships defined in the system.",
            "fields": [
                "item_code",
                "alternative_item_code"
            ]
        },
        "output": "frappe.get_all('Item Alternative', fields=['item_code', 'alternative_item_code'])"
    },
    {
        "input": {
            "doctype": "Item Alternative",
            "question": "List all bi-directionally linked item alternatives.",
            "fields": [
                "item_code",
                "alternative_item_code",
                "two_way"
            ]
        },
        "output": "frappe.get_all('Item Alternative', filters={'two_way': 1}, fields=['item_code', 'alternative_item_code'])"
    },
    {
        "input": {
            "doctype": "Item Alternative",
            "question": "List all items that serve as backups for other inventory products.",
            "fields": [
                "alternative_item_code"
            ]
        },
        "output": "frappe.get_all('Item Alternative', distinct=True, fields=['alternative_item_code'])"
    },
    {
        "input": {
            "doctype": "Item Alternative",
            "question": "Fetch all fields that contain the name of the alternate product.",
            "fields": [
                "alternative_item_name"
            ]
        },
        "output": "frappe.get_all('Item Alternative', fields=['item_code', 'alternative_item_name'])"
    },
    {
        "input": {
            "doctype": "Maintenance Team Member",
            "question": "Get a list of all current maintenance team members.",
            "fields": [
                "team_member",
                "full_name"
            ]
        },
        "output": "frappe.get_all('Maintenance Team Member', fields=['team_member', 'full_name'])"
    },
    {
        "input": {
            "doctype": "Maintenance Team Member",
            "question": "Retrieve the assigned maintenance role for each team member.",
            "fields": [
                "team_member",
                "maintenance_role"
            ]
        },
        "output": "frappe.get_all('Maintenance Team Member', fields=['team_member', 'maintenance_role'])"
    },
    {
        "input": {
            "doctype": "Maintenance Team Member",
            "question": "List all users in the technical maintenance crew with their roles.",
            "fields": [
                "team_member",
                "maintenance_role"
            ]
        },
        "output": "frappe.get_all('Maintenance Team Member', fields=['team_member', 'maintenance_role'])"
    },
    {
        "input": {
            "doctype": "Maintenance Team Member",
            "question": "Fetch the roles assigned to each technician in the maintenance unit.",
            "fields": [
                "team_member",
                "maintenance_role"
            ]
        },
        "output": "frappe.get_all('Maintenance Team Member', fields=['team_member', 'maintenance_role'])"
    },
    {
        "input": {
            "doctype": "Maintenance Team Member",
            "question": "Show the full names and roles of all maintenance personnel.",
            "fields": [
                "full_name",
                "maintenance_role"
            ]
        },
        "output": "frappe.get_all('Maintenance Team Member', fields=['full_name', 'maintenance_role'])"
    },
    {
        "input": {
            "doctype": "Maintenance Team Member",
            "question": "List all ERP user IDs assigned to the maintenance group.",
            "fields": [
                "team_member"
            ]
        },
        "output": "frappe.get_all('Maintenance Team Member', fields=['team_member'])"
    },
    {
        "input": {
            "doctype": "Maintenance Team Member",
            "question": "Retrieve the team roles defined for maintenance staff.",
            "fields": [
                "team_member",
                "maintenance_role"
            ]
        },
        "output": "frappe.get_all('Maintenance Team Member', fields=['team_member', 'maintenance_role'])"
    },
    {
        "input": {
            "doctype": "Maintenance Team Member",
            "question": "Get the assigned responsibilities of each maintenance team member.",
            "fields": [
                "team_member",
                "maintenance_role"
            ]
        },
        "output": "frappe.get_all('Maintenance Team Member', fields=['team_member', 'maintenance_role'])"
    },
    {
        "input": {
            "doctype": "Maintenance Team Member",
            "question": "Who is set as the supervisor in our maintenance team?",
            "fields": [
                "full_name",
                "maintenance_role"
            ]
        },
        "output": "frappe.get_all('Maintenance Team Member', filters={'maintenance_role': 'Supervisor'}, fields=['full_name'])"
    },
    {
        "input": {
            "doctype": "Maintenance Team Member",
            "question": "Show me the roles given to each technician.",
            "fields": [
                "team_member",
                "maintenance_role"
            ]
        },
        "output": "frappe.get_all('Maintenance Team Member', fields=['team_member', 'maintenance_role'])"
    },
    {
        "input": {
            "doctype": "Maintenance Team Member",
            "question": "Give me a list of maintenance team members with their names and roles.",
            "fields": [
                "team_member",
                "full_name",
                "maintenance_role"
            ]
        },
        "output": "frappe.get_all('Maintenance Team Member', fields=['team_member', 'full_name', 'maintenance_role'])"
    },
    {
        "input": {
            "doctype": "Maintenance Team Member",
            "question": "Who are the technical staff working on maintenance tasks?",
            "fields": [
                "full_name",
                "maintenance_role"
            ]
        },
        "output": "frappe.get_all('Maintenance Team Member', fields=['full_name', 'maintenance_role'])"
    },
    {
        "input": {
            "doctype": "Bank Clearance Detail",
            "question": "Has the bank cleared cheque number 875230?",
            "fields": [
                "cheque_number",
                "clearance_date"
            ]
        },
        "output": "frappe.db.exists('Bank Clearance Detail', {'cheque_number': '875230', 'clearance_date': ['!=', '']})"
    },
    {
        "input": {
            "doctype": "Bank Clearance Detail",
            "question": "List all cheque payments and how much they were for.",
            "fields": [
                "cheque_number",
                "amount"
            ]
        },
        "output": "frappe.get_all('Bank Clearance Detail', filters={'cheque_number': ['!=', '']}, fields=['cheque_number', 'amount'])"
    },
    {
        "input": {
            "doctype": "Bank Clearance Detail",
            "question": "Show me any bank clearance records where the cheque date is missing.",
            "fields": [
                "cheque_number",
                "cheque_date"
            ]
        },
        "output": "frappe.get_all('Bank Clearance Detail', filters={'cheque_date': ['is', 'null']}, fields=['cheque_number'])"
    },
    {
        "input": {
            "doctype": "Bank Clearance Detail",
            "question": "Get all records where the payment type is 'Payment Entry'.",
            "fields": [
                "payment_document",
                "payment_entry"
            ]
        },
        "output": "frappe.get_all('Bank Clearance Detail', filters={'payment_document': 'Payment Entry'}, fields=['payment_document', 'payment_entry'])"
    },
    {
        "input": {
            "doctype": "Bank Clearance Detail",
            "question": "Show me all entries where the posting date is earlier than the cheque date.",
            "fields": [
                "posting_date",
                "cheque_date"
            ]
        },
        "output": "frappe.get_all('Bank Clearance Detail', filters=[['posting_date', '<', 'cheque_date']], fields=['posting_date', 'cheque_date'])"
    },
    {
        "input": {
            "doctype": "Market Segment",
            "question": "Give me a list of all market segments we\u2019ve created.",
            "fields": [
                "market_segment"
            ]
        },
        "output": "frappe.get_all('Market Segment', fields=['market_segment'])"
    },
    {
        "input": {
            "doctype": "Market Segment",
            "question": "Show me the names of all our target market segments.",
            "fields": [
                "market_segment"
            ]
        },
        "output": "frappe.get_all('Market Segment', fields=['market_segment'])"
    },
    {
        "input": {
            "doctype": "Market Segment",
            "question": "Check if we have any defined market segments for our business.",
            "fields": [
                "market_segment"
            ]
        },
        "output": "frappe.db.exists('Market Segment', {})"
    },
    {
        "input": {
            "doctype": "Market Segment",
            "question": "List all market segments registered in the system that contain the word 'Retail'.",
            "fields": [
                "market_segment"
            ]
        },
        "output": "frappe.get_all('Market Segment', filters={'market_segment': ['like', '%Retail%']}, fields=['market_segment'])"
    },
    {
        "input": {
            "doctype": "Bank Clearance Detail",
            "question": "List entries where the posting date is before the cheque date.",
            "fields": [
                "posting_date",
                "cheque_date"
            ]
        },
        "output": "frappe.get_all('Bank Clearance Detail', filters=[['posting_date', '<', 'cheque_date']], fields=['posting_date', 'cheque_date'])"
    },
    {
        "input": {
            "doctype": "Market Segment",
            "question": "Show all market segments we\u2019ve added so far.",
            "fields": [
                "market_segment"
            ]
        },
        "output": "frappe.get_all('Market Segment', fields=['market_segment'])"
    },
    {
        "input": {
            "doctype": "Market Segment",
            "question": "Get the names of all our target market segments.",
            "fields": [
                "market_segment"
            ]
        },
        "output": "frappe.get_all('Market Segment', fields=['market_segment'])"
    },
    {
        "input": {
            "doctype": "Market Segment",
            "question": "Check if we have any market segments added in the system.",
            "fields": [
                "market_segment"
            ]
        },
        "output": "frappe.db.exists('Market Segment', {})"
    },
    {
        "input": {
            "doctype": "Market Segment",
            "question": "Show me market segments that include the word 'Retail'.",
            "fields": [
                "market_segment"
            ]
        },
        "output": "frappe.get_all('Market Segment', filters={'market_segment': ['like', '%Retail%']}, fields=['market_segment'])"
    },
    {
        "input": {
            "doctype": "Bank Transaction Mapping",
            "question": "Show me where we\u2019ve mapped bank file columns to our system fields.",
            "fields": [
                "file_field",
                "bank_transaction_field"
            ]
        },
        "output": "frappe.get_all('Bank Transaction Mapping', fields=['file_field', 'bank_transaction_field'])"
    },
    {
        "input": {
            "doctype": "Bank Transaction Mapping",
            "question": "List all mappings between bank file fields and ERP bank fields.",
            "fields": [
                "file_field",
                "bank_transaction_field"
            ]
        },
        "output": "frappe.get_all('Bank Transaction Mapping', fields=['file_field', 'bank_transaction_field'])"
    },
    {
        "input": {
            "doctype": "Bank Transaction Mapping",
            "question": "Show me if we\u2019ve mapped any CSV columns from a bank file to internal fields.",
            "fields": [
                "file_field",
                "bank_transaction_field"
            ]
        },
        "output": "frappe.db.exists('Bank Transaction Mapping', {})"
    },
    {
        "input": {
            "doctype": "Bank Transaction Mapping",
            "question": "Find the row where the transaction date field from the bank file is mapped.",
            "fields": [
                "file_field",
                "bank_transaction_field"
            ]
        },
        "output": "frappe.get_all('Bank Transaction Mapping', filters={'file_field': ['like', '%transaction date%']}, fields=['file_field', 'bank_transaction_field'])"
    },
    {
        "input": {
            "doctype": "Bank Transaction Mapping",
            "question": "List all entries that define how we map bank statement fields into the system.",
            "fields": [
                "file_field",
                "bank_transaction_field"
            ]
        },
        "output": "frappe.get_all('Bank Transaction Mapping', fields=['file_field', 'bank_transaction_field'])"
    },
    {
        "input": {
            "doctype": "Bank Transaction Mapping",
            "question": "Check how each column in the bank file is mapped to ERP transaction fields.",
            "fields": [
                "file_field",
                "bank_transaction_field"
            ]
        },
        "output": "frappe.get_all('Bank Transaction Mapping', fields=['file_field', 'bank_transaction_field'])"
    },
    {
        "input": {
            "doctype": "Bank Transaction Mapping",
            "question": "Show the mapping setup between bank file columns and ERP fields.",
            "fields": [
                "file_field",
                "bank_transaction_field"
            ]
        },
        "output": "frappe.get_all('Bank Transaction Mapping', fields=['file_field', 'bank_transaction_field'])"
    },
    {
        "input": {
            "doctype": "Bank Transaction Mapping",
            "question": "Find how the 'amount' column from bank data is mapped in our system.",
            "fields": [
                "file_field",
                "bank_transaction_field"
            ]
        },
        "output": "frappe.get_all('Bank Transaction Mapping', filters={'file_field': ['like', '%amount%']}, fields=['file_field', 'bank_transaction_field'])"
    },
    {
        "input": {
            "doctype": "Bank Transaction Mapping",
            "question": "Check if we\u2019ve mapped any bank transaction fields like reference number or account.",
            "fields": [
                "bank_transaction_field"
            ]
        },
        "output": "frappe.get_all('Bank Transaction Mapping', filters=[['bank_transaction_field', 'in', ['reference number', 'account']]], fields=['bank_transaction_field'])"
    },
    {
        "input": {
            "doctype": "Bank Transaction Mapping",
            "question": "Show where we\u2019ve defined how to interpret the bank file during import.",
            "fields": [
                "file_field",
                "bank_transaction_field"
            ]
        },
        "output": "frappe.get_all('Bank Transaction Mapping', fields=['file_field', 'bank_transaction_field'])"
    },
    {
        "input": {
            "doctype": "Bank Transaction Mapping",
            "question": "Show where the bank file column is mapped to the transaction type in our system.",
            "fields": [
                "file_field",
                "bank_transaction_field"
            ]
        },
        "output": "frappe.get_all('Bank Transaction Mapping', filters={'bank_transaction_field': ['like', '%transaction type%']}, fields=['file_field', 'bank_transaction_field'])"
    },
    {
        "input": {
            "doctype": "Bank Transaction Mapping",
            "question": "Check if we have any mappings from external bank fields to ERP fields.",
            "fields": [
                "file_field",
                "bank_transaction_field"
            ]
        },
        "output": "frappe.db.exists('Bank Transaction Mapping', {})"
    },
    {
        "input": {
            "doctype": "Bank Clearance Detail",
            "question": "Count how many cheques were cleared between March 1 and March 31.",
            "fields": [
                "clearance_date"
            ]
        },
        "output": "frappe.db.count('Bank Clearance Detail', filters=[['clearance_date', '>=', '2025-03-01'], ['clearance_date', '<=', '2025-03-31']])"
    },
    {
        "input": {
            "doctype": "Lost Reason Detail",
            "question": "List all the reasons why we lost recent opportunities.",
            "fields": [
                "lost_reason"
            ]
        },
        "output": "frappe.get_all('Lost Reason Detail', fields=['lost_reason'])"
    },
    {
        "input": {
            "doctype": "Lost Reason Detail",
            "question": "Get all lost reasons used in recent deals.",
            "fields": [
                "lost_reason"
            ]
        },
        "output": "frappe.get_all('Lost Reason Detail', fields=['lost_reason'])"
    },
    {
        "input": {
            "doctype": "Lost Reason Detail",
            "question": "Show me all lost reason details tied to failed opportunities this quarter.",
            "fields": [
                "lost_reason"
            ]
        },
        "output": "frappe.get_all('Lost Reason Detail', fields=['lost_reason'])"
    },
    {
        "input": {
            "doctype": "Bank Account Subtype",
            "question": "What are the available subtypes for bank accounts in our system?",
            "fields": [
                "account_subtype"
            ]
        },
        "output": "frappe.get_all('Bank Account Subtype', fields=['account_subtype'])"
    },
    {
        "input": {
            "doctype": "Bank Account Subtype",
            "question": "Show me a list of all defined bank account subtypes.",
            "fields": [
                "account_subtype"
            ]
        },
        "output": "frappe.get_all('Bank Account Subtype', fields=['account_subtype'])"
    },
    {
        "input": {
            "doctype": "Bank Account Subtype",
            "question": "List the subtypes configured under bank account settings.",
            "fields": [
                "account_subtype"
            ]
        },
        "output": "frappe.get_all('Bank Account Subtype', fields=['account_subtype'])"
    },
    {
        "input": {
            "doctype": "Bank Account Subtype",
            "question": "Check if we have a 'Savings' or 'Current' subtype in our bank account setup.",
            "fields": [
                "account_subtype"
            ]
        },
        "output": "frappe.get_all('Bank Account Subtype', filters={[\"account_subtype\", \"in\", [\"Savings\", \"Current\"]]}, fields=['account_subtype'])"
    },
    {
        "input": {
            "doctype": "Bank Account Subtype",
            "question": "List all custom bank account subtypes added for our company.",
            "fields": [
                "account_subtype"
            ]
        },
        "output": "frappe.get_all('Bank Account Subtype', fields=['account_subtype'])"
    },
    {
        "input": {
            "doctype": "Bank Account Subtype",
            "question": "Check if there's a specific subtype for credit card accounts.",
            "fields": [
                "account_subtype"
            ]
        },
        "output": "frappe.get_all('Bank Account Subtype', filters={\"account_subtype\": [\"like\", \"%credit card%\"]}, fields=['account_subtype'])"
    },
    {
        "input": {
            "doctype": "Bank Account Subtype",
            "question": "Show the subtype classifications for different bank accounts.",
            "fields": [
                "account_subtype"
            ]
        },
        "output": "frappe.get_all('Bank Account Subtype', fields=['account_subtype'])"
    },
    {
        "input": {
            "doctype": "Bank Account Subtype",
            "question": "Check if bank accounts are categorized by subtype anywhere in the system.",
            "fields": [
                "account_subtype"
            ]
        },
        "output": "frappe.db.exists('Bank Account Subtype', {})"
    },
    {
        "input": {
            "doctype": "Bank Account Subtype",
            "question": "List any subtypes like 'Overdraft' and 'Cash Credit' if they're in ERPNext.",
            "fields": [
                "account_subtype"
            ]
        },
        "output": "frappe.get_all('Bank Account Subtype', filters={\"account_subtype\": [\"in\", [\"Overdraft\", \"Cash Credit\"]]}, fields=[\"account_subtype\"])"
    },
    {
        "input": {
            "doctype": "Bank Account Subtype",
            "question": "Show how bank accounts are grouped by subtype in our configuration.",
            "fields": [
                "account_subtype"
            ]
        },
        "output": "frappe.get_all('Bank Account Subtype', fields=['account_subtype'])"
    },
    {
        "input": {
            "doctype": "Bank Account Subtype",
            "question": "Check if our ERP system stores subtypes for different bank account types.",
            "fields": [
                "account_subtype"
            ]
        },
        "output": "frappe.db.exists('Bank Account Subtype', {})"
    },
    {
        "input": {
            "doctype": "Bank Account Subtype",
            "question": "Which document holds the labels for bank account subtypes?",
            "fields": [
                "account_subtype"
            ]
        },
        "output": "frappe.get_all('Bank Account Subtype', fields=['account_subtype'])"
    },
    {
        "input": {
            "doctype": "Lost Reason Detail",
            "question": "Show me the lost reasons tied to sales we didn\u2019t win.",
            "fields": [
                "lost_reason"
            ]
        },
        "output": "frappe.get_all('Lost Reason Detail', fields=['lost_reason'])"
    },
    {
        "input": {
            "doctype": "Lost Reason Detail",
            "question": "Get all the reasons we lost opportunities in the last 6 months.",
            "fields": [
                "lost_reason"
            ]
        },
        "output": "frappe.get_all('Lost Reason Detail', fields=['lost_reason'])"
    },
    {
        "input": {
            "doctype": "Item Tax Template Detail",
            "question": "Show me the tax accounts applied in each item tax template.",
            "fields": [
                "tax_type"
            ]
        },
        "output": "frappe.get_all('Item Tax Template Detail', fields=['tax_type'])"
    },
    {
        "input": {
            "doctype": "Item Tax Template Detail",
            "question": "List the tax rate configured for each item.",
            "fields": [
                "tax_rate"
            ]
        },
        "output": "frappe.get_all('Item Tax Template Detail', fields=['tax_rate'])"
    },
    {
        "input": {
            "doctype": "Item Tax Template Detail",
            "question": "Which tax type is linked to the 18% GST rate?",
            "fields": [
                "tax_type",
                "tax_rate"
            ]
        },
        "output": "frappe.get_all('Item Tax Template Detail', filters={'tax_rate': 18}, fields=['tax_type'])"
    },
    {
        "input": {
            "doctype": "Item Tax Template Detail",
            "question": "Check if any item tax templates have no tax rate specified.",
            "fields": [
                "tax_type",
                "tax_rate"
            ]
        },
        "output": "frappe.get_all('Item Tax Template Detail', filters={'tax_rate': ['is', 'null']}, fields=['tax_type'])"
    },
    {
        "input": {
            "doctype": "Item Tax Template Detail",
            "question": "List all item tax template details that use the 'Sales - TX' account.",
            "fields": [
                "tax_type"
            ]
        },
        "output": "frappe.get_all('Item Tax Template Detail', filters={'tax_type': 'Sales - TX'}, fields=['tax_type'])"
    },
    {
        "input": {
            "doctype": "Item Tax Template Detail",
            "question": "View the tax type and rate for all item tax templates.",
            "fields": [
                "tax_type",
                "tax_rate"
            ]
        },
        "output": "frappe.get_all('Item Tax Template Detail', fields=['tax_type', 'tax_rate'])"
    },
    {
        "input": {
            "doctype": "Item Tax Template Detail",
            "question": "Show tax types with rates greater than 15% in item tax templates.",
            "fields": [
                "tax_type",
                "tax_rate"
            ]
        },
        "output": "frappe.get_all('Item Tax Template Detail', filters=[['tax_rate', '>', 15]], fields=['tax_type', 'tax_rate'])"
    },
    {
        "input": {
            "doctype": "Item Tax Template Detail",
            "question": "Find entries where the 'Output VAT' account is used.",
            "fields": [
                "tax_type"
            ]
        },
        "output": "frappe.get_all('Item Tax Template Detail', filters={'tax_type': 'Output VAT'}, fields=['tax_type'])"
    },
    {
        "input": {
            "doctype": "Item Tax Template Detail",
            "question": "Show item tax template entries where the tax rate is missing.",
            "fields": [
                "tax_type",
                "tax_rate"
            ]
        },
        "output": "frappe.get_all('Item Tax Template Detail', filters={'tax_rate': ['is', 'null']}, fields=['tax_type'])"
    },
    {
        "input": {
            "doctype": "Item Tax Template Detail",
            "question": "Check if multiple tax types are linked to a single item tax template.",
            "fields": [
                "tax_type"
            ]
        },
        "output": "frappe.get_all('Item Tax Template Detail', fields=['tax_type'])"
    },
    {
        "input": {
            "doctype": "Item Tax Template Detail",
            "question": "Get the tax rate for items under the 'Standard Rate Template'.",
            "fields": [
                "tax_type",
                "tax_rate"
            ]
        },
        "output": "frappe.get_all('Item Tax Template Detail', filters={'tax_type': 'Standard Rate Template'}, fields=['tax_rate'])"
    },
    {
        "input": {
            "doctype": "Item Tax Template Detail",
            "question": "See if we use different tax accounts across templates.",
            "fields": [
                "tax_type"
            ]
        },
        "output": "frappe.get_all('Item Tax Template Detail', fields=['tax_type'])"
    },
    {
        "input": {
            "doctype": "Lost Reason Detail",
            "question": "Check how many opportunities were marked lost due to high pricing.",
            "fields": [
                "lost_reason"
            ]
        },
        "output": "frappe.db.count('Lost Reason Detail', filters={'lost_reason': 'High Pricing'})"
    },
    {
        "input": {
            "doctype": "Lost Reason Detail",
            "question": "Give me a list of all unique opportunity lost reasons.",
            "fields": [
                "lost_reason"
            ]
        },
        "output": "frappe.get_all('Lost Reason Detail', fields=['lost_reason'])"
    },
    {
        "input": {
            "doctype": "Employee Group",
            "question": "Can you show me all the employee groups we\u2019ve created so far?",
            "fields": [
                "employee_group_name"
            ]
        },
        "output": "frappe.get_all('Employee Group', fields=['employee_group_name'])"
    },
    {
        "input": {
            "doctype": "Employee Group",
            "question": "Which group is assigned to our warehouse staff?",
            "fields": [
                "employee_group_name"
            ]
        },
        "output": "frappe.get_all('Employee Group', filters={'employee_group_name': ['like', '%warehouse%']}, fields=['employee_group_name'])"
    },
    {
        "input": {
            "doctype": "Employee Group",
            "question": "List the employees in the Logistics employee group.",
            "fields": [
                "employee_group_name",
                "employee_list"
            ]
        },
        "output": "frappe.get_all('Employee Group', filters={'employee_group_name': 'Logistics'}, fields=['employee_list'])"
    },
    {
        "input": {
            "doctype": "Employee Group",
            "question": "Do we have an employee group for our temporary staff?",
            "fields": [
                "employee_group_name"
            ]
        },
        "output": "frappe.db.exists('Employee Group', {'employee_group_name': ['like', '%temporary%']})"
    },
    {
        "input": {
            "doctype": "Employee Group",
            "question": "Which employees are part of the 'Sales Team A' group?",
            "fields": [
                "employee_group_name",
                "employee_list"
            ]
        },
        "output": "frappe.get_all('Employee Group', filters={'employee_group_name': 'Sales Team A'}, fields=['employee_list'])"
    },
    {
        "input": {
            "doctype": "Employee Group",
            "question": "Show me the list of employee groups that include at least one member.",
            "fields": [
                "employee_group_name",
                "employee_list"
            ]
        },
        "output": "frappe.get_all('Employee Group', filters={\"employee_list\": [\"!=\", \"\"]}, fields=['employee_group_name'])"
    },
    {
        "input": {
            "doctype": "Employee Group",
            "question": "How many employee groups are defined in our system?",
            "fields": [
                "employee_group_name"
            ]
        },
        "output": "frappe.db.count('Employee Group')"
    },
    {
        "input": {
            "doctype": "Employee Group",
            "question": "Is John Smith part of any employee group?",
            "fields": [
                "employee_list"
            ]
        },
        "output": "frappe.db.exists('Employee Group', {\"employee_list\": [\"like\", \"%John Smith%\"]})"
    },
    {
        "input": {
            "doctype": "Employee Group",
            "question": "Find all employee groups with names starting with 'Admin'.",
            "fields": [
                "employee_group_name"
            ]
        },
        "output": "frappe.get_all('Employee Group', filters={\"employee_group_name\": [\"like\", \"Admin%\"]}, fields=['employee_group_name'])"
    },
    {
        "input": {
            "doctype": "Employee Group",
            "question": "Can I see a breakdown of employees under each employee group?",
            "fields": [
                "employee_group_name",
                "employee_list"
            ]
        },
        "output": "frappe.get_all('Employee Group', fields=['employee_group_name', 'employee_list'])"
    },
    {
        "input": {
            "doctype": "Employee Group",
            "question": "Which employee group does our support staff belong to?",
            "fields": [
                "employee_group_name",
                "employee_list"
            ]
        },
        "output": "frappe.get_all('Employee Group', filters={\"employee_list\": [\"like\", \"%Support Staff%\"]}, fields=['employee_group_name'])"
    },
    {
        "input": {
            "doctype": "Lost Reason Detail",
            "question": "Which reasons were assigned when deals didn\u2019t go through?",
            "fields": [
                "lost_reason"
            ]
        },
        "output": "frappe.get_all('Lost Reason Detail', fields=['lost_reason'])"
    },
    {
        "input": {
            "doctype": "Lost Reason Detail",
            "question": "Are there any trends in opportunity losses based on lost reason data?",
            "fields": [
                "lost_reason"
            ]
        },
        "output": "frappe.get_all('Lost Reason Detail', fields=['lost_reason'])"
    },
    {
        "input": {
            "doctype": "Lost Reason Detail",
            "question": "Can I export all lost reasons linked to lost opportunities for review?",
            "fields": [
                "lost_reason"
            ]
        },
        "output": "frappe.get_list('Lost Reason Detail', fields=['lost_reason'], limit_page_length=1000)"
    },
    {
        "input": {
            "doctype": "Lost Reason Detail",
            "question": "Which lost reason was recorded for our biggest failed deal?",
            "fields": [
                "lost_reason"
            ]
        },
        "output": "frappe.get_all('Lost Reason Detail', fields=['lost_reason'], order_by='idx desc', limit=1)"
    },
    {
        "input": {
            "doctype": "Lost Reason Detail",
            "question": "How often is 'customer chose competitor' marked as a lost reason?",
            "fields": [
                "lost_reason"
            ]
        },
        "output": "frappe.db.count('Lost Reason Detail', filters={'lost_reason': 'Customer Chose Competitor'})"
    },
    {
        "input": {
            "doctype": "Workspace Chart",
            "question": "How many workspace charts are configured in the system?",
            "fields": [
                "chart_name"
            ]
        },
        "output": "frappe.db.count('Workspace Chart')"
    },
    {
        "input": {
            "doctype": "Workspace Chart",
            "question": "Does a chart named 'Sales Overview' exist in the system?",
            "fields": [
                "chart_name"
            ]
        },
        "output": "frappe.db.exists('Workspace Chart', {'chart_name': 'Sales Overview'})"
    },
    {
        "input": {
            "doctype": "Workspace Chart",
            "question": "List all workspace charts with a label containing the word 'Performance'.",
            "fields": [
                "label",
                "chart_name"
            ]
        },
        "output": "frappe.get_all('Workspace Chart', filters={'label': ['like', '%Performance%']}, fields=['chart_name', 'label'])"
    },
    {
        "input": {
            "doctype": "Workspace Chart",
            "question": "What is the label of the chart named 'Daily Metrics'?",
            "fields": [
                "chart_name",
                "label"
            ]
        },
        "output": "frappe.db.get_value('Workspace Chart', {'chart_name': 'Daily Metrics'}, 'label')"
    },
    {
        "input": {
            "doctype": "Auto Repeat",
            "question": "List all auto-repeat setups scheduled to run weekly.",
            "fields": [
                "frequency"
            ]
        },
        "output": "frappe.get_all('Auto Repeat', filters={'frequency': 'Weekly'}, fields=['reference_doctype', 'reference_document', 'start_date', 'frequency'])"
    },
    {
        "input": {
            "doctype": "Auto Repeat",
            "question": "How many auto-repeat tasks are active in April 2025?",
            "fields": [
                "start_date"
            ]
        },
        "output": "frappe.db.count('Auto Repeat', filters=[['start_date', 'between', ['2025-04-01', '2025-04-30']]])"
    },
    {
        "input": {
            "doctype": "Auto Repeat",
            "question": "Do we have any auto-repeat configurations without an end date?",
            "fields": [
                "end_date"
            ]
        },
        "output": "frappe.db.exists('Auto Repeat', {'end_date': ''})"
    },
    {
        "input": {
            "doctype": "Auto Repeat",
            "question": "What is the next scheduled date for any auto-repeat task?",
            "fields": [
                "next_schedule_date"
            ]
        },
        "output": "frappe.get_all('Auto Repeat', fields=['next_schedule_date'], order_by='next_schedule_date asc', limit=1)"
    },
    {
        "input": {
            "doctype": "Auto Repeat",
            "question": "Which auto-repeat entries have email notifications enabled?",
            "fields": [
                "notify_by_email"
            ]
        },
        "output": "frappe.get_all('Auto Repeat', filters={'notify_by_email': 1}, fields=['reference_doctype', 'reference_document', 'notify_by_email'])"
    },
    {
        "input": {
            "doctype": "Auto Repeat",
            "question": "List auto-repeat tasks that include a reminder template.",
            "fields": [
                "template"
            ]
        },
        "output": "frappe.get_all('Auto Repeat', filters={'template': ['!=', '']}, fields=['template', 'subject'])"
    },
    {
        "input": {
            "doctype": "Auto Repeat",
            "question": "Get the email recipients configured for each auto-repeat task.",
            "fields": [
                "recipients"
            ]
        },
        "output": "frappe.get_all('Auto Repeat', fields=['reference_doctype', 'recipients'])"
    },
    {
        "input": {
            "doctype": "Auto Repeat",
            "question": "Fetch contact emails set using the get_contacts option.",
            "fields": [
                "get_contacts"
            ]
        },
        "output": "frappe.get_all('Auto Repeat', filters={'get_contacts': 1}, fields=['recipients', 'get_contacts'])"
    },
    {
        "input": {
            "doctype": "Auto Repeat",
            "question": "How many auto-repeat entries are linked to Sales Invoice or Purchase Invoice?",
            "fields": [
                "reference_doctype"
            ]
        },
        "output": "frappe.db.count('Auto Repeat', filters={'reference_doctype': ['in', ['Sales Invoice', 'Purchase Invoice']]})"
    },
    {
        "input": {
            "doctype": "Auto Repeat",
            "question": "Get preview messages used in existing auto-repeat email templates.",
            "fields": [
                "preview_message"
            ]
        },
        "output": "frappe.get_all('Auto Repeat', filters={'preview_message': ['!=', '']}, fields=['preview_message', 'reference_doctype'])"
    },
    {
        "input": {
            "doctype": "Auto Repeat",
            "question": "Which print formats are linked to auto-repeat records?",
            "fields": [
                "print_format"
            ]
        },
        "output": "frappe.get_all('Auto Repeat', filters={'print_format': ['!=', '']}, fields=['print_format', 'reference_doctype'])"
    },
    {
        "input": {
            "doctype": "UAE VAT Settings",
            "question": "Fetch the UAE VAT account configuration for Gulf Trading LLC.",
            "fields": [
                "company",
                "uae_vat_accounts"
            ]
        },
        "output": "frappe.get_value('UAE VAT Settings', {'company': 'Gulf Trading LLC'}, 'uae_vat_accounts')"
    },
    {
        "input": {
            "doctype": "Global Search Settings",
            "question": "Which doctypes are currently allowed in global search?",
            "fields": [
                "allowed_in_global_search"
            ]
        },
        "output": "frappe.get_all('Global Search Settings', filters={'allowed_in_global_search': 1}, fields=['allowed_in_global_search'])"
    },
    {
        "input": {
            "doctype": "Global Search Settings",
            "question": "List all doctypes that are currently included in global search.",
            "fields": [
                "allowed_in_global_search"
            ]
        },
        "output": "frappe.get_all('Global Search Settings', filters={'allowed_in_global_search': 1}, fields=['name', 'allowed_in_global_search'])"
    },
    {
        "input": {
            "doctype": "Global Search Settings",
            "question": "Is the Item doctype enabled for global search?",
            "fields": [
                "allowed_in_global_search"
            ]
        },
        "output": "frappe.db.exists('Global Search Settings', {'name': 'Item', 'allowed_in_global_search': 1})"
    },
    {
        "input": {
            "doctype": "Global Search Settings",
            "question": "How many doctypes are excluded from global search?",
            "fields": [
                "allowed_in_global_search"
            ]
        },
        "output": "frappe.db.count('Global Search Settings', filters={'allowed_in_global_search': 0})"
    },
    {
        "input": {
            "doctype": "Global Search Settings",
            "question": "Get all doctypes allowed in global search that include the word 'Customer'.",
            "fields": [
                "name",
                "allowed_in_global_search"
            ]
        },
        "output": "frappe.get_all('Global Search Settings', filters={'allowed_in_global_search': 1, 'name': ['like', '%Customer%']}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Global Search Settings",
            "question": "Check if both Customer and Supplier are marked as searchable globally.",
            "fields": [
                "allowed_in_global_search"
            ]
        },
        "output": "all([frappe.db.exists('Global Search Settings', {'name': 'Customer', 'allowed_in_global_search': 1}), frappe.db.exists('Global Search Settings', {'name': 'Supplier', 'allowed_in_global_search': 1})])"
    },
    {
        "input": {
            "doctype": "Global Search Settings",
            "question": "List all doctypes currently enabled for the universal search bar.",
            "fields": [
                "allowed_in_global_search"
            ]
        },
        "output": "frappe.get_all('Global Search Settings', filters={'allowed_in_global_search': 1}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Global Search Settings",
            "question": "How many doctypes have search indexing turned off?",
            "fields": [
                "allowed_in_global_search"
            ]
        },
        "output": "frappe.db.count('Global Search Settings', filters={'allowed_in_global_search': 0})"
    },
    {
        "input": {
            "doctype": "Global Search Settings",
            "question": "Which doctypes include the word 'Lead' and are visible in global search?",
            "fields": [
                "allowed_in_global_search"
            ]
        },
        "output": "frappe.get_all('Global Search Settings', filters={'allowed_in_global_search': 1, 'name': ['like', '%Lead%']}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Global Search Settings",
            "question": "Check if the 'Opportunity' doctype is excluded from global search.",
            "fields": [
                "allowed_in_global_search"
            ]
        },
        "output": "not frappe.db.exists('Global Search Settings', {'name': 'Opportunity', 'allowed_in_global_search': 1})"
    },
    {
        "input": {
            "doctype": "Availability Of Slots",
            "question": "What time slots are available on Mondays?",
            "fields": [
                "day_of_week",
                "from_time",
                "to_time"
            ]
        },
        "output": "frappe.get_all('Availability Of Slots', filters={'day_of_week': 'Monday'}, fields=['from_time', 'to_time'])"
    },
    {
        "input": {
            "doctype": "Availability Of Slots",
            "question": "List all working hours set for each weekday.",
            "fields": [
                "day_of_week",
                "from_time",
                "to_time"
            ]
        },
        "output": "frappe.get_all('Availability Of Slots', fields=['day_of_week', 'from_time', 'to_time'])"
    },
    {
        "input": {
            "doctype": "Availability Of Slots",
            "question": "What time slots are available for Friday bookings?",
            "fields": [
                "day_of_week",
                "from_time",
                "to_time"
            ]
        },
        "output": "frappe.get_all('Availability Of Slots', filters={'day_of_week': 'Friday'}, fields=['from_time', 'to_time'])"
    },
    {
        "input": {
            "doctype": "Availability Of Slots",
            "question": "Show me available time ranges defined for each day of the week.",
            "fields": [
                "day_of_week",
                "from_time",
                "to_time"
            ]
        },
        "output": "frappe.get_all('Availability Of Slots', fields=['day_of_week', 'from_time', 'to_time'])"
    },
    {
        "input": {
            "doctype": "Availability Of Slots",
            "question": "How many time slots are defined for each weekday?",
            "fields": [
                "day_of_week"
            ]
        },
        "output": "frappe.get_all('Availability Of Slots', fields=['day_of_week'], group_by='day_of_week', distinct=True)"
    },
    {
        "input": {
            "doctype": "Availability Of Slots",
            "question": "Get all time slots configured for Saturday.",
            "fields": [
                "day_of_week",
                "from_time",
                "to_time"
            ]
        },
        "output": "frappe.get_all('Availability Of Slots', filters={'day_of_week': 'Saturday'}, fields=['from_time', 'to_time'])"
    },
    {
        "input": {
            "doctype": "Availability Of Slots",
            "question": "Check if the system has time ranges set for Sunday.",
            "fields": [
                "day_of_week"
            ]
        },
        "output": "frappe.db.exists('Availability Of Slots', {'day_of_week': 'Sunday'})"
    },
    {
        "input": {
            "doctype": "Availability Of Slots",
            "question": "Which slots fall outside standard working hours (before 09:00 or after 18:00)?",
            "fields": [
                "from_time",
                "to_time"
            ]
        },
        "output": "frappe.get_all('Availability Of Slots', filters=[['from_time', '<', '09:00'], ['to_time', '>', '18:00']], fields=['day_of_week', 'from_time', 'to_time'])"
    },
    {
        "input": {
            "doctype": "Availability Of Slots",
            "question": "Get weekday-wise time ranges where each day has a different availability.",
            "fields": [
                "day_of_week",
                "from_time",
                "to_time"
            ]
        },
        "output": "frappe.get_all('Availability Of Slots', fields=['day_of_week', 'from_time', 'to_time'], distinct=True)"
    },
    {
        "input": {
            "doctype": "POS Field",
            "question": "List all field labels configured for the POS screen.",
            "fields": [
                "label"
            ]
        },
        "output": "frappe.get_all('POS Field', fields=['label'])"
    },
    {
        "input": {
            "doctype": "POS Field",
            "question": "Which fields in POS have default values set?",
            "fields": [
                "fieldname",
                "default_value"
            ]
        },
        "output": "frappe.get_all('POS Field', filters={[\"default_value\", \"!=\", \"\"]}, fields=['fieldname', 'default_value'])"
    },
    {
        "input": {
            "doctype": "POS Field",
            "question": "Show me all POS fields that are marked as mandatory.",
            "fields": [
                "fieldname",
                "reqd"
            ]
        },
        "output": "frappe.get_all('POS Field', filters={'reqd': 1}, fields=['fieldname'])"
    },
    {
        "input": {
            "doctype": "POS Field",
            "question": "Which fields are set as read-only in the POS interface?",
            "fields": [
                "fieldname",
                "read_only"
            ]
        },
        "output": "frappe.get_all('POS Field', filters={'read_only': 1}, fields=['fieldname'])"
    },
    {
        "input": {
            "doctype": "POS Field",
            "question": "Get the field types assigned to each POS field.",
            "fields": [
                "fieldname",
                "fieldtype"
            ]
        },
        "output": "frappe.get_all('POS Field', fields=['fieldname', 'fieldtype'])"
    },
    {
        "input": {
            "doctype": "POS Field",
            "question": "List all POS fields with dropdown options configured.",
            "fields": [
                "fieldname",
                "options"
            ]
        },
        "output": "frappe.get_all('POS Field', filters={[\"fieldtype\", \"=\", \"Select\"]}, fields=['fieldname', 'options'])"
    },
    {
        "input": {
            "doctype": "POS Field",
            "question": "Which fields are currently visible in the POS configuration?",
            "fields": [
                "fieldname",
                "label"
            ]
        },
        "output": "frappe.get_all('POS Field', fields=['fieldname', 'label'])"
    },
    {
        "input": {
            "doctype": "POS Field",
            "question": "Which field label is used for the billing section in POS?",
            "fields": [
                "fieldname",
                "label"
            ]
        },
        "output": "frappe.get_all('POS Field', filters={[\"label\", \"like\", \"%billing%\"]}, fields=['fieldname', 'label'])"
    },
    {
        "input": {
            "doctype": "POS Field",
            "question": "What field types are available for customizing the POS form?",
            "fields": [
                "fieldtype"
            ]
        },
        "output": "frappe.get_all('POS Field', distinct=True, fields=['fieldtype'])"
    },
    {
        "input": {
            "doctype": "POS Field",
            "question": "Show me dropdown fields in POS along with their default selections.",
            "fields": [
                "fieldname",
                "fieldtype",
                "default_value"
            ]
        },
        "output": "frappe.get_all('POS Field', filters={[\"fieldtype\", \"=\", \"Select\"]}, fields=['fieldname', 'default_value'])"
    },
    {
        "input": {
            "doctype": "Accounting Dimension Detail",
            "question": "Show me the default accounting dimensions set for each company.",
            "fields": [
                "company",
                "default_dimension"
            ]
        },
        "output": "frappe.get_all('Accounting Dimension Detail', fields=['company', 'default_dimension'])"
    },
    {
        "input": {
            "doctype": "Accounting Dimension Detail",
            "question": "Which dimensions are mandatory for profit and loss statements?",
            "fields": [
                "default_dimension",
                "mandatory_for_pl"
            ]
        },
        "output": "frappe.get_all('Accounting Dimension Detail', filters={'mandatory_for_pl': 1}, fields=['default_dimension'])"
    },
    {
        "input": {
            "doctype": "Accounting Dimension Detail",
            "question": "List all balance sheet dimensions where tagging is mandatory.",
            "fields": [
                "default_dimension",
                "mandatory_for_bs"
            ]
        },
        "output": "frappe.get_all('Accounting Dimension Detail', filters={'mandatory_for_bs': 1}, fields=['default_dimension'])"
    },
    {
        "input": {
            "doctype": "Accounting Dimension Detail",
            "question": "Which companies have automatic balancing entries enabled for dimensions?",
            "fields": [
                "company",
                "automatically_post_balancing_accounting_entry"
            ]
        },
        "output": "frappe.get_all('Accounting Dimension Detail', filters={'automatically_post_balancing_accounting_entry': 1}, fields=['company'])"
    },
    {
        "input": {
            "doctype": "Accounting Dimension Detail",
            "question": "Get the offsetting account linked with each accounting dimension.",
            "fields": [
                "default_dimension",
                "offsetting_account"
            ]
        },
        "output": "frappe.get_all('Accounting Dimension Detail', fields=['default_dimension', 'offsetting_account'])"
    },
    {
        "input": {
            "doctype": "Accounting Dimension Detail",
            "question": "Find all dimension settings configured for 'Marlin Biocomposites Pvt. Ltd.'.",
            "fields": [
                "company",
                "default_dimension",
                "mandatory_for_bs",
                "mandatory_for_pl"
            ]
        },
        "output": "frappe.get_all('Accounting Dimension Detail', filters={'company': 'Marlin Biocomposites Pvt. Ltd.'}, fields=['default_dimension', 'mandatory_for_bs', 'mandatory_for_pl'])"
    },
    {
        "input": {
            "doctype": "Accounting Dimension Detail",
            "question": "Which document types have custom default dimensions applied?",
            "fields": [
                "reference_document",
                "default_dimension"
            ]
        },
        "output": "frappe.get_all('Accounting Dimension Detail', fields=['reference_document', 'default_dimension'])"
    },
    {
        "input": {
            "doctype": "Accounting Dimension Detail",
            "question": "Are there any reference documents linked to accounting dimensions?",
            "fields": [
                "reference_document"
            ]
        },
        "output": "frappe.get_all('Accounting Dimension Detail', filters={\"reference_document\": [\"!=\", \"\"]}, fields=['reference_document'])"
    },
    {
        "input": {
            "doctype": "Accounting Period",
            "question": "Where do I define the start and end dates for a fiscal period?",
            "fields": [
                "start_date",
                "end_date"
            ]
        },
        "output": "frappe.get_all('Accounting Period', fields=['start_date', 'end_date'])"
    },
    {
        "input": {
            "doctype": "Accounting Period",
            "question": "How can I assign a company to a specific accounting period?",
            "fields": [
                "period_name",
                "company"
            ]
        },
        "output": "frappe.get_all('Accounting Period', fields=['period_name', 'company'])"
    },
    {
        "input": {
            "doctype": "Accounting Period",
            "question": "Where can I view all closed documents within a fiscal period?",
            "fields": [
                "period_name",
                "closed_documents"
            ]
        },
        "output": "frappe.get_all('Accounting Period', fields=['period_name', 'closed_documents'])"
    },
    {
        "input": {
            "doctype": "Accounting Period",
            "question": "Is there a way to restrict entries for closed periods in ERPNext?",
            "fields": [
                "period_name",
                "closed_documents"
            ]
        },
        "output": "frappe.get_all('Accounting Period', filters={\"closed_documents\": [\"!=\", \"\"]}, fields=['period_name'])"
    },
    {
        "input": {
            "doctype": "Accounting Period",
            "question": "I want to block certain financial entries after year-end. How do I do that?",
            "fields": [
                "end_date",
                "closed_documents"
            ]
        },
        "output": "frappe.get_all('Accounting Period', filters={\"end_date\": [\"<\", \"today\"]}, fields=['period_name', 'closed_documents'])"
    },
    {
        "input": {
            "doctype": "Accounting Period",
            "question": "How do I define a quarterly period and prevent backdated entries for it?",
            "fields": [
                "start_date",
                "end_date",
                "closed_documents"
            ]
        },
        "output": "frappe.get_all('Accounting Period', filters={\"closed_documents\": [\"!=\", \"\"]}, fields=['start_date', 'end_date'])"
    },
    {
        "input": {
            "doctype": "Accounting Period",
            "question": "Where do I close specific documents for a particular accounting period?",
            "fields": [
                "period_name",
                "closed_documents"
            ]
        },
        "output": "frappe.get_all('Accounting Period', fields=['period_name', 'closed_documents'])"
    },
    {
        "input": {
            "doctype": "Accounting Period",
            "question": "Check if there's any defined accounting period for the company 'Zenthos Maritime Holdings'.",
            "fields": [
                "company"
            ]
        },
        "output": "frappe.db.exists('Accounting Period', {'company': 'Zenthos Maritime Holdings'})"
    },
    {
        "input": {
            "doctype": "Accounting Period",
            "question": "How many accounting periods are configured in total?",
            "fields": [
                "period_name"
            ]
        },
        "output": "frappe.db.count('Accounting Period')"
    },
    {
        "input": {
            "doctype": "Accounting Period",
            "question": "Get the start and end date of the accounting period named 'Q3 Closing FY 2023-24'.",
            "fields": [
                "start_date",
                "end_date"
            ]
        },
        "output": "frappe.db.get_value('Accounting Period', 'Q3 Closing FY 2023-24', ['start_date', 'end_date'])"
    },
    {
        "input": {
            "doctype": "Session Default",
            "question": "Where can I set default values for specific doctypes during a user session?",
            "fields": [
                "ref_doctype"
            ]
        },
        "output": "frappe.get_all('Session Default', fields=['ref_doctype'])"
    },
    {
        "input": {
            "doctype": "Session Default",
            "question": "How do I specify the default document type for a user's session?",
            "fields": [
                "ref_doctype"
            ]
        },
        "output": "frappe.get_all('Session Default', filters={}, fields=['ref_doctype'])"
    },
    {
        "input": {
            "doctype": "Session Default",
            "question": "Check if a default doctype is already defined for this session.",
            "fields": [
                "ref_doctype"
            ]
        },
        "output": "frappe.db.exists('Session Default', {})"
    },
    {
        "input": {
            "doctype": "Session Default",
            "question": "How many session-level default entries are there in total?",
            "fields": [
                "ref_doctype"
            ]
        },
        "output": "frappe.db.count('Session Default')"
    },
    {
        "input": {
            "doctype": "Session Default",
            "question": "Get the default document type for session ID 'USR-SESSION-2024-01'.",
            "fields": [
                "ref_doctype"
            ]
        },
        "output": "frappe.db.get_value('Session Default', 'USR-SESSION-2024-01', 'ref_doctype')"
    },
    {
        "input": {
            "doctype": "Session Default Settings",
            "question": "Where can I manage all session default configurations for my account?",
            "fields": [
                "session_defaults"
            ]
        },
        "output": "frappe.get_all('Session Default Settings', fields=['session_defaults'])"
    },
    {
        "input": {
            "doctype": "Session Default Settings",
            "question": "How do I set up defaults that apply to my session each time I log in?",
            "fields": [
                "session_defaults"
            ]
        },
        "output": "frappe.get_all('Session Default Settings', fields=['session_defaults'])"
    },
    {
        "input": {
            "doctype": "Session Default Settings",
            "question": "Is there a place where I can define multiple default doctypes for sessions?",
            "fields": [
                "session_defaults"
            ]
        },
        "output": "frappe.get_all('Session Default Settings', fields=['session_defaults'])"
    },
    {
        "input": {
            "doctype": "Session Default Settings",
            "question": "Check if session default settings exist for any user.",
            "fields": [
                "session_defaults"
            ]
        },
        "output": "frappe.db.exists('Session Default Settings', {})"
    },
    {
        "input": {
            "doctype": "Session Default Settings",
            "question": "How many users have customized their session default settings?",
            "fields": [
                "session_defaults"
            ]
        },
        "output": "frappe.db.count('Session Default Settings')"
    },
    {
        "input": {
            "doctype": "Session Default Settings",
            "question": "Get the session default settings for user \u2018john.doe@example.com\u2019.",
            "fields": [
                "session_defaults"
            ]
        },
        "output": "frappe.db.get_value('Session Default Settings', 'john.doe@example.com', 'session_defaults')"
    },
    {
        "input": {
            "doctype": "Session Default Settings",
            "question": "List all session defaults where Company is set to 'HTS Qatar'.",
            "fields": [
                "session_defaults"
            ]
        },
        "output": "frappe.get_all('Session Default Settings', filters={ 'session_defaults': ['like', '%HTS Qatar%'] }, fields=['session_defaults'])"
    },
    {
        "input": {
            "doctype": "Session Default Settings",
            "question": "Show me the full session default configuration document for my user.",
            "fields": [
                "session_defaults"
            ]
        },
        "output": "frappe.get_doc('Session Default Settings', 'john.doe@example.com')"
    },
    {
        "input": {
            "doctype": "Session Default Settings",
            "question": "List all session default settings with their document names.",
            "fields": [
                "session_defaults"
            ]
        },
        "output": "frappe.get_list('Session Default Settings', fields=['name', 'session_defaults'])"
    },
    {
        "input": {
            "doctype": "Session Default Settings",
            "question": "List all session default settings with their document names.",
            "fields": [
                "session_defaults"
            ]
        },
        "output": "frappe.get_list('Session Default Settings', fields=['name', 'session_defaults'])"
    },
    {
        "input": {
            "doctype": "Session Default Settings",
            "question": "How many session default settings are defined in total?",
            "fields": [
                "session_defaults"
            ]
        },
        "output": "frappe.db.count('Session Default Settings')"
    },
    {
        "input": {
            "doctype": "Session Default Settings",
            "question": "Check if session default settings exist for any user.",
            "fields": []
        },
        "output": "frappe.db.exists('Session Default Settings', {})"
    },
    {
        "input": {
            "doctype": "Session Default Settings",
            "question": "Fetch the session default settings for user elina.petrova@aerogemindustries.com.",
            "fields": [
                "session_defaults"
            ]
        },
        "output": "frappe.db.get_value('Session Default Settings', 'elina.petrova@aerogemindustries.com', 'session_defaults')"
    },
    {
        "input": {
            "doctype": "Session Default Settings",
            "question": "Get the full session default document for malik.rahman@novacap-group.org.",
            "fields": [
                "session_defaults"
            ]
        },
        "output": "frappe.get_doc('Session Default Settings', 'malik.rahman@novacap-group.org')"
    },
    {
        "input": {
            "doctype": "Campaign Email Schedule",
            "question": "List all campaign email schedules and the templates used.",
            "fields": [
                "email_template",
                "send_after_days"
            ]
        },
        "output": "frappe.get_all('Campaign Email Schedule', fields=['email_template', 'send_after_days'])"
    },
    {
        "input": {
            "doctype": "Campaign Email Schedule",
            "question": "Check if any email schedule exists for template 'Product Re-Engagement Series - Phase 2'.",
            "fields": [
                "email_template"
            ]
        },
        "output": "frappe.db.exists('Campaign Email Schedule', {'email_template': 'Product Re-Engagement Series - Phase 2'})"
    },
    {
        "input": {
            "doctype": "Campaign Email Schedule",
            "question": "How many campaign emails are scheduled with a 3-day delay?",
            "fields": [
                "send_after_days"
            ]
        },
        "output": "frappe.db.count('Campaign Email Schedule', {'send_after_days': 3})"
    },
    {
        "input": {
            "doctype": "Campaign Email Schedule",
            "question": "Fetch the email template set for the schedule with name 'Q2Retention-Blitz-Alpha'.",
            "fields": [
                "email_template"
            ]
        },
        "output": "frappe.db.get_value('Campaign Email Schedule', 'Q2Retention-Blitz-Alpha', 'email_template')"
    },
    {
        "input": {
            "doctype": "Campaign Email Schedule",
            "question": "Get the full details of the campaign email schedule named 'PhaseOne-WarmUp-April'.",
            "fields": [
                "email_template",
                "send_after_days"
            ]
        },
        "output": "frappe.get_doc('Campaign Email Schedule', 'PhaseOne-WarmUp-April')"
    },
    {
        "input": {
            "doctype": "Campaign Email Schedule",
            "question": "Which templates are scheduled to go out exactly 2 days after the campaign starts?",
            "fields": [
                "email_template",
                "send_after_days"
            ]
        },
        "output": "frappe.get_all('Campaign Email Schedule', filters={'send_after_days': 2}, fields=['email_template'])"
    },
    {
        "input": {
            "doctype": "Campaign Email Schedule",
            "question": "How many emails are scheduled to go out more than 3 days into the campaign?",
            "fields": [
                "send_after_days"
            ]
        },
        "output": "frappe.db.count('Campaign Email Schedule', filters=[['send_after_days', '>', 3]])"
    },
    {
        "input": {
            "doctype": "Campaign Email Schedule",
            "question": "Check if there's any schedule entry for the 'Intro Campaign' email template.",
            "fields": [
                "email_template"
            ]
        },
        "output": "frappe.db.exists('Campaign Email Schedule', {'email_template': 'Intro Campaign'})"
    },
    {
        "input": {
            "doctype": "Campaign Email Schedule",
            "question": "Get the delay in days for sending the 'Welcome Follow-Up' email template.",
            "fields": [
                "send_after_days"
            ]
        },
        "output": "frappe.db.get_value('Campaign Email Schedule', {'email_template': 'Welcome Follow-Up'}, 'send_after_days')"
    },
    {
        "input": {
            "doctype": "Campaign Email Schedule",
            "question": "Retrieve the complete campaign email schedule with name 'CES-00012'.",
            "fields": [
                "email_template",
                "send_after_days"
            ]
        },
        "output": "frappe.get_doc('Campaign Email Schedule', 'CES-00012')"
    },
    {
        "input": {
            "doctype": "Manufacturer",
            "question": "List all manufacturers along with their full names and short names.",
            "fields": [
                "manufacturer_name",
                "short_name"
            ]
        },
        "output": "frappe.get_all('Manufacturer', fields=['manufacturer_name', 'short_name'])"
    },
    {
        "input": {
            "doctype": "Manufacturer",
            "question": "How many manufacturers do we currently have in the system?",
            "fields": []
        },
        "output": "frappe.db.count('Manufacturer')"
    },
    {
        "input": {
            "doctype": "Manufacturer",
            "question": "Check if we already have a manufacturer named 'Heliogen BioDynamics Ltd'.",
            "fields": [
                "manufacturer_name"
            ]
        },
        "output": "frappe.db.exists('Manufacturer', {'manufacturer_name': 'Heliogen BioDynamics Ltd'})"
    },
    {
        "input": {
            "doctype": "Manufacturer",
            "question": "Get the country and website of the manufacturer 'OrionFlex Components GmbH'.",
            "fields": [
                "country",
                "website"
            ]
        },
        "output": "frappe.db.get_value('Manufacturer', {'manufacturer_name': 'OrionFlex Components GmbH'}, ['country', 'website'])"
    },
    {
        "input": {
            "doctype": "Manufacturer",
            "question": "Show me all the details of the manufacturer record with ID 'MFR-02147'.",
            "fields": []
        },
        "output": "frappe.get_doc('Manufacturer', 'MFR-02147')"
    },
    {
        "input": {
            "doctype": "Manufacturer",
            "question": "List all manufacturers with their websites and countries.",
            "fields": [
                "manufacturer_name",
                "website",
                "country"
            ]
        },
        "output": "frappe.get_all('Manufacturer', fields=['manufacturer_name', 'website', 'country'])"
    },
    {
        "input": {
            "doctype": "Manufacturer",
            "question": "Do we have a manufacturer called 'Arko Pharma International BV'? ",
            "fields": [
                "manufacturer_name"
            ]
        },
        "output": "frappe.db.exists('Manufacturer', {'manufacturer_name': 'Arko Pharma International BV'})"
    },
    {
        "input": {
            "doctype": "Manufacturer",
            "question": "Fetch all fields for the manufacturer with ID 'MFTR-ADV-0419'.",
            "fields": []
        },
        "output": "frappe.get_doc('Manufacturer', 'MFTR-ADV-0419')"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "Show all defined issue types and their descriptions.",
            "fields": [
                "name",
                "description"
            ]
        },
        "output": "frappe.get_all('Issue Type', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Invoice Discounting",
            "question": "List all invoice discounting records for the company 'Altair Commodities & Finance LLP'.",
            "fields": [
                "company",
                "total_amount",
                "posting_date"
            ]
        },
        "output": "frappe.get_all('Invoice Discounting', filters={'company': 'Altair Commodities & Finance LLP'}, fields=['company', 'total_amount', 'posting_date'])"
    },
    {
        "input": {
            "doctype": "Invoice Discounting",
            "question": "How many invoice discounting entries do we have?",
            "fields": []
        },
        "output": "frappe.db.count('Invoice Discounting')"
    },
    {
        "input": {
            "doctype": "Invoice Discounting",
            "question": "Get the bank account and short-term loan used in record 'DISC-FINX-0923-A5'.",
            "fields": [
                "bank_account",
                "short_term_loan"
            ]
        },
        "output": "frappe.db.get_value('Invoice Discounting', 'DISC-FINX-0923-A5', ['bank_account', 'short_term_loan'])"
    },
    {
        "input": {
            "doctype": "Invoice Discounting",
            "question": "Where can I view the status of invoice discounting transactions like 'Disbursed' or 'Settled'?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_all('Invoice Discounting', filters={'status': ['in', ['Disbursed', 'Settled']]}, fields=['name', 'status'])"
    },
    {
        "input": {
            "doctype": "Invoice Discounting",
            "question": "How do I capture bank account details when receiving invoice-based loan disbursement?",
            "fields": [
                "bank_account",
                "short_term_loan"
            ]
        },
        "output": "frappe.get_list('Invoice Discounting', fields=['name', 'bank_account', 'short_term_loan'])"
    },
    {
        "input": {
            "doctype": "Invoice Discounting",
            "question": "Is there a place to track bank charges and AR adjustments for invoice discounting?",
            "fields": [
                "bank_charges",
                "accounts_receivable_credit",
                "accounts_receivable_discounted",
                "accounts_receivable_unpaid"
            ]
        },
        "output": "frappe.get_all('Invoice Discounting', fields=['bank_charges', 'accounts_receivable_credit', 'accounts_receivable_discounted', 'accounts_receivable_unpaid'])"
    },
    {
        "input": {
            "doctype": "Invoice Discounting",
            "question": "How can I log invoice-based funding and link it to bank and loan accounts?",
            "fields": [
                "short_term_loan",
                "bank_account"
            ]
        },
        "output": "frappe.get_all('Invoice Discounting', fields=['name', 'short_term_loan', 'bank_account'])"
    },
    {
        "input": {
            "doctype": "Invoice Discounting",
            "question": "Do we have any invoice discounting transactions with bank charges over 1000?",
            "fields": [
                "bank_charges"
            ]
        },
        "output": "frappe.get_list('Invoice Discounting', filters=[['bank_charges', '>', 1000]], fields=['name', 'bank_charges'])"
    },
    {
        "input": {
            "doctype": "Invoice Discounting",
            "question": "How many invoice discounting transactions are linked to the 'HSBC Loan' account?",
            "fields": [
                "short_term_loan"
            ]
        },
        "output": "frappe.db.count('Invoice Discounting', {'short_term_loan': 'HSBC Loan'})"
    },
    {
        "input": {
            "doctype": "Invoice Discounting",
            "question": "Fetch complete record for invoice discounting ID 'INV-DISC-0030'.",
            "fields": []
        },
        "output": "frappe.get_doc('Invoice Discounting', 'INV-DISC-0030')"
    },
    {
        "input": {
            "doctype": "Invoice Discounting",
            "question": "What is the loan account linked to transaction ID 'INV-DISC-0045'?",
            "fields": [
                "short_term_loan"
            ]
        },
        "output": "frappe.get_value('Invoice Discounting', 'INV-DISC-0045', 'short_term_loan')"
    },
    {
        "input": {
            "doctype": "Invoice Discounting",
            "question": "Do we have any invoice discounting record for account 'Citibank Receivables'?",
            "fields": [
                "short_term_loan"
            ]
        },
        "output": "frappe.db.exists('Invoice Discounting', {'short_term_loan': 'Citibank Receivables'})"
    },
    {
        "input": {
            "doctype": "Invoice Discounting",
            "question": "Can I record the loan period and interest details for invoice discounting?",
            "fields": [
                "loan_start_date",
                "loan_period",
                "loan_end_date"
            ]
        },
        "output": "frappe.get_all('Invoice Discounting', fields=['loan_start_date', 'loan_period', 'loan_end_date'])"
    },
    {
        "input": {
            "doctype": "Warehouse Type",
            "question": "Where can I define different categories for my warehouses like cold storage or transit?",
            "fields": [
                "name",
                "description"
            ]
        },
        "output": "frappe.get_list('Warehouse Type', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Warehouse Type",
            "question": "How do I add a label or classification for each warehouse we manage?",
            "fields": [
                "name",
                "description"
            ]
        },
        "output": "frappe.get_doc('Warehouse Type', 'Cold Storage')"
    },
    {
        "input": {
            "doctype": "Warehouse Type",
            "question": "Can I describe the function or specialization of a warehouse?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_all('Warehouse Type', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Warehouse Type",
            "question": "What doctype should I use to set a type like 'finished goods' or 'raw materials' warehouse?",
            "fields": [
                "name"
            ]
        },
        "output": "frappe.db.exists('Warehouse Type', {'name': 'Finished Goods'})"
    },
    {
        "input": {
            "doctype": "Warehouse Type",
            "question": "Where do I configure custom warehouse types with brief descriptions?",
            "fields": [
                "name",
                "description"
            ]
        },
        "output": "frappe.get_all('Warehouse Type', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Warehouse",
            "question": "How many warehouses are categorized under \u2018Cold Storage\u2019?",
            "fields": [
                "warehouse_type"
            ]
        },
        "output": "frappe.db.count('Warehouse', {'warehouse_type': 'Cold Storage'})"
    },
    {
        "input": {
            "doctype": "Warehouse",
            "question": "List all warehouses tagged as \u2018Transit\u2019 type.",
            "fields": [
                "name",
                "warehouse_type"
            ]
        },
        "output": "frappe.get_list('Warehouse', filters={'warehouse_type': 'Transit'}, fields=['name', 'warehouse_type'])"
    },
    {
        "input": {
            "doctype": "Warehouse",
            "question": "Fetch full details of warehouse named 'Central Depot'.",
            "fields": []
        },
        "output": "frappe.get_doc('Warehouse', 'Central Depot')"
    },
    {
        "input": {
            "doctype": "Warehouse",
            "question": "What are the names and types of all operational warehouses?",
            "fields": [
                "name",
                "warehouse_type"
            ]
        },
        "output": "frappe.get_all('Warehouse', fields=['name', 'warehouse_type'])"
    },
    {
        "input": {
            "doctype": "Warehouse",
            "question": "Which warehouses were created this month?",
            "fields": [
                "name",
                "creation"
            ]
        },
        "output": "frappe.get_all('Warehouse', filters=[['creation', '>=', frappe.utils.formatdate(frappe.utils.get_first_day(frappe.utils.nowdate()), 'yyyy-MM-dd')]], fields=['name', 'creation'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program",
            "question": "List all loyalty programs active between Jan and Mar 2025.",
            "fields": [
                "loyalty_program_name",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_all('Loyalty Program', filters={ 'from_date': ['>=', '2025-01-01'], 'to_date': ['<=', '2025-03-31'] }, fields=['loyalty_program_name', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program",
            "question": "Fetch full configuration for the program named 'Gold Rewards'.",
            "fields": []
        },
        "output": "frappe.get_doc('Loyalty Program', 'Gold Rewards')"
    },
    {
        "input": {
            "doctype": "Loyalty Program",
            "question": "How many loyalty programs have auto-enrollment enabled?",
            "fields": [
                "auto_opt_in"
            ]
        },
        "output": "frappe.db.count('Loyalty Program', {'auto_opt_in': 1})"
    },
    {
        "input": {
            "doctype": "Loyalty Program",
            "question": "Show all loyalty programs assigned to the 'Retail Customers' group.",
            "fields": [
                "loyalty_program_name",
                "customer_group"
            ]
        },
        "output": "frappe.get_list('Loyalty Program', filters={'customer_group': 'Retail Customers'}, fields=['loyalty_program_name', 'customer_group'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program",
            "question": "List loyalty programs that expire within 90 days of creation.",
            "fields": [
                "loyalty_program_name",
                "expiry_duration"
            ]
        },
        "output": "frappe.get_all('Loyalty Program', filters={ 'expiry_duration': ['<=', 90] }, fields=['loyalty_program_name', 'expiry_duration'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program",
            "question": "What is the expiry duration for the loyalty program 'Premium Gold'?",
            "fields": [
                "expiry_duration"
            ]
        },
        "output": "frappe.db.get_value('Loyalty Program', {'loyalty_program_name': 'Premium Gold'}, 'expiry_duration')"
    },
    {
        "input": {
            "doctype": "Loyalty Program",
            "question": "Which expense account is linked to the loyalty program 'Silver Tier'?",
            "fields": [
                "expense_account"
            ]
        },
        "output": "frappe.db.get_value('Loyalty Program', {'loyalty_program_name': 'Silver Tier'}, 'expense_account')"
    },
    {
        "input": {
            "doctype": "Loyalty Program",
            "question": "List all loyalty programs defined for company 'MyShop Corp'.",
            "fields": [
                "name",
                "company"
            ]
        },
        "output": "frappe.get_list('Loyalty Program', filters={'company': 'MyShop Corp'}, fields=['name', 'company'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program",
            "question": "Can you show all loyalty programs restricted to 'North Region'?",
            "fields": [
                "loyalty_program_name",
                "customer_territory"
            ]
        },
        "output": "frappe.get_list('Loyalty Program', filters={'customer_territory': 'North Region'}, fields=['loyalty_program_name'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program",
            "question": "How do I set up a new loyalty program for my customers?",
            "fields": [
                "loyalty_program_name",
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_doc('Loyalty Program', 'NEW-LOYALTY-2024')"
    },
    {
        "input": {
            "doctype": "Loyalty Program",
            "question": "Where can I configure different tiers for customer loyalty rewards?",
            "fields": [
                "loyalty_program_type",
                "rules"
            ]
        },
        "output": "frappe.get_all('Loyalty Program', fields=['name', 'loyalty_program_type', 'rules'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program",
            "question": "Can I automatically enroll all customers into a loyalty scheme?",
            "fields": [
                "auto_opt_in"
            ]
        },
        "output": "frappe.get_list('Loyalty Program', filters={'auto_opt_in': 1}, fields=['name', 'auto_opt_in'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program",
            "question": "Where do I set the date range during which a loyalty program is active?",
            "fields": [
                "from_date",
                "to_date"
            ]
        },
        "output": "frappe.get_all('Loyalty Program', fields=['name', 'from_date', 'to_date'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program",
            "question": "How can I define the conversion rate from currency to loyalty points?",
            "fields": [
                "conversion_factor"
            ]
        },
        "output": "frappe.get_all('Loyalty Program', fields=['name', 'conversion_factor'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program",
            "question": "Where can I specify the account that logs loyalty program expenses?",
            "fields": [
                "expense_account"
            ]
        },
        "output": "frappe.get_list('Loyalty Program', fields=['name', 'expense_account'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program",
            "question": "How do I define how long loyalty points are valid for?",
            "fields": [
                "expiry_duration"
            ]
        },
        "output": "frappe.get_value('Loyalty Program', {'name': 'LOYALTY-CLASSIC'}, 'expiry_duration')"
    },
    {
        "input": {
            "doctype": "Loyalty Program",
            "question": "Can I restrict a loyalty scheme to customers in a specific region?",
            "fields": [
                "customer_territory"
            ]
        },
        "output": "frappe.get_list('Loyalty Program', filters={'customer_territory': 'Gulf Region'}, fields=['name', 'customer_territory'])"
    },
    {
        "input": {
            "doctype": "Loyalty Program",
            "question": "How many loyalty programs are linked to the 'Retail Customers' group?",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.db.count('Loyalty Program', {'customer_group': 'Retail Customers'})"
    },
    {
        "input": {
            "doctype": "Loyalty Program",
            "question": "Fetch the full details of the 'Gold Tier' loyalty program.",
            "fields": []
        },
        "output": "frappe.get_doc('Loyalty Program', 'Gold Tier')"
    },
    {
        "input": {
            "doctype": "Shipping Rule",
            "question": "Where do I define the shipping cost rules for sales orders?",
            "fields": [
                "label",
                "shipping_amount"
            ]
        },
        "output": "frappe.get_all('Shipping Rule', fields=['name', 'label', 'shipping_amount'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule",
            "question": "How can I apply different shipping charges for different countries?",
            "fields": [
                "countries",
                "shipping_amount"
            ]
        },
        "output": "frappe.get_list('Shipping Rule', fields=['name', 'countries', 'shipping_amount'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule",
            "question": "Is it possible to calculate shipping based on the total weight of items?",
            "fields": [
                "calculate_based_on"
            ]
        },
        "output": "frappe.get_value('Shipping Rule', {'calculate_based_on': 'Net Weight'}, 'name')"
    },
    {
        "input": {
            "doctype": "Shipping Rule",
            "question": "How do I configure a shipping rule specific to purchases?",
            "fields": [
                "shipping_rule_type"
            ]
        },
        "output": "frappe.get_list('Shipping Rule', filters={'shipping_rule_type': 'Purchase'}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule",
            "question": "Can I set a fixed shipping fee regardless of order size?",
            "fields": [
                "calculate_based_on",
                "shipping_amount"
            ]
        },
        "output": "frappe.get_list('Shipping Rule', filters={'calculate_based_on': 'Fixed'}, fields=['name', 'shipping_amount'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule",
            "question": "Where can I disable a shipping rule that\u2019s no longer in use?",
            "fields": [
                "disabled"
            ]
        },
        "output": "frappe.get_all('Shipping Rule', filters={'disabled': 1}, fields=['name', 'disabled'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule",
            "question": "How do I link shipping charges to a specific cost center?",
            "fields": [
                "cost_center"
            ]
        },
        "output": "frappe.get_list('Shipping Rule', fields=['name', 'cost_center'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule",
            "question": "Where can I assign an account for booking shipping charges?",
            "fields": [
                "account"
            ]
        },
        "output": "frappe.get_all('Shipping Rule', fields=['name', 'account'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule",
            "question": "How do I set up a shipping rule that calculates charges based on the net total of the order?",
            "fields": [
                "calculate_based_on"
            ]
        },
        "output": "frappe.get_list('Shipping Rule', filters={'calculate_based_on': 'Net Total'}, fields=['name', 'calculate_based_on'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule",
            "question": "I want to apply different shipping fees for certain conditions. Where can I define those?",
            "fields": [
                "conditions"
            ]
        },
        "output": "frappe.get_all('Shipping Rule', fields=['name', 'conditions'])"
    },
    {
        "input": {
            "doctype": "Shipping Rule",
            "question": "Which form should I use to create a shipping rule for my company?",
            "fields": [
                "company"
            ]
        },
        "output": "frappe.get_doc('Shipping Rule', 'Standard Domestic')"
    },
    {
        "input": {
            "doctype": "Shipping Rule",
            "question": "How can I specify that a shipping rule only applies to certain countries?",
            "fields": [
                "countries"
            ]
        },
        "output": "frappe.get_list('Shipping Rule', filters={'countries': ['like', '%UAE%']}, fields=['name', 'countries'])"
    },
    {
        "input": {
            "doctype": "Communication Link",
            "question": "How can I associate a communication with a specific document in the system?",
            "fields": [
                "link_doctype",
                "link_name"
            ]
        },
        "output": "frappe.get_list('Communication Link', fields=['link_doctype', 'link_name'])"
    },
    {
        "input": {
            "doctype": "Communication Link",
            "question": "Where do I link an email or message to a particular invoice or sales order?",
            "fields": [
                "link_doctype",
                "link_name"
            ]
        },
        "output": "frappe.get_all('Communication Link', filters={'link_doctype': 'Sales Invoice'}, fields=['link_doctype', 'link_name'])"
    },
    {
        "input": {
            "doctype": "Communication Link",
            "question": "Is there a way to dynamically link a communication to different doctypes?",
            "fields": [
                "link_doctype"
            ]
        },
        "output": "frappe.get_list('Communication Link', fields=['link_doctype'])"
    },
    {
        "input": {
            "doctype": "Communication Link",
            "question": "How do I track which document a message was related to?",
            "fields": [
                "link_name"
            ]
        },
        "output": "frappe.get_list('Communication Link', fields=['link_name'])"
    },
    {
        "input": {
            "doctype": "Communication Link",
            "question": "Where can I view the title of the document linked to a communication?",
            "fields": [
                "link_title"
            ]
        },
        "output": "frappe.get_all('Communication Link', fields=['link_title'])"
    },
    {
        "input": {
            "doctype": "Communication Link",
            "question": "Can I create a link between a support email and a specific issue record?",
            "fields": [
                "link_doctype",
                "link_name"
            ]
        },
        "output": "frappe.get_all('Communication Link', filters={'link_doctype': 'Issue'}, fields=['link_doctype', 'link_name'])"
    },
    {
        "input": {
            "doctype": "Communication Link",
            "question": "Get the full details of the link between email and document INV-2025-0012.",
            "fields": []
        },
        "output": "frappe.get_doc('Communication Link', 'INV-2025-0012')"
    },
    {
        "input": {
            "doctype": "Communication Link",
            "question": "What's the title of the document linked to communication ID COM-00015?",
            "fields": [
                "link_title"
            ]
        },
        "output": "frappe.get_value('Communication Link', 'COM-00015', 'link_title')"
    },
    {
        "input": {
            "doctype": "Communication Link",
            "question": "How many communication links are tied to the 'Issue' doctype?",
            "fields": [
                "link_doctype"
            ]
        },
        "output": "frappe.db.count('Communication Link', {'link_doctype': 'Issue'})"
    },
    {
        "input": {
            "doctype": "Communication Link",
            "question": "Where do I link an email or message to a particular invoice or sales order?",
            "fields": [
                "link_doctype",
                "link_name"
            ]
        },
        "output": "frappe.get_all('Communication Link', filters={'link_doctype': 'Sales Order'}, fields=['link_name'])"
    },
    {
        "input": {
            "doctype": "Communication Link",
            "question": "How can I associate a communication with a specific document in the system?",
            "fields": [
                "link_doctype",
                "link_name",
                "link_title"
            ]
        },
        "output": "frappe.get_list('Communication Link', fields=['link_doctype', 'link_name', 'link_title'])"
    },
    {
        "input": {
            "doctype": "Communication Link",
            "question": "Get the full details of the link between email and document INV-2025-0012.",
            "fields": []
        },
        "output": "frappe.get_doc('Communication Link', 'INV-2025-0012')"
    },
    {
        "input": {
            "doctype": "Communication Link",
            "question": "What's the title of the document linked to communication ID COM-00015?",
            "fields": [
                "link_title"
            ]
        },
        "output": "frappe.get_value('Communication Link', 'COM-00015', 'link_title')"
    },
    {
        "input": {
            "doctype": "Communication Link",
            "question": "How many communication links are tied to the 'Issue' doctype?",
            "fields": [
                "link_doctype"
            ]
        },
        "output": "frappe.db.count('Communication Link', {'link_doctype': 'Issue'})"
    },
    {
        "input": {
            "doctype": "Issue Priority",
            "question": "Where do I define different priority levels for customer issues?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Issue Priority', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Issue Priority",
            "question": "How can I categorize support tickets as high, medium, or low urgency?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_all('Issue Priority', filters={'description': ['in', ['High', 'Medium', 'Low']]}, fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Issue Priority",
            "question": "Is there a way to set descriptions for different issue priorities in our helpdesk?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_all('Issue Priority', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Issue Priority",
            "question": "What is the description for priority label 'Urgent'?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_value('Issue Priority', {'name': 'Urgent'}, 'description')"
    },
    {
        "input": {
            "doctype": "Issue Priority",
            "question": "Get the full record for the issue priority labeled 'Critical'.",
            "fields": []
        },
        "output": "frappe.get_doc('Issue Priority', 'Critical')"
    },
    {
        "input": {
            "doctype": "Issue Priority",
            "question": "How many priority levels have a non-empty description?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.db.count('Issue Priority', [['description', '!=', '']])"
    },
    {
        "input": {
            "doctype": "Issue Priority",
            "question": "What do I use to define urgency levels for issues reported by customers?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_doc('Issue Priority', 'High')"
    },
    {
        "input": {
            "doctype": "Issue Priority",
            "question": "Can I customize the meaning of 'High Priority' or 'Low Priority' for our support team?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Issue Priority', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Issue Priority",
            "question": "Where can I update the description for critical issues in the system?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_all('Issue Priority', filters={'name': 'Critical'}, fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Issue Priority",
            "question": "How can I add a note or explanation for what each issue priority means?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Issue Priority', filters=[['description', 'is', 'set']], fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Issue Priority",
            "question": "Can I create a new custom priority level for incoming issues?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_doc('Issue Priority', 'Custom Priority')"
    },
    {
        "input": {
            "doctype": "Issue Priority",
            "question": "How many issue priority labels have a description added?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.db.count('Issue Priority', filters=[['description', '!=', '']])"
    },
    {
        "input": {
            "doctype": "Issue Priority",
            "question": "I want to check what note is linked to the 'Urgent' issue priority.",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.db.get_value('Issue Priority', 'Urgent', 'description')"
    },
    {
        "input": {
            "doctype": "Personal Data Download Request",
            "question": "How can a user request a copy of all their personal data?",
            "fields": [
                "user"
            ]
        },
        "output": "frappe.get_doc('Personal Data Download Request', 'REQ-USER-0001')"
    },
    {
        "input": {
            "doctype": "Personal Data Download Request",
            "question": "Where do I track user requests to download their personal information?",
            "fields": [
                "user",
                "user_name"
            ]
        },
        "output": "frappe.get_list('Personal Data Download Request', fields=['name', 'user', 'user_name'])"
    },
    {
        "input": {
            "doctype": "Personal Data Download Request",
            "question": "Where can I review historical personal data download requests?",
            "fields": [
                "user",
                "amended_from"
            ]
        },
        "output": "frappe.get_all('Personal Data Download Request', fields=['name', 'user', 'amended_from'])"
    },
    {
        "input": {
            "doctype": "Personal Data Download Request",
            "question": "How can I check if a user has already requested a data export?",
            "fields": [
                "user"
            ]
        },
        "output": "frappe.db.get_value('Personal Data Download Request', {'user': 'john@example.com'}, 'name')"
    },
    {
        "input": {
            "doctype": "Personal Data Download Request",
            "question": "I need to know which users requested their personal data. Where can I find this?",
            "fields": [
                "user"
            ]
        },
        "output": "frappe.get_list('Personal Data Download Request', fields=['user'])"
    },
    {
        "input": {
            "doctype": "Personal Data Download Request",
            "question": "Is there a way to log when a user requests to download their account data?",
            "fields": [
                "user",
                "amended_from"
            ]
        },
        "output": "frappe.get_all('Personal Data Download Request', filters=[['amended_from', 'is', 'set']], fields=['name', 'user', 'amended_from'])"
    },
    {
        "input": {
            "doctype": "Personal Data Download Request",
            "question": "How many users have submitted personal data download requests?",
            "fields": [
                "user"
            ]
        },
        "output": "frappe.db.count('Personal Data Download Request')"
    },
    {
        "input": {
            "doctype": "Personal Data Download Request",
            "question": "Can I track multiple personal data requests from the same user?",
            "fields": [
                "user"
            ]
        },
        "output": "frappe.get_list('Personal Data Download Request', filters={'user': 'john@example.com'}, fields=['name', 'user'])"
    },
    {
        "input": {
            "doctype": "Personal Data Download Request",
            "question": "Where are GDPR personal data access requests recorded?",
            "fields": [
                "user_name",
                "amended_from"
            ]
        },
        "output": "frappe.get_all('Personal Data Download Request', fields=['name', 'user_name', 'amended_from'])"
    },
    {
        "input": {
            "doctype": "Personal Data Download Request",
            "question": "Which doctype stores the name of the user requesting data export?",
            "fields": [
                "user_name"
            ]
        },
        "output": "frappe.db.get_value('Personal Data Download Request', {'user_name': 'John Doe'}, 'name')"
    },
    {
        "input": {
            "doctype": "Personal Data Download Request",
            "question": "Where do I store amendments to previous personal data requests?",
            "fields": [
                "amended_from"
            ]
        },
        "output": "frappe.get_list('Personal Data Download Request', filters=[['amended_from', 'is', 'set']], fields=['name', 'amended_from'])"
    },
    {
        "input": {
            "doctype": "Personal Data Download Request",
            "question": "Is there a record of personal data export requests initiated by users?",
            "fields": []
        },
        "output": "frappe.db.count('Personal Data Download Request')"
    },
    {
        "input": {
            "doctype": "Communication Link",
            "question": "How do I make sure each communication is properly mapped to its related record?",
            "fields": [
                "link_doctype",
                "link_name"
            ]
        },
        "output": "frappe.get_list('Communication Link', fields=['link_doctype', 'link_name'])"
    },
    {
        "input": {
            "doctype": "Communication Link",
            "question": "What do I use to define the connection between an email and a document like a task or lead?",
            "fields": [
                "link_doctype",
                "link_name"
            ]
        },
        "output": "frappe.get_all('Communication Link', filters={'link_doctype': ['in', ['Task', 'Lead']]}, fields=['link_doctype', 'link_name'])"
    },
    {
        "input": {
            "doctype": "Communication Link",
            "question": "How do I store the link title when associating a document with a message?",
            "fields": [
                "link_title"
            ]
        },
        "output": "frappe.get_list('Communication Link', fields=['link_title'])"
    },
    {
        "input": {
            "doctype": "Invoice Discounting",
            "question": "Where can I associate multiple invoices with a single invoice discounting record?",
            "fields": [
                "invoices"
            ]
        },
        "output": "frappe.get_doc('Invoice Discounting', 'INV-DISC-0005')"
    },
    {
        "input": {
            "doctype": "Invoice Discounting",
            "question": "How can I capture total discounting amount and track settlement status?",
            "fields": [
                "total_amount",
                "status"
            ]
        },
        "output": "frappe.get_all('Invoice Discounting', fields=['name', 'total_amount', 'status'])"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "How do I add a new issue type like 'Login Problem' or 'System Error'?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Issue Type', filters={'description': ['in', ['Login Problem', 'System Error']]}, fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "Where do I maintain a list of issue types for categorizing customer tickets?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.db.count('Issue Type')"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "Which form lets me add a short description for a new issue category?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_doc('Issue Type', 'New Category')"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "I need to update the descriptions for our existing support issue types. Where do I go?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Issue Type', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "Where can I configure common categories for helpdesk and IT support tickets?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_all('Issue Type', filters={'description': ['like', '%IT support%']}, fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "Is there a place to manage predefined issue categories for reporting purposes?",
            "fields": []
        },
        "output": "frappe.db.count('Issue Type')"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "What do I use to classify technical support tickets into types?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Issue Type', filters={'description': ['like', '%technical%']}, fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "How do I record different types of issues that users frequently report?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_all('Issue Type', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "I want to create a new category for product-related complaints. Which module should I use?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_doc('Issue Type', 'Product Complaints')"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "Can I group issues based on type for better analysis? Where do I do this?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Issue Type', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "Which form lets me add a short description for a new issue category?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_doc('Issue Type', 'New Category')"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "I need to update the descriptions for our existing support issue types. Where do I go?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Issue Type', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "Where can I configure common categories for helpdesk and IT support tickets?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_all('Issue Type', filters={'description': ['like', '%IT support%']}, fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "Is there a place to manage predefined issue categories for reporting purposes?",
            "fields": []
        },
        "output": "frappe.db.count('Issue Type')"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "What do I use to classify technical support tickets into types?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Issue Type', filters={'description': ['like', '%technical%']}, fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "How do I record different types of issues that users frequently report?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_all('Issue Type', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "I want to create a new category for product-related complaints. Which module should I use?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_doc('Issue Type', 'Product Complaints')"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "Can I group issues based on type for better analysis? Where do I do this?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Issue Type', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "Fetch the description of 'High Priority' issue type.",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.db.get_value('Issue Type', {'name': 'High Priority'}, 'description')"
    },
    {
        "input": {
            "doctype": "Communication Medium Timeslot",
            "question": "How can I define available time slots for our communication channels by employee group?",
            "fields": [
                "employee_group",
                "day_of_week",
                "from_time",
                "to_time"
            ]
        },
        "output": "frappe.get_list('Communication Medium Timeslot', fields=['employee_group', 'day_of_week', 'from_time', 'to_time'])"
    },
    {
        "input": {
            "doctype": "Communication Medium Timeslot",
            "question": "Where do I manage weekly availability schedules for employee groups in customer support?",
            "fields": [
                "employee_group",
                "day_of_week"
            ]
        },
        "output": "frappe.get_all('Communication Medium Timeslot', fields=['name', 'employee_group', 'day_of_week'])"
    },
    {
        "input": {
            "doctype": "Communication Medium Timeslot",
            "question": "Can I set different communication times for each employee group?",
            "fields": [
                "employee_group"
            ]
        },
        "output": "frappe.db.count('Communication Medium Timeslot', {'employee_group': 'Support Team'})"
    },
    {
        "input": {
            "doctype": "Communication Medium Timeslot",
            "question": "Which section lets me configure support team time slots for calls and chats?",
            "fields": []
        },
        "output": "frappe.get_doc('Communication Medium Timeslot', 'COMM-TIME-0003')"
    },
    {
        "input": {
            "doctype": "Communication Medium Timeslot",
            "question": "How do I specify working hours for each day of the week for an employee group?",
            "fields": [
                "day_of_week",
                "from_time",
                "to_time"
            ]
        },
        "output": "frappe.get_all('Communication Medium Timeslot', filters={'employee_group': 'Sales'}, fields=['day_of_week', 'from_time', 'to_time'])"
    },
    {
        "input": {
            "doctype": "Communication Medium Timeslot",
            "question": "Where can I assign a communication schedule to a specific employee group?",
            "fields": [
                "employee_group"
            ]
        },
        "output": "frappe.db.get_value('Communication Medium Timeslot', {'employee_group': 'Tech Team'}, 'day_of_week')"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "Which form lets me add a short description for a new issue category?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_doc('Issue Type', 'Login Problem')"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "Where can I configure common categories for helpdesk and IT support tickets?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Issue Type', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "Can I group issues based on type for better analysis?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.db.count('Issue Type')"
    },
    {
        "input": {
            "doctype": "Issue Type",
            "question": "Where do I maintain a list of issue types for categorizing customer tickets?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_all('Issue Type', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Communication Medium Timeslot",
            "question": "Is there a way to block communication times for certain employee groups?",
            "fields": [
                "employee_group"
            ]
        },
        "output": "frappe.get_list('Communication Medium Timeslot', filters={'employee_group': 'Support'}, fields=['name', 'employee_group'])"
    },
    {
        "input": {
            "doctype": "Communication Medium Timeslot",
            "question": "Can I manage weekly contact availability for different departments?",
            "fields": [
                "employee_group",
                "day_of_week"
            ]
        },
        "output": "frappe.get_all('Communication Medium Timeslot', fields=['name', 'employee_group', 'day_of_week'])"
    },
    {
        "input": {
            "doctype": "Communication Medium Timeslot",
            "question": "Where can I record the daily communication schedule for support teams?",
            "fields": [
                "day_of_week",
                "from_time",
                "to_time"
            ]
        },
        "output": "frappe.get_list('Communication Medium Timeslot', fields=['day_of_week', 'from_time', 'to_time'])"
    },
    {
        "input": {
            "doctype": "Communication Medium Timeslot",
            "question": "How do I ensure that our support staff are only contacted during certain hours?",
            "fields": [
                "employee_group"
            ]
        },
        "output": "frappe.db.count('Communication Medium Timeslot', {'employee_group': 'Customer Care'})"
    },
    {
        "input": {
            "doctype": "Communication Medium Timeslot",
            "question": "Which module allows assigning time-based communication slots to employee groups?",
            "fields": []
        },
        "output": "frappe.get_doc('Communication Medium Timeslot', 'COMM-TIME-0021')"
    },
    {
        "input": {
            "doctype": "Session Default",
            "question": "Where can I customize which document types are preloaded during a session?",
            "fields": [
                "ref_doctype"
            ]
        },
        "output": "frappe.get_list('Session Default', fields=['ref_doctype'])"
    },
    {
        "input": {
            "doctype": "Session Default",
            "question": "Is there a way to pre-select a document type for faster transactions?",
            "fields": [
                "ref_doctype"
            ]
        },
        "output": "frappe.db.get_value('Session Default', {'ref_doctype': 'Sales Order'}, 'ref_doctype')"
    },
    {
        "input": {
            "doctype": "Session Default",
            "question": "Where can I manage user-level defaults for document types?",
            "fields": [
                "ref_doctype"
            ]
        },
        "output": "frappe.get_all('Session Default', fields=['name', 'ref_doctype'])"
    },
    {
        "input": {
            "doctype": "Session Default",
            "question": "I want to simplify user navigation by setting default doctypes. Which doctype helps with this?",
            "fields": [
                "ref_doctype"
            ]
        },
        "output": "frappe.db.count('Session Default')"
    },
    {
        "input": {
            "doctype": "Communication Medium Timeslot",
            "question": "I want to define time slots for communication availability. Where do I set this up?",
            "fields": [
                "day_of_week",
                "from_time",
                "to_time"
            ]
        },
        "output": "frappe.get_list('Communication Medium Timeslot', fields=['day_of_week', 'from_time', 'to_time'])"
    },
    {
        "input": {
            "doctype": "Session Default",
            "question": "Which default document types are set for the current session?",
            "fields": [
                "ref_doctype"
            ]
        },
        "output": "frappe.get_list('Session Default', fields=['name', 'ref_doctype'])"
    },
    {
        "input": {
            "doctype": "Session Default",
            "question": "How can I find which user has a Sales Order set as their default?",
            "fields": [
                "ref_doctype"
            ]
        },
        "output": "frappe.get_list('Session Default', filters={'ref_doctype': 'Sales Order'}, fields=['name', 'ref_doctype'])"
    },
    {
        "input": {
            "doctype": "Session Default",
            "question": "Fetch the full record for a session default entry named 'SESSION-DEF-001'.",
            "fields": []
        },
        "output": "frappe.get_doc('Session Default', 'SESSION-DEF-001')"
    },
    {
        "input": {
            "doctype": "Session Default",
            "question": "How many session defaults have been set for the 'Purchase Order' doctype?",
            "fields": [
                "ref_doctype"
            ]
        },
        "output": "frappe.db.count('Session Default', {'ref_doctype': 'Purchase Order'})"
    },
    {
        "input": {
            "doctype": "Session Default",
            "question": "Get the default doctype reference for a specific session default entry.",
            "fields": [
                "ref_doctype"
            ]
        },
        "output": "frappe.get_value('Session Default', {'name': 'SESSION-DEF-001'}, 'ref_doctype')"
    },
    {
        "input": {
            "doctype": "Accounting Dimension Detail",
            "question": "List all configured dimension details used in accounting.",
            "fields": [
                "accounting_dimension"
            ]
        },
        "output": "frappe.get_all('Accounting Dimension Detail', fields=['name', 'accounting_dimension'])"
    },
    {
        "input": {
            "doctype": "Accounting Dimension Detail",
            "question": "How many active dimension mappings are configured for 'Cost Center'?",
            "fields": [
                "accounting_dimension"
            ]
        },
        "output": "frappe.db.count('Accounting Dimension Detail', {'accounting_dimension': 'Cost Center'})"
    },
    {
        "input": {
            "doctype": "Accounting Dimension Detail",
            "question": "Check what dimension is set in record 'ACC-DIM-0042'.",
            "fields": [
                "accounting_dimension"
            ]
        },
        "output": "frappe.get_value('Accounting Dimension Detail', {'name': 'ACC-DIM-0042'}, 'accounting_dimension')"
    },
    {
        "input": {
            "doctype": "Accounting Dimension Detail",
            "question": "Show all dimension filters set to restrict values.",
            "fields": [
                "apply_restriction_on_values"
            ]
        },
        "output": "frappe.get_list('Accounting Dimension Detail', filters={'apply_restriction_on_values': 1}, fields=['name', 'apply_restriction_on_values'])"
    },
    {
        "input": {
            "doctype": "Accounting Dimension Detail",
            "question": "Fetch full detail of a dimension mapping named 'ACC-DIM-0009'.",
            "fields": []
        },
        "output": "frappe.get_doc('Accounting Dimension Detail', 'ACC-DIM-0009')"
    },
    {
        "input": {
            "doctype": "Availability Of Slots",
            "question": "List all available weekday time slots.",
            "fields": [
                "day_of_week",
                "from_time",
                "to_time"
            ]
        },
        "output": "frappe.get_list('Availability Of Slots', filters={'day_of_week': ['in', ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']]}, fields=['day_of_week', 'from_time', 'to_time'])"
    },
    {
        "input": {
            "doctype": "Availability Of Slots",
            "question": "Get complete slot details for Friday evening hours.",
            "fields": []
        },
        "output": "frappe.get_doc('Availability Of Slots', 'FRI-EVE-001')"
    },
    {
        "input": {
            "doctype": "Availability Of Slots",
            "question": "How many Sunday slots are configured?",
            "fields": [
                "day_of_week"
            ]
        },
        "output": "frappe.db.count('Availability Of Slots', {'day_of_week': 'Sunday'})"
    },
    {
        "input": {
            "doctype": "Quick Stock Balance",
            "question": "Show me stock quantity and value for ITEM-002 at Warehouse A.",
            "fields": [
                "item",
                "warehouse",
                "qty",
                "value"
            ]
        },
        "output": "frappe.get_all('Quick Stock Balance', filters={'item': 'ITEM-002', 'warehouse': 'Warehouse A'}, fields=['item', 'qty', 'value'])"
    },
    {
        "input": {
            "doctype": "Quick Stock Balance",
            "question": "What's the current quantity of ITEM-001?",
            "fields": [
                "qty"
            ]
        },
        "output": "frappe.db.get_value('Quick Stock Balance', {'item': 'ITEM-001'}, 'qty')"
    },
    {
        "input": {
            "doctype": "Quick Stock Balance",
            "question": "Give me all barcode-based stock balance records.",
            "fields": [
                "item_barcode",
                "qty"
            ]
        },
        "output": "frappe.get_list('Quick Stock Balance', filters={'item_barcode': ['!=', '']}, fields=['item_barcode', 'qty'])"
    },
    {
        "input": {
            "doctype": "Quick Stock Balance",
            "question": "Get full details of stock balance for ITEM-005 on March 31, 2024.",
            "fields": []
        },
        "output": "frappe.get_doc('Quick Stock Balance', 'ITEM-005-MAR31')"
    },
    {
        "input": {
            "doctype": "POS Field",
            "question": "Show me all POS fields marked as mandatory.",
            "fields": [
                "fieldname",
                "reqd"
            ]
        },
        "output": "frappe.get_list('POS Field', filters={'reqd': 1}, fields=['fieldname', 'label', 'reqd'])"
    },
    {
        "input": {
            "doctype": "POS Field",
            "question": "What is the default value for the 'discount_code' POS field?",
            "fields": [
                "default_value"
            ]
        },
        "output": "frappe.db.get_value('POS Field', {'fieldname': 'discount_code'}, 'default_value')"
    },
    {
        "input": {
            "doctype": "POS Field",
            "question": "How many POS fields are marked read-only?",
            "fields": [
                "read_only"
            ]
        },
        "output": "frappe.db.count('POS Field', {'read_only': 1})"
    },
    {
        "input": {
            "doctype": "POS Field",
            "question": "Fetch complete configuration for the 'coupon_code' POS field.",
            "fields": []
        },
        "output": "frappe.get_doc('POS Field', 'coupon_code')"
    },
    {
        "input": {
            "doctype": "Quick Stock Balance",
            "question": "List all stock balance entries for warehouse WH-01.",
            "fields": [
                "warehouse",
                "item",
                "qty"
            ]
        },
        "output": "frappe.get_list('Quick Stock Balance', filters={'warehouse': 'WH-01'}, fields=['item', 'qty'])"
    },
    {
        "input": {
            "doctype": "Quick Stock Balance",
            "question": "Which items have stock quantity below 10 in Warehouse A?",
            "fields": [
                "warehouse",
                "qty",
                "item"
            ]
        },
        "output": "frappe.get_list('Quick Stock Balance', filters={ 'warehouse': 'Warehouse A', 'qty': ['<', 10] }, fields=['item', 'qty'])"
    },
    {
        "input": {
            "doctype": "Quick Stock Balance",
            "question": "Show all items with quantity and value in Warehouse B.",
            "fields": [
                "warehouse",
                "item",
                "qty",
                "value"
            ]
        },
        "output": "frappe.get_all('Quick Stock Balance', filters={'warehouse': 'Warehouse B'}, fields=['item', 'qty', 'value'])"
    },
    {
        "input": {
            "doctype": "Quick Stock Balance",
            "question": "Get full stock details for item ITEM-001 in warehouse WH-01.",
            "fields": []
        },
        "output": "frappe.get_doc('Quick Stock Balance', 'ITEM-001-WH-01')"
    },
    {
        "input": {
            "doctype": "Quick Stock Balance",
            "question": "What is the stock quantity for ITEM-X1 in Warehouse Central?",
            "fields": [
                "qty"
            ]
        },
        "output": "frappe.db.get_value('Quick Stock Balance', {'item': 'ITEM-X1', 'warehouse': 'Warehouse Central'}, 'qty')"
    },
    {
        "input": {
            "doctype": "Quick Stock Balance",
            "question": "How many records exist for Warehouse C with non-zero stock?",
            "fields": [
                "warehouse",
                "qty"
            ]
        },
        "output": "frappe.db.count('Quick Stock Balance', {'warehouse': 'Warehouse C', 'qty': ['>', 0]})"
    },
    {
        "input": {
            "doctype": "Quick Stock Balance",
            "question": "List items with barcode starting with '987' in Warehouse 5.",
            "fields": [
                "item_barcode",
                "warehouse"
            ]
        },
        "output": "frappe.get_list('Quick Stock Balance', filters={ 'item_barcode': ['like', '987%'], 'warehouse': 'Warehouse 5' }, fields=['item', 'qty'])"
    },
    {
        "input": {
            "doctype": "Quick Stock Balance",
            "question": "What\u2019s the stock value for ITEM-200 on 2025-04-30?",
            "fields": [
                "item",
                "value",
                "date"
            ]
        },
        "output": "frappe.get_list('Quick Stock Balance', filters={ 'item': 'ITEM-200', 'date': '2025-04-30' }, fields=['value'])"
    },
    {
        "input": {
            "doctype": "Quick Stock Balance",
            "question": "Find all stock balances for item ITEM-Z across all warehouses with images.",
            "fields": [
                "item",
                "image"
            ]
        },
        "output": "frappe.get_all('Quick Stock Balance', filters={'item': 'ITEM-Z'}, fields=['warehouse', 'qty', 'image'])"
    },
    {
        "input": {
            "doctype": "Quick Stock Balance",
            "question": "Give me the description and image for ITEM-XYZ.",
            "fields": [
                "item_description",
                "image"
            ]
        },
        "output": "frappe.get_list('Quick Stock Balance', filters={'item': 'ITEM-XYZ'}, fields=['item_description', 'image'])"
    },
    {
        "input": {
            "doctype": "Quick Stock Balance",
            "question": "Which report gives me item stock value along with its description and image?",
            "fields": [
                "item_name",
                "item_description",
                "image",
                "value"
            ]
        },
        "output": "frappe.get_list('Quick Stock Balance', fields=['item_name', 'item_description', 'image', 'value'])"
    },
    {
        "input": {
            "doctype": "Quick Stock Balance",
            "question": "How many items have quantity available in warehouse 'Main Store'?",
            "fields": [
                "warehouse",
                "qty"
            ]
        },
        "output": "frappe.db.count('Quick Stock Balance', filters={'warehouse': 'Main Store', 'qty': ['>', 0]})"
    },
    {
        "input": {
            "doctype": "Quick Stock Balance",
            "question": "What's the quantity and stock value of item 'ITEM-101' on 2025-04-30?",
            "fields": [
                "item",
                "date",
                "qty",
                "value"
            ]
        },
        "output": "frappe.get_list('Quick Stock Balance', filters={'item': 'ITEM-101', 'date': '2025-04-30'}, fields=['qty', 'value'])"
    },
    {
        "input": {
            "doctype": "Quick Stock Balance",
            "question": "Fetch full details of item stock using barcode '9876543210'.",
            "fields": [
                "item_barcode"
            ]
        },
        "output": "frappe.get_doc('Quick Stock Balance', {'item_barcode': '9876543210'})"
    },
    {
        "input": {
            "doctype": "Quick Stock Balance",
            "question": "Get quantity of item 'ITEM-202' available in 'Cold Storage'.",
            "fields": [
                "item",
                "warehouse",
                "qty"
            ]
        },
        "output": "frappe.get_value('Quick Stock Balance', {'item': 'ITEM-202', 'warehouse': 'Cold Storage'}, 'qty')"
    },
    {
        "input": {
            "doctype": "Tag",
            "question": "How do I create a new tag to categorize my records?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_doc('Tag', 'New Category')"
    },
    {
        "input": {
            "doctype": "Tag",
            "question": "Which doctype lets me define labels or tags for better grouping?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Tag', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Tag",
            "question": "Where do I add a tag description for my items or documents?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_all('Tag', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Tag",
            "question": "Which tag is used to label important documents?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.db.get_value('Tag', {'description': 'Important'}, 'name')"
    },
    {
        "input": {
            "doctype": "Tag",
            "question": "How many tags have the word 'Sales' in their description?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.db.count('Tag', filters=[['description', 'like', '%Sales%']])"
    },
    {
        "input": {
            "doctype": "Tag",
            "question": "Where can I edit the text for a tag label used in CRM records?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_all('Tag', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Tag",
            "question": "I want to reuse a label for filtering records\u2014where do I define that?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Tag', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Tag",
            "question": "How do I store keywords that describe a record for easier search?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_doc('Tag', 'CRM-Search-Helper')"
    },
    {
        "input": {
            "doctype": "Tag",
            "question": "Which doctype is responsible for holding descriptive keywords or labels?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_all('Tag', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Tag",
            "question": "Where do I define a tag used for document categorization?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_doc('Tag', 'Document Category')"
    },
    {
        "input": {
            "doctype": "Tag",
            "question": "Can I create a short description for document tags?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_list('Tag', fields=['name', 'description'])"
    },
    {
        "input": {
            "doctype": "Tag",
            "question": "Where do I update the meaning behind tags I assign to records?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.get_doc('Tag', 'Sales Lead Tags')"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "Where do I store the email address of a contact?",
            "fields": [
                "email_id"
            ]
        },
        "output": "frappe.get_list('Contact Email', fields=['name', 'email_id'])"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "How do I mark an email as the primary one for a contact?",
            "fields": [
                "email_id",
                "is_primary"
            ]
        },
        "output": "frappe.get_doc('Contact Email', 'alessia.ramires@azurotech.mx')"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "Which form holds the email ID information for a customer or supplier?",
            "fields": [
                "email_id"
            ]
        },
        "output": "frappe.get_all('Contact Email', fields=['name', 'email_id'])"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "I need to check if a contact has a primary email set\u2014where do I find that?",
            "fields": [
                "is_primary"
            ]
        },
        "output": "frappe.get_list('Contact Email', filters={'is_primary': 1}, fields=['name', 'email_id'])"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "How can I associate an email address with a contact record?",
            "fields": [
                "email_id"
            ]
        },
        "output": "frappe.get_doc('Contact Email', 'sales.ops@halvorsen-global.co.uk')"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "Where do I manage the primary and secondary emails of a contact?",
            "fields": [
                "email_id",
                "is_primary"
            ]
        },
        "output": "frappe.get_all('Contact Email', fields=['name', 'email_id', 'is_primary'])"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "Can I set a default email for each contact in the system?",
            "fields": [
                "email_id",
                "is_primary"
            ]
        },
        "output": "frappe.db.get_value('Contact Email', {'is_primary': 1}, 'email_id')"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "How many contacts have their primary email set?",
            "fields": [
                "is_primary"
            ]
        },
        "output": "frappe.db.count('Contact Email', {'is_primary': 1})"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "Where is the email address of each contact stored?",
            "fields": [
                "email_id"
            ]
        },
        "output": "frappe.get_list('Contact Email', fields=['name', 'email_id'])"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "How can I identify if 'lia.hoffman@kavotech.nl' is marked as the primary email?",
            "fields": [
                "email_id",
                "is_primary"
            ]
        },
        "output": "frappe.get_doc('Contact Email', 'lia.hoffman@kavotech.nl')"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "Which record shows the email ID linked to a supplier or customer contact?",
            "fields": [
                "email_id"
            ]
        },
        "output": "frappe.get_all('Contact Email', fields=['name', 'email_id'])"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "How can I list all contact emails that are marked as primary?",
            "fields": [
                "is_primary"
            ]
        },
        "output": "frappe.get_list('Contact Email', filters={'is_primary': 1}, fields=['name', 'email_id'])"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "I want to associate 'ravi.natarajan@solaceinstruments.in' with a contact\u2014how can I fetch the record?",
            "fields": [
                "email_id"
            ]
        },
        "output": "frappe.get_doc('Contact Email', 'ravi.natarajan@solaceinstruments.in')"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "Where can I view all contact emails including whether they are primary?",
            "fields": [
                "email_id",
                "is_primary"
            ]
        },
        "output": "frappe.get_all('Contact Email', fields=['name', 'email_id', 'is_primary'])"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "Can I retrieve the default email set as primary for any contact?",
            "fields": [
                "email_id",
                "is_primary"
            ]
        },
        "output": "frappe.db.get_value('Contact Email', {'is_primary': 1}, 'email_id')"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "How many contacts currently have their email marked as primary?",
            "fields": [
                "is_primary"
            ]
        },
        "output": "frappe.db.count('Contact Email', {'is_primary': 1})"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "What doctype should I use to store contact email addresses?",
            "fields": [
                "email_id"
            ]
        },
        "output": "frappe.get_all('Contact Email', fields=['name', 'email_id'])"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "Where can I find or set an email marked as primary for a contact?",
            "fields": [
                "email_id",
                "is_primary"
            ]
        },
        "output": "frappe.get_list('Contact Email', filters={'is_primary': 1}, fields=['email_id'])"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "Where can I view all email addresses linked to a contact?",
            "fields": [
                "email_id"
            ]
        },
        "output": "frappe.get_list('Contact Email', fields=['email_id'])"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "Which doctype lets me record multiple email IDs for one person?",
            "fields": [
                "email_id"
            ]
        },
        "output": "frappe.db.count('Contact Email', {})"
    },
    {
        "input": {
            "doctype": "Assignment Rule Day",
            "question": "How can I assign tasks based on specific weekdays?",
            "fields": [
                "day"
            ]
        },
        "output": "frappe.get_all('Assignment Rule Day', fields=['name', 'day'])"
    },
    {
        "input": {
            "doctype": "Assignment Rule Day",
            "question": "Where do I define which day of the week a rule should apply?",
            "fields": [
                "day"
            ]
        },
        "output": "frappe.get_list('Assignment Rule Day', fields=['name', 'day'])"
    },
    {
        "input": {
            "doctype": "Assignment Rule Day",
            "question": "I want a rule to only trigger on Fridays\u2014how can I do that?",
            "fields": [
                "day"
            ]
        },
        "output": "frappe.get_list('Assignment Rule Day', filters={'day': 'Friday'}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Assignment Rule Day",
            "question": "Which form lets me pick a specific day for assignment logic?",
            "fields": [
                "day"
            ]
        },
        "output": "frappe.get_doc('Assignment Rule Day', 'WEEKDAY-LOGIC')"
    },
    {
        "input": {
            "doctype": "Assignment Rule Day",
            "question": "Where can I list out weekdays for auto-assignment settings?",
            "fields": [
                "day"
            ]
        },
        "output": "frappe.db.get_value('Assignment Rule Day', {'day': 'Monday'}, 'day')"
    },
    {
        "input": {
            "doctype": "Assignment Rule Day",
            "question": "How do I configure weekday-wise distribution of tasks?",
            "fields": [
                "day"
            ]
        },
        "output": "frappe.db.count('Assignment Rule Day', {'day': ['in', ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']]})"
    },
    {
        "input": {
            "doctype": "Assignment Rule Day",
            "question": "Is there a way to restrict assignments to weekdays only?",
            "fields": [
                "day"
            ]
        },
        "output": "frappe.get_list('Assignment Rule Day', filters={'day': ['in', ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']]}, fields=['name', 'day'])"
    },
    {
        "input": {
            "doctype": "Assignment Rule Day",
            "question": "Where do I add days to control which day rules should trigger?",
            "fields": [
                "day"
            ]
        },
        "output": "frappe.get_all('Assignment Rule Day', fields=['name', 'day'])"
    },
    {
        "input": {
            "doctype": "Assignment Rule Day",
            "question": "What\u2019s the doctype for configuring assignment schedule by day?",
            "fields": []
        },
        "output": "frappe.get_doc('Assignment Rule Day', 'ASSIGN-SCHEDULE-WEEKDAY')"
    },
    {
        "input": {
            "doctype": "Assignment Rule Day",
            "question": "I need to ensure some assignments only happen on Tuesdays\u2014how can I do this?",
            "fields": [
                "day"
            ]
        },
        "output": "frappe.get_list('Assignment Rule Day', filters={'day': 'Tuesday'}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "Assignment Rule Day",
            "question": "Where can I specify the working day for task distribution rules?",
            "fields": [
                "day"
            ]
        },
        "output": "frappe.db.get_value('Assignment Rule Day', {'day': 'Wednesday'}, 'day')"
    },
    {
        "input": {
            "doctype": "Assignment Rule Day",
            "question": "How can I control assignments by weekday using rules?",
            "fields": [
                "day"
            ]
        },
        "output": "frappe.db.count('Assignment Rule Day', {'day': ['in', ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']]})"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "Where do I store the email address of a contact?",
            "fields": [
                "email_id"
            ]
        },
        "output": "frappe.get_list('Contact Email', fields=['name', 'email_id'])"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "How do I mark an email as the primary one for a contact?",
            "fields": [
                "email_id",
                "is_primary"
            ]
        },
        "output": "frappe.get_list('Contact Email', filters={'is_primary': 1}, fields=['email_id'])"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "Which form holds the email ID information for a customer or supplier?",
            "fields": [
                "email_id"
            ]
        },
        "output": "frappe.get_all('Contact Email', fields=['name', 'email_id'])"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "I need to check if a contact has a primary email set\u2014where do I find that?",
            "fields": [
                "is_primary"
            ]
        },
        "output": "frappe.db.get_value('Contact Email', {'is_primary': 1}, 'email_id')"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "How can I associate an email address with a contact record?",
            "fields": [
                "email_id"
            ]
        },
        "output": "frappe.get_doc('Contact Email', 'john.doe@example.com')"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "Where do I manage the primary and secondary emails of a contact?",
            "fields": [
                "email_id",
                "is_primary"
            ]
        },
        "output": "frappe.get_all('Contact Email', fields=['email_id', 'is_primary'])"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "Can I set a default email for each contact in the system?",
            "fields": [
                "email_id",
                "is_primary"
            ]
        },
        "output": "frappe.get_list('Contact Email', filters={'is_primary': 1}, fields=['email_id'])"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "Where can I find or set an email marked as primary for a contact?",
            "fields": [
                "is_primary"
            ]
        },
        "output": "frappe.db.count('Contact Email', {'is_primary': 1})"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "Where can I view all email addresses linked to a contact?",
            "fields": [
                "email_id"
            ]
        },
        "output": "frappe.get_list('Contact Email', fields=['email_id'])"
    },
    {
        "input": {
            "doctype": "Contact Email",
            "question": "Which doctype lets me record multiple email IDs for one person?",
            "fields": [
                "email_id"
            ]
        },
        "output": "frappe.get_doc('Contact Email', 'multi@example.com')"
    },
    {
        "input": {
            "doctype": "UAE VAT Settings",
            "question": "How can I view the VAT accounts linked to my company in the UAE?",
            "fields": [
                "company",
                "uae_vat_accounts"
            ]
        },
        "output": "frappe.get_list('UAE VAT Settings', filters={'company': 'My Company'}, fields=['uae_vat_accounts'])"
    },
    {
        "input": {
            "doctype": "UAE VAT Settings",
            "question": "Can I add custom VAT accounts for the UAE in the settings?",
            "fields": [
                "uae_vat_accounts"
            ]
        },
        "output": "frappe.get_all('UAE VAT Settings', fields=['name', 'uae_vat_accounts'])"
    },
    {
        "input": {
            "doctype": "UAE VAT Settings",
            "question": "How do I configure the default VAT accounts for the UAE?",
            "fields": [
                "company",
                "uae_vat_accounts"
            ]
        },
        "output": "frappe.get_doc('UAE VAT Settings', 'DEFAULT-UAE-VAT')"
    },
    {
        "input": {
            "doctype": "UAE VAT Settings",
            "question": "How do I update the VAT accounts after setting them up?",
            "fields": [
                "company",
                "uae_vat_accounts"
            ]
        },
        "output": "frappe.get_list('UAE VAT Settings', fields=['name', 'uae_vat_accounts'])"
    },
    {
        "input": {
            "doctype": "UAE VAT Settings",
            "question": "Can I assign a VAT account to a specific company in the UAE VAT settings?",
            "fields": [
                "company"
            ]
        },
        "output": "frappe.db.get_value('UAE VAT Settings', {'company': 'ABC Holdings'}, 'uae_vat_accounts')"
    },
    {
        "input": {
            "doctype": "UAE VAT Settings",
            "question": "Is there a way to check which VAT accounts are associated with each company in the UAE?",
            "fields": [
                "company",
                "uae_vat_accounts"
            ]
        },
        "output": "frappe.get_all('UAE VAT Settings', fields=['company', 'uae_vat_accounts'])"
    },
    {
        "input": {
            "doctype": "UAE VAT Settings",
            "question": "Can I remove a VAT account from the UAE VAT settings?",
            "fields": [
                "company",
                "uae_vat_accounts"
            ]
        },
        "output": "frappe.get_doc('UAE VAT Settings', 'REMOVE-VAT-2024')"
    },
    {
        "input": {
            "doctype": "UAE VAT Settings",
            "question": "How do I add a new company to the UAE VAT settings?",
            "fields": [
                "company"
            ]
        },
        "output": "frappe.get_doc('UAE VAT Settings', 'NEW-COMPANY-VAT')"
    },
    {
        "input": {
            "doctype": "UAE VAT Settings",
            "question": "Is it possible to manage multiple UAE VAT accounts under a single company?",
            "fields": [
                "company",
                "uae_vat_accounts"
            ]
        },
        "output": "frappe.db.count('UAE VAT Settings', {'company': 'ABC Holdings'})"
    },
    {
        "input": {
            "doctype": "UAE VAT Settings",
            "question": "How do I link my company with the UAE VAT accounts?",
            "fields": [
                "company",
                "uae_vat_accounts"
            ]
        },
        "output": "frappe.get_list('UAE VAT Settings', filters={'company': 'ABC Holdings'}, fields=['uae_vat_accounts'])"
    },
    {
        "input": {
            "doctype": "Voice Call Settings",
            "question": "How do I set up voice call settings for my user?",
            "fields": [
                "user",
                "call_receiving_device"
            ]
        },
        "output": "frappe.get_doc('Voice Call Settings', {'user': 'demo@example.com'})"
    },
    {
        "input": {
            "doctype": "Voice Call Settings",
            "question": "Can I choose the device through which voice calls are received?",
            "fields": [
                "user",
                "call_receiving_device"
            ]
        },
        "output": "frappe.get_list('Voice Call Settings', fields=['user', 'call_receiving_device'])"
    },
    {
        "input": {
            "doctype": "Voice Call Settings",
            "question": "How do I configure the greeting message for incoming calls?",
            "fields": [
                "user",
                "greeting_message"
            ]
        },
        "output": "frappe.get_all('Voice Call Settings', fields=['user', 'greeting_message'])"
    },
    {
        "input": {
            "doctype": "Voice Call Settings",
            "question": "Is it possible to set a message for when the agent is busy?",
            "fields": [
                "agent_busy_message"
            ]
        },
        "output": "frappe.get_all('Voice Call Settings', fields=['user', 'agent_busy_message'])"
    },
    {
        "input": {
            "doctype": "Voice Call Settings",
            "question": "Can I configure an unavailable message for when the agent cannot take a call?",
            "fields": [
                "agent_unavailable_message"
            ]
        },
        "output": "frappe.get_list('Voice Call Settings', fields=['user', 'agent_unavailable_message'])"
    },
    {
        "input": {
            "doctype": "Voice Call Settings",
            "question": "Which device has been set to receive calls for user 'agent1@example.com'?",
            "fields": [
                "user",
                "call_receiving_device"
            ]
        },
        "output": "frappe.db.get_value('Voice Call Settings', {'user': 'agent1@example.com'}, 'call_receiving_device')"
    },
    {
        "input": {
            "doctype": "Voice Call Settings",
            "question": "How many users have configured a custom busy message?",
            "fields": [
                "agent_busy_message"
            ]
        },
        "output": "frappe.db.count('Voice Call Settings', {'agent_busy_message': ['!=', '']})"
    },
    {
        "input": {
            "doctype": "UAE VAT Settings",
            "question": "Can I assign specific VAT rates to the accounts in the UAE VAT settings?",
            "fields": [
                "uae_vat_accounts"
            ]
        },
        "output": "frappe.get_all('UAE VAT Settings', fields=['company', 'uae_vat_accounts'])"
    },
    {
        "input": {
            "doctype": "UAE VAT Settings",
            "question": "How do I view the VAT accounts linked to my company in the UAE?",
            "fields": [
                "company",
                "uae_vat_accounts"
            ]
        },
        "output": "frappe.get_list('UAE VAT Settings', filters={'company': 'Alpha Tech LLC'}, fields=['uae_vat_accounts'])"
    },
    {
        "input": {
            "doctype": "UAE VAT Settings",
            "question": "Is it possible to manage multiple UAE VAT accounts under a single company?",
            "fields": [
                "company"
            ]
        },
        "output": "frappe.db.count('UAE VAT Settings', {'company': 'Alpha Tech LLC'})"
    },
    {
        "input": {
            "doctype": "UAE VAT Settings",
            "question": "Which VAT accounts are currently active for 'Global Enterprises'?",
            "fields": [
                "company",
                "uae_vat_accounts"
            ]
        },
        "output": "frappe.db.get_value('UAE VAT Settings', {'company': 'Global Enterprises'}, 'uae_vat_accounts')"
    },
    {
        "input": {
            "doctype": "UAE VAT Settings",
            "question": "How do I retrieve the full VAT setup record for 'Inspire Group FZ LLC'?",
            "fields": [
                "company"
            ]
        },
        "output": "frappe.get_doc('UAE VAT Settings', {'company': 'Inspire Group FZ LLC'})"
    },
    {
        "input": {
            "doctype": "UAE VAT Settings",
            "question": "Can I list all VAT configurations across companies?",
            "fields": [
                "company",
                "uae_vat_accounts"
            ]
        },
        "output": "frappe.get_all('UAE VAT Settings', fields=['company', 'uae_vat_accounts'])"
    },
    {
        "input": {
            "doctype": "UAE VAT Settings",
            "question": "I want to update or review VAT account assignments per company. Where should I query?",
            "fields": [
                "company",
                "uae_vat_accounts"
            ]
        },
        "output": "frappe.get_list('UAE VAT Settings', fields=['company', 'uae_vat_accounts'])"
    },
    {
        "input": {
            "doctype": "Voice Call Settings",
            "question": "How do I update the call receiving device for a specific user?",
            "fields": [
                "user",
                "call_receiving_device"
            ]
        },
        "output": "frappe.get_list('Voice Call Settings', filters={'user': 'leena.wu@skybridgetele.cn'}, fields=['call_receiving_device'])"
    },
    {
        "input": {
            "doctype": "Voice Call Settings",
            "question": "Can I assign different devices for different users to receive voice calls?",
            "fields": [
                "user",
                "call_receiving_device"
            ]
        },
        "output": "frappe.get_all('Voice Call Settings', fields=['user', 'call_receiving_device'])"
    },
    {
        "input": {
            "doctype": "Voice Call Settings",
            "question": "Is it possible to set up a custom message for when the agent is unavailable?",
            "fields": [
                "agent_unavailable_message"
            ]
        },
        "output": "frappe.get_all('Voice Call Settings', fields=['user', 'agent_unavailable_message'])"
    },
    {
        "input": {
            "doctype": "Voice Call Settings",
            "question": "What happens if I do not set a greeting message for voice calls?",
            "fields": [
                "greeting_message"
            ]
        },
        "output": "frappe.db.count('Voice Call Settings', {'greeting_message': ''})"
    },
    {
        "input": {
            "doctype": "Voice Call Settings",
            "question": "How can I enable or disable the greeting message feature?",
            "fields": [
                "user",
                "greeting_message"
            ]
        },
        "output": "frappe.get_value('Voice Call Settings', {'user': 'fatima.zeidan@voxline.ae'}, 'greeting_message')"
    },
    {
        "input": {
            "doctype": "Voice Call Settings",
            "question": "How can I change the greeting message after it has been set?",
            "fields": [
                "user"
            ]
        },
        "output": "frappe.get_doc('Voice Call Settings', {'user': 'sysadmin@aurelink.io'})"
    },
    {
        "input": {
            "doctype": "Voice Call Settings",
            "question": "How can I change the greeting message after it has been set?",
            "fields": [
                "user"
            ]
        },
        "output": "frappe.get_doc('Voice Call Settings', {'user': 'sysadmin@aurelink.io'})"
    },
    {
        "input": {
            "doctype": "Voice Call Settings",
            "question": "What happens if I do not set a greeting message for voice calls?",
            "fields": [
                "greeting_message"
            ]
        },
        "output": "frappe.get_all('Voice Call Settings', filters={'greeting_message': ''}, fields=['user', 'greeting_message'])"
    },
    {
        "input": {
            "doctype": "Voice Call Settings",
            "question": "How many users have set a custom agent unavailable message?",
            "fields": [
                "agent_unavailable_message"
            ]
        },
        "output": "frappe.db.count('Voice Call Settings', {'agent_unavailable_message': ['!=', '']})"
    },
    {
        "input": {
            "doctype": "Auto Repeat",
            "question": "How can I update the status of an auto-repeat task?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_doc('Auto Repeat', {'status': 'Active'})"
    },
    {
        "input": {
            "doctype": "Auto Repeat",
            "question": "Fetch all auto-repeat tasks ending this month.",
            "fields": [
                "end_date"
            ]
        },
        "output": "frappe.get_list('Auto Repeat', filters={ 'end_date': ['between', ['2025-05-01', '2025-05-31']] }, fields=['reference_document', 'status', 'end_date'])"
    },
    {
        "input": {
            "doctype": "Auto Repeat",
            "question": "How many auto repeat records are currently disabled?",
            "fields": [
                "disabled"
            ]
        },
        "output": "frappe.db.count('Auto Repeat', {'disabled': 1})"
    },
    {
        "input": {
            "doctype": "Workspace Chart",
            "question": "How can I share a workspace chart with other users?",
            "fields": [
                "chart_name"
            ]
        },
        "output": "frappe.get_doc('Workspace Chart', 'Sales Overview')"
    },
    {
        "input": {
            "doctype": "Workspace Chart",
            "question": "Where can I find all charts with label 'Accounts'?",
            "fields": [
                "label"
            ]
        },
        "output": "frappe.get_list('Workspace Chart', filters={'label': 'Accounts'}, fields=['chart_name', 'label'])"
    },
    {
        "input": {
            "doctype": "User Select Document Type",
            "question": "Can I assign different document types to different users?",
            "fields": [
                "document_type"
            ]
        },
        "output": "frappe.get_list('User Select Document Type', fields=['name', 'document_type'])"
    },
    {
        "input": {
            "doctype": "User Select Document Type",
            "question": "How many document types are currently assigned to users?",
            "fields": [
                "document_type"
            ]
        },
        "output": "frappe.db.count('User Select Document Type', {'document_type': ['!=', '']})"
    },
    {
        "input": {
            "doctype": "Voice Call Settings",
            "question": "Retrieve the call receiving device used by a specific user.",
            "fields": [
                "user",
                "call_receiving_device"
            ]
        },
        "output": "frappe.db.get_value('Voice Call Settings', {'user': 'admin@company.com'}, 'call_receiving_device')"
    },
    {
        "input": {
            "doctype": "Auto Repeat",
            "question": "Get all auto repeat templates submitted with 'Weekly' frequency.",
            "fields": [
                "frequency"
            ]
        },
        "output": "frappe.get_all('Auto Repeat', filters={'frequency': 'Weekly'}, fields=['reference_doctype', 'start_date'])"
    },
    {
        "input": {
            "doctype": "User Select Document Type",
            "question": "How do I view a list of document types available for a user?",
            "fields": [
                "document_type"
            ]
        },
        "output": "frappe.get_list('User Select Document Type', fields=['document_type'])"
    },
    {
        "input": {
            "doctype": "User Select Document Type",
            "question": "How do I assign new document types to a user in ERPNext?",
            "fields": [
                "document_type"
            ]
        },
        "output": "frappe.get_doc('User Select Document Type', 'Sales Invoice')"
    },
    {
        "input": {
            "doctype": "User Select Document Type",
            "question": "Can I delete a document type assignment from a user?",
            "fields": [
                "document_type"
            ]
        },
        "output": "frappe.get_all('User Select Document Type', filters={'document_type': 'Purchase Order'}, fields=['name'])"
    },
    {
        "input": {
            "doctype": "User Select Document Type",
            "question": "How do I manage permissions for selected document types?",
            "fields": [
                "document_type"
            ]
        },
        "output": "frappe.get_list('User Select Document Type', filters={'document_type': ['!=', '']}, fields=['document_type'])"
    },
    {
        "input": {
            "doctype": "User Select Document Type",
            "question": "Can I assign multiple document types to a single user?",
            "fields": [
                "document_type"
            ]
        },
        "output": "frappe.db.get_value('User Select Document Type', {'document_type': 'Quotation'}, 'document_type')"
    },
    {
        "input": {
            "doctype": "User Select Document Type",
            "question": "How do I restrict users to view only specific document types?",
            "fields": [
                "document_type"
            ]
        },
        "output": "frappe.get_doc('User Select Document Type', {'document_type': 'Delivery Note'})"
    },
    {
        "input": {
            "doctype": "User Select Document Type",
            "question": "Can I modify the allowed document types for a user after initial assignment?",
            "fields": [
                "document_type"
            ]
        },
        "output": "frappe.get_all('User Select Document Type', filters={'document_type': 'Sales Order'}, fields=['document_type'])"
    },
    {
        "input": {
            "doctype": "User Select Document Type",
            "question": "How do I audit document type access by users?",
            "fields": [
                "document_type"
            ]
        },
        "output": "frappe.db.count('User Select Document Type', {'document_type': ['!=', '']})"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "How do I retrieve all modules linked to user types?",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.get_list('User Type Module', fields=['module'])"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "How can I check which user types are linked to the HR module?",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.get_all('User Type Module', filters={'module': 'HR'}, fields=['module'])"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "Show me the full details of a user type linked to the 'Accounts' module.",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.get_doc('User Type Module', {'module': 'Accounts'})"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "How many user type modules are linked to the CRM module?",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.db.count('User Type Module', {'module': 'CRM'})"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "Get the module assigned to a specific user type if available.",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.db.get_value('User Type Module', {'module': 'Support'}, 'module')"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "List all modules assigned to user types.",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.get_list('User Type Module', fields=['module'])"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "Show all entries where the module is CRM.",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.get_list('User Type Module', filters={'module': 'CRM'}, fields=['module'])"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "Which modules are linked with user types for the Support team?",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.get_list('User Type Module', filters={'module': 'Support'}, fields=['module'])"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "Fetch all modules linked to user types starting with 'A'.",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.get_list('User Type Module', filters={'module': ['like', 'A%']}, fields=['module'])"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "Get all module assignments regardless of filters for reporting.",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.get_all('User Type Module', fields=['name', 'module'])"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "Get every module assignment, including disabled ones.",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.get_all('User Type Module', fields=['module'])"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "Open the full document for the module Accounts.",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.get_doc('User Type Module', {'module': 'Accounts'})"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "How many modules are assigned to user types?",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.db.count('User Type Module', {'module': ['!=', '']})"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "Check the module linked to this assignment.",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.db.get_value('User Type Module', {'name': 'USR-MOD-2025-0001'}, 'module')"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "Get the record for module 'HR'.",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.get_doc('User Type Module', {'module': 'HR'})"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "Can I view all modules assigned to a particular user type?",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.get_list('User Type Module', filters={'module': 'HR'}, fields=['module'])"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "How do I assign a new module from the list of available modules?",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.get_list('User Type Module', fields=['module'])"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "Can I assign the same module to multiple user types?",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.get_list('User Type Module', filters={'module': 'CRM'}, fields=['name', 'module'])"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "How do I create custom modules for user types?",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.get_list('User Type Module', filters={'module': ['like', 'Custom%']}, fields=['module'])"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "Fetch all module-user type mappings including inactive ones.",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.get_all('User Type Module', fields=['name', 'module'])"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "How can I list all available modules regardless of assignment?",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.get_all('User Type Module', fields=['module'])"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "What happens when I unassign a module from a user type?",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.get_doc('User Type Module', {'module': 'Projects'})"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "How many module records are currently active?",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.db.count('User Type Module', {'module': ['!=', '']})"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "Get the module name linked to this entry.",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.db.get_value('User Type Module', {'name': 'UTM-0005'}, 'module')"
    },
    {
        "input": {
            "doctype": "User Type Module",
            "question": "Can I configure permissions for a module in a user type?",
            "fields": [
                "module"
            ]
        },
        "output": "frappe.get_list('User Type Module', filters={'module': 'Accounts'}, fields=['name', 'module'])"
    },
    {
        "input": {
            "doctype": "Promotional Scheme",
            "question": "How do I disable a promotional scheme in ERPNext?",
            "fields": [
                "disable"
            ]
        },
        "output": "frappe.get_doc('Promotional Scheme', {'disable': 1})"
    },
    {
        "input": {
            "doctype": "Promotional Scheme",
            "question": "Which schemes apply to customer groups and are not disabled?",
            "fields": [
                "customer_group",
                "disable"
            ]
        },
        "output": "frappe.get_all('Promotional Scheme', filters={'customer_group': 'Retail', 'disable': 0}, fields=['name', 'valid_from', 'valid_upto'])"
    },
    {
        "input": {
            "doctype": "Promotional Scheme",
            "question": "Fetch promotional schemes applicable to the brand 'Acme'",
            "fields": [
                "brands"
            ]
        },
        "output": "frappe.get_list('Promotional Scheme', filters={'brands': ['like', '%Acme%']}, fields=['name', 'brands'])"
    },
    {
        "input": {
            "doctype": "Promotional Scheme",
            "question": "How many promotional schemes are linked to the campaign 'Festive2025'?",
            "fields": [
                "campaign"
            ]
        },
        "output": "frappe.db.count('Promotional Scheme', {'campaign': 'Festive2025'})"
    },
    {
        "input": {
            "doctype": "Promotional Scheme",
            "question": "What is the scheme valid from January 1 to March 31, 2025?",
            "fields": [
                "valid_from",
                "valid_upto"
            ]
        },
        "output": "frappe.get_list('Promotional Scheme', filters={'valid_from': ['>=', '2025-01-01'], 'valid_upto': ['<=', '2025-03-31']}, fields=['name', 'valid_from', 'valid_upto'])"
    },
    {
        "input": {
            "doctype": "Promotional Scheme",
            "question": "What is the start date of the 'Summer Promo 2025' scheme?",
            "fields": [
                "valid_from"
            ]
        },
        "output": "frappe.db.get_value('Promotional Scheme', {'name': 'Summer Promo 2025'}, 'valid_from')"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "Where can I find the redirect URI tied to an OAuth code in ERPNext?",
            "fields": [
                "authorization_code",
                "redirect_uri_bound_to_authorization_code"
            ]
        },
        "output": "frappe.get_list('OAuth Authorization Code', filters={}, fields=['authorization_code', 'redirect_uri_bound_to_authorization_code'])"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "How do I validate the code challenge method used in an OAuth transaction?",
            "fields": [
                "code_challenge_method"
            ]
        },
        "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'auth_code_xyz'}, 'code_challenge_method')"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "Where do I set the lifetime or validity of an OAuth authorization code in ERPNext?",
            "fields": [
                "validity"
            ]
        },
        "output": "frappe.get_doc('OAuth Authorization Code', {'authorization_code': 'auth_code_123'})"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "How many OAuth codes were generated by user `jane@example.com`?",
            "fields": [
                "user"
            ]
        },
        "output": "frappe.db.count('OAuth Authorization Code', {'user': 'jane@example.com'})"
    },
    {
        "input": {
            "doctype": "Job Card Operation",
            "question": "Where can I add the quantity completed for a specific operation in the job card?",
            "fields": [
                "completed_qty"
            ]
        },
        "output": "frappe.get_doc('Job Card Operation', {'status': 'Work In Progress'})"
    },
    {
        "input": {
            "doctype": "Job Card Operation",
            "question": "Can I change the status of an operation to 'Pending' in a job card?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_doc('Job Card Operation', {'status': 'Pending'})"
    },
    {
        "input": {
            "doctype": "Job Card Operation",
            "question": "How do I track the work-in-progress status for operations in job cards?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_list('Job Card Operation', filters={'status': 'Work In Progress'}, fields=['status', 'completed_qty'])"
    },
    {
        "input": {
            "doctype": "Job Card Operation",
            "question": "How many operations are currently marked as 'Complete'?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.db.count('Job Card Operation', {'status': 'Completed'})"
    },
    {
        "input": {
            "doctype": "Job Card Operation",
            "question": "Where can I view the completed time for each operation in the job card?",
            "fields": [
                "completed_time"
            ]
        },
        "output": "frappe.get_all('Job Card Operation', fields=['status', 'completed_time'])"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "How can I check if a specific authorization code has expired in ERPNext?",
            "fields": [
                "authorization_code",
                "expiration_time"
            ]
        },
        "output": "frappe.get_doc('OAuth Authorization Code', {'authorization_code': 'auth_xyz_5678'})"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "Where can I find the redirect URI tied to an OAuth code in ERPNext?",
            "fields": [
                "authorization_code",
                "redirect_uri_bound_to_authorization_code"
            ]
        },
        "output": "frappe.get_list('OAuth Authorization Code', filters={}, fields=['authorization_code', 'redirect_uri_bound_to_authorization_code'])"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "How do I validate the code challenge method used in an OAuth transaction?",
            "fields": [
                "code_challenge_method"
            ]
        },
        "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'auth_code_xyz'}, 'code_challenge_method')"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "Where do I set the lifetime or validity of an OAuth authorization code in ERPNext?",
            "fields": [
                "validity"
            ]
        },
        "output": "frappe.get_doc('OAuth Authorization Code', {'authorization_code': 'auth_code_123'})"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "How many OAuth codes were generated by user `jane@example.com`?",
            "fields": [
                "user"
            ]
        },
        "output": "frappe.db.count('OAuth Authorization Code', {'user': 'jane@example.com'})"
    },
    {
        "input": {
            "doctype": "Job Card Operation",
            "question": "Where can I add the quantity completed for a specific operation in the job card?",
            "fields": [
                "completed_qty"
            ]
        },
        "output": "frappe.get_doc('Job Card Operation', {'status': 'Work In Progress'})"
    },
    {
        "input": {
            "doctype": "Job Card Operation",
            "question": "Can I change the status of an operation to 'Pending' in a job card?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_doc('Job Card Operation', {'status': 'Pending'})"
    },
    {
        "input": {
            "doctype": "Job Card Operation",
            "question": "How do I track the work-in-progress status for operations in job cards?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_list('Job Card Operation', filters={'status': 'Work In Progress'}, fields=['status', 'completed_qty'])"
    },
    {
        "input": {
            "doctype": "Job Card Operation",
            "question": "How many operations are currently marked as 'Complete'?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.db.count('Job Card Operation', {'status': 'Completed'})"
    },
    {
        "input": {
            "doctype": "Job Card Operation",
            "question": "Where can I view the completed time for each operation in the job card?",
            "fields": [
                "completed_time"
            ]
        },
        "output": "frappe.get_all('Job Card Operation', fields=['status', 'completed_time'])"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "How can I check if a specific authorization code has expired in ERPNext?",
            "fields": [
                "authorization_code",
                "expiration_time"
            ]
        },
        "output": "frappe.get_doc('OAuth Authorization Code', {'authorization_code': 'auth_xyz_5678'})"
    },
    {
        "input": {
            "doctype": "Contact Us Settings",
            "question": "How can I set up an email address to forward customer queries to?",
            "fields": [
                "forward_to_email"
            ]
        },
        "output": "frappe.get_doc('Contact Us Settings')"
    },
    {
        "input": {
            "doctype": "Contact Us Settings",
            "question": "Where do I configure the address lines for the contact us section?",
            "fields": [
                "address_line1",
                "address_line2"
            ]
        },
        "output": "frappe.get_all('Contact Us Settings', fields=['address_line1', 'address_line2'])"
    },
    {
        "input": {
            "doctype": "Contact Us Settings",
            "question": "How can I add a city and state for the contact us address?",
            "fields": [
                "city",
                "state"
            ]
        },
        "output": "frappe.get_list('Contact Us Settings', fields=['city', 'state'])"
    },
    {
        "input": {
            "doctype": "Contact Us Settings",
            "question": "Where do I specify the phone number for customer queries?",
            "fields": [
                "phone"
            ]
        },
        "output": "frappe.db.get_value('Contact Us Settings', None, 'phone')"
    },
    {
        "input": {
            "doctype": "Contact Us Settings",
            "question": "How many contact us settings have an email ID defined?",
            "fields": [
                "email_id"
            ]
        },
        "output": "frappe.db.count('Contact Us Settings', {'email_id': ['!=', '']})"
    },
    {
        "input": {
            "doctype": "Contact Us Settings",
            "question": "How do I add a heading for the contact us section?",
            "fields": [
                "heading"
            ]
        },
        "output": "frappe.get_doc('Contact Us Settings').heading"
    },
    {
        "input": {
            "doctype": "Contact Us Settings",
            "question": "How can I change the introduction message for the contact us page?",
            "fields": [
                "introduction"
            ]
        },
        "output": "frappe.get_doc('Contact Us Settings').introduction"
    },
    {
        "input": {
            "doctype": "Contact Us Settings",
            "question": "Where can I set up the country and pincode in the contact us settings?",
            "fields": [
                "country",
                "pincode"
            ]
        },
        "output": "frappe.get_list('Contact Us Settings', fields=['country', 'pincode'])"
    },
    {
        "input": {
            "doctype": "Contact Us Settings",
            "question": "How do I add a Skype ID for the contact us section?",
            "fields": [
                "skype"
            ]
        },
        "output": "frappe.db.get_value('Contact Us Settings', None, 'skype')"
    },
    {
        "input": {
            "doctype": "Contact Us Settings",
            "question": "Can I add an email ID for customer inquiries?",
            "fields": [
                "email_id"
            ]
        },
        "output": "frappe.get_doc('Contact Us Settings').email_id"
    },
    {
        "input": {
            "doctype": "Plaid Settings",
            "question": "How can I enable Plaid integration for my system?",
            "fields": [
                "enabled"
            ]
        },
        "output": "frappe.get_doc('Plaid Settings', 'Plaid Settings')"
    },
    {
        "input": {
            "doctype": "Accounting Dimension",
            "question": "How many disabled accounting dimensions do we have?",
            "fields": [
                "disabled"
            ]
        },
        "output": "frappe.db.count('Accounting Dimension', {'disabled': 1})"
    },
    {
        "input": {
            "doctype": "Accounting Dimension",
            "question": "How do I list all active accounting dimensions?",
            "fields": [
                "label",
                "document_type"
            ]
        },
        "output": "frappe.get_list('Accounting Dimension', filters={'disabled': 0}, fields=['label', 'document_type'])"
    },
    {
        "input": {
            "doctype": "Accounting Dimension",
            "question": "Can I retrieve the document type of an accounting dimension by label?",
            "fields": [
                "label"
            ]
        },
        "output": "frappe.db.get_value('Accounting Dimension', {'label': 'Project'}, 'document_type')"
    },
    {
        "input": {
            "doctype": "Quality Inspection Parameter Group",
            "question": "How do I fetch all parameter groups?",
            "fields": [
                "group_name"
            ]
        },
        "output": "frappe.get_all('Quality Inspection Parameter Group', fields=['group_name'])"
    },
    {
        "input": {
            "doctype": "Quality Inspection Parameter Group",
            "question": "Can I get details of a parameter group by name?",
            "fields": [
                "group_name"
            ]
        },
        "output": "frappe.get_doc('Quality Inspection Parameter Group', 'Raw Material Checks')"
    },
    {
        "input": {
            "doctype": "Plaid Settings",
            "question": "Where is the Plaid client ID stored?",
            "fields": [
                "plaid_client_id"
            ]
        },
        "output": "frappe.get_list('Plaid Settings', fields=['plaid_client_id'])"
    },
    {
        "input": {
            "doctype": "Plaid Settings",
            "question": "How do I get all Plaid settings where auto sync is enabled?",
            "fields": [
                "automatic_sync"
            ]
        },
        "output": "frappe.get_all('Plaid Settings', filters={'automatic_sync': 1}, fields=['enabled', 'plaid_env'])"
    },
    {
        "input": {
            "doctype": "Quality Inspection Parameter Group",
            "question": "Which parameter groups are used for inspections?",
            "fields": [
                "group_name"
            ]
        },
        "output": "frappe.get_list('Quality Inspection Parameter Group', filters={}, fields=['group_name'])"
    },
    {
        "input": {
            "doctype": "Accounting Dimension",
            "question": "Get the full record for the 'Cost Center' dimension.",
            "fields": [
                "label"
            ]
        },
        "output": "frappe.get_doc('Accounting Dimension', {'label': 'Cost Center'})"
    },
    {
        "input": {
            "doctype": "Landed Cost Item",
            "question": "How do I list all landed cost items related to fixed assets?",
            "fields": [
                "is_fixed_asset"
            ]
        },
        "output": "frappe.get_list('Landed Cost Item', filters={'is_fixed_asset': 1}, fields=['item_code', 'qty', 'rate'])"
    },
    {
        "input": {
            "doctype": "Landed Cost Item",
            "question": "What is the rate and quantity for the landed cost item ABC123?",
            "fields": [
                "item_code",
                "qty",
                "rate"
            ]
        },
        "output": "frappe.get_doc('Landed Cost Item', {'item_code': 'ABC123'})"
    },
    {
        "input": {
            "doctype": "Landed Cost Item",
            "question": "Get the description of the item with code LCI-0001",
            "fields": [
                "item_code",
                "description"
            ]
        },
        "output": "frappe.db.get_value('Landed Cost Item', {'item_code': 'LCI-0001'}, 'description')"
    },
    {
        "input": {
            "doctype": "Landed Cost Item",
            "question": "How many landed cost items have more than 10 quantity?",
            "fields": [
                "qty"
            ]
        },
        "output": "frappe.db.count('Landed Cost Item', {'qty': ['>', 10]})"
    },
    {
        "input": {
            "doctype": "Landed Cost Item",
            "question": "List all landed cost entries with a specified receipt document type.",
            "fields": [
                "receipt_document_type",
                "receipt_document"
            ]
        },
        "output": "frappe.get_all('Landed Cost Item', filters={'receipt_document_type': 'Purchase Receipt'}, fields=['item_code', 'receipt_document'])"
    },
    {
        "input": {
            "doctype": "Quality Inspection Parameter",
            "question": "List all parameters grouped under 'Packaging Standards'.",
            "fields": [
                "parameter",
                "parameter_group"
            ]
        },
        "output": "frappe.get_list('Quality Inspection Parameter', filters={'parameter_group': 'Packaging Standards'}, fields=['parameter'])"
    },
    {
        "input": {
            "doctype": "Quality Inspection Parameter",
            "question": "Get the description for the parameter Moisture Content.",
            "fields": [
                "parameter",
                "description"
            ]
        },
        "output": "frappe.db.get_value('Quality Inspection Parameter', {'parameter': 'Moisture Content'}, 'description')"
    },
    {
        "input": {
            "doctype": "Quality Inspection Parameter",
            "question": "How many parameters belong to the 'Chemical Tests' group?",
            "fields": [
                "parameter_group"
            ]
        },
        "output": "frappe.db.count('Quality Inspection Parameter', {'parameter_group': 'Chemical Tests'})"
    },
    {
        "input": {
            "doctype": "Quality Inspection Parameter",
            "question": "Retrieve the full record for the parameter 'PH Level'.",
            "fields": [
                "parameter"
            ]
        },
        "output": "frappe.get_doc('Quality Inspection Parameter', {'parameter': 'PH Level'})"
    },
    {
        "input": {
            "doctype": "Quality Inspection Parameter",
            "question": "Fetch all inspection parameters and their descriptions.",
            "fields": [
                "parameter",
                "description"
            ]
        },
        "output": "frappe.get_all('Quality Inspection Parameter', fields=['parameter', 'description'])"
    },
    {
        "input": {
            "doctype": "Landed Cost Item",
            "question": "How do I view all landed cost items linked to a purchase receipt?",
            "fields": [
                "purchase_receipt_item",
                "receipt_document"
            ]
        },
        "output": "frappe.get_list('Landed Cost Item', filters={'receipt_document_type': 'Purchase Receipt'}, fields=['item_code', 'description', 'receipt_document'])"
    },
    {
        "input": {
            "doctype": "Landed Cost Item",
            "question": "How many landed cost items are marked as fixed assets?",
            "fields": [
                "is_fixed_asset"
            ]
        },
        "output": "frappe.db.count('Landed Cost Item', {'is_fixed_asset': 1})"
    },
    {
        "input": {
            "doctype": "Landed Cost Item",
            "question": "Fetch all items with a rate greater than 100 under landed cost items.",
            "fields": [
                "rate",
                "item_code",
                "description"
            ]
        },
        "output": "frappe.get_all('Landed Cost Item', filters={ 'rate': ['>', 100] }, fields=['item_code', 'description', 'rate'])"
    },
    {
        "input": {
            "doctype": "Landed Cost Voucher",
            "question": "How do I fetch a landed cost voucher by name?",
            "fields": [
                "naming_series"
            ]
        },
        "output": "frappe.get_doc('Landed Cost Voucher', 'LCV-0001')"
    },
    {
        "input": {
            "doctype": "Landed Cost Voucher",
            "question": "List all vouchers created in May 2025.",
            "fields": [
                "posting_date"
            ]
        },
        "output": "frappe.get_list('Landed Cost Voucher', filters={ 'posting_date': ['between', ['2025-05-01', '2025-05-31']] }, fields=['name', 'company', 'posting_date'])"
    },
    {
        "input": {
            "doctype": "Landed Cost Voucher",
            "question": "How many landed cost vouchers were amended from previous ones?",
            "fields": [
                "amended_from"
            ]
        },
        "output": "frappe.db.count('Landed Cost Voucher', {'amended_from': ['!=', '']})"
    },
    {
        "input": {
            "doctype": "Landed Cost Voucher",
            "question": "Get the total tax for voucher LCV-0003.",
            "fields": [
                "total_taxes_and_charges"
            ]
        },
        "output": "frappe.db.get_value('Landed Cost Voucher', 'LCV-0003', 'total_taxes_and_charges')"
    },
    {
        "input": {
            "doctype": "Landed Cost Voucher",
            "question": "Retrieve the distribution method used in voucher LCV-0004.",
            "fields": [
                "distribute_charges_based_on"
            ]
        },
        "output": "frappe.db.get_value('Landed Cost Voucher', 'LCV-0004', 'distribute_charges_based_on')"
    },
    {
        "input": {
            "doctype": "Landed Cost Voucher",
            "question": "List all landed cost vouchers with more than 2 purchase receipts.",
            "fields": [
                "purchase_receipts"
            ]
        },
        "output": "frappe.get_list('Landed Cost Voucher', filters={}, fields=['name', 'purchase_receipts'])"
    },
    {
        "input": {
            "doctype": "Landed Cost Voucher",
            "question": "How many vouchers have taxes included?",
            "fields": [
                "taxes"
            ]
        },
        "output": "frappe.db.count('Landed Cost Voucher', {'taxes': ['!=', []]})"
    },
    {
        "input": {
            "doctype": "Landed Cost Item",
            "question": "Get landed cost item details where charges were applied.",
            "fields": [
                "applicable_charges"
            ]
        },
        "output": "frappe.get_all('Landed Cost Item', filters={'applicable_charges': ['!=', '']}, fields=['item_code', 'rate', 'applicable_charges'])"
    },
    {
        "input": {
            "doctype": "Landed Cost Item",
            "question": "Retrieve full details of a landed cost item with item code 'ITEM-0003'.",
            "fields": [
                "item_code"
            ]
        },
        "output": "frappe.get_doc('Landed Cost Item', {'item_code': 'ITEM-0003'})"
    },
    {
        "input": {
            "doctype": "Landed Cost Item",
            "question": "How many landed cost items have a quantity greater than 50?",
            "fields": [
                "qty"
            ]
        },
        "output": "frappe.db.count('Landed Cost Item', {'qty': ['>', 50]})"
    },
    {
        "input": {
            "doctype": "Landed Cost Voucher",
            "question": "Fetch vouchers posted after 1st June 2024.",
            "fields": [
                "posting_date"
            ]
        },
        "output": "frappe.get_list('Landed Cost Voucher', filters={ 'posting_date': ['>', '2024-06-01'] }, fields=['name', 'posting_date'])"
    },
    {
        "input": {
            "doctype": "Accounting Dimension",
            "question": "How can I set default values for my accounting dimension?",
            "fields": [
                "dimension_defaults"
            ]
        },
        "output": "frappe.get_list('Accounting Dimension', filters={'dimension_defaults': ['!=', '']}, fields=['label', 'dimension_defaults'])"
    },
    {
        "input": {
            "doctype": "Accounting Dimension",
            "question": "How can I disable an accounting dimension?",
            "fields": [
                "label"
            ]
        },
        "output": "frappe.get_doc('Accounting Dimension', {'label': 'Project'})"
    },
    {
        "input": {
            "doctype": "Accounting Dimension",
            "question": "What fields are included in the accounting dimension setup?",
            "fields": [
                "document_type",
                "label",
                "fieldname"
            ]
        },
        "output": "frappe.get_all('Accounting Dimension', fields=['document_type', 'label', 'fieldname'])"
    },
    {
        "input": {
            "doctype": "Quality Inspection Reading",
            "question": "How do I create a new quality inspection reading for a parameter?",
            "fields": [
                "specification",
                "parameter_group",
                "reading_1"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'Quality Inspection Reading', 'specification': 'Length Check', 'parameter_group': 'Raw Material', 'reading_1': 12.5 })"
    },
    {
        "input": {
            "doctype": "Quality Inspection Reading",
            "question": "Can I link a quality inspection reading to a quality inspection parameter group?",
            "fields": [
                "parameter_group"
            ]
        },
        "output": "frappe.get_list('Quality Inspection Reading', filters={'parameter_group': 'Finished Goods'}, fields=['specification', 'parameter_group'])"
    },
    {
        "input": {
            "doctype": "Quality Inspection Reading",
            "question": "How do I record the readings for a quality inspection parameter?",
            "fields": [
                "specification",
                "reading_1",
                "reading_2"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'Quality Inspection Reading', 'specification': 'Width Tolerance', 'reading_1': 4.3, 'reading_2': 4.5 })"
    },
    {
        "input": {
            "doctype": "Quality Inspection Reading",
            "question": "How can I set up minimum and maximum values for quality inspection readings?",
            "fields": [
                "specification",
                "min_value",
                "max_value"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'Quality Inspection Reading', 'specification': 'Thickness', 'min_value': 5.0, 'max_value': 10.0 })"
    },
    {
        "input": {
            "doctype": "Quality Inspection Reading",
            "question": "Can I use formulas for acceptance criteria in quality inspection readings?",
            "fields": [
                "specification",
                "formula_based_criteria",
                "acceptance_formula"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'Quality Inspection Reading', 'specification': 'Length Variance', 'formula_based_criteria': 1, 'acceptance_formula': 'reading_1 + reading_2 <= 25' })"
    },
    {
        "input": {
            "doctype": "Quality Inspection Reading",
            "question": "How can I manually inspect and update a quality inspection reading?",
            "fields": [
                "manual_inspection",
                "specification",
                "reading_1"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'Quality Inspection Reading', 'manual_inspection': 1, 'specification': 'Visual Defects', 'reading_1': 'OK' })"
    },
    {
        "input": {
            "doctype": "Quality Inspection Reading",
            "question": "Can I have multiple readings for the same quality inspection parameter?",
            "fields": [
                "specification",
                "reading_1",
                "reading_2",
                "reading_3"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'Quality Inspection Reading', 'specification': 'Weight Tolerance', 'reading_1': 9.8, 'reading_2': 10.1, 'reading_3': 9.9 })"
    },
    {
        "input": {
            "doctype": "Quality Inspection Reading",
            "question": "How do I mark a quality inspection reading as accepted or rejected?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_list('Quality Inspection Reading', filters={'status': 'Accepted'}, fields=['specification', 'reading_1', 'status'])"
    },
    {
        "input": {
            "doctype": "Quality Inspection Reading",
            "question": "How can I set up automated criteria for quality inspection readings?",
            "fields": [
                "formula_based_criteria",
                "acceptance_formula"
            ]
        },
        "output": "frappe.get_list('Quality Inspection Reading', filters={'formula_based_criteria': 1}, fields=['specification', 'acceptance_formula'])"
    },
    {
        "input": {
            "doctype": "Quality Inspection Reading",
            "question": "How many readings are manually inspected?",
            "fields": [
                "manual_inspection"
            ]
        },
        "output": "frappe.db.count('Quality Inspection Reading', {'manual_inspection': 1})"
    },
    {
        "input": {
            "doctype": "Plaid Settings",
            "question": "Where can I configure the Plaid client ID and secret?",
            "fields": [
                "plaid_client_id",
                "plaid_secret"
            ]
        },
        "output": "frappe.get_doc('Plaid Settings', 'Plaid Settings')"
    },
    {
        "input": {
            "doctype": "Quality Inspection Parameter",
            "question": "How do I create a new quality inspection parameter?",
            "fields": [
                "parameter",
                "parameter_group",
                "description"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'Quality Inspection Parameter', 'parameter': 'Color Uniformity', 'parameter_group': 'Fabric Quality', 'description': 'Check for color consistency across batch' })"
    },
    {
        "input": {
            "doctype": "Quality Inspection Parameter",
            "question": "What is the role of parameter groups in quality inspection parameters?",
            "fields": [
                "parameter_group"
            ]
        },
        "output": "frappe.get_list('Quality Inspection Parameter', fields=['parameter', 'parameter_group'])"
    },
    {
        "input": {
            "doctype": "Quality Inspection Parameter",
            "question": "How can I link a quality inspection parameter to a group?",
            "fields": [
                "parameter_group"
            ]
        },
        "output": "frappe.db.get_value('Quality Inspection Parameter', {'parameter': 'Tensile Strength'}, 'parameter_group')"
    },
    {
        "input": {
            "doctype": "Quality Inspection Parameter",
            "question": "What details can I add for each quality inspection parameter?",
            "fields": [
                "parameter",
                "description"
            ]
        },
        "output": "frappe.get_all('Quality Inspection Parameter', fields=['parameter', 'description'])"
    },
    {
        "input": {
            "doctype": "Quality Inspection Parameter",
            "question": "Can I update the description of a quality inspection parameter?",
            "fields": [
                "parameter",
                "description"
            ]
        },
        "output": "frappe.get_doc({ 'doctype': 'Quality Inspection Parameter', 'parameter': 'Thickness Range', 'description': 'Updated notes on standard range' })"
    },
    {
        "input": {
            "doctype": "Website Attribute",
            "question": "How do I link an item attribute to a website attribute?",
            "fields": [
                "attribute"
            ]
        },
        "output": "frappe.get_doc('Website Attribute', 'Color')"
    },
    {
        "input": {
            "doctype": "Website Attribute",
            "question": "What types of attributes can be assigned to a website?",
            "fields": [
                "attribute"
            ]
        },
        "output": "frappe.get_all('Website Attribute', fields=['attribute'])"
    },
    {
        "input": {
            "doctype": "Payment Term",
            "question": "How do I create a new payment term?",
            "fields": [
                "payment_term_name"
            ]
        },
        "output": "frappe.get_doc('Payment Term', 'Net 30')"
    },
    {
        "input": {
            "doctype": "Payment Term",
            "question": "How can I set a payment term based on invoice date?",
            "fields": [
                "due_date_based_on"
            ]
        },
        "output": "frappe.get_list('Payment Term', filters={'due_date_based_on': 'Invoice Date'}, fields=['payment_term_name', 'credit_days'])"
    },
    {
        "input": {
            "doctype": "Payment Term",
            "question": "Can I apply a discount based on payment terms?",
            "fields": [
                "discount"
            ]
        },
        "output": "frappe.get_all('Payment Term', filters={'discount': ['>', 0]}, fields=['payment_term_name', 'discount'])"
    },
    {
        "input": {
            "doctype": "Payment Term",
            "question": "How can I set the payment due date based on the end of the invoice month?",
            "fields": [
                "due_date_based_on",
                "credit_months"
            ]
        },
        "output": "frappe.get_doc('Payment Term', {'due_date_based_on': 'End of Invoice Month', 'credit_months': 1})"
    },
    {
        "input": {
            "doctype": "Payment Term",
            "question": "What options do I have for defining credit terms in payment terms?",
            "fields": [
                "credit_days",
                "credit_months"
            ]
        },
        "output": "frappe.get_list('Payment Term', fields=['payment_term_name', 'credit_days', 'credit_months'])"
    },
    {
        "input": {
            "doctype": "Payment Term",
            "question": "How can I apply a discount based on invoice amounts in payment terms?",
            "fields": [
                "discount_type",
                "discount"
            ]
        },
        "output": "frappe.db.count('Payment Term', {'discount_type': 'Percentage', 'discount': ['>', 0]})"
    },
    {
        "input": {
            "doctype": "Subscription Invoice",
            "question": "How do I create a subscription invoice linked to a specific document?",
            "fields": [
                "document_type",
                "invoice"
            ]
        },
        "output": "frappe.get_doc('Subscription Invoice', {'document_type': 'Sales Invoice', 'invoice': 'INV-2025-0001'})"
    },
    {
        "input": {
            "doctype": "Subscription Invoice",
            "question": "Can I generate a subscription invoice for multiple documents?",
            "fields": [
                "document_type"
            ]
        },
        "output": "frappe.get_list('Subscription Invoice', fields=['document_type', 'invoice'])"
    },
    {
        "input": {
            "doctype": "Subscription Invoice",
            "question": "How do I link a subscription invoice to an existing document type?",
            "fields": [
                "document_type"
            ]
        },
        "output": "frappe.db.get_value('Subscription Invoice', {'document_type': 'Sales Invoice'}, 'invoice')"
    },
    {
        "input": {
            "doctype": "Plaid Settings",
            "question": "How can I automatically sync accounts every hour with Plaid?",
            "fields": [
                "automatic_sync"
            ]
        },
        "output": "frappe.get_list('Plaid Settings', filters={'automatic_sync': 1}, fields=['plaid_env'])"
    },
    {
        "input": {
            "doctype": "Plaid Settings",
            "question": "Is it possible to enable European access for Plaid in my settings?",
            "fields": [
                "enable_european_access"
            ]
        },
        "output": "frappe.db.count('Plaid Settings', {'enable_european_access': 1})"
    },
    {
        "input": {
            "doctype": "Plaid Settings",
            "question": "Where do I select the Plaid environment for my system (sandbox, development, production)?",
            "fields": [
                "plaid_env"
            ]
        },
        "output": "frappe.get_list('Plaid Settings', fields=['plaid_env'])"
    },
    {
        "input": {
            "doctype": "Plaid Settings",
            "question": "Can I change the Plaid environment to production?",
            "fields": [
                "plaid_env"
            ]
        },
        "output": "frappe.get_doc('Plaid Settings', {'plaid_env': 'production'})"
    },
    {
        "input": {
            "doctype": "Plaid Settings",
            "question": "How can I enable or disable Plaid synchronization for my accounts?",
            "fields": [
                "enabled"
            ]
        },
        "output": "frappe.get_list('Plaid Settings', fields=['enabled', 'automatic_sync'])"
    },
    {
        "input": {
            "doctype": "Plaid Settings",
            "question": "What is the process for enabling automatic account sync every hour in Plaid settings?",
            "fields": [
                "automatic_sync"
            ]
        },
        "output": "frappe.get_doc('Plaid Settings', {'automatic_sync': 1})"
    },
    {
        "input": {
            "doctype": "Plaid Settings",
            "question": "How do I enter my Plaid client ID and secret into the settings?",
            "fields": [
                "plaid_client_id",
                "plaid_secret"
            ]
        },
        "output": "frappe.get_list('Plaid Settings', fields=['plaid_client_id', 'plaid_secret'])"
    },
    {
        "input": {
            "doctype": "Plaid Settings",
            "question": "Where do I configure the Plaid client secret for my ERP system?",
            "fields": [
                "plaid_secret"
            ]
        },
        "output": "frappe.get_list('Plaid Settings', fields=['plaid_secret'])"
    },
    {
        "input": {
            "doctype": "Plaid Settings",
            "question": "Can I synchronize all accounts automatically in Plaid settings?",
            "fields": [
                "automatic_sync"
            ]
        },
        "output": "frappe.db.count('Plaid Settings', {'automatic_sync': 1})"
    },
    {
        "input": {
            "doctype": "Plaid Settings",
            "question": "What settings do I need to adjust to enable European access with Plaid?",
            "fields": [
                "enable_european_access"
            ]
        },
        "output": "frappe.get_doc('Plaid Settings', {'enable_european_access': 1})"
    },
    {
        "input": {
            "doctype": "Project Template Task",
            "question": "How do I add a task to my project template?",
            "fields": [
                "task",
                "subject"
            ]
        },
        "output": "frappe.get_doc('Project Template Task', 'New Task')"
    },
    {
        "input": {
            "doctype": "Project Template Task",
            "question": "Where can I view the subject of a task in my project template?",
            "fields": [
                "subject"
            ]
        },
        "output": "frappe.get_list('Project Template Task', fields=['subject'])"
    },
    {
        "input": {
            "doctype": "Project Template Task",
            "question": "How do I link a task to a project template?",
            "fields": [
                "task"
            ]
        },
        "output": "frappe.db.get_value('Project Template Task', {'task': 'Development Phase'}, 'subject')"
    },
    {
        "input": {
            "doctype": "Project Template Task",
            "question": "Can I edit the subject of a task in the project template?",
            "fields": [
                "subject"
            ]
        },
        "output": "frappe.get_doc('Project Template Task', {'subject': 'Finalize UI'})"
    },
    {
        "input": {
            "doctype": "Project Template Task",
            "question": "What field do I use to set the task name in the project template?",
            "fields": [
                "task"
            ]
        },
        "output": "frappe.get_list('Project Template Task', fields=['task'])"
    },
    {
        "input": {
            "doctype": "Project Template Task",
            "question": "How can I view all tasks in a project template?",
            "fields": [
                "task",
                "subject"
            ]
        },
        "output": "frappe.get_all('Project Template Task', fields=['task', 'subject'])"
    },
    {
        "input": {
            "doctype": "Project Template Task",
            "question": "Where can I see the task details in a project template?",
            "fields": [
                "task",
                "subject"
            ]
        },
        "output": "frappe.get_doc('Project Template Task', 'Task Planning')"
    },
    {
        "input": {
            "doctype": "Project Template Task",
            "question": "How can I view the subject of each task in a project template?",
            "fields": [
                "task",
                "subject"
            ]
        },
        "output": "frappe.get_list('Project Template Task', fields=['task', 'subject'])"
    },
    {
        "input": {
            "doctype": "Project Template Task",
            "question": "How do I get the list of all tasks from project templates?",
            "fields": [
                "task"
            ]
        },
        "output": "frappe.get_all('Project Template Task', fields=['task'])"
    },
    {
        "input": {
            "doctype": "Project Template Task",
            "question": "Can I see which task names are used in project template tasks?",
            "fields": [
                "task"
            ]
        },
        "output": "frappe.get_list('Project Template Task', distinct=True, fields=['task'])"
    },
    {
        "input": {
            "doctype": "Project Template Task",
            "question": "Where can I check subjects assigned to tasks in the project template?",
            "fields": [
                "subject"
            ]
        },
        "output": "frappe.get_list('Project Template Task', fields=['subject'])"
    },
    {
        "input": {
            "doctype": "Asset Category",
            "question": "How do I list all asset categories in the system?",
            "fields": [
                "asset_category_name"
            ]
        },
        "output": "frappe.get_all('Asset Category', fields=['asset_category_name'])"
    },
    {
        "input": {
            "doctype": "Asset Category",
            "question": "Can I view which asset categories have CWIP accounting enabled?",
            "fields": [
                "asset_category_name",
                "enable_cwip_accounting"
            ]
        },
        "output": "frappe.get_list('Asset Category', filters={'enable_cwip_accounting': 1}, fields=['asset_category_name'])"
    },
    {
        "input": {
            "doctype": "Asset Category",
            "question": "Which finance books are linked to each asset category?",
            "fields": [
                "asset_category_name",
                "finance_books"
            ]
        },
        "output": "frappe.get_list('Asset Category', fields=['asset_category_name', 'finance_books'])"
    },
    {
        "input": {
            "doctype": "Asset Category",
            "question": "How do I retrieve the accounts mapped to each asset category?",
            "fields": [
                "asset_category_name",
                "accounts"
            ]
        },
        "output": "frappe.get_list('Asset Category', fields=['asset_category_name', 'accounts'])"
    },
    {
        "input": {
            "doctype": "Asset Category",
            "question": "Can I view all asset categories in the system?",
            "fields": [
                "asset_category_name"
            ]
        },
        "output": "frappe.get_all('Asset Category', fields=['asset_category_name'])"
    },
    {
        "input": {
            "doctype": "Asset Category",
            "question": "How can I view the finance books linked to an asset category?",
            "fields": [
                "finance_books"
            ]
        },
        "output": "frappe.get_list('Asset Category', fields=['asset_category_name', 'finance_books'])"
    },
    {
        "input": {
            "doctype": "Asset Category",
            "question": "Can I retrieve the depreciation options for each asset category?",
            "fields": [
                "asset_category_name",
                "depreciation_options"
            ]
        },
        "output": "frappe.get_list('Asset Category', fields=['asset_category_name', 'depreciation_options'])"
    },
    {
        "input": {
            "doctype": "Asset Category",
            "question": "How many asset categories have Capital Work in Progress Accounting enabled?",
            "fields": [
                "enable_cwip_accounting"
            ]
        },
        "output": "frappe.db.count('Asset Category', {'enable_cwip_accounting': 1})"
    },
    {
        "input": {
            "doctype": "Asset Category",
            "question": "Can I view the list of accounts linked to each asset category?",
            "fields": [
                "asset_category_name",
                "accounts"
            ]
        },
        "output": "frappe.get_list('Asset Category', fields=['asset_category_name', 'accounts'])"
    },
    {
        "input": {
            "doctype": "Asset Category",
            "question": "What is the depreciation setup for the 'Plant & Machinery' category?",
            "fields": [
                "depreciation_options"
            ]
        },
        "output": "frappe.db.get_value('Asset Category', {'asset_category_name': 'Plant & Machinery'}, 'depreciation_options')"
    },
    {
        "input": {
            "doctype": "Asset Category",
            "question": "Get the full document of the asset category named 'Office Equipment'.",
            "fields": [
                "asset_category_name"
            ]
        },
        "output": "frappe.get_doc('Asset Category', 'Office Equipment')"
    },
    {
        "input": {
            "doctype": "Payment Terms Template Detail",
            "question": "How can I list all payment terms template details with their discount types and amounts?",
            "fields": [
                "payment_term",
                "discount_type",
                "discount"
            ]
        },
        "output": "frappe.get_list('Payment Terms Template Detail', fields=['payment_term', 'discount_type', 'discount'])"
    },
    {
        "input": {
            "doctype": "Payment Terms Template Detail",
            "question": "How many payment term templates offer a discount greater than 5%?",
            "fields": [
                "discount"
            ]
        },
        "output": "frappe.db.count('Payment Terms Template Detail', {'discount': ['>', 5]})"
    },
    {
        "input": {
            "doctype": "Payment Terms Template Detail",
            "question": "Can I get the mode of payment used in each payment terms template?",
            "fields": [
                "payment_term",
                "mode_of_payment"
            ]
        },
        "output": "frappe.get_list('Payment Terms Template Detail', fields=['payment_term', 'mode_of_payment'])"
    },
    {
        "input": {
            "doctype": "Payment Terms Template Detail",
            "question": "Which payment terms templates are based on the invoice due date?",
            "fields": [
                "payment_term",
                "due_date_based_on"
            ]
        },
        "output": "frappe.get_list('Payment Terms Template Detail', filters={'due_date_based_on': 'Invoice Date'}, fields=['payment_term'])"
    },
    {
        "input": {
            "doctype": "Payment Terms Template Detail",
            "question": "What is the invoice portion defined in each payment terms template?",
            "fields": [
                "payment_term",
                "invoice_portion"
            ]
        },
        "output": "frappe.get_list('Payment Terms Template Detail', fields=['payment_term', 'invoice_portion'])"
    },
    {
        "input": {
            "doctype": "Payment Terms Template Detail",
            "question": "Get the credit period in days for all payment terms.",
            "fields": [
                "payment_term",
                "credit_days"
            ]
        },
        "output": "frappe.get_list('Payment Terms Template Detail', fields=['payment_term', 'credit_days'])"
    },
    {
        "input": {
            "doctype": "Payment Terms Template Detail",
            "question": "What is the discount validity period for each template?",
            "fields": [
                "payment_term",
                "discount_validity"
            ]
        },
        "output": "frappe.get_list('Payment Terms Template Detail', fields=['payment_term', 'discount_validity'])"
    },
    {
        "input": {
            "doctype": "Contact Us Settings",
            "question": "What is the current email address used for forwarding customer queries?",
            "fields": [
                "forward_to_email"
            ]
        },
        "output": "frappe.db.get_value('Contact Us Settings', 'Contact Us Settings', 'forward_to_email')"
    },
    {
        "input": {
            "doctype": "Contact Us Settings",
            "question": "Can I fetch the phone number and email ID listed for customer support?",
            "fields": [
                "phone",
                "email_id"
            ]
        },
        "output": "frappe.get_list('Contact Us Settings', fields=['phone', 'email_id'])"
    },
    {
        "input": {
            "doctype": "Contact Us Settings",
            "question": "Where are the query options configured in the contact us settings?",
            "fields": [
                "query_options"
            ]
        },
        "output": "frappe.db.get_value('Contact Us Settings', 'Contact Us Settings', 'query_options')"
    },
    {
        "input": {
            "doctype": "Project Template Task",
            "question": "What is the subject and task name for all tasks in project templates?",
            "fields": [
                "task",
                "subject"
            ]
        },
        "output": "frappe.get_all('Project Template Task', fields=['task', 'subject'])"
    },
    {
        "input": {
            "doctype": "Job Card Operation",
            "question": "Where do I update the completed quantity for the job card operation JCO-2389?",
            "fields": [
                "completed_qty"
            ]
        },
        "output": "frappe.db.get_value('Job Card Operation', {'name': 'JCO-2389'}, 'completed_qty')"
    },
    {
        "input": {
            "doctype": "Job Card Operation",
            "question": "What is the current status of the job card operation JCO-2389?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.db.get_value('Job Card Operation', {'name': 'JCO-2389'}, 'status')"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "Is the OAuth authorization code OA-9F8X3Q still valid?",
            "fields": [
                "validity"
            ]
        },
        "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'OA-9F8X3Q'}, 'validity')"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "What code challenge method is used in the OAuth authorization code OA-9F8X3Q?",
            "fields": [
                "code_challenge_method"
            ]
        },
        "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'OA-9F8X3Q'}, 'code_challenge_method')"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "What are the scopes defined in the OAuth authorization code OA-9F8X3Q?",
            "fields": [
                "scopes"
            ]
        },
        "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'OA-9F8X3Q'}, 'scopes')"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "What nonce value is used in the OAuth authorization code OA-9F8X3Q?",
            "fields": [
                "nonce"
            ]
        },
        "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'OA-9F8X3Q'}, 'nonce')"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "What is the validity status of the OAuth authorization code OA-9F8X3Q?",
            "fields": [
                "validity"
            ]
        },
        "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'OA-9F8X3Q'}, 'validity')"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "Which client is linked to the OAuth authorization code OA-9F8X3Q?",
            "fields": [
                "client"
            ]
        },
        "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'OA-9F8X3Q'}, 'client')"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "What is the expiration time for the OAuth authorization code OA-9F8X3Q?",
            "fields": [
                "expiration_time"
            ]
        },
        "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'OA-9F8X3Q'}, 'expiration_time')"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "What is the redirect URI for the OAuth authorization code OA-9F8X3Q?",
            "fields": [
                "redirect_uri_bound_to_authorization_code"
            ]
        },
        "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'OA-9F8X3Q'}, 'redirect_uri_bound_to_authorization_code')"
    },
    {
        "input": {
            "doctype": "Job Card Operation",
            "question": "What are all operations completed this week?",
            "fields": [
                "status",
                "completed_time"
            ]
        },
        "output": "frappe.get_list('Job Card Operation', filters={'status': 'Completed', 'completed_time': ('>=', frappe.utils.add_days(frappe.utils.nowdate(), -7))}, fields=['name', 'completed_time'])"
    },
    {
        "input": {
            "doctype": "Job Card Operation",
            "question": "List all job card operations that are currently in progress.",
            "fields": [
                "name",
                "status"
            ]
        },
        "output": "frappe.get_list('Job Card Operation', filters={'status': 'In Process'}, fields=['name', 'status'])"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "Retrieve all active OAuth authorization codes.",
            "fields": [
                "authorization_code",
                "validity"
            ]
        },
        "output": "frappe.get_all('OAuth Authorization Code', filters={'validity': 'Active'}, fields=['authorization_code', 'validity'])"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "Get all OAuth codes that have expired.",
            "fields": [
                "authorization_code",
                "expiration_time"
            ]
        },
        "output": "frappe.get_all('OAuth Authorization Code', filters={'expiration_time': ('<', frappe.utils.now())}, fields=['authorization_code', 'expiration_time'])"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "Fetch the full record for a specific authorization code.",
            "fields": [
                "authorization_code"
            ]
        },
        "output": "frappe.get_doc('OAuth Authorization Code', {'authorization_code': 'ABC123'})"
    },
    {
        "input": {
            "doctype": "Job Card Operation",
            "question": "Get the details of a job card operation by name.",
            "fields": [
                "name"
            ]
        },
        "output": "frappe.get_doc('Job Card Operation', 'JCO-0001')"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "What is the validity status of the OAuth authorization code 'ABC123'?",
            "fields": [
                "validity"
            ]
        },
        "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'ABC123'}, 'validity')"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "How many OAuth authorization codes were issued today?",
            "fields": [
                "creation"
            ]
        },
        "output": "frappe.db.count('OAuth Authorization Code', {'creation': ('>=', frappe.utils.nowdate())})"
    },
    {
        "input": {
            "doctype": "Job Card Operation",
            "question": "Show operations completed more than 10 hours ago.",
            "fields": [
                "completed_time"
            ]
        },
        "output": "frappe.get_list('Job Card Operation', filters={'completed_time': ('<', frappe.utils.add_to_date(frappe.utils.now_datetime(), hours=-10))}, fields=['name', 'completed_time'])"
    },
    {
        "input": {
            "doctype": "OAuth Authorization Code",
            "question": "Find all authorization codes linked to the client 'Client123'.",
            "fields": [
                "client"
            ]
        },
        "output": "frappe.get_list('OAuth Authorization Code', filters={'client': 'Client123'}, fields=['authorization_code', 'client'])"
    },
    {
        "input": {
            "doctype": "Import Supplier Invoice",
            "question": "How can I view the status of imported supplier invoices in ERPNext?",
            "fields": [
                "name",
                "status"
            ]
        },
        "output": "frappe.get_list('Import Supplier Invoice', fields=['name', 'status'])"
    },
    {
        "input": {
            "doctype": "Import Supplier Invoice",
            "question": "How many imported supplier invoices are marked as completed?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.db.count('Import Supplier Invoice', {'status': 'Completed'})"
    },
    {
        "input": {
            "doctype": "Import Supplier Invoice",
            "question": "Where is the tax account mapped in a supplier invoice import?",
            "fields": [
                "tax_account"
            ]
        },
        "output": "frappe.db.get_value('Import Supplier Invoice', {'name': 'IMP-0001'}, 'tax_account')"
    },
    {
        "input": {
            "doctype": "Import Supplier Invoice",
            "question": "List all supplier invoice imports for the company 'Qatar Trading Co'.",
            "fields": [
                "name",
                "company"
            ]
        },
        "output": "frappe.get_all('Import Supplier Invoice', filters={'company': 'Qatar Trading Co'}, fields=['name', 'status'])"
    },
    {
        "input": {
            "doctype": "Personal Data Deletion Step",
            "question": "How do I track the status of each personal data deletion step in ERPNext?",
            "fields": [
                "name",
                "status"
            ]
        },
        "output": "frappe.get_list('Personal Data Deletion Step', fields=['name', 'status'])"
    },
    {
        "input": {
            "doctype": "Personal Data Deletion Step",
            "question": "How many deletion steps apply to the 'Customer' document type?",
            "fields": [
                "document_type"
            ]
        },
        "output": "frappe.db.count('Personal Data Deletion Step', {'document_type': 'Customer'})"
    },
    {
        "input": {
            "doctype": "Personal Data Deletion Step",
            "question": "Get details of deletion steps where partial deletion is enabled.",
            "fields": [
                "partial",
                "fields"
            ]
        },
        "output": "frappe.get_all('Personal Data Deletion Step', filters={'partial': 1}, fields=['document_type', 'fields'])"
    },
    {
        "input": {
            "doctype": "Personal Data Deletion Step",
            "question": "How can I find all personal data deletion steps where status is 'Pending'?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_list('Personal Data Deletion Step', filters={'status': 'Pending'}, fields=['name', 'status'])"
    },
    {
        "input": {
            "doctype": "Personal Data Deletion Step",
            "question": "Can I get the filter criteria applied to a personal data deletion step?",
            "fields": [
                "filtered_by"
            ]
        },
        "output": "frappe.db.get_value('Personal Data Deletion Step', {'name': 'DEL-0001'}, 'filtered_by')"
    },
    {
        "input": {
            "doctype": "Personal Data Deletion Step",
            "question": "Which fields are configured to be deleted in a specific step?",
            "fields": [
                "fields"
            ]
        },
        "output": "frappe.db.get_value('Personal Data Deletion Step', {'name': 'DEL-0002'}, 'fields')"
    },
    {
        "input": {
            "doctype": "Personal Data Deletion Step",
            "question": "How many personal data deletion steps are marked as partial?",
            "fields": [
                "partial"
            ]
        },
        "output": "frappe.db.count('Personal Data Deletion Step', filters={'partial': 1})"
    },
    {
        "input": {
            "doctype": "Personal Data Deletion Step",
            "question": "Show all personal data deletion steps for the document type 'Customer'.",
            "fields": [
                "document_type"
            ]
        },
        "output": "frappe.get_all('Personal Data Deletion Step', filters={'document_type': 'Customer'}, fields=['name', 'document_type'])"
    },
    {
        "input": {
            "doctype": "Personal Data Deletion Step",
            "question": "Fetch the complete record of a personal data deletion step with ID DEL-0003.",
            "fields": []
        },
        "output": "frappe.get_doc('Personal Data Deletion Step', 'DEL-0003')"
    },
    {
        "input": {
            "doctype": "Job Card Item",
            "question": "How can I retrieve the stock UOM for a specific item code on a job card?",
            "fields": [
                "stock_uom"
            ]
        },
        "output": "frappe.db.get_value('Job Card Item', {'item_code': 'ITEM-001'}, 'stock_uom')"
    },
    {
        "input": {
            "doctype": "Job Card Item",
            "question": "Where is the source warehouse defined for job card item ITEM-001?",
            "fields": [
                "source_warehouse"
            ]
        },
        "output": "frappe.db.get_value('Job Card Item', {'item_code': 'ITEM-001'}, 'source_warehouse')"
    },
    {
        "input": {
            "doctype": "Job Card Item",
            "question": "How many job card items have required quantity greater than 5?",
            "fields": [
                "required_qty"
            ]
        },
        "output": "frappe.db.count('Job Card Item', filters={ 'required_qty': ['>', 5] })"
    },
    {
        "input": {
            "doctype": "Job Card Item",
            "question": "List all job card items that allow alternative items.",
            "fields": [
                "item_code",
                "allow_alternative_item"
            ]
        },
        "output": "frappe.get_list('Job Card Item', filters={ 'allow_alternative_item': 1 }, fields=['item_code', 'allow_alternative_item'])"
    },
    {
        "input": {
            "doctype": "Job Card Item",
            "question": "Fetch complete details of a job card item using its item code.",
            "fields": []
        },
        "output": "frappe.get_doc('Job Card Item', {'item_code': 'ITEM-001'})"
    },
    {
        "input": {
            "doctype": "Job Card Item",
            "question": "How can I get the description for a specific job card item in ERPNext?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.db.get_value('Job Card Item', {'item_code': 'ITEM-001'}, 'description')"
    },
    {
        "input": {
            "doctype": "Job Card Item",
            "question": "What stock UOM is defined for the job card item ITEM-001?",
            "fields": [
                "stock_uom"
            ]
        },
        "output": "frappe.db.get_value('Job Card Item', {'item_code': 'ITEM-001'}, 'stock_uom')"
    },
    {
        "input": {
            "doctype": "Job Card Item",
            "question": "How many job card items have required quantity greater than 10?",
            "fields": [
                "required_qty"
            ]
        },
        "output": "frappe.db.count('Job Card Item', filters={ 'required_qty': ['>', 10] })"
    },
    {
        "input": {
            "doctype": "Job Card Item",
            "question": "List all job card items that have transferred quantities more than 5.",
            "fields": [
                "item_code",
                "transferred_qty"
            ]
        },
        "output": "frappe.get_list('Job Card Item', filters={ 'transferred_qty': ['>', 5] }, fields=['item_code', 'transferred_qty'])"
    },
    {
        "input": {
            "doctype": "Job Card Item",
            "question": "Get full details of a job card item where alternative item use is allowed.",
            "fields": []
        },
        "output": "frappe.get_doc('Job Card Item', {'allow_alternative_item': 1})"
    },
    {
        "input": {
            "doctype": "POS Search Fields",
            "question": "How can I fetch all POS search fields configured with the fieldname 'item_code'?",
            "fields": [
                "fieldname"
            ]
        },
        "output": "frappe.get_list('POS Search Fields', filters={'fieldname': 'item_code'}, fields=['field', 'fieldname'])"
    },
    {
        "input": {
            "doctype": "POS Search Fields",
            "question": "What is the POS fieldname used for item name search?",
            "fields": [
                "fieldname"
            ]
        },
        "output": "frappe.db.get_value('POS Search Fields', {'field': 'item_name'}, 'fieldname')"
    },
    {
        "input": {
            "doctype": "POS Search Fields",
            "question": "How many fields are currently configured for POS search?",
            "fields": []
        },
        "output": "frappe.db.count('POS Search Fields')"
    },
    {
        "input": {
            "doctype": "POS Search Fields",
            "question": "List all field and fieldname mappings used in the POS search configuration.",
            "fields": [
                "field",
                "fieldname"
            ]
        },
        "output": "frappe.get_all('POS Search Fields', fields=['field', 'fieldname'])"
    },
    {
        "input": {
            "doctype": "POS Search Fields",
            "question": "What is the full record for the POS field configured to search by item group?",
            "fields": []
        },
        "output": "frappe.get_value('POS Search Fields', {'fieldname': 'item_group'}, '*')"
    },
    {
        "input": {
            "doctype": "POS Search Fields",
            "question": "Where do I set up the default fieldnames used for POS search in ERPNext?",
            "fields": [
                "field",
                "fieldname"
            ]
        },
        "output": "frappe.get_all('POS Search Fields', fields=['field', 'fieldname'])"
    },
    {
        "input": {
            "doctype": "POS Search Fields",
            "question": "How many fields are currently configured for POS search in ERPNext?",
            "fields": []
        },
        "output": "frappe.db.count('POS Search Fields')"
    },
    {
        "input": {
            "doctype": "POS Search Fields",
            "question": "List all POS search fields configured to use the fieldname 'barcode'.",
            "fields": [
                "field",
                "fieldname"
            ]
        },
        "output": "frappe.get_list('POS Search Fields', filters={'fieldname': 'barcode'}, fields=['field', 'fieldname'])"
    },
    {
        "input": {
            "doctype": "POS Search Fields",
            "question": "Which POS search fields are currently configured for item names?",
            "fields": [
                "field",
                "fieldname"
            ]
        },
        "output": "frappe.get_list('POS Search Fields', filters={'field': 'item_name'}, fields=['field', 'fieldname'])"
    },
    {
        "input": {
            "doctype": "POS Settings",
            "question": "Get the full POS settings document to inspect enabled field configurations.",
            "fields": []
        },
        "output": "frappe.get_doc('POS Settings', 'POS Settings')"
    },
    {
        "input": {
            "doctype": "POS Settings",
            "question": "What are the currently configured POS invoice fields?",
            "fields": [
                "invoice_fields"
            ]
        },
        "output": "frappe.db.get_value('POS Settings', 'POS Settings', 'invoice_fields')"
    },
    {
        "input": {
            "doctype": "POS Settings",
            "question": "What invoice fields are currently configured in the POS settings?",
            "fields": [
                "invoice_fields"
            ]
        },
        "output": "frappe.db.get_value('POS Settings', 'POS Settings', 'invoice_fields')"
    },
    {
        "input": {
            "doctype": "POS Settings",
            "question": "What POS search fields are enabled in the current configuration?",
            "fields": [
                "pos_search_fields"
            ]
        },
        "output": "frappe.db.get_value('POS Settings', 'POS Settings', 'pos_search_fields')"
    },
    {
        "input": {
            "doctype": "POS Settings",
            "question": "List all POS Settings records with their invoice and search fields.",
            "fields": [
                "invoice_fields",
                "pos_search_fields"
            ]
        },
        "output": "frappe.get_all('POS Settings', fields=['invoice_fields', 'pos_search_fields'])"
    },
    {
        "input": {
            "doctype": "POS Settings",
            "question": "How many POS Settings documents are configured in the system?",
            "fields": []
        },
        "output": "frappe.db.count('POS Settings')"
    },
    {
        "input": {
            "doctype": "POS Settings",
            "question": "Get the full POS Settings document for inspection.",
            "fields": []
        },
        "output": "frappe.get_doc('POS Settings', 'POS Settings')"
    },
    {
        "input": {
            "doctype": "POS Settings",
            "question": "List POS Settings records where the invoice fields include 'item_name'.",
            "fields": [
                "invoice_fields"
            ]
        },
        "output": "frappe.get_list('POS Settings', filters={'invoice_fields': ['like', '%item_name%']}, fields=['invoice_fields'])"
    },
    {
        "input": {
            "doctype": "User Group Member",
            "question": "List all users who are part of the 'Sales Team' user group.",
            "fields": [
                "user"
            ]
        },
        "output": "frappe.get_list('User Group Member', filters={'parent': 'Sales Team'}, fields=['user'])"
    },
    {
        "input": {
            "doctype": "User Group Member",
            "question": "Get all user group memberships stored in the system.",
            "fields": [
                "user"
            ]
        },
        "output": "frappe.get_all('User Group Member', fields=['user'])"
    },
    {
        "input": {
            "doctype": "User Group Member",
            "question": "Retrieve the full document of a specific user group member with name 'UGM-0001'.",
            "fields": []
        },
        "output": "frappe.get_doc('User Group Member', 'UGM-0001')"
    },
    {
        "input": {
            "doctype": "User Group Member",
            "question": "How many users are assigned to user group 'Managers'?",
            "fields": []
        },
        "output": "frappe.db.count('User Group Member', {'parent': 'Managers'})"
    },
    {
        "input": {
            "doctype": "User Group Member",
            "question": "What is the user assigned to a group member record with ID 'UGM-0010'?",
            "fields": [
                "user"
            ]
        },
        "output": "frappe.db.get_value('User Group Member', 'UGM-0010', 'user')"
    },
    {
        "input": {
            "doctype": "Job Card Item",
            "question": "Which job card items belong to the 'Raw Materials' group?",
            "fields": [
                "item_code",
                "item_group"
            ]
        },
        "output": "frappe.get_list('Job Card Item', filters={'item_group': 'Raw Materials'}, fields=['item_code', 'item_group'])"
    },
    {
        "input": {
            "doctype": "Job Card Item",
            "question": "Show job card items where stock UOM is 'Nos'.",
            "fields": [
                "item_code",
                "stock_uom"
            ]
        },
        "output": "frappe.get_list('Job Card Item', filters={'stock_uom': 'Nos'}, fields=['item_code', 'stock_uom'])"
    },
    {
        "input": {
            "doctype": "Personal Data Deletion Step",
            "question": "List all deletion steps with status set to 'Pending'.",
            "fields": [
                "document_type",
                "status"
            ]
        },
        "output": "frappe.get_list('Personal Data Deletion Step', filters={'status': 'Pending'}, fields=['document_type', 'status'])"
    },
    {
        "input": {
            "doctype": "Job Card Item",
            "question": "List job card items with their item code, group, and UOM values.",
            "fields": [
                "item_code",
                "item_group",
                "uom"
            ]
        },
        "output": "frappe.get_all('Job Card Item', fields=['item_code', 'item_group', 'uom'])"
    },
    {
        "input": {
            "doctype": "Personal Data Deletion Step",
            "question": "Fetch all configured fields marked for deletion.",
            "fields": [
                "fields"
            ]
        },
        "output": "frappe.get_all('Personal Data Deletion Step', fields=['fields'])"
    },
    {
        "input": {
            "doctype": "Job Card Item",
            "question": "Get details of job card item 'ITEM-0001'.",
            "fields": []
        },
        "output": "frappe.get_doc('Job Card Item', {'item_code': 'ITEM-0001'})"
    },
    {
        "input": {
            "doctype": "Personal Data Deletion Step",
            "question": "Get full configuration for deletion step 'PDDS-0003'.",
            "fields": []
        },
        "output": "frappe.get_doc('Personal Data Deletion Step', 'PDDS-0003')"
    },
    {
        "input": {
            "doctype": "Job Card Item",
            "question": "How many job card items are available in the system?",
            "fields": []
        },
        "output": "frappe.db.count('Job Card Item')"
    },
    {
        "input": {
            "doctype": "Job Card Item",
            "question": "What is the UOM for job card item 'ITEM-0002'?",
            "fields": [
                "uom"
            ]
        },
        "output": "frappe.db.get_value('Job Card Item', {'item_code': 'ITEM-0002'}, 'uom')"
    },
    {
        "input": {
            "doctype": "Personal Data Deletion Step",
            "question": "List all document types linked to personal data deletion steps.",
            "fields": [
                "document_type"
            ]
        },
        "output": "frappe.get_all('Personal Data Deletion Step', fields=['document_type'])"
    },
    {
        "input": {
            "doctype": "Personal Data Deletion Step",
            "question": "Fetch deletion steps that apply a filter by 'status'.",
            "fields": [
                "filtered_by"
            ]
        },
        "output": "frappe.get_list('Personal Data Deletion Step', filters={'filtered_by': 'status'}, fields=['document_type', 'filtered_by'])"
    },
    {
        "input": {
            "doctype": "Job Card Item",
            "question": "Show job card items where required quantity is greater than 10.",
            "fields": [
                "item_code",
                "required_qty"
            ]
        },
        "output": "frappe.get_list('Job Card Item', filters={ 'required_qty': ['>', 10] }, fields=['item_code', 'required_qty'])"
    },
    {
        "input": {
            "doctype": "Job Card Item",
            "question": "Get all job card items allowing alternative items.",
            "fields": [
                "item_code",
                "allow_alternative_item"
            ]
        },
        "output": "frappe.get_list('Job Card Item', filters={'allow_alternative_item': 1}, fields=['item_code', 'allow_alternative_item'])"
    },
    {
        "input": {
            "doctype": "Personal Data Deletion Step",
            "question": "Show deletion steps that are marked as partial.",
            "fields": [
                "document_type",
                "partial"
            ]
        },
        "output": "frappe.get_list('Personal Data Deletion Step', filters={'partial': 1}, fields=['document_type', 'partial'])"
    },
    {
        "input": {
            "doctype": "Import Supplier Invoice",
            "question": "Where can I view the list of all supplier invoices with the default buying price list 'Standard Buying'?",
            "fields": [
                "default_buying_price_list"
            ]
        },
        "output": "frappe.get_list('Import Supplier Invoice', filters={'default_buying_price_list': 'Standard Buying'}, fields=['item_code', 'default_buying_price_list'])"
    },
    {
        "input": {
            "doctype": "Import Supplier Invoice",
            "question": "How do I retrieve all imported invoices with status set to 'Success'?",
            "fields": [
                "status",
                "invoice_series"
            ]
        },
        "output": "frappe.get_list('Import Supplier Invoice', filters={'status': 'Success'}, fields=['invoice_series', 'status'])"
    },
    {
        "input": {
            "doctype": "Import Supplier Invoice",
            "question": "Get all import records including the supplier group and tax account fields.",
            "fields": [
                "supplier_group",
                "tax_account"
            ]
        },
        "output": "frappe.get_all('Import Supplier Invoice', fields=['supplier_group', 'tax_account'])"
    },
    {
        "input": {
            "doctype": "Import Supplier Invoice",
            "question": "Show all supplier invoice import entries with their company and item code.",
            "fields": [
                "company",
                "item_code"
            ]
        },
        "output": "frappe.get_all('Import Supplier Invoice', fields=['company', 'item_code'])"
    },
    {
        "input": {
            "doctype": "Import Supplier Invoice",
            "question": "Retrieve the full document of the supplier invoice import record 'IMP-INV-0005'.",
            "fields": []
        },
        "output": "frappe.get_doc('Import Supplier Invoice', 'IMP-INV-0005')"
    },
    {
        "input": {
            "doctype": "Import Supplier Invoice",
            "question": "What is the company name for the invoice with item code 'ITEM-1002'?",
            "fields": [
                "company"
            ]
        },
        "output": "frappe.db.get_value('Import Supplier Invoice', {'item_code': 'ITEM-1002'}, 'company')"
    },
    {
        "input": {
            "doctype": "Customer Item",
            "question": "Which customers are linked to the item 'ITEM-0001'?",
            "fields": [
                "customer"
            ]
        },
        "output": "frappe.get_list('Customer Item', filters={'item_code': 'ITEM-0001'}, fields=['customer'])"
    },
    {
        "input": {
            "doctype": "Customer Item",
            "question": "List all customer-item relationships.",
            "fields": [
                "customer"
            ]
        },
        "output": "frappe.get_all('Customer Item', fields=['customer'])"
    },
    {
        "input": {
            "doctype": "Import Supplier Invoice",
            "question": "How many invoice import records are currently in the system?",
            "fields": []
        },
        "output": "frappe.db.count('Import Supplier Invoice')"
    },
    {
        "input": {
            "doctype": "Import Supplier Invoice",
            "question": "List invoices imported for supplier group 'Electronics Vendors'.",
            "fields": [
                "supplier_group"
            ]
        },
        "output": "frappe.get_list('Import Supplier Invoice', filters={'supplier_group': 'Electronics Vendors'}, fields=['item_code', 'supplier_group'])"
    },
    {
        "input": {
            "doctype": "Customer Item",
            "question": "How can I view all items linked to customer 'CUST-1001' in ERPNext?",
            "fields": [
                "item_code",
                "customer"
            ]
        },
        "output": "frappe.get_list('Customer Item', filters={'customer': 'CUST-1001'}, fields=['item_code', 'customer'])"
    },
    {
        "input": {
            "doctype": "Customer Item",
            "question": "List all customers linked to item 'ITEM-1234'.",
            "fields": [
                "customer",
                "item_code"
            ]
        },
        "output": "frappe.get_list('Customer Item', filters={'item_code': 'ITEM-1234'}, fields=['customer'])"
    },
    {
        "input": {
            "doctype": "Customer Item",
            "question": "Retrieve all customer-item mappings in the system.",
            "fields": [
                "customer",
                "item_code"
            ]
        },
        "output": "frappe.get_all('Customer Item', fields=['customer', 'item_code'])"
    },
    {
        "input": {
            "doctype": "Customer Item",
            "question": "Get the customer associated with item code 'ITEM-0010'.",
            "fields": [
                "customer"
            ]
        },
        "output": "frappe.db.get_value('Customer Item', {'item_code': 'ITEM-0010'}, 'customer')"
    },
    {
        "input": {
            "doctype": "Customer Item",
            "question": "How many customer-item links exist in the system?",
            "fields": []
        },
        "output": "frappe.db.count('Customer Item')"
    },
    {
        "input": {
            "doctype": "Customer Item",
            "question": "Fetch the full document of the customer-item entry with ID 'CI-0005'.",
            "fields": []
        },
        "output": "frappe.get_doc('Customer Item', 'CI-0005')"
    },
    {
        "input": {
            "doctype": "Customer Item",
            "question": "Get a list of customers linked to electronics category items.",
            "fields": [
                "customer"
            ]
        },
        "output": "frappe.get_list('Customer Item', filters={'item_code': ['like', 'ELEC%']}, fields=['customer', 'item_code'])"
    },
    {
        "input": {
            "doctype": "DocType Link",
            "question": "List all DocType links that are hidden from the UI.",
            "fields": [
                "link_doctype",
                "hidden"
            ]
        },
        "output": "frappe.get_list('DocType Link', filters={'hidden': 1}, fields=['link_doctype', 'hidden'])"
    },
    {
        "input": {
            "doctype": "DocType Link",
            "question": "Which DocType links are marked as child tables?",
            "fields": [
                "link_doctype",
                "is_child_table"
            ]
        },
        "output": "frappe.get_list('DocType Link', filters={'is_child_table': 1}, fields=['link_doctype', 'is_child_table'])"
    },
    {
        "input": {
            "doctype": "DocType Link",
            "question": "List all DocType links where the parent doctype is 'Customer'.",
            "fields": [
                "link_doctype",
                "parent_doctype"
            ]
        },
        "output": "frappe.get_list('DocType Link', filters={'parent_doctype': 'Customer'}, fields=['link_doctype', 'parent_doctype'])"
    },
    {
        "input": {
            "doctype": "DocType Link",
            "question": "Which DocType links are configured as custom?",
            "fields": [
                "link_doctype",
                "custom"
            ]
        },
        "output": "frappe.get_list('DocType Link', filters={'custom': 1}, fields=['link_doctype', 'custom'])"
    },
    {
        "input": {
            "doctype": "DocType Link",
            "question": "List DocType links with the group flag enabled.",
            "fields": [
                "link_doctype",
                "group"
            ]
        },
        "output": "frappe.get_list('DocType Link', filters={'group': 1}, fields=['link_doctype', 'group'])"
    },
    {
        "input": {
            "doctype": "DocType Link",
            "question": "Find DocType links with parent DocType 'Sales Order'.",
            "fields": [
                "link_doctype",
                "parent_doctype"
            ]
        },
        "output": "frappe.get_list('DocType Link', filters={'parent_doctype': 'Sales Order'}, fields=['link_doctype', 'parent_doctype'])"
    },
    {
        "input": {
            "doctype": "DocType Link",
            "question": "Show DocType links where the link DocType is 'Quotation'.",
            "fields": [
                "link_doctype",
                "parent_doctype"
            ]
        },
        "output": "frappe.get_list('DocType Link', filters={'link_doctype': 'Quotation'}, fields=['link_doctype', 'parent_doctype'])"
    },
    {
        "input": {
            "doctype": "DocType Link",
            "question": "Fetch all configured DocType links and their parent doctypes.",
            "fields": [
                "link_doctype",
                "parent_doctype"
            ]
        },
        "output": "frappe.get_all('DocType Link', fields=['link_doctype', 'parent_doctype'])"
    },
    {
        "input": {
            "doctype": "DocType Link",
            "question": "Export all DocType link configurations including fieldnames and child table flag.",
            "fields": [
                "link_fieldname",
                "is_child_table"
            ]
        },
        "output": "frappe.get_all('DocType Link', fields=['link_fieldname', 'is_child_table'])"
    },
    {
        "input": {
            "doctype": "DocType Link",
            "question": "Get all custom DocType link definitions.",
            "fields": [
                "link_doctype",
                "custom"
            ]
        },
        "output": "frappe.get_all('DocType Link', filters={'custom': 1}, fields=['link_doctype', 'custom'])"
    },
    {
        "input": {
            "doctype": "DocType Link",
            "question": "Get the complete configuration for the DocType link pointing to 'Delivery Note'.",
            "fields": []
        },
        "output": "frappe.get_doc('DocType Link', 'Delivery Note')"
    },
    {
        "input": {
            "doctype": "DocType Link",
            "question": "Get the full document for the DocType link from 'Customer'.",
            "fields": []
        },
        "output": "frappe.get_doc('DocType Link', 'Customer')"
    },
    {
        "input": {
            "doctype": "DocType Link",
            "question": "Retrieve full configuration for the DocType link targeting 'Item'.",
            "fields": []
        },
        "output": "frappe.get_doc('DocType Link', 'Item')"
    },
    {
        "input": {
            "doctype": "DocType Link",
            "question": "Get the link fieldname used for the 'Sales Invoice' DocType.",
            "fields": [
                "link_fieldname"
            ]
        },
        "output": "frappe.db.get_value('DocType Link', {'link_doctype': 'Sales Invoice'}, 'link_fieldname')"
    },
    {
        "input": {
            "doctype": "DocType Link",
            "question": "Fetch the group flag for the DocType link related to 'Quotation'.",
            "fields": [
                "group"
            ]
        },
        "output": "frappe.db.get_value('DocType Link', {'link_doctype': 'Quotation'}, 'group')"
    },
    {
        "input": {
            "doctype": "DocType Link",
            "question": "How many DocType links are configured as hidden?",
            "fields": [
                "hidden"
            ]
        },
        "output": "frappe.db.count('DocType Link', {'hidden': 1})"
    },
    {
        "input": {
            "doctype": "DocType Link",
            "question": "How many DocType links are marked as child tables?",
            "fields": [
                "is_child_table"
            ]
        },
        "output": "frappe.db.count('DocType Link', {'is_child_table': 1})"
    },
    {
        "input": {
            "doctype": "DocType Link",
            "question": "How many DocType links point to the 'Sales Invoice' doctype?",
            "fields": [
                "link_doctype"
            ]
        },
        "output": "frappe.db.count('DocType Link', {'link_doctype': 'Sales Invoice'})"
    },
    {
        "input": {
            "doctype": "DocType Link",
            "question": "Count the number of DocType links associated with 'Purchase Order'.",
            "fields": [
                "parent_doctype"
            ]
        },
        "output": "frappe.db.count('DocType Link', {'parent_doctype': 'Purchase Order'})"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "List all supplied purchase order items with a required quantity above 50.",
            "fields": [
                "main_item_code",
                "required_qty"
            ]
        },
        "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'required_qty': ['>', 50] }, fields=['main_item_code', 'required_qty'])"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "How many supplied items have a returned quantity greater than zero?",
            "fields": [
                "returned_qty"
            ]
        },
        "output": "frappe.db.count('Purchase Order Item Supplied', { 'returned_qty': ['>', 0] })"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Get the reference name and amount for all purchase order items.",
            "fields": [
                "reference_name",
                "amount"
            ]
        },
        "output": "frappe.get_all('Purchase Order Item Supplied', fields=['reference_name', 'amount'])"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Fetch all item codes with their conversion factor where the stock UOM is 'Nos'.",
            "fields": [
                "rm_item_code",
                "conversion_factor"
            ]
        },
        "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'stock_uom': 'Nos' }, fields=['rm_item_code', 'conversion_factor'])"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Get the total number of purchase order supplied items recorded.",
            "fields": []
        },
        "output": "frappe.db.count('Purchase Order Item Supplied')"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "List all items that have been fully consumed in the purchase order.",
            "fields": [
                "main_item_code",
                "consumed_qty",
                "supplied_qty"
            ]
        },
        "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'consumed_qty': ['=', 'supplied_qty'] }, fields=['main_item_code', 'consumed_qty', 'supplied_qty'])"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "How many purchase order items are linked to BOM details?",
            "fields": [
                "bom_detail_no"
            ]
        },
        "output": "frappe.db.count('Purchase Order Item Supplied', { 'bom_detail_no': ['!=', ''] })"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "What is the returned quantity for item RM-2023-0015 in the order?",
            "fields": [
                "returned_qty"
            ]
        },
        "output": "frappe.db.get_value('Purchase Order Item Supplied', { 'rm_item_code': 'RM-2023-0015' }, 'returned_qty')"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "List all purchase order items supplied from the 'WH-CENTRAL-001'.",
            "fields": [
                "main_item_code",
                "reserve_warehouse"
            ]
        },
        "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'reserve_warehouse': 'WH-CENTRAL-001' }, fields=['main_item_code', 'reserve_warehouse'])"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Get the complete configuration of the supplied item entry with reference 'POIS-000145'.",
            "fields": []
        },
        "output": "frappe.get_doc('Purchase Order Item Supplied', 'POIS-000145')"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "List all records showing the item code and consumed quantity.",
            "fields": [
                "rm_item_code",
                "consumed_qty"
            ]
        },
        "output": "frappe.get_all('Purchase Order Item Supplied', fields=['rm_item_code', 'consumed_qty'])"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Fetch the supplied quantity and total supplied quantity for all items with required quantity above 100.",
            "fields": [
                "supplied_qty",
                "total_supplied_qty"
            ]
        },
        "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'required_qty': ['>', 100] }, fields=['supplied_qty', 'total_supplied_qty'])"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Get the amount field for item POIS-000389 in the system.",
            "fields": [
                "amount"
            ]
        },
        "output": "frappe.db.get_value('Purchase Order Item Supplied', { 'name': 'POIS-000389' }, 'amount')"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "View the rate and conversion factor for all supplied items.",
            "fields": [
                "rate",
                "conversion_factor"
            ]
        },
        "output": "frappe.get_all('Purchase Order Item Supplied', fields=['rate', 'conversion_factor'])"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Get the full document for supplied item with name 'POIS-REQ-0007'.",
            "fields": []
        },
        "output": "frappe.get_doc('Purchase Order Item Supplied', 'POIS-REQ-0007')"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "List all supplied items with their main and raw material codes.",
            "fields": [
                "main_item_code",
                "rm_item_code"
            ]
        },
        "output": "frappe.get_all('Purchase Order Item Supplied', fields=['main_item_code', 'rm_item_code'])"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Get the stock UOM and rate of all items supplied from WH-002-MFG.",
            "fields": [
                "stock_uom",
                "rate"
            ]
        },
        "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'reserve_warehouse': 'WH-002-MFG' }, fields=['stock_uom', 'rate'])"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Fetch the configuration of the record with name 'POIS-CON-0754'.",
            "fields": []
        },
        "output": "frappe.get_doc('Purchase Order Item Supplied', 'POIS-CON-0754')"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "List all records with rate greater than 200 for supplied items.",
            "fields": [
                "rate"
            ]
        },
        "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'rate': ['>', 200] }, fields=['main_item_code', 'rate'])"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "List all POS closing entries where the difference is not zero.",
            "fields": [
                "mode_of_payment",
                "difference"
            ]
        },
        "output": "frappe.get_list('POS Closing Entry Detail', filters={'difference': ['!=', 0]}, fields=['mode_of_payment', 'difference'])"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "List POS entries where the closing amount is less than the expected amount.",
            "fields": [
                "expected_amount",
                "closing_amount"
            ]
        },
        "output": "frappe.get_list('POS Closing Entry Detail', filters={ 'closing_amount': ['<', 'expected_amount'] }, fields=['expected_amount', 'closing_amount'])"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "List POS entries that used 'Cash' as the mode of payment.",
            "fields": [
                "mode_of_payment"
            ]
        },
        "output": "frappe.get_list('POS Closing Entry Detail', filters={ 'mode_of_payment': 'Cash' }, fields=['mode_of_payment'])"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "List entries where the opening amount is greater than 1000.",
            "fields": [
                "opening_amount"
            ]
        },
        "output": "frappe.get_list('POS Closing Entry Detail', filters={ 'opening_amount': ['>', 1000] }, fields=['opening_amount'])"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "List all fields for POS closing entries with difference not equal to 0.",
            "fields": []
        },
        "output": "frappe.get_all('POS Closing Entry Detail', filters={'difference': ['!=', 0]})"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Get all POS entries where expected amount is more than closing amount.",
            "fields": [
                "expected_amount",
                "closing_amount"
            ]
        },
        "output": "frappe.get_all('POS Closing Entry Detail', filters={'expected_amount': ['>', 'closing_amount']}, fields=['expected_amount', 'closing_amount'])"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Get all POS closing entries with mode of payment 'Card'.",
            "fields": [
                "mode_of_payment"
            ]
        },
        "output": "frappe.get_all('POS Closing Entry Detail', filters={'mode_of_payment': 'Card'}, fields=['mode_of_payment'])"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Fetch POS entries with opening amount greater than 0.",
            "fields": [
                "opening_amount"
            ]
        },
        "output": "frappe.get_all('POS Closing Entry Detail', filters={ 'opening_amount': ['>', 0] }, fields=['opening_amount'])"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Get the full document of a POS closing entry with ID 'POS-CL-0001'.",
            "fields": []
        },
        "output": "frappe.get_doc('POS Closing Entry Detail', 'POS-CL-0001')"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Retrieve the full record of a POS closing entry based on its mode of payment being 'UPI'.",
            "fields": [
                "mode_of_payment"
            ]
        },
        "output": "frappe.get_doc('POS Closing Entry Detail', {'mode_of_payment': 'UPI'})"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Fetch complete details for a POS entry with closing amount 5000.",
            "fields": [
                "closing_amount"
            ]
        },
        "output": "frappe.get_doc('POS Closing Entry Detail', {'closing_amount': 5000})"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Get the opening amount for a POS entry where mode of payment is 'Cash'.",
            "fields": [
                "mode_of_payment",
                "opening_amount"
            ]
        },
        "output": "frappe.db.get_value('POS Closing Entry Detail', {'mode_of_payment': 'Cash'}, 'opening_amount')"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Get the expected amount where closing amount is 7000.",
            "fields": [
                "closing_amount",
                "expected_amount"
            ]
        },
        "output": "frappe.db.get_value('POS Closing Entry Detail', {'closing_amount': 7000}, 'expected_amount')"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Count how many POS closing entries have a difference greater than 0.",
            "fields": [
                "difference"
            ]
        },
        "output": "frappe.db.count('POS Closing Entry Detail', {'difference': ['>', 0]})"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "How many entries have opening amount below 100?",
            "fields": [
                "opening_amount"
            ]
        },
        "output": "frappe.db.count('POS Closing Entry Detail', {'opening_amount': ['<', 100]})"
    },
    {
        "input": {
            "doctype": "Sales Partner Item",
            "question": "List all items linked to the sales partner 'ABC Distributors'.",
            "fields": [
                "sales_partner"
            ]
        },
        "output": "frappe.get_list('Sales Partner Item', filters={'sales_partner': 'ABC Distributors'}, fields=['sales_partner'])"
    },
    {
        "input": {
            "doctype": "Sales Partner Item",
            "question": "Show all records where sales partner is 'Partner A'.",
            "fields": [
                "sales_partner"
            ]
        },
        "output": "frappe.get_list('Sales Partner Item', filters={'sales_partner': 'Partner A'}, fields=['sales_partner'])"
    },
    {
        "input": {
            "doctype": "Sales Partner Item",
            "question": "List items that have a sales partner assigned.",
            "fields": [
                "sales_partner"
            ]
        },
        "output": "frappe.get_list('Sales Partner Item', filters={'sales_partner': ['!=', '']}, fields=['sales_partner'])"
    },
    {
        "input": {
            "doctype": "Sales Partner Item",
            "question": "Get records of items without any assigned sales partner.",
            "fields": [
                "sales_partner"
            ]
        },
        "output": "frappe.get_list('Sales Partner Item', filters={'sales_partner': ''}, fields=['sales_partner'])"
    },
    {
        "input": {
            "doctype": "Sales Partner Item",
            "question": "List all item-sales partner mappings in the system.",
            "fields": [
                "sales_partner"
            ]
        },
        "output": "frappe.get_all('Sales Partner Item', fields=['sales_partner'])"
    },
    {
        "input": {
            "doctype": "Sales Partner Item",
            "question": "Fetch all sales partner item records regardless of filters.",
            "fields": []
        },
        "output": "frappe.get_all('Sales Partner Item')"
    },
    {
        "input": {
            "doctype": "Sales Partner Item",
            "question": "Get all sales partner assignments with field-level info.",
            "fields": [
                "sales_partner"
            ]
        },
        "output": "frappe.get_all('Sales Partner Item', fields=['name', 'sales_partner'])"
    },
    {
        "input": {
            "doctype": "Sales Partner Item",
            "question": "Fetch every row of sales partner item with full field data.",
            "fields": []
        },
        "output": "frappe.get_all('Sales Partner Item', fields='*')"
    },
    {
        "input": {
            "doctype": "Sales Partner Item",
            "question": "Get the full document for the record with ID 'SPI-0001'.",
            "fields": []
        },
        "output": "frappe.get_doc('Sales Partner Item', 'SPI-0001')"
    },
    {
        "input": {
            "doctype": "Sales Partner Item",
            "question": "Fetch the complete document where sales partner is 'XYZ Group'.",
            "fields": [
                "sales_partner"
            ]
        },
        "output": "frappe.get_doc('Sales Partner Item', {'sales_partner': 'XYZ Group'})"
    },
    {
        "input": {
            "doctype": "Sales Partner Item",
            "question": "Retrieve the full document for a sales partner item with sales partner 'Distributor X'.",
            "fields": [
                "sales_partner"
            ]
        },
        "output": "frappe.get_doc('Sales Partner Item', {'sales_partner': 'Distributor X'})"
    },
    {
        "input": {
            "doctype": "Sales Partner Item",
            "question": "Get the sales partner assigned to the item with ID 'ITEM-0002'.",
            "fields": [
                "sales_partner"
            ]
        },
        "output": "frappe.db.get_value('Sales Partner Item', {'name': 'ITEM-0002'}, 'sales_partner')"
    },
    {
        "input": {
            "doctype": "Sales Partner Item",
            "question": "Get the sales partner linked to item row with name 'SPI-1010'.",
            "fields": [
                "sales_partner"
            ]
        },
        "output": "frappe.db.get_value('Sales Partner Item', 'SPI-1010', 'sales_partner')"
    },
    {
        "input": {
            "doctype": "Sales Partner Item",
            "question": "Count how many items are linked to sales partner 'ABC Co'.",
            "fields": [
                "sales_partner"
            ]
        },
        "output": "frappe.db.count('Sales Partner Item', {'sales_partner': 'ABC Co'})"
    },
    {
        "input": {
            "doctype": "Sales Partner Item",
            "question": "How many item-partner mappings exist in total?",
            "fields": []
        },
        "output": "frappe.db.count('Sales Partner Item')"
    },
    {
        "input": {
            "doctype": "Sales Partner Item",
            "question": "Show sales partner records where no partner is assigned.",
            "fields": [
                "sales_partner"
            ]
        },
        "output": "frappe.get_list('Sales Partner Item', filters={'sales_partner': ''}, fields=['sales_partner'])"
    },
    {
        "input": {
            "doctype": "Sales Partner Item",
            "question": "Find records where sales partner is 'Blue Line Distributors'.",
            "fields": [
                "sales_partner"
            ]
        },
        "output": "frappe.get_list('Sales Partner Item', filters={'sales_partner': 'Blue Line Distributors'}, fields=['sales_partner'])"
    },
    {
        "input": {
            "doctype": "Sales Partner Item",
            "question": "Get all records linked to sales partner 'QuickSell Ltd'.",
            "fields": [
                "sales_partner"
            ]
        },
        "output": "frappe.get_list('Sales Partner Item', filters={'sales_partner': 'QuickSell Ltd'}, fields=['sales_partner'])"
    },
    {
        "input": {
            "doctype": "Sales Partner Item",
            "question": "List items associated with the sales partner 'TradeGlobal'.",
            "fields": [
                "sales_partner"
            ]
        },
        "output": "frappe.get_list('Sales Partner Item', filters={'sales_partner': 'TradeGlobal'}, fields=['sales_partner'])"
    },
    {
        "input": {
            "doctype": "Territory Item",
            "question": "List all items associated with the territory 'Middle East'.",
            "fields": [
                "territory"
            ]
        },
        "output": "frappe.get_list('Territory Item', filters={'territory': 'Middle East'}, fields=['territory'])"
    },
    {
        "input": {
            "doctype": "Territory Item",
            "question": "Show all entries where territory is assigned as 'USA'.",
            "fields": [
                "territory"
            ]
        },
        "output": "frappe.get_list('Territory Item', filters={'territory': 'USA'}, fields=['territory'])"
    },
    {
        "input": {
            "doctype": "Territory Item",
            "question": "List items that are missing a territory assignment.",
            "fields": [
                "territory"
            ]
        },
        "output": "frappe.get_list('Territory Item', filters={'territory': ''}, fields=['territory'])"
    },
    {
        "input": {
            "doctype": "Territory Item",
            "question": "List all items that belong to the 'Europe' territory.",
            "fields": [
                "territory"
            ]
        },
        "output": "frappe.get_list('Territory Item', filters={'territory': 'Europe'}, fields=['territory'])"
    },
    {
        "input": {
            "doctype": "Territory Item",
            "question": "Get all territory item mappings with full details.",
            "fields": [
                "territory"
            ]
        },
        "output": "frappe.get_all('Territory Item', fields=['name', 'territory'])"
    },
    {
        "input": {
            "doctype": "Territory Item",
            "question": "Fetch all territory assignments defined in the system.",
            "fields": []
        },
        "output": "frappe.get_all('Territory Item')"
    },
    {
        "input": {
            "doctype": "Territory Item",
            "question": "Get a complete list of all territory items including fields.",
            "fields": [
                "territory"
            ]
        },
        "output": "frappe.get_all('Territory Item', fields=['territory'])"
    },
    {
        "input": {
            "doctype": "Territory Item",
            "question": "Show all mappings where a territory is specified.",
            "fields": [
                "territory"
            ]
        },
        "output": "frappe.get_all('Territory Item', filters={'territory': ['!=', '']}, fields=['territory'])"
    },
    {
        "input": {
            "doctype": "Territory Item",
            "question": "Get the complete document for the mapping with ID 'TRI-001'.",
            "fields": []
        },
        "output": "frappe.get_doc('Territory Item', 'TRI-001')"
    },
    {
        "input": {
            "doctype": "Territory Item",
            "question": "Fetch the full document for a territory mapping linked to 'North India'.",
            "fields": [
                "territory"
            ]
        },
        "output": "frappe.get_doc('Territory Item', {'territory': 'North India'})"
    },
    {
        "input": {
            "doctype": "Territory Item",
            "question": "Retrieve the full config of a territory mapping for territory 'Australia'.",
            "fields": [
                "territory"
            ]
        },
        "output": "frappe.get_doc('Territory Item', {'territory': 'Australia'})"
    },
    {
        "input": {
            "doctype": "Territory Item",
            "question": "Get the territory linked to item row 'TRI-009'.",
            "fields": [
                "territory"
            ]
        },
        "output": "frappe.db.get_value('Territory Item', 'TRI-009', 'territory')"
    },
    {
        "input": {
            "doctype": "Territory Item",
            "question": "Fetch the assigned territory for the record with name 'TRI-010'.",
            "fields": [
                "territory"
            ]
        },
        "output": "frappe.db.get_value('Territory Item', {'name': 'TRI-010'}, 'territory')"
    },
    {
        "input": {
            "doctype": "Territory Item",
            "question": "Count the number of items assigned to 'India West'.",
            "fields": [
                "territory"
            ]
        },
        "output": "frappe.db.count('Territory Item', {'territory': 'India West'})"
    },
    {
        "input": {
            "doctype": "Territory Item",
            "question": "How many territory mappings exist in total?",
            "fields": []
        },
        "output": "frappe.db.count('Territory Item')"
    },
    {
        "input": {
            "doctype": "Territory Item",
            "question": "Count how many records do not have any territory set.",
            "fields": [
                "territory"
            ]
        },
        "output": "frappe.db.count('Territory Item', {'territory': ''})"
    },
    {
        "input": {
            "doctype": "Territory Item",
            "question": "Get all records assigned to the territory 'Asia Pacific'.",
            "fields": [
                "territory"
            ]
        },
        "output": "frappe.get_list('Territory Item', filters={'territory': 'Asia Pacific'}, fields=['territory'])"
    },
    {
        "input": {
            "doctype": "Territory Item",
            "question": "Find all items linked to the 'Africa' territory.",
            "fields": [
                "territory"
            ]
        },
        "output": "frappe.get_list('Territory Item', filters={'territory': 'Africa'}, fields=['territory'])"
    },
    {
        "input": {
            "doctype": "Territory Item",
            "question": "List entries for the territory 'South America'.",
            "fields": [
                "territory"
            ]
        },
        "output": "frappe.get_list('Territory Item', filters={'territory': 'South America'}, fields=['territory'])"
    },
    {
        "input": {
            "doctype": "Territory Item",
            "question": "Get all territory assignments where territory is not empty.",
            "fields": [
                "territory"
            ]
        },
        "output": "frappe.get_list('Territory Item', filters={'territory': ['!=', '']}, fields=['territory'])"
    },
    {
        "input": {
            "doctype": "Customer Group Item",
            "question": "List all items linked to the customer group 'Retail'.",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_list('Customer Group Item', filters={'customer_group': 'Retail'}, fields=['customer_group'])"
    },
    {
        "input": {
            "doctype": "Customer Group Item",
            "question": "How many items are assigned to the customer group 'Wholesale'?",
            "fields": []
        },
        "output": "frappe.db.count('Customer Group Item', {'customer_group': 'Wholesale'})"
    },
    {
        "input": {
            "doctype": "Customer Group Item",
            "question": "What is the customer group linked to item 'ITEM-00023'?",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.db.get_value('Customer Group Item', {'name': 'ITEM-00023'}, 'customer_group')"
    },
    {
        "input": {
            "doctype": "Customer Group Item",
            "question": "Fetch all customer group item mappings with customer groups displayed.",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_all('Customer Group Item', fields=['customer_group'])"
    },
    {
        "input": {
            "doctype": "Customer Group Item",
            "question": "Get full details of the customer group item record for item 'ITEM-00045'.",
            "fields": []
        },
        "output": "frappe.get_doc('Customer Group Item', 'ITEM-00045')"
    },
    {
        "input": {
            "doctype": "Customer Group Item",
            "question": "List all customer group item mappings for customer group 'Enterprise'.",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_list('Customer Group Item', filters={'customer_group': 'Enterprise'}, fields=['customer_group'])"
    },
    {
        "input": {
            "doctype": "Customer Group Item",
            "question": "How many mappings exist in total for customer group items?",
            "fields": []
        },
        "output": "frappe.db.count('Customer Group Item')"
    },
    {
        "input": {
            "doctype": "Customer Group Item",
            "question": "View the customer group associated with record ID 'CGI-00123'.",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.db.get_value('Customer Group Item', {'name': 'CGI-00123'}, 'customer_group')"
    },
    {
        "input": {
            "doctype": "Customer Group Item",
            "question": "Fetch all customer group item records to analyze linked groups.",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_all('Customer Group Item', fields=['customer_group'])"
    },
    {
        "input": {
            "doctype": "Customer Group Item",
            "question": "Retrieve the full document for a customer group item with ID 'CGI-00009'.",
            "fields": []
        },
        "output": "frappe.get_doc('Customer Group Item', 'CGI-00009')"
    },
    {
        "input": {
            "doctype": "Customer Group Item",
            "question": "List customer group item links sorted by group name.",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_list('Customer Group Item', fields=['customer_group'], order_by='customer_group asc')"
    },
    {
        "input": {
            "doctype": "Customer Group Item",
            "question": "Get all customer group items linked to either 'Retail' or 'Corporate'.",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_list('Customer Group Item', filters={'customer_group': ['in', ['Retail', 'Corporate']]}, fields=['customer_group'])"
    },
    {
        "input": {
            "doctype": "Customer Group Item",
            "question": "What is the total count of customer group mappings for group 'Wholesale'?",
            "fields": []
        },
        "output": "frappe.db.count('Customer Group Item', {'customer_group': 'Wholesale'})"
    },
    {
        "input": {
            "doctype": "Customer Group Item",
            "question": "View the mapping record for customer group item 'CGI-00007'.",
            "fields": []
        },
        "output": "frappe.get_doc('Customer Group Item', 'CGI-00007')"
    },
    {
        "input": {
            "doctype": "Customer Group Item",
            "question": "List the customer group assignments created in the last 30 days.",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_list('Customer Group Item', filters={ 'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -30)] }, fields=['customer_group'])"
    },
    {
        "input": {
            "doctype": "Customer Group Item",
            "question": "Get all records that are not linked to 'Retail' group.",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_list('Customer Group Item', filters={ 'customer_group': ['!=', 'Retail'] }, fields=['customer_group'])"
    },
    {
        "input": {
            "doctype": "Customer Group Item",
            "question": "Show all group item records where group name contains 'Corp'.",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_list('Customer Group Item', filters={ 'customer_group': ['like', '%Corp%'] }, fields=['customer_group'])"
    },
    {
        "input": {
            "doctype": "Customer Group Item",
            "question": "Fetch all records with group 'Retail' and sort them descending by name.",
            "fields": [
                "customer_group"
            ]
        },
        "output": "frappe.get_list('Customer Group Item', filters={'customer_group': 'Retail'}, fields=['customer_group'], order_by='name desc')"
    },
    {
        "input": {
            "doctype": "Customer Group Item",
            "question": "How many unique customer group item records are there?",
            "fields": []
        },
        "output": "frappe.db.count('Customer Group Item')"
    },
    {
        "input": {
            "doctype": "Campaign Item",
            "question": "Which items are linked to the 'Summer Sale' campaign?",
            "fields": [
                "campaign"
            ]
        },
        "output": "frappe.get_list('Campaign Item', filters={'campaign': 'Summer Sale'}, fields=['campaign'])"
    },
    {
        "input": {
            "doctype": "Campaign Item",
            "question": "How many items are associated with the Diwali marketing campaign?",
            "fields": []
        },
        "output": "frappe.db.count('Campaign Item', {'campaign': 'Diwali'})"
    },
    {
        "input": {
            "doctype": "Campaign Item",
            "question": "Get the campaign name for campaign item 'CMP-00012'.",
            "fields": [
                "campaign"
            ]
        },
        "output": "frappe.db.get_value('Campaign Item', {'name': 'CMP-00012'}, 'campaign')"
    },
    {
        "input": {
            "doctype": "Campaign Item",
            "question": "Fetch all campaign item records with campaign info.",
            "fields": [
                "campaign"
            ]
        },
        "output": "frappe.get_all('Campaign Item', fields=['campaign'])"
    },
    {
        "input": {
            "doctype": "Campaign Item",
            "question": "Show me the full campaign item document for ID 'CMP-00023'.",
            "fields": []
        },
        "output": "frappe.get_doc('Campaign Item', 'CMP-00023')"
    },
    {
        "input": {
            "doctype": "Campaign Item",
            "question": "List all campaign items under 'Referral Reward' strategy.",
            "fields": [
                "campaign"
            ]
        },
        "output": "frappe.get_list('Campaign Item', filters={'campaign': 'Referral Reward'}, fields=['campaign'])"
    },
    {
        "input": {
            "doctype": "Campaign Item",
            "question": "Count how many campaign items are currently configured.",
            "fields": []
        },
        "output": "frappe.db.count('Campaign Item')"
    },
    {
        "input": {
            "doctype": "Campaign Item",
            "question": "What campaign is assigned to item 'ITEM-00098'?",
            "fields": [
                "campaign"
            ]
        },
        "output": "frappe.db.get_value('Campaign Item', {'name': 'ITEM-00098'}, 'campaign')"
    },
    {
        "input": {
            "doctype": "Campaign Item",
            "question": "Retrieve all campaign items sorted by campaign name.",
            "fields": [
                "campaign"
            ]
        },
        "output": "frappe.get_list('Campaign Item', fields=['campaign'], order_by='campaign asc')"
    },
    {
        "input": {
            "doctype": "Campaign Item",
            "question": "Get all campaign records that are not part of 'Summer Sale'.",
            "fields": [
                "campaign"
            ]
        },
        "output": "frappe.get_list('Campaign Item', filters={'campaign': ['!=', 'Summer Sale']}, fields=['campaign'])"
    },
    {
        "input": {
            "doctype": "Campaign Item",
            "question": "List all campaign item mappings created this month.",
            "fields": [
                "campaign"
            ]
        },
        "output": "frappe.get_list('Campaign Item', filters={ 'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -30)] }, fields=['campaign'])"
    },
    {
        "input": {
            "doctype": "Campaign Item",
            "question": "Pull the record for campaign item 'CMP-00044'.",
            "fields": []
        },
        "output": "frappe.get_doc('Campaign Item', 'CMP-00044')"
    },
    {
        "input": {
            "doctype": "Campaign Item",
            "question": "Fetch all products involved in the loyalty points campaign.",
            "fields": [
                "campaign"
            ]
        },
        "output": "frappe.get_list('Campaign Item', filters={'campaign': 'Loyalty Points'}, fields=['campaign'])"
    },
    {
        "input": {
            "doctype": "Campaign Item",
            "question": "What campaign is item CMP-00897 part of?",
            "fields": [
                "campaign"
            ]
        },
        "output": "frappe.db.get_value('Campaign Item', {'name': 'CMP-00897'}, 'campaign')"
    },
    {
        "input": {
            "doctype": "Campaign Item",
            "question": "How many campaigns include bundled items?",
            "fields": []
        },
        "output": "frappe.db.count('Campaign Item', {'campaign': ['like', '%bundle%']})"
    },
    {
        "input": {
            "doctype": "Campaign Item",
            "question": "Get a list of all campaign items for our digital promotion campaign.",
            "fields": [
                "campaign"
            ]
        },
        "output": "frappe.get_list('Campaign Item', filters={'campaign': 'Digital Promo'}, fields=['campaign'])"
    },
    {
        "input": {
            "doctype": "Campaign Item",
            "question": "Which campaign items were modified last week?",
            "fields": [
                "campaign"
            ]
        },
        "output": "frappe.get_list('Campaign Item', filters={ 'modified': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -7)] }, fields=['campaign'])"
    },
    {
        "input": {
            "doctype": "Campaign Item",
            "question": "What are the campaign items related to the Christmas marketing push?",
            "fields": [
                "campaign"
            ]
        },
        "output": "frappe.get_list('Campaign Item', filters={'campaign': 'Christmas'}, fields=['campaign'])"
    },
    {
        "input": {
            "doctype": "Campaign Item",
            "question": "How many entries are there for the special launch campaign?",
            "fields": []
        },
        "output": "frappe.db.count('Campaign Item', {'campaign': 'Special Launch'})"
    },
    {
        "input": {
            "doctype": "Supplier Item",
            "question": "List all items provided by the supplier 'ABC Supplies'.",
            "fields": [
                "supplier"
            ]
        },
        "output": "frappe.get_list('Supplier Item', filters={'supplier': 'ABC Supplies'}, fields=['supplier'])"
    },
    {
        "input": {
            "doctype": "Supplier Item",
            "question": "How many supplier items are associated with 'XYZ Traders'?",
            "fields": []
        },
        "output": "frappe.db.count('Supplier Item', {'supplier': 'XYZ Traders'})"
    },
    {
        "input": {
            "doctype": "Supplier Item",
            "question": "Get the name of the supplier linked to item 'ITEM-00034'.",
            "fields": [
                "supplier"
            ]
        },
        "output": "frappe.db.get_value('Supplier Item', {'name': 'ITEM-00034'}, 'supplier')"
    },
    {
        "input": {
            "doctype": "Supplier Item",
            "question": "Fetch all supplier item records for purchase analysis.",
            "fields": [
                "supplier"
            ]
        },
        "output": "frappe.get_all('Supplier Item', fields=['supplier'])"
    },
    {
        "input": {
            "doctype": "Supplier Item",
            "question": "Retrieve the full document for supplier item ID 'SUPITEM-0045'.",
            "fields": []
        },
        "output": "frappe.get_doc('Supplier Item', 'SUPITEM-0045')"
    },
    {
        "input": {
            "doctype": "Supplier Item",
            "question": "List all suppliers linked to items created in the last 30 days.",
            "fields": [
                "supplier"
            ]
        },
        "output": "frappe.get_list('Supplier Item', filters={ 'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -30)] }, fields=['supplier'])"
    },
    {
        "input": {
            "doctype": "Supplier Item",
            "question": "How many items are associated with any supplier?",
            "fields": []
        },
        "output": "frappe.db.count('Supplier Item')"
    },
    {
        "input": {
            "doctype": "Supplier Item",
            "question": "Get the supplier name for item entry 'SI-00112'.",
            "fields": [
                "supplier"
            ]
        },
        "output": "frappe.db.get_value('Supplier Item', {'name': 'SI-00112'}, 'supplier')"
    },
    {
        "input": {
            "doctype": "Supplier Item",
            "question": "Fetch all supplier item mappings for inventory planning.",
            "fields": [
                "supplier"
            ]
        },
        "output": "frappe.get_all('Supplier Item', fields=['supplier'])"
    },
    {
        "input": {
            "doctype": "Supplier Item",
            "question": "Retrieve supplier item document for ID 'SUP-ITEM-2025-01'.",
            "fields": []
        },
        "output": "frappe.get_doc('Supplier Item', 'SUP-ITEM-2025-01')"
    },
    {
        "input": {
            "doctype": "Supplier Item",
            "question": "List all supplier items where supplier is not 'Generic Supplier'.",
            "fields": [
                "supplier"
            ]
        },
        "output": "frappe.get_list('Supplier Item', filters={ 'supplier': ['!=', 'Generic Supplier'] }, fields=['supplier'])"
    },
    {
        "input": {
            "doctype": "Supplier Item",
            "question": "Show all supplier item entries created this week.",
            "fields": [
                "supplier"
            ]
        },
        "output": "frappe.get_list('Supplier Item', filters={ 'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -7)] }, fields=['supplier'])"
    },
    {
        "input": {
            "doctype": "Supplier Item",
            "question": "List all supplier items linked to supplier 'Eastern Trade Corp'.",
            "fields": [
                "supplier"
            ]
        },
        "output": "frappe.get_list('Supplier Item', filters={'supplier': 'Eastern Trade Corp'}, fields=['supplier'])"
    },
    {
        "input": {
            "doctype": "Supplier Item",
            "question": "Pull the complete document for the supplier item 'ITEM-SUP-102'.",
            "fields": []
        },
        "output": "frappe.get_doc('Supplier Item', 'ITEM-SUP-102')"
    },
    {
        "input": {
            "doctype": "Supplier Item",
            "question": "Show supplier-item relationships filtered by a specific region or tag.",
            "fields": [
                "supplier"
            ]
        },
        "output": "frappe.get_list('Supplier Item', filters={'supplier': ['like', '%Region%']}, fields=['supplier'])"
    },
    {
        "input": {
            "doctype": "Supplier Item",
            "question": "Which supplier is linked to the item 'LED Panel - 60W'?",
            "fields": [
                "supplier"
            ]
        },
        "output": "frappe.get_list('Supplier Item', filters={'name': 'LED Panel - 60W'}, fields=['supplier'])"
    },
    {
        "input": {
            "doctype": "Supplier Item",
            "question": "Get the supplier-item mapping where supplier is 'Alpha Corp'.",
            "fields": [
                "supplier"
            ]
        },
        "output": "frappe.get_list('Supplier Item', filters={'supplier': 'Alpha Corp'}, fields=['supplier'])"
    },
    {
        "input": {
            "doctype": "Supplier Item",
            "question": "Give me a full list of supplier records with suppliers visible.",
            "fields": [
                "supplier"
            ]
        },
        "output": "frappe.get_all('Supplier Item', fields=['supplier'])"
    },
    {
        "input": {
            "doctype": "Supplier Item",
            "question": "Find all items that have more than one supplier linked.",
            "fields": []
        },
        "output": "frappe.get_list('Supplier Item', filters={}, fields=['supplier'], group_by='name', having='count(*) > 1')"
    },
    {
        "input": {
            "doctype": "Supplier Item",
            "question": "How many suppliers have been updated this month?",
            "fields": []
        },
        "output": "frappe.db.count('Supplier Item', {'modified': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -30)]})"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Where can I view the mode of payment for the closing entry in ERPNext?",
            "fields": [
                "mode_of_payment"
            ]
        },
        "output": "frappe.db.get_value('POS Closing Entry Detail', {'name': 'POS-CL-0001'}, 'mode_of_payment')"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "How do I calculate the closing amount based on the opening and expected amounts in POS closing entry in ERPNext?",
            "fields": [
                "opening_amount",
                "expected_amount",
                "closing_amount"
            ]
        },
        "output": "frappe.get_list('POS Closing Entry Detail', filters={}, fields=['opening_amount', 'expected_amount', 'closing_amount'])"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "How can I reconcile the opening and closing amounts for POS transactions in ERPNext?",
            "fields": [
                "opening_amount",
                "closing_amount"
            ]
        },
        "output": "frappe.get_list('POS Closing Entry Detail', fields=['opening_amount', 'closing_amount'])"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Can I track discrepancies between the expected and closing amounts for POS in ERPNext?",
            "fields": [
                "expected_amount",
                "closing_amount",
                "difference"
            ]
        },
        "output": "frappe.get_list('POS Closing Entry Detail', fields=['expected_amount', 'closing_amount', 'difference'])"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Where do I update the difference field after reviewing POS closing entry in ERPNext?",
            "fields": [
                "difference"
            ]
        },
        "output": "frappe.db.get_value('POS Closing Entry Detail', {'name': 'POS-CL-0002'}, 'difference')"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "How do I handle discrepancies in the POS closing entry in ERPNext?",
            "fields": [
                "difference"
            ]
        },
        "output": "frappe.get_list('POS Closing Entry Detail', filters={ 'difference': ['!=', 0] }, fields=['difference'])"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Get the full document for closing entry with ID 'POS-CL-0003'.",
            "fields": []
        },
        "output": "frappe.get_doc('POS Closing Entry Detail', 'POS-CL-0003')"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Retrieve all entries with mode of payment as 'Cash'.",
            "fields": [
                "mode_of_payment"
            ]
        },
        "output": "frappe.get_list('POS Closing Entry Detail', filters={'mode_of_payment': 'Cash'}, fields=['mode_of_payment'])"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Show all POS closing entry records from this month.",
            "fields": []
        },
        "output": "frappe.get_list('POS Closing Entry Detail', filters={ 'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -30)] })"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Fetch all fields for the entry 'POS-CL-2025-01'.",
            "fields": []
        },
        "output": "frappe.get_doc('POS Closing Entry Detail', 'POS-CL-2025-01')"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "How many entries have a non-zero difference in closing amounts?",
            "fields": [
                "difference"
            ]
        },
        "output": "frappe.db.count('POS Closing Entry Detail', {'difference': ['!=', 0]})"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "How many POS closing entries were created today?",
            "fields": []
        },
        "output": "frappe.db.count('POS Closing Entry Detail', {'creation': ['>=', frappe.utils.nowdate()]})"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "List closing amounts and expected values for all entries this week.",
            "fields": [
                "closing_amount",
                "expected_amount"
            ]
        },
        "output": "frappe.get_list('POS Closing Entry Detail', filters={ 'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -7)] }, fields=['closing_amount', 'expected_amount'])"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Which entries show mismatch between expected and closing values?",
            "fields": [
                "expected_amount",
                "closing_amount"
            ]
        },
        "output": "frappe.get_list('POS Closing Entry Detail', filters={ 'expected_amount': ['!=', 'closing_amount'] }, fields=['expected_amount', 'closing_amount'])"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Pull expected and opening amounts for the last 5 entries.",
            "fields": [
                "expected_amount",
                "opening_amount"
            ]
        },
        "output": "frappe.get_list('POS Closing Entry Detail', limit_page_length=5, fields=['expected_amount', 'opening_amount'])"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Retrieve all details for entries with 'Card' as payment mode.",
            "fields": [
                "mode_of_payment"
            ]
        },
        "output": "frappe.get_all('POS Closing Entry Detail', filters={'mode_of_payment': 'Card'}, fields=['mode_of_payment', 'opening_amount', 'expected_amount', 'closing_amount', 'difference'])"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Get expected vs actual closing data for POS entries flagged for review.",
            "fields": [
                "expected_amount",
                "closing_amount"
            ]
        },
        "output": "frappe.get_list('POS Closing Entry Detail', filters={'difference': ['!=', 0]}, fields=['expected_amount', 'closing_amount'])"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "List all POS entries with expected amount greater than 1000.",
            "fields": [
                "expected_amount"
            ]
        },
        "output": "frappe.get_list('POS Closing Entry Detail', filters={ 'expected_amount': ['>', 1000] }, fields=['expected_amount'])"
    },
    {
        "input": {
            "doctype": "POS Closing Entry Detail",
            "question": "Get all closing entries created this year with non-zero discrepancies.",
            "fields": [
                "difference"
            ]
        },
        "output": "frappe.get_list('POS Closing Entry Detail', filters={ 'difference': ['!=', 0], 'creation': ['>=', '2025-01-01'] }, fields=['difference'])"
    },
    {
        "input": {
            "doctype": "DocType Layout Field",
            "question": "Where can I select a field to make it visible in the doctype layout in ERPNext?",
            "fields": [
                "label",
                "fieldname"
            ]
        },
        "output": "frappe.get_list('DocType Layout Field', fields=['label', 'fieldname'])"
    },
    {
        "input": {
            "doctype": "DocType Layout Field",
            "question": "How can I reorder fields in a doctype layout in ERPNext?",
            "fields": [
                "label",
                "fieldname"
            ]
        },
        "output": "frappe.get_list('DocType Layout Field', order_by='idx asc', fields=['label', 'fieldname'])"
    },
    {
        "input": {
            "doctype": "DocType Layout Field",
            "question": "Which layout fields are currently hidden in ERPNext?",
            "fields": [
                "fieldname"
            ]
        },
        "output": "frappe.get_list('DocType Layout Field', filters={'hidden': 1}, fields=['fieldname'])"
    },
    {
        "input": {
            "doctype": "DocType Layout Field",
            "question": "How do I set up a custom field in the layout for a doctype in ERPNext?",
            "fields": [
                "label",
                "fieldname"
            ]
        },
        "output": "frappe.get_list('DocType Layout Field', filters={'label': ['like', '%Custom%']}, fields=['label', 'fieldname'])"
    },
    {
        "input": {
            "doctype": "DocType Layout Field",
            "question": "Where do I add a new label for a field in ERPNext doctype layout?",
            "fields": [
                "label"
            ]
        },
        "output": "frappe.db.get_value('DocType Layout Field', {'label': 'New Field'}, 'label')"
    },
    {
        "input": {
            "doctype": "DocType Layout Field",
            "question": "Can I hide a field in the doctype layout in ERPNext?",
            "fields": [
                "fieldname"
            ]
        },
        "output": "frappe.get_list('DocType Layout Field', filters={'hidden': 1}, fields=['fieldname'])"
    },
    {
        "input": {
            "doctype": "DocType Layout Field",
            "question": "How many fields are configured in the current doctype layout?",
            "fields": []
        },
        "output": "frappe.db.count('DocType Layout Field')"
    },
    {
        "input": {
            "doctype": "DocType Layout Field",
            "question": "How do I update an existing field's name in a doctype layout in ERPNext?",
            "fields": [
                "fieldname"
            ]
        },
        "output": "frappe.get_doc('DocType Layout Field', 'custom_fieldname')"
    },
    {
        "input": {
            "doctype": "DocType Layout Field",
            "question": "Can I add dynamic links in the layout fields of a doctype in ERPNext?",
            "fields": [
                "fieldname"
            ]
        },
        "output": "frappe.get_list('DocType Layout Field', filters={'fieldtype': 'Dynamic Link'}, fields=['fieldname'])"
    },
    {
        "input": {
            "doctype": "DocType Layout Field",
            "question": "How many custom layout fields are currently visible in ERPNext?",
            "fields": []
        },
        "output": "frappe.db.count('DocType Layout Field', {'hidden': 0})"
    },
    {
        "input": {
            "doctype": "DocType Layout Field",
            "question": "How do I manage visibility for different fields in the layout of ERPNext doctypes?",
            "fields": [
                "fieldname"
            ]
        },
        "output": "frappe.get_list('DocType Layout Field', fields=['fieldname', 'hidden'])"
    },
    {
        "input": {
            "doctype": "DocType Layout Field",
            "question": "How do I view all layout fields for the 'Sales Invoice' doctype?",
            "fields": [
                "label",
                "fieldname"
            ]
        },
        "output": "frappe.get_all('DocType Layout Field', filters={'doctype': 'Sales Invoice'}, fields=['label', 'fieldname'])"
    },
    {
        "input": {
            "doctype": "DocType Layout Field",
            "question": "Get layout field document with fieldname 'discount_amount'.",
            "fields": []
        },
        "output": "frappe.get_doc('DocType Layout Field', 'discount_amount')"
    },
    {
        "input": {
            "doctype": "DocType Layout Field",
            "question": "How can I set default values for fields in a doctype layout in ERPNext?",
            "fields": [
                "fieldname"
            ]
        },
        "output": "frappe.get_list('DocType Layout Field', fields=['fieldname', 'default'])"
    },
    {
        "input": {
            "doctype": "DocType Layout Field",
            "question": "Pull all custom layout fieldnames used in the Purchase Invoice doctype.",
            "fields": [
                "fieldname"
            ]
        },
        "output": "frappe.get_list('DocType Layout Field', filters={'doctype': 'Purchase Invoice'}, fields=['fieldname'])"
    },
    {
        "input": {
            "doctype": "DocType Layout Field",
            "question": "Get all fields where label contains 'Tax' for layout customization.",
            "fields": [
                "label"
            ]
        },
        "output": "frappe.get_all('DocType Layout Field', filters={'label': ['like', '%Tax%']}, fields=['label'])"
    },
    {
        "input": {
            "doctype": "DocType Layout Field",
            "question": "Get all layout field configurations currently used in the system.",
            "fields": [
                "label",
                "fieldname"
            ]
        },
        "output": "frappe.get_all('DocType Layout Field', fields=['label', 'fieldname'])"
    },
    {
        "input": {
            "doctype": "DocType Layout Field",
            "question": "View layout fields added in the last 7 days for customization audit.",
            "fields": []
        },
        "output": "frappe.get_list('DocType Layout Field', filters={'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -7)]})"
    },
    {
        "input": {
            "doctype": "DocType Layout Field",
            "question": "Which layout fields have empty labels and should be fixed?",
            "fields": [
                "label"
            ]
        },
        "output": "frappe.get_list('DocType Layout Field', filters={'label': ''}, fields=['fieldname'])"
    },
    {
        "input": {
            "doctype": "DocType Layout Field",
            "question": "How many layout fields were customized in 2024?",
            "fields": []
        },
        "output": "frappe.db.count('DocType Layout Field', {'creation': ['between', ['2024-01-01', '2024-12-31']]})"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "List all items with returned quantities greater than zero in ERPNext.",
            "fields": [
                "main_item_code",
                "returned_qty"
            ]
        },
        "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'returned_qty': ['>', 0] }, fields=['main_item_code', 'returned_qty'])"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Fetch all fields of the item supplied entry with BOM detail 'BOM-0005'.",
            "fields": []
        },
        "output": "frappe.get_doc('Purchase Order Item Supplied', 'BOM-0005')"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "How many items were supplied with a conversion factor of 1?",
            "fields": []
        },
        "output": "frappe.db.count('Purchase Order Item Supplied', { 'conversion_factor': 1 })"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Show all supplied items with more than 10 units consumed.",
            "fields": [
                "main_item_code",
                "consumed_qty"
            ]
        },
        "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'consumed_qty': ['>', 10] }, fields=['main_item_code', 'consumed_qty'])"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Which items have their stock UOM set to 'Nos'?",
            "fields": [
                "main_item_code",
                "stock_uom"
            ]
        },
        "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'stock_uom': 'Nos' }, fields=['main_item_code', 'stock_uom'])"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Get all records where supplied quantity exceeds required quantity.",
            "fields": [
                "required_qty",
                "supplied_qty"
            ]
        },
        "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'supplied_qty': ['>', 'required_qty'] }, fields=['required_qty', 'supplied_qty'])"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Get the item code and amount for all entries where amount is above 5000.",
            "fields": [
                "main_item_code",
                "amount"
            ]
        },
        "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'amount': ['>', 5000] }, fields=['main_item_code', 'amount'])"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Fetch the item record for 'ITEM-00023' including its reference name and BOM detail.",
            "fields": [
                "reference_name",
                "bom_detail_no"
            ]
        },
        "output": "frappe.get_all('Purchase Order Item Supplied', filters={ 'main_item_code': 'ITEM-00023' }, fields=['reference_name', 'bom_detail_no'])"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "How do I view the full document for a supplied item with reference 'PO-1001'?",
            "fields": []
        },
        "output": "frappe.get_doc('Purchase Order Item Supplied', 'PO-1001')"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Count how many supplied entries exist for reserve warehouse 'Stores - A'.",
            "fields": []
        },
        "output": "frappe.db.count('Purchase Order Item Supplied', { 'reserve_warehouse': 'Stores - A' })"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "What\u2019s the rate for item 'ITEM-0001' supplied in the PO?",
            "fields": [
                "rate"
            ]
        },
        "output": "frappe.db.get_value('Purchase Order Item Supplied', { 'main_item_code': 'ITEM-0001' }, 'rate')"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Fetch the required quantity for item 'ITEM-9001'.",
            "fields": [
                "required_qty"
            ]
        },
        "output": "frappe.db.get_value('Purchase Order Item Supplied', { 'main_item_code': 'ITEM-9001' }, 'required_qty')"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "How do I pull all entries along with their conversion factors?",
            "fields": [
                "main_item_code",
                "conversion_factor"
            ]
        },
        "output": "frappe.get_all('Purchase Order Item Supplied', fields=['main_item_code', 'conversion_factor'])"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Get all PO items with rate set and returned quantity zero.",
            "fields": [
                "rate",
                "returned_qty"
            ]
        },
        "output": "frappe.get_all('Purchase Order Item Supplied', filters={ 'rate': ['>', 0], 'returned_qty': 0 }, fields=['main_item_code', 'rate', 'returned_qty'])"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Show me the list of records for items with reserved warehouse 'Main Stores'.",
            "fields": [
                "main_item_code",
                "reserve_warehouse"
            ]
        },
        "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'reserve_warehouse': 'Main Stores' }, fields=['main_item_code', 'reserve_warehouse'])"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Pull the document details of BOM reference 'BOM-88002'.",
            "fields": []
        },
        "output": "frappe.get_doc('Purchase Order Item Supplied', 'BOM-88002')"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "What is the total number of unique PO item records in the system?",
            "fields": []
        },
        "output": "frappe.db.count('Purchase Order Item Supplied')"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Retrieve all items with supplied_qty greater than consumed_qty.",
            "fields": [
                "supplied_qty",
                "consumed_qty"
            ]
        },
        "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'supplied_qty': ['>', 'consumed_qty'] }, fields=['main_item_code', 'supplied_qty', 'consumed_qty'])"
    },
    {
        "input": {
            "doctype": "Purchase Order Item Supplied",
            "question": "Which items in the PO have consumed quantities equal to required quantities?",
            "fields": [
                "consumed_qty",
                "required_qty"
            ]
        },
        "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'consumed_qty': ['=', 'required_qty'] }, fields=['main_item_code', 'required_qty', 'consumed_qty'])"
    },
    {
        "input": {
            "doctype": "SLA Fulfilled On Status",
            "question": "List all SLA statuses currently used in ERPNext.",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_list('SLA Fulfilled On Status', fields=['status'])"
    },
    {
        "input": {
            "doctype": "SLA Fulfilled On Status",
            "question": "List all SLA statuses that match the word 'Closed'.",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_list('SLA Fulfilled On Status', filters={'status': 'Closed'}, fields=['status'])"
    },
    {
        "input": {
            "doctype": "SLA Fulfilled On Status",
            "question": "How many SLA fulfillment statuses are there in ERPNext?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.db.count('SLA Fulfilled On Status')"
    },
    {
        "input": {
            "doctype": "SLA Fulfilled On Status",
            "question": "Get the full document of SLA status 'Open'.",
            "fields": []
        },
        "output": "frappe.get_doc('SLA Fulfilled On Status', 'Open')"
    },
    {
        "input": {
            "doctype": "SLA Fulfilled On Status",
            "question": "How many SLA statuses are configured as 'In Progress'?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.db.count('SLA Fulfilled On Status', {'status': 'In Progress'})"
    },
    {
        "input": {
            "doctype": "SLA Fulfilled On Status",
            "question": "Retrieve all SLA status entries for validation.",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_all('SLA Fulfilled On Status', fields=['status'])"
    },
    {
        "input": {
            "doctype": "SLA Fulfilled On Status",
            "question": "Get the document with SLA status 'Resolved'.",
            "fields": []
        },
        "output": "frappe.get_doc('SLA Fulfilled On Status', 'Resolved')"
    },
    {
        "input": {
            "doctype": "SLA Fulfilled On Status",
            "question": "Fetch all SLA statuses with their exact names.",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_list('SLA Fulfilled On Status', fields=['status'])"
    },
    {
        "input": {
            "doctype": "SLA Fulfilled On Status",
            "question": "Get all SLA statuses listed in the system configuration.",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_all('SLA Fulfilled On Status', fields=['status'])"
    },
    {
        "input": {
            "doctype": "SLA Fulfilled On Status",
            "question": "Which status is configured for 'Resolved' SLAs?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.db.get_value('SLA Fulfilled On Status', {'status': 'Resolved'}, 'status')"
    },
    {
        "input": {
            "doctype": "SLA Fulfilled On Status",
            "question": "Fetch SLA statuses used to trigger email alerts.",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_list('SLA Fulfilled On Status', filters={'status': 'Pending'}, fields=['status'])"
    },
    {
        "input": {
            "doctype": "SLA Fulfilled On Status",
            "question": "Get SLA fulfillment statuses for tracking purposes.",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_list('SLA Fulfilled On Status', fields=['status'])"
    },
    {
        "input": {
            "doctype": "SLA Fulfilled On Status",
            "question": "List all SLA fulfillment statuses defined in the system.",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_list('SLA Fulfilled On Status', fields=['status'])"
    },
    {
        "input": {
            "doctype": "SLA Fulfilled On Status",
            "question": "Show me all SLA statuses configured for customer support workflows.",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_all('SLA Fulfilled On Status', fields=['status'])"
    },
    {
        "input": {
            "doctype": "SLA Fulfilled On Status",
            "question": "How many SLA statuses are configured in the system?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.db.count('SLA Fulfilled On Status')"
    },
    {
        "input": {
            "doctype": "SLA Fulfilled On Status",
            "question": "Fetch the full document for the status 'Completed'.",
            "fields": []
        },
        "output": "frappe.get_doc('SLA Fulfilled On Status', 'Completed')"
    },
    {
        "input": {
            "doctype": "SLA Fulfilled On Status",
            "question": "Get the name of the SLA status record where the status is 'Overdue'.",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.db.get_value('SLA Fulfilled On Status', {'status': 'Overdue'}, 'name')"
    },
    {
        "input": {
            "doctype": "SLA Fulfilled On Status",
            "question": "List all SLA fulfillment statuses used for tracking escalations.",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_list('SLA Fulfilled On Status', filters={'status': ['like', '%Escalation%']}, fields=['status'])"
    },
    {
        "input": {
            "doctype": "SLA Fulfilled On Status",
            "question": "Show all SLA statuses that include the word 'Closed'.",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.get_all('SLA Fulfilled On Status', filters={'status': ['like', '%Closed%']}, fields=['status'])"
    },
    {
        "input": {
            "doctype": "SLA Fulfilled On Status",
            "question": "How many SLA statuses contain the term 'Pending'?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.db.count('SLA Fulfilled On Status', {'status': ['like', '%Pending%']})"
    },
    {
        "input": {
            "doctype": "Item Tax",
            "question": "List all item tax templates for 'VAT 5%' category.",
            "fields": [
                "item_tax_template",
                "tax_category"
            ]
        },
        "output": "frappe.get_list('Item Tax', filters={'tax_category': 'VAT 5%'}, fields=['item_tax_template', 'tax_category'])"
    },
    {
        "input": {
            "doctype": "Item Tax",
            "question": "Show me item tax records where the minimum rate is below 10.",
            "fields": [
                "minimum_net_rate"
            ]
        },
        "output": "frappe.get_list('Item Tax', filters={ 'minimum_net_rate': ['<', 10] }, fields=['item_tax_template', 'minimum_net_rate'])"
    },
    {
        "input": {
            "doctype": "Item Tax",
            "question": "Which items have tax categories 'Luxury' assigned?",
            "fields": [
                "item_tax_template",
                "tax_category"
            ]
        },
        "output": "frappe.get_list('Item Tax', filters={'tax_category': 'Luxury'}, fields=['item_tax_template', 'tax_category'])"
    },
    {
        "input": {
            "doctype": "Item Tax",
            "question": "List all item taxes valid from January 1, 2024.",
            "fields": [
                "item_tax_template",
                "valid_from"
            ]
        },
        "output": "frappe.get_list('Item Tax', filters={'valid_from': '2024-01-01'}, fields=['item_tax_template', 'valid_from'])"
    },
    {
        "input": {
            "doctype": "Item Tax",
            "question": "Find item tax records with maximum net rate greater than 100.",
            "fields": [
                "item_tax_template",
                "maximum_net_rate"
            ]
        },
        "output": "frappe.get_list('Item Tax', filters={ 'maximum_net_rate': ['>', 100] }, fields=['item_tax_template', 'maximum_net_rate'])"
    },
    {
        "input": {
            "doctype": "Item Tax",
            "question": "Which tax templates are used for category 'Retail'?",
            "fields": [
                "item_tax_template",
                "tax_category"
            ]
        },
        "output": "frappe.get_list('Item Tax', filters={'tax_category': 'Retail'}, fields=['item_tax_template', 'tax_category'])"
    },
    {
        "input": {
            "doctype": "Item Tax",
            "question": "Show item tax templates applicable before 2023.",
            "fields": [
                "item_tax_template",
                "valid_from"
            ]
        },
        "output": "frappe.get_list('Item Tax', filters={ 'valid_from': ['<', '2023-01-01'] }, fields=['item_tax_template', 'valid_from'])"
    },
    {
        "input": {
            "doctype": "Item Tax",
            "question": "Get all item tax records with a net rate range between 20 and 50.",
            "fields": [
                "minimum_net_rate",
                "maximum_net_rate"
            ]
        },
        "output": "frappe.get_list('Item Tax', filters={ 'minimum_net_rate': ['>=', 20], 'maximum_net_rate': ['<=', 50] }, fields=['item_tax_template', 'minimum_net_rate', 'maximum_net_rate'])"
    },
    {
        "input": {
            "doctype": "Item Tax",
            "question": "Fetch all tax category and validity combinations defined.",
            "fields": [
                "tax_category",
                "valid_from"
            ]
        },
        "output": "frappe.get_all('Item Tax', fields=['tax_category', 'valid_from'])"
    },
    {
        "input": {
            "doctype": "Item Tax",
            "question": "Return all fields of item taxes defined after March 2023.",
            "fields": []
        },
        "output": "frappe.get_all('Item Tax', filters={ 'valid_from': ['>', '2023-03-01'] })"
    },
    {
        "input": {
            "doctype": "Item Tax",
            "question": "Get the full records of item taxes with category 'Wholesale'.",
            "fields": []
        },
        "output": "frappe.get_all('Item Tax', filters={'tax_category': 'Wholesale'})"
    },
    {
        "input": {
            "doctype": "Item Tax",
            "question": "Get complete document for item tax template 'GST 18%'.",
            "fields": []
        },
        "output": "frappe.get_doc('Item Tax', 'GST 18%')"
    },
    {
        "input": {
            "doctype": "Item Tax",
            "question": "Retrieve the full document of item tax with tax category 'Retail VAT'.",
            "fields": []
        },
        "output": "frappe.get_doc('Item Tax', {'tax_category': 'Retail VAT'})"
    },
    {
        "input": {
            "doctype": "Item Tax",
            "question": "Pull the entire configuration of item tax with a template named 'Luxury_Tax'.",
            "fields": []
        },
        "output": "frappe.get_doc('Item Tax', 'Luxury_Tax')"
    },
    {
        "input": {
            "doctype": "Item Tax",
            "question": "What is the tax category for template 'GST 12%'?",
            "fields": [
                "tax_category"
            ]
        },
        "output": "frappe.db.get_value('Item Tax', {'item_tax_template': 'GST 12%'}, 'tax_category')"
    },
    {
        "input": {
            "doctype": "Item Tax",
            "question": "Show the minimum net rate for item tax template 'Eco_Tax'.",
            "fields": [
                "minimum_net_rate"
            ]
        },
        "output": "frappe.db.get_value('Item Tax', {'item_tax_template': 'Eco_Tax'}, 'minimum_net_rate')"
    },
    {
        "input": {
            "doctype": "Item Tax",
            "question": "Fetch the validity date for template 'Retail_Tax'.",
            "fields": [
                "valid_from"
            ]
        },
        "output": "frappe.db.get_value('Item Tax', {'item_tax_template': 'Retail_Tax'}, 'valid_from')"
    },
    {
        "input": {
            "doctype": "Item Tax",
            "question": "How many item taxes are valid from 2024 onwards?",
            "fields": [
                "valid_from"
            ]
        },
        "output": "frappe.db.count('Item Tax', {'valid_from': ['>=', '2024-01-01']})"
    },
    {
        "input": {
            "doctype": "Item Tax",
            "question": "Count how many item taxes are assigned to the 'Export' category.",
            "fields": [
                "tax_category"
            ]
        },
        "output": "frappe.db.count('Item Tax', {'tax_category': 'Export'})"
    },
    {
        "input": "How do I create tax rules for sales and purchase transactions in ERPNext?",
        "output": "Tax Rule"
    },
    {
        "input": "Can I apply tax rules for shopping cart transactions in ERPNext?",
        "output": "Tax Rule"
    },
    {
        "input": "Where can I configure the tax category and customer group for tax rules in ERPNext?",
        "output": "Tax Rule"
    },
    {
        "input": "How do I link a sales tax template to a tax rule in ERPNext?",
        "output": "Tax Rule"
    },
    {
        "input": "How can I specify the billing address fields for tax rules in ERPNext?",
        "output": "Tax Rule"
    },
    {
        "input": "Where do I define the shipping country and state for tax rules in ERPNext?",
        "output": "Tax Rule"
    },
    {
        "input": "How do I apply tax rules based on item groups and customer groups in ERPNext?",
        "output": "Tax Rule"
    },
    {
        "input": "How do I set up tax rules that apply only to specific suppliers in ERPNext?",
        "output": "Tax Rule"
    },
    {
        "input": "Can I define tax rates for different billing cities and counties in ERPNext?",
        "output": "Tax Rule"
    },
    {
        "input": "How do I apply a tax rule for purchases based on the supplier group in ERPNext?",
        "output": "Tax Rule"
    },
    {
        "input": "Where can I configure the tax rates for different items in ERPNext's tax rule settings?",
        "output": "Tax Rule"
    },
    {
        "input": "How do I add multiple tax rates to a single tax rule in ERPNext?",
        "output": "Tax Rule"
    },
    {
        "input": {
            "doctype": "Assignment Rule",
            "question": "List all assignment rules that are currently disabled.",
            "fields": [
                "name",
                "disabled"
            ]
        },
        "output": "frappe.get_list('Assignment Rule', filters={'disabled': 1}, fields=['name', 'disabled'])"
    },
    {
        "input": {
            "doctype": "Assignment Rule",
            "question": "Get all assignment rules for the Sales Invoice doctype.",
            "fields": [
                "name",
                "document_type"
            ]
        },
        "output": "frappe.get_list('Assignment Rule', filters={'document_type': 'Sales Invoice'}, fields=['name', 'document_type'])"
    },
    {
        "input": {
            "doctype": "Assignment Rule",
            "question": "List all assignment rules that use priority-based logic.",
            "fields": [
                "name",
                "priority"
            ]
        },
        "output": "frappe.get_list('Assignment Rule', filters={'priority': 'High'}, fields=['name', 'priority'])"
    },
    {
        "input": {
            "doctype": "Assignment Rule",
            "question": "Which assignment rules are using a custom assign condition?",
            "fields": [
                "name",
                "assign_condition"
            ]
        },
        "output": "frappe.get_list('Assignment Rule', filters={'assign_condition': ['!=', '']}, fields=['name', 'assign_condition'])"
    },
    {
        "input": {
            "doctype": "Assignment Rule",
            "question": "List assignment rules where the unassign condition is defined.",
            "fields": [
                "name",
                "unassign_condition"
            ]
        },
        "output": "frappe.get_list('Assignment Rule', filters={'unassign_condition': ['!=', '']}, fields=['name', 'unassign_condition'])"
    },
    {
        "input": {
            "doctype": "Assignment Rule",
            "question": "List all rules with custom due date logic configured.",
            "fields": [
                "name",
                "due_date_based_on"
            ]
        },
        "output": "frappe.get_list('Assignment Rule', filters={'due_date_based_on': ['!=', '']}, fields=['name', 'due_date_based_on'])"
    },
    {
        "input": {
            "doctype": "Assignment Rule",
            "question": "List rules with custom document type assignment settings.",
            "fields": [
                "document_type",
                "description"
            ]
        },
        "output": "frappe.get_list('Assignment Rule', filters={'description': ['!=', '']}, fields=['document_type', 'description'])"
    },
    {
        "input": {
            "doctype": "Assignment Rule",
            "question": "Fetch all assignment rules regardless of filters.",
            "fields": [
                "name",
                "priority"
            ]
        },
        "output": "frappe.get_all('Assignment Rule', fields=['name', 'priority'])"
    },
    {
        "input": {
            "doctype": "Assignment Rule",
            "question": "Get all rules that assign users based on custom fields.",
            "fields": [
                "name",
                "field"
            ]
        },
        "output": "frappe.get_all('Assignment Rule', filters={'field': ['!=', '']}, fields=['name', 'field'])"
    },
    {
        "input": {
            "doctype": "Assignment Rule",
            "question": "Fetch every rule and its last assigned user.",
            "fields": [
                "name",
                "last_user"
            ]
        },
        "output": "frappe.get_all('Assignment Rule', fields=['name', 'last_user'])"
    },
    {
        "input": {
            "doctype": "Assignment Rule",
            "question": "Get complete details of the assignment rule named 'Support Ticket Routing'.",
            "fields": []
        },
        "output": "frappe.get_doc('Assignment Rule', 'Support Ticket Routing')"
    },
    {
        "input": {
            "doctype": "Assignment Rule",
            "question": "Get the full configuration for 'Sales Order Round Robin Rule'.",
            "fields": []
        },
        "output": "frappe.get_doc('Assignment Rule', 'Sales Order Round Robin Rule')"
    },
    {
        "input": {
            "doctype": "Assignment Rule",
            "question": "Fetch all configuration fields of 'High Priority Lead Assignment'.",
            "fields": []
        },
        "output": "frappe.get_doc('Assignment Rule', 'High Priority Lead Assignment')"
    },
    {
        "input": {
            "doctype": "Assignment Rule",
            "question": "What is the field used for user assignment in the 'Lead Assignment Rule'?",
            "fields": [
                "field"
            ]
        },
        "output": "frappe.db.get_value('Assignment Rule', {'name': 'Lead Assignment Rule'}, 'field')"
    },
    {
        "input": {
            "doctype": "Assignment Rule",
            "question": "Which user was last assigned by the 'Task Priority Rule'?",
            "fields": [
                "last_user"
            ]
        },
        "output": "frappe.db.get_value('Assignment Rule', {'name': 'Task Priority Rule'}, 'last_user')"
    },
    {
        "input": {
            "doctype": "Assignment Rule",
            "question": "How many assignment rules are configured in total?",
            "fields": []
        },
        "output": "frappe.db.count('Assignment Rule')"
    },
    {
        "input": {
            "doctype": "Assignment Rule",
            "question": "How many rules are currently disabled?",
            "fields": [
                "disabled"
            ]
        },
        "output": "frappe.db.count('Assignment Rule', {'disabled': 1})"
    },
    {
        "input": {
            "doctype": "South Africa VAT Settings",
            "question": "List all VAT settings configured for companies in South Africa.",
            "fields": [
                "company",
                "vat_accounts"
            ]
        },
        "output": "frappe.get_list('South Africa VAT Settings', fields=['company', 'vat_accounts'])"
    },
    {
        "input": {
            "doctype": "South Africa VAT Settings",
            "question": "Which VAT settings are linked to the company 'ABC Corp SA'?",
            "fields": [
                "company"
            ]
        },
        "output": "frappe.get_list('South Africa VAT Settings', filters={'company': 'ABC Corp SA'}, fields=['company'])"
    },
    {
        "input": {
            "doctype": "South Africa VAT Settings",
            "question": "List companies with multiple VAT accounts configured.",
            "fields": [
                "company",
                "vat_accounts"
            ]
        },
        "output": "frappe.get_list('South Africa VAT Settings', filters={'vat_accounts': ['!=', '']}, fields=['company', 'vat_accounts'])"
    },
    {
        "input": {
            "doctype": "South Africa VAT Settings",
            "question": "Find all companies with VAT settings configured in ERPNext.",
            "fields": [
                "company"
            ]
        },
        "output": "frappe.get_list('South Africa VAT Settings', fields=['company'])"
    },
    {
        "input": {
            "doctype": "South Africa VAT Settings",
            "question": "List VAT configuration settings for all registered South African companies.",
            "fields": [
                "company",
                "vat_accounts"
            ]
        },
        "output": "frappe.get_list('South Africa VAT Settings', fields=['company', 'vat_accounts'])"
    },
    {
        "input": {
            "doctype": "South Africa VAT Settings",
            "question": "Which companies in South Africa have no VAT accounts set yet?",
            "fields": [
                "company",
                "vat_accounts"
            ]
        },
        "output": "frappe.get_list('South Africa VAT Settings', filters={'vat_accounts': ''}, fields=['company'])"
    },
    {
        "input": {
            "doctype": "South Africa VAT Settings",
            "question": "Get companies with any VAT setup in place.",
            "fields": [
                "company"
            ]
        },
        "output": "frappe.get_list('South Africa VAT Settings', filters={'company': ['!=', '']}, fields=['company'])"
    },
    {
        "input": {
            "doctype": "South Africa VAT Settings",
            "question": "Fetch all South African VAT settings including company and linked VAT accounts.",
            "fields": [
                "company",
                "vat_accounts"
            ]
        },
        "output": "frappe.get_all('South Africa VAT Settings', fields=['company', 'vat_accounts'])"
    },
    {
        "input": {
            "doctype": "South Africa VAT Settings",
            "question": "Retrieve the complete VAT mapping configuration across companies.",
            "fields": [
                "company",
                "vat_accounts"
            ]
        },
        "output": "frappe.get_all('South Africa VAT Settings', fields=['company', 'vat_accounts'])"
    },
    {
        "input": {
            "doctype": "South Africa VAT Settings",
            "question": "Get all configuration fields for VAT setup in South Africa.",
            "fields": []
        },
        "output": "frappe.get_all('South Africa VAT Settings')"
    },
    {
        "input": {
            "doctype": "South Africa VAT Settings",
            "question": "Get the full configuration for ABC Corp SA\u2019s VAT settings.",
            "fields": []
        },
        "output": "frappe.get_doc('South Africa VAT Settings', 'ABC Corp SA')"
    },
    {
        "input": {
            "doctype": "South Africa VAT Settings",
            "question": "Retrieve all setup details for company 'Cape Traders (Pty) Ltd'.",
            "fields": []
        },
        "output": "frappe.get_doc('South Africa VAT Settings', 'Cape Traders (Pty) Ltd')"
    },
    {
        "input": {
            "doctype": "South Africa VAT Settings",
            "question": "Show VAT settings document for 'Durban Wholesale SA'.",
            "fields": []
        },
        "output": "frappe.get_doc('South Africa VAT Settings', 'Durban Wholesale SA')"
    },
    {
        "input": {
            "doctype": "South Africa VAT Settings",
            "question": "Which VAT accounts are linked to the company 'ABC Corp SA'?",
            "fields": [
                "vat_accounts"
            ]
        },
        "output": "frappe.db.get_value('South Africa VAT Settings', {'company': 'ABC Corp SA'}, 'vat_accounts')"
    },
    {
        "input": {
            "doctype": "South Africa VAT Settings",
            "question": "What company is configured in the VAT settings for 'Durban Wholesale SA'?",
            "fields": [
                "company"
            ]
        },
        "output": "frappe.db.get_value('South Africa VAT Settings', {'name': 'Durban Wholesale SA'}, 'company')"
    },
    {
        "input": {
            "doctype": "South Africa VAT Settings",
            "question": "How many VAT configurations are defined for South African companies?",
            "fields": []
        },
        "output": "frappe.db.count('South Africa VAT Settings')"
    },
    {
        "input": {
            "doctype": "South Africa VAT Settings",
            "question": "Count how many companies do not have VAT accounts set yet.",
            "fields": [
                "vat_accounts"
            ]
        },
        "output": "frappe.db.count('South Africa VAT Settings', {'vat_accounts': ''})"
    },
    {
        "input": {
            "doctype": "Service Level Priority",
            "question": "List all service level priorities and their response times.",
            "fields": [
                "priority",
                "response_time"
            ]
        },
        "output": "frappe.get_list('Service Level Priority', fields=['priority', 'response_time'])"
    },
    {
        "input": {
            "doctype": "Service Level Priority",
            "question": "Get all service level priorities with a response time of 4 hours or less.",
            "fields": [
                "priority",
                "response_time"
            ]
        },
        "output": "frappe.get_list('Service Level Priority', filters={\"response_time\": [\"<=\", 4]}, fields=['priority', 'response_time'])"
    },
    {
        "input": {
            "doctype": "Service Level Priority",
            "question": "Count how many service level priorities have a resolution time above 12 hours.",
            "fields": [
                "resolution_time"
            ]
        },
        "output": "frappe.db.count('Service Level Priority', {\"resolution_time\": [\">\", 12]})"
    },
    {
        "input": {
            "doctype": "Service Level Priority",
            "question": "Retrieve the response and resolution time for the 'High' priority level.",
            "fields": [
                "response_time",
                "resolution_time"
            ]
        },
        "output": "frappe.db.get_value('Service Level Priority', {'priority': 'High'}, ['response_time', 'resolution_time'])"
    },
    {
        "input": {
            "doctype": "Service Level Priority",
            "question": "Fetch the full configuration for the 'Urgent' service level.",
            "fields": []
        },
        "output": "frappe.get_doc('Service Level Priority', 'Urgent')"
    },
    {
        "input": {
            "doctype": "Service Level Priority",
            "question": "Show all priorities where resolution time is optional (blank).",
            "fields": [
                "priority",
                "resolution_time"
            ]
        },
        "output": "frappe.get_list('Service Level Priority', filters={\"resolution_time\": \"\"}, fields=['priority', 'resolution_time'])"
    },
    {
        "input": {
            "doctype": "Service Level Priority",
            "question": "Get all defined priorities in the system with both response and resolution times.",
            "fields": [
                "priority",
                "response_time",
                "resolution_time"
            ]
        },
        "output": "frappe.get_all('Service Level Priority', fields=['priority', 'response_time', 'resolution_time'])"
    },
    {
        "input": {
            "doctype": "Service Level Priority",
            "question": "List all service level priorities marked as default.",
            "fields": [
                "priority",
                "is_default"
            ]
        },
        "output": "frappe.get_list('Service Level Priority', filters={'is_default': 1}, fields=['priority', 'is_default'])"
    },
    {
        "input": {
            "doctype": "Service Level Priority",
            "question": "Get the resolution time for 'High' priority service level.",
            "fields": [
                "resolution_time"
            ]
        },
        "output": "frappe.db.get_value('Service Level Priority', {'priority': 'High'}, 'resolution_time')"
    },
    {
        "input": {
            "doctype": "Service Level Priority",
            "question": "Count how many service level priorities are defined.",
            "fields": []
        },
        "output": "frappe.db.count('Service Level Priority')"
    },
    {
        "input": {
            "doctype": "Service Level Priority",
            "question": "Fetch all service level priorities with first response time greater than 1 hour.",
            "fields": [
                "priority",
                "first_respond_time"
            ]
        },
        "output": "frappe.get_list('Service Level Priority', filters={ 'first_respond_time': ['>', 60] }, fields=['priority', 'first_respond_time'])"
    },
    {
        "input": {
            "doctype": "Service Level Priority",
            "question": "Get complete configuration for 'Urgent' service level priority.",
            "fields": []
        },
        "output": "frappe.get_doc('Service Level Priority', 'Urgent')"
    },
    {
        "input": {
            "doctype": "Service Level Priority",
            "question": "How many service level priorities are marked with a resolution time?",
            "fields": [
                "resolution_time"
            ]
        },
        "output": "frappe.db.count('Service Level Priority', {'resolution_time': ['!=', '']})"
    },
    {
        "input": {
            "doctype": "Service Level Priority",
            "question": "Get all service level priority names and their resolution times.",
            "fields": [
                "priority",
                "resolution_time"
            ]
        },
        "output": "frappe.get_all('Service Level Priority', fields=['priority', 'resolution_time'])"
    },
    {
        "input": {
            "doctype": "Service Level Priority",
            "question": "What is the first response time for 'Normal' priority?",
            "fields": [
                "first_respond_time"
            ]
        },
        "output": "frappe.db.get_value('Service Level Priority', {'priority': 'Normal'}, 'first_respond_time')"
    },
    {
        "input": {
            "doctype": "Service Level Priority",
            "question": "Show the list of all priorities and their response and resolution times.",
            "fields": [
                "priority",
                "first_respond_time",
                "resolution_time"
            ]
        },
        "output": "frappe.get_all('Service Level Priority', fields=['priority', 'first_respond_time', 'resolution_time'])"
    },
    {
        "input": {
            "doctype": "Service Level Priority",
            "question": "Fetch service level priorities that have resolution time below 30 minutes.",
            "fields": [
                "priority",
                "resolution_time"
            ]
        },
        "output": "frappe.get_list('Service Level Priority', filters={ 'resolution_time': ['<', 30] }, fields=['priority', 'resolution_time'])"
    },
    {
        "input": {
            "doctype": "Service Level Priority",
            "question": "Get details of the service level priority called 'Critical'.",
            "fields": []
        },
        "output": "frappe.get_doc('Service Level Priority', 'Critical')"
    },
    {
        "input": {
            "doctype": "Service Level Priority",
            "question": "List all priorities where first response time is exactly 15 minutes.",
            "fields": [
                "priority",
                "first_respond_time"
            ]
        },
        "output": "frappe.get_list('Service Level Priority', filters={'first_respond_time': 15}, fields=['priority', 'first_respond_time'])"
    },
    {
        "input": {
            "doctype": "Service Level Priority",
            "question": "Retrieve the first response and resolution times for 'Low' priority.",
            "fields": [
                "first_respond_time",
                "resolution_time"
            ]
        },
        "output": "frappe.get_list('Service Level Priority', filters={'priority': 'Low'}, fields=['first_respond_time', 'resolution_time'])"
    },
    {
        "input": {
            "doctype": "Sub Operation",
            "question": "List all sub-operations with their associated main operations.",
            "fields": [
                "operation"
            ]
        },
        "output": "frappe.get_list('Sub Operation', fields=['operation'])"
    },
    {
        "input": {
            "doctype": "Sub Operation",
            "question": "Get the time in minutes for the sub-operation 'Drilling'.",
            "fields": [
                "time_in_mins"
            ]
        },
        "output": "frappe.db.get_value('Sub Operation', {'operation': 'Drilling'}, 'time_in_mins')"
    },
    {
        "input": {
            "doctype": "Sub Operation",
            "question": "Retrieve all sub-operations and their descriptions.",
            "fields": [
                "operation",
                "description"
            ]
        },
        "output": "frappe.get_all('Sub Operation', fields=['operation', 'description'])"
    },
    {
        "input": {
            "doctype": "Sub Operation",
            "question": "How many sub-operations are defined in the system?",
            "fields": []
        },
        "output": "frappe.db.count('Sub Operation')"
    },
    {
        "input": {
            "doctype": "Sub Operation",
            "question": "Get the complete document for the sub-operation 'Cutting'.",
            "fields": []
        },
        "output": "frappe.get_doc('Sub Operation', 'Cutting')"
    },
    {
        "input": {
            "doctype": "Sub Operation",
            "question": "List all sub-operations that require 60 minutes or more.",
            "fields": [
                "operation",
                "time_in_mins"
            ]
        },
        "output": "frappe.get_list('Sub Operation', filters={\"time_in_mins\": [\">=\", 60]}, fields=['operation', 'time_in_mins'])"
    },
    {
        "input": {
            "doctype": "Sub Operation",
            "question": "Retrieve all sub-operations that include a description.",
            "fields": [
                "operation",
                "description"
            ]
        },
        "output": "frappe.get_list('Sub Operation', filters={\"description\": [\"!=\", \"\"]}, fields=['operation', 'description'])"
    },
    {
        "input": {
            "doctype": "Sub Operation",
            "question": "Count how many sub-operations are linked to the operation 'Painting'.",
            "fields": [
                "operation"
            ]
        },
        "output": "frappe.db.count('Sub Operation', {\"operation\": \"Painting\"})"
    },
    {
        "input": {
            "doctype": "Sub Operation",
            "question": "Fetch all sub-operations and their time values for review.",
            "fields": [
                "operation",
                "time_in_mins"
            ]
        },
        "output": "frappe.get_all('Sub Operation', fields=['operation', 'time_in_mins'])"
    },
    {
        "input": {
            "doctype": "Sub Operation",
            "question": "What is the description of the sub-operation 'Polishing'?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.db.get_value('Sub Operation', {'operation': 'Polishing'}, 'description')"
    },
    {
        "input": {
            "doctype": "Sub Operation",
            "question": "Get all sub-operations where the time required is less than 30 minutes.",
            "fields": [
                "operation",
                "time_in_mins"
            ]
        },
        "output": "frappe.get_list('Sub Operation', filters={\"time_in_mins\": [\"<\", 30]}, fields=['operation', 'time_in_mins'])"
    },
    {
        "input": {
            "doctype": "Sub Operation",
            "question": "Retrieve all sub-operations for the operation 'Milling'.",
            "fields": [
                "operation"
            ]
        },
        "output": "frappe.get_list('Sub Operation', filters={\"operation\": \"Milling\"}, fields=['operation'])"
    },
    {
        "input": {
            "doctype": "Sub Operation",
            "question": "Count all sub-operations having any description entered.",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.db.count('Sub Operation', {\"description\": [\"!=\", \"\"]})"
    },
    {
        "input": {
            "doctype": "Sub Operation",
            "question": "Get the document for the sub-operation with ID 'OPR-2025-001'.",
            "fields": []
        },
        "output": "frappe.get_doc('Sub Operation', 'OPR-2025-001')"
    },
    {
        "input": {
            "doctype": "Sub Operation",
            "question": "Get all sub-operations along with their description and duration.",
            "fields": [
                "operation",
                "description",
                "time_in_mins"
            ]
        },
        "output": "frappe.get_list('Sub Operation', fields=['operation', 'description', 'time_in_mins'])"
    },
    {
        "input": {
            "doctype": "Sub Operation",
            "question": "Fetch only the name and time for all sub-operations longer than 45 minutes.",
            "fields": [
                "operation",
                "time_in_mins"
            ]
        },
        "output": "frappe.get_list('Sub Operation', filters={\"time_in_mins\": [\">\", 45]}, fields=['operation', 'time_in_mins'])"
    },
    {
        "input": {
            "doctype": "Sub Operation",
            "question": "Retrieve just the operation names from Sub Operation.",
            "fields": [
                "operation"
            ]
        },
        "output": "frappe.get_all('Sub Operation', fields=['operation'])"
    },
    {
        "input": {
            "doctype": "Sub Operation",
            "question": "How many sub-operations are associated with 'Assembly'?",
            "fields": [
                "operation"
            ]
        },
        "output": "frappe.db.count('Sub Operation', {\"operation\": \"Assembly\"})"
    },
    {
        "input": {
            "doctype": "Sub Operation",
            "question": "Fetch all fields for the sub-operation 'Grinding'.",
            "fields": []
        },
        "output": "frappe.get_doc('Sub Operation', 'Grinding')"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "How do I check the current S3 bucket name used for backups?",
            "fields": [
                "bucket"
            ]
        },
        "output": "frappe.db.get_value(\"S3 Backup Settings\", {}, \"bucket\")"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "Where can I find the email address used for backup notifications?",
            "fields": [
                "notify_email"
            ]
        },
        "output": "frappe.db.get_value(\"S3 Backup Settings\", {}, \"notify_email\")"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "List all S3 backup settings where email alerts are enabled.",
            "fields": [
                "name",
                "send_email_for_successful_backup"
            ]
        },
        "output": "frappe.get_list(\"S3 Backup Settings\", filters={\"send_email_for_successful_backup\": 1}, fields=[\"name\", \"send_email_for_successful_backup\"])"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "Show me all configurations that use weekly backups.",
            "fields": [
                "name",
                "frequency"
            ]
        },
        "output": "frappe.get_list(\"S3 Backup Settings\", filters={\"frequency\": \"Weekly\"}, fields=[\"name\", \"frequency\"])"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "Can I count how many setups are scheduled for monthly backups?",
            "fields": [
                "frequency"
            ]
        },
        "output": "frappe.db.count(\"S3 Backup Settings\", {\"frequency\": \"Monthly\"})"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "How many S3 backup configurations are skipping file backups?",
            "fields": [
                "backup_files"
            ]
        },
        "output": "frappe.db.count(\"S3 Backup Settings\", {\"backup_files\": 0})"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "Give me the access key for my current backup setup.",
            "fields": [
                "access_key_id"
            ]
        },
        "output": "frappe.db.get_value(\"S3 Backup Settings\", {}, \"access_key_id\")"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "Get all S3 configurations that point to my custom endpoint.",
            "fields": [
                "name",
                "endpoint_url"
            ]
        },
        "output": "frappe.get_list(\"S3 Backup Settings\", filters={\"endpoint_url\": \"your-custom-endpoint.com\"}, fields=[\"name\", \"endpoint_url\"])"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "Retrieve the full S3 Backup Settings document.",
            "fields": [
                "enabled",
                "access_key_id",
                "secret_access_key",
                "notify_email",
                "bucket",
                "endpoint_url",
                "frequency",
                "backup_files"
            ]
        },
        "output": "frappe.get_doc(\"S3 Backup Settings\", \"S3 Backup Settings\")"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "Which configurations have automatic backups enabled?",
            "fields": [
                "name",
                "enabled"
            ]
        },
        "output": "frappe.get_all(\"S3 Backup Settings\", filters={\"enabled\": 1}, fields=[\"name\", \"enabled\"])"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "Is the automatic backup currently enabled in my system?",
            "fields": [
                "enabled"
            ]
        },
        "output": "frappe.db.get_value(\"S3 Backup Settings\", {}, \"enabled\")"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "List all entries that use the Daily backup schedule.",
            "fields": [
                "name",
                "frequency"
            ]
        },
        "output": "frappe.get_list(\"S3 Backup Settings\", filters={\"frequency\": \"Daily\"}, fields=[\"name\", \"frequency\"])"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "How many configurations have the notification email blank?",
            "fields": [
                "notify_email"
            ]
        },
        "output": "frappe.db.count(\"S3 Backup Settings\", {\"notify_email\": \"\"})"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "Which settings have notifications disabled for successful backups?",
            "fields": [
                "name",
                "send_email_for_successful_backup"
            ]
        },
        "output": "frappe.get_list(\"S3 Backup Settings\", filters={\"send_email_for_successful_backup\": 0}, fields=[\"name\", \"send_email_for_successful_backup\"])"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "Fetch all configurations where file backups are included.",
            "fields": [
                "name",
                "backup_files"
            ]
        },
        "output": "frappe.get_all(\"S3 Backup Settings\", filters={\"backup_files\": 1}, fields=[\"name\", \"backup_files\"])"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "Get the endpoint URL used for the current S3 backup.",
            "fields": [
                "endpoint_url"
            ]
        },
        "output": "frappe.db.get_value(\"S3 Backup Settings\", {}, \"endpoint_url\")"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "Show me all entries that use 'weekly' as backup frequency and have file backups enabled.",
            "fields": [
                "name",
                "frequency",
                "backup_files"
            ]
        },
        "output": "frappe.get_list(\"S3 Backup Settings\", filters={\"frequency\": \"Weekly\", \"backup_files\": 1}, fields=[\"name\", \"frequency\", \"backup_files\"])"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "Find the configurations where automatic backups are turned off.",
            "fields": [
                "name",
                "enabled"
            ]
        },
        "output": "frappe.get_list(\"S3 Backup Settings\", filters={\"enabled\": 0}, fields=[\"name\", \"enabled\"])"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "Give me the secret access key used for the current S3 connection.",
            "fields": [
                "secret_access_key"
            ]
        },
        "output": "frappe.db.get_value(\"S3 Backup Settings\", {}, \"secret_access_key\")"
    },
    {
        "input": {
            "doctype": "S3 Backup Settings",
            "question": "Retrieve all backup settings that include both email notifications and file backups.",
            "fields": [
                "name",
                "send_email_for_successful_backup",
                "backup_files"
            ]
        },
        "output": "frappe.get_list(\"S3 Backup Settings\", filters={\"send_email_for_successful_backup\": 1, \"backup_files\": 1}, fields=[\"name\", \"send_email_for_successful_backup\", \"backup_files\"])"
    },
    {
        "input": {
            "doctype": "Activity Cost",
            "question": "What is the billing rate for each activity type in our system?",
            "fields": [
                "activity_type",
                "billing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Cost', fields=['activity_type', 'billing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Cost",
            "question": "Can I check the costing rate for activities performed by employees in the marketing department?",
            "fields": [
                "employee",
                "costing_rate",
                "department"
            ]
        },
        "output": "frappe.get_all('Activity Cost', filters={'department': 'Marketing'}, fields=['employee', 'costing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Cost",
            "question": "List all activity costs along with their activity type and billing rate.",
            "fields": [
                "activity_type",
                "billing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Cost', fields=['activity_type', 'billing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Cost",
            "question": "Show me activity cost records assigned to employee John Doe.",
            "fields": [
                "employee",
                "activity_type",
                "billing_rate",
                "costing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Cost', filters={'employee': 'John Doe'}, fields=['activity_type', 'billing_rate', 'costing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Cost",
            "question": "I need to know which department has the highest activity costing rate.",
            "fields": [
                "department",
                "costing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Cost', fields=['department', 'costing_rate'], order_by='costing_rate desc', limit=1)"
    },
    {
        "input": {
            "doctype": "Activity Cost",
            "question": "Can you pull up all activity costs with missing employee information?",
            "fields": [
                "activity_type",
                "billing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Cost', filters={'employee': ['is', 'null']}, fields=['activity_type', 'billing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Cost",
            "question": "Get the billing and costing rates for all activities involving the sales team.",
            "fields": [
                "department",
                "billing_rate",
                "costing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Cost', filters={'department': 'Sales'}, fields=['billing_rate', 'costing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Cost",
            "question": "Do we have any activities without a defined billing rate?",
            "fields": [
                "activity_type"
            ]
        },
        "output": "frappe.get_all('Activity Cost', filters={'billing_rate': ['is', 'null']}, fields=['activity_type'])"
    },
    {
        "input": {
            "doctype": "Activity Cost",
            "question": "Fetch all records where activity type is 'Consulting' along with their rates.",
            "fields": [
                "billing_rate",
                "costing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Cost', filters={'activity_type': 'Consulting'}, fields=['billing_rate', 'costing_rate'])"
    },
    {
        "input": {
            "doctype": "Activity Cost",
            "question": "Which employees have activities listed with both billing and costing rates?",
            "fields": [
                "employee",
                "billing_rate",
                "costing_rate"
            ]
        },
        "output": "frappe.get_all('Activity Cost', filters={ 'billing_rate': ['!=', 0], 'costing_rate': ['!=', 0] }, fields=['employee'])"
    },
    {
        "input": {
            "doctype": "Activity Cost",
            "question": "I'd like a summary of activity costs grouped by department.",
            "fields": [
                "department",
                "billing_rate"
            ]
        },
        "output": "frappe.db.sql(\"SELECT department, SUM(billing_rate) as total_billing FROM `tabActivity Cost` GROUP BY department\")"
    },
    {
        "input": {
            "doctype": "Activity Cost",
            "question": "What are the titles used in activity cost entries and their associated employees?",
            "fields": [
                "title",
                "employee"
            ]
        },
        "output": "frappe.get_all('Activity Cost', fields=['title', 'employee'])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "Can I see the scorecard data for all suppliers for the current quarter?",
            "fields": [
                "supplier",
                "total_score",
                "start_date",
                "end_date"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'start_date': ['>=', frappe.utils.get_quarter_start()], 'end_date': ['<=', frappe.utils.get_quarter_end()] }, fields=['supplier', 'total_score', 'start_date', 'end_date'])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "Show me which suppliers have the highest period score this year.",
            "fields": [
                "supplier",
                "total_score"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'start_date': ['>=', frappe.utils.get_year_start()] }, fields=['supplier', 'total_score'], order_by='total_score desc')"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "I want to track supplier performance from January to March.",
            "fields": [
                "supplier",
                "total_score",
                "start_date",
                "end_date"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'start_date': ['>=', '2025-01-01'], 'end_date': ['<=', '2025-03-31'] }, fields=['supplier', 'total_score'])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "What is the score of supplier Alpha Industries for last fiscal period?",
            "fields": [
                "supplier",
                "total_score",
                "start_date",
                "end_date"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'supplier': 'Alpha Industries' }, fields=['total_score', 'start_date', 'end_date'], order_by='end_date desc', limit=1)"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "List all suppliers who scored below 80% in the last evaluation period.",
            "fields": [
                "supplier",
                "total_score"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'total_score': ['<', 80] }, fields=['supplier', 'total_score'])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "Can I review the scorecard criteria used for supplier evaluations?",
            "fields": [
                "criteria"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', fields=['criteria'])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "Give me the performance details of suppliers who were evaluated using scorecard SSP-2024.",
            "fields": [
                "supplier",
                "total_score",
                "scorecard"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'scorecard': 'SSP-2024' }, fields=['supplier', 'total_score'])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "Which suppliers were evaluated using custom variables this quarter?",
            "fields": [
                "supplier",
                "variables"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'variables': ['!=', ''], 'start_date': ['>=', frappe.utils.get_quarter_start()] }, fields=['supplier', 'variables'])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "Show me all scorecard periods that were created using the PU-SSP series.",
            "fields": [
                "supplier",
                "naming_series"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'naming_series': ['like', 'PU-SSP%'] }, fields=['supplier', 'naming_series'])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "What was the evaluation period for supplier Global Textiles in 2023?",
            "fields": [
                "supplier",
                "start_date",
                "end_date"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'supplier': 'Global Textiles', 'start_date': ['>=', '2023-01-01'], 'end_date': ['<=', '2023-12-31'] }, fields=['start_date', 'end_date'])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "Retrieve the supplier scorecard period that was amended recently.",
            "fields": [
                "supplier",
                "amended_from",
                "total_score"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'amended_from': ['!=', ''] }, fields=['supplier', 'amended_from', 'total_score'], order_by='modified desc', limit=1)"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "List all suppliers along with their criteria and total scores for the latest period.",
            "fields": [
                "supplier",
                "criteria",
                "total_score"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', fields=['supplier', 'criteria', 'total_score'], order_by='end_date desc')"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "Can I see the scorecard data for all suppliers for the current quarter?",
            "fields": [
                "supplier",
                "total_score",
                "start_date",
                "end_date"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'start_date': ['>=', frappe.utils.get_quarter_start()], 'end_date': ['<=', frappe.utils.get_quarter_end()] }, fields=['supplier', 'total_score', 'start_date', 'end_date'])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "Show me which suppliers have the highest period score this year.",
            "fields": [
                "supplier",
                "total_score"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'start_date': ['>=', frappe.utils.get_year_start()] }, fields=['supplier', 'total_score'], order_by='total_score desc')"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "I want to track supplier performance from January to March.",
            "fields": [
                "supplier",
                "total_score",
                "start_date",
                "end_date"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'start_date': ['>=', '2025-01-01'], 'end_date': ['<=', '2025-03-31'] }, fields=['supplier', 'total_score'])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "What is the score of supplier Alpha Industries for last fiscal period?",
            "fields": [
                "supplier",
                "total_score",
                "start_date",
                "end_date"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'supplier': 'Alpha Industries' }, fields=['total_score', 'start_date', 'end_date'], order_by='end_date desc', limit=1)"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "List all suppliers who scored below 80% in the last evaluation period.",
            "fields": [
                "supplier",
                "total_score"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'total_score': ['<', 80] }, fields=['supplier', 'total_score'])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "Can I review the scorecard criteria used for supplier evaluations?",
            "fields": [
                "criteria"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', fields=['criteria'])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "Give me the performance details of suppliers who were evaluated using scorecard SSP-2024.",
            "fields": [
                "supplier",
                "total_score",
                "scorecard"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'scorecard': 'SSP-2024' }, fields=['supplier', 'total_score'])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "Which suppliers were evaluated using custom variables this quarter?",
            "fields": [
                "supplier",
                "variables"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'variables': ['!=', ''], 'start_date': ['>=', frappe.utils.get_quarter_start()] }, fields=['supplier', 'variables'])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "Show me all scorecard periods that were created using the PU-SSP series.",
            "fields": [
                "supplier",
                "naming_series"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'naming_series': ['like', 'PU-SSP%'] }, fields=['supplier', 'naming_series'])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "What was the evaluation period for supplier Global Textiles in 2023?",
            "fields": [
                "supplier",
                "start_date",
                "end_date"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'supplier': 'Global Textiles', 'start_date': ['>=', '2023-01-01'], 'end_date': ['<=', '2023-12-31'] }, fields=['start_date', 'end_date'])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "Retrieve the supplier scorecard period that was amended recently.",
            "fields": [
                "supplier",
                "amended_from",
                "total_score"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'amended_from': ['!=', ''] }, fields=['supplier', 'amended_from', 'total_score'], order_by='modified desc', limit=1)"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Period",
            "question": "List all suppliers along with their criteria and total scores for the latest period.",
            "fields": [
                "supplier",
                "criteria",
                "total_score"
            ]
        },
        "output": "frappe.get_all('Supplier Scorecard Period', fields=['supplier', 'criteria', 'total_score'], order_by='end_date desc')"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Criteria",
            "question": "How many scorecard criteria are currently defined in the system?",
            "fields": []
        },
        "output": "frappe.db.count(\"Supplier Scorecard Scoring Criteria\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Criteria",
            "question": "List all criteria names with their maximum scores.",
            "fields": [
                "criteria_name",
                "max_score"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Criteria\", fields=[\"criteria_name\", \"max_score\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Criteria",
            "question": "Which scoring criteria have a weight greater than 25?",
            "fields": [
                "criteria_name",
                "weight"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Criteria\", filters={\"weight\": [\">\", 25]}, fields=[\"criteria_name\", \"weight\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Criteria",
            "question": "Get the formula for scoring compliance evaluation.",
            "fields": [
                "formula"
            ]
        },
        "output": "frappe.db.get_value(\"Supplier Scorecard Scoring Criteria\", {\"criteria_name\": \"Compliance\"}, \"formula\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Criteria",
            "question": "Fetch the weight and max score for the 'quality assurance' criterion.",
            "fields": [
                "weight",
                "max_score"
            ]
        },
        "output": "frappe.db.get_value(\"Supplier Scorecard Scoring Criteria\", {\"criteria_name\": \"Quality Assurance\"}, [\"weight\", \"max_score\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Criteria",
            "question": "Show all scoring formulas currently defined.",
            "fields": [
                "criteria_name",
                "formula"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Criteria\", fields=[\"criteria_name\", \"formula\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Criteria",
            "question": "How many criteria have no score or weight assigned?",
            "fields": [
                "score",
                "weight"
            ]
        },
        "output": "frappe.db.count(\"Supplier Scorecard Scoring Criteria\", {\"score\": 0, \"weight\": 0})"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Criteria",
            "question": "Get the current score for the 'delivery timeliness' criterion.",
            "fields": [
                "score"
            ]
        },
        "output": "frappe.db.get_value(\"Supplier Scorecard Scoring Criteria\", {\"criteria_name\": \"Delivery Timeliness\"}, \"score\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Criteria",
            "question": "List criteria with scores above 80.",
            "fields": [
                "criteria_name",
                "score"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Criteria\", filters={\"score\": [\">\", 80]}, fields=[\"criteria_name\", \"score\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Criteria",
            "question": "Show me the criterion that has the highest weight.",
            "fields": [
                "criteria_name",
                "weight"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Criteria\", fields=[\"criteria_name\", \"weight\"], order_by=\"weight desc\", limit=1)"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Criteria",
            "question": "List all scorecard metrics and their assigned weights.",
            "fields": [
                "criteria_name",
                "weight"
            ]
        },
        "output": "frappe.get_all(\"Supplier Scorecard Scoring Criteria\", fields=[\"criteria_name\", \"weight\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Criteria",
            "question": "Retrieve complete details of the 'Product Quality' scoring criterion.",
            "fields": [
                "criteria_name",
                "score",
                "weight",
                "max_score",
                "formula"
            ]
        },
        "output": "frappe.get_doc(\"Supplier Scorecard Scoring Criteria\", \"Product Quality\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Criteria",
            "question": "Find all scoring criteria with a max score below 50.",
            "fields": [
                "criteria_name",
                "max_score"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Criteria\", filters={\"max_score\": [\"<\", 50]}, fields=[\"criteria_name\", \"max_score\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Criteria",
            "question": "Give me the name and formula of all active scoring criteria.",
            "fields": [
                "criteria_name",
                "formula"
            ]
        },
        "output": "frappe.get_all(\"Supplier Scorecard Scoring Criteria\", fields=[\"criteria_name\", \"formula\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Criteria",
            "question": "Which scoring criteria have score exactly 0?",
            "fields": [
                "criteria_name",
                "score"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Criteria\", filters={\"score\": 0}, fields=[\"criteria_name\", \"score\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Criteria",
            "question": "Get all scorecard criteria with formula containing the word 'average'.",
            "fields": [
                "criteria_name",
                "formula"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Criteria\", filters={\"formula\": [\"like\", \"%average%\"]}, fields=[\"criteria_name\", \"formula\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Criteria",
            "question": "How many scoring criteria have weight above 30?",
            "fields": [
                "weight"
            ]
        },
        "output": "frappe.db.count(\"Supplier Scorecard Scoring Criteria\", {\"weight\": [\">\", 30]})"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Criteria",
            "question": "Fetch all scorecard criteria names with their current score values.",
            "fields": [
                "criteria_name",
                "score"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Criteria\", fields=[\"criteria_name\", \"score\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Criteria",
            "question": "Find the criterion that contributes most to the final supplier score based on weight.",
            "fields": [
                "criteria_name",
                "weight"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Criteria\", fields=[\"criteria_name\", \"weight\"], order_by=\"weight desc\", limit=1)"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Criteria",
            "question": "List all criteria with their scores and weights for evaluation this month.",
            "fields": [
                "criteria_name",
                "score",
                "weight"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Criteria\", fields=[\"criteria_name\", \"score\", \"weight\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "List all variable names used in the supplier scorecard setup.",
            "fields": [
                "variable_label"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Variable\", fields=[\"variable_label\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Get the value assigned to the 'on-time performance' scoring variable.",
            "fields": [
                "value"
            ]
        },
        "output": "frappe.db.get_value(\"Supplier Scorecard Scoring Variable\", {\"variable_label\": \"On-Time Performance\"}, \"value\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "How many variables are defined for supplier performance scoring?",
            "fields": []
        },
        "output": "frappe.db.count(\"Supplier Scorecard Scoring Variable\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "List all scoring variable labels along with their paths.",
            "fields": [
                "variable_label",
                "path"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Variable\", fields=[\"variable_label\", \"path\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Fetch the full record for the variable 'Delivery Delay'.",
            "fields": [
                "variable_label",
                "description",
                "value",
                "param_name",
                "path"
            ]
        },
        "output": "frappe.get_doc(\"Supplier Scorecard Scoring Variable\", \"Delivery Delay\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Show the parameter names and values used in the last supplier evaluation.",
            "fields": [
                "param_name",
                "value"
            ]
        },
        "output": "frappe.get_all(\"Supplier Scorecard Scoring Variable\", fields=[\"param_name\", \"value\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "How many variables use 'variance' in their parameter name?",
            "fields": [
                "param_name"
            ]
        },
        "output": "frappe.db.count(\"Supplier Scorecard Scoring Variable\", {\"param_name\": [\"like\", \"%variance%\"]})"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Get the path for the scoring variable named 'Defect Rate'.",
            "fields": [
                "path"
            ]
        },
        "output": "frappe.db.get_value(\"Supplier Scorecard Scoring Variable\", {\"variable_label\": \"Defect Rate\"}, \"path\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "List all variable labels and descriptions.",
            "fields": [
                "variable_label",
                "description"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Variable\", fields=[\"variable_label\", \"description\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Retrieve the full document for the variable 'Compliance Score'.",
            "fields": [
                "variable_label",
                "value",
                "param_name",
                "description",
                "path"
            ]
        },
        "output": "frappe.get_doc(\"Supplier Scorecard Scoring Variable\", \"Compliance Score\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Give me variable labels where the description is empty.",
            "fields": [
                "variable_label",
                "description"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Variable\", filters={\"description\": [\"in\", [null, \"\"]]}, fields=[\"variable_label\", \"description\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Get scoring variables where path contains 'timeliness'.",
            "fields": [
                "variable_label",
                "path"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Variable\", filters={\"path\": [\"like\", \"%timeliness%\"]}, fields=[\"variable_label\", \"path\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Fetch the latest scoring variables with values.",
            "fields": [
                "variable_label",
                "value"
            ]
        },
        "output": "frappe.get_all(\"Supplier Scorecard Scoring Variable\", fields=[\"variable_label\", \"value\"], order_by=\"modified desc\", limit=5)"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Find the variables used for evaluating supplier responsiveness.",
            "fields": [
                "variable_label",
                "description"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Variable\", filters={\"description\": [\"like\", \"%responsiveness%\"]}, fields=[\"variable_label\", \"description\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Retrieve the complete details of the variable 'Return Rate'.",
            "fields": [
                "variable_label",
                "value",
                "description",
                "path",
                "param_name"
            ]
        },
        "output": "frappe.get_doc(\"Supplier Scorecard Scoring Variable\", \"Return Rate\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Show variables whose value is between 20 and 60.",
            "fields": [
                "variable_label",
                "value"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Variable\", filters={\"value\": [\"between\", [20, 60]]}, fields=[\"variable_label\", \"value\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Which variables reference 'Sunrise Ltd' in their description?",
            "fields": [
                "variable_label",
                "description"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Variable\", filters={\"description\": [\"like\", \"%Sunrise Ltd%\"]}, fields=[\"variable_label\", \"description\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "List scoring variables with parameter names and values.",
            "fields": [
                "param_name",
                "value"
            ]
        },
        "output": "frappe.get_all(\"Supplier Scorecard Scoring Variable\", fields=[\"param_name\", \"value\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Give me all scoring variables where value exceeds 80.",
            "fields": [
                "variable_label",
                "value"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Variable\", filters={\"value\": [\">\", 80]}, fields=[\"variable_label\", \"value\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Variable",
            "question": "List all variable labels used in supplier scorecards.",
            "fields": [
                "variable_label"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Variable\", fields=[\"variable_label\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Variable",
            "question": "Get the parameter name for the variable 'Lead Time'.",
            "fields": [
                "param_name"
            ]
        },
        "output": "frappe.db.get_value(\"Supplier Scorecard Variable\", {\"variable_label\": \"Lead Time\"}, \"param_name\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Variable",
            "question": "Count how many scorecard variables are defined.",
            "fields": []
        },
        "output": "frappe.db.count(\"Supplier Scorecard Variable\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Variable",
            "question": "Show me all custom variables in the supplier scorecard.",
            "fields": [
                "variable_label",
                "is_custom"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Variable\", filters={\"is_custom\": 1}, fields=[\"variable_label\", \"is_custom\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Variable",
            "question": "Retrieve the complete record for the 'On-Time Delivery' variable.",
            "fields": [
                "variable_label",
                "param_name",
                "path",
                "is_custom",
                "description"
            ]
        },
        "output": "frappe.get_doc(\"Supplier Scorecard Variable\", \"On-Time Delivery\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Variable",
            "question": "Get all variable labels and their paths.",
            "fields": [
                "variable_label",
                "path"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Variable\", fields=[\"variable_label\", \"path\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Variable",
            "question": "Which variables don\u2019t have any descriptions?",
            "fields": [
                "variable_label",
                "description"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Variable\", filters={\"description\": [\"in\", [null, \"\"]]}, fields=[\"variable_label\", \"description\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Variable",
            "question": "Give me all standard variables that are not marked as custom.",
            "fields": [
                "variable_label",
                "is_custom"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Variable\", filters={\"is_custom\": 0}, fields=[\"variable_label\", \"is_custom\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Variable",
            "question": "Find the variable used to calculate supplier quality score.",
            "fields": [
                "variable_label",
                "description"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Variable\", filters={\"description\": [\"like\", \"%quality score%\"]}, fields=[\"variable_label\", \"description\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Variable",
            "question": "Retrieve all variables along with path and parameter name.",
            "fields": [
                "variable_label",
                "path",
                "param_name"
            ]
        },
        "output": "frappe.get_all(\"Supplier Scorecard Variable\", fields=[\"variable_label\", \"path\", \"param_name\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Variable",
            "question": "Get the full details of the variable 'Defect Rate'.",
            "fields": [
                "variable_label",
                "description",
                "param_name",
                "path",
                "is_custom"
            ]
        },
        "output": "frappe.get_doc(\"Supplier Scorecard Variable\", \"Defect Rate\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Variable",
            "question": "Which variables include 'timeliness' in the path?",
            "fields": [
                "variable_label",
                "path"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Variable\", filters={\"path\": [\"like\", \"%timeliness%\"]}, fields=[\"variable_label\", \"path\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Variable",
            "question": "How many variables have 'supplier' in their description?",
            "fields": [
                "description"
            ]
        },
        "output": "frappe.db.count(\"Supplier Scorecard Variable\", {\"description\": [\"like\", \"%supplier%\"]})"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Variable",
            "question": "Give me all scorecard variables and their descriptions.",
            "fields": [
                "variable_label",
                "description"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Variable\", fields=[\"variable_label\", \"description\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Variable",
            "question": "List all parameter names used in scorecard variables.",
            "fields": [
                "param_name"
            ]
        },
        "output": "frappe.get_all(\"Supplier Scorecard Variable\", fields=[\"param_name\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Variable",
            "question": "Fetch all variable labels that relate to lead time.",
            "fields": [
                "variable_label",
                "description"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Variable\", filters={\"description\": [\"like\", \"%lead time%\"]}, fields=[\"variable_label\", \"description\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Variable",
            "question": "Retrieve full document of the variable labeled 'Compliance'.",
            "fields": [
                "variable_label",
                "param_name",
                "description",
                "path",
                "is_custom"
            ]
        },
        "output": "frappe.get_doc(\"Supplier Scorecard Variable\", \"Compliance\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Variable",
            "question": "Which variables contain 'delivery' in their path?",
            "fields": [
                "variable_label",
                "path"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Variable\", filters={\"path\": [\"like\", \"%delivery%\"]}, fields=[\"variable_label\", \"path\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Variable",
            "question": "Give me the parameter name for 'Cost Efficiency' variable.",
            "fields": [
                "param_name"
            ]
        },
        "output": "frappe.db.get_value(\"Supplier Scorecard Variable\", {\"variable_label\": \"Cost Efficiency\"}, \"param_name\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard",
            "question": "List all suppliers with their current status and scores.",
            "fields": [
                "supplier",
                "status",
                "supplier_score"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard\", fields=[\"supplier\", \"status\", \"supplier_score\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard",
            "question": "How many suppliers have been evaluated this quarter?",
            "fields": []
        },
        "output": "frappe.db.count(\"Supplier Scorecard\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard",
            "question": "Get the scoring setup used for supplier 'FreshMart Pvt Ltd'.",
            "fields": [
                "scoring_setup"
            ]
        },
        "output": "frappe.db.get_value(\"Supplier Scorecard\", {\"supplier\": \"FreshMart Pvt Ltd\"}, \"scoring_setup\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard",
            "question": "Fetch the scorecard document for supplier 'Green Supplies Co'.",
            "fields": [
                "supplier",
                "supplier_score",
                "status",
                "period",
                "criteria"
            ]
        },
        "output": "frappe.get_doc(\"Supplier Scorecard\", \"Green Supplies Co\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard",
            "question": "Which suppliers are flagged to prevent both RFQs and POs?",
            "fields": [
                "supplier",
                "prevent_rfqs",
                "prevent_pos"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard\", filters={\"prevent_rfqs\": 1, \"prevent_pos\": 1}, fields=[\"supplier\", \"prevent_rfqs\", \"prevent_pos\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard",
            "question": "List suppliers with monthly evaluation period.",
            "fields": [
                "supplier",
                "period"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard\", filters={\"period\": \"Monthly\"}, fields=[\"supplier\", \"period\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard",
            "question": "Who are the employees notified when supplier scores drop?",
            "fields": [
                "supplier",
                "employee",
                "notify_employee"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard\", filters={\"notify_employee\": 1}, fields=[\"supplier\", \"employee\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard",
            "question": "Which suppliers have RFQs blocked based on scorecard?",
            "fields": [
                "supplier",
                "prevent_rfqs"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard\", filters={\"prevent_rfqs\": 1}, fields=[\"supplier\", \"prevent_rfqs\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard",
            "question": "Get full scorecard for 'Alpha Metals Ltd'.",
            "fields": [
                "supplier",
                "supplier_score",
                "criteria_setup",
                "standings"
            ]
        },
        "output": "frappe.get_doc(\"Supplier Scorecard\", \"Alpha Metals Ltd\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard",
            "question": "Find suppliers with custom weighting functions in use.",
            "fields": [
                "supplier",
                "weighting_function"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard\", filters={\"weighting_function\": [\"!=\", \"\"]}, fields=[\"supplier\", \"weighting_function\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard",
            "question": "Get a list of all active scorecards where vendors are notified.",
            "fields": [
                "supplier",
                "notify_supplier"
            ]
        },
        "output": "frappe.get_all(\"Supplier Scorecard\", filters={\"notify_supplier\": 1}, fields=[\"supplier\", \"notify_supplier\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard",
            "question": "Count the number of suppliers currently blocked from POs.",
            "fields": [
                "prevent_pos"
            ]
        },
        "output": "frappe.db.count(\"Supplier Scorecard\", {\"prevent_pos\": 1})"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard",
            "question": "What is the status of 'Delta Construction Supply'?",
            "fields": [
                "status"
            ]
        },
        "output": "frappe.db.get_value(\"Supplier Scorecard\", {\"supplier\": \"Delta Construction Supply\"}, \"status\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard",
            "question": "List all supplier scorecards evaluated annually.",
            "fields": [
                "supplier",
                "period"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard\", filters={\"period\": \"Yearly\"}, fields=[\"supplier\", \"period\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard",
            "question": "Retrieve scorecards showing standings for performance evaluations.",
            "fields": [
                "supplier",
                "standings"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard\", filters={\"standings\": [\"!=\", \"\"]}, fields=[\"supplier\", \"standings\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard",
            "question": "List suppliers and their scorecard status indicators.",
            "fields": [
                "supplier",
                "status",
                "indicator_color"
            ]
        },
        "output": "frappe.get_all(\"Supplier Scorecard\", fields=[\"supplier\", \"status\", \"indicator_color\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard",
            "question": "Which suppliers are warned before sending purchase orders?",
            "fields": [
                "supplier",
                "warn_pos"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard\", filters={\"warn_pos\": 1}, fields=[\"supplier\", \"warn_pos\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard",
            "question": "Retrieve the full scorecard for 'Industrial Tools Co'.",
            "fields": [
                "supplier",
                "supplier_score",
                "criteria",
                "scoring_setup"
            ]
        },
        "output": "frappe.get_doc(\"Supplier Scorecard\", \"Industrial Tools Co\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard",
            "question": "List suppliers with status set as 'Under Review'.",
            "fields": [
                "supplier",
                "status"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard\", filters={\"status\": \"Under Review\"}, fields=[\"supplier\", \"status\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard",
            "question": "Which suppliers are prevented from both RFQs and warned on POs?",
            "fields": [
                "supplier",
                "prevent_rfqs",
                "warn_pos"
            ]
        },
        "output": "frappe.get_all(\"Supplier Scorecard\", filters={\"prevent_rfqs\": 1, \"warn_pos\": 1}, fields=[\"supplier\", \"prevent_rfqs\", \"warn_pos\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Standing",
            "question": "List all supplier standings with their color codes.",
            "fields": [
                "standing_name",
                "standing_color"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Standing\", fields=[\"standing_name\", \"standing_color\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Standing",
            "question": "Which standings have 'green' as their standing color?",
            "fields": [
                "standing_name",
                "standing_color"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Standing\", filters={\"standing_color\": \"Green\"}, fields=[\"standing_name\", \"standing_color\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Standing",
            "question": "Count how many scorecard standings prevent both RFQs and POs.",
            "fields": []
        },
        "output": "frappe.db.count(\"Supplier Scorecard Standing\", {\"prevent_rfqs\": 1, \"prevent_pos\": 1})"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Standing",
            "question": "Get full details of the standing named 'At Risk'.",
            "fields": [
                "standing_name",
                "standing_color",
                "min_grade",
                "max_grade"
            ]
        },
        "output": "frappe.get_doc(\"Supplier Scorecard Standing\", \"At Risk\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Standing",
            "question": "Which standings have notification for employees enabled?",
            "fields": [
                "standing_name",
                "notify_employee"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Standing\", filters={\"notify_employee\": 1}, fields=[\"standing_name\", \"notify_employee\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Standing",
            "question": "List scorecard standings where min grade is above 80%.",
            "fields": [
                "standing_name",
                "min_grade"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Standing\", filters={\"min_grade\": [\">\", 80]}, fields=[\"standing_name\", \"min_grade\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Standing",
            "question": "Get min and max grade ranges for each standing.",
            "fields": [
                "standing_name",
                "min_grade",
                "max_grade"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Standing\", fields=[\"standing_name\", \"min_grade\", \"max_grade\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Standing",
            "question": "Who is the employee linked to 'Low Priority' standing?",
            "fields": [
                "employee_link"
            ]
        },
        "output": "frappe.db.get_value(\"Supplier Scorecard Standing\", {\"standing_name\": \"Low Priority\"}, \"employee_link\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Standing",
            "question": "Find standings where RFQs are only warned, not blocked.",
            "fields": [
                "standing_name",
                "warn_rfqs",
                "prevent_rfqs"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Standing\", filters={\"warn_rfqs\": 1, \"prevent_rfqs\": 0}, fields=[\"standing_name\", \"warn_rfqs\", \"prevent_rfqs\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Standing",
            "question": "Show all standings that have supplier notifications enabled.",
            "fields": [
                "standing_name",
                "notify_supplier"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Standing\", filters={\"notify_supplier\": 1}, fields=[\"standing_name\", \"notify_supplier\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Standing",
            "question": "Get the full record of standing called 'Critical Risk'.",
            "fields": [
                "standing_name",
                "min_grade",
                "max_grade",
                "prevent_pos"
            ]
        },
        "output": "frappe.get_doc(\"Supplier Scorecard Standing\", \"Critical Risk\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Standing",
            "question": "Which standings show red color and low grades?",
            "fields": [
                "standing_name",
                "standing_color",
                "min_grade"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Standing\", filters={\"standing_color\": \"Red\"}, fields=[\"standing_name\", \"standing_color\", \"min_grade\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Standing",
            "question": "Get all standings with both warn_pos and prevent_pos off.",
            "fields": [
                "standing_name",
                "warn_pos",
                "prevent_pos"
            ]
        },
        "output": "frappe.get_all(\"Supplier Scorecard Standing\", filters={\"warn_pos\": 0, \"prevent_pos\": 0}, fields=[\"standing_name\", \"warn_pos\", \"prevent_pos\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Standing",
            "question": "How many total standings are currently defined?",
            "fields": []
        },
        "output": "frappe.db.count(\"Supplier Scorecard Standing\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Standing",
            "question": "Get the employee notified for 'Yellow' standing level.",
            "fields": [
                "employee_link"
            ]
        },
        "output": "frappe.db.get_value(\"Supplier Scorecard Standing\", {\"standing_color\": \"Yellow\"}, \"employee_link\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Standing",
            "question": "List standings that prevent RFQs but not POs.",
            "fields": [
                "standing_name",
                "prevent_rfqs",
                "prevent_pos"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Standing\", filters={\"prevent_rfqs\": 1, \"prevent_pos\": 0}, fields=[\"standing_name\", \"prevent_rfqs\", \"prevent_pos\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Standing",
            "question": "Get standings that trigger employee alerts.",
            "fields": [
                "standing_name",
                "notify_employee",
                "employee_link"
            ]
        },
        "output": "frappe.get_all(\"Supplier Scorecard Standing\", filters={\"notify_employee\": 1}, fields=[\"standing_name\", \"employee_link\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Standing",
            "question": "Which standings show warning for POs but not prevention?",
            "fields": [
                "standing_name",
                "warn_pos",
                "prevent_pos"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Standing\", filters={\"warn_pos\": 1, \"prevent_pos\": 0}, fields=[\"standing_name\", \"warn_pos\", \"prevent_pos\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Standing",
            "question": "Get the full details of the standing 'Preferred Supplier'.",
            "fields": [
                "standing_name",
                "standing_color",
                "min_grade",
                "notify_supplier"
            ]
        },
        "output": "frappe.get_doc(\"Supplier Scorecard Standing\", \"Preferred Supplier\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Standing",
            "question": "List all scorecard standings with their min and max grades.",
            "fields": [
                "standing_name",
                "min_grade",
                "max_grade"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Standing\", fields=[\"standing_name\", \"min_grade\", \"max_grade\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Standing",
            "question": "Get the employee linked to 'Critical Risk' standing.",
            "fields": [
                "employee_link"
            ]
        },
        "output": "frappe.db.get_value(\"Supplier Scorecard Scoring Standing\", {\"standing_name\": \"Critical Risk\"}, \"employee_link\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Standing",
            "question": "Count how many standings have red color and prevent POs.",
            "fields": []
        },
        "output": "frappe.db.count(\"Supplier Scorecard Scoring Standing\", {\"standing_color\": \"Red\", \"prevent_pos\": 1})"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Standing",
            "question": "Show me standings where RFQs are warned but not blocked.",
            "fields": [
                "standing_name",
                "warn_rfqs",
                "prevent_rfqs"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Standing\", filters={\"warn_rfqs\": 1, \"prevent_rfqs\": 0}, fields=[\"standing_name\", \"warn_rfqs\", \"prevent_rfqs\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Standing",
            "question": "Fetch all standings with green color and max grade \u2264 90%.",
            "fields": [
                "standing_name",
                "standing_color",
                "max_grade"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Standing\", filters={\"standing_color\": \"Green\", \"max_grade\": [\"<=\", 90]}, fields=[\"standing_name\", \"standing_color\", \"max_grade\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Standing",
            "question": "Retrieve full record for 'At Risk' standing.",
            "fields": [
                "standing_name",
                "min_grade",
                "max_grade",
                "standing_color",
                "prevent_pos"
            ]
        },
        "output": "frappe.get_doc(\"Supplier Scorecard Scoring Standing\", \"At Risk\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Standing",
            "question": "Which standings have notifications enabled for employees?",
            "fields": [
                "standing_name",
                "notify_employee"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Standing\", filters={\"notify_employee\": 1}, fields=[\"standing_name\", \"notify_employee\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Standing",
            "question": "List all standings that trigger supplier notifications.",
            "fields": [
                "standing_name",
                "notify_supplier"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Standing\", filters={\"notify_supplier\": 1}, fields=[\"standing_name\", \"notify_supplier\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Standing",
            "question": "Which standings have a minimum grade above 85%?",
            "fields": [
                "standing_name",
                "min_grade"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Standing\", filters={\"min_grade\": [\">\", 85]}, fields=[\"standing_name\", \"min_grade\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Standing",
            "question": "List standings with yellow, orange, or red colors.",
            "fields": [
                "standing_name",
                "standing_color"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Standing\", filters={\"standing_color\": [\"in\", [\"Yellow\", \"Orange\", \"Red\"]]}, fields=[\"standing_name\", \"standing_color\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Standing",
            "question": "Get scorecard standings that prevent RFQs.",
            "fields": [
                "standing_name",
                "prevent_rfqs"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Standing\", filters={\"prevent_rfqs\": 1}, fields=[\"standing_name\", \"prevent_rfqs\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Standing",
            "question": "Fetch all standings with no warnings or blocks on RFQs/POs.",
            "fields": [
                "standing_name",
                "warn_rfqs",
                "warn_pos",
                "prevent_rfqs",
                "prevent_pos"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Standing\", filters={\"warn_rfqs\": 0, \"warn_pos\": 0, \"prevent_rfqs\": 0, \"prevent_pos\": 0}, fields=[\"standing_name\", \"warn_rfqs\", \"warn_pos\", \"prevent_rfqs\", \"prevent_pos\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Standing",
            "question": "How many total supplier scorecard standings are configured?",
            "fields": []
        },
        "output": "frappe.db.count(\"Supplier Scorecard Scoring Standing\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Standing",
            "question": "Show me standings where blue color is assigned and there are no restrictions.",
            "fields": [
                "standing_name",
                "standing_color",
                "warn_rfqs",
                "prevent_rfqs",
                "warn_pos",
                "prevent_pos"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Standing\", filters={\"standing_color\": \"Blue\", \"warn_rfqs\": 0, \"prevent_rfqs\": 0, \"warn_pos\": 0, \"prevent_pos\": 0}, fields=[\"standing_name\", \"standing_color\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Standing",
            "question": "Retrieve standings that block purchase orders and have red color.",
            "fields": [
                "standing_name",
                "prevent_pos",
                "standing_color"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Standing\", filters={\"prevent_pos\": 1, \"standing_color\": \"Red\"}, fields=[\"standing_name\", \"prevent_pos\", \"standing_color\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Standing",
            "question": "Get complete record for the standing 'Preferred Partner'.",
            "fields": [
                "standing_name",
                "min_grade",
                "max_grade",
                "notify_employee",
                "notify_supplier"
            ]
        },
        "output": "frappe.get_doc(\"Supplier Scorecard Scoring Standing\", \"Preferred Partner\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Standing",
            "question": "List scorecard standings with employee notification set.",
            "fields": [
                "standing_name",
                "employee_link"
            ]
        },
        "output": "frappe.get_all(\"Supplier Scorecard Scoring Standing\", filters={\"notify_employee\": 1}, fields=[\"standing_name\", \"employee_link\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Standing",
            "question": "Which standings use a red indicator and warn on POs?",
            "fields": [
                "standing_name",
                "standing_color",
                "warn_pos"
            ]
        },
        "output": "frappe.get_all(\"Supplier Scorecard Scoring Standing\", filters={\"standing_color\": \"Red\", \"warn_pos\": 1}, fields=[\"standing_name\", \"standing_color\", \"warn_pos\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Standing",
            "question": "Give me all standings that prevent both RFQs and POs.",
            "fields": [
                "standing_name",
                "prevent_rfqs",
                "prevent_pos"
            ]
        },
        "output": "frappe.get_all(\"Supplier Scorecard Scoring Standing\", filters={\"prevent_rfqs\": 1, \"prevent_pos\": 1}, fields=[\"standing_name\", \"prevent_rfqs\", \"prevent_pos\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "List all variable labels and parameter names used for supplier evaluation.",
            "fields": [
                "variable_label",
                "param_name"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Variable\", fields=[\"variable_label\", \"param_name\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Show all scoring variables with missing values.",
            "fields": [
                "variable_label",
                "value"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Variable\", filters={\"value\": [\"is\", \"null\"]}, fields=[\"variable_label\", \"value\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Count the number of scoring variables currently in the system.",
            "fields": []
        },
        "output": "frappe.db.count(\"Supplier Scorecard Scoring Variable\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "What is the value for the variable labeled 'On-Time Delivery Rate'?",
            "fields": [
                "value"
            ]
        },
        "output": "frappe.db.get_value(\"Supplier Scorecard Scoring Variable\", {\"variable_label\": \"On-Time Delivery Rate\"}, \"value\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Get all variables with the word 'variance' in their path.",
            "fields": [
                "variable_label",
                "path"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Variable\", filters={\"path\": [\"like\", \"%variance%\"]}, fields=[\"variable_label\", \"path\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Retrieve the full document for 'Lead Time Delay Variable'.",
            "fields": [
                "variable_label",
                "description",
                "value",
                "param_name",
                "path"
            ]
        },
        "output": "frappe.get_doc(\"Supplier Scorecard Scoring Variable\", \"Lead Time Delay Variable\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Fetch all scoring variables associated with the supplier 'Sunrise Ltd'.",
            "fields": [
                "variable_label",
                "param_name",
                "value"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Variable\", filters={\"supplier\": \"Sunrise Ltd\"}, fields=[\"variable_label\", \"param_name\", \"value\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "List the parameter names and paths of all scoring variables.",
            "fields": [
                "param_name",
                "path"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Variable\", fields=[\"param_name\", \"path\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Retrieve all custom scoring variables with their descriptions.",
            "fields": [
                "variable_label",
                "description"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Variable\", filters={\"description\": [\"!=\", \"\"]}, fields=[\"variable_label\", \"description\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Get scoring variables where value is greater than 80.",
            "fields": [
                "variable_label",
                "value"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Variable\", filters={\"value\": [\">\", 80]}, fields=[\"variable_label\", \"value\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "How many variables have a path defined but no value?",
            "fields": []
        },
        "output": "frappe.db.count(\"Supplier Scorecard Scoring Variable\", {\"path\": [\"!=\", \"\"], \"value\": [\"is\", \"null\"]})"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Fetch the full variable document labeled 'Quality Defect Rate'.",
            "fields": [
                "variable_label",
                "description",
                "value",
                "param_name",
                "path"
            ]
        },
        "output": "frappe.get_doc(\"Supplier Scorecard Scoring Variable\", \"Quality Defect Rate\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Which variables contain the word 'delivery' in their parameter name?",
            "fields": [
                "variable_label",
                "param_name"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Variable\", filters={\"param_name\": [\"like\", \"%delivery%\"]}, fields=[\"variable_label\", \"param_name\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "List variables with blank descriptions.",
            "fields": [
                "variable_label",
                "description"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Variable\", filters={\"description\": \"\"}, fields=[\"variable_label\", \"description\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Show all supplier scoring variables and their values.",
            "fields": [
                "variable_label",
                "value"
            ]
        },
        "output": "frappe.get_all(\"Supplier Scorecard Scoring Variable\", fields=[\"variable_label\", \"value\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "What path is set for the variable 'Defect Ratio'?",
            "fields": [
                "path"
            ]
        },
        "output": "frappe.db.get_value(\"Supplier Scorecard Scoring Variable\", {\"variable_label\": \"Defect Ratio\"}, \"path\")"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Get all variables used to track supplier lead time.",
            "fields": [
                "variable_label",
                "path"
            ]
        },
        "output": "frappe.get_all(\"Supplier Scorecard Scoring Variable\", filters={\"path\": [\"like\", \"%lead_time%\"]}, fields=[\"variable_label\", \"path\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Retrieve variables having defined paths but empty values.",
            "fields": [
                "variable_label",
                "path",
                "value"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Variable\", filters={\"path\": [\"!=\", \"\"], \"value\": [\"is\", \"null\"]}, fields=[\"variable_label\", \"path\", \"value\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Which scoring variables include 'compliance' in their label?",
            "fields": [
                "variable_label"
            ]
        },
        "output": "frappe.get_list(\"Supplier Scorecard Scoring Variable\", filters={\"variable_label\": [\"like\", \"%compliance%\"]}, fields=[\"variable_label\"])"
    },
    {
        "input": {
            "doctype": "Supplier Scorecard Scoring Variable",
            "question": "Show the complete document for the variable 'Late Invoice Ratio'.",
            "fields": [
                "variable_label",
                "description",
                "value",
                "param_name",
                "path"
            ]
        },
        "output": "frappe.get_doc(\"Supplier Scorecard Scoring Variable\", \"Late Invoice Ratio\")"
    },
    {
        "input": {
            "doctype": "Homepage Section Card",
            "question": "List all homepage section cards with their titles and subtitles.",
            "fields": [
                "title",
                "subtitle"
            ]
        },
        "output": "frappe.get_list(\"Homepage Section Card\", fields=[\"title\", \"subtitle\"])"
    },
    {
        "input": {
            "doctype": "Homepage Section Card",
            "question": "Count how many homepage section cards are configured.",
            "fields": []
        },
        "output": "frappe.db.count(\"Homepage Section Card\")"
    },
    {
        "input": {
            "doctype": "Homepage Section Card",
            "question": "Which card has the title 'Sales Overview'?",
            "fields": [
                "subtitle"
            ]
        },
        "output": "frappe.db.get_value(\"Homepage Section Card\", {\"title\": \"Sales Overview\"}, \"subtitle\")"
    },
    {
        "input": {
            "doctype": "Homepage Section Card",
            "question": "Fetch all cards that have route links defined.",
            "fields": [
                "title",
                "route"
            ]
        },
        "output": "frappe.get_list(\"Homepage Section Card\", filters={\"route\": [\"!=\", \"\"]}, fields=[\"title\", \"route\"])"
    },
    {
        "input": {
            "doctype": "Homepage Section Card",
            "question": "Get homepage section cards with both title and content fields filled.",
            "fields": [
                "title",
                "content"
            ]
        },
        "output": "frappe.get_list(\"Homepage Section Card\", filters={\"content\": [\"!=\", \"\"]}, fields=[\"title\", \"content\"])"
    },
    {
        "input": {
            "doctype": "Homepage Section Card",
            "question": "Retrieve all homepage cards that include an image.",
            "fields": [
                "title",
                "image"
            ]
        },
        "output": "frappe.get_list(\"Homepage Section Card\", filters={\"image\": [\"!=\", \"\"]}, fields=[\"title\", \"image\"])"
    },
    {
        "input": {
            "doctype": "Homepage Section Card",
            "question": "Fetch details for the homepage card titled 'Featured Products'.",
            "fields": [
                "title",
                "subtitle",
                "route",
                "image",
                "content"
            ]
        },
        "output": "frappe.get_doc(\"Homepage Section Card\", \"Featured Products\")"
    },
    {
        "input": {
            "doctype": "Homepage Section Card",
            "question": "How many cards have no route defined?",
            "fields": []
        },
        "output": "frappe.db.count(\"Homepage Section Card\", {\"route\": \"\"})"
    },
    {
        "input": {
            "doctype": "Homepage Section Card",
            "question": "Get all homepage cards that contain the word 'Dashboard' in title.",
            "fields": [
                "title",
                "route"
            ]
        },
        "output": "frappe.get_list(\"Homepage Section Card\", filters={\"title\": [\"like\", \"%Dashboard%\"]}, fields=[\"title\", \"route\"])"
    },
    {
        "input": {
            "doctype": "Homepage Section Card",
            "question": "Show me all cards with subtitles containing the word 'Report'.",
            "fields": [
                "title",
                "subtitle"
            ]
        },
        "output": "frappe.get_list(\"Homepage Section Card\", filters={\"subtitle\": [\"like\", \"%Report%\"]}, fields=[\"title\", \"subtitle\"])"
    },
    {
        "input": {
            "doctype": "Homepage Section Card",
            "question": "Get the card where the route is '/sales-dashboard'.",
            "fields": [
                "title"
            ]
        },
        "output": "frappe.db.get_value(\"Homepage Section Card\", {\"route\": \"/sales-dashboard\"}, \"title\")"
    },
    {
        "input": {
            "doctype": "Homepage Section Card",
            "question": "Fetch cards that have both a subtitle and image set.",
            "fields": [
                "title",
                "subtitle",
                "image"
            ]
        },
        "output": "frappe.get_list(\"Homepage Section Card\", filters={\"subtitle\": [\"!=\", \"\"], \"image\": [\"!=\", \"\"]}, fields=[\"title\", \"subtitle\", \"image\"])"
    },
    {
        "input": {
            "doctype": "Homepage Section Card",
            "question": "Retrieve the full document for 'Analytics Overview' homepage card.",
            "fields": [
                "title",
                "subtitle",
                "image",
                "route",
                "content"
            ]
        },
        "output": "frappe.get_doc(\"Homepage Section Card\", \"Analytics Overview\")"
    },
    {
        "input": {
            "doctype": "Homepage Section Card",
            "question": "Get homepage cards sorted by title alphabetically.",
            "fields": [
                "title"
            ]
        },
        "output": "frappe.get_all(\"Homepage Section Card\", fields=[\"title\"], order_by=\"title asc\")"
    },
    {
        "input": {
            "doctype": "Homepage Section Card",
            "question": "List all card titles with route links starting with '/app/'.",
            "fields": [
                "title",
                "route"
            ]
        },
        "output": "frappe.get_list(\"Homepage Section Card\", filters={\"route\": [\"like\", \"/app/%\"]}, fields=[\"title\", \"route\"])"
    },
    {
        "input": {
            "doctype": "Homepage Section Card",
            "question": "Fetch all cards with content containing the word 'summary'.",
            "fields": [
                "title",
                "content"
            ]
        },
        "output": "frappe.get_list(\"Homepage Section Card\", filters={\"content\": [\"like\", \"%summary%\"]}, fields=[\"title\", \"content\"])"
    },
    {
        "input": {
            "doctype": "Homepage Section Card",
            "question": "Which cards include an image but have no subtitle?",
            "fields": [
                "title",
                "image",
                "subtitle"
            ]
        },
        "output": "frappe.get_list(\"Homepage Section Card\", filters={\"image\": [\"!=\", \"\"], \"subtitle\": \"\"}, fields=[\"title\", \"image\"])"
    },
    {
        "input": {
            "doctype": "Homepage Section Card",
            "question": "Show all cards that have both title and subtitle fields filled.",
            "fields": [
                "title",
                "subtitle"
            ]
        },
        "output": "frappe.get_all(\"Homepage Section Card\", filters={\"title\": [\"!=\", \"\"], \"subtitle\": [\"!=\", \"\"]}, fields=[\"title\", \"subtitle\"])"
    },
    {
        "input": {
            "doctype": "Homepage Section Card",
            "question": "Get the homepage card record for 'Operations Summary'.",
            "fields": [
                "title",
                "subtitle",
                "image",
                "route",
                "content"
            ]
        },
        "output": "frappe.get_doc(\"Homepage Section Card\", \"Operations Summary\")"
    },
    {
        "input": {
            "doctype": "Homepage Section Card",
            "question": "Fetch all homepage cards with route fields defined and content not empty.",
            "fields": [
                "title",
                "route",
                "content"
            ]
        },
        "output": "frappe.get_all(\"Homepage Section Card\", filters={\"route\": [\"!=\", \"\"], \"content\": [\"!=\", \"\"]}, fields=[\"title\", \"route\", \"content\"])"
    },
    {
        "input": {
            "doctype": "BOM Scrap Item",
            "question": "List all scrap item codes along with their stock quantity.",
            "fields": [
                "item_code",
                "stock_qty"
            ]
        },
        "output": "frappe.get_list(\"BOM Scrap Item\", fields=[\"item_code\", \"stock_qty\"])"
    },
    {
        "input": {
            "doctype": "BOM Scrap Item",
            "question": "What is the rate of 'Aluminum Scrap' in the BOM?",
            "fields": [
                "rate"
            ]
        },
        "output": "frappe.db.get_value(\"BOM Scrap Item\", {\"item_name\": \"Aluminum Scrap\"}, \"rate\")"
    },
    {
        "input": {
            "doctype": "BOM Scrap Item",
            "question": "Count how many scrap items are listed in total.",
            "fields": []
        },
        "output": "frappe.db.count(\"BOM Scrap Item\")"
    },
    {
        "input": {
            "doctype": "BOM Scrap Item",
            "question": "Fetch the full record for scrap item 'Iron Chips'.",
            "fields": [
                "item_code",
                "item_name",
                "stock_qty",
                "rate",
                "amount",
                "stock_uom"
            ]
        },
        "output": "frappe.get_doc(\"BOM Scrap Item\", \"Iron Chips\")"
    },
    {
        "input": {
            "doctype": "BOM Scrap Item",
            "question": "List all BOM scrap items where base rate is greater than 5.",
            "fields": [
                "item_code",
                "base_rate"
            ]
        },
        "output": "frappe.get_list(\"BOM Scrap Item\", filters={\"base_rate\": [\">\", 5]}, fields=[\"item_code\", \"base_rate\"])"
    },
    {
        "input": {
            "doctype": "BOM Scrap Item",
            "question": "Get scrap items with base amount above 100.",
            "fields": [
                "item_code",
                "base_amount"
            ]
        },
        "output": "frappe.get_list(\"BOM Scrap Item\", filters={\"base_amount\": [\">\", 100]}, fields=[\"item_code\", \"base_amount\"])"
    },
    {
        "input": {
            "doctype": "BOM Scrap Item",
            "question": "Fetch scrap item names that contain the word 'scrap'.",
            "fields": [
                "item_name"
            ]
        },
        "output": "frappe.get_list(\"BOM Scrap Item\", filters={\"item_name\": [\"like\", \"%scrap%\"]}, fields=[\"item_name\"])"
    },
    {
        "input": {
            "doctype": "BOM Scrap Item",
            "question": "How many scrap items have a quantity over 10 units?",
            "fields": []
        },
        "output": "frappe.db.count(\"BOM Scrap Item\", {\"stock_qty\": [\">\", 10]})"
    },
    {
        "input": {
            "doctype": "BOM Scrap Item",
            "question": "Get the base rate for scrap item code 'SCRP-0003'.",
            "fields": [
                "base_rate"
            ]
        },
        "output": "frappe.db.get_value(\"BOM Scrap Item\", {\"item_code\": \"SCRP-0003\"}, \"base_rate\")"
    },
    {
        "input": {
            "doctype": "BOM Scrap Item",
            "question": "Fetch full document for item code 'SCRP-0021'.",
            "fields": [
                "item_code",
                "item_name",
                "stock_qty",
                "rate",
                "amount",
                "base_rate",
                "base_amount",
                "stock_uom"
            ]
        },
        "output": "frappe.get_doc(\"BOM Scrap Item\", \"SCRP-0021\")"
    },
    {
        "input": {
            "doctype": "BOM Scrap Item",
            "question": "List all scrap items with amount less than 50.",
            "fields": [
                "item_code",
                "amount"
            ]
        },
        "output": "frappe.get_list(\"BOM Scrap Item\", filters={\"amount\": [\"<\", 50]}, fields=[\"item_code\", \"amount\"])"
    },
    {
        "input": {
            "doctype": "BOM Scrap Item",
            "question": "Get all scrap items in 'kg' unit of measure.",
            "fields": [
                "item_code",
                "stock_uom"
            ]
        },
        "output": "frappe.get_list(\"BOM Scrap Item\", filters={\"stock_uom\": \"kg\"}, fields=[\"item_code\", \"stock_uom\"])"
    },
    {
        "input": {
            "doctype": "BOM Scrap Item",
            "question": "Show me the scrap quantities for item code 'SCRP-0090'.",
            "fields": [
                "stock_qty"
            ]
        },
        "output": "frappe.get_list(\"BOM Scrap Item\", filters={\"item_code\": \"SCRP-0090\"}, fields=[\"stock_qty\"])"
    },
    {
        "input": {
            "doctype": "BOM Scrap Item",
            "question": "Retrieve base amount and rate for all scrap items.",
            "fields": [
                "item_code",
                "base_rate",
                "base_amount"
            ]
        },
        "output": "frappe.get_list(\"BOM Scrap Item\", fields=[\"item_code\", \"base_rate\", \"base_amount\"])"
    },
    {
        "input": {
            "doctype": "BOM Scrap Item",
            "question": "Fetch all items categorized under 'non-reusable materials'.",
            "fields": [
                "item_code",
                "item_name"
            ]
        },
        "output": "frappe.get_all(\"BOM Scrap Item\", filters={\"item_name\": [\"like\", \"%non-reusable%\"]}, fields=[\"item_code\", \"item_name\"])"
    },
    {
        "input": {
            "doctype": "BOM Scrap Item",
            "question": "Give me the list of scrap items for BOM-0043.",
            "fields": [
                "item_code",
                "stock_qty",
                "rate"
            ]
        },
        "output": "frappe.get_all(\"BOM Scrap Item\", filters={\"parent\": \"BOM-0043\"}, fields=[\"item_code\", \"stock_qty\", \"rate\"])"
    },
    {
        "input": {
            "doctype": "BOM Scrap Item",
            "question": "Fetch items from BOMs configured to send scrap to Warehouse-S1.",
            "fields": [
                "item_code",
                "item_name"
            ]
        },
        "output": "frappe.get_list(\"BOM Scrap Item\", filters={\"item_name\": [\"like\", \"%Warehouse-S1%\"]}, fields=[\"item_code\", \"item_name\"])"
    },
    {
        "input": {
            "doctype": "BOM Scrap Item",
            "question": "What scrap items were generated during the last BOM update?",
            "fields": [
                "item_code",
                "item_name",
                "stock_qty"
            ]
        },
        "output": "frappe.get_all(\"BOM Scrap Item\", fields=[\"item_code\", \"item_name\", \"stock_qty\"])"
    },
    {
        "input": {
            "doctype": "BOM Scrap Item",
            "question": "Retrieve the full document for scrap item code 'SCRP-0010'.",
            "fields": [
                "item_code",
                "item_name",
                "stock_qty",
                "rate",
                "amount",
                "base_rate",
                "base_amount",
                "stock_uom"
            ]
        },
        "output": "frappe.get_doc(\"BOM Scrap Item\", \"SCRP-0010\")"
    },
    {
        "input": {
            "doctype": "BOM Scrap Item",
            "question": "Get the rate and quantity of 'Steel Scrap' in the BOM.",
            "fields": [
                "rate",
                "stock_qty"
            ]
        },
        "output": "frappe.get_list(\"BOM Scrap Item\", filters={\"item_name\": \"Steel Scrap\"}, fields=[\"rate\", \"stock_qty\"])"
    },
    {
        "input": {
            "doctype": "Tax Withheld Vouchers",
            "question": "List all vouchers that had tax withheld last month.",
            "fields": [
                "voucher_type",
                "voucher_name",
                "taxable_amount"
            ]
        },
        "output": "frappe.get_list(\"Tax Withheld Vouchers\", filters={\"posting_date\": [\"between\", [\"2024-04-01\", \"2024-04-30\"]]}, fields=[\"voucher_type\", \"voucher_name\", \"taxable_amount\"])"
    },
    {
        "input": {
            "doctype": "Tax Withheld Vouchers",
            "question": "Count the number of withheld tax vouchers in this quarter.",
            "fields": []
        },
        "output": "frappe.db.count(\"Tax Withheld Vouchers\", {\"posting_date\": [\"between\", [\"2024-04-01\", \"2024-06-30\"]]})"
    },
    {
        "input": {
            "doctype": "Tax Withheld Vouchers",
            "question": "Fetch all vouchers with taxable amount greater than 5000.",
            "fields": [
                "voucher_name",
                "taxable_amount"
            ]
        },
        "output": "frappe.get_list(\"Tax Withheld Vouchers\", filters={\"taxable_amount\": [\">\", 5000]}, fields=[\"voucher_name\", \"taxable_amount\"])"
    },
    {
        "input": {
            "doctype": "Tax Withheld Vouchers",
            "question": "Get the taxable amount for voucher INV-0456.",
            "fields": [
                "taxable_amount"
            ]
        },
        "output": "frappe.db.get_value(\"Tax Withheld Vouchers\", {\"voucher_name\": \"INV-0456\"}, \"taxable_amount\")"
    },
    {
        "input": {
            "doctype": "Tax Withheld Vouchers",
            "question": "Get all withheld tax vouchers for client payments.",
            "fields": [
                "voucher_name",
                "taxable_amount"
            ]
        },
        "output": "frappe.get_list(\"Tax Withheld Vouchers\", filters={\"voucher_type\": \"Client Payment\"}, fields=[\"voucher_name\", \"taxable_amount\"])"
    },
    {
        "input": {
            "doctype": "Tax Withheld Vouchers",
            "question": "Fetch all vouchers for which tax was withheld from Sales Invoices.",
            "fields": [
                "voucher_name",
                "voucher_type"
            ]
        },
        "output": "frappe.get_list(\"Tax Withheld Vouchers\", filters={\"voucher_type\": \"Sales Invoice\"}, fields=[\"voucher_name\", \"voucher_type\"])"
    },
    {
        "input": {
            "doctype": "Tax Withheld Vouchers",
            "question": "Was any tax withheld on Purchase Invoice PI-1005?",
            "fields": [
                "voucher_name",
                "taxable_amount"
            ]
        },
        "output": "frappe.get_list(\"Tax Withheld Vouchers\", filters={\"voucher_name\": \"PI-1005\"}, fields=[\"voucher_name\", \"taxable_amount\"])"
    },
    {
        "input": {
            "doctype": "Tax Withheld Vouchers",
            "question": "Get all vouchers for supplier payments this week.",
            "fields": [
                "voucher_name",
                "voucher_type",
                "taxable_amount"
            ]
        },
        "output": "frappe.get_list(\"Tax Withheld Vouchers\", filters={\"voucher_type\": \"Supplier Payment\", \"posting_date\": [\"between\", [\"2025-05-01\", \"2025-05-07\"]]}, fields=[\"voucher_name\", \"voucher_type\", \"taxable_amount\"])"
    },
    {
        "input": {
            "doctype": "Tax Withheld Vouchers",
            "question": "Retrieve taxable amount for voucher PV-2023-88.",
            "fields": [
                "taxable_amount"
            ]
        },
        "output": "frappe.db.get_value(\"Tax Withheld Vouchers\", {\"voucher_name\": \"PV-2023-88\"}, \"taxable_amount\")"
    },
    {
        "input": {
            "doctype": "Tax Withheld Vouchers",
            "question": "Fetch vouchers where tax was withheld for April 2024.",
            "fields": [
                "voucher_name",
                "voucher_type"
            ]
        },
        "output": "frappe.get_all(\"Tax Withheld Vouchers\", filters={\"posting_date\": [\"between\", [\"2024-04-01\", \"2024-04-30\"]]}, fields=[\"voucher_name\", \"voucher_type\"])"
    },
    {
        "input": {
            "doctype": "Tax Withheld Vouchers",
            "question": "Get full document for withheld tax voucher INV-0456.",
            "fields": [
                "voucher_name",
                "voucher_type",
                "taxable_amount"
            ]
        },
        "output": "frappe.get_doc(\"Tax Withheld Vouchers\", \"INV-0456\")"
    },
    {
        "input": {
            "doctype": "Tax Withheld Vouchers",
            "question": "Show vouchers that had taxable amount declared for withholding.",
            "fields": [
                "voucher_name",
                "taxable_amount"
            ]
        },
        "output": "frappe.get_list(\"Tax Withheld Vouchers\", filters={\"taxable_amount\": [\">\", 0]}, fields=[\"voucher_name\", \"taxable_amount\"])"
    },
    {
        "input": {
            "doctype": "Tax Withheld Vouchers",
            "question": "How much tax was withheld for the March invoice?",
            "fields": [
                "taxable_amount"
            ]
        },
        "output": "frappe.get_list(\"Tax Withheld Vouchers\", filters={\"posting_date\": [\"between\", [\"2024-03-01\", \"2024-03-31\"]]}, fields=[\"voucher_name\", \"taxable_amount\"])"
    },
    {
        "input": {
            "doctype": "Tax Withheld Vouchers",
            "question": "List vouchers with taxable amount between 1,000 and 5,000.",
            "fields": [
                "voucher_name",
                "taxable_amount"
            ]
        },
        "output": "frappe.get_list(\"Tax Withheld Vouchers\", filters={\"taxable_amount\": [\"between\", [1000, 5000]]}, fields=[\"voucher_name\", \"taxable_amount\"])"
    },
    {
        "input": {
            "doctype": "Tax Withheld Vouchers",
            "question": "Get all vouchers where withholding occurred on supplier payouts.",
            "fields": [
                "voucher_name",
                "voucher_type"
            ]
        },
        "output": "frappe.get_list(\"Tax Withheld Vouchers\", filters={\"voucher_type\": \"Supplier Payment\"}, fields=[\"voucher_name\", \"voucher_type\"])"
    },
    {
        "input": {
            "doctype": "Tax Withheld Vouchers",
            "question": "Get list of vouchers for withholding on client payments.",
            "fields": [
                "voucher_name",
                "voucher_type"
            ]
        },
        "output": "frappe.get_list(\"Tax Withheld Vouchers\", filters={\"voucher_type\": \"Client Payment\"}, fields=[\"voucher_name\", \"voucher_type\"])"
    },
    {
        "input": {
            "doctype": "Tax Withheld Vouchers",
            "question": "Retrieve document for tax withheld voucher PV-2023-88.",
            "fields": [
                "voucher_name",
                "voucher_type",
                "taxable_amount"
            ]
        },
        "output": "frappe.get_doc(\"Tax Withheld Vouchers\", \"PV-2023-88\")"
    },
    {
        "input": {
            "doctype": "Tax Withheld Vouchers",
            "question": "Fetch full record for voucher PI-1005.",
            "fields": [
                "voucher_name",
                "voucher_type",
                "taxable_amount"
            ]
        },
        "output": "frappe.get_doc(\"Tax Withheld Vouchers\", \"PI-1005\")"
    },
    {
        "input": {
            "doctype": "Tax Withheld Vouchers",
            "question": "Get all vouchers with withheld tax above 10,000.",
            "fields": [
                "voucher_name",
                "taxable_amount"
            ]
        },
        "output": "frappe.get_all(\"Tax Withheld Vouchers\", filters={\"taxable_amount\": [\">\", 10000]}, fields=[\"voucher_name\", \"taxable_amount\"])"
    },
    {
        "input": {
            "doctype": "Tax Withheld Vouchers",
            "question": "List all vouchers with withholding between Jan and Mar 2024.",
            "fields": [
                "voucher_name",
                "posting_date"
            ]
        },
        "output": "frappe.get_all(\"Tax Withheld Vouchers\", filters={\"posting_date\": [\"between\", [\"2024-01-01\", \"2024-03-31\"]]}, fields=[\"voucher_name\", \"posting_date\"])"
    },
    {
        "input": {
            "doctype": "Token Cache",
            "question": "Which user has an access token stored in the system?",
            "fields": [
                "user",
                "access_token"
            ]
        },
        "output": "frappe.get_list(\"Token Cache\", filters={\"access_token\": [\"not\", \"=\"]}, fields=[\"user\", \"access_token\"])"
    },
    {
        "input": {
            "doctype": "Token Cache",
            "question": "List all entries with a refresh token available.",
            "fields": [
                "user",
                "refresh_token"
            ]
        },
        "output": "frappe.get_list(\"Token Cache\", filters={\"refresh_token\": [\"not\", \"=\"]}, fields=[\"user\", \"refresh_token\"])"
    },
    {
        "input": {
            "doctype": "Token Cache",
            "question": "Find all token entries where provider name is Google.",
            "fields": [
                "user",
                "provider_name"
            ]
        },
        "output": "frappe.get_list(\"Token Cache\", filters={\"provider_name\": \"Google\"}, fields=[\"user\", \"provider_name\"])"
    },
    {
        "input": {
            "doctype": "Token Cache",
            "question": "Check token states saved for different users in the cache.",
            "fields": [
                "user",
                "state"
            ]
        },
        "output": "frappe.get_list(\"Token Cache\", fields=[\"user\", \"state\"])"
    },
    {
        "input": {
            "doctype": "Token Cache",
            "question": "I want to check the expiry duration of all access tokens.",
            "fields": [
                "user",
                "expires_in"
            ]
        },
        "output": "frappe.get_list(\"Token Cache\", fields=[\"user\", \"expires_in\"])"
    },
    {
        "input": {
            "doctype": "Token Cache",
            "question": "Give me a list of token cache entries where token type is 'Bearer'.",
            "fields": [
                "user",
                "token_type"
            ]
        },
        "output": "frappe.get_list(\"Token Cache\", filters={\"token_type\": \"Bearer\"}, fields=[\"user\", \"token_type\"])"
    },
    {
        "input": {
            "doctype": "Token Cache",
            "question": "Who has an active token with provider name 'Facebook'?",
            "fields": [
                "user",
                "provider_name"
            ]
        },
        "output": "frappe.get_list(\"Token Cache\", filters={\"provider_name\": \"Facebook\"}, fields=[\"user\", \"provider_name\"])"
    },
    {
        "input": {
            "doctype": "Token Cache",
            "question": "Can I get the list of token types saved in the system?",
            "fields": [
                "token_type"
            ]
        },
        "output": "frappe.get_list(\"Token Cache\", fields=[\"token_type\"])"
    },
    {
        "input": {
            "doctype": "Token Cache",
            "question": "How many token cache records are stored currently?",
            "fields": []
        },
        "output": "frappe.db.count(\"Token Cache\")"
    },
    {
        "input": {
            "doctype": "Token Cache",
            "question": "Show me the connected apps and tokens linked to John Doe.",
            "fields": [
                "connected_app",
                "access_token"
            ]
        },
        "output": "frappe.get_list(\"Token Cache\", filters={\"user\": \"John Doe\"}, fields=[\"connected_app\", \"access_token\"])"
    },
    {
        "input": {
            "doctype": "Token Cache",
            "question": "Which users have tokens configured with a success URI?",
            "fields": [
                "user",
                "success_uri"
            ]
        },
        "output": "frappe.get_all(\"Token Cache\", filters={\"success_uri\": [\"not\", \"=\"]}, fields=[\"user\", \"success_uri\"])"
    },
    {
        "input": {
            "doctype": "Token Cache",
            "question": "Retrieve all token cache records associated with Connected App A.",
            "fields": [
                "user",
                "connected_app"
            ]
        },
        "output": "frappe.get_all(\"Token Cache\", filters={\"connected_app\": \"Connected App A\"}, fields=[\"user\", \"connected_app\"])"
    },
    {
        "input": {
            "doctype": "Token Cache",
            "question": "Show me token records that include scopes like email or profile.",
            "fields": [
                "user",
                "scopes"
            ]
        },
        "output": "frappe.get_all(\"Token Cache\", filters={\"scopes\": [\"like\", \"%email%\"]}, fields=[\"user\", \"scopes\"])"
    },
    {
        "input": {
            "doctype": "Token Cache",
            "question": "How many token entries are stored for provider Google?",
            "fields": []
        },
        "output": "frappe.db.count(\"Token Cache\", {\"provider_name\": \"Google\"})"
    },
    {
        "input": {
            "doctype": "Token Cache",
            "question": "Get the expiry duration for John Doe\u2019s token.",
            "fields": [
                "expires_in"
            ]
        },
        "output": "frappe.db.get_value(\"Token Cache\", {\"user\": \"John Doe\"}, \"expires_in\")"
    },
    {
        "input": {
            "doctype": "Token Cache",
            "question": "Fetch the complete token cache entry for John Doe.",
            "fields": [
                "user",
                "connected_app",
                "provider_name",
                "access_token",
                "refresh_token",
                "expires_in",
                "state",
                "scopes",
                "success_uri",
                "token_type"
            ]
        },
        "output": "frappe.get_doc(\"Token Cache\", \"John Doe\")"
    },
    {
        "input": {
            "doctype": "Token Cache",
            "question": "Get full token record for user john@example.com.",
            "fields": [
                "user",
                "connected_app",
                "access_token",
                "expires_in"
            ]
        },
        "output": "frappe.get_doc(\"Token Cache\", \"john@example.com\")"
    },
    {
        "input": {
            "doctype": "Token Cache",
            "question": "Retrieve token cache data for user 'admin'.",
            "fields": [
                "user",
                "access_token",
                "refresh_token"
            ]
        },
        "output": "frappe.get_doc(\"Token Cache\", \"admin\")"
    },
    {
        "input": {
            "doctype": "Token Cache",
            "question": "Show the list of users who have access tokens.",
            "fields": [
                "user"
            ]
        },
        "output": "frappe.get_list(\"Token Cache\", filters={\"access_token\": [\"not\", \"=\"]}, fields=[\"user\"])"
    },
    {
        "input": {
            "doctype": "Token Cache",
            "question": "List connected apps for users with Bearer token type.",
            "fields": [
                "user",
                "connected_app"
            ]
        },
        "output": "frappe.get_list(\"Token Cache\", filters={\"token_type\": \"Bearer\"}, fields=[\"user\", \"connected_app\"])"
    },
    {
        "input": {
            "doctype": "Territory",
            "question": "What's the name of the territory managed by Arun?",
            "fields": [
                "territory_name",
                "territory_manager"
            ]
        },
        "output": "frappe.db.get_value(\"Territory\", {\"territory_manager\": \"Arun\"}, \"territory_name\")"
    },
    {
        "input": {
            "doctype": "Territory",
            "question": "Which territory reports to West Zone?",
            "fields": [
                "territory_name",
                "parent_territory"
            ]
        },
        "output": "frappe.get_list(\"Territory\", filters={\"parent_territory\": \"West Zone\"}, fields=[\"territory_name\", \"parent_territory\"])"
    },
    {
        "input": {
            "doctype": "Territory",
            "question": "List all territories that are marked as groups.",
            "fields": [
                "territory_name",
                "is_group"
            ]
        },
        "output": "frappe.get_list(\"Territory\", filters={\"is_group\": 1}, fields=[\"territory_name\", \"is_group\"])"
    },
    {
        "input": {
            "doctype": "Territory",
            "question": "Show me the left and right values for the Central region territory.",
            "fields": [
                "lft",
                "rgt"
            ]
        },
        "output": "frappe.db.get_value(\"Territory\", {\"territory_name\": \"Central\"}, [\"lft\", \"rgt\"])"
    },
    {
        "input": {
            "doctype": "Territory",
            "question": "Can you find the previous parent of the 'Southwest India' territory?",
            "fields": [
                "old_parent"
            ]
        },
        "output": "frappe.db.get_value(\"Territory\", {\"territory_name\": \"Southwest India\"}, \"old_parent\")"
    },
    {
        "input": {
            "doctype": "Territory",
            "question": "Is East India a parent territory or part of another territory?",
            "fields": [
                "parent_territory"
            ]
        },
        "output": "frappe.db.get_value(\"Territory\", {\"territory_name\": \"East India\"}, \"parent_territory\")"
    },
    {
        "input": {
            "doctype": "Territory",
            "question": "Which territories have assigned managers?",
            "fields": [
                "territory_name",
                "territory_manager"
            ]
        },
        "output": "frappe.get_list(\"Territory\", filters={\"territory_manager\": [\"not\", \"=\"]}, fields=[\"territory_name\", \"territory_manager\"])"
    },
    {
        "input": {
            "doctype": "Territory",
            "question": "Find all territories under 'India' that are not groups.",
            "fields": [
                "territory_name",
                "parent_territory",
                "is_group"
            ]
        },
        "output": "frappe.get_list(\"Territory\", filters={\"parent_territory\": \"India\", \"is_group\": 0}, fields=[\"territory_name\"])"
    },
    {
        "input": {
            "doctype": "Territory",
            "question": "I want to see all target details linked to the territory 'North Zone'.",
            "fields": [
                "targets"
            ]
        },
        "output": "frappe.get_doc(\"Territory\", \"North Zone\").targets"
    },
    {
        "input": {
            "doctype": "Territory",
            "question": "Get the hierarchy position (lft and rgt) for the territory named 'Asia'.",
            "fields": [
                "lft",
                "rgt"
            ]
        },
        "output": "frappe.get_doc(\"Territory\", \"Asia\")"
    },
    {
        "input": {
            "doctype": "Territory",
            "question": "Does 'Uttar Pradesh' territory belong to any parent group?",
            "fields": [
                "parent_territory"
            ]
        },
        "output": "frappe.get_doc(\"Territory\", \"Uttar Pradesh\").parent_territory"
    },
    {
        "input": {
            "doctype": "Territory",
            "question": "Which territory is managed by the sales person Rajeev?",
            "fields": [
                "territory_name",
                "territory_manager"
            ]
        },
        "output": "frappe.get_doc(\"Territory\", {\"territory_manager\": \"Rajeev\"})"
    },
    {
        "input": {
            "doctype": "Territory",
            "question": "List all territories that belong to the Asia group.",
            "fields": [
                "territory_name",
                "parent_territory"
            ]
        },
        "output": "frappe.get_all(\"Territory\", filters={\"parent_territory\": \"Asia\"}, fields=[\"territory_name\"])"
    },
    {
        "input": {
            "doctype": "Territory",
            "question": "Count the total number of territory groups defined.",
            "fields": []
        },
        "output": "frappe.db.count(\"Territory\", {\"is_group\": 1})"
    },
    {
        "input": {
            "doctype": "Territory",
            "question": "Count how many territories do not belong to any parent.",
            "fields": []
        },
        "output": "frappe.db.count(\"Territory\", {\"parent_territory\": [\"is\", \"not set\"]})"
    },
    {
        "input": {
            "doctype": "Territory",
            "question": "Show me all territories that are leaf nodes (not groups).",
            "fields": [
                "territory_name",
                "is_group"
            ]
        },
        "output": "frappe.get_all(\"Territory\", filters={\"is_group\": 0}, fields=[\"territory_name\"])"
    },
    {
        "input": {
            "doctype": "Territory",
            "question": "Get all fields for the territory record 'South India'.",
            "fields": [
                "territory_name",
                "parent_territory",
                "is_group",
                "territory_manager",
                "lft",
                "rgt",
                "old_parent",
                "targets"
            ]
        },
        "output": "frappe.get_doc(\"Territory\", \"South India\")"
    },
    {
        "input": {
            "doctype": "Territory",
            "question": "Find all territories that changed their parent in the last update.",
            "fields": [
                "territory_name",
                "old_parent"
            ]
        },
        "output": "frappe.get_list(\"Territory\", filters={\"old_parent\": [\"not\", \"=\"]}, fields=[\"territory_name\", \"old_parent\"])"
    },
    {
        "input": {
            "doctype": "Territory",
            "question": "Get all parent-child mappings of territories.",
            "fields": [
                "territory_name",
                "parent_territory"
            ]
        },
        "output": "frappe.get_all(\"Territory\", fields=[\"territory_name\", \"parent_territory\"])"
    },
    {
        "input": {
            "doctype": "Territory",
            "question": "List all territories where no manager is assigned.",
            "fields": [
                "territory_name",
                "territory_manager"
            ]
        },
        "output": "frappe.get_list(\"Territory\", filters={\"territory_manager\": [\"is\", \"not set\"]}, fields=[\"territory_name\"])"
    },
    {
        "input": {
            "doctype": "Target Detail",
            "question": "How can I define yearly sales targets for different item groups?",
            "fields": [
                "item_group",
                "fiscal_year",
                "target_qty",
                "target_amount"
            ]
        },
        "output": "frappe.get_list(\"Target Detail\", fields=[\"item_group\", \"fiscal_year\", \"target_qty\", \"target_amount\"])"
    },
    {
        "input": {
            "doctype": "Target Detail",
            "question": "Where do I set the sales target quantity for a specific fiscal year?",
            "fields": [
                "item_group",
                "fiscal_year",
                "target_qty"
            ]
        },
        "output": "frappe.get_list(\"Target Detail\", filters={\"fiscal_year\": \"2024-2025\"}, fields=[\"item_group\", \"target_qty\"])"
    },
    {
        "input": {
            "doctype": "Target Detail",
            "question": "Which form lets me link item groups with monthly distribution targets?",
            "fields": [
                "item_group",
                "distribution_id"
            ]
        },
        "output": "frappe.get_all(\"Target Detail\", filters={\"distribution_id\": [\"not\", \"=\"]}, fields=[\"item_group\", \"distribution_id\"])"
    },
    {
        "input": {
            "doctype": "Target Detail",
            "question": "How do I assign a target amount to an item group for this fiscal year?",
            "fields": [
                "item_group",
                "fiscal_year",
                "target_amount"
            ]
        },
        "output": "frappe.get_doc(\"Target Detail\", {\"item_group\": \"Electronics\", \"fiscal_year\": \"2024-2025\"})"
    },
    {
        "input": {
            "doctype": "Target Detail",
            "question": "Where do I record item-wise targets for a sales team?",
            "fields": [
                "item_group",
                "fiscal_year",
                "target_qty",
                "target_amount"
            ]
        },
        "output": "frappe.get_list(\"Target Detail\", fields=[\"item_group\", \"target_qty\", \"target_amount\"])"
    },
    {
        "input": {
            "doctype": "Target Detail",
            "question": "I want to set both quantity and value-based targets for product categories. What doctype should I use?",
            "fields": [
                "item_group",
                "target_qty",
                "target_amount"
            ]
        },
        "output": "frappe.get_all(\"Target Detail\", fields=[\"item_group\", \"target_qty\", \"target_amount\"])"
    },
    {
        "input": {
            "doctype": "Target Detail",
            "question": "How can I track monthly distribution against yearly item group targets?",
            "fields": [
                "item_group",
                "distribution_id",
                "target_qty",
                "fiscal_year"
            ]
        },
        "output": "frappe.get_list(\"Target Detail\", fields=[\"item_group\", \"distribution_id\", \"target_qty\", \"fiscal_year\"])"
    },
    {
        "input": {
            "doctype": "Target Detail",
            "question": "Where can I map fiscal year targets to specific item groups?",
            "fields": [
                "fiscal_year",
                "item_group"
            ]
        },
        "output": "frappe.get_list(\"Target Detail\", fields=[\"fiscal_year\", \"item_group\"])"
    },
    {
        "input": {
            "doctype": "Target Detail",
            "question": "How do I specify monthly target allocation for a fiscal year?",
            "fields": [
                "distribution_id",
                "fiscal_year"
            ]
        },
        "output": "frappe.get_all(\"Target Detail\", filters={\"fiscal_year\": \"2024-2025\"}, fields=[\"distribution_id\"])"
    },
    {
        "input": {
            "doctype": "Target Detail",
            "question": "Is there a way to plan targets by item group and spread them over months?",
            "fields": [
                "item_group",
                "distribution_id"
            ]
        },
        "output": "frappe.get_all(\"Target Detail\", filters={\"distribution_id\": [\"not\", \"=\"]}, fields=[\"item_group\", \"distribution_id\"])"
    },
    {
        "input": {
            "doctype": "Target Detail",
            "question": "Can I use the same monthly distribution for multiple item groups\u2019 targets?",
            "fields": [
                "distribution_id"
            ]
        },
        "output": "frappe.db.count(\"Target Detail\", {\"distribution_id\": \"Monthly-2024\"})"
    },
    {
        "input": {
            "doctype": "Target Detail",
            "question": "How do I manage fiscal year targets by value and quantity for products?",
            "fields": [
                "item_group",
                "fiscal_year",
                "target_qty",
                "target_amount"
            ]
        },
        "output": "frappe.get_doc(\"Target Detail\", {\"item_group\": \"Home Appliances\", \"fiscal_year\": \"2024-2025\"})"
    },
    {
        "input": {
            "doctype": "Target Detail",
            "question": "Show me all item groups with target quantities defined.",
            "fields": [
                "item_group",
                "target_qty"
            ]
        },
        "output": "frappe.get_list(\"Target Detail\", filters={\"target_qty\": [\">\", 0]}, fields=[\"item_group\", \"target_qty\"])"
    },
    {
        "input": {
            "doctype": "Target Detail",
            "question": "What is the target amount for 'Mobile Phones' in 2023-24?",
            "fields": [
                "item_group",
                "fiscal_year",
                "target_amount"
            ]
        },
        "output": "frappe.db.get_value(\"Target Detail\", {\"item_group\": \"Mobile Phones\", \"fiscal_year\": \"2023-2024\"}, \"target_amount\")"
    },
    {
        "input": {
            "doctype": "Target Detail",
            "question": "How many item groups have defined targets for the year 2024?",
            "fields": [
                "fiscal_year"
            ]
        },
        "output": "frappe.db.count(\"Target Detail\", {\"fiscal_year\": \"2024-2025\"})"
    },
    {
        "input": {
            "doctype": "Target Detail",
            "question": "Get full details of the target set for 'Laptops' in this fiscal year.",
            "fields": [
                "item_group",
                "fiscal_year",
                "target_qty",
                "target_amount",
                "distribution_id"
            ]
        },
        "output": "frappe.get_doc(\"Target Detail\", {\"item_group\": \"Laptops\", \"fiscal_year\": \"2024-2025\"})"
    },
    {
        "input": {
            "doctype": "Target Detail",
            "question": "List all fiscal years where targets have been assigned.",
            "fields": [
                "fiscal_year"
            ]
        },
        "output": "frappe.get_all(\"Target Detail\", fields=[\"fiscal_year\"], distinct=True)"
    },
    {
        "input": {
            "doctype": "Target Detail",
            "question": "Find item groups that share the same monthly distribution ID.",
            "fields": [
                "item_group",
                "distribution_id"
            ]
        },
        "output": "frappe.get_list(\"Target Detail\", filters={\"distribution_id\": \"Monthly-2024\"}, fields=[\"item_group\"])"
    },
    {
        "input": {
            "doctype": "Target Detail",
            "question": "Where do I find target details assigned to the 'Furniture' item group?",
            "fields": [
                "item_group",
                "target_qty",
                "target_amount",
                "fiscal_year"
            ]
        },
        "output": "frappe.get_doc(\"Target Detail\", {\"item_group\": \"Furniture\"})"
    },
    {
        "input": {
            "doctype": "Target Detail",
            "question": "Show target quantity for 'Printers' in the year 2024-25.",
            "fields": [
                "item_group",
                "fiscal_year",
                "target_qty"
            ]
        },
        "output": "frappe.db.get_value(\"Target Detail\", {\"item_group\": \"Printers\", \"fiscal_year\": \"2024-2025\"}, \"target_qty\")"
    }
]