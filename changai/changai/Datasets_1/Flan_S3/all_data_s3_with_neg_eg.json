[
  {
    "doctype": "Sales Invoice",
    "question": "How many sales invoices did we create last month?",
    "fields": [
      "posting_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT COUNT(*)\n    FROM [BT]tabSales Invoice[BT]\n    WHERE MONTH(posting_date) = MONTH(CURRENT_DATE - INTERVAL 1 MONTH)\n      AND YEAR(posting_date) = YEAR(CURRENT_DATE - INTERVAL 1 MONTH)\n\"\"\")"
  },
  {
    "doctype": "Sales Invoice",
    "question": "Total invoice amount for the current week",
    "fields": [
      "grand_total (Currency)",
      "posting_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT SUM(grand_total)\n    FROM [BT]tabSales Invoice[BT]\n    WHERE WEEK(posting_date) = WEEK(CURDATE())\n      AND YEAR(posting_date) = YEAR(CURDATE())\n\"\"\")"
  },
  {
    "doctype": "Sales Invoice",
    "question": "Which customer got the biggest invoice last quarter?",
    "fields": [
      "customer (Link → Customer)",
      "grand_total (Currency)",
      "posting_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT customer, grand_total\n    FROM [BT]tabSales Invoice[BT]\n    WHERE QUARTER(posting_date) = QUARTER(CURRENT_DATE - INTERVAL 1 QUARTER)\n      AND YEAR(posting_date) = YEAR(CURRENT_DATE - INTERVAL 1 QUARTER)\n    ORDER BY grand_total DESC\n    LIMIT 1\n\"\"\")"
  },
  {
    "doctype": "Sales Invoice",
    "question": "List all invoices where we gave additional discounts.",
    "fields": [
      "additional_discount_percentage (Float)",
      "discount_amount (Currency)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT name, additional_discount_percentage, discount_amount\n    FROM [BT]tabSales Invoice[BT]\n    WHERE additional_discount_percentage > 0\n       OR discount_amount > 0\n\"\"\")"
  },
  {
    "doctype": "Sales Invoice",
    "question": "How many POS sales did we do this month?",
    "fields": [
      "is_pos (Check)",
      "posting_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT COUNT(*)\n    FROM [BT]tabSales Invoice[BT]\n    WHERE is_pos = 1\n      AND MONTH(posting_date) = MONTH(CURDATE())\n      AND YEAR(posting_date) = YEAR(CURDATE())\n\"\"\")"
  },
  {
    "doctype": "Sales Invoice",
    "question": "Which invoices were paid in cash?",
    "fields": [
      "cash_bank_account (Link → Account)",
      "paid_amount (Currency)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT name, paid_amount, cash_bank_account\n    FROM [BT]tabSales Invoice[BT]\n    WHERE cash_bank_account IS NOT NULL\n      AND paid_amount > 0\n\"\"\")"
  },
  {
    "doctype": "Sales Invoice",
    "question": "What was the total outstanding amount at the end of last week?",
    "fields": [
      "outstanding_amount (Currency)",
      "posting_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT SUM(outstanding_amount)\n    FROM [BT]tabSales Invoice[BT]\n    WHERE posting_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 WEEK)\n                           AND CURDATE()\n\"\"\")"
  },
  {
    "doctype": "Sales Invoice",
    "question": "List invoices where customer used loyalty points.",
    "fields": [
      "redeem_loyalty_points (Check)",
      "loyalty_points (Int)",
      "loyalty_amount (Currency)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT name, loyalty_points, loyalty_amount\n    FROM [BT]tabSales Invoice[BT]\n    WHERE redeem_loyalty_points = 1\n\"\"\")"
  },
  {
    "doctype": "Sales Invoice",
    "question": "How many returns did we get this quarter?",
    "fields": [
      "is_return (Check)",
      "posting_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT COUNT(*)\n    FROM [BT]tabSales Invoice[BT]\n    WHERE is_return = 1\n      AND QUARTER(posting_date) = QUARTER(CURDATE())\n      AND YEAR(posting_date) = YEAR(CURDATE())\n\"\"\")"
  },
  {
    "doctype": "Sales Invoice",
    "question": "What’s the total commission earned by sales partners this year?",
    "fields": [
      "total_commission (Currency)",
      "sales_partner (Link → Sales Partner)",
      "posting_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT SUM(total_commission)\n    FROM [BT]tabSales Invoice[BT]\n    WHERE posting_date BETWEEN DATE_FORMAT(NOW(), '%Y-01-01') AND CURDATE()\n\"\"\")"
  },
  {
    "question": "What was the total revenue last week?",
    "doctype": "Sales Invoice",
    "fields": [
      "grand_total (Currency)",
      "posting_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT SUM(grand_total)\n    FROM [BT]tabSales Invoice[BT]\n    WHERE posting_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE()\n\"\"\")"
  },
  {
    "question": "Which customer paid the highest invoice this year?",
    "doctype": "Sales Invoice",
    "fields": [
      "customer (Link → Customer)",
      "grand_total (Currency)",
      "posting_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT customer, grand_total\n    FROM [BT]tabSales Invoice[BT]\n    WHERE YEAR(posting_date) = YEAR(CURDATE())\n    ORDER BY grand_total DESC\n    LIMIT 1\n\"\"\")"
  },
  {
    "question": "How much discount was given in total this month?",
    "doctype": "Sales Invoice",
    "fields": [
      "discount_amount (Currency)",
      "additional_discount_percentage (Float)",
      "posting_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT SUM(discount_amount)\n    FROM [BT]tabSales Invoice[BT]\n    WHERE MONTH(posting_date) = MONTH(CURDATE())\n      AND YEAR(posting_date) = YEAR(CURDATE())\n\"\"\")"
  },
  {
    "question": "How many invoices were paid in cash this month?",
    "doctype": "Sales Invoice",
    "fields": [
      "cash_bank_account (Link → Account)",
      "posting_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT COUNT(*)\n    FROM [BT]tabSales Invoice[BT]\n    WHERE cash_bank_account IS NOT NULL\n      AND MONTH(posting_date) = MONTH(CURDATE())\n      AND YEAR(posting_date) = YEAR(CURDATE())\n\"\"\")"
  },
  {
    "question": "How many overdue invoices do we have right now?",
    "doctype": "Sales Invoice",
    "fields": [
      "due_date (Date)",
      "outstanding_amount (Currency)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT COUNT(*)\n    FROM [BT]tabSales Invoice[BT]\n    WHERE due_date < CURDATE()\n      AND outstanding_amount > 0\n\"\"\")"
  },
  {
    "question": "How many invoices were returned this month?",
    "doctype": "Sales Invoice",
    "fields": [
      "is_return (Check)",
      "posting_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT COUNT(*)\n    FROM [BT]tabSales Invoice[BT]\n    WHERE is_return = 1\n      AND MONTH(posting_date) = MONTH(CURDATE())\n      AND YEAR(posting_date) = YEAR(CURDATE())\n\"\"\")"
  },
  {
    "question": "What’s the total outstanding amount from all customers?",
    "doctype": "Sales Invoice",
    "fields": [
      "outstanding_amount (Currency)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT SUM(outstanding_amount)\n    FROM [BT]tabSales Invoice[BT]\n\"\"\")"
  },
  {
    "question": "How many sales orders did we receive last quarter?",
    "doctype": "Sales Order",
    "fields": [
      "transaction_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT COUNT(*)\n    FROM [BT]tabSales Order[BT]\n    WHERE QUARTER(transaction_date) = QUARTER(CURDATE() - INTERVAL 1 QUARTER)\n      AND YEAR(transaction_date) = YEAR(CURDATE() - INTERVAL 1 QUARTER)\n\"\"\")"
  },
  {
    "question": "What’s the total value of sales orders this month?",
    "doctype": "Sales Order",
    "fields": [
      "grand_total (Currency)",
      "transaction_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT SUM(grand_total)\n    FROM [BT]tabSales Order[BT]\n    WHERE MONTH(transaction_date) = MONTH(CURDATE())\n      AND YEAR(transaction_date) = YEAR(CURDATE())\n\"\"\")"
  },
  {
    "question": "Which customer placed the biggest sales order this year?",
    "doctype": "Sales Order",
    "fields": [
      "customer (Link → Customer)",
      "grand_total (Currency)",
      "transaction_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT customer, grand_total\n    FROM [BT]tabSales Order[BT]\n    WHERE YEAR(transaction_date) = YEAR(CURDATE())\n    ORDER BY grand_total DESC\n    LIMIT 1\n\"\"\")"
  },
  {
    "question": "How many sales orders were fully billed this month?",
    "doctype": "Sales Order",
    "fields": [
      "per_billed (Percent)",
      "transaction_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT COUNT(*)\n    FROM [BT]tabSales Order[BT]\n    WHERE per_billed = 100\n      AND MONTH(transaction_date) = MONTH(CURDATE())\n      AND YEAR(transaction_date) = YEAR(CURDATE())\n\"\"\")"
  },
  {
    "question": "How many orders are partially delivered?",
    "doctype": "Sales Order",
    "fields": [
      "per_delivered (Percent)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT COUNT(*)\n    FROM [BT]tabSales Order[BT]\n    WHERE per_delivered > 0 AND per_delivered < 100\n\"\"\")"
  },
  {
    "question": "What’s the average order quantity this week?",
    "doctype": "Sales Order",
    "fields": [
      "total_qty (Float)",
      "transaction_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT AVG(total_qty)\n    FROM [BT]tabSales Order[BT]\n    WHERE WEEK(transaction_date) = WEEK(CURDATE())\n      AND YEAR(transaction_date) = YEAR(CURDATE())\n\"\"\")"
  },
  {
    "question": "How many internal customer orders were created this month?",
    "doctype": "Sales Order",
    "fields": [
      "is_internal_customer (Check)",
      "transaction_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT COUNT(*)\n    FROM [BT]tabSales Order[BT]\n    WHERE is_internal_customer = 1\n      AND MONTH(transaction_date) = MONTH(CURDATE())\n      AND YEAR(transaction_date) = YEAR(CURDATE())\n\"\"\")"
  },
  {
    "question": "Which sales partner generated the most commission this quarter?",
    "doctype": "Sales Order",
    "fields": [
      "sales_partner (Link → Sales Partner)",
      "total_commission (Currency)",
      "transaction_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT sales_partner, SUM(total_commission) AS commission\n    FROM [BT]tabSales Order[BT]\n    WHERE QUARTER(transaction_date) = QUARTER(CURDATE())\n      AND YEAR(transaction_date) = YEAR(CURDATE())\n    GROUP BY sales_partner\n    ORDER BY commission DESC\n    LIMIT 1\n\"\"\")"
  },
  {
    "question": "How many orders include loyalty points?",
    "doctype": "Sales Order",
    "fields": [
      "loyalty_points (Int)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT COUNT(*)\n    FROM [BT]tabSales Order[BT]\n    WHERE loyalty_points > 0\n\"\"\")"
  },
  {
    "question": "What’s the total discount amount given in sales orders this month?",
    "doctype": "Sales Order",
    "fields": [
      "discount_amount (Currency)",
      "transaction_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n    SELECT SUM(discount_amount)\n    FROM [BT]tabSales Order[BT]\n    WHERE MONTH(transaction_date) = MONTH(CURDATE())\n      AND YEAR(transaction_date) = YEAR(CURDATE())\n\"\"\")"
  },
  {
    "question": "How many sales orders have been fully delivered this year?",
    "doctype": "Sales Order",
    "fields": [
      "per_delivered (Percent)",
      "transaction_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n  SELECT COUNT(*)\n  FROM [BT]tabSales Order[BT]\n  WHERE per_delivered = 100\n    AND YEAR(transaction_date) = YEAR(CURDATE())\n\"\"\")"
  },
  {
    "question": "Which customer placed the most sales orders last month?",
    "doctype": "Sales Order",
    "fields": [
      "customer (Link → Customer)",
      "transaction_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n  SELECT customer, COUNT(*) AS order_count\n  FROM [BT]tabSales Order[BT]\n  WHERE MONTH(transaction_date) = MONTH(CURDATE() - INTERVAL 1 MONTH)\n    AND YEAR(transaction_date) = YEAR(CURDATE() - INTERVAL 1 MONTH)\n  GROUP BY customer\n  ORDER BY order_count DESC\n  LIMIT 1\n\"\"\")"
  },
  {
    "question": "What is the total value of internal customer orders this quarter?",
    "doctype": "Sales Order",
    "fields": [
      "is_internal_customer (Check)",
      "grand_total (Currency)",
      "transaction_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n  SELECT SUM(grand_total)\n  FROM [BT]tabSales Order[BT]\n  WHERE is_internal_customer = 1\n    AND QUARTER(transaction_date) = QUARTER(CURDATE())\n    AND YEAR(transaction_date) = YEAR(CURDATE())\n\"\"\")"
  },
  {
    "question": "How many orders were billed but not fully delivered?",
    "doctype": "Sales Order",
    "fields": [
      "per_billed (Percent)",
      "per_delivered (Percent)"
    ],
    "output": "frappe.db.sql(\"\"\"\n  SELECT COUNT(*)\n  FROM [BT]tabSales Order[BT]\n  WHERE per_billed = 100 AND per_delivered < 100\n\"\"\")"
  },
  {
    "question": "How many sales orders were created without a PO number?",
    "doctype": "Sales Order",
    "fields": [
      "po_no (Data)"
    ],
    "output": "frappe.db.sql(\"\"\"\n  SELECT COUNT(*)\n  FROM [BT]tabSales Order[BT]\n  WHERE po_no IS NULL OR po_no = ''\n\"\"\")"
  },
  {
    "question": "How many customers got more than one sales order this week?",
    "doctype": "Sales Order",
    "fields": [
      "customer (Link → Customer)",
      "transaction_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n  SELECT customer\n  FROM [BT]tabSales Order[BT]\n  WHERE WEEK(transaction_date) = WEEK(CURDATE())\n    AND YEAR(transaction_date) = YEAR(CURDATE())\n  GROUP BY customer\n  HAVING COUNT(*) > 1\n\"\"\")"
  },
  {
    "question": "Which sales order has the highest discount this month?",
    "doctype": "Sales Order",
    "fields": [
      "discount_amount (Currency)",
      "transaction_date (Date)",
      "name (Data)"
    ],
    "output": "frappe.db.sql(\"\"\"\n  SELECT name, discount_amount\n  FROM [BT]tabSales Order[BT]\n  WHERE MONTH(transaction_date) = MONTH(CURDATE())\n    AND YEAR(transaction_date) = YEAR(CURDATE())\n  ORDER BY discount_amount DESC\n  LIMIT 1\n\"\"\")"
  },
  {
    "question": "What’s the total number of loyalty points used this year?",
    "doctype": "Sales Order",
    "fields": [
      "loyalty_points (Int)",
      "transaction_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n  SELECT SUM(loyalty_points)\n  FROM [BT]tabSales Order[BT]\n  WHERE YEAR(transaction_date) = YEAR(CURDATE())\n\"\"\")"
  },
  {
    "question": "How many sales orders were submitted with missing delivery date?",
    "doctype": "Sales Order",
    "fields": [
      "delivery_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n  SELECT COUNT(*)\n  FROM [BT]tabSales Order[BT]\n  WHERE delivery_date IS NULL\n\"\"\")"
  },
  {
    "question": "How many orders were submitted this weekend?",
    "doctype": "Sales Order",
    "fields": [
      "transaction_date (Date)"
    ],
    "output": "frappe.db.sql(\"\"\"\n  SELECT COUNT(*)\n  FROM [BT]tabSales Order[BT]\n  WHERE WEEKDAY(transaction_date) IN (5, 6)\n    AND YEAR(transaction_date) = YEAR(CURDATE())\n    AND MONTH(transaction_date) = MONTH(CURDATE())\n\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "How many sales partners are active?",
      "fields": [
        "show_in_website"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabSales Partner` WHERE show_in_website = 1\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partner has the highest commission rate?",
      "fields": [
        "partner_name",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT partner_name FROM `tabSales Partner` ORDER BY commission_rate DESC LIMIT 1\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all sales partners in territory 'East'.",
      "fields": [
        "partner_name",
        "territory"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT partner_name FROM `tabSales Partner` WHERE territory = 'East'\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What is the commission rate of John Smith?",
      "fields": [
        "partner_name",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT commission_rate FROM `tabSales Partner` WHERE partner_name = 'John Smith'\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which sales partners have zero commission rate?",
      "fields": [
        "partner_name",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT partner_name FROM `tabSales Partner` WHERE commission_rate = 0\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "How many partners have websites listed?",
      "fields": [
        "website"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabSales Partner` WHERE website IS NOT NULL AND website != ''\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List top 5 partners by commission rate.",
      "fields": [
        "partner_name",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT partner_name FROM `tabSales Partner` ORDER BY commission_rate DESC LIMIT 5\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "How many sales orders did we receive last month?",
      "fields": [
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabSales Order` WHERE MONTH(transaction_date) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(transaction_date) = YEAR(CURDATE() - INTERVAL 1 MONTH)\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "What is the total grand total of all sales orders placed this week?",
      "fields": [
        "transaction_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT SUM(grand_total) FROM `tabSales Order` WHERE YEARWEEK(transaction_date, 1) = YEARWEEK(CURDATE(), 1)\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Which customer placed the highest sales order last quarter?",
      "fields": [
        "customer",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT customer FROM `tabSales Order` WHERE QUARTER(transaction_date) = QUARTER(CURDATE() - INTERVAL 1 QUARTER) AND YEAR(transaction_date) = YEAR(CURDATE() - INTERVAL 1 QUARTER) ORDER BY grand_total DESC LIMIT 1\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "How many internal customer orders were created this year?",
      "fields": [
        "transaction_date",
        "is_internal_customer"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabSales Order` WHERE is_internal_customer = 1 AND YEAR(transaction_date) = YEAR(CURDATE())\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "What’s the total discount amount offered this month?",
      "fields": [
        "transaction_date",
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT SUM(discount_amount) FROM `tabSales Order` WHERE MONTH(transaction_date) = MONTH(CURDATE()) AND YEAR(transaction_date) = YEAR(CURDATE())\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Which campaign generated the most sales last quarter?",
      "fields": [
        "campaign",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT campaign, SUM(grand_total) AS total FROM `tabSales Order` WHERE QUARTER(transaction_date) = QUARTER(CURDATE() - INTERVAL 1 QUARTER) AND YEAR(transaction_date) = YEAR(CURDATE() - INTERVAL 1 QUARTER) GROUP BY campaign ORDER BY total DESC LIMIT 1\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Top 3 territories by sales volume this month?",
      "fields": [
        "territory",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT territory, SUM(grand_total) AS total FROM `tabSales Order` WHERE MONTH(transaction_date) = MONTH(CURDATE()) AND YEAR(transaction_date) = YEAR(CURDATE()) GROUP BY territory ORDER BY total DESC LIMIT 3\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "What is the average order value for this week?",
      "fields": [
        "transaction_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT AVG(grand_total) FROM `tabSales Order` WHERE YEARWEEK(transaction_date, 1) = YEARWEEK(CURDATE(), 1)\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "How many orders used the coupon code 'FESTIVE10' this year?",
      "fields": [
        "coupon_code",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabSales Order` WHERE coupon_code = 'FESTIVE10' AND YEAR(transaction_date) = YEAR(CURDATE())\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Which customer has the highest cumulative sales this year?",
      "fields": [
        "customer",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT customer, SUM(grand_total) AS total FROM `tabSales Order` WHERE YEAR(transaction_date) = YEAR(CURDATE()) GROUP BY customer ORDER BY total DESC LIMIT 1\"\"\")"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which suppliers submitted quotations with a grand total exceeding 500,000 in the last year?",
      "fields": [
        "supplier",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, grand_total\nFROM `tabSupplier Quotation`\nWHERE grand_total > 500000 AND transaction_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\nORDER BY grand_total DESC\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which suppliers offered additional discounts greater than 10%?",
      "fields": [
        "supplier",
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, additional_discount_percentage\nFROM `tabSupplier Quotation`\nWHERE additional_discount_percentage > 10\nORDER BY additional_discount_percentage DESC\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which cost centers had quotations with the highest average base net total?",
      "fields": [
        "cost_center",
        "base_net_total"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT cost_center, AVG(base_net_total) AS avg_base_net_total\nFROM `tabSupplier Quotation`\nGROUP BY cost_center\nORDER BY avg_base_net_total DESC\nLIMIT 5\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "List the top 3 projects by total value of submitted quotations in the past 6 months.",
      "fields": [
        "project",
        "net_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT project, SUM(net_total) AS total_value\nFROM `tabSupplier Quotation`\nWHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\nGROUP BY project\nORDER BY total_value DESC\nLIMIT 3\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "What is the average conversion rate used in quotations for each currency?",
      "fields": [
        "currency",
        "conversion_rate"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT currency, AVG(conversion_rate) AS avg_conversion_rate\nFROM `tabSupplier Quotation`\nGROUP BY currency\nORDER BY avg_conversion_rate DESC\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which suppliers quoted for more than one cost center?",
      "fields": [
        "supplier",
        "cost_center"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, COUNT(DISTINCT cost_center) AS cost_center_count\nFROM `tabSupplier Quotation`\nWHERE cost_center IS NOT NULL\nGROUP BY supplier\nHAVING cost_center_count > 1\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which quotations had a mismatch between base net total and net total (over 100 QAR)?",
      "fields": [
        "name",
        "base_net_total",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT name, base_net_total, net_total\nFROM `tabSupplier Quotation`\nWHERE ABS(base_net_total - net_total) > 100\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which suppliers had more than 5 quotations with incoterm 'FOB'?",
      "fields": [
        "supplier",
        "incoterm"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, COUNT(*) AS quotation_count\nFROM `tabSupplier Quotation`\nWHERE incoterm = 'FOB'\nGROUP BY supplier\nHAVING quotation_count > 5\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "What is the total value of quotations submitted each quarter this year?",
      "fields": [
        "transaction_date",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT CONCAT(YEAR(transaction_date), '-Q', QUARTER(transaction_date)) AS quarter, SUM(net_total) AS total_value\nFROM `tabSupplier Quotation`\nWHERE transaction_date >= DATE_FORMAT(CURDATE(), '%Y-01-01')\nGROUP BY quarter\nORDER BY quarter\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which suppliers used different currencies across their quotations?",
      "fields": [
        "supplier",
        "currency"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, COUNT(DISTINCT currency) AS currency_count\nFROM `tabSupplier Quotation`\nGROUP BY supplier\nHAVING currency_count > 1\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which supplier submitted the most quotations this year?",
      "fields": [
        "supplier",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, COUNT(*) AS total_quotations\nFROM `tabSupplier Quotation`\nWHERE transaction_date >= DATE_FORMAT(CURDATE(), '%Y-01-01')\nGROUP BY supplier\nORDER BY total_quotations DESC\nLIMIT 1\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "What is the average grand total of all quotations submitted per supplier?",
      "fields": [
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, AVG(grand_total) AS avg_total\nFROM `tabSupplier Quotation`\nGROUP BY supplier\nORDER BY avg_total DESC\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which currency was used most frequently in supplier quotations over the past 6 months?",
      "fields": [
        "currency",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT currency, COUNT(*) AS usage_count\nFROM `tabSupplier Quotation`\nWHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\nGROUP BY currency\nORDER BY usage_count DESC\nLIMIT 1\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which project has received the highest total quotation value from all suppliers combined?",
      "fields": [
        "project",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT project, SUM(net_total) AS total_value\nFROM `tabSupplier Quotation`\nGROUP BY project\nORDER BY total_value DESC\nLIMIT 1\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which suppliers have quoted more than 10 different quotations in the last quarter?",
      "fields": [
        "supplier",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, COUNT(*) AS count\nFROM `tabSupplier Quotation`\nWHERE transaction_date BETWEEN '2025-04-01' AND '2025-06-30'\nGROUP BY supplier\nHAVING count > 10\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "What is the monthly trend of quotation net total values for the current fiscal year?",
      "fields": [
        "transaction_date",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT DATE_FORMAT(transaction_date, '%Y-%m') AS month, SUM(net_total) AS total_value\nFROM `tabSupplier Quotation`\nWHERE transaction_date >= DATE_FORMAT(CURDATE(), '%Y-01-01')\nGROUP BY month\nORDER BY month\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which supplier has the highest average discount amount across all quotations?",
      "fields": [
        "supplier",
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, AVG(discount_amount) AS avg_discount\nFROM `tabSupplier Quotation`\nGROUP BY supplier\nORDER BY avg_discount DESC\nLIMIT 1\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "List suppliers who submitted quotations where conversion rate is below 1 for foreign currencies.",
      "fields": [
        "supplier",
        "conversion_rate",
        "currency"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, currency, conversion_rate\nFROM `tabSupplier Quotation`\nWHERE conversion_rate < 1 AND currency != 'QAR'\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which cost center has received the most quotation value this year?",
      "fields": [
        "cost_center",
        "net_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT cost_center, SUM(net_total) AS total\nFROM `tabSupplier Quotation`\nWHERE transaction_date >= DATE_FORMAT(CURDATE(), '%Y-01-01')\nGROUP BY cost_center\nORDER BY total DESC\nLIMIT 1\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which suppliers quoted amounts that required rounding adjustment exceeding 100 QAR?",
      "fields": [
        "supplier",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, rounding_adjustment\nFROM `tabSupplier Quotation`\nWHERE ABS(rounding_adjustment) > 100\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which projects received quotations with a valid till date that has already expired?",
      "fields": [
        "project",
        "valid_till"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT project, valid_till\nFROM `tabSupplier Quotation`\nWHERE valid_till < CURDATE()\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "What is the total number and value of quotations grouped by status?",
      "fields": [
        "status",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT status, COUNT(*) AS count, SUM(net_total) AS total_value\nFROM `tabSupplier Quotation`\nGROUP BY status\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which suppliers have submitted quotations linked to more than 3 different projects?",
      "fields": [
        "supplier",
        "project"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, COUNT(DISTINCT project) AS project_count\nFROM `tabSupplier Quotation`\nWHERE project IS NOT NULL\nGROUP BY supplier\nHAVING project_count > 3\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "List quotations where the discount amount exceeds 15% of the net total.",
      "fields": [
        "name",
        "discount_amount",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT name, discount_amount, net_total\nFROM `tabSupplier Quotation`\nWHERE net_total > 0 AND (discount_amount / net_total) > 0.15\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which suppliers submitted quotations to multiple companies?",
      "fields": [
        "supplier",
        "company"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, COUNT(DISTINCT company) AS company_count\nFROM `tabSupplier Quotation`\nGROUP BY supplier\nHAVING company_count > 1\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "What is the average and maximum quotation value per tax category?",
      "fields": [
        "tax_category",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT tax_category, AVG(net_total) AS avg_total, MAX(net_total) AS max_total\nFROM `tabSupplier Quotation`\nGROUP BY tax_category\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which quotations have a net total less than the total quantity multiplied by 100?",
      "fields": [
        "name",
        "net_total",
        "total_qty"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT name, net_total, total_qty\nFROM `tabSupplier Quotation`\nWHERE total_qty * 100 > net_total\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which suppliers consistently used the same contact person across all their quotations?",
      "fields": [
        "supplier",
        "contact_person"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier\nFROM `tabSupplier Quotation`\nGROUP BY supplier\nHAVING COUNT(DISTINCT contact_person) = 1\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which quotations had zero taxes but a total value above 50,000?",
      "fields": [
        "name",
        "total_taxes_and_charges",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT name, net_total\nFROM `tabSupplier Quotation`\nWHERE total_taxes_and_charges = 0 AND net_total > 50000\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "List suppliers who have submitted quotations only in foreign currencies.",
      "fields": [
        "supplier",
        "currency"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier\nFROM `tabSupplier Quotation`\nGROUP BY supplier\nHAVING SUM(currency = 'QAR') = 0\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which quotations have a missing cost center but are linked to a project?",
      "fields": [
        "name",
        "cost_center",
        "project"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT name\nFROM `tabSupplier Quotation`\nWHERE cost_center IS NULL AND project IS NOT NULL\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which incoterm was used most frequently in quotations submitted in the past 12 months?",
      "fields": [
        "incoterm",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT incoterm, COUNT(*) AS count\nFROM `tabSupplier Quotation`\nWHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH)\nGROUP BY incoterm\nORDER BY count DESC\nLIMIT 1\n''')"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get companies with the default holiday list set as '2025 List'.",
      "fields": [
        "company_name",
        "default_holiday_list"
      ]
    },
    "output": "frappe.get_all('Company', filters={'default_holiday_list': '2025 List'}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find companies with registration info that includes 'VAT'.",
      "fields": [
        "company_name",
        "registration_info"
      ]
    },
    "output": "frappe.get_all('Company', filters={'registration_info': ['like', '%VAT%']}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies with a credit limit greater than 1,000,000.",
      "fields": [
        "company_name",
        "credit_limit"
      ]
    },
    "output": "frappe.get_all('Company', filters={'credit_limit': ['>', 1000000]}, fields=['company_name', 'credit_limit'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get all companies that use 'Cost - ERP' as their default operating cost account.",
      "fields": [
        "company_name",
        "default_operating_cost_account"
      ]
    },
    "output": "frappe.get_all('Company', filters={'default_operating_cost_account': 'Cost - ERP'}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Fetch the accumulated depreciation and depreciation cost center for 'MacroTech'.",
      "fields": [
        "company_name",
        "accumulated_depreciation_account",
        "depreciation_cost_center"
      ]
    },
    "output": "frappe.db.get_value('Company', {'company_name': 'MacroTech'}, ['accumulated_depreciation_account', 'depreciation_cost_center'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Check which companies have not set a payment terms template.",
      "fields": [
        "company_name",
        "payment_terms"
      ]
    },
    "output": "frappe.get_all('Company', filters={'payment_terms': ''}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find companies using 'Warehouse - Gulf' for sales return.",
      "fields": [
        "company_name",
        "default_warehouse_for_sales_return"
      ]
    },
    "output": "frappe.get_all('Company', filters={'default_warehouse_for_sales_return': 'Warehouse - Gulf'}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get companies that started operations before 2010.",
      "fields": [
        "company_name",
        "date_of_commencement"
      ]
    },
    "output": "frappe.get_all('Company', filters={'date_of_commencement': ['<', '2010-01-01']}, fields=['company_name', 'date_of_commencement'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "How many warehouses do we manage?",
      "fields": []
    },
    "output": "frappe.db.sql(\"SELECT COUNT(*) FROM `tabWarehouse`\")[0][0]"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "How many purchase orders were created this year?",
      "fields": [
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT COUNT(*) FROM `tabPurchase Order` WHERE YEAR(transaction_date) = YEAR(CURDATE())\")[0][0]"
  },
  {
    "input": {
      "doctype": "Production Plan",
      "question": "How many production plans were created this month?",
      "fields": [
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT COUNT(*) FROM `tabProduction Plan` WHERE MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())\")[0][0]"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "How many customers do we have?",
      "fields": []
    },
    "output": "frappe.db.sql(\"SELECT COUNT(*) FROM `tabCustomer`\")[0][0]"
  },
  {
    "input": {
      "doctype": "Journal Entry",
      "question": "How many journal entries are for bank transactions?",
      "fields": [
        "voucher_type"
      ]
    },
    "output": "frappe.db.sql(\"SELECT COUNT(*) FROM `tabJournal Entry` WHERE voucher_type = 'Bank Entry'\")[0][0]"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "How many stock entries were return entries?",
      "fields": [
        "purpose"
      ]
    },
    "output": "frappe.db.sql(\"SELECT COUNT(*) FROM `tabStock Entry` WHERE purpose IN ('Material Transfer for Return', 'Sales Return', 'Purchase Return')\")[0][0]"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "How many companies have a registered fax number?",
      "fields": [
        "fax"
      ]
    },
    "output": "frappe.db.count('Company', {'fax': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find companies whose description contains the word 'manufacturing'.",
      "fields": [
        "company_name",
        "company_description"
      ]
    },
    "output": "frappe.get_all('Company', filters={'company_description': ['like', '%manufacturing%']}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies whose domain is 'techwave.com'.",
      "fields": [
        "company_name",
        "domain"
      ]
    },
    "output": "frappe.get_all('Company', filters={'domain': 'techwave.com'}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get names and emails of companies registered after 2022.",
      "fields": [
        "company_name",
        "email",
        "date_of_incorporation"
      ]
    },
    "output": "frappe.get_all('Company', filters={'date_of_incorporation': ['>', '2022-01-01']}, fields=['company_name', 'email'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Fetch the default cash account and discount account for 'Nile Ltd'.",
      "fields": [
        "company_name",
        "default_cash_account",
        "default_discount_account"
      ]
    },
    "output": "frappe.db.get_value('Company', {'company_name': 'Nile Ltd'}, ['default_cash_account', 'default_discount_account'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "How many companies use USD as their currency?",
      "fields": [
        "default_currency"
      ]
    },
    "output": "frappe.db.count('Company', {'default_currency': 'USD'})"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies were established in the same year as 'Orion Global'?",
      "fields": [
        "company_name",
        "date_of_establishment"
      ]
    },
    "output": "frappe.get_all('Company', filters={'date_of_establishment': frappe.db.get_value('Company', 'Orion Global', 'date_of_establishment')}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get companies that are children of 'Global Holdings'.",
      "fields": [
        "company_name",
        "parent_company"
      ]
    },
    "output": "frappe.get_all('Company', filters={'parent_company': 'Global Holdings'}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies with a finance book configured.",
      "fields": [
        "company_name",
        "default_finance_book"
      ]
    },
    "output": "frappe.get_all('Company', filters={'default_finance_book': ['!=', '']}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Show companies with a registration_details field left empty.",
      "fields": [
        "company_name",
        "registration_details"
      ]
    },
    "output": "frappe.get_all('Company', filters={'registration_details': ''}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get the unrealized profit/loss account and round off account for 'Core Solutions'.",
      "fields": [
        "company_name",
        "unrealized_profit_loss_account",
        "round_off_account"
      ]
    },
    "output": "frappe.db.get_value('Company', {'company_name': 'Core Solutions'}, ['unrealized_profit_loss_account', 'round_off_account'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Check if 'Eco Ventures' allows account creation against child company.",
      "fields": [
        "company_name",
        "allow_account_creation_against_child_company"
      ]
    },
    "output": "frappe.db.exists('Company', {'company_name': 'Eco Ventures', 'allow_account_creation_against_child_company': 1})"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List all companies based in Qatar.",
      "fields": [
        "company_name",
        "country"
      ]
    },
    "output": "frappe.get_all('Company', filters={'country': 'Qatar'}, fields=['company_name', 'country'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "How many companies are marked as groups?",
      "fields": [
        "is_group"
      ]
    },
    "output": "frappe.db.count('Company', {'is_group': 1})"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get the abbreviation and tax ID for 'Alpha Global'.",
      "fields": [
        "company_name",
        "abbr",
        "tax_id"
      ]
    },
    "output": "frappe.db.get_value('Company', {'company_name': 'Alpha Global'}, ['abbr', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Is there a company called 'Acme Corporation'?",
      "fields": [
        "company_name"
      ]
    },
    "output": "frappe.db.exists('Company', {'company_name': 'Acme Corporation'})"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Fetch the default currency and website of 'BrightWave Ltd'.",
      "fields": [
        "default_currency",
        "website"
      ]
    },
    "output": "frappe.db.get_value('Company', {'company_name': 'BrightWave Ltd'}, ['default_currency', 'website'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies with perpetual inventory enabled.",
      "fields": [
        "company_name",
        "enable_perpetual_inventory"
      ]
    },
    "output": "frappe.get_all('Company', filters={'enable_perpetual_inventory': 1}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get companies established after January 1st, 2015.",
      "fields": [
        "company_name",
        "date_of_establishment"
      ]
    },
    "output": "frappe.get_all('Company', filters={'date_of_establishment': ['>', '2015-01-01']}, fields=['company_name', 'date_of_establishment'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies use 'INR' as their default currency?",
      "fields": [
        "company_name",
        "default_currency"
      ]
    },
    "output": "frappe.get_all('Company', filters={'default_currency': 'INR'}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Show companies with no email address set.",
      "fields": [
        "company_name",
        "email"
      ]
    },
    "output": "frappe.get_all('Company', filters={'email': ''}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find companies with 'acme.com' domain.",
      "fields": [
        "company_name",
        "domain"
      ]
    },
    "output": "frappe.get_all('Company', filters={'domain': ['like', '%acme.com%']}, fields=['company_name', 'domain'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get logo and phone number for 'Zenith Corp'.",
      "fields": [
        "company_name",
        "company_logo",
        "phone_no"
      ]
    },
    "output": "frappe.db.get_value('Company', {'company_name': 'Zenith Corp'}, ['company_logo', 'phone_no'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies have no chart of accounts set?",
      "fields": [
        "company_name",
        "chart_of_accounts"
      ]
    },
    "output": "frappe.get_all('Company', filters={'chart_of_accounts': ''}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "How many companies use 'Sales - ERP' as their default income account?",
      "fields": [
        "default_income_account"
      ]
    },
    "output": "frappe.db.count('Company', {'default_income_account': 'Sales - ERP'})"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Fetch all companies where 'Retail ERP' is set as parent.",
      "fields": [
        "company_name",
        "parent_company"
      ]
    },
    "output": "frappe.get_all('Company', filters={'parent_company': 'Retail ERP'}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies with no discount account configured.",
      "fields": [
        "company_name",
        "default_discount_account"
      ]
    },
    "output": "frappe.get_all('Company', filters={'default_discount_account': ''}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Check if 'VisionTech' has perpetual inventory enabled.",
      "fields": [
        "company_name",
        "enable_perpetual_inventory"
      ]
    },
    "output": "frappe.db.exists('Company', {'company_name': 'VisionTech', 'enable_perpetual_inventory': 1})"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get companies using 'Operations - ERP' as their cost center.",
      "fields": [
        "company_name",
        "cost_center"
      ]
    },
    "output": "frappe.get_all('Company', filters={'cost_center': 'Operations - ERP'}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies have 'QNB' as their default bank account?",
      "fields": [
        "company_name",
        "default_bank_account"
      ]
    },
    "output": "frappe.get_all('Company', filters={'default_bank_account': 'QNB'}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find companies with an exception budget approver role set.",
      "fields": [
        "company_name",
        "exception_budget_approver_role"
      ]
    },
    "output": "frappe.get_all('Company', filters={'exception_budget_approver_role': ['!=', '']}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get all companies with monthly sales target configured.",
      "fields": [
        "company_name",
        "monthly_sales_target"
      ]
    },
    "output": "frappe.get_all('Company', filters={'monthly_sales_target': ['!=', 0]}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get write-off and unrealized profit accounts of 'Trafalgar Group'.",
      "fields": [
        "company_name",
        "write_off_account",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.db.get_value('Company', {'company_name': 'Trafalgar Group'}, ['write_off_account', 'unrealized_profit_loss_account'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Check if 'GulfOil Ltd' has default receivable and payable accounts set.",
      "fields": [
        "company_name",
        "default_receivable_account",
        "default_payable_account"
      ]
    },
    "output": "frappe.db.exists('Company', {'company_name': 'GulfOil Ltd', 'default_receivable_account': ['!=', ''], 'default_payable_account': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "How many companies were incorporated after 2020?",
      "fields": [
        "date_of_incorporation"
      ]
    },
    "output": "frappe.db.count('Company', {'date_of_incorporation': ['>', '2020-01-01']})"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get the finance book and inventory account for 'Crescent Retail'.",
      "fields": [
        "company_name",
        "default_finance_book",
        "default_inventory_account"
      ]
    },
    "output": "frappe.db.get_value('Company', {'company_name': 'Crescent Retail'}, ['default_finance_book', 'default_inventory_account'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which suppliers submitted quotations in multiple currencies this year?",
      "fields": [
        "supplier",
        "currency",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier\nFROM `tabSupplier Quotation`\nWHERE YEAR(transaction_date) = YEAR(CURDATE())\nGROUP BY supplier\nHAVING COUNT(DISTINCT currency) > 1\n''')"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "Which items had the highest total production quantity last year?",
      "fields": [
        "production_item",
        "produced_qty",
        "actual_end_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT production_item, SUM(produced_qty) AS total_produced\nFROM `tabWork Order`\nWHERE YEAR(actual_end_date) = YEAR(CURDATE()) - 1\nGROUP BY production_item\nORDER BY total_produced DESC\n''')"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "Which production item has the highest total planned operating cost for pending work orders?",
      "fields": [
        "production_item",
        "planned_operating_cost",
        "status"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT production_item, SUM(planned_operating_cost) AS total_cost\nFROM `tabWork Order`\nWHERE status = 'Pending'\nGROUP BY production_item\nORDER BY total_cost DESC\nLIMIT 1\n\"\"\")"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "Show a trend of completed work orders by month for the last 12 months.",
      "fields": [
        "actual_end_date",
        "status"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT DATE_FORMAT(actual_end_date, '%Y-%m') AS month, COUNT(*) AS total_completed\nFROM `tabWork Order`\nWHERE status = 'Completed'\nAND actual_end_date >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH)\nGROUP BY month\nORDER BY month ASC\n\"\"\")"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "List all work orders with a planned start date in the next 7 days, including their required items.",
      "fields": [
        "name",
        "planned_start_date",
        "required_items"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT name, planned_start_date\nFROM `tabWork Order`\nWHERE planned_start_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY)\n\"\"\")"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "Which work orders are using multi-level BOMs and what is their average completion time?",
      "fields": [
        "use_multi_level_bom",
        "planned_start_date",
        "actual_end_date",
        "status"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT AVG(DATEDIFF(actual_end_date, planned_start_date)) AS avg_completion_days\nFROM `tabWork Order`\nWHERE use_multi_level_bom = 1 AND status = 'Completed'\nAND actual_end_date IS NOT NULL AND planned_start_date IS NOT NULL\n\"\"\")"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "How many work orders are still in draft status and older than 30 days?",
      "fields": [
        "status",
        "creation"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT COUNT(*) AS draft_aged\nFROM `tabWork Order`\nWHERE status = 'Draft' AND creation < DATE_SUB(CURDATE(), INTERVAL 30 DAY)\n\"\"\")"
  },
  {
    "input": {
      "doctype": "BOM",
      "question": "List all active BOMs for a specific item, sorted by creation date.",
      "fields": [
        "item",
        "is_active",
        "creation"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT name, item, creation\nFROM `tabBOM`\nWHERE is_active = 1\nORDER BY creation DESC\n\"\"\")"
  },
  {
    "input": {
      "doctype": "BOM",
      "question": "Which BOM has the highest total cost?",
      "fields": [
        "name",
        "total_cost"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT name, total_cost\nFROM `tabBOM`\nORDER BY total_cost DESC\nLIMIT 1\n\"\"\")"
  },
  {
    "input": {
      "doctype": "BOM",
      "question": "How many BOMs are set as default for each item?",
      "fields": [
        "item",
        "is_default"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT item, COUNT(*) AS default_bom_count\nFROM `tabBOM`\nWHERE is_default = 1\nGROUP BY item\n\"\"\")"
  },
  {
    "input": {
      "doctype": "BOM",
      "question": "Which BOMs include alternative items and what are those items?",
      "fields": [
        "name",
        "allow_alternative_item"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT name\nFROM `tabBOM`\nWHERE allow_alternative_item = 1\n\"\"\")"
  },
  {
    "input": {
      "doctype": "BOM",
      "question": "What is the average raw material cost per BOM for the last quarter?",
      "fields": [
        "raw_material_cost",
        "creation"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT AVG(raw_material_cost) AS avg_cost\nFROM `tabBOM`\nWHERE creation BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE()\n\"\"\")"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "List all work orders where the actual operating cost exceeded the planned operating cost.",
      "fields": [
        "name",
        "planned_operating_cost",
        "actual_operating_cost"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT name, planned_operating_cost, actual_operating_cost\nFROM `tabWork Order`\nWHERE actual_operating_cost > planned_operating_cost\n\"\"\")"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "What is the total quantity of items produced from work orders linked to a specific sales order?",
      "fields": [
        "sales_order",
        "produced_qty"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT sales_order, SUM(produced_qty) AS total_produced\nFROM `tabWork Order`\nWHERE sales_order IS NOT NULL\nGROUP BY sales_order\n\"\"\")"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "Which warehouse is most frequently used as the source for work orders in the last 6 months?",
      "fields": [
        "source_warehouse",
        "creation"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT source_warehouse, COUNT(*) AS usage_count\nFROM `tabWork Order`\nWHERE creation >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\nGROUP BY source_warehouse\nORDER BY usage_count DESC\nLIMIT 1\n\"\"\")"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "What is the total process loss quantity across all completed work orders for a given item?",
      "fields": [
        "production_item",
        "process_loss_qty",
        "status"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT production_item, SUM(process_loss_qty) AS total_loss\nFROM `tabWork Order`\nWHERE status = 'Completed'\nGROUP BY production_item\n\"\"\")"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "How many work orders were delayed (actual end date later than planned end date) in the last year?",
      "fields": [
        "name",
        "actual_end_date",
        "planned_end_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT COUNT(*) AS delayed_orders\nFROM `tabWork Order`\nWHERE actual_end_date > planned_end_date\nAND actual_end_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\n\"\"\")"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "Which work order took the longest to complete last quarter?",
      "fields": [
        "name",
        "actual_start_date",
        "actual_end_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT name, DATEDIFF(actual_end_date, actual_start_date) AS duration\nFROM `tabWork Order`\nWHERE actual_start_date BETWEEN '2025-01-01' AND '2025-03-31'\nAND actual_end_date IS NOT NULL\nORDER BY duration DESC\nLIMIT 1\n\"\"\")"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "How many work orders are currently in progress for each production item?",
      "fields": [
        "production_item",
        "status"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT production_item, COUNT(*) AS count\nFROM `tabWork Order`\nWHERE status = 'In Progress'\nGROUP BY production_item\n\"\"\")"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "What is the average lead time for work orders completed last month, grouped by production item?",
      "fields": [
        "production_item",
        "lead_time",
        "actual_end_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT production_item, AVG(lead_time) AS avg_lead_time\nFROM `tabWork Order`\nWHERE actual_end_date BETWEEN '2025-05-01' AND '2025-05-31'\nGROUP BY production_item\n\"\"\")"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "Which project has the highest number of open work orders right now?",
      "fields": [
        "project",
        "status"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT project, COUNT(*) AS count\nFROM `tabWork Order`\nWHERE status = 'Not Started'\nGROUP BY project\nORDER BY count DESC\nLIMIT 1\n\"\"\")"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "How much material has been transferred for manufacturing but not yet produced, by work order?",
      "fields": [
        "name",
        "material_transferred_for_manufacturing",
        "produced_qty"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT name, (material_transferred_for_manufacturing - produced_qty) AS pending_material\nFROM `tabWork Order`\nWHERE docstatus < 2 AND material_transferred_for_manufacturing > produced_qty\n\"\"\")"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "List all work orders that had more material transferred than planned quantity.",
      "fields": [
        "name",
        "qty",
        "material_transferred_for_manufacturing"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT name, qty, material_transferred_for_manufacturing\nFROM `tabWork Order`\nWHERE material_transferred_for_manufacturing > qty\n''')"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "Which work orders had a corrective operation cost above 10,000?",
      "fields": [
        "name",
        "corrective_operation_cost"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT name, corrective_operation_cost\nFROM `tabWork Order`\nWHERE corrective_operation_cost > 10000\n''')"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "Find average actual operating cost per company this quarter.",
      "fields": [
        "company",
        "actual_operating_cost",
        "actual_end_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT company, AVG(actual_operating_cost) AS avg_cost\nFROM `tabWork Order`\nWHERE QUARTER(actual_end_date) = QUARTER(CURDATE())\nAND YEAR(actual_end_date) = YEAR(CURDATE())\nGROUP BY company\n''')"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "Which projects have more than 5 active work orders?",
      "fields": [
        "project",
        "status"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT project, COUNT(name) AS active_orders\nFROM `tabWork Order`\nWHERE status = 'In Process'\nGROUP BY project\nHAVING active_orders > 5\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "List suppliers who submitted more than 3 quotations in the last quarter.",
      "fields": [
        "supplier",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, COUNT(name) AS quotation_count\nFROM `tabSupplier Quotation`\nWHERE QUARTER(transaction_date) = QUARTER(CURDATE()) - 1\nAND YEAR(transaction_date) = YEAR(CURDATE())\nGROUP BY supplier\nHAVING quotation_count > 3\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which quotations have a total amount higher than the average for their currency?",
      "fields": [
        "name",
        "grand_total",
        "currency"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT name, currency, grand_total\nFROM `tabSupplier Quotation` sq1\nWHERE grand_total > (\n  SELECT AVG(grand_total)\n  FROM `tabSupplier Quotation` sq2\n  WHERE sq1.currency = sq2.currency\n)\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Find quotations with incoterm 'FOB' and total taxes above 5000.",
      "fields": [
        "name",
        "incoterm",
        "total_taxes_and_charges"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT name, total_taxes_and_charges\nFROM `tabSupplier Quotation`\nWHERE incoterm = 'FOB' AND total_taxes_and_charges > 5000\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "List companies with the highest number of supplier quotations.",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT company, COUNT(name) AS quotation_count\nFROM `tabSupplier Quotation`\nGROUP BY company\nORDER BY quotation_count DESC\nLIMIT 5\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which suppliers submitted quotations with discounts over 10%?",
      "fields": [
        "supplier",
        "additional_discount_percentage",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, additional_discount_percentage, grand_total\nFROM `tabSupplier Quotation`\nWHERE additional_discount_percentage > 10\nORDER BY additional_discount_percentage DESC\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "List the top 5 suppliers by total quotation value this year.",
      "fields": [
        "supplier",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, SUM(grand_total) AS total_value\nFROM `tabSupplier Quotation`\nWHERE YEAR(transaction_date) = YEAR(CURDATE())\nGROUP BY supplier\nORDER BY total_value DESC\nLIMIT 5\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "How many quotations are still in 'Draft' status from each supplier?",
      "fields": [
        "supplier",
        "status"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, COUNT(name) AS draft_count\nFROM `tabSupplier Quotation`\nWHERE status = 'Draft'\nGROUP BY supplier\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which projects received quotations from more than one supplier?",
      "fields": [
        "project",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT project\nFROM `tabSupplier Quotation`\nWHERE project IS NOT NULL\nGROUP BY project\nHAVING COUNT(DISTINCT supplier) > 1\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Find suppliers whose average quotation amount exceeds 75,000.",
      "fields": [
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, AVG(grand_total) AS avg_quotation\nFROM `tabSupplier Quotation`\nGROUP BY supplier\nHAVING avg_quotation > 75000\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which suppliers submitted quotations exceeding 50,000 in the last quarter?",
      "fields": [
        "supplier",
        "transaction_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, grand_total, transaction_date\nFROM `tabSupplier Quotation`\nWHERE grand_total > 50000 AND transaction_date BETWEEN '2025-01-01' AND '2025-03-31'\nORDER BY grand_total DESC\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Find the average total amount of quotations submitted by each supplier in 2025.",
      "fields": [
        "supplier",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, AVG(grand_total) AS avg_total\nFROM `tabSupplier Quotation`\nWHERE YEAR(transaction_date) = 2025\nGROUP BY supplier\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which supplier submitted the highest number of quotations in 2024?",
      "fields": [
        "supplier",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, COUNT(name) AS count\nFROM `tabSupplier Quotation`\nWHERE YEAR(transaction_date) = 2024\nGROUP BY supplier\nORDER BY count DESC\nLIMIT 1\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "List suppliers who submitted quotations for more than 3 different projects.",
      "fields": [
        "supplier",
        "project"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, COUNT(DISTINCT project) AS project_count\nFROM `tabSupplier Quotation`\nWHERE project IS NOT NULL\nGROUP BY supplier\nHAVING project_count > 3\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Get total quotation value per company for March 2025.",
      "fields": [
        "company",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT company, SUM(grand_total) AS total_value\nFROM `tabSupplier Quotation`\nWHERE transaction_date BETWEEN '2025-03-01' AND '2025-03-31'\nGROUP BY company\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which suppliers gave quotations with the highest discount amounts in the last 6 months?",
      "fields": [
        "supplier",
        "discount_amount",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, discount_amount\nFROM `tabSupplier Quotation`\nWHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\nORDER BY discount_amount DESC\nLIMIT 5\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which incoterms were used most frequently across all quotations?",
      "fields": [
        "incoterm"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT incoterm, COUNT(*) AS usage_count\nFROM `tabSupplier Quotation`\nWHERE incoterm IS NOT NULL AND incoterm != ''\nGROUP BY incoterm\nORDER BY usage_count DESC\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which suppliers submitted quotations with a base grand total exceeding 1 million QAR?",
      "fields": [
        "supplier",
        "base_grand_total"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, base_grand_total\nFROM `tabSupplier Quotation`\nWHERE base_grand_total > 1000000\nORDER BY base_grand_total DESC\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which suppliers applied more than one pricing rule in their quotations?",
      "fields": [
        "supplier",
        "pricing_rules"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, COUNT(*) AS rule_usage_count\nFROM `tabSupplier Quotation`\nWHERE pricing_rules IS NOT NULL AND pricing_rules != ''\nGROUP BY supplier\nHAVING rule_usage_count > 1\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "What is the average rounding adjustment made on quotations this year?",
      "fields": [
        "rounding_adjustment",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT AVG(rounding_adjustment) AS avg_rounding\nFROM `tabSupplier Quotation`\nWHERE transaction_date >= DATE_FORMAT(CURDATE(), '%Y-01-01')\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which suppliers quoted for multiple cost centers in the past year?",
      "fields": [
        "supplier",
        "cost_center",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, COUNT(DISTINCT cost_center) AS unique_cost_centers\nFROM `tabSupplier Quotation`\nWHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\nGROUP BY supplier\nHAVING unique_cost_centers > 1\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which quotations were submitted with a price list currency different from the company's default?",
      "fields": [
        "name",
        "price_list_currency",
        "company"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT sq.name, sq.price_list_currency\nFROM `tabSupplier Quotation` sq\nJOIN `tabCompany` c ON sq.company = c.name\nWHERE sq.price_list_currency != c.default_currency\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which projects received supplier quotations with base tax deductions greater than 10,000?",
      "fields": [
        "project",
        "base_taxes_and_charges_deducted"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT project, base_taxes_and_charges_deducted\nFROM `tabSupplier Quotation`\nWHERE base_taxes_and_charges_deducted > 10000\nORDER BY base_taxes_and_charges_deducted DESC\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "What is the monthly count of quotations submitted per company this year?",
      "fields": [
        "company",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT company, DATE_FORMAT(transaction_date, '%Y-%m') AS month, COUNT(*) AS quotation_count\nFROM `tabSupplier Quotation`\nWHERE transaction_date >= DATE_FORMAT(CURDATE(), '%Y-01-01')\nGROUP BY company, month\nORDER BY company, month\n''')"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which suppliers submitted quotations with the same value for net total and grand total more than 5 times?",
      "fields": [
        "supplier",
        "net_total",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT supplier, COUNT(*) AS match_count\nFROM `tabSupplier Quotation`\nWHERE net_total = grand_total\nGROUP BY supplier\nHAVING match_count > 5\n''')"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies have auto accounting for stock enabled?",
      "fields": [
        "company_name",
        "auto_accounting_for_stock_settings"
      ]
    },
    "output": "frappe.get_all('Company', filters={'auto_accounting_for_stock_settings': 1}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Fetch all companies registered in the United Arab Emirates.",
      "fields": [
        "company_name",
        "country"
      ]
    },
    "output": "frappe.get_all('Company', filters={'country': 'United Arab Emirates'}, fields=['company_name', 'country'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get the abbreviation and tax ID of the company named 'FinServe Ltd'.",
      "fields": [
        "abbr",
        "tax_id"
      ]
    },
    "output": "frappe.db.get_value('Company', {'company_name': 'FinServe Ltd'}, ['abbr', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Is there a company named 'GulfTech Holdings'?",
      "fields": [
        "company_name"
      ]
    },
    "output": "frappe.db.exists('Company', {'company_name': 'GulfTech Holdings'})"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "How many companies have a default currency set to 'QAR'?",
      "fields": [
        "default_currency"
      ]
    },
    "output": "frappe.db.count('Company', {'default_currency': 'QAR'})"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get company logo and website for 'Skyline Inc'.",
      "fields": [
        "company_logo",
        "website"
      ]
    },
    "output": "frappe.get_doc('Company', {'company_name': 'Skyline Inc'})"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies with perpetual inventory enabled.",
      "fields": [
        "company_name",
        "enable_perpetual_inventory"
      ]
    },
    "output": "frappe.get_all('Company', filters={'enable_perpetual_inventory': 1}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get the company details where abbreviation is 'HTS'.",
      "fields": [
        "company_name",
        "abbr"
      ]
    },
    "output": "frappe.get_doc('Company', {'abbr': 'HTS'})"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies are marked as a group?",
      "fields": [
        "company_name",
        "is_group"
      ]
    },
    "output": "frappe.get_all('Company', filters={'is_group': 1}, fields=['company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Show all companies with no email address set.",
      "fields": [
        "email",
        "name"
      ]
    },
    "output": "frappe.get_all('Company', filters={'email': ['=', '']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find companies with a phone number starting with +974.",
      "fields": [
        "phone_no"
      ]
    },
    "output": "frappe.get_all('Company', filters={'phone_no': ['like', '+974%']}, fields=['phone_no'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies where the domain is set as 'Retail'.",
      "fields": [
        "company_name",
        "domain"
      ]
    },
    "output": "frappe.get_all('Company', filters={'domain': 'Retail'}, fields=['company_name', 'domain'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get all companies established after 2010.",
      "fields": [
        "company_name",
        "date_of_establishment"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'date_of_establishment': ['>', '2010-01-01'] }, fields=['company_name', 'date_of_establishment'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find companies using 'Bank of Qatar' as their default bank account.",
      "fields": [
        "default_bank_account",
        "name"
      ]
    },
    "output": "frappe.get_all('Company', filters={'default_bank_account': 'Bank of Qatar'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Show companies that have parent company set as 'ERPGulf Global'.",
      "fields": [
        "parent_company",
        "name"
      ]
    },
    "output": "frappe.get_all('Company', filters={'parent_company': 'ERPGulf Global'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get the write-off and unrealized profit loss accounts of 'Alpha Corp'.",
      "fields": [
        "write_off_account",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.db.get_value('Company', {'company_name': 'Alpha Corp'}, ['write_off_account', 'unrealized_profit_loss_account'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies where chart of accounts is set but no finance book is configured.",
      "fields": [
        "chart_of_accounts",
        "default_finance_book",
        "name"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'chart_of_accounts': ['!=', ''], 'default_finance_book': ['=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "What is the status of delivery note DN-00045?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.get_value('Delivery Note', 'DN-00045', 'status')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Who is the customer on delivery note DN-00123?",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.db.get_value('Delivery Note', 'DN-00123', 'customer')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "When was DN-00210 submitted?",
      "fields": [
        "posting_date",
        "posting_time"
      ]
    },
    "output": "frappe.db.get_value('Delivery Note', 'DN-00210', ['posting_date', 'posting_time'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "What warehouse was used in delivery note DN-00501?",
      "fields": [
        "set_warehouse"
      ]
    },
    "output": "frappe.db.get_value('Delivery Note', 'DN-00501', 'set_warehouse')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "How many items are listed in DN-00444?",
      "fields": [
        "items"
      ]
    },
    "output": "len(frappe.get_doc('Delivery Note', 'DN-00444').items)"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "What is the contact number for the recipient of DN-00301?",
      "fields": [
        "contact_mobile"
      ]
    },
    "output": "frappe.db.get_value('Delivery Note', 'DN-00301', 'contact_mobile')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Was DN-00122 submitted or just saved?",
      "fields": [
        "docstatus"
      ]
    },
    "output": "frappe.db.get_value('Delivery Note', 'DN-00122', 'docstatus')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Show me all delivery notes from this week.",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={ 'posting_date': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -7)] }, fields=['name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "List all deliveries made in May 2025.",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={ 'posting_date': ['between', ['2025-05-01', '2025-05-31']] }, fields=['name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Retrieve delivery notes made to Techno Gulf.",
      "fields": [
        "name",
        "customer"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={ 'customer': 'Techno Gulf' }, fields=['name', 'customer'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "What warehouse was used in delivery note DN-00501?",
      "fields": [
        "set_warehouse"
      ]
    },
    "output": "frappe.db.get_value('Delivery Note', 'DN-00501', 'set_warehouse')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "How many items are listed in DN-00444?",
      "fields": [
        "items"
      ]
    },
    "output": "len(frappe.get_doc('Delivery Note', 'DN-00444').items)"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "What is the contact number for the recipient of DN-00301?",
      "fields": [
        "contact_mobile"
      ]
    },
    "output": "frappe.db.get_value('Delivery Note', 'DN-00301', 'contact_mobile')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Was DN-00122 submitted or just saved?",
      "fields": [
        "docstatus"
      ]
    },
    "output": "frappe.db.get_value('Delivery Note', 'DN-00122', 'docstatus')  // 0 = Draft, 1 = Submitted"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Retrieve delivery notes made to Techno Gulf.",
      "fields": [
        "name",
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={ 'customer': 'Techno Gulf' }, fields=['name', 'customer', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Show all delivery notes with status 'To Bill'.",
      "fields": [
        "name",
        "status",
        "posting_date"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={'status': 'To Bill'}, fields=['name', 'status', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Show me all purchase orders that used 'Air Freight' as the shipping rule.",
      "fields": [
        "shipping_rule"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'shipping_rule': 'Air Freight'}, fields=['name', 'supplier', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "List all purchase orders placed in the last 15 days from 'Delta Traders'.",
      "fields": [
        "supplier",
        "transaction_date"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'supplier': 'Delta Traders', 'transaction_date': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -15)]}, fields=['name', 'transaction_date', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Show all purchase orders that haven't been fully received yet.",
      "fields": [
        "per_received",
        "status"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'per_received': ['<', 100], 'status': ['!=', 'Closed']}, fields=['name', 'per_received', 'status'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "How many orders were placed in EUR currency last quarter?",
      "fields": [
        "currency",
        "transaction_date"
      ]
    },
    "output": "frappe.db.count('Purchase Order', {'currency': 'EUR', 'transaction_date': ['between', [frappe.utils.get_quarter_start(frappe.utils.nowdate(), -1), frappe.utils.get_quarter_end(frappe.utils.nowdate(), -1)]]})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Did we place any orders last month for subcontracted work?",
      "fields": [
        "is_subcontracted",
        "transaction_date"
      ]
    },
    "output": "frappe.db.exists('Purchase Order', {'is_subcontracted': 1, 'transaction_date': ['between', [frappe.utils.add_months(frappe.utils.nowdate(), -1), frappe.utils.nowdate()]]})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Get the grand total and taxes for PO-00045.",
      "fields": [
        "grand_total",
        "total_taxes_and_charges"
      ]
    },
    "output": "frappe.get_value('Purchase Order', {'name': 'PO-00045'}, ['grand_total', 'total_taxes_and_charges'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Compare the average base total of orders placed in Q1 and Q2 of this year.",
      "fields": [
        "base_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT AVG(base_total) AS avg_total, QUARTER(transaction_date) AS quarter FROM `tabPurchase Order` WHERE YEAR(transaction_date) = YEAR(CURDATE()) AND QUARTER(transaction_date) IN (1, 2) GROUP BY QUARTER(transaction_date)\")"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Which suppliers gave us the highest discounts in the past year?",
      "fields": [
        "supplier",
        "additional_discount_percentage",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT supplier, MAX(additional_discount_percentage) AS max_discount FROM `tabPurchase Order` WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY supplier ORDER BY max_discount DESC\")"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Find purchase orders with more than 10% discount and over $10,000 grand total.",
      "fields": [
        "additional_discount_percentage",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'additional_discount_percentage': ['>', 10], 'grand_total': ['>', 10000]}, fields=['name', 'supplier', 'grand_total', 'additional_discount_percentage'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Hey, can you show me all purchase orders for 'ACME Supplies' scheduled to arrive next week?",
      "fields": [
        "supplier",
        "schedule_date"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'supplier': 'ACME Supplies', 'schedule_date': ['between', [frappe.utils.add_days(frappe.utils.nowdate(), 1), frappe.utils.add_days(frappe.utils.nowdate(), 7)]]}, fields=['name', 'schedule_date'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "List all orders created by 'accounts@mycompany.com' that used a custom price list.",
      "fields": [
        "owner",
        "buying_price_list"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name FROM `tabPurchase Order` WHERE owner = 'accounts@mycompany.com' AND buying_price_list IS NOT NULL\")"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "List orders placed for the 'Green Tower Project' tagged under cost center 'CT-003'.",
      "fields": [
        "project",
        "cost_center"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'project': 'Green Tower Project', 'cost_center': 'CT-003'}, fields=['name', 'project', 'cost_center'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Did we place any purchase orders between July 1st and September 30th?",
      "fields": [
        "transaction_date"
      ]
    },
    "output": "frappe.db.exists('Purchase Order', {'transaction_date': ['between', ['2024-07-01', '2024-09-30']]})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Get the taxes and charges applied in PO-00877 and the incoterm used.",
      "fields": [
        "taxes_and_charges",
        "incoterm"
      ]
    },
    "output": "frappe.get_value('Purchase Order', {'name': 'PO-00877'}, ['taxes_and_charges', 'incoterm'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Which purchase orders reference supplier quotation SQ-2031?",
      "fields": [
        "ref_sq"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'ref_sq': 'SQ-2031'}, fields=['name', 'supplier', 'ref_sq'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "How many orders were raised using the 'Standard Buying' template and are marked as subcontracted?",
      "fields": [
        "payment_terms_template",
        "is_subcontracted"
      ]
    },
    "output": "frappe.db.count('Purchase Order', {'payment_terms_template': 'Standard Buying', 'is_subcontracted': 1})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Compare the number of orders created in English vs Arabic language.",
      "fields": [
        "language"
      ]
    },
    "output": "frappe.db.sql('SELECT language, COUNT(*) AS total FROM `tabPurchase Order` WHERE language IN ('English', 'Arabic') GROUP BY language')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Find all POs where base total taxes added exceeded ₹20,000 and company was 'ABC Pvt Ltd'.",
      "fields": [
        "base_taxes_and_charges_added",
        "company"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'base_taxes_and_charges_added': ['>', 20000], 'company': 'ABC Pvt Ltd'}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Can you list all orders that had more than 2 payment schedule entries?",
      "fields": [
        "payment_schedule"
      ]
    },
    "output": "frappe.db.sql('SELECT parent FROM `tabPayment Schedule` GROUP BY parent HAVING COUNT(*) > 2')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "How many purchase orders have discounts above 1000 and are billed partially?",
      "fields": [
        "discount_amount",
        "per_billed"
      ]
    },
    "output": "frappe.db.count('Purchase Order', {'discount_amount': ['>', 1000], 'per_billed': ['>', 0], 'per_billed': ['<', 100]})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Show me orders with rounding adjustment greater than 50 in USD.",
      "fields": [
        "rounding_adjustment",
        "currency"
      ]
    },
    "output": "frappe.db.sql('SELECT name, rounding_adjustment FROM `tabPurchase Order` WHERE rounding_adjustment > 50 AND currency = 'USD'')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Give me subcontracted purchase orders placed in the last 6 months.",
      "fields": [
        "is_subcontracted",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM `tabPurchase Order` WHERE is_subcontracted = 1 AND transaction_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Do we have any purchase orders with missing billing address but filled shipping address?",
      "fields": [
        "billing_address",
        "shipping_address"
      ]
    },
    "output": "frappe.db.exists('Purchase Order', {'billing_address': null, 'shipping_address': ['!=', null]})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Get the incoterm and named place for PO-00045.",
      "fields": [
        "incoterm",
        "named_place"
      ]
    },
    "output": "frappe.get_value('Purchase Order', {'name': 'PO-00045'}, ['incoterm', 'named_place'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "List all orders with tax deduction and tax category 'TDS 194H'.",
      "fields": [
        "apply_tds",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'apply_tds': 1, 'tax_withholding_category': 'TDS 194H'}, fields=['name', 'supplier'] )"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Which suppliers have multiple open purchase orders over 50000?",
      "fields": [
        "supplier",
        "status",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT supplier, COUNT(*) as po_count FROM `tabPurchase Order` WHERE status = 'To Receive and Bill' AND grand_total > 50000 GROUP BY supplier HAVING COUNT(*) > 1')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Give me contact email and number for PO-3321.",
      "fields": [
        "contact_email",
        "contact_mobile"
      ]
    },
    "output": "frappe.get_value('Purchase Order', {'name': 'PO-3321'}, ['contact_email', 'contact_mobile'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Which purchase orders used pricing rules and are still open?",
      "fields": [
        "pricing_rules",
        "status"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'status': 'To Receive and Bill'}, fields=['name'], filters_or_conditions=[['pricing_rules', '!=', null]])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Get the total tax amount and grand total for PO-10234.",
      "fields": [
        "total_taxes_and_charges",
        "grand_total"
      ]
    },
    "output": "frappe.get_value('Purchase Order', {'name': 'PO-10234'}, ['total_taxes_and_charges', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "How many orders were placed for Customer 'ABC Retail' and are billed more than 80%?",
      "fields": [
        "customer",
        "per_billed"
      ]
    },
    "output": "frappe.db.count('Purchase Order', {'customer': 'ABC Retail', 'per_billed': ['>', 80]})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "List orders where total net weight is above 1000 kg and tax category is 'Import GST'.",
      "fields": [
        "total_net_weight",
        "tax_category"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'total_net_weight': ['>', 1000], 'tax_category': 'Import GST'}, fields=['name', 'supplier'] )"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Do we have any orders where the supplier name is empty but contact person exists?",
      "fields": [
        "supplier_name",
        "contact_person"
      ]
    },
    "output": "frappe.db.exists('Purchase Order', {'supplier_name': null, 'contact_person': ['!=', null]})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Fetch all POs where tax withheld amount exceeded 5000 and base grand total is over 1 lakh.",
      "fields": [
        "tax_withholding_net_total",
        "base_grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM `tabPurchase Order` WHERE tax_withholding_net_total > 5000 AND base_grand_total > 100000')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "List POs that used shipping rule 'Freight50' and schedule date is next month.",
      "fields": [
        "shipping_rule",
        "schedule_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM `tabPurchase Order` WHERE shipping_rule = 'Freight50' AND MONTH(schedule_date) = MONTH(CURDATE()) + 1 AND YEAR(schedule_date) = YEAR(CURDATE())')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Find all purchase orders where the items table includes more than 5 items.",
      "fields": [
        "items"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM `tabPurchase Order` WHERE (SELECT COUNT(*) FROM `tabPurchase Order Item` WHERE parent = `tabPurchase Order`.name) > 5')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Get billing and shipping address for PO-55678.",
      "fields": [
        "billing_address",
        "shipping_address"
      ]
    },
    "output": "frappe.get_value('Purchase Order', {'name': 'PO-55678'}, ['billing_address', 'shipping_address'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Which POs use customer contact mobile but don't have email listed?",
      "fields": [
        "customer_contact_mobile",
        "customer_contact_email"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM `tabPurchase Order` WHERE customer_contact_mobile IS NOT NULL AND customer_contact_email IS NULL')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "List all orders where advance paid exceeds 25% of grand total.",
      "fields": [
        "advance_paid",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM `tabPurchase Order` WHERE advance_paid / grand_total > 0.25')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Which POs are overdue based on schedule date but not yet fully received?",
      "fields": [
        "schedule_date",
        "per_received"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM `tabPurchase Order` WHERE schedule_date < CURDATE() AND per_received < 100')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Show POs created this quarter with zero discount and positive tax value.",
      "fields": [
        "discount_amount",
        "base_total_taxes_and_charges",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM `tabPurchase Order` WHERE discount_amount = 0 AND base_total_taxes_and_charges > 0 AND QUARTER(transaction_date) = QUARTER(CURDATE()) AND YEAR(transaction_date) = YEAR(CURDATE())')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How many suppliers are there in total?",
      "fields": [
        ""
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabSupplier`\"\"\")"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How many suppliers were added this year?",
      "fields": [
        "creation (Datetime)"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabSupplier` WHERE YEAR(creation) = YEAR(CURDATE())\"\"\")"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers from India.",
      "fields": [
        "country (Link)"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT name FROM `tabSupplier` WHERE country = 'India'\"\"\")"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How many suppliers belong to the 'Raw Material' group?",
      "fields": [
        "supplier_group (Link)"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabSupplier` WHERE supplier_group = 'Raw Material'\"\"\")"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which country has the most suppliers?",
      "fields": [
        "country (Link)"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT country, COUNT(*) as total FROM `tabSupplier` GROUP BY country ORDER BY total DESC LIMIT 1\"\"\")"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How many suppliers were added last quarter?",
      "fields": [
        "creation (Datetime)"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabSupplier` WHERE QUARTER(creation) = QUARTER(CURDATE() - INTERVAL 1 QUARTER) AND YEAR(creation) = YEAR(CURDATE())\"\"\")"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List internal suppliers only.",
      "fields": [
        "is_internal_supplier (Check)"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT name FROM `tabSupplier` WHERE is_internal_supplier = 1\"\"\")"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How many suppliers are from 'Germany' and use 'EUR' as currency?",
      "fields": [
        "country (Link)",
        "default_currency (Link)"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabSupplier` WHERE country = 'Germany' AND default_currency = 'EUR'\"\"\")"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which supplier was added most recently?",
      "fields": [
        "supplier_name (Data)",
        "creation (Datetime)"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT supplier_name FROM `tabSupplier` ORDER BY creation DESC LIMIT 1\"\"\")"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How many 'Local' suppliers were added this month?",
      "fields": [
        "supplier_type (Select)",
        "creation (Datetime)"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabSupplier` WHERE supplier_type = 'Local' AND MONTH(creation) = MONTH(CURDATE()) AND YEAR(creation) = YEAR(CURDATE())\"\"\")"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "How many purchase orders mention 'urgent' in their terms section?",
      "fields": [
        "terms"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM `tabPurchase Order` WHERE terms LIKE '%urgent%'')[0][0]"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Which suppliers had orders with mobile contact ending in 7890?",
      "fields": [
        "contact_mobile"
      ]
    },
    "output": "frappe.db.sql('SELECT DISTINCT supplier FROM `tabPurchase Order` WHERE contact_mobile LIKE '%7890'')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "List all customers and the related shipping addresses from the last 60 days.",
      "fields": [
        "customer",
        "shipping_address",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, customer, shipping_address FROM `tabPurchase Order` WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 60 DAY)')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Find POs where supplier and customer are both from the same company 'Star Textiles Ltd'.",
      "fields": [
        "supplier",
        "customer"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM `tabPurchase Order` WHERE supplier = 'Star Textiles Ltd' AND customer = 'Star Textiles Ltd'')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Give me the total number of purchase orders with empty contact email.",
      "fields": [
        "contact_email"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM `tabPurchase Order` WHERE IFNULL(contact_email, '') = ''')[0][0]"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Which POs are using the 'Standard Conditions' template for their terms and conditions?",
      "fields": [
        "tc_name"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'tc_name': 'Standard Conditions'}, fields=['name', 'supplier', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Show me all purchase orders where both billing and shipping address belong to 'Zone 4 Logistics Area'.",
      "fields": [
        "billing_address",
        "shipping_address"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM `tabPurchase Order` WHERE billing_address = 'Zone 4 Logistics Area' AND shipping_address = 'Zone 4 Logistics Area'')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Get the grand total and currency for PO-2031.",
      "fields": [
        "grand_total",
        "currency"
      ]
    },
    "output": "frappe.get_value('Purchase Order', {'name': 'PO-2031'}, ['grand_total', 'currency'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Which purchase orders were made using USD and had a total above 50,000?",
      "fields": [
        "currency",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'currency': 'USD', 'grand_total': ['>', 50000]}, fields=['name', 'supplier'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Do we have any orders where discount exceeded 1000 in total?",
      "fields": [
        "discount_amount"
      ]
    },
    "output": "frappe.db.exists('Purchase Order', {'discount_amount': ['>', 1000]})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "How many purchase orders applied a rounding adjustment over 500?",
      "fields": [
        "rounding_adjustment"
      ]
    },
    "output": "frappe.db.count('Purchase Order', {'rounding_adjustment': ['>', 500]})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "List orders where base net total and net total are not equal (currency mismatch check).",
      "fields": [
        "base_net_total",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM `tabPurchase Order` WHERE base_net_total != net_total')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Find purchase orders where the conversion rate was manually adjusted to less than 0.5.",
      "fields": [
        "conversion_rate"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'conversion_rate': ['<', 0.5]}, fields=['name', 'conversion_rate', 'currency'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Give me a list of all currency types used in the last 90 days of purchase orders.",
      "fields": [
        "currency",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT DISTINCT currency FROM `tabPurchase Order` WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 90 DAY)')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Which POs had both additional discount percentage over 10% and base discount amount over 5000?",
      "fields": [
        "additional_discount_percentage",
        "base_discount_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'additional_discount_percentage': ['>', 10], 'base_discount_amount': ['>', 5000]}, fields=['name', 'supplier'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "List all purchase orders where the base rounded total and grand total are not matching.",
      "fields": [
        "base_rounded_total",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM `tabPurchase Order` WHERE base_rounded_total != grand_total')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "How many purchase orders are linked to a project and still pending?",
      "fields": [
        "project",
        "status"
      ]
    },
    "output": "frappe.db.count('Purchase Order', {'project': ['!=', null], 'status': 'To Receive and Bill'})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "List all purchase orders scheduled in the next 15 days.",
      "fields": [
        "schedule_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, schedule_date FROM `tabPurchase Order` WHERE schedule_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 15 DAY)')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Get address and contact details for PO-0218.",
      "fields": [
        "supplier_address",
        "contact_person",
        "contact_mobile",
        "contact_email"
      ]
    },
    "output": "frappe.get_value('Purchase Order', {'name': 'PO-0218'}, ['supplier_address', 'contact_person', 'contact_mobile', 'contact_email'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Which purchase orders were issued under inter-company reference but not yet billed?",
      "fields": [
        "inter_company_order_reference",
        "status"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'inter_company_order_reference': ['!=', null], 'status': 'To Bill'}, fields=['name', 'supplier', 'inter_company_order_reference'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Check if we have any POs in 'Draft' status but already linked to a customer.",
      "fields": [
        "status",
        "customer"
      ]
    },
    "output": "frappe.db.exists('Purchase Order', {'status': 'Draft', 'customer': ['!=', null]})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Show all purchase orders with specific tax category 'TDS 194C' and project linked.",
      "fields": [
        "tax_withholding_category",
        "project"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'tax_withholding_category': 'TDS 194C', 'project': ['!=', null]}, fields=['name', 'supplier', 'project'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Compare billed vs received percentages for orders in the last 60 days.",
      "fields": [
        "per_billed",
        "per_received",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, per_billed, per_received FROM `tabPurchase Order` WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 60 DAY)')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Get the payment terms and conditions for PO-3021.",
      "fields": [
        "payment_terms_template",
        "tc_name",
        "terms"
      ]
    },
    "output": "frappe.get_value('Purchase Order', {'name': 'PO-3021'}, ['payment_terms_template', 'tc_name', 'terms'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Find orders made in April this year and grouped same items.",
      "fields": [
        "transaction_date",
        "group_same_items"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM `tabPurchase Order` WHERE MONTH(transaction_date) = 4 AND YEAR(transaction_date) = YEAR(CURDATE()) AND group_same_items = 1')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "List all auto-repeating POs still in draft state.",
      "fields": [
        "auto_repeat",
        "status"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'status': 'Draft', 'auto_repeat': ['!=', null]}, fields=['name', 'auto_repeat'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Which orders have tax and charges deducted more than 2000 and still had a grand total above 50000?",
      "fields": [
        "taxes_and_charges_deducted",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'taxes_and_charges_deducted': ['>', 2000], 'grand_total': ['>', 50000]}, fields=['name', 'supplier'] )"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "How many purchase orders are linked to a project and still pending?",
      "fields": [
        "project",
        "status"
      ]
    },
    "output": "frappe.db.count('Purchase Order', {'project': ['!=', null], 'status': 'To Receive and Bill'})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "List all purchase orders scheduled in the next 15 days.",
      "fields": [
        "schedule_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, schedule_date FROM `tabPurchase Order` WHERE schedule_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 15 DAY)')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Get address and contact details for PO-0218.",
      "fields": [
        "supplier_address",
        "contact_person",
        "contact_mobile",
        "contact_email"
      ]
    },
    "output": "frappe.get_value('Purchase Order', {'name': 'PO-0218'}, ['supplier_address', 'contact_person', 'contact_mobile', 'contact_email'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Which purchase orders were issued under inter-company reference but not yet billed?",
      "fields": [
        "inter_company_order_reference",
        "status"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'inter_company_order_reference': ['!=', null], 'status': 'To Bill'}, fields=['name', 'supplier', 'inter_company_order_reference'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Check if we have any POs in 'Draft' status but already linked to a customer.",
      "fields": [
        "status",
        "customer"
      ]
    },
    "output": "frappe.db.exists('Purchase Order', {'status': 'Draft', 'customer': ['!=', null]})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Show all purchase orders with specific tax category 'TDS 194C' and project linked.",
      "fields": [
        "tax_withholding_category",
        "project"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'tax_withholding_category': 'TDS 194C', 'project': ['!=', null]}, fields=['name', 'supplier', 'project'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Compare billed vs received percentages for orders in the last 60 days.",
      "fields": [
        "per_billed",
        "per_received",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, per_billed, per_received FROM `tabPurchase Order` WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 60 DAY)')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Get the payment terms and conditions for PO-3021.",
      "fields": [
        "payment_terms_template",
        "tc_name",
        "terms"
      ]
    },
    "output": "frappe.get_value('Purchase Order', {'name': 'PO-3021'}, ['payment_terms_template', 'tc_name', 'terms'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Find orders made in April this year and grouped same items.",
      "fields": [
        "transaction_date",
        "group_same_items"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM `tabPurchase Order` WHERE MONTH(transaction_date) = 4 AND YEAR(transaction_date) = YEAR(CURDATE()) AND group_same_items = 1')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "List all auto-repeating POs still in draft state.",
      "fields": [
        "auto_repeat",
        "status"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={'status': 'Draft', 'auto_repeat': ['!=', null]}, fields=['name', 'auto_repeat'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Item",
      "question": "Which customer bought the most pens last month?",
      "fields": [
        "customer",
        "item_name",
        "qty"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT si.customer, SUM(sii.qty) AS total_qty\nFROM `tabSales Invoice Item` sii\nJOIN `tabSales Invoice` si ON si.name = sii.parent\nWHERE sii.item_name = 'Pen' AND si.posting_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)\nGROUP BY si.customer\nORDER BY total_qty DESC\nLIMIT 1\n''')"
  },
  {
    "input": {
      "doctype": "Sales Invoice Item",
      "question": "What are the top 3 items sold by quantity this quarter?",
      "fields": [
        "item_code",
        "qty",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code, SUM(qty) AS total_qty\nFROM `tabSales Invoice Item`\nWHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\nGROUP BY item_code\nORDER BY total_qty DESC\nLIMIT 3\n''')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What is the total revenue for each month in the last 6 months?",
      "fields": [
        "posting_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT DATE_FORMAT(posting_date, '%Y-%m') AS month, SUM(grand_total) AS total_revenue\nFROM `tabSales Invoice`\nWHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\nGROUP BY month\nORDER BY month ASC\n''')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Can you compare the gross profit of the last 8 quarters?",
      "fields": [
        "posting_date",
        "base_net_total",
        "base_total"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT CONCAT(YEAR(posting_date), '-Q', QUARTER(posting_date)) AS quarter,\nSUM(base_total - base_net_total) AS gross_profit\nFROM `tabSales Invoice`\nWHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 24 MONTH)\nGROUP BY quarter\nORDER BY quarter DESC\nLIMIT 8\n''')"
  },
  {
    "input": {
      "doctype": "Journal Entry Account",
      "question": "How much we lost due to exchange rate variation last year?",
      "fields": [
        "account",
        "debit_in_account_currency",
        "credit_in_account_currency",
        "exchange_rate"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT SUM(debit_in_account_currency - credit_in_account_currency) AS fx_loss\nFROM `tabJournal Entry Account`\nWHERE account = 'Exchange Gain/Loss - FX'\nAND posting_date BETWEEN DATE_FORMAT(CURDATE() - INTERVAL 1 YEAR, '%Y-01-01') AND DATE_FORMAT(CURDATE() - INTERVAL 1 YEAR, '%Y-12-31')\n''')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Show me customers with a credit limit below 10,000.",
      "fields": [
        "customer_name",
        "credit_limits"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'credit_limits': ['<', 10000]}, fields=['customer_name', 'credit_limits'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "List all customers that belong to the 'Retail' group and speak English.",
      "fields": [
        "customer_name",
        "customer_group",
        "language"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'customer_group': 'Retail', 'language': 'English'}, fields=['customer_name', 'customer_group', 'language'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Who are the customers using 'INR' currency and located in 'India'?",
      "fields": [
        "customer_name",
        "default_currency",
        "territory"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'default_currency': 'INR', 'territory': 'India'}, fields=['customer_name', 'default_currency', 'territory'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Get customers who joined before 2020.",
      "fields": [
        "customer_name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('SELECT customer_name, creation FROM `tabCustomer` WHERE YEAR(creation) < 2020')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Who are the customers without any email address on file?",
      "fields": [
        "customer_name",
        "email_id"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'email_id': ['is', 'null']}, fields=['customer_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Which customer has placed the most number of sales invoices this year?",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT customer, COUNT(*) as total_invoices\nFROM `tabSales Invoice`\nWHERE posting_date BETWEEN DATE_FORMAT(CURDATE(), '%Y-01-01') AND CURDATE()\nGROUP BY customer\nORDER BY total_invoices DESC\nLIMIT 1\n''')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Compare the number of new customers acquired each year for the past 5 years.",
      "fields": [
        "customer_name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT YEAR(creation) AS year, COUNT(*) AS new_customers\nFROM `tabCustomer`\nWHERE creation >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR)\nGROUP BY year\nORDER BY year DESC\n''')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "How many customers are assigned to each account manager?",
      "fields": [
        "customer_name",
        "account_manager"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT account_manager, COUNT(*) AS customer_count\nFROM `tabCustomer`\nWHERE account_manager IS NOT NULL\nGROUP BY account_manager\nORDER BY customer_count DESC\n''')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Which customers have the highest total outstanding amount?",
      "fields": [
        "customer",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT customer, SUM(outstanding_amount) AS total_due\nFROM `tabSales Invoice`\nWHERE docstatus = 1\nGROUP BY customer\nORDER BY total_due DESC\nLIMIT 5\n''')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "List customers whose credit limit is above 50,000 and who are not internal customers.",
      "fields": [
        "customer_name",
        "credit_limits",
        "is_internal_customer"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'credit_limits': ['>', 50000], 'is_internal_customer': 0}, fields=['customer_name', 'credit_limits', 'is_internal_customer'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "List customers with 'Do Not Contact' flag disabled.",
      "fields": [
        "customer_name",
        "disabled"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'disabled': 0}, fields=['customer_name', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Which customers have a default receivable account set?",
      "fields": [
        "customer_name",
        "default_receivable_accounts"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'default_receivable_accounts': ['!=', '']}, fields=['customer_name', 'default_receivable_accounts'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Get the contact numbers of all customers in the 'Qatar' territory.",
      "fields": [
        "customer_name",
        "mobile_no",
        "territory"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'territory': 'Qatar'}, fields=['customer_name', 'mobile_no'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Which customers are linked with the loyalty program 'Silver Rewards'?",
      "fields": [
        "customer_name",
        "loyalty_program"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'loyalty_program': 'Silver Rewards'}, fields=['customer_name', 'loyalty_program'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Retrieve all customers having an associated company name.",
      "fields": [
        "customer_name",
        "represents_company"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'represents_company': ['!=', '']}, fields=['customer_name', 'represents_company'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "What is the average outstanding amount per customer for the last quarter?",
      "fields": [
        "customer",
        "outstanding_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT customer, AVG(outstanding_amount) AS avg_outstanding\nFROM `tabSales Invoice`\nWHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\nAND docstatus = 1\nGROUP BY customer\n''')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Who are the top 3 customers by total sales amount this year?",
      "fields": [
        "customer",
        "base_grand_total"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT customer, SUM(base_grand_total) AS total_sales\nFROM `tabSales Invoice`\nWHERE posting_date BETWEEN DATE_FORMAT(CURDATE(), '%Y-01-01') AND CURDATE()\nAND docstatus = 1\nGROUP BY customer\nORDER BY total_sales DESC\nLIMIT 3\n''')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "How many new internal customers did we add in the last 6 months?",
      "fields": [
        "is_internal_customer",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT COUNT(*) FROM `tabCustomer`\nWHERE is_internal_customer = 1 AND creation >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\n''')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Which customer groups have the highest number of disabled customers?",
      "fields": [
        "customer_group",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT customer_group, COUNT(*) AS count_disabled\nFROM `tabCustomer`\nWHERE disabled = 1\nGROUP BY customer_group\nORDER BY count_disabled DESC\n''')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "What is the trend in customer signups by gender over the past year?",
      "fields": [
        "gender",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT gender, MONTH(creation) AS month, COUNT(*) AS count\nFROM `tabCustomer`\nWHERE creation >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH)\nGROUP BY gender, MONTH(creation)\nORDER BY month\n''')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Who are the customers handled by 'Ravi Kumar' and belong to 'Retail' group?",
      "fields": [
        "customer_name",
        "account_manager",
        "customer_group"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'account_manager': 'Ravi Kumar', 'customer_group': 'Retail'}, fields=['customer_name', 'account_manager', 'customer_group'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Give me names of businesses that fall under the wholesale category.",
      "fields": [
        "customer_name",
        "customer_group"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'customer_group': 'Wholesale'}, fields=['customer_name', 'customer_group'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Can you list all clients based in the UAE region?",
      "fields": [
        "customer_name",
        "territory"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'territory': 'UAE'}, fields=['customer_name', 'territory'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Hey, I need a list of all customers we have in the Gulf market.",
      "fields": [
        "customer_name",
        "territory"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'territory': 'Gulf'}, fields=['customer_name', 'territory'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Which customers use USD as their default currency?",
      "fields": [
        "customer_name",
        "default_currency"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'default_currency': 'USD'}, fields=['customer_name', 'default_currency'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Find customers who are from 'India', managed by 'Neha', and have a credit limit above 1 lakh.",
      "fields": [
        "customer_name",
        "territory",
        "account_manager",
        "credit_limits"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'territory': 'India', 'account_manager': 'Neha', 'credit_limits': ['>', 100000]}, fields=['customer_name', 'territory', 'account_manager', 'credit_limits'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "List all corporate customers using EUR currency and part of Hospitality segment.",
      "fields": [
        "customer_name",
        "customer_type",
        "default_currency",
        "market_segment"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'customer_type': 'Company', 'default_currency': 'EUR', 'market_segment': 'Hospitality'}, fields=['customer_name', 'customer_type', 'default_currency', 'market_segment'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Which territory has the highest number of customers?",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.db.sql('SELECT territory, COUNT(*) as total FROM `tabCustomer` GROUP BY territory ORDER BY total DESC LIMIT 1')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Compare the number of internal vs external customers.",
      "fields": [
        "is_internal_customer"
      ]
    },
    "output": "frappe.db.sql('SELECT is_internal_customer, COUNT(*) as count FROM `tabCustomer` GROUP BY is_internal_customer')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Which customers have open sales orders but haven\u2019t placed any invoices yet?",
      "fields": [
        "customer_name"
      ]
    },
    "output": "frappe.db.sql('SELECT DISTINCT so.customer FROM `tabSales Order` so LEFT JOIN `tabSales Invoice` si ON so.customer = si.customer WHERE si.name IS NULL')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Who are the customers added in the last 30 days?",
      "fields": [
        "customer_name",
        "creation"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -30)]}, fields=['customer_name', 'creation'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "List all customers registered this year.",
      "fields": [
        "customer_name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('SELECT customer_name, creation FROM `tabCustomer` WHERE YEAR(creation) = YEAR(CURDATE())')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "List all customers along with their group and territory.",
      "fields": [
        "customer_name",
        "customer_group",
        "territory"
      ]
    },
    "output": "frappe.db.get_all('Customer', fields=['customer_name', 'customer_group', 'territory'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Show me every customer that is currently disabled.",
      "fields": [
        "customer_name",
        "disabled"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'disabled': 1}, fields=['customer_name', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Which customers are linked to leads from Qatar?",
      "fields": [
        "customer_name",
        "lead_name"
      ]
    },
    "output": "frappe.db.sql('SELECT c.customer_name, c.lead_name FROM `tabCustomer` c JOIN `tabLead` l ON c.lead_name = l.name WHERE l.country = 'Qatar'')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "List customers who have a default price list assigned.",
      "fields": [
        "customer_name",
        "default_price_list"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'default_price_list': ['!=', '']}, fields=['customer_name', 'default_price_list'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "What is the email address of the customer named 'Ahmed Trading Co'?",
      "fields": [
        "email_id"
      ]
    },
    "output": "frappe.db.get_value('Customer', {'customer_name': 'Ahmed Trading Co'}, 'email_id')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "List all customers with the gender specified as 'Female'.",
      "fields": [
        "customer_name",
        "gender"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'gender': 'Female'}, fields=['customer_name', 'gender'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Which customers have a website link added?",
      "fields": [
        "customer_name",
        "website"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'website': ['!=', '']}, fields=['customer_name', 'website'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Get all customers with 'Standard Selling' as their default price list.",
      "fields": [
        "customer_name",
        "default_price_list"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'default_price_list': 'Standard Selling'}, fields=['customer_name', 'default_price_list'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Find customers that have set 'Doha Bank' as their default bank account.",
      "fields": [
        "customer_name",
        "default_bank_account"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'default_bank_account': 'Doha Bank'}, fields=['customer_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Which customers have the 'Sales Order' required flag enabled?",
      "fields": [
        "customer_name",
        "so_required"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'so_required': 1}, fields=['customer_name', 'so_required'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Show all customers who have enabled delivery note requirement.",
      "fields": [
        "customer_name",
        "dn_required"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'dn_required': 1}, fields=['customer_name', 'dn_required'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "List customers and their loyalty program tier.",
      "fields": [
        "customer_name",
        "loyalty_program_tier"
      ]
    },
    "output": "frappe.db.get_all('Customer', fields=['customer_name', 'loyalty_program_tier'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Which customers are associated with the company 'HTS Qatar'?",
      "fields": [
        "customer_name",
        "companies"
      ]
    },
    "output": "frappe.db.sql('SELECT customer_name, companies FROM `tabCustomer` WHERE FIND_IN_SET('HTS Qatar', companies)')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Get all customers marked as internal customers.",
      "fields": [
        "customer_name",
        "is_internal_customer"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'is_internal_customer': 1}, fields=['customer_name', 'is_internal_customer'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Find all customers with mobile numbers starting with +974.",
      "fields": [
        "customer_name",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('SELECT customer_name, mobile_no FROM `tabCustomer` WHERE mobile_no LIKE '+974%'')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Give me all the customers having 'Retail' group and active portal users.",
      "fields": [
        "customer_name",
        "customer_group",
        "portal_users"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'customer_group': 'Retail', 'portal_users': ['!=', '']}, fields=['customer_name', 'customer_group', 'portal_users'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Which customers do not have a tax ID assigned?",
      "fields": [
        "customer_name",
        "tax_id"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'tax_id': ['is', 'null']}, fields=['customer_name', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "List customers whose names start with 'A'.",
      "fields": [
        "customer_name"
      ]
    },
    "output": "frappe.db.sql('SELECT customer_name FROM `tabCustomer` WHERE customer_name LIKE 'A%'')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Retrieve all internal customers with a defined tax category.",
      "fields": [
        "customer_name",
        "is_internal_customer",
        "tax_category"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'is_internal_customer': 1, 'tax_category': ['!=', '']}, fields=['customer_name', 'is_internal_customer', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Which customers fall under the 'Automotive' industry?",
      "fields": [
        "customer_name",
        "industry"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'industry': 'Automotive'}, fields=['customer_name', 'industry'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Can you tell me how many customers are there in the system?",
      "fields": []
    },
    "output": "frappe.db.count('Customer')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Show me the details of 'Super Mart' including currency and address.",
      "fields": [
        "customer_name",
        "default_currency",
        "primary_address"
      ]
    },
    "output": "frappe.db.get_value('Customer', {'customer_name': 'Super Mart'}, ['default_currency', 'primary_address'], as_dict=True)"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Which customer groups have more than 10 customers?",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.db.sql('SELECT customer_group, COUNT(*) as count FROM `tabCustomer` GROUP BY customer_group HAVING count > 10')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Give all customers with assigned loyalty programs.",
      "fields": [
        "customer_name",
        "loyalty_program"
      ]
    },
    "output": "frappe.db.get_all('Customer', filters={'loyalty_program': ['!=', '']}, fields=['customer_name', 'loyalty_program'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "What is the average credit limit across all corporate customers?",
      "fields": [
        "customer_type",
        "credit_limits"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT AVG(credit_limits) AS avg_credit\nFROM `tabCustomer`\nWHERE customer_type = 'Company'\n''')"
  },
  {
    "input": {
      "doctype": "Item Price",
      "question": "How much price increase happened for Mangos last 5 years?",
      "fields": [
        "item_code",
        "price_list_rate",
        "valid_from"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code, YEAR(valid_from) AS year, MAX(price_list_rate) - MIN(price_list_rate) AS price_change\nFROM `tabItem Price`\nWHERE item_code = 'Mango' AND valid_from >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR)\nGROUP BY item_code, year\nORDER BY year\n''')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Give me all delivery notes created today.",
      "fields": [
        "name",
        "posting_date",
        "customer"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={'posting_date': frappe.utils.today()}, fields=['name', 'posting_date', 'customer'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "List all delivery notes that mention item 'Pen Blue'.",
      "fields": [
        "name",
        "items"
      ]
    },
    "output": "frappe.db.sql('''SELECT dn.name FROM `tabDelivery Note` dn JOIN `tabDelivery Note Item` dni ON dn.name = dni.parent WHERE dni.item_name = 'Pen Blue'''')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Show me deliveries handled by the courier 'Qatar Express'.",
      "fields": [
        "name",
        "transporter"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={'transporter': 'Qatar Express'}, fields=['name', 'transporter'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Which delivery notes were made by warehouse 'WH-001'?",
      "fields": [
        "name",
        "set_warehouse"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={'set_warehouse': 'WH-001'}, fields=['name', 'set_warehouse'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "What is the average number of items per delivery this year?",
      "fields": [
        "total_qty"
      ]
    },
    "output": "frappe.db.sql('SELECT AVG(total_qty) FROM `tabDelivery Note` WHERE YEAR(posting_date) = 2025')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Show all delivery notes for customer 'Al Sada Trading' with status 'Completed'.",
      "fields": [
        "name",
        "customer",
        "status"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={'customer': 'Al Sada Trading', 'status': 'Completed'}, fields=['name', 'customer', 'status'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Get delivery notes with more than 5 items and submitted after June 1st.",
      "fields": [
        "name",
        "total_qty",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM `tabDelivery Note` WHERE total_qty > 5 AND posting_date > '2025-06-01'')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "List all deliveries to customers in Doha that are still pending billing.",
      "fields": [
        "name",
        "customer_address",
        "per_billed"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={'customer_address': ['like', '%Doha%'], 'per_billed': ['<', 100]}, fields=['name', 'customer_address', 'per_billed'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Find all delivery notes where delivery date is after posting date.",
      "fields": [
        "name",
        "lr_date",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM `tabDelivery Note` WHERE lr_date > posting_date')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Which deliveries were handled by 'Mohammed Khan' and sent to 'Al Wakrah'?",
      "fields": [
        "name",
        "driver_name",
        "shipping_address"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={'driver_name': 'Mohammed Khan', 'shipping_address': ['like', '%Al Wakrah%']}, fields=['name', 'driver_name', 'shipping_address'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Which delivery notes were associated with the project 'Retail Expansion 2025'?",
      "fields": [
        "name",
        "project"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={'project': 'Retail Expansion 2025'}, fields=['name', 'project'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "List deliveries that used cost center 'Main Warehouse Center'.",
      "fields": [
        "name",
        "cost_center"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={'cost_center': 'Main Warehouse Center'}, fields=['name', 'cost_center'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Which delivery notes have rounding adjustments greater than 10?",
      "fields": [
        "name",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={'rounding_adjustment': ['>', 10]}, fields=['name', 'rounding_adjustment'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Find delivery notes with additional discounts more than 5 percent.",
      "fields": [
        "name",
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={'additional_discount_percentage': ['>', 5]}, fields=['name', 'additional_discount_percentage'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Show me all delivery notes with tax category 'Export'.",
      "fields": [
        "name",
        "tax_category"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={'tax_category': 'Export'}, fields=['name', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Can you show me the last few delivery notes for Gulf Supplies?",
      "fields": [
        "name",
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={'customer': 'Gulf Supplies'}, fields=['name', 'customer', 'posting_date'], order_by='posting_date desc', limit=5)"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Are there any delivery notes missing a driver name?",
      "fields": [
        "name",
        "driver_name"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={'driver_name': ['=', '']}, fields=['name', 'driver_name'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Show delivery notes that are still open and over 7 days old.",
      "fields": [
        "name",
        "status",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM `tabDelivery Note` WHERE status = 'Draft' AND posting_date < CURDATE() - INTERVAL 7 DAY')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "What is the average delivery delay this year?",
      "fields": [
        "posting_date",
        "lr_date"
      ]
    },
    "output": "# Custom computation; assuming both dates are present\nfrappe.db.sql('SELECT AVG(DATEDIFF(lr_date, posting_date)) FROM `tabDelivery Note` WHERE YEAR(posting_date) = 2025 AND lr_date IS NOT NULL')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Which deliveries took more than one day from creation to dispatch?",
      "fields": [
        "name",
        "posting_date",
        "lr_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM `tabDelivery Note` WHERE DATEDIFF(lr_date, posting_date) > 1')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Did we make more deliveries this year compared to last year?",
      "fields": [
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT (SELECT COUNT(*) FROM `tabDelivery Note` WHERE YEAR(posting_date) = 2025) AS this_year, (SELECT COUNT(*) FROM `tabDelivery Note` WHERE YEAR(posting_date) = 2024) AS last_year')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Were there any deliveries that got cancelled this month?",
      "fields": [
        "name",
        "status",
        "posting_date"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={'status': 'Cancelled', 'posting_date': ['between', ['2025-06-01', '2025-06-30']]}, fields=['name', 'status', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "What was the last delivery we made to ABC Electronics?",
      "fields": [
        "name",
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={'customer': 'ABC Electronics'}, fields=['name', 'customer', 'posting_date'], order_by='posting_date desc', limit=1)"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "What delivery notes were created from Sales Order SO-00012?",
      "fields": [
        "name",
        "po_no"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={'po_no': 'SO-00012'}, fields=['name', 'po_no'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "From which warehouse was the item 'Laptop 14' shipped?",
      "fields": [
        "name",
        "set_warehouse"
      ]
    },
    "output": "# This assumes item lookup in child table\nfrappe.db.sql('SELECT dn.set_warehouse FROM `tabDelivery Note` dn JOIN `tabDelivery Note Item` dni ON dn.name = dni.parent WHERE dni.item_name = 'Laptop 14'')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "What were the delivered quantities for item 'Notebook A5' last month?",
      "fields": [
        "items",
        "total_qty",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT SUM(dni.qty) FROM `tabDelivery Note` dn JOIN `tabDelivery Note Item` dni ON dn.name = dni.parent WHERE dni.item_name = 'Notebook A5' AND dn.posting_date BETWEEN '2025-05-01' AND '2025-05-31'')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "What deliveries did we make after the Eid holiday?",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={'posting_date': ['>', '2025-04-15']}, fields=['name', 'posting_date'])  # assuming Eid was Apr 15, 2025"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Did we send any deliveries to Al Rayyan last week?",
      "fields": [
        "name",
        "shipping_address",
        "posting_date"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={'shipping_address': ['like', '%Al Rayyan%'], 'posting_date': ['between', ['2025-06-20', '2025-06-27']]}, fields=['name', 'shipping_address', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Tell me about today’s deliveries.",
      "fields": [
        "name",
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.db.get_all('Delivery Note', filters={'posting_date': frappe.utils.today()}, fields=['name', 'customer', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Which customer received the highest number of delivery notes last month?",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.db.sql('SELECT customer, COUNT(*) AS total FROM `tabDelivery Note` WHERE posting_date BETWEEN '2025-05-01' AND '2025-05-31' GROUP BY customer ORDER BY total DESC LIMIT 1')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Who had the largest delivery by item count this year?",
      "fields": [
        "customer",
        "total_qty"
      ]
    },
    "output": "frappe.db.sql('SELECT customer, total_qty FROM `tabDelivery Note` WHERE YEAR(posting_date) = 2025 ORDER BY total_qty DESC LIMIT 1')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Which delivery note had the most items in 2024?",
      "fields": [
        "name",
        "total_qty"
      ]
    },
    "output": "frappe.db.sql('SELECT name, total_qty FROM `tabDelivery Note` WHERE YEAR(posting_date) = 2024 ORDER BY total_qty DESC LIMIT 1')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "What's the total number of deliveries in Q1 2025?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM `tabDelivery Note` WHERE posting_date BETWEEN '2025-01-01' AND '2025-03-31'')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Which customer had the fewest deliveries last year?",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.db.sql('SELECT customer, COUNT(*) AS total FROM `tabDelivery Note` WHERE posting_date BETWEEN '2024-01-01' AND '2024-12-31' GROUP BY customer ORDER BY total ASC LIMIT 1')"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "How many companies allow account creation against child companies?",
      "fields": [
        "allow_account_creation_against_child_company"
      ]
    },
    "output": "frappe.db.count('Company', {'allow_account_creation_against_child_company': 1})"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get all companies with cost center set as 'Operations - ERP'.",
      "fields": [
        "cost_center",
        "name"
      ]
    },
    "output": "frappe.get_all('Company', filters={'cost_center': 'Operations - ERP'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Check if 'LogiMart Ltd' has depreciation cost center configured.",
      "fields": [
        "depreciation_cost_center"
      ]
    },
    "output": "frappe.db.exists('Company', {'company_name': 'LogiMart Ltd', 'depreciation_cost_center': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Fetch the default inventory account and default warehouse for sales return for 'RetailX Qatar'.",
      "fields": [
        "default_inventory_account",
        "default_warehouse_for_sales_return"
      ]
    },
    "output": "frappe.db.get_value('Company', {'company_name': 'RetailX Qatar'}, ['default_inventory_account', 'default_warehouse_for_sales_return'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Fetch the full record of the company 'Tech Solutions Ltd'.",
      "fields": [
        "company_name"
      ]
    },
    "output": "frappe.get_doc('Company', {'company_name': 'Tech Solutions Ltd'})"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies based on employee count and revenue.",
      "fields": [
        "company_name",
        "country"
      ]
    },
    "output": "Error: 'employee count' and 'revenue' are not in the provided fields."
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "List all invoices created after June 2025.",
      "fields": [
        "posting_date"
      ]
    },
    "output": "Error: Used 'creation' field in filter which was not provided."
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "What is the full address of customer 'CUST-0003'?",
      "fields": [
        "customer_name",
        "customer_type"
      ]
    },
    "output": "Error: 'address' is not among the given fields."
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices with outstanding amount below 1000.",
      "fields": [
        "grand_total"
      ]
    },
    "output": "Error: 'outstanding_amount' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "List employees who joined after 2023.",
      "fields": [
        "employee_name"
      ]
    },
    "output": "Error: 'date_of_joining' is required but not in the provided fields."
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Find entries where item quantity is more than 500.",
      "fields": [
        "item_code"
      ]
    },
    "output": "Error: 'qty' is not available in the provided fields."
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Get items with brand 'Dell' and price above 5000.",
      "fields": [
        "brand"
      ]
    },
    "output": "Error: 'price' field is missing."
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are active and based in Qatar?",
      "fields": [
        "supplier_type"
      ]
    },
    "output": "Error: Missing fields 'country' or 'is_active' for the condition."
  },
  {
    "input": {
      "doctype": "Leave Application",
      "question": "How many leave applications were rejected in May 2024?",
      "fields": [
        "status",
        "employee"
      ]
    },
    "output": "Error: Missing 'from_date' or 'to_date' to filter by month."
  },
  {
    "input": {
      "doctype": "Quotation",
      "question": "List quotations for customer 'Gulf Steel' having discount over 10%.",
      "fields": [
        "customer_name"
      ]
    },
    "output": "Error: 'discount_amount' or 'discount_percentage' field is missing."
  },
  {
    "input": {
      "doctype": "Timesheet",
      "question": "Did 'EMP-003' log more than 8 hours on June 5, 2025?",
      "fields": [
        "employee",
        "project"
      ]
    },
    "output": "Error: 'hours' or 'start_date' field missing."
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Was any order placed with delivery date in December 2025?",
      "fields": [
        "transaction_date"
      ]
    },
    "output": "Error: 'schedule_date' field required but not present."
  },
  {
    "input": {
      "doctype": "Project",
      "question": "Which projects are overdue as of today?",
      "fields": [
        "status"
      ]
    },
    "output": "Error: 'expected_end_date' field missing for overdue calculation."
  },
  {
    "input": {
      "doctype": "Journal Entry",
      "question": "Give me all entries from account 'Cash - HTS'.",
      "fields": [
        "voucher_type"
      ]
    },
    "output": "Error: 'account' field not provided for filtering."
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Get all delivered orders with net total above 20,000.",
      "fields": [
        "delivery_date"
      ]
    },
    "output": "Error: 'net_total' field not provided."
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Count payment entries with mode of payment as 'Cash'.",
      "fields": [
        "posting_date",
        "paid_amount"
      ]
    },
    "output": "Error: 'mode_of_payment' field missing for condition."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Show companies with branch locations in more than 3 countries.",
      "fields": [
        "company_name",
        "country"
      ]
    },
    "output": "Error: 'branch locations' field is not available."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get the list of companies by CEO and number of employees.",
      "fields": [
        "company_name",
        "domain"
      ]
    },
    "output": "Error: 'CEO' and 'number of employees' are not in the available fields."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find companies that use SAP or Oracle as ERP system.",
      "fields": [
        "company_name",
        "default_currency"
      ]
    },
    "output": "Error: 'ERP system' field is missing from the doctype."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies have registered on weekends?",
      "fields": [
        "date_of_incorporation"
      ]
    },
    "output": "Error: Specific day of week cannot be inferred from available field."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Check which companies have a headcount over 500.",
      "fields": [
        "company_name",
        "country"
      ]
    },
    "output": "Error: 'headcount' field not found in the provided fields."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies that use both QuickBooks and Xero.",
      "fields": [
        "company_name",
        "domain"
      ]
    },
    "output": "Error: 'Accounting software used' is not a valid field."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find companies where revenue per employee is above industry average.",
      "fields": [
        "company_name",
        "country"
      ]
    },
    "output": "Error: No matching fields for 'revenue' or 'employee count'."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies use cryptocurrency for payments?",
      "fields": [
        "company_name",
        "default_currency"
      ]
    },
    "output": "Error: Cannot infer payment method from provided fields."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get companies that have both online and offline business models.",
      "fields": [
        "company_name"
      ]
    },
    "output": "Error: No fields related to 'business model' present."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get the default currency of 'Acme Corporation'.",
      "fields": [
        "default_currency"
      ]
    },
    "output": "frappe.db.get_value('Company', {'company_name': 'Acme Corporation'}, 'default_currency')"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "How many companies have a default receivable account?",
      "fields": [
        "default_receivable_account"
      ]
    },
    "output": "frappe.db.count('Company', {'default_receivable_account': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List the names of companies incorporated in India.",
      "fields": [
        "name",
        "country"
      ]
    },
    "output": "frappe.db.get_list('Company', filters={'country': 'India'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Check if a company named 'Global Finance Inc.' exists.",
      "fields": [
        "company_name"
      ]
    },
    "output": "frappe.db.exists('Company', {'company_name': 'Global Finance Inc.'})"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get a list of companies using 'INR' currency and having a default bank account.",
      "fields": [
        "name",
        "default_currency",
        "default_bank_account"
      ]
    },
    "output": "frappe.get_all('Company', filters={'default_currency': 'INR', 'default_bank_account': ['!=', '']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Fetch the abbreviation and email of the company with tax ID 'GSTIN1234'.",
      "fields": [
        "abbr",
        "email",
        "tax_id"
      ]
    },
    "output": "frappe.db.get_value('Company', {'tax_id': 'GSTIN1234'}, ['abbr', 'email'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "How many companies are set as groups?",
      "fields": [
        "is_group"
      ]
    },
    "output": "frappe.db.count('Company', {'is_group': 1})"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get all company names with no domain assigned.",
      "fields": [
        "name",
        "domain"
      ]
    },
    "output": "frappe.db.get_list('Company', filters={'domain': ''}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Check whether there’s any company established on '2020-01-01'.",
      "fields": [
        "date_of_establishment"
      ]
    },
    "output": "frappe.db.exists('Company', {'date_of_establishment': '2020-01-01'})"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies use USD as their default currency?",
      "fields": [
        "name",
        "default_currency"
      ]
    },
    "output": "frappe.get_list('Company', filters={'default_currency': 'USD'}, fields=['name', 'default_currency'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies that were established before 2015.",
      "fields": [
        "name",
        "date_of_establishment"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'date_of_establishment': ['<', '2015-01-01'] }, fields=['name', 'date_of_establishment'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Show companies with tax ID starting with 'GST'.",
      "fields": [
        "name",
        "tax_id"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'tax_id': ['like', 'GST%'] }, fields=['name', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies are marked as groups?",
      "fields": [
        "name",
        "is_group"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'is_group': 1 }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get the list of companies having default warehouse for sales return.",
      "fields": [
        "name",
        "default_warehouse_for_sales_return"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'default_warehouse_for_sales_return': ['!=', ''] }, fields=['name', 'default_warehouse_for_sales_return'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find companies with perpetual inventory enabled.",
      "fields": [
        "name",
        "enable_perpetual_inventory"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'enable_perpetual_inventory': 1 }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies operate in the United Arab Emirates?",
      "fields": [
        "name",
        "country"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'country': 'United Arab Emirates' }, fields=['name', 'country'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies with a website starting with 'www.'",
      "fields": [
        "name",
        "website"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'website': ['like', 'www.%'] }, fields=['name', 'website'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Show all companies that have a default finance book configured.",
      "fields": [
        "name",
        "default_finance_book"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'default_finance_book': ['!=', ''] }, fields=['name', 'default_finance_book'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "What are the companies using default discount account?",
      "fields": [
        "name",
        "default_discount_account"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'default_discount_account': ['!=', ''] }, fields=['name', 'default_discount_account'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find companies created with the old parent 'ABC Corp'.",
      "fields": [
        "name",
        "old_parent"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'old_parent': 'ABC Corp' }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies were incorporated in 2020?",
      "fields": [
        "name",
        "date_of_incorporation"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'date_of_incorporation': ['between', ['2020-01-01', '2020-12-31']] }, fields=['name', 'date_of_incorporation'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get companies with unrealized profit/loss account assigned.",
      "fields": [
        "name",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'unrealized_profit_loss_account': ['!=', ''] }, fields=['name', 'unrealized_profit_loss_account'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List all companies that allow account creation against child company.",
      "fields": [
        "name",
        "allow_account_creation_against_child_company"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'allow_account_creation_against_child_company': 1 }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies have no registration details filled?",
      "fields": [
        "name",
        "registration_details"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'registration_details': ['=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find companies with a company logo uploaded.",
      "fields": [
        "name",
        "company_logo"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'company_logo': ['!=', ''] }, fields=['name', 'company_logo'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies where depreciation cost center is not set.",
      "fields": [
        "name",
        "depreciation_cost_center"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'depreciation_cost_center': ['=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies are using a default operating cost account?",
      "fields": [
        "name",
        "default_operating_cost_account"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'default_operating_cost_account': ['!=', ''] }, fields=['name', 'default_operating_cost_account'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get the list of companies with cost centers configured.",
      "fields": [
        "name",
        "cost_center"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'cost_center': ['!=', ''] }, fields=['name', 'cost_center'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Show all companies with budget approver roles assigned.",
      "fields": [
        "name",
        "exception_budget_approver_role"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'exception_budget_approver_role': ['!=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies have fixed asset defaults set up?",
      "fields": [
        "name",
        "fixed_asset_defaults"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'fixed_asset_defaults': ['!=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List all companies with default receivable account filled.",
      "fields": [
        "name",
        "default_receivable_account"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'default_receivable_account': ['!=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies were created without a phone number?",
      "fields": [
        "phone_no",
        "name"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'phone_no': ['=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find companies with default cash and bank accounts set.",
      "fields": [
        "default_cash_account",
        "default_bank_account",
        "name"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'default_cash_account': ['!=', ''], 'default_bank_account': ['!=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get the list of companies whose abbreviation is more than 3 characters.",
      "fields": [
        "abbr",
        "name"
      ]
    },
    "output": "frappe.get_list('Company', filters={}, fields=['name', 'abbr'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Show companies that have payment terms configured.",
      "fields": [
        "payment_terms",
        "name"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'payment_terms': ['!=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies have auto accounting for stock enabled?",
      "fields": [
        "auto_accounting_for_stock_settings",
        "name"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'auto_accounting_for_stock_settings': 1 }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find companies with monthly sales target mentioned.",
      "fields": [
        "monthly_sales_target",
        "name"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'monthly_sales_target': ['>', 0] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies operate under the domain 'manufacturing'?",
      "fields": [
        "domain",
        "name"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'domain': 'manufacturing' }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies that belong to a parent company.",
      "fields": [
        "parent_company",
        "name"
      ]
    },
    "output": "frappe.get_list('Company', filters={ 'parent_company': ['!=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies have more than 5 subsidiaries?",
      "fields": [
        "company_name"
      ]
    },
    "output": "Error: Subsidiary count tracking is not part of the provided fields."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find companies using Oracle Financials.",
      "fields": [
        "chart_of_accounts"
      ]
    },
    "output": "Error: ERP system type is not available as a filter in fields."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies support remote work?",
      "fields": [
        "email",
        "website"
      ]
    },
    "output": "Error: 'remote work' attribute not defined in available fields."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get companies that filed tax returns for 2023.",
      "fields": [
        "tax_id"
      ]
    },
    "output": "Error: Tax filing records are not stored in Company doctype fields."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies use AI for recruitment?",
      "fields": [
        "company_description"
      ]
    },
    "output": "Error: AI usage is not structured in fields."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List all companies with female leadership.",
      "fields": [
        "company_name",
        "email"
      ]
    },
    "output": "Error: Leadership gender is not part of the dataset."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies allow remote warehouse operations?",
      "fields": [
        "default_warehouse_for_sales_return"
      ]
    },
    "output": "Error: Remote access capabilities not specified."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get all companies using ISO 27001 certified processes.",
      "fields": [
        "registration_details"
      ]
    },
    "output": "Error: Certification type is not a structured field."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find companies planning mergers in the next fiscal year.",
      "fields": [
        "company_description"
      ]
    },
    "output": "Error: M&A plans are not recorded in this schema."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies that publish quarterly ESG reports.",
      "fields": [
        "email",
        "website"
      ]
    },
    "output": "Error: ESG reporting is not tracked in current fields."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies allow account creation for child companies?",
      "fields": [
        "allow_account_creation_against_child_company"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'allow_account_creation_against_child_company': 1 }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies whose phone number is not set.",
      "fields": [
        "phone_no"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'phone_no': ['=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find companies that are using 'Main Book' as their default finance book.",
      "fields": [
        "default_finance_book"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'default_finance_book': 'Main Book' }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Show companies with an operating cost account set.",
      "fields": [
        "default_operating_cost_account"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'default_operating_cost_account': ['!=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies have a registration detail mentioning 'ISO Certified'?",
      "fields": [
        "registration_details"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'registration_details': ['like', '%ISO Certified%'] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies that belong to the Asia domain and are not groups.",
      "fields": [
        "domain",
        "is_group"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'domain': 'Asia', 'is_group': 0 }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find companies that have a valid email set and a website starting with 'www.'",
      "fields": [
        "email",
        "website"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'email': ['!=', ''], 'website': ['like', 'www.%'] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies were created before the year 2000?",
      "fields": [
        "date_of_establishment"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'date_of_establishment': ['<', '2000-01-01'] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies using 'Discount Account - CO' as their default discount account.",
      "fields": [
        "default_discount_account"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'default_discount_account': 'Discount Account - CO' }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Show all companies that use provisional accounting for non-stock items.",
      "fields": [
        "enable_provisional_accounting_for_non_stock_items"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'enable_provisional_accounting_for_non_stock_items': 1 }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies use 'XYZ Bank' as their default bank account?",
      "fields": [
        "default_bank_account"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'default_bank_account': 'XYZ Bank' }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get all companies that use 'Cash - CO' for cash transactions.",
      "fields": [
        "default_cash_account"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'default_cash_account': 'Cash - CO' }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find companies where the default receivable and payable accounts are set.",
      "fields": [
        "default_receivable_account",
        "default_payable_account"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'default_receivable_account': ['!=', ''], 'default_payable_account': ['!=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies are configured with a depreciation cost center?",
      "fields": [
        "depreciation_cost_center"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'depreciation_cost_center': ['!=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies whose name starts with 'Tech'.",
      "fields": [
        "company_name"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'company_name': ['like', 'Tech%'] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get companies with unrealized profit/loss account defined.",
      "fields": [
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'unrealized_profit_loss_account': ['!=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find all companies that have fixed asset defaults configured.",
      "fields": [
        "fixed_asset_defaults"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'fixed_asset_defaults': ['!=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies where the domain is not set.",
      "fields": [
        "domain"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'domain': ['=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Show companies having monthly sales target above 500000.",
      "fields": [
        "monthly_sales_target"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'monthly_sales_target': ['>', 500000] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies have round-off account set?",
      "fields": [
        "round_off_account"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'round_off_account': ['!=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List all companies with a CEO assigned.",
      "fields": [
        "company_name",
        "tax_id"
      ]
    },
    "output": "Error: 'CEO' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Show companies founded before the internet era.",
      "fields": [
        "default_currency",
        "domain"
      ]
    },
    "output": "Error: 'founded_date' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get company headquarters location.",
      "fields": [
        "address_html",
        "fax"
      ]
    },
    "output": "Error: 'headquarters' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List all companies run by women entrepreneurs.",
      "fields": [
        "company_name",
        "domain"
      ]
    },
    "output": "Error: 'owner_gender' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies have an internal Slack channel?",
      "fields": [
        "company_name",
        "email"
      ]
    },
    "output": "Error: 'slack_channel' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List all companies established after 2015 in India.",
      "fields": [
        "date_of_establishment",
        "country"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'date_of_establishment': ['>', '2015-01-01'], 'country': 'India' }, fields=['name', 'country', 'date_of_establishment'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies have a default currency set to USD and operate in the USA?",
      "fields": [
        "default_currency",
        "country"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'default_currency': 'USD', 'country': 'USA' }, fields=['name', 'default_currency'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Find companies that are parent companies and not part of any group.",
      "fields": [
        "is_group",
        "parent_company"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'is_group': 0, 'parent_company': ['=', null] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Show companies using the standard holiday list and operating in the UAE.",
      "fields": [
        "default_holiday_list",
        "country"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'default_holiday_list': 'Standard Holiday List', 'country': 'UAE' }, fields=['name', 'default_holiday_list'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies have a credit limit greater than 100000?",
      "fields": [
        "credit_limit"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'credit_limit': ['>', 100000] }, fields=['name', 'credit_limit'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies that have depreciation enabled but without a depreciation cost center set.",
      "fields": [
        "depreciation_expense_account",
        "depreciation_cost_center"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'depreciation_expense_account': ['!=', ''], 'depreciation_cost_center': ['=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Get companies using perpetual inventory.",
      "fields": [
        "enable_perpetual_inventory"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'enable_perpetual_inventory': 1 }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies were incorporated after 2020 and belong to the Europe domain?",
      "fields": [
        "date_of_incorporation",
        "domain"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'date_of_incorporation': ['>', '2020-01-01'], 'domain': 'Europe' }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies using a custom chart of accounts.",
      "fields": [
        "chart_of_accounts"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'chart_of_accounts': ['!=', ''] }, fields=['name', 'chart_of_accounts'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies have a default finance book set but no exchange gain loss account?",
      "fields": [
        "default_finance_book",
        "exchange_gain_loss_account"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'default_finance_book': ['!=', ''], 'exchange_gain_loss_account': ['=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Show the tax ID and domain of all companies operating in Canada.",
      "fields": [
        "country",
        "tax_id",
        "domain"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'country': 'Canada' }, fields=['name', 'tax_id', 'domain'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List all companies with a website set and email available.",
      "fields": [
        "website",
        "email"
      ]
    },
    "output": "frappe.get_all('Company', filters={ 'website': ['!=', ''], 'email': ['!=', ''] }, fields=['name', 'website', 'email'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Can you list all the companies that are currently active in our ERP system?",
      "fields": [
        "name",
        "company_name",
        "is_group"
      ]
    },
    "output": "frappe.get_list('Company', filters={'is_group': 0}, fields=['name', 'company_name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "What\u2019s the full name of our primary registered company named 'HTS Pvt Ltd'?",
      "fields": [
        "company_name"
      ]
    },
    "output": "frappe.db.get_value('Company', {'name': 'HTS Pvt Ltd'}, 'company_name')"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which country is our company 'NovaTech Solutions' legally registered in?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.db.get_value('Company', {'name': 'NovaTech Solutions'}, 'country')"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "What is the default currency set for 'BrightEdge Ltd' for financial transactions?",
      "fields": [
        "default_currency"
      ]
    },
    "output": "frappe.db.get_value('Company', {'name': 'BrightEdge Ltd'}, 'default_currency')"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "When was 'GreenField Enterprises' established and officially incorporated?",
      "fields": [
        "name",
        "date_of_establishment",
        "date_of_incorporation"
      ]
    },
    "output": "frappe.db.get_value('Company', {'name': 'GreenField Enterprises'}, ['date_of_establishment', 'date_of_incorporation'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Who is listed as the parent company of 'FusionCorp International'?",
      "fields": [
        "name",
        "parent_company"
      ]
    },
    "output": "frappe.db.get_value('Company', {'name': 'FusionCorp International'}, 'parent_company')"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Has a company logo been uploaded for 'SkyNet Digital Ltd' in the system?",
      "fields": [
        "company_logo"
      ]
    },
    "output": "frappe.db.get_value('Company', {'name': 'SkyNet Digital Ltd'}, 'company_logo')"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Can you check if a logo file is attached for the company 'AlphaBridge Tech'?",
      "fields": [
        "company_logo"
      ]
    },
    "output": "frappe.db.get_value('Company', {'name': 'AlphaBridge Tech'}, 'company_logo')"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "What is the phone number and email address listed for 'Zylor Innovations Pvt Ltd'?",
      "fields": [
        "phone_no",
        "email"
      ]
    },
    "output": "frappe.db.get_value('Company', {'name': 'Zylor Innovations Pvt Ltd'}, ['phone_no', 'email'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which cost center is defined as the default for 'CoreFlex Global Solutions'?",
      "fields": [
        "cost_center"
      ]
    },
    "output": "frappe.db.get_value('Company', {'name': 'CoreFlex Global Solutions'}, 'cost_center')"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Can Galaxy Infotech Ltd create accounts for its child companies?",
      "fields": [
        "name",
        "allow_account_creation_against_child_company"
      ]
    },
    "output": "frappe.db.get_value('Company', {'name': 'Galaxy Infotech Ltd'}, 'allow_account_creation_against_child_company')"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Is Orion Holdings Pvt Ltd set up to allow child companies to have their own accounts?",
      "fields": [
        "name",
        "allow_account_creation_against_child_company"
      ]
    },
    "output": "frappe.db.get_value('Company', {'name': 'Orion Holdings Pvt Ltd'}, 'allow_account_creation_against_child_company')"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Can Lambda Systems Pvt Ltd add accounts under its branch companies?",
      "fields": [
        "name",
        "allow_account_creation_against_child_company"
      ]
    },
    "output": "frappe.db.get_value('Company', {'name': 'Lambda Systems Pvt Ltd'}, 'allow_account_creation_against_child_company')"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "What is the credit limit for Zenith Tech Solutions this year?",
      "fields": [
        "name",
        "credit_limit"
      ]
    },
    "output": "frappe.db.get_value('Company', {'name': 'Zenith Tech Solutions'}, 'credit_limit')"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "What\u2019s the monthly sales target set for Stellar Industries Ltd?",
      "fields": [
        "name",
        "monthly_sales_target"
      ]
    },
    "output": "frappe.db.get_value('Company', {'name': 'Stellar Industries Ltd'}, 'monthly_sales_target')"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Is the perpetual inventory feature turned on for our company stock records?",
      "fields": [
        "is_group",
        "enable_perpetual_inventory"
      ]
    },
    "output": "frappe.db.get_value('Company', {'is_group': 0}, 'enable_perpetual_inventory')"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Have we enabled both perpetual inventory and provisional accounting for stock transactions?",
      "fields": [
        "is_group",
        "enable_perpetual_inventory",
        "enable_provisional_accounting_for_non_stock_items"
      ]
    },
    "output": "frappe.db.get_value('Company', {'is_group': 0}, ['enable_perpetual_inventory', 'enable_provisional_accounting_for_non_stock_items'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Can you check which accounts we use for customer receivables and vendor payables?",
      "fields": [
        "is_group",
        "default_receivable_account",
        "default_payable_account"
      ]
    },
    "output": "frappe.db.get_value('Company', {'is_group': 0}, ['default_receivable_account', 'default_payable_account'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which account do we use for rounding off entries in our financial reports?",
      "fields": [
        "is_group",
        "round_off_account"
      ]
    },
    "output": "frappe.db.get_value('Company', {'is_group': 0}, 'round_off_account')"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List all registered companies in the system.",
      "fields": [
        "name",
        "is_group"
      ]
    },
    "output": "frappe.get_all('Company', filters={'is_group': 0}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies are currently active in our system?",
      "fields": [
        "name",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Company', filters={'is_group': 0, 'disabled': 0}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Can you list all our company branches?",
      "fields": [
        "name",
        "is_group"
      ]
    },
    "output": "frappe.get_all('Company', filters={'is_group': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies have USD as their base currency?",
      "fields": [
        "default_currency"
      ]
    },
    "output": "frappe.get_all('Company', filters={'default_currency': 'USD', 'is_group': 0}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which country is set for each registered company?",
      "fields": [
        "name",
        "country"
      ]
    },
    "output": "frappe.get_all('Company', filters={'is_group': 0}, fields=['name', 'country'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies whose fiscal year starts in April.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.get_all('Company', filters={'is_group': 0, 'fiscal_year_start_date': '04-01'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Companies with fiscal year starting in January?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.get_all('Company', filters={'is_group': 0, 'fiscal_year_start_date': '01-01'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies where multi-currency accounting is enabled.",
      "fields": [
        "name",
        "default_currency"
      ]
    },
    "output": "frappe.get_all('Company', filters={'is_group': 0}, fields=['name', 'default_currency'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies have multi-currency enabled?",
      "fields": [
        "name",
        "default_currency"
      ]
    },
    "output": "frappe.get_all('Company', filters={'is_group': 0}, fields=['name', 'default_currency'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which companies have enabled auto accounting for stock?",
      "fields": [
        "name",
        "auto_accounting_for_stock_settings"
      ]
    },
    "output": "frappe.get_all('Company', filters={'is_group': 0, 'auto_accounting_for_stock_settings': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "List companies where stock auto-accounting is active.",
      "fields": [
        "name",
        "auto_accounting_for_stock_settings"
      ]
    },
    "output": "frappe.get_all('Company', filters={'is_group': 0, 'auto_accounting_for_stock_settings': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Do all companies have tax IDs recorded?",
      "fields": [
        "name",
        "tax_id"
      ]
    },
    "output": "frappe.get_all('Company', filters={'is_group': 0}, fields=['name', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Is a tax ID available for each company?",
      "fields": [
        "name",
        "tax_id"
      ]
    },
    "output": "frappe.get_all('Company', filters={'is_group': 0}, fields=['name', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Show the default cost center for each company.",
      "fields": [
        "name",
        "cost_center",
        "is_group"
      ]
    },
    "output": "frappe.get_all('Company', filters={'is_group': 0}, fields=['name', 'cost_center'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Which fields store company identity and tax settings?",
      "fields": [
        "company_name",
        "tax_id",
        "default_currency"
      ]
    },
    "output": "frappe.get_list('Company', fields=['company_name', 'tax_id', 'default_currency'])"
  },
  {
    "input": {
      "doctype": "Company",
      "question": "Where do I find the accounts configured under each company?",
      "fields": [
        "name",
        "default_bank_account",
        "default_receivable_account",
        "default_payable_account"
      ]
    },
    "output": "frappe.get_list('Company', fields=['name', 'default_bank_account', 'default_receivable_account', 'default_payable_account'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "How much did we spend in February?",
      "fields": [
        "posting_date",
        "grand_total",
        "name"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={'posting_date': ['between', ['2025-02-01', '2025-02-28']]}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "How much money did we spend this month?",
      "fields": [
        "name",
        "posting_date",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={'posting_date': ['>=', frappe.utils.formatdate(frappe.utils.get_first_day(frappe.utils.nowdate()))]}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "What's the total value of all bills for April?",
      "fields": [
        "name",
        "posting_date",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={'posting_date': ['between', ['2025-04-01', '2025-04-30']]}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show all purchases from DEF supplier.",
      "fields": [
        "name",
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={'supplier': 'DEF'}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "How many purchase invoices were submitted by Eastline Supplies?",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.db.count('Purchase Invoice', {'supplier': 'Eastline Supplies'})"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Any purchase invoices submitted by Global Traders?",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.db.exists('Purchase Invoice', {'supplier': 'Global Traders'})"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show purchase invoices from Eastline Supplies created this month.",
      "fields": [
        "supplier",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'supplier': 'Eastline Supplies', 'posting_date': ['>=', frappe.utils.formatdate(frappe.utils.get_first_day(frappe.utils.nowdate()))] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show all purchases from DEF supplier.",
      "fields": [
        "name",
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={'supplier': 'DEF'}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "How many purchase invoices were submitted by Eastline Supplies?",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.db.count('Purchase Invoice', {'supplier': 'Eastline Supplies'})"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Any purchase invoices submitted by Global Traders?",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.db.exists('Purchase Invoice', {'supplier': 'Global Traders'})"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show purchase invoices from Eastline Supplies created this month.",
      "fields": [
        "name",
        "supplier",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'supplier': 'Eastline Supplies', 'posting_date': ['>=', frappe.utils.formatdate(frappe.utils.get_first_day(frappe.utils.nowdate()))] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "List invoices where discount was applied on Grand Total.",
      "fields": [
        "name",
        "apply_discount_on"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'apply_discount_on': 'Grand Total' }, fields=['name', 'apply_discount_on'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show invoices that ignored the default payment terms template.",
      "fields": [
        "name",
        "ignore_default_payment_terms_template"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'ignore_default_payment_terms_template': 1 }, fields=['name', 'ignore_default_payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Find invoices where the supplier is internal.",
      "fields": [
        "name",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'is_internal_supplier': 1 }, fields=['name', 'is_internal_supplier'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Which invoices represent another company?",
      "fields": [
        "name",
        "represents_company"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'represents_company': ['!=', ''] }, fields=['name', 'represents_company'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "List invoices where posting time was manually set.",
      "fields": [
        "name",
        "set_posting_time"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'set_posting_time': 1 }, fields=['name', 'set_posting_time'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show all invoices with payment schedule including due dates.",
      "fields": [
        "name",
        "payment_schedule"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'payment_schedule': ['!=', ''] }, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Which invoices include items delivered to 'Doha Stockyard'?",
      "fields": [
        "name",
        "items"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT parent FROM `tabPurchase Invoice Item` WHERE warehouse = 'Doha Stockyard'\"\"\")"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "List invoices that contain item code 'ITM-9003'.",
      "fields": [
        "name",
        "items"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT parent FROM `tabPurchase Invoice Item` WHERE item_code = 'ITM-9003'\"\"\")"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show invoices where tax charge type is 'On Net Total'.",
      "fields": [
        "name",
        "taxes"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT parent FROM `tabPurchase Taxes and Charges` WHERE charge_type = 'On Net Total'\"\"\")"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Find invoices where tax withholding category is 'Professional Fees'.",
      "fields": [
        "name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'tax_withholding_category': 'Professional Fees' }, fields=['name', 'tax_withholding_category'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Which invoices used exchange rate based on transaction date?",
      "fields": [
        "name",
        "use_transaction_date_exchange_rate"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'use_transaction_date_exchange_rate': 1 }, fields=['name', 'use_transaction_date_exchange_rate'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show invoices using cost center 'Operations Gulf'.",
      "fields": [
        "name",
        "cost_center"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'cost_center': 'Operations Gulf' }, fields=['name', 'cost_center'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Find invoices where write-off cost center is set.",
      "fields": [
        "name",
        "write_off_cost_center"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'write_off_cost_center': ['!=', ''] }, fields=['name', 'write_off_cost_center'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "List invoices with withheld tax vouchers applied.",
      "fields": [
        "name",
        "tax_withheld_vouchers"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'tax_withheld_vouchers': ['!=', ''] }, fields=['name', 'tax_withheld_vouchers'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show invoices billed with Bill No INV-789 from Eastern Supplies.",
      "fields": [
        "name",
        "bill_no",
        "supplier"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'supplier': 'Eastern Supplies', 'bill_no': 'INV-789' }, fields=['name', 'bill_no', 'supplier'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Which invoices have stock update enabled?",
      "fields": [
        "name",
        "update_stock"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'update_stock': 1 }, fields=['name', 'update_stock'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "List all invoices that used the buying price list 'Wholesale Rates'.",
      "fields": [
        "name",
        "buying_price_list"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'buying_price_list': 'Wholesale Rates' }, fields=['name', 'buying_price_list'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Which invoices are associated with a subscription?",
      "fields": [
        "name",
        "subscription"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'subscription': ['!=', ''] }, fields=['name', 'subscription'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Find invoices where discount amount exceeded 5000.",
      "fields": [
        "name",
        "discount_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'discount_amount': ['>', 5000] }, fields=['name', 'discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What was our quarterly sales revenue trend for the last 2 years?",
      "fields": [
        "posting_date",
        "base_net_total"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT YEAR(posting_date) AS year, QUARTER(posting_date) AS quarter, SUM(base_net_total) AS total_sales FROM `tabSales Invoice` WHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR) GROUP BY year, quarter ORDER BY year, quarter\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which region generated the highest revenue in 2023?",
      "fields": [
        "territory",
        "base_net_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT territory, SUM(base_net_total) AS revenue FROM `tabSales Invoice` WHERE YEAR(posting_date) = 2023 GROUP BY territory ORDER BY revenue DESC LIMIT 1\"\"\")"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Item",
      "question": "How did the average cost of steel fluctuate in the past year?",
      "fields": [
        "item_code",
        "rate",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT MONTH(posting_date) AS month, AVG(rate) AS avg_price FROM `tabPurchase Invoice Item` WHERE item_code = 'Steel' AND posting_date >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH) GROUP BY month ORDER BY month\"\"\")"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Which supplier charged us the highest shipping costs last year?",
      "fields": [
        "supplier",
        "shipping_rule",
        "base_total_taxes_and_charges",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT supplier, SUM(base_total_taxes_and_charges) AS total_shipping FROM `tabPurchase Invoice` WHERE YEAR(posting_date) = YEAR(CURDATE()) - 1 GROUP BY supplier ORDER BY total_shipping DESC LIMIT 1\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Invoice Item",
      "question": "Show top 5 products by revenue contribution in the current year.",
      "fields": [
        "item_code",
        "amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT item_code, SUM(amount) AS revenue FROM `tabSales Invoice Item` WHERE YEAR(posting_date) = YEAR(CURDATE()) GROUP BY item_code ORDER BY revenue DESC LIMIT 5\"\"\")"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Item",
      "question": "Which items have increased in price by more than 10% in the last 6 months?",
      "fields": [
        "item_code",
        "rate",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT item_code FROM `tabPurchase Invoice Item` WHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY item_code HAVING (MAX(rate) - MIN(rate))/MIN(rate) > 0.1\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were overdue in Q1 2024?",
      "fields": [
        "due_date",
        "status",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT COUNT(*) FROM `tabSales Invoice` WHERE status = 'Overdue' AND QUARTER(posting_date) = 1 AND YEAR(posting_date) = 2024\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What was the average discount offered per customer in 2023?",
      "fields": [
        "customer",
        "discount_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT customer, AVG(discount_amount) AS avg_discount FROM `tabSales Invoice` WHERE YEAR(posting_date) = 2023 GROUP BY customer\"\"\")"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "How much did we spend on imported goods last quarter?",
      "fields": [
        "is_internal_supplier",
        "base_net_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT SUM(base_net_total) AS imported_spending FROM `tabPurchase Invoice` WHERE is_internal_supplier = 0 AND QUARTER(posting_date) = QUARTER(CURDATE()) - 1 AND YEAR(posting_date) = YEAR(CURDATE())\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which salespersons exceeded their target in H1 2024?",
      "fields": [
        "sales_person",
        "net_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT st.sales_person, SUM(si.net_total) AS total_sales FROM `tabSales Team` st JOIN `tabSales Invoice` si ON st.parent = si.name WHERE si.posting_date BETWEEN '2024-01-01' AND '2024-06-30' GROUP BY st.sales_person HAVING total_sales > st.allocated_target\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which item had the highest return rate in the last 6 months?",
      "fields": [
        "item_code",
        "returned_qty",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT item_code, SUM(returned_qty) as total_returned FROM `tabSales Invoice Item` WHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY item_code ORDER BY total_returned DESC LIMIT 1\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What was our best-selling category in Q2?",
      "fields": [
        "item_group",
        "qty",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT item_group, SUM(qty) as total_sold FROM `tabSales Invoice Item` WHERE QUARTER(posting_date) = 2 GROUP BY item_group ORDER BY total_sold DESC LIMIT 1\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How much profit did we make on mango sales last year?",
      "fields": [
        "item_code",
        "net_profit",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT SUM(si.base_net_total - si.total_expense) as profit FROM `tabSales Invoice` si JOIN `tabSales Invoice Item` sii ON si.name = sii.parent WHERE sii.item_code = 'Mango' AND YEAR(si.posting_date) = YEAR(CURDATE()) - 1\"\"\")"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Item",
      "question": "Can you show price trends for tomato purchases over the past 3 years?",
      "fields": [
        "item_code",
        "rate",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT YEAR(posting_date) as year, MONTH(posting_date) as month, AVG(rate) as avg_price FROM `tabPurchase Invoice Item` WHERE item_code = 'Tomato' AND posting_date >= DATE_SUB(CURDATE(), INTERVAL 3 YEAR) GROUP BY year, month ORDER BY year, month\"\"\")"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Compare our operating margin for the last 4 quarters.",
      "fields": [
        "posting_date",
        "net_total",
        "operating_cost"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT QUARTER(posting_date) as quarter, SUM(net_total - operating_cost)/SUM(net_total) as margin FROM `tabSales Invoice` WHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH) GROUP BY quarter ORDER BY quarter\"\"\")"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "How much GST did we pay to each supplier last financial year?",
      "fields": [
        "supplier",
        "taxes",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT supplier, SUM(base_total_taxes_and_charges) as gst_paid FROM `tabPurchase Invoice` WHERE posting_date BETWEEN CONCAT(YEAR(CURDATE())-1, '-04-01') AND CONCAT(YEAR(CURDATE()), '-03-31') GROUP BY supplier\"\"\")"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "What was the impact of exchange rate variation on our net income in 2024?",
      "fields": [
        "conversion_rate",
        "net_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT SUM((conversion_rate - 1) * net_total) as exchange_loss FROM `tabPurchase Invoice` WHERE YEAR(posting_date) = 2024\"\"\")"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Which suppliers gave us the biggest discounts in 2023?",
      "fields": [
        "supplier",
        "discount_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT supplier, SUM(discount_amount) as total_discount FROM `tabPurchase Invoice` WHERE YEAR(posting_date) = 2023 GROUP BY supplier ORDER BY total_discount DESC LIMIT 5\"\"\")"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Item",
      "question": "Did our average purchase price for office chairs go up or down over 2022?",
      "fields": [
        "item_code",
        "rate",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT MONTH(posting_date) as month, AVG(rate) as avg_rate FROM `tabPurchase Invoice Item` WHERE item_code = 'Office Chair' AND YEAR(posting_date) = 2022 GROUP BY month ORDER BY month\"\"\")"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Which customer made the highest number of repeat purchases?",
      "fields": [
        "customer",
        "name"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT customer, COUNT(*) as repeat_orders FROM `tabSales Invoice` GROUP BY customer HAVING repeat_orders > 1 ORDER BY repeat_orders DESC LIMIT 1\"\"\")"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Which invoices used warehouse 'Central Warehouse'?",
      "fields": [
        "name",
        "set_warehouse"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'set_warehouse': 'Central Warehouse' }, fields=['name', 'set_warehouse'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "List invoices created from naming series PINV-2025-.",
      "fields": [
        "name",
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'naming_series': 'PINV-2025-' }, fields=['name', 'naming_series'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show invoices with auto repeat enabled.",
      "fields": [
        "name",
        "auto_repeat"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'auto_repeat': ['!=', ''] }, fields=['name', 'auto_repeat'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Which invoices were marked as opening balances?",
      "fields": [
        "name",
        "is_opening"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'is_opening': 'Yes' }, fields=['name', 'is_opening'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "List invoices with foreign exchange loss accounts assigned.",
      "fields": [
        "name",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'unrealized_profit_loss_account': ['!=', ''] }, fields=['name', 'unrealized_profit_loss_account'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show invoices that applied a payment terms template.",
      "fields": [
        "name",
        "payment_terms_template"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'payment_terms_template': ['!=', ''] }, fields=['name', 'payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Which invoices were delivered to 'Doha Warehouse Address'?",
      "fields": [
        "name",
        "shipping_address"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'shipping_address': 'Doha Warehouse Address' }, fields=['name', 'shipping_address'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Find invoices with PLC conversion rate above 1.25.",
      "fields": [
        "name",
        "plc_conversion_rate"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'plc_conversion_rate': ['>', 1.25] }, fields=['name', 'plc_conversion_rate'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Which invoices have terms and conditions applied?",
      "fields": [
        "name",
        "tc_name",
        "terms"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'tc_name': ['!=', ''] }, fields=['name', 'tc_name', 'terms'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show invoices billed to contact person 'Mohammed Ali'.",
      "fields": [
        "name",
        "contact_person"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'contact_person': 'Mohammed Ali' }, fields=['name', 'contact_person'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Which invoices were created by Global Traders and are still unpaid?",
      "fields": [
        "name",
        "supplier",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'supplier': 'Global Traders', 'outstanding_amount': ['>', 0] }, fields=['name', 'supplier', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "How much total quantity did we receive in January 2025?",
      "fields": [
        "total_qty"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT SUM(total_qty) FROM `tabPurchase Invoice` WHERE posting_date BETWEEN '2025-01-01' AND '2025-01-31'\"\"\")"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show me invoices that have a rounding adjustment.",
      "fields": [
        "name",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'rounding_adjustment': ['!=', 0] }, fields=['name', 'rounding_adjustment'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "List purchase invoices that were marked as returns.",
      "fields": [
        "name",
        "is_return",
        "return_against"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'is_return': 1 }, fields=['name', 'is_return', 'return_against'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Find all invoices with total tax deducted over 10,000.",
      "fields": [
        "name",
        "total_taxes_and_charges"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'total_taxes_and_charges': ['>', 10000] }, fields=['name', 'total_taxes_and_charges'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Which invoices are tagged to the project 'Skyline Phase 2'?",
      "fields": [
        "name",
        "project"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'project': 'Skyline Phase 2' }, fields=['name', 'project'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "How many invoices used the pricing rule mechanism?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.count('Purchase Invoice', filters={ 'pricing_rules': ['!=', ''] })"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Give me invoices from last year where currency is EUR.",
      "fields": [
        "name",
        "currency",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'currency': 'EUR', 'posting_date': ['between', ['2024-01-01', '2024-12-31']] }, fields=['name', 'currency', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "List all invoices where write-off amount was applied.",
      "fields": [
        "name",
        "write_off_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'write_off_amount': ['>', 0] }, fields=['name', 'write_off_amount'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "What are the top 3 suppliers by total grand total billed this year?",
      "fields": [
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT supplier, SUM(grand_total) AS total FROM `tabPurchase Invoice` WHERE posting_date >= '2025-01-01' GROUP BY supplier ORDER BY total DESC LIMIT 3\"\"\")"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show purchase invoices from Eastline Supplies created this month.",
      "fields": [
        "name",
        "supplier",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'supplier': 'Eastline Supplies', 'posting_date': ['>=', frappe.utils.get_first_day(frappe.utils.nowdate())] }, fields=['name', 'supplier', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "List all unpaid purchase invoices.",
      "fields": [
        "name",
        "supplier",
        "due_date",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'outstanding_amount': ['>', 0] }, fields=['name', 'supplier', 'due_date', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Which supplier billed us the highest amount last quarter?",
      "fields": [
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT supplier, SUM(grand_total) AS total FROM `tabPurchase Invoice` WHERE posting_date BETWEEN %s AND %s GROUP BY supplier ORDER BY total DESC LIMIT 1\"\"\", (frappe.utils.get_first_day(frappe.utils.add_months(frappe.utils.nowdate(), -3)), frappe.utils.nowdate()))"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "What is the grand total for invoice PINV-00421?",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.get_value('Purchase Invoice', 'PINV-00421', 'grand_total')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "How many purchase invoices did we create last month?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.count('Purchase Invoice', filters={ 'posting_date': ['between', [frappe.utils.add_months(frappe.utils.get_first_day(frappe.utils.nowdate()), -1), frappe.utils.add_days(frappe.utils.get_first_day(frappe.utils.nowdate()), -1)] ] })"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "List all purchase invoices where total amount is above 1,00,000.",
      "fields": [
        "name",
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'grand_total': ['>', 100000] }, fields=['name', 'supplier', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show invoices that were paid using cash.",
      "fields": [
        "name",
        "mode_of_payment",
        "paid_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'mode_of_payment': 'Cash' }, fields=['name', 'mode_of_payment', 'paid_amount'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Which invoices applied a discount greater than 10%?",
      "fields": [
        "name",
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'additional_discount_percentage': ['>', 10] }, fields=['name', 'additional_discount_percentage'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "List all invoices for project Alpha Build with outstanding amounts.",
      "fields": [
        "name",
        "project",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'project': 'Alpha Build', 'outstanding_amount': ['>', 0] }, fields=['name', 'project', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show me purchase invoices where TDS was applied.",
      "fields": [
        "name",
        "apply_tds",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice', filters={ 'apply_tds': 1 }, fields=['name', 'apply_tds', 'tax_withholding_category'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show all purchases from DEF supplier.",
      "fields": [
        "supplier",
        "name"
      ]
    },
    "output": "frappe.db.get_list('Purchase Invoice', filters={'supplier': 'DEF'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "How many purchase invoices were submitted by Eastline Supplies?",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.db.count('Purchase Invoice', filters={'supplier': 'Eastline Supplies'})"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Any purchase invoices submitted by Global Traders?",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.db.exists('Purchase Invoice', {'supplier': 'Global Traders'})"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show purchase invoices from Eastline Supplies created this month.",
      "fields": [
        "supplier",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.get_list('Purchase Invoice', filters={'supplier': 'Eastline Supplies', 'posting_date': ['>=', frappe.utils.get_first_day(frappe.utils.nowdate())]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show purchase invoices worth $12,000 posted this month.",
      "fields": [
        "grand_total",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.get_list('Purchase Invoice', filters={ 'grand_total': 12000, 'posting_date': ['>=', frappe.utils.get_first_day(frappe.utils.nowdate())]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Confirm if Redwood Industries sent a purchase invoice worth $12,000.",
      "fields": [
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.db.exists('Purchase Invoice', {'supplier': 'Redwood Industries', 'grand_total': 12000})"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "What's the due date for invoice `PINV-00567`?",
      "fields": [
        "due_date"
      ]
    },
    "output": "frappe.db.get_value('Purchase Invoice', 'PINV-00567', 'due_date')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "When is payment due for purchase invoice `PINV-00987`?",
      "fields": [
        "due_date"
      ]
    },
    "output": "frappe.db.get_value('Purchase Invoice', 'PINV-00987', 'due_date')"
  },
  {
    "doctype": "Quotation",
    "question": "Which quotations are set to expire before January 1, 2025?",
    "fields": [
      "name",
      "valid_till"
    ],
    "output": "frappe.get_list('Quotation', filters={ 'valid_till': ['<', '2025-01-01'] }, fields=['name', 'valid_till'])"
  },
  {
    "doctype": "Quotation",
    "question": "Get quotations with incoterm 'CIF' and shipping address containing 'Mumbai'.",
    "fields": [
      "name",
      "incoterm",
      "shipping_address"
    ],
    "output": "frappe.get_list('Quotation', filters={ 'incoterm': 'CIF', 'shipping_address': ['like', '%Mumbai%'] }, fields=['name', 'incoterm', 'shipping_address'])"
  },
  {
    "doctype": "Quotation",
    "question": "Which quotations have a referral sales partner and a discount percentage above 5%?",
    "fields": [
      "name",
      "referral_sales_partner",
      "additional_discount_percentage"
    ],
    "output": "frappe.get_list('Quotation', filters={ 'referral_sales_partner': ['!=', ''], 'additional_discount_percentage': ['>', 5] }, fields=['name', 'additional_discount_percentage'])"
  },
  {
    "doctype": "Quotation",
    "question": "Show all quotations valid within January 2025.",
    "fields": [
      "name",
      "valid_till"
    ],
    "output": "frappe.get_list('Quotation', filters={ 'valid_till': ['between', ['2025-01-01', '2025-01-31']] }, fields=['name', 'valid_till'])"
  },
  {
    "input": {
      "doctype": "Quotation",
      "question": "How do I create a quotation for a new customer?",
      "fields": [
        "quotation_to",
        "party_name",
        "customer_name",
        "transaction_date",
        "valid_till",
        "order_type"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'Quotation', 'quotation_to': 'Customer', 'party_name': 'New Customer', 'transaction_date': frappe.utils.today(), 'order_type': 'Sales' }).insert()"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "How can I enter a quotation received from a supplier?",
      "fields": [
        "supplier",
        "transaction_date",
        "items",
        "valid_till",
        "company"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'Supplier Quotation', 'supplier': 'ABC Traders', 'transaction_date': frappe.utils.today(), 'company': 'HTS Pvt Ltd', 'valid_till': '2025-05-31', 'items': [] }).insert()"
  },
  {
    "input": {
      "doctype": "Attendance",
      "question": "How do I access employee attendance records for March?",
      "fields": [
        "employee",
        "attendance_date",
        "status"
      ]
    },
    "output": "frappe.get_list('Attendance', filters={ 'attendance_date': ['between', ['2025-03-01', '2025-03-31']] })"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "View all active purchase invoices received from suppliers.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_list('Purchase Invoice', filters={ 'status': 'Unpaid' })"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Show all overdue customer payments this month.",
      "fields": [
        "party_type",
        "party",
        "due_date",
        "status"
      ]
    },
    "output": "frappe.get_list('Payment Entry', filters={ 'party_type': 'Customer', 'due_date': ['<', frappe.utils.today()], 'status': 'Unpaid' })"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Show all stock movements for item 'Widget-X200' in warehouse 'Main Store'.",
      "fields": [
        "item_code",
        "warehouse",
        "posting_date",
        "actual_qty"
      ]
    },
    "output": "frappe.get_list('Stock Ledger Entry', filters={ 'item_code': 'Widget-X200', 'warehouse': 'Main Store' }, fields=['posting_date', 'actual_qty'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Get valuation rate changes for 'Product Y' over the last 30 days.",
      "fields": [
        "item_code",
        "posting_date",
        "valuation_rate"
      ]
    },
    "output": "frappe.get_list('Stock Ledger Entry', filters={ 'item_code': 'Product Y', 'posting_date': ['>=', frappe.utils.add_days(frappe.utils.today(), -30)] }, fields=['posting_date', 'valuation_rate'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "List all stock entries posted after June 1, 2025 for item 'ITEM-888'.",
      "fields": [
        "item_code",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Stock Ledger Entry', filters={'item_code': 'ITEM-888', 'posting_date': ['>', '2025-06-01']}, fields=['name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Get all entries for 'ITEM-5001' in 'Main Warehouse' during March 2025.",
      "fields": [
        "item_code",
        "warehouse",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Stock Ledger Entry', filters={'item_code': 'ITEM-5001', 'warehouse': 'Main Warehouse', 'posting_date': ['between', ['2025-03-01', '2025-03-31']]}, fields=['item_code', 'posting_date', 'actual_qty', 'warehouse'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Show me the actual quantity posted in the last entry for item 'ABC-9000'.",
      "fields": [
        "item_code",
        "actual_qty",
        "posting_datetime"
      ]
    },
    "output": "frappe.get_list('Stock Ledger Entry', filters={'item_code': 'ABC-9000'}, fields=['actual_qty'], order_by='posting_datetime desc', limit=1)"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Find if any entries exist with negative stock value and cancelled status.",
      "fields": [
        "stock_value",
        "is_cancelled"
      ]
    },
    "output": "frappe.db.exists('Stock Ledger Entry', {'stock_value': ['<', 0], 'is_cancelled': 1})"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Count how many valuation rates exceeded 1000 this year for 'ITEM-777'.",
      "fields": [
        "valuation_rate",
        "item_code",
        "posting_date"
      ]
    },
    "output": "frappe.db.count('Stock Ledger Entry', {'item_code': 'ITEM-777', 'valuation_rate': ['>', 1000], 'posting_date': ['>=', '2025-01-01']})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "List all purchase orders from 'ABC Traders'.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.get_list('Purchase Order', filters={'supplier': 'ABC Traders'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Show me orders placed in April 2025.",
      "fields": [
        "transaction_date"
      ]
    },
    "output": "frappe.get_list('Purchase Order', filters={ 'transaction_date': ['between', ['2025-04-01', '2025-04-30']] }, fields=['name', 'transaction_date'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Get the grand total of order 'PO-00045'.",
      "fields": [
        "name",
        "grand_total"
      ]
    },
    "output": "frappe.db.get_value('Purchase Order', 'PO-00045', 'grand_total')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Was any order created with negative advance paid?",
      "fields": [
        "advance_paid"
      ]
    },
    "output": "frappe.db.exists('Purchase Order', {'advance_paid': ['<', 0]})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "How many orders were placed by 'john@example.com'?",
      "fields": [
        "owner"
      ]
    },
    "output": "frappe.db.count('Purchase Order', {'owner': 'john@example.com'})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Show all cancelled purchase orders.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_list('Purchase Order', filters={'status': 'Cancelled'}, fields=['name', 'status'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Are there any draft orders with grand total over 1 million?",
      "fields": [
        "docstatus",
        "grand_total"
      ]
    },
    "output": "frappe.db.exists('Purchase Order', {'docstatus': 0, 'grand_total': ['>', 1000000]})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Count purchase orders with currency 'EUR'.",
      "fields": [
        "currency"
      ]
    },
    "output": "frappe.db.count('Purchase Order', {'currency': 'EUR'})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Find all orders created today.",
      "fields": [
        "transaction_date"
      ]
    },
    "output": "frappe.get_list('Purchase Order', filters={'transaction_date': frappe.utils.today()}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "List orders scheduled after January 1, 2026.",
      "fields": [
        "schedule_date"
      ]
    },
    "output": "frappe.get_list('Purchase Order', filters={'schedule_date': ['>', '2026-01-01']}, fields=['name', 'schedule_date'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Get supplier name for PO-1002.",
      "fields": [
        "name",
        "supplier"
      ]
    },
    "output": "frappe.db.get_value('Purchase Order', 'PO-1002', 'supplier')"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Were any orders billed more than 100%?",
      "fields": [
        "per_billed"
      ]
    },
    "output": "frappe.db.exists('Purchase Order', {'per_billed': ['>', 100]})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Count all submitted purchase orders.",
      "fields": [
        "docstatus"
      ]
    },
    "output": "frappe.db.count('Purchase Order', {'docstatus': 1})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "List all orders using buying price list 'Premium'.",
      "fields": [
        "buying_price_list"
      ]
    },
    "output": "frappe.get_list('Purchase Order', filters={'buying_price_list': 'Premium'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Check if any PO was submitted with 0 grand total.",
      "fields": [
        "docstatus",
        "grand_total"
      ]
    },
    "output": "frappe.db.exists('Purchase Order', {'docstatus': 1, 'grand_total': 0})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Find orders with tax charges above 5000.",
      "fields": [
        "total_taxes_and_charges"
      ]
    },
    "output": "frappe.get_list('Purchase Order', filters={'total_taxes_and_charges': ['>', 5000]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Are there any orders from supplier 'XYZ Ltd' with schedule date in 2023?",
      "fields": [
        "supplier",
        "schedule_date"
      ]
    },
    "output": "frappe.db.exists('Purchase Order', {'supplier': 'XYZ Ltd', 'schedule_date': ['between', ['2023-01-01', '2023-12-31']]})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Which orders had zero advance paid and no tax charges?",
      "fields": [
        "advance_paid",
        "total_taxes_and_charges"
      ]
    },
    "output": "frappe.get_list('Purchase Order', filters={'advance_paid': 0, 'total_taxes_and_charges': 0}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Did we create any order for company 'HTS Gulf' in 2025?",
      "fields": [
        "company",
        "transaction_date"
      ]
    },
    "output": "frappe.db.exists('Purchase Order', {'company': 'HTS Gulf', 'transaction_date': ['between', ['2025-01-01', '2025-12-31']]})"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Get orders billed exactly 0%.",
      "fields": [
        "per_billed"
      ]
    },
    "output": "frappe.get_list('Purchase Order', filters={'per_billed': 0}, fields=['name', 'per_billed'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Which item and warehouse combinations had more than one entry on the same date?",
      "fields": [
        "item_code",
        "warehouse",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT item_code, warehouse, posting_date FROM `tabStock Ledger Entry` GROUP BY item_code, warehouse, posting_date HAVING COUNT(*) > 1\")"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Give me all voucher numbers for transactions made today with adjustment entries.",
      "fields": [
        "voucher_no",
        "is_adjustment_entry",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Stock Ledger Entry', filters={'is_adjustment_entry': 1, 'posting_date': frappe.utils.today()}, fields=['voucher_no'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Which items had negative actual quantity movement this week in 'Raw Material WH'?",
      "fields": [
        "item_code",
        "actual_qty",
        "posting_date",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code FROM `tabStock Ledger Entry` WHERE actual_qty < 0 AND warehouse = 'Raw Material WH' AND WEEK(posting_date) = WEEK(CURDATE())')"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Was any transaction created by user 'john.doe@hts.com' in the last 7 days?",
      "fields": [
        "owner",
        "creation"
      ]
    },
    "output": "frappe.db.exists('Stock Ledger Entry', {'owner': 'john.doe@hts.com', 'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -7)]})"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "How many distinct warehouses handled 'ITEM-X' in Q1 2025?",
      "fields": [
        "item_code",
        "warehouse",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT COUNT(DISTINCT warehouse) FROM `tabStock Ledger Entry` WHERE item_code = 'ITEM-X' AND posting_date BETWEEN '2025-01-01' AND '2025-03-31'\")"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Show all entries with auto-created serial batches but zero quantity movement.",
      "fields": [
        "auto_created_serial_and_batch_bundle",
        "actual_qty"
      ]
    },
    "output": "frappe.get_all('Stock Ledger Entry', filters={'auto_created_serial_and_batch_bundle': 1, 'actual_qty': 0}, fields=['item_code', 'voucher_no'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Give the stock value difference for the latest entry in project 'P-RENEW'.",
      "fields": [
        "project",
        "stock_value_difference",
        "posting_datetime"
      ]
    },
    "output": "frappe.get_list('Stock Ledger Entry', filters={'project': 'P-RENEW'}, fields=['stock_value_difference'], order_by='posting_datetime desc', limit=1)"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Show me all stock ledger entries for 'ITEM-001' that had more than 500 units received in the last 15 days.",
      "fields": [
        "item_code",
        "actual_qty",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Stock Ledger Entry', filters={'item_code': 'ITEM-001', 'actual_qty': ['>', 500], 'posting_date': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -15)]}, fields=['item_code', 'posting_date', 'actual_qty'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "List items where outgoing rate was zero but incoming rate was positive.",
      "fields": [
        "incoming_rate",
        "outgoing_rate"
      ]
    },
    "output": "frappe.db.sql(\"SELECT item_code FROM `tabStock Ledger Entry` WHERE outgoing_rate = 0 AND incoming_rate > 0\")"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Get the latest entry for item 'ITEM-999' with its posting date and actual quantity.",
      "fields": [
        "item_code",
        "posting_date",
        "actual_qty"
      ]
    },
    "output": "frappe.get_list('Stock Ledger Entry', filters={'item_code': 'ITEM-999'}, fields=['posting_date', 'actual_qty'], order_by='posting_date desc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Did we have any negative stock values after adjustment entries last week?",
      "fields": [
        "stock_value",
        "is_adjustment_entry",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT item_code FROM `tabStock Ledger Entry` WHERE is_adjustment_entry = 1 AND posting_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE() AND stock_value < 0\")"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Find entries where fiscal year is not matching with posting date.",
      "fields": [
        "posting_date",
        "fiscal_year"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name FROM `tabStock Ledger Entry` WHERE YEAR(posting_date) NOT LIKE CONCAT('%', fiscal_year, '%')\")"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "List entries having more than 10% difference in incoming and outgoing rates.",
      "fields": [
        "incoming_rate",
        "outgoing_rate"
      ]
    },
    "output": "frappe.db.sql(\"SELECT item_code FROM `tabStock Ledger Entry` WHERE ABS(incoming_rate - outgoing_rate) / incoming_rate > 0.1\")"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Which batches had movement recorded this week with valuation rate above 200?",
      "fields": [
        "batch_no",
        "posting_date",
        "valuation_rate"
      ]
    },
    "output": "frappe.get_all('Stock Ledger Entry', filters={'valuation_rate': ['>', 200], 'posting_date': ['between', [frappe.utils.add_days(frappe.utils.nowdate(), -7), frappe.utils.nowdate()]]}, fields=['batch_no', 'item_code'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Give me the total stock value difference this year for company 'Gulf Traders'.",
      "fields": [
        "stock_value_difference",
        "company",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT SUM(stock_value_difference) FROM `tabStock Ledger Entry` WHERE company = 'Gulf Traders' AND posting_date >= '2025-01-01'\")"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Get the latest entry for item 'ITEM-999' with its posting date and actual quantity.",
      "fields": [
        "item_code",
        "posting_date",
        "actual_qty"
      ]
    },
    "output": "frappe.get_list('Stock Ledger Entry', filters={'item_code': 'ITEM-999'}, fields=['posting_date', 'actual_qty'], order_by='posting_date desc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Did we have any negative stock values after adjustment entries last week?",
      "fields": [
        "stock_value",
        "is_adjustment_entry",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT item_code FROM `tabStock Ledger Entry` WHERE is_adjustment_entry = 1 AND posting_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE() AND stock_value < 0\")"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Find entries where fiscal year is not matching with posting date.",
      "fields": [
        "posting_date",
        "fiscal_year"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name FROM `tabStock Ledger Entry` WHERE YEAR(posting_date) NOT LIKE CONCAT('%', fiscal_year, '%')\")"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "List entries having more than 10% difference in incoming and outgoing rates.",
      "fields": [
        "incoming_rate",
        "outgoing_rate"
      ]
    },
    "output": "frappe.db.sql(\"SELECT item_code FROM `tabStock Ledger Entry` WHERE ABS(incoming_rate - outgoing_rate) / incoming_rate > 0.1\")"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Which batches had movement recorded this week with valuation rate above 200?",
      "fields": [
        "batch_no",
        "posting_date",
        "valuation_rate"
      ]
    },
    "output": "frappe.get_all('Stock Ledger Entry', filters={'valuation_rate': ['>', 200], 'posting_date': ['between', [frappe.utils.add_days(frappe.utils.nowdate(), -7), frappe.utils.nowdate()]]}, fields=['batch_no', 'item_code'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Give me the total stock value difference this year for company 'Gulf Traders'.",
      "fields": [
        "stock_value_difference",
        "company",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT SUM(stock_value_difference) FROM `tabStock Ledger Entry` WHERE company = 'Gulf Traders' AND posting_date >= '2025-01-01'\")"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "How many entries were posted by 'manager@demo.com' in the past 7 days?",
      "fields": [
        "owner",
        "posting_date"
      ]
    },
    "output": "frappe.db.count('Stock Ledger Entry', {'owner': 'manager@demo.com', 'posting_date': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -7)]})"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Which stock entries had serial numbers present but batch number missing and were created in 2025?",
      "fields": [
        "serial_no",
        "batch_no",
        "creation"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code FROM `tabStock Ledger Entry` WHERE serial_no IS NOT NULL AND (batch_no IS NULL OR batch_no = \\'\\') AND YEAR(creation) = 2025')"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "What entries were auto-created with serial/batch bundles and linked to 'Stock Reconciliation' vouchers?",
      "fields": [
        "auto_created_serial_and_batch_bundle",
        "voucher_type"
      ]
    },
    "output": "frappe.get_all('Stock Ledger Entry', filters={'auto_created_serial_and_batch_bundle': 1, 'voucher_type': 'Stock Reconciliation'}, fields=['item_code', 'warehouse'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "List all entries where qty after transaction is negative and valuation rate is zero.",
      "fields": [
        "qty_after_transaction",
        "valuation_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code FROM `tabStock Ledger Entry` WHERE qty_after_transaction < 0 AND valuation_rate = 0')"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Get entries with batch number starting with 'BATCH2025' in January 2025.",
      "fields": [
        "batch_no",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Stock Ledger Entry', filters=[['batch_no', 'like', 'BATCH2025%'], ['posting_date', '>=', '2025-01-01'], ['posting_date', '<=', '2025-01-31']], fields=['item_code', 'stock_value'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "List all entries with adjustment entry marked true and incoming rate above 100.",
      "fields": [
        "is_adjustment_entry",
        "incoming_rate"
      ]
    },
    "output": "frappe.get_all('Stock Ledger Entry', filters={'is_adjustment_entry': 1, 'incoming_rate': ['>', 100]}, fields=['item_code', 'incoming_rate'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Get all entries for item 'ITEM-00023' in fiscal year 2024-2025.",
      "fields": [
        "item_code",
        "fiscal_year"
      ]
    },
    "output": "frappe.get_all('Stock Ledger Entry', filters={'item_code': 'ITEM-00023', 'fiscal_year': '2024-2025'}, fields=['warehouse', 'actual_qty', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "How many stock ledger entries were posted on weekends?",
      "fields": [
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM `tabStock Ledger Entry` WHERE DAYOFWEEK(posting_date) IN (1,7)')"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Which warehouses received items with valuation rate higher than outgoing rate last month?",
      "fields": [
        "warehouse",
        "valuation_rate",
        "outgoing_rate",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT DISTINCT warehouse FROM `tabStock Ledger Entry` WHERE valuation_rate > outgoing_rate AND MONTH(posting_date) = MONTH(CURDATE() - INTERVAL 1 MONTH)')"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "What items were posted by 'stock.manager@example.com' with stock value difference over 5000?",
      "fields": [
        "owner",
        "stock_value_difference"
      ]
    },
    "output": "frappe.db.sql(\"SELECT item_code FROM `tabStock Ledger Entry` WHERE owner = 'stock.manager@example.com' AND stock_value_difference > 5000\")"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Show entries where recalculation was done and the project field is not empty.",
      "fields": [
        "recalculate_rate",
        "project"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code FROM `tabStock Ledger Entry` WHERE recalculate_rate = 1 AND project IS NOT NULL')"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "List all serial numbers used in stock entries posted yesterday.",
      "fields": [
        "serial_no",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT serial_no FROM `tabStock Ledger Entry` WHERE DATE(posting_date) = CURDATE() - INTERVAL 1 DAY')"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Give all entries for batch 'BATCH-ALPHA-01' where actual qty is not zero.",
      "fields": [
        "batch_no",
        "actual_qty"
      ]
    },
    "output": "frappe.get_all('Stock Ledger Entry', filters={'batch_no': 'BATCH-ALPHA-01', 'actual_qty': ['!=', 0]}, fields=['item_code', 'warehouse'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Were there any items where valuation rate dropped after incoming?",
      "fields": [
        "item_code",
        "valuation_rate",
        "incoming_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code FROM `tabStock Ledger Entry` WHERE incoming_rate > valuation_rate')"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Which stock entries had serial numbers present but batch number missing and were created in 2025?",
      "fields": [
        "serial_no",
        "batch_no",
        "creation"
      ]
    },
    "output": "frappe.db.sql(\"SELECT item_code FROM `tabStock Ledger Entry` WHERE serial_no IS NOT NULL AND (batch_no IS NULL OR batch_no = '') AND YEAR(creation) = 2025\")"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "What entries were auto-created with serial/batch bundles and linked to 'Stock Reconciliation' vouchers?",
      "fields": [
        "auto_created_serial_and_batch_bundle",
        "voucher_type"
      ]
    },
    "output": "frappe.get_all('Stock Ledger Entry', filters={'auto_created_serial_and_batch_bundle': 1, 'voucher_type': 'Stock Reconciliation'}, fields=['item_code', 'warehouse'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "List all entries where qty after transaction is negative and valuation rate is zero.",
      "fields": [
        "qty_after_transaction",
        "valuation_rate"
      ]
    },
    "output": "frappe.db.sql(\"SELECT item_code FROM `tabStock Ledger Entry` WHERE qty_after_transaction < 0 AND valuation_rate = 0\")"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Get entries with batch number starting with 'BATCH2025' in January 2025.",
      "fields": [
        "batch_no",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Stock Ledger Entry', filters=[[\"batch_no\", \"like\", \"BATCH2025%\"], [\"posting_date\", \">=\", \"2025-01-01\"], [\"posting_date\", \"<=\", \"2025-01-31\"]], fields=[\"item_code\", \"stock_value\"])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "List all entries with adjustment entry marked true and incoming rate above 100.",
      "fields": [
        "is_adjustment_entry",
        "incoming_rate"
      ]
    },
    "output": "frappe.get_all('Stock Ledger Entry', filters={'is_adjustment_entry': 1, 'incoming_rate': ['>', 100]}, fields=['item_code', 'incoming_rate'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Get all entries for item 'ITEM-00023' in fiscal year 2024-2025.",
      "fields": [
        "item_code",
        "fiscal_year"
      ]
    },
    "output": "frappe.get_all('Stock Ledger Entry', filters={'item_code': 'ITEM-00023', 'fiscal_year': '2024-2025'}, fields=['warehouse', 'actual_qty', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "How many stock ledger entries were posted on weekends?",
      "fields": [
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT COUNT(*) FROM `tabStock Ledger Entry` WHERE DAYOFWEEK(posting_date) IN (1,7)\")"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Which warehouses received items with valuation rate higher than outgoing rate last month?",
      "fields": [
        "warehouse",
        "valuation_rate",
        "outgoing_rate",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT DISTINCT warehouse FROM `tabStock Ledger Entry` WHERE valuation_rate > outgoing_rate AND MONTH(posting_date) = MONTH(CURDATE() - INTERVAL 1 MONTH)\")"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "What items were posted by 'stock.manager@example.com' with stock value difference over 5000?",
      "fields": [
        "owner",
        "stock_value_difference"
      ]
    },
    "output": "frappe.db.sql(\"SELECT item_code FROM `tabStock Ledger Entry` WHERE owner = 'stock.manager@example.com' AND stock_value_difference > 5000\")"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Show entries where recalculation was done and the project field is not empty.",
      "fields": [
        "recalculate_rate",
        "project"
      ]
    },
    "output": "frappe.db.sql(\"SELECT item_code FROM `tabStock Ledger Entry` WHERE recalculate_rate = 1 AND project IS NOT NULL\")"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "List all serial numbers used in stock entries posted yesterday.",
      "fields": [
        "serial_no",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT serial_no FROM `tabStock Ledger Entry` WHERE DATE(posting_date) = CURDATE() - INTERVAL 1 DAY\")"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Give all entries for batch 'BATCH-ALPHA-01' where actual qty is not zero.",
      "fields": [
        "batch_no",
        "actual_qty"
      ]
    },
    "output": "frappe.get_all('Stock Ledger Entry', filters={'batch_no': 'BATCH-ALPHA-01', 'actual_qty': ['!=', 0]}, fields=['item_code', 'warehouse'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Were there any items where valuation rate dropped after incoming?",
      "fields": [
        "item_code",
        "valuation_rate",
        "incoming_rate"
      ]
    },
    "output": "frappe.db.sql(\"SELECT item_code FROM `tabStock Ledger Entry` WHERE incoming_rate > valuation_rate\")"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "List all approved purchase orders from last month.",
      "fields": [
        "status",
        "transaction_date"
      ]
    },
    "output": "frappe.get_list('Purchase Order', filters={ 'status': 'To Receive and Bill', 'transaction_date': ['between', ['2025-03-01', '2025-03-31']] })"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Track all items sent through delivery notes.",
      "fields": [
        "name",
        "posting_date",
        "items"
      ]
    },
    "output": "frappe.get_all('Delivery Note', fields=['name', 'posting_date', 'items'])"
  },
  {
    "input": {
      "doctype": "Quotation",
      "question": "Can you help me create a sales quotation for John Traders today?",
      "fields": [
        "quotation_to",
        "party_name",
        "customer_name",
        "transaction_date",
        "valid_till",
        "order_type"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'Quotation', 'quotation_to': 'Customer', 'party_name': 'John Traders', 'transaction_date': frappe.utils.today(), 'valid_till': '2025-05-15', 'order_type': 'Sales' }).insert()"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "I received a price quote from ABC Traders \u2014 how do I enter it?",
      "fields": [
        "supplier",
        "transaction_date",
        "items",
        "valid_till",
        "company"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'Supplier Quotation', 'supplier': 'ABC Traders', 'transaction_date': frappe.utils.today(), 'company': 'HTS Pvt Ltd', 'valid_till': '2025-05-31', 'items': [] }).insert()"
  },
  {
    "input": {
      "doctype": "Attendance",
      "question": "I'd like to see everyone's attendance for March 2025.",
      "fields": [
        "attendance_date"
      ]
    },
    "output": "frappe.get_list('Attendance', filters={ 'attendance_date': ['between', ['2025-03-01', '2025-03-31']] })"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show me all unpaid bills from our suppliers.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_list('Purchase Invoice', filters={ 'status': 'Unpaid' })"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Which customer payments are still overdue as of today?",
      "fields": [
        "party_type",
        "due_date",
        "status"
      ]
    },
    "output": "frappe.get_list('Payment Entry', filters={ 'party_type': 'Customer', 'due_date': ['<', frappe.utils.today()], 'status': 'Unpaid' })"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "List all purchase orders we approved last month.",
      "fields": [
        "status",
        "transaction_date"
      ]
    },
    "output": "frappe.get_list('Purchase Order', filters={ 'status': 'To Receive and Bill', 'transaction_date': ['between', ['2025-03-01', '2025-03-31']] })"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "I want to track items we shipped out recently through delivery notes.",
      "fields": [
        "name",
        "posting_date",
        "items"
      ]
    },
    "output": "frappe.get_all('Delivery Note', fields=['name', 'posting_date', 'items'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Which items have the highest valuation rate this year?",
      "fields": [
        "item_code",
        "item_name",
        "valuation_rate",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code, item_name, valuation_rate\nFROM `tabItem`\nWHERE YEAR(creation) = YEAR(CURDATE())\nORDER BY valuation_rate DESC\nLIMIT 10\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Which items are about to expire in the next 30 days?",
      "fields": [
        "item_code",
        "item_name",
        "end_of_life"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code, item_name, end_of_life\nFROM `tabItem`\nWHERE end_of_life BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 30 DAY)\nORDER BY end_of_life\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "List top 5 sales items with the longest warranty period.",
      "fields": [
        "item_code",
        "item_name",
        "warranty_period",
        "is_sales_item"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code, item_name, warranty_period\nFROM `tabItem`\nWHERE is_sales_item = 1 AND warranty_period IS NOT NULL\nORDER BY CAST(warranty_period AS UNSIGNED) DESC\nLIMIT 5\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Which items have negative stock allowed and have batch numbers enabled?",
      "fields": [
        "item_code",
        "item_name",
        "allow_negative_stock",
        "has_batch_no"
      ]
    },
    "output": "frappe.db.get_all('Item', filters={'allow_negative_stock': 1, 'has_batch_no': 1}, fields=['item_code', 'item_name'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Find all items that are stock items but not enabled for manufacturing.",
      "fields": [
        "item_code",
        "is_stock_item",
        "include_item_in_manufacturing"
      ]
    },
    "output": "frappe.db.get_all('Item', filters={'is_stock_item': 1, 'include_item_in_manufacturing': 0}, fields=['item_code'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Which items are eligible for deferred expense but not revenue?",
      "fields": [
        "item_code",
        "enable_deferred_expense",
        "enable_deferred_revenue"
      ]
    },
    "output": "frappe.db.get_all('Item', filters={'enable_deferred_expense': 1, 'enable_deferred_revenue': 0}, fields=['item_code'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "List all items with a last purchase rate greater than their standard rate.",
      "fields": [
        "item_code",
        "last_purchase_rate",
        "standard_rate"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code, last_purchase_rate, standard_rate\nFROM `tabItem`\nWHERE last_purchase_rate > standard_rate\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Which items have both serial and batch tracking enabled?",
      "fields": [
        "item_code",
        "has_serial_no",
        "has_batch_no"
      ]
    },
    "output": "frappe.db.get_all('Item', filters={'has_serial_no': 1, 'has_batch_no': 1}, fields=['item_code'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Which stock items have a reorder level but are not allowed for over-delivery?",
      "fields": [
        "item_code",
        "is_stock_item",
        "reorder_levels",
        "over_delivery_receipt_allowance"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code FROM `tabItem`\nWHERE is_stock_item = 1 AND over_delivery_receipt_allowance = 0\nAND EXISTS (\n  SELECT 1 FROM `tabItem Reorder` WHERE parent = `tabItem`.name\n)\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Which items have no valuation method defined and are currently active?",
      "fields": [
        "valuation_method",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code FROM `tabItem`\nWHERE IFNULL(valuation_method, '') = '' AND disabled = 0\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "What is the average standard rate of items under each brand?",
      "fields": [
        "brand",
        "standard_rate"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT brand, AVG(standard_rate) AS avg_rate\nFROM `tabItem`\nWHERE brand IS NOT NULL\nGROUP BY brand\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "List all items with warranty period exceeding 24 months and deferred revenue enabled.",
      "fields": [
        "warranty_period",
        "enable_deferred_revenue"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code, warranty_period\nFROM `tabItem`\nWHERE enable_deferred_revenue = 1 AND CAST(warranty_period AS UNSIGNED) > 24\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Which items are eligible for commission and are part of manufacturing?",
      "fields": [
        "grant_commission",
        "include_item_in_manufacturing"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code\nFROM `tabItem`\nWHERE grant_commission = 1 AND include_item_in_manufacturing = 1\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Get the item-wise over delivery allowance along with over billing allowance for monitoring tolerance levels.",
      "fields": [
        "item_code",
        "over_delivery_receipt_allowance",
        "over_billing_allowance"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code, over_delivery_receipt_allowance, over_billing_allowance\nFROM `tabItem`\nWHERE over_delivery_receipt_allowance IS NOT NULL OR over_billing_allowance IS NOT NULL\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Which items are active, stock-tracked, and not allowed negative stock?",
      "fields": [
        "is_stock_item",
        "allow_negative_stock",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code\nFROM `tabItem`\nWHERE is_stock_item = 1 AND allow_negative_stock = 0 AND disabled = 0\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "List serial-controlled items with custom serial number series defined.",
      "fields": [
        "has_serial_no",
        "serial_no_series"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code, serial_no_series\nFROM `tabItem`\nWHERE has_serial_no = 1 AND serial_no_series IS NOT NULL\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Find all items that are both sales and purchase items but are disabled.",
      "fields": [
        "is_sales_item",
        "is_purchase_item",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code\nFROM `tabItem`\nWHERE is_sales_item = 1 AND is_purchase_item = 1 AND disabled = 1\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Get details of items with deferred expense or deferred revenue setup.",
      "fields": [
        "item_code",
        "enable_deferred_expense",
        "enable_deferred_revenue"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code, enable_deferred_expense, enable_deferred_revenue\nFROM `tabItem`\nWHERE enable_deferred_expense = 1 OR enable_deferred_revenue = 1\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Which items were last modified more than 6 months ago and are still enabled?",
      "fields": [
        "modified",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code, modified\nFROM `tabItem`\nWHERE modified < DATE_SUB(CURDATE(), INTERVAL 6 MONTH) AND disabled = 0\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Which purchase items have a minimum order quantity of more than 100?",
      "fields": [
        "item_code",
        "is_purchase_item",
        "min_order_qty"
      ]
    },
    "output": "frappe.db.get_all('Item', filters={'is_purchase_item': 1, 'min_order_qty': ['>', 100]}, fields=['item_code', 'min_order_qty'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Which items have not been modified in the last 2 years and are still active?",
      "fields": [
        "item_code",
        "modified",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code\nFROM `tabItem`\nWHERE modified <= DATE_SUB(CURDATE(), INTERVAL 2 YEAR)\nAND disabled = 0\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "What are the items with the highest safety stock across all products?",
      "fields": [
        "item_code",
        "item_name",
        "safety_stock"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code, item_name, safety_stock\nFROM `tabItem`\nWHERE safety_stock IS NOT NULL\nORDER BY safety_stock DESC\nLIMIT 10\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Find items that have valuation method FIFO and are purchased from more than 3 suppliers.",
      "fields": [
        "item_code",
        "valuation_method"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT i.item_code\nFROM `tabItem` i\nJOIN `tabItem Supplier` s ON i.name = s.parent\nWHERE i.valuation_method = 'FIFO'\nGROUP BY i.item_code\nHAVING COUNT(DISTINCT s.supplier) > 3\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Which items are nearing end of life within the next 60 days?",
      "fields": [
        "item_code",
        "end_of_life"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code, end_of_life\nFROM `tabItem`\nWHERE end_of_life BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 60 DAY)\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "List the items that require inspection before delivery but not before purchase.",
      "fields": [
        "item_code",
        "inspection_required_before_purchase",
        "inspection_required_before_delivery"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code\nFROM `tabItem`\nWHERE inspection_required_before_delivery = 1 AND inspection_required_before_purchase = 0\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Show items that allow alternative item and have been created this year.",
      "fields": [
        "item_code",
        "allow_alternative_item",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code\nFROM `tabItem`\nWHERE allow_alternative_item = 1\nAND YEAR(creation) = YEAR(CURDATE())\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Find fixed asset items where auto creation of asset is enabled.",
      "fields": [
        "item_code",
        "is_fixed_asset",
        "auto_create_assets"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code\nFROM `tabItem`\nWHERE is_fixed_asset = 1 AND auto_create_assets = 1\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Which items are still valid and have shelf life over 300 days?",
      "fields": [
        "item_code",
        "shelf_life_in_days",
        "end_of_life"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT item_code\nFROM `tabItem`\nWHERE shelf_life_in_days > 300 AND (end_of_life IS NULL OR end_of_life > CURDATE())\n''')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "List all items where the total projected quantity is below 10 units.",
      "fields": [
        "item_name",
        "item_code",
        "total_projected_qty"
      ]
    },
    "output": "frappe.get_list('Item', filters={ 'total_projected_qty': ['<', 10] }, fields=['item_code', 'item_name'])"
  },
  {
    "input": {
      "doctype": "Item Group",
      "question": "Create a new item group named 'Retail Products'.",
      "fields": [
        "is_group",
        "item_group_name"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'Item Group', 'item_group_name': 'Retail Products', 'is_group': 0 }).insert()"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which items had stock value greater than 15000 and were created this month?",
      "fields": [
        "stock_value",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM `tabBin` WHERE stock_value > 15000 AND MONTH(creation) = MONTH(CURDATE()) AND YEAR(creation) = YEAR(CURDATE())''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Show me bins where actual quantity is equal to projected quantity.",
      "fields": [
        "actual_qty",
        "projected_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM `tabBin` WHERE actual_qty = projected_qty''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Get the current stock value and valuation rate for item ITEM-00012 in 'Finished Goods - TX' warehouse.",
      "fields": [
        "item_code",
        "warehouse",
        "stock_value",
        "valuation_rate"
      ]
    },
    "output": "frappe.get_value('Bin', {'item_code': 'ITEM-00012', 'warehouse': 'Finished Goods - TX'}, ['stock_value', 'valuation_rate'])"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "List all warehouses where reserved quantity is greater than 500 and reserved stock is more than 200.",
      "fields": [
        "reserved_qty",
        "reserved_stock",
        "warehouse"
      ]
    },
    "output": "frappe.get_all('Bin', filters={'reserved_qty': ['>', 500], 'reserved_stock': ['>', 200]}, fields=['item_code', 'warehouse'])"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Find bins with indented quantity or planned quantity more than ordered quantity.",
      "fields": [
        "indented_qty",
        "planned_qty",
        "ordered_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM `tabBin` WHERE indented_qty > ordered_qty OR planned_qty > ordered_qty''')"
  },
  {
    "doctype": "Bin",
    "question": "How many items have a valuation rate over 100 but actual quantity under 10?",
    "fields": [
      "valuation_rate",
      "actual_qty"
    ],
    "output": "frappe.db.count('Bin', {'valuation_rate': ['>', 100], 'actual_qty': ['<', 10]})"
  },
  {
    "doctype": "Bin",
    "question": "Are there any bins modified today where the stock value changed and reserved quantity is not zero?",
    "fields": [
      "modified",
      "stock_value",
      "reserved_qty"
    ],
    "output": "frappe.db.sql('''SELECT item_code FROM `tabBin` WHERE DATE(modified) = CURDATE() AND reserved_qty != 0''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Give me bins with negative projected quantity in any warehouse with 'Subcontract' in its name.",
      "fields": [
        "projected_qty",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM `tabBin` WHERE projected_qty < 0 AND warehouse LIKE '%Subcontract%'''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Show me all item codes and their stock UOMs in the 'Spare Parts' warehouse.",
      "fields": [
        "item_code",
        "stock_uom",
        "warehouse"
      ]
    },
    "output": "frappe.get_all('Bin', filters={'warehouse': 'Spare Parts'}, fields=['item_code', 'stock_uom'])"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which bins are owned by 'admin@example.com' and have not been modified in the last 30 days?",
      "fields": [
        "owner",
        "modified"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM `tabBin` WHERE owner = 'admin@example.com' AND modified < DATE_SUB(CURDATE(), INTERVAL 30 DAY)''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which items in the 'Central Warehouse' have both indented and ordered quantities greater than 50?",
      "fields": [
        "item_code",
        "indented_qty",
        "ordered_qty",
        "warehouse"
      ]
    },
    "output": "frappe.get_all('Bin', filters={'warehouse': 'Central Warehouse', 'indented_qty': ['>', 50], 'ordered_qty': ['>', 50]}, fields=['item_code', 'indented_qty', 'ordered_qty'])"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "List all items where reserved quantity for subcontracting exceeds actual quantity by at least 10 units.",
      "fields": [
        "item_code",
        "actual_qty",
        "reserved_qty_for_sub_contract"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code FROM `tabBin` WHERE reserved_qty_for_sub_contract - actual_qty >= 10')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which bins have zero projected quantity but have some planned quantity?",
      "fields": [
        "item_code",
        "projected_qty",
        "planned_qty"
      ]
    },
    "output": "frappe.get_all('Bin', filters={'projected_qty': 0, 'planned_qty': ['>', 0]}, fields=['item_code', 'planned_qty'])"
  },
  {
    "doctype": "Bin",
    "question": "Show items that have no reserved quantities at all across any category.",
    "fields": [
      "item_code",
      "reserved_qty",
      "reserved_qty_for_production",
      "reserved_qty_for_sub_contract",
      "reserved_qty_for_production_plan"
    ],
    "output": "frappe.db.sql('SELECT item_code FROM `tabBin` WHERE reserved_qty = 0 AND reserved_qty_for_production = 0 AND reserved_qty_for_sub_contract = 0 AND reserved_qty_for_production_plan = 0')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Find the items that have negative stock value or valuation rate.",
      "fields": [
        "item_code",
        "valuation_rate",
        "stock_value"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code FROM `tabBin` WHERE valuation_rate < 0 OR stock_value < 0')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which bins were last modified by 'admin@example.com' and belong to 'Spare Parts' warehouse?",
      "fields": [
        "item_code",
        "modified_by",
        "warehouse"
      ]
    },
    "output": "frappe.get_all('Bin', filters={'modified_by': 'admin@example.com', 'warehouse': 'Spare Parts'}, fields=['item_code', 'modified_by', 'warehouse'])"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "List all bins with actual quantity > 0 but zero reserved stock and reserved_qty_for_production.",
      "fields": [
        "item_code",
        "actual_qty",
        "reserved_stock",
        "reserved_qty_for_production"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code FROM `tabBin` WHERE actual_qty > 0 AND reserved_stock = 0 AND reserved_qty_for_production = 0')"
  },
  {
    "doctype": "Bin",
    "question": "Which items in 'Cold Storage' have projected quantity lower than any reserved quantity?",
    "fields": [
      "item_code",
      "projected_qty",
      "reserved_qty",
      "reserved_qty_for_sub_contract",
      "reserved_qty_for_production"
    ],
    "output": "frappe.db.sql('SELECT item_code FROM `tabBin` WHERE warehouse = 'Cold Storage' AND projected_qty < GREATEST(reserved_qty, reserved_qty_for_sub_contract, reserved_qty_for_production)')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Get a list of items that have both valuation rate and stock value missing (null).",
      "fields": [
        "item_code",
        "valuation_rate",
        "stock_value"
      ]
    },
    "output": "frappe.get_all('Bin', filters={'valuation_rate': ['is', 'null'], 'stock_value': ['is', 'null']}, fields=['item_code'])"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which items have projected quantity between 20 and 40 but actual quantity less than 10?",
      "fields": [
        "item_code",
        "projected_qty",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code FROM `tabBin` WHERE projected_qty BETWEEN 20 AND 40 AND actual_qty < 10')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "List all bins where the actual quantity is below the indented quantity.",
      "fields": [
        "actual_qty",
        "indented_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabBin` WHERE actual_qty < indented_qty''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Show me items stored in 'Main Warehouse' that have zero projected stock.",
      "fields": [
        "warehouse",
        "projected_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabBin` WHERE warehouse = 'Main Warehouse' AND projected_qty = 0''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which items have a reserved quantity for production but no actual quantity yet?",
      "fields": [
        "reserved_qty_for_production",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabBin` WHERE reserved_qty_for_production > 0 AND actual_qty = 0''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Give me a list of items where reserved stock is more than 20 and valuation rate is above 100.",
      "fields": [
        "reserved_stock",
        "valuation_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabBin` WHERE reserved_stock > 20 AND valuation_rate > 100''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which bins were last modified in the past 7 days with stock value greater than 10,000?",
      "fields": [
        "modified",
        "stock_value"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabBin` WHERE modified >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND stock_value > 10000''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Find all bins where indented quantity is higher than projected quantity and item code starts with 'RM-'.",
      "fields": [
        "indented_qty",
        "projected_qty",
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabBin` WHERE indented_qty > projected_qty AND item_code LIKE 'RM-%'''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "What items have both reserved quantity for sub contract and production greater than 5?",
      "fields": [
        "reserved_qty_for_sub_contract",
        "reserved_qty_for_production"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabBin` WHERE reserved_qty_for_sub_contract > 5 AND reserved_qty_for_production > 5''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which bins have identical values for actual and reserved quantity?",
      "fields": [
        "actual_qty",
        "reserved_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabBin` WHERE actual_qty = reserved_qty''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Show all bins where stock value is 0 but there's still some actual quantity.",
      "fields": [
        "stock_value",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabBin` WHERE stock_value = 0 AND actual_qty > 0''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "In which warehouse is the item 'CEMENT-001' stored with the highest valuation rate?",
      "fields": [
        "item_code",
        "warehouse",
        "valuation_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse FROM `tabBin` WHERE item_code = 'CEMENT-001' ORDER BY valuation_rate DESC LIMIT 1''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which items have more quantity planned than what is actually in stock?",
      "fields": [
        "planned_qty",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM `tabBin` WHERE planned_qty > actual_qty''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Show all items in the 'Raw Materials' warehouse that have valuation rate over 50 and stock value under 5000.",
      "fields": [
        "warehouse",
        "valuation_rate",
        "stock_value"
      ]
    },
    "output": "frappe.get_all('Bin', filters={'warehouse': 'Raw Materials', 'valuation_rate': ['>', 50], 'stock_value': ['<', 5000]}, fields=['item_code', 'valuation_rate', 'stock_value'])"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "List items with zero actual quantity but reserved stock greater than 20 in any warehouse.",
      "fields": [
        "actual_qty",
        "reserved_stock"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code FROM `tabBin` WHERE actual_qty = 0 AND reserved_stock > 20')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Find bins where indented quantity is more than ordered quantity and both are non-zero.",
      "fields": [
        "indented_qty",
        "ordered_qty"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code FROM `tabBin` WHERE indented_qty > ordered_qty AND indented_qty > 0 AND ordered_qty > 0')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which items in 'Main Store' have a stock value above 10000 and projected quantity under 30?",
      "fields": [
        "warehouse",
        "stock_value",
        "projected_qty"
      ]
    },
    "output": "frappe.get_all('Bin', filters={'warehouse': 'Main Store', 'stock_value': ['>', 10000], 'projected_qty': ['<', 30]}, fields=['item_code', 'stock_value', 'projected_qty'])"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Show bins where reserved_qty_for_production_plan exceeds reserved_qty_for_production by 10 or more.",
      "fields": [
        "reserved_qty_for_production_plan",
        "reserved_qty_for_production"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code FROM `tabBin` WHERE reserved_qty_for_production_plan - reserved_qty_for_production >= 10')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which items have the same valuation rate but belong to different warehouses?",
      "fields": [
        "item_code",
        "valuation_rate",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('SELECT b1.item_code FROM `tabBin` b1 JOIN `tabBin` b2 ON b1.item_code = b2.item_code AND b1.warehouse != b2.warehouse AND b1.valuation_rate = b2.valuation_rate')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Find all items that are completely unplanned and unordered across all warehouses.",
      "fields": [
        "planned_qty",
        "ordered_qty"
      ]
    },
    "output": "frappe.get_all('Bin', filters={'planned_qty': 0, 'ordered_qty': 0}, fields=['item_code', 'warehouse'])"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "List bins that were modified today and have stock value greater than 2000.",
      "fields": [
        "modified",
        "stock_value"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code FROM `tabBin` WHERE DATE(modified) = CURDATE() AND stock_value > 2000')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Show items with negative projected quantity in any warehouse that ends with 'Store'.",
      "fields": [
        "projected_qty",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code FROM `tabBin` WHERE projected_qty < 0 AND warehouse LIKE '%Store'')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which items have a stock unit of measure as 'Nos' and more than 100 in actual quantity?",
      "fields": [
        "stock_uom",
        "actual_qty"
      ]
    },
    "output": "frappe.get_all('Bin', filters={'stock_uom': 'Nos', 'actual_qty': ['>', 100]}, fields=['item_code', 'actual_qty'])"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "List all bins with projected quantity below zero in the last 14 days.",
      "fields": [
        "projected_qty",
        "modified"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabBin` WHERE projected_qty < 0 AND modified >= DATE_SUB(CURDATE(), INTERVAL 14 DAY)''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which warehouses store more than 5 different items where actual quantity is above 50 units?",
      "fields": [
        "warehouse",
        "item_code",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse FROM `tabBin` WHERE actual_qty > 50 GROUP BY warehouse HAVING COUNT(DISTINCT item_code) > 5''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "List all items with stock value above 50,000 in 'Main Store'.",
      "fields": [
        "item_code",
        "warehouse",
        "stock_value"
      ]
    },
    "output": "frappe.get_all('Bin', filters={'warehouse': 'Main Store', 'stock_value': ['>', 50000]}, fields=['item_code', 'warehouse', 'stock_value'])"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Show bins where actual quantity is less than indented quantity.",
      "fields": [
        "actual_qty",
        "indented_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabBin` WHERE actual_qty < indented_qty''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which item has the highest reserved quantity for subcontracting?",
      "fields": [
        "item_code",
        "reserved_qty_for_sub_contract"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM `tabBin` ORDER BY reserved_qty_for_sub_contract DESC LIMIT 1''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Find bins where planned quantity is zero but ordered quantity is more than 100.",
      "fields": [
        "planned_qty",
        "ordered_qty"
      ]
    },
    "output": "frappe.get_all('Bin', filters={'planned_qty': 0, 'ordered_qty': ['>', 100]}, fields=['item_code', 'warehouse'])"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which warehouses are storing item 'ST-0003' with more than 100 units reserved for production?",
      "fields": [
        "item_code",
        "warehouse",
        "reserved_qty_for_production"
      ]
    },
    "output": "frappe.get_all('Bin', filters={'item_code': 'ST-0003', 'reserved_qty_for_production': ['>', 100]}, fields=['warehouse'])"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Get all bins where reserved and projected quantities are both zero.",
      "fields": [
        "reserved_qty",
        "projected_qty"
      ]
    },
    "output": "frappe.get_all('Bin', filters={'reserved_qty': 0, 'projected_qty': 0}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Give me all bins where valuation rate is missing or not updated.",
      "fields": [
        "valuation_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabBin` WHERE valuation_rate IS NULL OR valuation_rate = 0''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Show all bins where actual quantity is greater than projected quantity and reserved stock exists.",
      "fields": [
        "actual_qty",
        "projected_qty",
        "reserved_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabBin` WHERE actual_qty > projected_qty AND reserved_stock > 0''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which items in 'Cold Store' have any type of reserved quantity set?",
      "fields": [
        "warehouse",
        "reserved_qty",
        "reserved_qty_for_production",
        "reserved_qty_for_sub_contract"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM `tabBin` WHERE warehouse = 'Cold Store' AND (reserved_qty > 0 OR reserved_qty_for_production > 0 OR reserved_qty_for_sub_contract > 0)''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which item has shown the highest stock value growth in the last 3 months?",
      "fields": [
        "item_code",
        "stock_value",
        "modified"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM `tabBin` WHERE modified >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) ORDER BY stock_value DESC LIMIT 1''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "List items where projected quantity is significantly lower than actual quantity.",
      "fields": [
        "item_code",
        "actual_qty",
        "projected_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM `tabBin` WHERE projected_qty < (actual_qty * 0.5)''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Find bins that haven't been modified in the last 6 months and still hold stock.",
      "fields": [
        "item_code",
        "modified",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM `tabBin` WHERE actual_qty > 0 AND modified < DATE_SUB(CURDATE(), INTERVAL 6 MONTH)''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which warehouse has the highest cumulative reserved stock?",
      "fields": [
        "warehouse",
        "reserved_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse, SUM(reserved_stock) as total_reserved FROM `tabBin` GROUP BY warehouse ORDER BY total_reserved DESC LIMIT 1''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Compare indented vs ordered quantities for item 'ITM-456'.",
      "fields": [
        "item_code",
        "indented_qty",
        "ordered_qty"
      ]
    },
    "output": "frappe.get_all('Bin', filters={'item_code': 'ITM-456'}, fields=['item_code', 'indented_qty', 'ordered_qty'])"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which items have zero stock but non-zero reserved or planned quantities?",
      "fields": [
        "item_code",
        "actual_qty",
        "reserved_qty",
        "planned_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM `tabBin` WHERE actual_qty = 0 AND (reserved_qty > 0 OR planned_qty > 0)''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Find bins where stock value per unit is unusually low (below 1 currency unit).",
      "fields": [
        "item_code",
        "stock_value",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM `tabBin` WHERE actual_qty > 0 AND (stock_value / actual_qty) < 1''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Show bins with stock UOM missing or undefined.",
      "fields": [
        "item_code",
        "stock_uom"
      ]
    },
    "output": "frappe.get_all('Bin', filters={'stock_uom': ['in', ['', null]]}, fields=['item_code'])"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Show bins modified today with a stock value above 2000.",
      "fields": [
        "modified",
        "stock_value"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabBin` WHERE DATE(modified) = CURDATE() AND stock_value > 2000''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Give me all records where any kind of reserved quantity is greater than 100 units.",
      "fields": [
        "reserved_qty",
        "reserved_qty_for_production",
        "reserved_qty_for_sub_contract"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabBin` WHERE reserved_qty > 100 OR reserved_qty_for_production > 100 OR reserved_qty_for_sub_contract > 100''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which items stored in 'Finished Goods WH' have stock value above 20,000 but reserved stock is zero?",
      "fields": [
        "warehouse",
        "stock_value",
        "reserved_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM `tabBin` WHERE warehouse = 'Finished Goods WH' AND stock_value > 20000 AND reserved_stock = 0''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Find all bins where the difference between projected and actual quantity exceeds 500 units.",
      "fields": [
        "projected_qty",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabBin` WHERE ABS(projected_qty - actual_qty) > 500''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which item codes have at least 100 units reserved for production and subcontracting combined?",
      "fields": [
        "reserved_qty_for_production",
        "reserved_qty_for_sub_contract",
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM `tabBin` WHERE (reserved_qty_for_production + reserved_qty_for_sub_contract) >= 100''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "List all bins where indented quantity is less than ordered quantity but reserved stock is still positive.",
      "fields": [
        "indented_qty",
        "ordered_qty",
        "reserved_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabBin` WHERE indented_qty < ordered_qty AND reserved_stock > 0''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Which warehouses have more than 10 bins with zero actual quantity but non-zero valuation rate?",
      "fields": [
        "warehouse",
        "actual_qty",
        "valuation_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse FROM `tabBin` WHERE actual_qty = 0 AND valuation_rate > 0 GROUP BY warehouse HAVING COUNT(name) > 10''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Show all bins where the valuation rate dropped in the last week but stock value remained high.",
      "fields": [
        "valuation_rate",
        "stock_value",
        "modified"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabBin` WHERE valuation_rate < 100 AND stock_value > 10000 AND modified >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)''')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Check stock quantity in bin for item 'AeroDrone X5' at 'Main Store'.",
      "fields": [
        "item_code",
        "warehouse",
        "actual_qty"
      ]
    },
    "output": "frappe.db.get_value('Bin', { 'item_code': 'AeroDrone X5', 'warehouse': 'Main Store' }, 'actual_qty')"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "Get bin details for warehouse 'Main Store'.",
      "fields": [
        "warehouse",
        "item_code",
        "actual_qty"
      ]
    },
    "output": "frappe.get_list('Bin', filters={ 'warehouse': 'Main Store' }, fields=['item_code', 'actual_qty'])"
  },
  {
    "input": {
      "doctype": "Bin",
      "question": "List all bins that have a negative stock quantity.",
      "fields": [
        "actual_qty",
        "item_code",
        "warehouse"
      ]
    },
    "output": "frappe.get_list('Bin', filters={ 'actual_qty': ['<', 0] }, fields=['item_code', 'warehouse', 'actual_qty'])"
  },
  {
    "input": {
      "doctype": "Batch",
      "question": "What is the manufacturing date of batch 'BATCH-009' for item 'AeroDrone X5'?",
      "fields": [
        "manufacturing_date",
        "batch_id",
        "item"
      ]
    },
    "output": "frappe.db.get_value('Batch', {'batch_id': 'BATCH-009', 'item': 'AeroDrone X5'}, 'manufacturing_date')"
  },
  {
    "input": {
      "doctype": "Batch",
      "question": "What's the current status and quantity of goods issued under batch 'BATCH-1002'?",
      "fields": [
        "batch_qty",
        "item",
        "batch_id"
      ]
    },
    "output": "frappe.db.get_value('Batch', {'batch_id': 'BATCH-1002'}, ['batch_qty', 'item'])"
  },
  {
    "input": {
      "doctype": "Serial No",
      "question": "Find serial numbers with an active warranty under item 'SmartWatch Pro'.",
      "fields": [
        "serial_no",
        "warranty_expiry_date",
        "item_code"
      ]
    },
    "output": "frappe.get_list('Serial No', filters={ 'item_code': 'SmartWatch Pro', 'warranty_expiry_date': ['>=', frappe.utils.today()] }, fields=['serial_no'])"
  },
  {
    "input": {
      "doctype": "Stock Reconciliation",
      "question": "How do I reconcile the actual stock for 'FusionPad Tablet' in warehouse 'Main Store'?",
      "fields": [
        "item_code",
        "set_warehouse",
        "company"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'Stock Reconciliation', 'company': 'HTS Pvt Ltd', 'set_warehouse': 'Main Store', 'items': [{'item_code': 'FusionPad Tablet'}] }).insert()"
  },
  {
    "input": {
      "doctype": "Stock Reconciliation",
      "question": "Submit a reconciliation entry to correct quantity mismatches for item 'AeroDrone X5' in warehouse 'Main Store'.",
      "fields": [
        "item_code",
        "set_warehouse",
        "company"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'Stock Reconciliation', 'company': 'HTS Pvt Ltd', 'set_warehouse': 'Main Store', 'items': [{'item_code': 'AeroDrone X5'}] }).insert()"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Add a new warehouse named 'South Regional Depot' under company 'HTS Pvt Ltd'.",
      "fields": [
        "warehouse_name",
        "company"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'Warehouse', 'warehouse_name': 'South Regional Depot', 'company': 'HTS Pvt Ltd' }).insert()"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which company has the highest number of active warehouses?",
      "fields": [
        "company",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT company, COUNT(*) AS active_warehouse_count\nFROM `tabWarehouse`\nWHERE disabled = 0\nGROUP BY company\nORDER BY active_warehouse_count DESC\nLIMIT 1\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which warehouse has the most child warehouses under it?",
      "fields": [
        "warehouse_name",
        "parent_warehouse"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT parent_warehouse, COUNT(*) as child_count\nFROM `tabWarehouse`\nWHERE parent_warehouse IS NOT NULL\nGROUP BY parent_warehouse\nORDER BY child_count DESC\nLIMIT 1\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "List all disabled warehouses along with their company names.",
      "fields": [
        "warehouse_name",
        "disabled",
        "company"
      ]
    },
    "output": "frappe.db.get_all('Warehouse', filters={'disabled': 1}, fields=['warehouse_name', 'company'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "How many warehouses are there in each state?",
      "fields": [
        "state"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT state, COUNT(*) as total\nFROM `tabWarehouse`\nGROUP BY state\nORDER BY total DESC\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Give me the recently created warehouses this month.",
      "fields": [
        "warehouse_name",
        "creation"
      ]
    },
    "output": "frappe.db.get_all('Warehouse', filters={'creation': ['>=', frappe.utils.formatdate(frappe.utils.get_first_day(frappe.utils.nowdate()), 'yyyy-mm-dd')]}, fields=['warehouse_name', 'creation'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which warehouses are missing contact numbers?",
      "fields": [
        "warehouse_name",
        "phone_no",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT warehouse_name\nFROM `tabWarehouse`\nWHERE (phone_no IS NULL OR phone_no = '') AND (mobile_no IS NULL OR mobile_no = '')\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which company has the most active warehouses this year?",
      "fields": [
        "company",
        "disabled",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT company, COUNT(*) AS active_warehouses\nFROM `tabWarehouse`\nWHERE disabled = 0 AND YEAR(creation) = YEAR(CURDATE())\nGROUP BY company\nORDER BY active_warehouses DESC\nLIMIT 1\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "List all warehouses set up in the last 3 months with no assigned parent.",
      "fields": [
        "warehouse_name",
        "parent_warehouse",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT warehouse_name FROM `tabWarehouse`\nWHERE parent_warehouse IS NULL AND creation >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which warehouse types have the highest number of active locations?",
      "fields": [
        "warehouse_type",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT warehouse_type, COUNT(*) AS count\nFROM `tabWarehouse`\nWHERE disabled = 0\nGROUP BY warehouse_type\nORDER BY count DESC\nLIMIT 5\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Can you list all parent warehouses that don\u2019t have any child warehouses linked?",
      "fields": [
        "warehouse_name",
        "parent_warehouse"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT w1.warehouse_name\nFROM `tabWarehouse` w1\nLEFT JOIN `tabWarehouse` w2 ON w1.name = w2.parent_warehouse\nWHERE w2.name IS NULL\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Give me all warehouses that belong to companies starting with 'Al-'.",
      "fields": [
        "warehouse_name",
        "company"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT warehouse_name FROM `tabWarehouse`\nWHERE company LIKE 'Al-%'\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Warehouses that were created before 2022 and are still active\u2014what are their names?",
      "fields": [
        "warehouse_name",
        "creation",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT warehouse_name FROM `tabWarehouse`\nWHERE disabled = 0 AND creation < '2022-01-01'\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Show all warehouse names and emails in Qatar region with missing phone numbers.",
      "fields": [
        "warehouse_name",
        "email_id",
        "phone_no",
        "city"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT warehouse_name, email_id FROM `tabWarehouse`\nWHERE city = 'Qatar' AND (phone_no IS NULL OR phone_no = '')\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which city has the highest number of disabled warehouses?",
      "fields": [
        "city",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT city, COUNT(*) as total FROM `tabWarehouse`\nWHERE disabled = 1\nGROUP BY city\nORDER BY total DESC\nLIMIT 1\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Find all warehouses where both phone and mobile numbers are the same.",
      "fields": [
        "warehouse_name",
        "phone_no",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT warehouse_name FROM `tabWarehouse`\nWHERE phone_no = mobile_no AND phone_no IS NOT NULL\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "List all warehouse addresses in cities that start with the letter 'S' and have active email IDs.",
      "fields": [
        "city",
        "address_line_1",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT warehouse_name, city, address_line_1, email_id\nFROM `tabWarehouse`\nWHERE city LIKE 'S%' AND email_id IS NOT NULL AND email_id != ''\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which warehouse has the highest number of levels in the warehouse hierarchy tree?",
      "fields": [
        "warehouse_name",
        "lft",
        "rgt"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT warehouse_name, (rgt - lft) AS levels\nFROM `tabWarehouse`\nORDER BY levels DESC\nLIMIT 1\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Show all group warehouses linked to a parent warehouse under the company 'ERPGulf LLC'.",
      "fields": [
        "is_group",
        "parent_warehouse",
        "company"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT warehouse_name, parent_warehouse, company\nFROM `tabWarehouse`\nWHERE is_group = 1 AND company = 'ERPGulf LLC'\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Fetch warehouses which are disabled but still have a phone number listed.",
      "fields": [
        "disabled",
        "phone_no"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT warehouse_name, phone_no\nFROM `tabWarehouse`\nWHERE disabled = 1 AND phone_no IS NOT NULL AND phone_no != ''\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Compare the number of warehouses per warehouse type.",
      "fields": [
        "warehouse_type"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT warehouse_type, COUNT(*) AS total_warehouses\nFROM `tabWarehouse`\nGROUP BY warehouse_type\nORDER BY total_warehouses DESC\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "How many warehouses were created each year for the last 5 years?",
      "fields": [
        "creation"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT YEAR(creation) AS year, COUNT(*) AS total\nFROM `tabWarehouse`\nWHERE creation >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR)\nGROUP BY year\nORDER BY year\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Can you tell me how many new warehouses were created each month this year?",
      "fields": [
        "creation"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT MONTHNAME(creation) AS month, COUNT(*) AS total\nFROM `tabWarehouse`\nWHERE YEAR(creation) = YEAR(CURDATE())\nGROUP BY MONTH(creation)\nORDER BY MONTH(creation)\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Show the names and types of all warehouses located in Doha.",
      "fields": [
        "warehouse_name",
        "warehouse_type",
        "city"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT warehouse_name, warehouse_type FROM `tabWarehouse`\nWHERE city = 'Doha'\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which warehouse is likely the central hub given it has the most child nodes?",
      "fields": [
        "parent_warehouse"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT parent_warehouse, COUNT(*) AS child_count\nFROM `tabWarehouse`\nWHERE parent_warehouse IS NOT NULL\nGROUP BY parent_warehouse\nORDER BY child_count DESC\nLIMIT 1\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "I need a list of active warehouses where parent is either 'Central Storage' or 'Transit Hub'.",
      "fields": [
        "warehouse_name",
        "disabled",
        "parent_warehouse"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT warehouse_name FROM `tabWarehouse`\nWHERE disabled = 0 AND parent_warehouse IN ('Central Storage', 'Transit Hub')\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Warehouses that don’t have phone or mobile contact info—can you find them?",
      "fields": [
        "warehouse_name",
        "phone_no",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT warehouse_name FROM `tabWarehouse`\nWHERE (phone_no IS NULL OR phone_no = '') AND (mobile_no IS NULL OR mobile_no = '')\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "List all rejected warehouses along with their parent warehouse and type.",
      "fields": [
        "warehouse_name",
        "is_rejected_warehouse",
        "parent_warehouse",
        "warehouse_type"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT warehouse_name, parent_warehouse, warehouse_type\nFROM `tabWarehouse`\nWHERE is_rejected_warehouse = 1\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which warehouses were created in the last 3 months and are not disabled?",
      "fields": [
        "warehouse_name",
        "creation",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT warehouse_name\nFROM `tabWarehouse`\nWHERE creation >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\nAND disabled = 0\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Show the number of warehouses by state, ordered by highest count.",
      "fields": [
        "state"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT state, COUNT(*) AS warehouse_count\nFROM `tabWarehouse`\nGROUP BY state\nORDER BY warehouse_count DESC\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which parent warehouse has the most child warehouses?",
      "fields": [
        "parent_warehouse"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT parent_warehouse, COUNT(*) AS child_count\nFROM `tabWarehouse`\nWHERE parent_warehouse IS NOT NULL\nGROUP BY parent_warehouse\nORDER BY child_count DESC\nLIMIT 1\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "View all inactive or archived warehouses in the system.",
      "fields": [
        "disabled",
        "warehouse_name",
        "company"
      ]
    },
    "output": "frappe.get_list('Warehouse', filters={'disabled': 1}, fields=['warehouse_name', 'company'])"
  },
  {
    "input": {
      "doctype": "UOM",
      "question": "Define a conversion between 'Kilogram' and 'Gram' for stock items.",
      "fields": [
        "uom_name",
        "must_be_whole_number"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'UOM', 'uom_name': 'Gram', 'must_be_whole_number': 0 }).insert()"
  },
  {
    "input": {
      "doctype": "UOM",
      "question": "Add a new unit of measure called 'Milliliter' for liquid tracking.",
      "fields": [
        "uom_name"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'UOM', 'uom_name': 'Milliliter' }).insert()"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Can you check the current status and linked customer for lead ID LEAD-00234?",
      "fields": [
        "status",
        "customer"
      ]
    },
    "output": "frappe.db.get_value('Lead', 'LEAD-00234', ['status', 'customer'])"
  },
  {
    "input": {
      "doctype": "Quotation",
      "question": "Find all quotations where total value is above 10,000.",
      "fields": [
        "transaction_date",
        "customer_name"
      ]
    },
    "output": "Error: 'total_value' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Quotation",
      "question": "Show quotations with delivery status marked 'Shipped'.",
      "fields": [
        "order_type",
        "status"
      ]
    },
    "output": "Error: 'delivery_status' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Quotation",
      "question": "List quotations with payment done via 'Credit Card'.",
      "fields": [
        "currency",
        "transaction_date"
      ]
    },
    "output": "Error: 'mode_of_payment' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Quotation",
      "question": "Show quotations approved by manager.",
      "fields": [
        "status",
        "order_lost_reason"
      ]
    },
    "output": "Error: 'approved_by' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Quotation",
      "question": "Get quotations where the item code is 'ITEM-001'.",
      "fields": [
        "total_qty",
        "net_total"
      ]
    },
    "output": "Error: 'item_code' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show all partners with an email address.",
      "fields": [
        "partner_name",
        "partner_type",
        "territory"
      ]
    },
    "output": "Error: 'email' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get the phone number and logo of each partner.",
      "fields": [
        "logo"
      ]
    },
    "output": "Error: 'phone number' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List partners based on registration date and name.",
      "fields": [
        "partner_name",
        "commission_rate"
      ]
    },
    "output": "Error: 'registration_date' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find the partners who joined last year.",
      "fields": [
        "partner_name",
        "partner_type",
        "description"
      ]
    },
    "output": "Error: 'joining_date' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get the list of sales partners with GST details.",
      "fields": [
        "partner_name",
        "partner_type"
      ]
    },
    "output": "Error: 'gst_details' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show partner address and tax ID.",
      "fields": [
        "partner_name",
        "partner_type",
        "territory"
      ]
    },
    "output": "Error: 'tax_id' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List partners using contact_email and partner name.",
      "fields": [
        "partner_name",
        "partner_type",
        "referral_code"
      ]
    },
    "output": "Error: 'contact_email' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show commission rate and bank account of each partner.",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "Error: 'bank_account' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get the mobile number of affiliates in the south zone.",
      "fields": [
        "partner_name",
        "partner_type",
        "territory"
      ]
    },
    "output": "Error: 'mobile_number' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show referral code, address, and approval status.",
      "fields": [
        "referral_code",
        "partner_name",
        "partner_website"
      ]
    },
    "output": "Error: 'approval_status' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners have 'bulk' or 'enterprise' in their description?",
      "fields": [
        "partner_name",
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', or_filters=[['description', 'like', '%bulk%'], ['description', 'like', '%enterprise%']], fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find partners whose introduction includes the word 'exclusive'.",
      "fields": [
        "introduction",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'introduction': ['like', '%exclusive%'] }, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Search for partners with 'trusted' in their description or intro.",
      "fields": [
        "introduction",
        "description",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', or_filters=[['description', 'like', '%trusted%'], ['introduction', 'like', '%trusted%']], fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all affiliates or dealers.",
      "fields": [
        "partner_type",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', or_filters=[['partner_type', '=', 'Affiliate'], ['partner_type', '=', 'Dealer']], fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List partners with contact number and name.",
      "fields": [
        "partner_name"
      ]
    },
    "output": "Error: 'contact_number' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get partners with their address and tax ID.",
      "fields": [
        "address_html"
      ]
    },
    "output": "Error: 'tax_id' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show referral code and GST for all resellers.",
      "fields": [
        "referral_code",
        "partner_type"
      ]
    },
    "output": "Error: 'GST' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners are shown on the website but have no description?",
      "fields": [
        "partner_name",
        "show_in_website",
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'show_in_website': 1, 'description': ['=', ''] }, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show visible partners who didn’t enter an introduction.",
      "fields": [
        "partner_name",
        "show_in_website",
        "introduction"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'show_in_website': 1, 'introduction': ['=', ''] }, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find website-visible partners missing their logo.",
      "fields": [
        "show_in_website",
        "logo",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'show_in_website': 1, 'logo': ['=', ''] }, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List partners from Gulf, Asia, or MENA regions.",
      "fields": [
        "territory",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'territory': ['in', ['Gulf', 'Asia', 'MENA']] }, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show partners with websites on example.com or example.org.",
      "fields": [
        "partner_name",
        "partner_website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', or_filters=[['partner_website', 'like', '%example.com%'], ['partner_website', 'like', '%example.org%']], fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners have 'bulk' or 'enterprise' in their description?",
      "fields": [
        "partner_name",
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', or_filters=[['description', 'like', '%bulk%'], ['description', 'like', '%enterprise%']], fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find partners whose introduction includes the word 'exclusive'.",
      "fields": [
        "introduction",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'introduction': ['like', '%exclusive%'] }, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Search for partners with 'trusted' in their description or intro.",
      "fields": [
        "introduction",
        "description",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', or_filters=[['description', 'like', '%trusted%'], ['introduction', 'like', '%trusted%']], fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners have defined target details?",
      "fields": [
        "partner_name",
        "targets"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'targets': ['!=', ''] }, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get the contact and address descriptions for all resellers.",
      "fields": [
        "partner_type",
        "contact_desc",
        "address_desc"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'partner_type': 'Reseller' }, fields=['contact_desc', 'address_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List partners in India who have added a description.",
      "fields": [
        "territory",
        "description",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'territory': 'India', 'description': ['!=', ''] }, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find resellers who have defined sales targets.",
      "fields": [
        "partner_type",
        "targets",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'partner_type': 'Reseller', 'targets': ['!=', ''] }, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners are either in Asia or Europe?",
      "fields": [
        "territory",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', or_filters=[['territory', '=', 'Asia'], ['territory', '=', 'Europe']], fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get partners who are either resellers or commission agents.",
      "fields": [
        "partner_type",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', or_filters=[['partner_type', '=', 'Reseller'], ['partner_type', '=', 'Commission Agent']], fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find partners in either 'Gulf' or 'MENA' territories.",
      "fields": [
        "territory",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', or_filters=[['territory', '=', 'Gulf'], ['territory', '=', 'MENA']], fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Who are affiliates or distributors listed on the website?",
      "fields": [
        "partner_type",
        "show_in_website",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'show_in_website': 1 }, or_filters=[['partner_type', '=', 'Affiliate'], ['partner_type', '=', 'Distributor']], fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List the names and websites of partners visible on the site.",
      "fields": [
        "partner_name",
        "partner_website",
        "show_in_website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'show_in_website': 1 }, fields=['partner_name', 'partner_website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show partner type and contact email of all partners.",
      "fields": [
        "partner_type"
      ]
    },
    "output": "Error: 'contact_email' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners are visible on the website but haven’t added a referral code?",
      "fields": [
        "partner_name",
        "show_in_website",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'show_in_website': 1, 'referral_code': ['=', ''] }, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show all dealers and affiliates.",
      "fields": [
        "partner_type",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'partner_type': ['in', ['Dealer', 'Affiliate']] }, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find partners with ‘bulk’ in their description.",
      "fields": [
        "description",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'description': ['like', '%bulk%'] }, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What are the target details of partners in the UAE?",
      "fields": [
        "territory",
        "targets"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'territory': 'UAE' }, fields=['targets'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners don’t have any description?",
      "fields": [
        "partner_name",
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'description': ['=', ''] }, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show introduction and logo for all resellers.",
      "fields": [
        "partner_type",
        "introduction",
        "logo"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'partner_type': 'Reseller' }, fields=['introduction', 'logo'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners have their logo and website?",
      "fields": [
        "partner_name",
        "logo",
        "partner_website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'logo': ['!=', ''], 'partner_website': ['!=', ''] }, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me contact numbers of all affiliates.",
      "fields": [
        "partner_name",
        "partner_type"
      ]
    },
    "output": "Error: 'contact_number' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show referral codes of all partners who are marked for website display.",
      "fields": [
        "referral_code",
        "show_in_website",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'show_in_website': 1 }, fields=['partner_name', 'referral_code'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show me all partners with a commission rate of more than 10% in the Gulf region.",
      "fields": [
        "partner_name",
        "commission_rate",
        "territory"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'commission_rate': ['>', 10], 'territory': 'Gulf' }, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Where can I view the total commission earned by sales partner 'Global Deals LLP' this quarter?",
      "fields": [
        "partner_name",
        "commission_rate"
      ]
    },
    "output": "frappe.db.get_value('Sales Partner', {'partner_name': 'Global Deals LLP'}, 'commission_rate')"
  },
  {
    "input": {
      "doctype": "Opportunity",
      "question": "How can I track all sales opportunities created for Q2 (April to June 2025)?",
      "fields": [
        "transaction_date"
      ]
    },
    "output": "frappe.get_list('Opportunity', filters={ 'transaction_date': ['between', ['2025-04-01', '2025-06-30']] })"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "How do I create a new lead from a website inquiry named 'John Smith'?",
      "fields": [
        "lead_name",
        "email_id",
        "source"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'Lead', 'lead_name': 'John Smith', 'email_id': 'john.smith@example.com', 'source': 'Website' }).insert()"
  },
  {
    "input": {
      "doctype": "BOM",
      "question": "I want to create a new BOM for the product 'SmartWidget X200'. How can I do that?",
      "fields": [
        "item",
        "quantity",
        "items"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'BOM', 'item': 'SmartWidget X200', 'quantity': 1, 'items': [] }).insert()"
  },
  {
    "input": {
      "doctype": "BOM",
      "question": "Where can I check the estimated cost from the BOM for 'HeatShield Panel'?",
      "fields": [
        "total_cost",
        "item"
      ]
    },
    "output": "frappe.db.get_value('BOM', {'item': 'HeatShield Panel'}, 'total_cost')"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "Show the work order linked to production batch 'BATCH-00015'.",
      "fields": [
        "production_item",
        "status",
        "batch_no"
      ]
    },
    "output": "frappe.get_list('Work Order', filters={'batch_no': 'BATCH-00015'}, fields=['production_item', 'status'])"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "Get the current status of work order 'WO-00023'.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.get_value('Work Order', 'WO-00023', 'status')"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "Which workstation is assigned to work order 'WO-00045'?",
      "fields": [
        "workstation"
      ]
    },
    "output": "frappe.db.get_value('Work Order', 'WO-00045', 'workstation')"
  },
  {
    "input": {
      "doctype": "Production Plan",
      "question": "List all production plans created for Q2 2025.",
      "fields": [
        "name",
        "company",
        "planned_start_date"
      ]
    },
    "output": "frappe.get_list('Production Plan', filters={'planned_start_date': ['between', ['2025-04-01', '2025-06-30']]}, fields=['name', 'company', 'planned_start_date'])"
  },
  {
    "input": {
      "doctype": "Production Plan",
      "question": "Which work orders are included in production plan 'PP-00014'?",
      "fields": [
        "work_order",
        "name"
      ]
    },
    "output": "frappe.get_list('Production Plan', filters={'name': 'PP-00014'}, fields=['work_order'])"
  },
  {
    "input": {
      "doctype": "Production Plan",
      "question": "Check the planned quantity for item 'ITEM-0009' in production plan 'PP-00012'.",
      "fields": [
        "planned_qty",
        "item_code"
      ]
    },
    "output": "frappe.get_list('Production Plan Item', filters={'parent': 'PP-00012', 'item_code': 'ITEM-0009'}, fields=['planned_qty'])"
  },
  {
    "input": {
      "doctype": "Job Card",
      "question": "Get operation log for job card 'JC-00120'.",
      "fields": [
        "operation",
        "time_logs"
      ]
    },
    "output": "frappe.db.get_value('Job Card', 'JC-00120', ['operation', 'time_logs'])"
  },
  {
    "input": {
      "doctype": "Job Card",
      "question": "Is the job card 'JC-00130' marked as completed?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.get_value('Job Card', 'JC-00130', 'status')"
  },
  {
    "input": {
      "doctype": "Job Card",
      "question": "Who is the operator assigned to job card 'JC-00089'?",
      "fields": [
        "employee"
      ]
    },
    "output": "frappe.db.get_value('Job Card', 'JC-00089', 'employee')"
  },
  {
    "input": {
      "doctype": "Salary Slip",
      "question": "Get salary slips for all employees generated for April 2025.",
      "fields": [
        "employee",
        "posting_date"
      ]
    },
    "output": "frappe.get_list('Salary Slip', filters={'posting_date': ['between', ['2025-04-01', '2025-04-30']]}, fields=['employee', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Salary Slip",
      "question": "Show all deductions applied to salary slip 'SS-00210'.",
      "fields": [
        "deductions"
      ]
    },
    "output": "frappe.db.get_value('Salary Slip', 'SS-00210', 'deductions')"
  },
  {
    "input": {
      "doctype": "BOM",
      "question": "Can you show me the list of raw materials used in the BOM for 'EcoCooler 500'?",
      "fields": [
        "items"
      ]
    },
    "output": "frappe.get_doc('BOM', 'BOM-EC500').items"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "What is the current status of lead 'LEAD-00123' in the CRM?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.get_value('Lead', 'LEAD-00123', 'status')"
  },
  {
    "input": {
      "doctype": "Opportunity",
      "question": "Who is assigned as the opportunity owner for deal OPP-00321?",
      "fields": [
        "opportunity_owner"
      ]
    },
    "output": "frappe.db.get_value('Opportunity', 'OPP-00321', 'opportunity_owner')"
  },
  {
    "input": {
      "doctype": "Opportunity",
      "question": "When is the expected closing date for opportunity OPP-00456?",
      "fields": [
        "expected_closing"
      ]
    },
    "output": "frappe.db.get_value('Opportunity', 'OPP-00456', 'expected_closing')"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "What is the designation and email address of employee John Doe?",
      "fields": [
        "designation",
        "personal_email"
      ]
    },
    "output": "frappe.db.get_value('Employee', 'EMP-0001', ['designation', 'personal_email'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "What is the price and description of item 'ITEM-0001'?",
      "fields": [
        "description",
        "standard_rate"
      ]
    },
    "output": "frappe.db.get_value('Item', 'ITEM-0001', ['description', 'standard_rate'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "What are the barcode and stock unit set for item 'AeroDrone X5'?",
      "fields": [
        "barcodes",
        "stock_uom"
      ]
    },
    "output": "frappe.db.get_value('Item', 'AeroDrone X5', ['barcodes', 'stock_uom'])"
  },
  {
    "input": {
      "doctype": "Item Group",
      "question": "Which item group is 'AeroDrone X5' assigned to?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.db.get_value('Item', 'AeroDrone X5', 'item_group')"
  },
  {
    "input": {
      "doctype": "Item Group",
      "question": "Which warehouse is set as default for the item group 'Electronics'?",
      "fields": [
        "default_warehouse"
      ]
    },
    "output": "frappe.db.get_value('Item Group', 'Electronics', 'default_warehouse')"
  },
  {
    "input": {
      "doctype": "Batch",
      "question": "When does the batch 'BATCH-042' of 'EcoFilter Max' expire?",
      "fields": [
        "expiry_date"
      ]
    },
    "output": "frappe.db.get_value('Batch', 'BATCH-042', 'expiry_date')"
  },
  {
    "input": {
      "doctype": "Serial No",
      "question": "What is the maintenance status of serial number 'SN-X5-101'?",
      "fields": [
        "maintenance_status"
      ]
    },
    "output": "frappe.db.get_value('Serial No', 'SN-X5-101', 'maintenance_status')"
  },
  {
    "input": {
      "doctype": "Serial No",
      "question": "What is the current status of serial number 'SN-X7-222'?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.get_value('Serial No', 'SN-X7-222', 'status')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "What is the current address for warehouse 'Main Store'?",
      "fields": [
        "address_line_1"
      ]
    },
    "output": "frappe.db.get_value('Warehouse', 'Main Store', 'address_line_1')"
  },
  {
    "input": {
      "doctype": "UOM",
      "question": "What is the full name of the unit 'Box' used for sales?",
      "fields": [
        "uom_name"
      ]
    },
    "output": "frappe.db.get_value('UOM', 'Box', 'uom_name')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What email address is set for sales partner 'ZapNest Distributors'?",
      "fields": [
        "email_id"
      ]
    },
    "output": "frappe.db.get_value('Sales Partner', 'ZapNest Distributors', 'email_id')"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Which territory is assigned to lead LEAD-00045?",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.db.get_value('Lead', 'LEAD-00045', 'territory')"
  },
  {
    "input": {
      "doctype": "Cost Center",
      "question": "Which cost centers are created to track research and development expenses?",
      "fields": [
        "name",
        "cost_center_name",
        "company"
      ]
    },
    "output": "frappe.get_list('Cost Center', filters={'cost_center_name': ['like', '%R&D%']}, fields=['name', 'cost_center_name'])"
  },
  {
    "input": {
      "doctype": "Cost Center",
      "question": "Where can I find budget-linked cost centers for the marketing department?",
      "fields": [
        "name",
        "cost_center_name",
        "company"
      ]
    },
    "output": "frappe.get_list('Cost Center', filters={'cost_center_name': ['like', '%Marketing%']}, fields=['name', 'cost_center_name'])"
  },
  {
    "input": {
      "doctype": "Cost Center",
      "question": "Which cost centers are currently marked as inactive in the system?",
      "fields": [
        "name",
        "cost_center_name",
        "disabled"
      ]
    },
    "output": "frappe.get_list('Cost Center', filters={'disabled': 1}, fields=['name', 'cost_center_name'])"
  },
  {
    "input": {
      "doctype": "Request for Quotation",
      "question": "Can you show the list of RFQs sent to multiple suppliers this month?",
      "fields": [
        "suppliers",
        "transaction_date",
        "status"
      ]
    },
    "output": "frappe.get_list('Request for Quotation', filters={'transaction_date': ['between', ['2025-04-01', '2025-04-30']]}, fields=['name', 'transaction_date', 'status'])"
  },
  {
    "input": {
      "doctype": "Request for Quotation",
      "question": "What's the current response status for the request for quotation 'RFQ-00045'?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.get_value('Request for Quotation', 'RFQ-00045', 'status')"
  },
  {
    "input": {
      "doctype": "Request for Quotation",
      "question": "List RFQs that are still pending or awaiting supplier responses.",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.get_list('Request for Quotation', filters={'status': ['in', ['Draft', 'Open']]}, fields=['name', 'status'])"
  },
  {
    "input": {
      "doctype": "Purchase Taxes and Charges",
      "question": "Can you show me the tax templates used for import purchases?",
      "fields": [
        "category",
        "charge_type",
        "rate",
        "account_head"
      ]
    },
    "output": "frappe.get_list('Purchase Taxes and Charges', filters={'category': 'Valuation and Total', 'charge_type': 'Actual'}, fields=['account_head', 'rate'])"
  },
  {
    "input": {
      "doctype": "Purchase Taxes and Charges",
      "question": "What is the surcharge value currently set in our purchase tax settings?",
      "fields": [
        "description",
        "rate"
      ]
    },
    "output": "frappe.get_list('Purchase Taxes and Charges', filters={'description': ['like', '%surcharge%']}, fields=['description', 'rate'])"
  },
  {
    "input": {
      "doctype": "Purchase Taxes and Charges",
      "question": "Which account head is linked to the import charges template?",
      "fields": [
        "account_head",
        "description"
      ]
    },
    "output": "frappe.get_list('Purchase Taxes and Charges', filters={'description': ['like', '%import%']}, fields=['account_head'])"
  },
  {
    "input": {
      "doctype": "Tax Rule",
      "question": "Are there any tax rules that apply 18% GST for purchases made in Delhi?",
      "fields": [
        "billing_state",
        "purchase_tax_template",
        "tax_category"
      ]
    },
    "output": "frappe.get_list('Tax Rule', filters={'billing_state': 'Delhi', 'tax_category': 'GST'}, fields=['purchase_tax_template'])"
  },
  {
    "input": {
      "doctype": "Tax Rule",
      "question": "Which tax rules exclude services from taxation?",
      "fields": [
        "item_group",
        "purchase_tax_template"
      ]
    },
    "output": "frappe.get_list('Tax Rule', filters={'item_group': ['!=', 'Services']}, fields=['purchase_tax_template'])"
  },
  {
    "input": {
      "doctype": "Tax Rule",
      "question": "List all tax rules that are marked inactive or outdated.",
      "fields": [
        "to_date",
        "purchase_tax_template"
      ]
    },
    "output": "frappe.get_list('Tax Rule', filters={'to_date': ['<', frappe.utils.today()]}, fields=['purchase_tax_template'])"
  },
  {
    "input": {
      "doctype": "Pricing Rule",
      "question": "Which pricing rules apply discounts to bulk orders?",
      "fields": [
        "title",
        "min_qty",
        "discount_percentage",
        "rate"
      ]
    },
    "output": "frappe.get_list('Pricing Rule', filters={'min_qty': ['>', 50]}, fields=['title', 'discount_percentage', 'rate'])"
  },
  {
    "input": {
      "doctype": "Pricing Rule",
      "question": "Can I see pricing rules based on customer group conditions?",
      "fields": [
        "title",
        "customer_group",
        "rate",
        "discount_percentage"
      ]
    },
    "output": "frappe.get_list('Pricing Rule', filters={'customer_group': ['!=', '']}, fields=['title', 'rate', 'discount_percentage'])"
  },
  {
    "input": {
      "doctype": "Pricing Rule",
      "question": "Which pricing rules are active for seasonal discounts this quarter?",
      "fields": [
        "title",
        "valid_from",
        "valid_upto",
        "rate",
        "discount_percentage"
      ]
    },
    "output": "frappe.get_list('Pricing Rule', filters={'valid_from': ['<=', frappe.utils.today()], 'valid_upto': ['>=', frappe.utils.today()]}, fields=['title', 'rate', 'discount_percentage'])"
  },
  {
    "input": {
      "doctype": "Mode of Payment",
      "question": "What payment methods like UPI or card are allowed in the system?",
      "fields": [
        "name",
        "type",
        "enabled"
      ]
    },
    "output": "frappe.get_list('Mode of Payment', filters={'enabled': 1}, fields=['name', 'type'])"
  },
  {
    "input": {
      "doctype": "Mode of Payment",
      "question": "Which payment modes are enabled for use in POS?",
      "fields": [
        "name",
        "type",
        "enabled",
        "enable_in_pos"
      ]
    },
    "output": "frappe.get_list('Mode of Payment', filters={'enabled': 1, 'enable_in_pos': 1}, fields=['name', 'type'])"
  },
  {
    "input": {
      "doctype": "Mode of Payment",
      "question": "Is cheque enabled as an accepted payment method?",
      "fields": [
        "name",
        "enabled"
      ]
    },
    "output": "frappe.db.get_value('Mode of Payment', {'name': 'Cheque'}, 'enabled')"
  },
  {
    "input": {
      "doctype": "Sales Taxes and Charges",
      "question": "Which sales tax templates include a 5% VAT rate?",
      "fields": [
        "rate",
        "account_head",
        "charge_type"
      ]
    },
    "output": "frappe.get_list('Sales Taxes and Charges', filters={'rate': 5}, fields=['account_head', 'charge_type'])"
  },
  {
    "input": {
      "doctype": "Sales Taxes and Charges",
      "question": "Which tax accounts are linked to sales tax templates?",
      "fields": [
        "account_head",
        "charge_type"
      ]
    },
    "output": "frappe.get_all('Sales Taxes and Charges', fields=['account_head', 'charge_type'])"
  },
  {
    "input": {
      "doctype": "Sales Taxes and Charges",
      "question": "Are any sales tax templates disabled for inter-state transactions?",
      "fields": [
        "account_head",
        "charge_type",
        "description"
      ]
    },
    "output": "frappe.get_list('Sales Taxes and Charges', filters={'description': ['like', '%inter-state%']}, fields=['account_head', 'charge_type'])"
  },
  {
    "input": {
      "doctype": "Account",
      "question": "What are the active expense accounts in our chart of accounts?",
      "fields": [
        "name",
        "account_type",
        "root_type",
        "is_group",
        "disabled"
      ]
    },
    "output": "frappe.get_list('Account', filters={'account_type': 'Expense', 'disabled': 0}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Account",
      "question": "Can you show me our entire chart of accounts grouped by type?",
      "fields": [
        "name",
        "account_type",
        "root_type"
      ]
    },
    "output": "frappe.get_all('Account', fields=['name', 'account_type', 'root_type'])"
  },
  {
    "input": {
      "doctype": "Account",
      "question": "Which accounts have been marked as frozen?",
      "fields": [
        "name",
        "freeze_account"
      ]
    },
    "output": "frappe.get_list('Account', filters={'freeze_account': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Fiscal Year",
      "question": "What is the end date for the fiscal year 2025\u20132026?",
      "fields": [
        "year",
        "year_end_date"
      ]
    },
    "output": "frappe.db.get_value('Fiscal Year', {'year': '2025\u20132026'}, 'year_end_date')"
  },
  {
    "input": {
      "doctype": "Fiscal Year",
      "question": "Which fiscal year is currently set as the default in the system?",
      "fields": [
        "year",
        "disabled"
      ]
    },
    "output": "frappe.get_list('Fiscal Year', filters={'disabled': 0}, fields=['year'])"
  },
  {
    "input": {
      "doctype": "Currency",
      "question": "Is AED an enabled currency in the system?",
      "fields": [
        "enabled",
        "currency_name"
      ]
    },
    "output": "frappe.db.get_value('Currency', {'currency_name': 'AED'}, 'enabled')"
  },
  {
    "input": {
      "doctype": "Currency",
      "question": "What's the conversion rate between USD and INR?",
      "fields": [
        "conversion_rate",
        "currency_name"
      ]
    },
    "output": "frappe.db.get_value('Currency', {'currency_name': 'INR'}, 'conversion_rate')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "What GST number is saved for customer 'Globe Enterprises'?",
      "fields": [
        "tax_id",
        "customer_name"
      ]
    },
    "output": "frappe.db.get_value('Customer', {'customer_name': 'Globe Enterprises'}, 'tax_id')"
  },
  {
    "input": {
      "doctype": "Quotation",
      "question": "What is the total amount quoted to customer 'GreenMart' in the latest quotation?",
      "fields": [
        "party_name",
        "grand_total"
      ]
    },
    "output": "frappe.get_list('Quotation', filters={'party_name': 'GreenMart'}, fields=['grand_total'], order_by='creation desc', limit=1)"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "When does the quotation from 'Raj Suppliers' expire?",
      "fields": [
        "supplier",
        "valid_till"
      ]
    },
    "output": "frappe.get_list('Supplier Quotation', filters={'supplier': 'Raj Suppliers'}, fields=['valid_till'], order_by='creation desc', limit=1)"
  },
  {
    "input": {
      "doctype": "Mode of Payment",
      "question": "Is UPI listed as an active mode of payment in the system?",
      "fields": [
        "mode_of_payment",
        "enabled"
      ]
    },
    "output": "frappe.db.get_value('Mode of Payment', {'mode_of_payment': 'UPI'}, 'enabled')"
  },
  {
    "input": {
      "doctype": "Sales Taxes and Charges",
      "question": "What tax rate is applied for inter-state sales in our current tax settings?",
      "fields": [
        "tax_category",
        "rate",
        "account_head"
      ]
    },
    "output": "frappe.get_list('Sales Taxes and Charges', filters={'tax_category': 'Inter-State Sales'}, fields=['account_head', 'rate'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Can you show me the details of the purchase order created for the vendor 'Vendora Public'?",
      "fields": [
        "name",
        "supplier",
        "transaction_date",
        "status"
      ]
    },
    "output": "frappe.get_list('Purchase Order', filters={'supplier': 'Vendora Public'}, fields=['name', 'transaction_date', 'status'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Please show me all the purchase invoices that were recorded last month.",
      "fields": [
        "name",
        "posting_date",
        "supplier",
        "status"
      ]
    },
    "output": "frappe.get_list('Purchase Invoice', filters={'posting_date': ['between', ['2025-03-01', '2025-03-31']]}, fields=['name', 'supplier', 'status'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Can you show me all delivery notes made in April 2025?",
      "fields": [
        "name",
        "posting_date",
        "customer",
        "grand_total"
      ]
    },
    "output": "frappe.get_list('Delivery Note', filters={'posting_date': ['between', ['2025-04-01', '2025-04-30']]}, fields=['name', 'posting_date', 'customer', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "What warehouse was used for the delivery note DN-00023?",
      "fields": [
        "set_warehouse"
      ]
    },
    "output": "frappe.db.get_value('Delivery Note', 'DN-00023', 'set_warehouse')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What is the commission rate and territory for Sales Partner 'Crimson Fig Traders'?",
      "fields": [
        "commission_rate",
        "territory"
      ]
    },
    "output": "frappe.db.get_value('Sales Partner', 'Crimson Fig Traders', ['commission_rate', 'territory'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all sales partners shown on the website.",
      "fields": [
        "partner_name",
        "territory",
        "show_in_website"
      ]
    },
    "output": "frappe.get_list('Sales Partner', filters={'show_in_website': 1}, fields=['partner_name', 'territory'])"
  },
  {
    "input": {
      "doctype": "Contact",
      "question": "Get the email and phone number of the contact named 'Sana Shaikh'.",
      "fields": [
        "email_id",
        "phone"
      ]
    },
    "output": "frappe.db.get_value('Contact', 'Sana Shaikh', ['email_id', 'phone'])"
  },
  {
    "input": {
      "doctype": "Contact",
      "question": "Can you list all contacts created in the last 7 days?",
      "fields": [
        "first_name",
        "last_name",
        "email_id",
        "phone"
      ]
    },
    "output": "frappe.get_list('Contact', filters={ 'creation': ['>=', frappe.utils.add_days(frappe.utils.today(), -7)] }, fields=['first_name', 'last_name', 'email_id', 'phone'])"
  },
  {
    "input": {
      "doctype": "Address",
      "question": "Show all customer addresses located in Dubai.",
      "fields": [
        "address_title",
        "city",
        "address_line1",
        "customer"
      ]
    },
    "output": "frappe.get_list('Address', filters={ 'city': 'Dubai' }, fields=['address_title', 'address_line1', 'customer'])"
  },

  {
    "input": {
      "doctype": "Warehouse",
      "question": "Find warehouses in Qatar with warehouse type 'Finished Goods' and city as 'Al Wakrah'.",
      "fields": [
        "warehouse_type",
        "city"
      ]
    },
    "output": "frappe.get_all('Warehouse', filters={ 'warehouse_type': 'Finished Goods', 'city': 'Al Wakrah' }, fields=['warehouse_type', 'city'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which warehouses have no parent and are not groups?",
      "fields": [
        "parent_warehouse",
        "is_group"
      ]
    },
    "output": "frappe.get_all('Warehouse', filters={ 'parent_warehouse': '', 'is_group': 0 }, fields=['warehouse_name'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Show warehouses with mobile numbers starting with '500' and located in 'Doha'.",
      "fields": [
        "mobile_no",
        "city"
      ]
    },
    "output": "frappe.get_all('Warehouse', filters={ 'mobile_no': ['like', '500%'], 'city': 'Doha' }, fields=['warehouse_name', 'mobile_no'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "List warehouses with email addresses containing 'erpgulf.com'.",
      "fields": [
        "email_id"
      ]
    },
    "output": "frappe.get_all('Warehouse', filters={ 'email_id': ['like', '%erpgulf.com'] }, fields=['warehouse_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which warehouses in state 'Riyadh' have no phone numbers listed?",
      "fields": [
        "state",
        "phone_no"
      ]
    },
    "output": "frappe.get_all('Warehouse', filters={ 'state': 'Riyadh', 'phone_no': '' }, fields=['warehouse_name'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Find all rejected warehouses under the company 'ERP Gulf Qatar'.",
      "fields": [
        "is_rejected_warehouse",
        "company"
      ]
    },
    "output": "frappe.get_list('Warehouse', filters={ 'is_rejected_warehouse': 1, 'company': 'ERP Gulf Qatar' }, fields=['warehouse_name'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "List warehouses with contact phone and email both provided.",
      "fields": [
        "phone_no",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Warehouse', filters={ 'phone_no': ['!=', ''], 'email_id': ['!=', ''] }, fields=['phone_no', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which warehouses are marked disabled and belong to company 'BuildWell Co'?",
      "fields": [
        "disabled",
        "company"
      ]
    },
    "output": "frappe.get_all('Warehouse', filters={ 'disabled': 1, 'company': 'BuildWell Co' }, fields=['disabled', 'company'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Show warehouses created after Jan 1, 2024 in the city 'Doha'.",
      "fields": [
        "creation",
        "city"
      ]
    },
    "output": "frappe.get_all('Warehouse', filters={ 'creation': ['>', '2024-01-01'], 'city': 'Doha' }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Find warehouses with pin codes starting from '12' and of type 'Raw Material'.",
      "fields": [
        "pin",
        "warehouse_type"
      ]
    },
    "output": "frappe.get_list('Warehouse', filters={ 'pin': ['like', '12%'], 'warehouse_type': 'Raw Material' }, fields=['warehouse_name'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which warehouses are listed as default transit warehouses and belong to company 'LogiTech Inc'?",
      "fields": [
        "default_in_transit_warehouse",
        "company"
      ]
    },
    "output": "frappe.get_all('Warehouse', filters={ 'default_in_transit_warehouse': ['!=', ''], 'company': 'LogiTech Inc' }, fields=['warehouse_name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "List stock entries of type 'Material Transfer' for company 'HTS Trading Co'.",
      "fields": [
        "stock_entry_type",
        "company"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'stock_entry_type': 'Material Transfer', 'company': 'HTS Trading Co' }, fields=['name', 'stock_entry_type', 'company'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Show all stock entries created after March 1, 2025 with purpose 'Repack'.",
      "fields": [
        "creation",
        "purpose"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'creation': ['>', '2025-03-01'], 'purpose': 'Repack' }, fields=['name', 'creation', 'purpose'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Which stock entries have process loss more than 5% and total additional costs above 1000?",
      "fields": [
        "process_loss_percentage",
        "total_additional_costs"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'process_loss_percentage': ['>', 5], 'total_additional_costs': ['>', 1000] }, fields=['name', 'process_loss_percentage', 'total_additional_costs'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Find stock entries using BOM number 'BOM-1021' that are marked as 'From Multi-Level BOM'.",
      "fields": [
        "bom_no",
        "use_multi_level_bom"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'bom_no': 'BOM-1021', 'use_multi_level_bom': 1 }, fields=['name', 'bom_no', 'use_multi_level_bom'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "List stock entries for subcontracting order 'SUB-0003' linked to supplier 'BuildMart Supplies'.",
      "fields": [
        "subcontracting_order",
        "supplier"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'subcontracting_order': 'SUB-0003', 'supplier': 'BuildMart Supplies' }, fields=['name', 'subcontracting_order', 'supplier'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Which stock entries moved stock from 'Main Warehouse' to 'Transit Warehouse'?",
      "fields": [
        "from_warehouse",
        "to_warehouse"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'from_warehouse': 'Main Warehouse', 'to_warehouse': 'Transit Warehouse' }, fields=['name', 'from_warehouse', 'to_warehouse'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Show stock entries from project 'Qatar Mall Build' with purpose 'Manufacture'.",
      "fields": [
        "project",
        "purpose"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'project': 'Qatar Mall Build', 'purpose': 'Manufacture' }, fields=['name', 'project', 'purpose'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Find stock entries with value difference not equal to zero and remarks present.",
      "fields": [
        "value_difference",
        "remarks"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'value_difference': ['!=', 0], 'remarks': ['!=', ''] }, fields=['name', 'value_difference', 'remarks'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "List entries with inspection required and apply putaway rule both enabled.",
      "fields": [
        "inspection_required",
        "apply_putaway_rule"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'inspection_required': 1, 'apply_putaway_rule': 1 }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "List all stock entries with purpose 'Material Transfer' from 'Main Warehouse' to 'Doha Warehouse'.",
      "fields": [
        "purpose",
        "from_warehouse",
        "to_warehouse"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'purpose': 'Material Transfer', 'from_warehouse': 'Main Warehouse', 'to_warehouse': 'Doha Warehouse' }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Show stock entries created in the last 7 days for subcontracting purposes.",
      "fields": [
        "posting_date",
        "purpose"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'posting_date': ['>', frappe.utils.add_days(frappe.utils.nowdate(), -7)], 'purpose': 'Subcontract' }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Find stock entries where total incoming value exceeded total outgoing value.",
      "fields": [
        "total_incoming_value",
        "total_outgoing_value"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'total_incoming_value': ['>', 'total_outgoing_value'] }, fields=['name', 'total_incoming_value', 'total_outgoing_value'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Which stock entries were inspected and added to transit?",
      "fields": [
        "inspection_required",
        "add_to_transit"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'inspection_required': 1, 'add_to_transit': 1 }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Get stock entries linked to project 'Metro Expansion' and supplier 'SteelWorld Ltd'.",
      "fields": [
        "project",
        "supplier"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'project': 'Metro Expansion', 'supplier': 'SteelWorld Ltd' }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Find entries that have both a work order and a BOM set.",
      "fields": [
        "work_order",
        "bom_no"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'work_order': ['!=', ''], 'bom_no': ['!=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Show entries where multi-level BOM is used and the quantity completed is over 100.",
      "fields": [
        "use_multi_level_bom",
        "fg_completed_qty"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'use_multi_level_bom': 1, 'fg_completed_qty': ['>', 100] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "List stock entries that were returns and had process loss greater than 5%.",
      "fields": [
        "is_return",
        "process_loss_percentage"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'is_return': 1, 'process_loss_percentage': ['>', 5] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Find entries with additional costs over 1000 and inspection not required.",
      "fields": [
        "total_additional_costs",
        "inspection_required"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'total_additional_costs': ['>', 1000], 'inspection_required': 0 }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Show entries created by user 'admin@erpgulf.com' and modified after June 1, 2025.",
      "fields": [
        "owner",
        "modified"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'owner': 'admin@erpgulf.com', 'modified': ['>', '2025-06-01'] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Which stock entries have posting date after Jan 1, 2024 and are returns?",
      "fields": [
        "posting_date",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'posting_date': ['>', '2024-01-01'], 'is_return': 1 }, fields=['name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "List all stock entries created for company 'HTS Trading Co'.",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'company': 'HTS Trading Co' }, fields=['name', 'company'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Which stock entries are marked as returns and linked to job cards?",
      "fields": [
        "is_return",
        "job_card"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'is_return': 1, 'job_card': ['!=', ''] }, fields=['name', 'job_card'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Show stock entries created between Jan and Mar 2025 for subcontracting purpose.",
      "fields": [
        "posting_date",
        "purpose"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'posting_date': ['between', ['2025-01-01', '2025-03-31']], 'purpose': 'Subcontract' }, fields=['name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Which stock entries used BOM and applied multi-level BOMs?",
      "fields": [
        "from_bom",
        "use_multi_level_bom"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'from_bom': 1, 'use_multi_level_bom': 1 }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Find stock entries with inspection required and apply putaway rule enabled.",
      "fields": [
        "inspection_required",
        "apply_putaway_rule"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'inspection_required': 1, 'apply_putaway_rule': 1 }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Which stock entries transferred items from 'Central Warehouse' to 'Finished Goods Warehouse'?",
      "fields": [
        "from_warehouse",
        "to_warehouse"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'from_warehouse': 'Central Warehouse', 'to_warehouse': 'Finished Goods Warehouse' }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Show stock entries with total incoming value greater than 50000 and process loss under 2%.",
      "fields": [
        "total_incoming_value",
        "process_loss_percentage"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'total_incoming_value': ['>', 50000], 'process_loss_percentage': ['<', 2] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Get all stock entries for raw material transfers this quarter.",
      "fields": [
        "name",
        "stock_entry_type",
        "posting_date",
        "company"
      ]
    },
    "output": "frappe.get_list('Stock Entry', filters={ 'stock_entry_type': 'Material Transfer', 'posting_date': ['between', ['2025-04-01', '2025-06-30']] }, fields=['name', 'posting_date', 'company'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Which stock entries in 2024 were created to fulfill sales invoices and had incoming value greater than outgoing?",
      "fields": [
        "posting_date",
        "sales_invoice_no",
        "total_incoming_value",
        "total_outgoing_value"
      ]
    },
    "output": "frappe.db.get_all('Stock Entry', filters={ 'sales_invoice_no': ['!=', ''], 'posting_date': ['between', ['2024-01-01', '2024-12-31']], 'total_incoming_value': ['>', 'total_outgoing_value'] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "List stock entries for subcontracting where no supplier address was provided.",
      "fields": [
        "purpose",
        "supplier_address"
      ]
    },
    "output": "frappe.db.get_all('Stock Entry', filters={ 'purpose': 'Subcontract', 'supplier_address': '' }, fields=['name', 'supplier'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Show stock entries that had process loss percentage over 20 and were linked to a job card.",
      "fields": [
        "process_loss_percentage",
        "job_card"
      ]
    },
    "output": "frappe.db.get_all('Stock Entry', filters={ 'process_loss_percentage': ['>', 20], 'job_card': ['!=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Get all entries from January where goods moved from \u2018Factory WH\u2019 to any warehouse and additional cost was zero.",
      "fields": [
        "from_warehouse",
        "posting_date",
        "total_additional_costs"
      ]
    },
    "output": "frappe.db.get_all('Stock Entry', filters={ 'from_warehouse': 'Factory WH', 'posting_date': ['between', ['2025-01-01', '2025-01-31']], 'total_additional_costs': 0 }, fields=['name', 'to_warehouse'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Which entries created by 'sara@erpteam.com' used multi-level BOM and were linked to a Work Order?",
      "fields": [
        "use_multi_level_bom",
        "owner",
        "work_order"
      ]
    },
    "output": "frappe.db.get_all('Stock Entry', filters={ 'use_multi_level_bom': 1, 'owner': 'sara@erpteam.com', 'work_order': ['!=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Find stock entries for material receipt that did not involve any subcontracting order or purchase receipt.",
      "fields": [
        "purpose",
        "subcontracting_order",
        "purchase_receipt_no"
      ]
    },
    "output": "frappe.db.get_all('Stock Entry', filters={ 'purpose': 'Material Receipt', 'subcontracting_order': '', 'purchase_receipt_no': '' }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Which entries used 'Inspection Required', were not opening entries, and occurred after April 2025?",
      "fields": [
        "inspection_required",
        "is_opening",
        "posting_date"
      ]
    },
    "output": "frappe.db.get_all('Stock Entry', filters={ 'inspection_required': 1, 'is_opening': ['!=', 'Yes'], 'posting_date': ['>', '2025-04-01'] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Compare entries with the highest vs lowest total amount this year. Give the top and bottom 1 each.",
      "fields": [
        "total_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_amount FROM `tabStock Entry` WHERE YEAR(posting_date) = YEAR(CURDATE()) ORDER BY total_amount DESC LIMIT 1 UNION ALL SELECT name, total_amount FROM `tabStock Entry` WHERE YEAR(posting_date) = YEAR(CURDATE()) ORDER BY total_amount ASC LIMIT 1''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Give entries where supplier and customer names are missing but a project is linked.",
      "fields": [
        "supplier_name",
        "customer",
        "project"
      ]
    },
    "output": "frappe.db.get_all('Stock Entry', filters={ 'supplier_name': '', 'project': ['!=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "List stock entries from the last 90 days that were marked as return entries.",
      "fields": [
        "posting_date",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE is_return = 1 AND posting_date >= DATE_SUB(CURDATE(), INTERVAL 90 DAY)''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Show all stock entries that moved items from 'Raw Material WH' to 'Production WH' in the last 30 days.",
      "fields": [
        "from_warehouse",
        "to_warehouse",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE from_warehouse = %s AND to_warehouse = %s AND posting_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)''', ('Raw Material WH', 'Production WH'))"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "List entries where value difference was negative and supplier is 'Qatar Steels'.",
      "fields": [
        "value_difference",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE value_difference < 0 AND supplier = %s''', ('Qatar Steels',))"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Which stock entries involved a work order and were created before January 2024?",
      "fields": [
        "work_order",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE work_order IS NOT NULL AND creation < '2024-01-01'''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Get all entries where fg completed quantity is above 100 and posting time is after 4 PM.",
      "fields": [
        "fg_completed_qty",
        "posting_time"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE fg_completed_qty > 100 AND posting_time > '16:00:00'''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Which stock entries have both source and target address fields filled?",
      "fields": [
        "source_address_display",
        "target_address_display"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE source_address_display IS NOT NULL AND target_address_display IS NOT NULL''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Find entries created in June 2025 with more than 0 additional costs.",
      "fields": [
        "creation",
        "total_additional_costs"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE MONTH(creation) = 6 AND YEAR(creation) = 2025 AND total_additional_costs > 0''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "List stock entries where company is 'Gulf Industrial' and the entry is marked as Opening.",
      "fields": [
        "company",
        "is_opening"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE company = 'Gulf Industrial' AND is_opening = 'Yes'''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Get entries where remarks mention 'urgent' and inspection is not required.",
      "fields": [
        "remarks",
        "inspection_required"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE remarks LIKE '%urgent%' AND inspection_required = 0''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Which stock entries were modified by 'admin@htsqatar.com' and have a BOM number starting with 'BOM-FG'?",
      "fields": [
        "modified_by",
        "bom_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE modified_by = 'admin@htsqatar.com' AND bom_no LIKE 'BOM-FG%'''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "List all entries linked to 'Job Card JC-2025-008' and total amount above 5000.",
      "fields": [
        "job_card",
        "total_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE job_card = 'JC-2025-008' AND total_amount > 5000''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Find entries with both BOM and multi-level BOM enabled, but without process loss.",
      "fields": [
        "from_bom",
        "use_multi_level_bom",
        "process_loss_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE from_bom = 1 AND use_multi_level_bom = 1 AND (process_loss_qty = 0 OR process_loss_qty IS NULL)''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Show entries where supplier is set but supplier name is empty.",
      "fields": [
        "supplier",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE supplier IS NOT NULL AND (supplier_name IS NULL OR supplier_name = '')''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Which entries had a target warehouse in 'Jebel Ali WH' and docstatus as submitted?",
      "fields": [
        "to_warehouse",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE to_warehouse = 'Jebel Ali WH' AND docstatus = 1''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "List all entries where inspection was required and also marked as return.",
      "fields": [
        "inspection_required",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE inspection_required = 1 AND is_return = 1''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Show entries where the purpose is 'Subcontract' and subcontracting order is not empty.",
      "fields": [
        "purpose",
        "subcontracting_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE purpose = 'Subcontract' AND subcontracting_order IS NOT NULL''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Which stock entries have the same warehouse for both source and target?",
      "fields": [
        "from_warehouse",
        "to_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE from_warehouse = to_warehouse''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Find entries with value difference over 500 but remarks are missing.",
      "fields": [
        "value_difference",
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE value_difference > 500 AND (remarks IS NULL OR remarks = '')''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Get entries with purpose 'Material Transfer' and posted in March 2025.",
      "fields": [
        "purpose",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE purpose = 'Material Transfer' AND posting_date BETWEEN '2025-03-01' AND '2025-03-31'''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Which entries had more than 2% process loss and additional costs under 200?",
      "fields": [
        "process_loss_percentage",
        "total_additional_costs"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE process_loss_percentage > 2 AND total_additional_costs < 200''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "List all stock entries that do not belong to company 'HTS Qatar LLC'.",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE company != 'HTS Qatar LLC'''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Show entries created by 'mohamed@htsqatar.com' with docstatus 0 (Draft).",
      "fields": [
        "owner",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE owner = 'mohamed@htsqatar.com' AND docstatus = 0''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Which stock entries are linked to both a purchase order and a delivery note?",
      "fields": [
        "purchase_order",
        "delivery_note_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE purchase_order IS NOT NULL AND delivery_note_no IS NOT NULL''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Get entries which had a process loss quantity over 100 and a process loss percentage over 15.",
      "fields": [
        "process_loss_qty",
        "process_loss_percentage"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE process_loss_qty > 100 AND process_loss_percentage > 15''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Which stock entries were for 'Repack' purpose and also had job cards attached?",
      "fields": [
        "purpose",
        "job_card"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE purpose = %s AND job_card IS NOT NULL''', ('Repack',))"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Show entries with multi-level BOM checked and BOM number starting with 'BOM-2025'.",
      "fields": [
        "use_multi_level_bom",
        "bom_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE use_multi_level_bom = 1 AND bom_no LIKE %s''', ('BOM-2025%',))"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Find stock entries created by 'anisa@htsqatar.com' that had posting time before 10 AM.",
      "fields": [
        "owner",
        "posting_time"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE owner = %s AND posting_time < %s''', ('anisa@htsqatar.com', '10:00:00'))"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "List entries where additional costs exceeded 1000 and total incoming value is greater than 10000.",
      "fields": [
        "total_additional_costs",
        "total_incoming_value"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE total_additional_costs > 1000 AND total_incoming_value > 10000''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Get all returns made against delivery notes after May 2025.",
      "fields": [
        "is_return",
        "delivery_note_no",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE is_return = 1 AND delivery_note_no IS NOT NULL AND posting_date > %s''', ('2025-05-31',))"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Which stock entries used posting time manually and are linked with project 'Industrial Plant'?",
      "fields": [
        "set_posting_time",
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE set_posting_time = 1 AND project = %s''', ('Industrial Plant',))"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Show all entries where both outgoing and incoming values were zero.",
      "fields": [
        "total_outgoing_value",
        "total_incoming_value"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabStock Entry` WHERE total_outgoing_value = 0 AND total_incoming_value = 0''')"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Which stock entries were submitted for subcontracting orders?",
      "fields": [
        "name",
        "subcontracting_order",
        "stock_entry_type"
      ]
    },
    "output": "frappe.get_list('Stock Entry', filters={ 'stock_entry_type': 'Subcontract', 'subcontracting_order': ['!=', ''] }, fields=['name', 'subcontracting_order'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Show all stock movements for item 'Widget-X200' in warehouse 'Main Store'.",
      "fields": [
        "item_code",
        "warehouse",
        "posting_date",
        "actual_qty"
      ]
    },
    "output": "frappe.get_list('Stock Ledger Entry', filters={ 'item_code': 'Widget-X200', 'warehouse': 'Main Store' }, fields=['posting_date', 'actual_qty'])"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "Get valuation rate changes for 'Product Y' over the last 30 days.",
      "fields": [
        "item_code",
        "posting_date",
        "valuation_rate"
      ]
    },
    "output": "frappe.get_list('Stock Ledger Entry', filters={ 'item_code': 'Product Y', 'posting_date': ['>=', frappe.utils.add_days(frappe.utils.today(), -30)] }, fields=['posting_date', 'valuation_rate'])"
  },
  {
    "input": {
      "doctype": "Batch",
      "question": "Where can I find the details of the batch with ID 'BATCH-00123'?",
      "fields": [
        "item",
        "manufacturing_date",
        "expiry_date"
      ]
    },
    "output": "frappe.db.get_value('Batch', {'batch_id': 'BATCH-00123'}, ['item', 'manufacturing_date', 'expiry_date'])"
  },
  {
    "input": {
      "doctype": "Serial No",
      "question": "What item is linked to serial number 'SN-9001'?",
      "fields": [
        "item_code",
        "status",
        "warehouse"
      ]
    },
    "output": "frappe.db.get_value('Serial No', {'serial_no': 'SN-9001'}, ['item_code', 'status', 'warehouse'])"
  },
  {
    "input": {
      "doctype": "Stock Reconciliation",
      "question": "Show all stock reconciliations done in April 2025.",
      "fields": [
        "name",
        "posting_date",
        "company"
      ]
    },
    "output": "frappe.get_list('Stock Reconciliation', filters={ 'posting_date': ['between', ['2025-04-01', '2025-04-30']] }, fields=['name', 'posting_date', 'company'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Give me the contact details for the warehouse named 'Main Store'.",
      "fields": [
        "email_id",
        "phone_no",
        "address_line_1",
        "warehouse_name"
      ]
    },
    "output": "frappe.db.get_value('Warehouse', {'warehouse_name': 'Main Store'}, ['email_id', 'phone_no', 'address_line_1'])"
  },
  {
    "input": {
      "doctype": "UOM",
      "question": "Is the unit 'Box' enabled in the system?",
      "fields": [
        "enabled",
        "uom_name"
      ]
    },
    "output": "frappe.db.get_value('UOM', {'uom_name': 'Box'}, 'enabled')"
  },
  {
    "input": {
      "doctype": "Serial No",
      "question": "Where is serial number 'SN-X1005' stored and what is its status?",
      "fields": [
        "warehouse",
        "status",
        "serial_no"
      ]
    },
    "output": "frappe.db.get_value('Serial No', {'serial_no': 'SN-X1005'}, ['warehouse', 'status'])"
  },
  {
    "input": {
      "doctype": "Stock Reconciliation",
      "question": "Which account was used for the last stock reconciliation?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.get_list('Stock Reconciliation', fields=['expense_account'], limit=1, order_by='posting_date desc')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "List all active warehouses for the company 'HTS Pvt Ltd'.",
      "fields": [
        "warehouse_name",
        "company"
      ]
    },
    "output": "frappe.get_list('Warehouse', filters={'company': 'HTS Pvt Ltd', 'disabled': 0}, fields=['warehouse_name'])"
  },
  {
    "input": {
      "doctype": "UOM",
      "question": "List all enabled units of measurement used in transactions.",
      "fields": [
        "uom_name",
        "enabled"
      ]
    },
    "output": "frappe.get_list('UOM', filters={'enabled': 1}, fields=['uom_name'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "How can I list all payment entries made by customers this month?",
      "fields": [
        "name",
        "party",
        "payment_type",
        "party_type",
        "posting_date"
      ]
    },
    "output": "frappe.get_list('Payment Entry', filters={'payment_type': 'Receive', 'party_type': 'Customer'}, fields=['name', 'party', 'paid_amount', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Journal Entry",
      "question": "Can you show me journal entries made for tax adjustments?",
      "fields": [
        "name",
        "company",
        "voucher_type",
        "posting_date"
      ]
    },
    "output": "frappe.get_list('Journal Entry', filters={'voucher_type': 'Tax Adjustment'}, fields=['name', 'posting_date', 'company'])"
  },
  {
    "input": {
      "doctype": "Journal Entry",
      "question": "What types of information are stored in the Journal Entry doctype?",
      "fields": [
        "name",
        "voucher_type",
        "posting_date",
        "total_debit",
        "total_credit"
      ]
    },
    "output": "frappe.get_list('Journal Entry', fields=['name', 'voucher_type', 'posting_date', 'total_debit', 'total_credit'])"
  },
  {
    "input": {
      "doctype": "Journal Entry",
      "question": "Where can I find the settings or configurations for journal entries?",
      "fields": [
        "company",
        "naming_series",
        "voucher_type"
      ]
    },
    "output": "frappe.get_list('Journal Entry', fields=['naming_series', 'voucher_type', 'company'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "What details are maintained in the Purchase Invoice doctype?",
      "fields": [
        "name",
        "supplier",
        "posting_date",
        "grand_total"
      ]
    },
    "output": "frappe.get_list('Purchase Invoice', fields=['name', 'supplier', 'posting_date', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Where can I check system settings related to Purchase Invoices?",
      "fields": [
        "company",
        "naming_series",
        "posting_date"
      ]
    },
    "output": "frappe.get_list('Purchase Invoice', fields=['naming_series', 'posting_date', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Taxes and Charges",
      "question": "What kind of data is stored in the Sales Taxes and Charges doctype?",
      "fields": [
        "charge_type",
        "account_head",
        "rate"
      ]
    },
    "output": "frappe.get_list('Sales Taxes and Charges', fields=['charge_type', 'account_head', 'rate'])"
  },
  {
    "input": {
      "doctype": "Sales Taxes and Charges",
      "question": "Where do I configure default settings for sales tax templates?",
      "fields": [
        "name",
        "charge_type",
        "description"
      ]
    },
    "output": "frappe.get_list('Sales Taxes and Charges', fields=['name', 'charge_type', 'description'])"
  },
  {
    "input": {
      "doctype": "Pricing Rule",
      "question": "What data can I retrieve from Pricing Rule records?",
      "fields": [
        "title",
        "apply_on",
        "rate"
      ]
    },
    "output": "frappe.get_list('Pricing Rule', fields=['title', 'apply_on', 'rate'])"
  },
  {
    "input": {
      "doctype": "Pricing Rule",
      "question": "Where do I find configuration for discount logic in Pricing Rules?",
      "fields": [
        "name",
        "discount_amount",
        "apply_discount_on"
      ]
    },
    "output": "frappe.get_list('Pricing Rule', fields=['name', 'apply_discount_on', 'discount_amount'])"
  },
  {
    "input": {
      "doctype": "Tax Rule",
      "question": "What kind of filters are defined in Tax Rule records?",
      "fields": [
        "billing_state",
        "shipping_state",
        "tax_category"
      ]
    },
    "output": "frappe.get_list('Tax Rule', fields=['tax_category', 'billing_state', 'shipping_state'])"
  },
  {
    "input": {
      "doctype": "Tax Rule",
      "question": "Where can I view rules applying to tax categories by state?",
      "fields": [
        "name",
        "tax_category",
        "billing_state"
      ]
    },
    "output": "frappe.get_list('Tax Rule', fields=['name', 'tax_category', 'billing_state'])"
  },
  {
    "input": {
      "doctype": "Mode of Payment",
      "question": "Can you list all active payment modes used in transactions?",
      "fields": [
        "mode_of_payment",
        "enabled"
      ]
    },
    "output": "frappe.get_list('Mode of Payment', filters={'enabled': 1}, fields=['mode_of_payment'])"
  },
  {
    "input": {
      "doctype": "Mode of Payment",
      "question": "Where can I find all payment types like Cash or Bank?",
      "fields": [
        "mode_of_payment",
        "type"
      ]
    },
    "output": "frappe.get_list('Mode of Payment', fields=['mode_of_payment', 'type'])"
  },
  {
    "input": {
      "doctype": "Account",
      "question": "Show me all group accounts used in the Chart of Accounts.",
      "fields": [
        "account_name",
        "is_group"
      ]
    },
    "output": "frappe.get_list('Account', filters={'is_group': 1}, fields=['account_name'])"
  },
  {
    "input": {
      "doctype": "Account",
      "question": "Where can I check account types and currency settings?",
      "fields": [
        "name",
        "account_type",
        "account_currency"
      ]
    },
    "output": "frappe.get_list('Account', fields=['name', 'account_type', 'account_currency'])"
  },
  {
    "input": {
      "doctype": "Cost Center",
      "question": "List all active cost centers under a specific company.",
      "fields": [
        "cost_center_name",
        "company"
      ]
    },
    "output": "frappe.get_list('Cost Center', filters={'disabled': 0}, fields=['cost_center_name', 'company'])"
  },
  {
    "input": {
      "doctype": "Cost Center",
      "question": "How do I check if a cost center is a group node?",
      "fields": [
        "cost_center_name",
        "is_group"
      ]
    },
    "output": "frappe.get_list('Cost Center', fields=['cost_center_name', 'is_group'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "What is the purpose of the Supplier doctype?",
      "fields": [
        "supplier_name",
        "supplier_type",
        "supplier_group",
        "country"
      ]
    },
    "output": "frappe.get_list('Supplier', fields=['supplier_name', 'supplier_type', 'supplier_group', 'country'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Where can I configure settings for Supplier?",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_order",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.get_list('Supplier', fields=['supplier_name', 'allow_purchase_invoice_creation_without_purchase_order', 'allow_purchase_invoice_creation_without_purchase_receipt'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "What is the purpose of the Purchase Order doctype?",
      "fields": [
        "supplier",
        "company",
        "grand_total"
      ]
    },
    "output": "frappe.get_list('Purchase Order', fields=['supplier', 'company', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Where can I configure settings for Purchase Order?",
      "fields": [
        "name",
        "buying_price_list",
        "payment_terms_template"
      ]
    },
    "output": "frappe.get_list('Purchase Order', fields=['name', 'buying_price_list', 'payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Purchase Receipt",
      "question": "What is the purpose of the Purchase Receipt doctype?",
      "fields": [
        "supplier",
        "company",
        "grand_total"
      ]
    },
    "output": "frappe.get_list('Purchase Receipt', fields=['supplier', 'company', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Purchase Receipt",
      "question": "Where can I configure settings for Purchase Receipt?",
      "fields": [
        "name",
        "buying_price_list",
        "payment_terms_template"
      ]
    },
    "output": "frappe.get_list('Purchase Receipt', fields=['name', 'buying_price_list', 'payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "What is the purpose of the Supplier Quotation doctype?",
      "fields": [
        "supplier",
        "transaction_date",
        "grand_total"
      ]
    },
    "output": "frappe.get_list('Supplier Quotation', fields=['supplier', 'transaction_date', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Where can I configure settings for Supplier Quotation?",
      "fields": [
        "name",
        "buying_price_list",
        "payment_terms_template"
      ]
    },
    "output": "frappe.get_list('Supplier Quotation', fields=['name', 'buying_price_list', 'payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Request for Quotation",
      "question": "What is the purpose of the Request for Quotation doctype?",
      "fields": [
        "name",
        "transaction_date",
        "company",
        "suppliers"
      ]
    },
    "output": "frappe.get_list('Request for Quotation', fields=['name', 'transaction_date', 'company', 'suppliers'])"
  },
  {
    "input": {
      "doctype": "Purchase Taxes and Charges",
      "question": "What kind of taxes are set in Purchase Taxes and Charges records?",
      "fields": [
        "charge_type",
        "account_head",
        "rate"
      ]
    },
    "output": "frappe.get_list('Purchase Taxes and Charges', fields=['charge_type', 'account_head', 'rate'])"
  },
  {
    "input": {
      "doctype": "Purchase Taxes and Charges",
      "question": "Where can I configure settings for Purchase Taxes and Charges?",
      "fields": [
        "name",
        "category",
        "charge_type",
        "rate",
        "account_head"
      ]
    },
    "output": "frappe.get_list('Purchase Taxes and Charges', fields=['name', 'category', 'charge_type', 'rate', 'account_head'])"
  },
  {
    "input": {
      "doctype": "Project",
      "question": "Create a new project for client onboarding.",
      "fields": [
        "project_name",
        "status",
        "priority"
      ]
    },
    "output": "frappe.get_list('Project', filters={'project_name': ['like', '%client onboarding%']}, fields=['project_name', 'status', 'priority'])"
  },
  {
    "input": {
      "doctype": "Task",
      "question": "Assign a task to the development team.",
      "fields": [
        "subject",
        "status",
        "department"
      ]
    },
    "output": "frappe.get_list('Task', filters={'department': 'Development'}, fields=['subject', 'status', 'department'])"
  },
  {
    "input": {
      "doctype": "Task",
      "question": "What is the purpose of the Task doctype?",
      "fields": [
        "subject",
        "status",
        "project"
      ]
    },
    "output": "frappe.get_list('Task', fields=['subject', 'status', 'project'])"
  },
  {
    "input": {
      "doctype": "Task",
      "question": "Where can I configure settings for Task?",
      "fields": [
        "subject",
        "status"
      ]
    },
    "output": "frappe.get_list('Task', fields=['subject', 'status'])"
  },
  {
    "input": {
      "doctype": "BOM",
      "question": "What is the purpose of the BOM doctype?",
      "fields": [
        "item",
        "quantity",
        "total_cost"
      ]
    },
    "output": "frappe.get_list('BOM', fields=['item', 'quantity', 'total_cost'])"
  },
  {
    "input": {
      "doctype": "BOM",
      "question": "Where can I configure settings for BOM?",
      "fields": [
        "item",
        "is_default"
      ]
    },
    "output": "frappe.get_list('BOM', filters={'is_default': 1}, fields=['item', 'is_default'])"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "What is the purpose of the Work Order doctype?",
      "fields": [
        "production_item",
        "bom_no",
        "status"
      ]
    },
    "output": "frappe.get_list('Work Order', fields=['production_item', 'bom_no', 'status'])"
  },
  {
    "input": {
      "doctype": "Work Order",
      "question": "Where can I configure settings for Work Order?",
      "fields": [
        "source_warehouse",
        "wip_warehouse",
        "fg_warehouse"
      ]
    },
    "output": "frappe.get_list('Work Order', fields=['source_warehouse', 'wip_warehouse', 'fg_warehouse'])"
  },
  {
    "input": {
      "doctype": "Production Plan",
      "question": "What is the purpose of the Production Plan doctype?",
      "fields": [
        "company",
        "from_date",
        "to_date",
        "status"
      ]
    },
    "output": "frappe.get_list('Production Plan', fields=['company', 'from_date', 'to_date', 'status'])"
  },
  {
    "input": {
      "doctype": "Job Card",
      "question": "What is the purpose of the Job Card doctype?",
      "fields": [
        "work_order",
        "employee",
        "status"
      ]
    },
    "output": "frappe.get_list('Job Card', fields=['work_order', 'employee', 'status'])"
  },
  {
    "input": {
      "doctype": "Job Card",
      "question": "Show me all job cards with their associated work orders and start dates.",
      "fields": [
        "name",
        "work_order",
        "actual_start_date"
      ]
    },
    "output": "frappe.get_list('Job Card', fields=['name', 'work_order', 'actual_start_date'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "List all employees with their email addresses and departments.",
      "fields": [
        "employee_name",
        "company_email",
        "department"
      ]
    },
    "output": "frappe.get_list('Employee', fields=['employee_name', 'company_email', 'department'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Get all active employees and their contact numbers.",
      "fields": [
        "employee_name",
        "status",
        "cell_number"
      ]
    },
    "output": "frappe.get_list('Employee', fields=['employee_name', 'status', 'cell_number'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Fetch email and phone details for each employee.",
      "fields": [
        "employee_name",
        "company_email",
        "cell_number"
      ]
    },
    "output": "frappe.get_list('Employee', fields=['employee_name', 'company_email', 'cell_number'])"
  },
  {
    "input": {
      "doctype": "Department",
      "question": "List all departments in each company.",
      "fields": [
        "department_name",
        "company"
      ]
    },
    "output": "frappe.get_list('Department', fields=['department_name', 'company'])"
  },
  {
    "input": {
      "doctype": "Department",
      "question": "Show me enabled and grouped departments.",
      "fields": [
        "department_name",
        "company",
        "is_group"
      ]
    },
    "output": "frappe.get_list('Department', fields=['department_name', 'company', 'is_group'])"
  },
  {
    "input": {
      "doctype": "Designation",
      "question": "List all designations with their descriptions.",
      "fields": [
        "designation_name",
        "description"
      ]
    },
    "output": "frappe.get_list('Designation', fields=['designation_name', 'description'])"
  },
  {
    "input": {
      "doctype": "Designation",
      "question": "Get names of all designations in the system.",
      "fields": [
        "designation_name"
      ]
    },
    "output": "frappe.get_list('Designation', fields=['designation_name'])"
  },
  {
    "input": {
      "doctype": "Fiscal Year",
      "question": "List all fiscal years with their start and end dates.",
      "fields": [
        "year",
        "year_start_date",
        "year_end_date"
      ]
    },
    "output": "frappe.get_list('Fiscal Year', fields=['year', 'year_start_date', 'year_end_date'])"
  },
  {
    "input": {
      "doctype": "Fiscal Year",
      "question": "Get fiscal years and their companies.",
      "fields": [
        "year",
        "disabled",
        "companies"
      ]
    },
    "output": "frappe.get_list('Fiscal Year', fields=['year', 'disabled', 'companies'])"
  },
  {
    "input": {
      "doctype": "Currency",
      "question": "List all currencies with their symbols and fractions.",
      "fields": [
        "currency_name",
        "symbol",
        "fraction_units"
      ]
    },
    "output": "frappe.get_list('Currency', fields=['currency_name', 'symbol', 'fraction_units'])"
  },
  {
    "input": {
      "doctype": "Currency",
      "question": "Show all enabled currencies and their formats.",
      "fields": [
        "currency_name",
        "enabled",
        "number_format"
      ]
    },
    "output": "frappe.get_list('Currency', fields=['currency_name', 'enabled', 'number_format'])"
  },
  {
    "input": {
      "doctype": "Buying Settings",
      "question": "Fetch the default price list and purchase order requirements.",
      "fields": [
        "buying_price_list",
        "po_required"
      ]
    },
    "output": "frappe.db.get_value('Buying Settings', None, ['buying_price_list', 'po_required'])"
  },
  {
    "input": {
      "doctype": "Journal Entry",
      "question": "Fetch journal entries created recently for financial records.",
      "fields": [
        "name",
        "posting_date",
        "company",
        "voucher_type",
        "total_debit",
        "total_credit"
      ]
    },
    "output": "frappe.get_list('Journal Entry', filters={'posting_date': ['>=', frappe.utils.add_days(frappe.utils.today(), -30)]}, fields=['name', 'posting_date', 'company', 'voucher_type', 'total_debit', 'total_credit'])"
  },
  {
    "input": {
      "doctype": "Asset Maintenance",
      "question": "Retrieve a list of assets that are currently under maintenance.",
      "fields": [
        "name",
        "asset_name",
        "maintenance_manager",
        "company"
      ]
    },
    "output": "frappe.get_list('Asset Maintenance', filters={}, fields=['name', 'asset_name', 'maintenance_manager', 'company'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Get all payment entries related to customer invoices.",
      "fields": [
        "name",
        "party",
        "payment_type",
        "posting_date",
        "paid_amount",
        "mode_of_payment"
      ]
    },
    "output": "frappe.get_list('Payment Entry', filters={'party_type': 'Customer'}, fields=['name', 'party', 'payment_type', 'posting_date', 'paid_amount', 'mode_of_payment'])"
  },
  {
    "input": {
      "doctype": "Subscription",
      "question": "List all active subscriptions with their start dates.",
      "fields": [
        "name",
        "status",
        "party",
        "start_date",
        "end_date",
        "company"
      ]
    },
    "output": "frappe.get_list('Subscription', filters={'status': 'Active'}, fields=['name', 'party', 'start_date', 'end_date', 'company'])"
  },
  {
    "input": {
      "doctype": "Production Plan",
      "question": "View all production plans scheduled for the next month.",
      "fields": [
        "name",
        "company",
        "from_date",
        "to_date",
        "status"
      ]
    },
    "output": "frappe.get_list('Production Plan', filters={'from_date': ['>=', frappe.utils.add_months(frappe.utils.today(), 1)]}, fields=['name', 'company', 'from_date', 'to_date', 'status'])"
  },
  {
    "input": {
      "doctype": "Quotation",
      "question": "Can you show me quotations created for customers?",
      "fields": [
        "name",
        "party_name",
        "transaction_date",
        "company",
        "grand_total"
      ]
    },
    "output": "frappe.get_list('Quotation', filters={'quotation_to': 'Customer'}, fields=['name', 'party_name', 'transaction_date', 'company', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "List all supplier quotations we\u2019ve received recently.",
      "fields": [
        "name",
        "supplier",
        "transaction_date",
        "company",
        "grand_total"
      ]
    },
    "output": "frappe.get_list('Supplier Quotation', filters={}, fields=['name', 'supplier', 'transaction_date', 'company', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Where can I find or update employee contact details?",
      "fields": [
        "employee_name",
        "cell_number",
        "personal_email",
        "company_email"
      ]
    },
    "output": "frappe.get_list('Employee', filters={}, fields=['employee_name', 'cell_number', 'personal_email', 'company_email'])"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "How do I check which orders have been delivered recently?",
      "fields": [
        "name",
        "customer",
        "posting_date",
        "status",
        "company"
      ]
    },
    "output": "frappe.get_list('Delivery Note', filters={'status': 'Completed'}, fields=['name', 'customer', 'posting_date', 'status', 'company'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Where can I view or update a customer's delivery address?",
      "fields": [
        "name",
        "customer_name",
        "customer_address"
      ]
    },
    "output": "frappe.get_list('Customer', filters={}, fields=['name', 'customer_name', 'customer_address'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Can I see all purchase invoices received from suppliers?",
      "fields": [
        "name",
        "supplier",
        "posting_date",
        "grand_total",
        "status"
      ]
    },
    "output": "frappe.get_list('Purchase Invoice', filters={}, fields=['name', 'supplier', 'posting_date', 'grand_total', 'status'])"
  },
  {
    "input": {
      "doctype": "Journal Entry",
      "question": "List all journal entries posted this month.",
      "fields": [
        "name",
        "posting_date",
        "company",
        "voucher_type",
        "total_debit",
        "total_credit"
      ]
    },
    "output": "frappe.get_list('Journal Entry', filters={'posting_date': ['>=', frappe.utils.get_first_day(frappe.utils.today())]}, fields=['name', 'posting_date', 'company', 'voucher_type', 'total_debit', 'total_credit'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "View all payment entries linked to customer invoices.",
      "fields": [
        "name",
        "party",
        "payment_type",
        "posting_date",
        "paid_amount"
      ]
    },
    "output": "frappe.get_list('Payment Entry', filters={'party_type': 'Customer'}, fields=['name', 'party', 'payment_type', 'posting_date', 'paid_amount'])"
  },
  {
    "input": {
      "doctype": "Production Plan",
      "question": "Show me all production plans for March orders.",
      "fields": [
        "name",
        "from_date",
        "to_date",
        "status",
        "company"
      ]
    },
    "output": "frappe.get_list('Production Plan', filters={'from_date': ['between', ['2025-03-01', '2025-03-31']]}, fields=['name', 'from_date', 'to_date', 'status', 'company'])"
  },
  {
    "input": {
      "doctype": "Stock Reservation Entry",
      "question": "Which items are currently reserved in stock for production?",
      "fields": [
        "item_code",
        "reserved_qty",
        "warehouse",
        "voucher_type",
        "status"
      ]
    },
    "output": "frappe.get_list('Stock Reservation Entry', filters={}, fields=['item_code', 'reserved_qty', 'warehouse', 'voucher_type', 'status'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "What purchase orders did we issue last month to suppliers?",
      "fields": [
        "name",
        "supplier",
        "transaction_date",
        "company",
        "grand_total"
      ]
    },
    "output": "frappe.get_list('Purchase Order', filters={'transaction_date': ['between', ['2025-04-01', '2025-04-30']]}, fields=['name', 'supplier', 'transaction_date', 'company', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Which supplier has the highest total order value this quarter?",
      "fields": [
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.get_list('Purchase Order', filters={'transaction_date': ['between', ['2025-01-01', '2025-03-31']]}, fields=['supplier', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Pricing Rule Item Group",
      "question": "What discount rules are defined for the 'Electronics' item group?",
      "fields": [
        "item_group",
        "uom"
      ]
    },
    "output": "frappe.get_list('Pricing Rule Item Group', filters={'item_group': 'Electronics'}, fields=['item_group', 'uom'])"
  },
  {
    "input": {
      "doctype": "Pricing Rule Item Group",
      "question": "Are there pricing rules based on unit of measurement?",
      "fields": [
        "item_group",
        "uom"
      ]
    },
    "output": "frappe.get_list('Pricing Rule Item Group', filters={'uom': ['!=', '']}, fields=['item_group', 'uom'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Which purchase invoices are overdue for payment?",
      "fields": [
        "name",
        "supplier",
        "posting_date",
        "due_date",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_list('Purchase Invoice', filters={'outstanding_amount': ['>', 0], 'due_date': ['<', frappe.utils.today()]}, fields=['name', 'supplier', 'posting_date', 'due_date', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Can I get a list of invoices with outstanding amounts over $5000?",
      "fields": [
        "name",
        "supplier",
        "posting_date",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_list('Purchase Invoice', filters={'outstanding_amount': ['>', 5000]}, fields=['name', 'supplier', 'posting_date', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "How many invoices include both items and tax charges?",
      "fields": [
        "name",
        "items",
        "taxes"
      ]
    },
    "output": "frappe.get_list('Purchase Invoice', filters={'items': ['!=', []], 'taxes': ['!=', []]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Help Article",
      "question": "Are there any help articles not yet published?",
      "fields": [
        "title",
        "published"
      ]
    },
    "output": "frappe.get_list('Help Article', filters={'published': 0}, fields=['title', 'published'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Show me purchase orders with a delivery schedule next week.",
      "fields": [
        "name",
        "supplier",
        "schedule_date",
        "company"
      ]
    },
    "output": "frappe.get_list('Purchase Order', filters={'schedule_date': ['between', [frappe.utils.add_days(frappe.utils.today(), 1), frappe.utils.add_days(frappe.utils.today(), 7)]]}, fields=['name', 'supplier', 'schedule_date', 'company'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Can I view all purchase orders that have not yet been billed?",
      "fields": [
        "name",
        "supplier",
        "per_billed"
      ]
    },
    "output": "frappe.get_list('Purchase Order', filters={'per_billed': ['<', 100]}, fields=['name', 'supplier', 'per_billed'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Which purchase orders include taxes and shipping charges?",
      "fields": [
        "name",
        "taxes_and_charges",
        "shipping_rule"
      ]
    },
    "output": "frappe.get_list('Purchase Order', filters={'taxes_and_charges': ['!=', ''], 'shipping_rule': ['!=', '']}, fields=['name', 'taxes_and_charges', 'shipping_rule'])"
  },
  {
    "input": {
      "doctype": "Help Article",
      "question": "Show me articles authored by \u201cJane Smith\u201d.",
      "fields": [
        "title",
        "author",
        "published"
      ]
    },
    "output": "frappe.get_list('Help Article', filters={'author': 'Jane Smith'}, fields=['title', 'author', 'published'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show all purchase invoices billed by \u201cAcme Supplies\u201d last quarter.",
      "fields": [
        "name",
        "supplier",
        "posting_date",
        "grand_total"
      ]
    },
    "output": "frappe.get_list('Purchase Invoice', filters={'supplier': 'Acme Supplies', 'posting_date': ['between', ['2025-01-01', '2025-03-31']]}, fields=['name', 'supplier', 'posting_date', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "What is the total billed amount from each supplier this month?",
      "fields": [
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.get_list('Purchase Invoice', filters={'posting_date': ['between', ['2025-05-01', '2025-05-31']]}, fields=['supplier', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Subscription",
      "question": "Which customers have subscriptions ending this month?",
      "fields": [
        "party",
        "end_date"
      ]
    },
    "output": "frappe.get_list('Subscription', filters={'end_date': ['between', ['2025-05-01', '2025-05-31']]}, fields=['party', 'end_date'])"
  },
  {
    "input": {
      "doctype": "Subscription",
      "question": "Show me subscriptions that include additional discounts.",
      "fields": [
        "party",
        "additional_discount_percentage",
        "additional_discount_amount"
      ]
    },
    "output": "frappe.get_list('Subscription', filters={'additional_discount_percentage': ['>', 0]}, fields=['party', 'additional_discount_percentage', 'additional_discount_amount'])"
  },
  {
    "input": {
      "doctype": "Subscription",
      "question": "How many subscriptions are set to auto-submit invoices?",
      "fields": [
        "party",
        "submit_invoice"
      ]
    },
    "output": "frappe.get_list('Subscription', filters={'submit_invoice': 1}, fields=['party', 'submit_invoice'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "List overdue purchase invoices posted on March 1, 2024.",
      "fields": [
        "name",
        "posting_date",
        "due_date",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_list('Purchase Invoice', filters={'posting_date': '2024-03-01', 'outstanding_amount': ['>', 0], 'due_date': ['<', frappe.utils.today()]}, fields=['name', 'posting_date', 'due_date', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Any overdue purchase invoices from 9th April 2001?",
      "fields": [
        "name",
        "posting_date",
        "due_date",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_list('Purchase Invoice', filters={'posting_date': '2001-04-09', 'outstanding_amount': ['>', 0], 'due_date': ['<', frappe.utils.today()]}, fields=['name', 'posting_date', 'due_date', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Does purchase invoice `PINV-00712` exist?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.exists('Purchase Invoice', 'PINV-00712')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Can you check if invoice `PINV-00123` is in the system?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.exists('Purchase Invoice', 'PINV-00123')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Fetch full details of purchase invoice `PINV-00456`.",
      "fields": [
        "*"
      ]
    },
    "output": "frappe.get_doc('Purchase Invoice', 'PINV-00456')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Has purchase invoice `PINV-00021` been fully paid off?",
      "fields": [
        "name",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_value('Purchase Invoice', 'PINV-00021', 'outstanding_amount')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Is there any balance left on invoice `PINV-00456`?",
      "fields": [
        "name",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_value('Purchase Invoice', 'PINV-00456', 'outstanding_amount')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "List all purchase invoices created today.",
      "fields": [
        "name",
        "posting_date",
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.get_list('Purchase Invoice', filters={'posting_date': frappe.utils.today()}, fields=['name', 'posting_date', 'supplier', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Show me today's submitted purchase invoices.",
      "fields": [
        "name",
        "posting_date",
        "supplier",
        "grand_total",
        "status"
      ]
    },
    "output": "frappe.get_list('Purchase Invoice', filters={'posting_date': frappe.utils.today(), 'status': 'Submitted'}, fields=['name', 'posting_date', 'supplier', 'grand_total', 'status'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Total number of purchase invoices created last week?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.count('Purchase Invoice', {'posting_date': ['between', [frappe.utils.add_days(frappe.utils.today(), -7), frappe.utils.today()]]})"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Is purchase invoice `PINV-00456` a return or a normal one?",
      "fields": [
        "is_return"
      ]
    },
    "output": "frappe.get_value('Purchase Invoice', 'PINV-00456', 'is_return')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Which currency and exchange rate were used for transaction on invoice `vctx4ujun8`?",
      "fields": [
        "currency",
        "conversion_rate"
      ]
    },
    "output": "frappe.get_value('Purchase Invoice', 'vctx4ujun8', ['currency', 'conversion_rate'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Can you tell me the cost center this invoice `INV-00987` is booked against?",
      "fields": [
        "cost_center"
      ]
    },
    "output": "frappe.get_value('Purchase Invoice', 'INV-00987', 'cost_center')"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "What is the description of the landed cost component 'LCTC-0001'?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0001', 'description')"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "Can you provide the details of the landed cost component 'LCTC-0002'?",
      "fields": [
        "*"
      ]
    },
    "output": "frappe.get_doc('Landed Cost Taxes and Charges', 'LCTC-0002')"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "Which expense account is used for the landed cost 'LCTC-0003'?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0003', 'expense_account')"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "What expense account is associated with landed cost component 'LCTC-0004'?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0004', 'expense_account')"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "Is there a corrective cost included for landed cost 'LCTC-0005'?",
      "fields": [
        "has_corrective_cost"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0005', 'has_corrective_cost')"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "Is there any correction cost included in the charge 'LCTC-0006'?",
      "fields": [
        "has_corrective_cost"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0006', 'has_corrective_cost')"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "What\u2019s the total amount for landed cost 'LCTC-0007' in company currency?",
      "fields": [
        "base_amount"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0007', 'base_amount')"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "How much is the landed cost 'LCTC-0008' charge in the company\u2019s currency?",
      "fields": [
        "base_amount"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0008', 'base_amount')"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "Which currency is used for landed cost 'LCTC-0009'?",
      "fields": [
        "account_currency"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0009', 'account_currency')"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "What currency is applied to landed cost 'LCTC-0010'?",
      "fields": [
        "account_currency"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0010', 'account_currency')"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "Was an exchange rate applied to the charge 'LCTC-0011'?",
      "fields": [
        "exchange_rate"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0011', 'exchange_rate')"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "Is there an exchange rate applied for the charge 'LCTC-0012'?",
      "fields": [
        "exchange_rate"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0012', 'exchange_rate')"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "Is tax or charge mandatory for landed cost 'LCTC-0013'?",
      "fields": [
        "amount"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0013', 'amount')"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "Do we need to fill in the tax or charge for the transaction 'LCTC-0014'?",
      "fields": [
        "amount"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0014', 'amount')"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "How is the base amount calculated for the landed cost 'LCTC-0015'?",
      "fields": [
        "amount",
        "exchange_rate",
        "base_amount"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0015', ['amount', 'exchange_rate', 'base_amount'])"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "How is the base amount for landed cost 'LCTC-0016' determined?",
      "fields": [
        "amount",
        "exchange_rate",
        "base_amount"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0016', ['amount', 'exchange_rate', 'base_amount'])"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "Does landed cost 'LCTC-0017' apply at the item level?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0017', 'expense_account')"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "Is landed cost 'LCTC-0018' applied at the individual item level?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0018', 'expense_account')"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "Is the row 'LCTC-0019' linked to any supplier invoice?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0019', 'expense_account')"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "Is landed cost 'LCTC-0020' linked to a supplier invoice?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0020', 'expense_account')"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "What\u2019s the difference between amount and base amount in landed cost 'LCTC-0021'?",
      "fields": [
        "amount",
        "base_amount"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0021', ['amount', 'base_amount'])"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "What is the difference between the base amount and the amount in the entry 'LCTC-0022'?",
      "fields": [
        "amount",
        "base_amount"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0022', ['amount', 'base_amount'])"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "Was landed cost 'LCTC-0023' meant for customs or freight?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0023', 'expense_account')"
  },
  {
    "input": {
      "doctype": "Landed Cost Taxes and Charges",
      "question": "Is landed cost 'LCTC-0024' intended for customs or freight purposes?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.get_value('Landed Cost Taxes and Charges', 'LCTC-0024', 'expense_account')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Do we unlink payments automatically when invoices are cancelled?",
      "fields": [
        "unlink_payment_on_cancellation_of_invoice"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'unlink_payment_on_cancellation_of_invoice')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "When an invoice is cancelled, does the system unlink the payment right away?",
      "fields": [
        "unlink_payment_on_cancellation_of_invoice"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'unlink_payment_on_cancellation_of_invoice')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Can we cancel an order and unlink any advance payments related to it?",
      "fields": [
        "unlink_advance_payment_on_cancelation_of_order"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'unlink_advance_payment_on_cancelation_of_order')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Are advance payments automatically unlinked if the order is cancelled?",
      "fields": [
        "unlink_advance_payment_on_cancelation_of_order"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'unlink_advance_payment_on_cancelation_of_order')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Is the immutable ledger feature enabled for our accounting records?",
      "fields": [
        "enable_immutable_ledger"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'enable_immutable_ledger')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Does the system prevent any changes to the ledger once the immutable ledger feature is enabled?",
      "fields": [
        "enable_immutable_ledger"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'enable_immutable_ledger')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Are we able to exceed the billing limit set by the system?",
      "fields": [
        "over_billing_allowance"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'over_billing_allowance')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Can billing amounts exceed the set limits in the system?",
      "fields": [
        "over_billing_allowance"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'over_billing_allowance')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Is tax loss booked when early payment discounts are applied?",
      "fields": [
        "book_tax_discount_loss"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'book_tax_discount_loss')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Do we book tax loss when early payment discounts are given to customers?",
      "fields": [
        "book_tax_discount_loss"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'book_tax_discount_loss')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Can payment terms be fetched automatically when orders are placed?",
      "fields": [
        "automatically_fetch_payment_terms"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'automatically_fetch_payment_terms')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Are payment terms pulled in automatically when an order is created?",
      "fields": [
        "automatically_fetch_payment_terms"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'automatically_fetch_payment_terms')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Do we display taxes in a table format on printed invoices?",
      "fields": [
        "show_taxes_as_table_in_print"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'show_taxes_as_table_in_print')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Are taxes shown as a table in the invoice printouts?",
      "fields": [
        "show_taxes_as_table_in_print"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'show_taxes_as_table_in_print')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Can credit limits be overridden based on user roles?",
      "fields": [
        "role_allowed_to_over_bill"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'role_allowed_to_over_bill')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Are roles in the system assigned with the ability to override credit limits?",
      "fields": [
        "role_allowed_to_over_bill"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'role_allowed_to_over_bill')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Do we update ledger entries when payment amounts are changed?",
      "fields": [
        "post_change_gl_entries"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'post_change_gl_entries')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Are ledger entries adjusted when the payment amount is modified?",
      "fields": [
        "post_change_gl_entries"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'post_change_gl_entries')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Are depreciation entries automatically recorded in the system?",
      "fields": [
        "book_asset_depreciation_entry_automatically"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'book_asset_depreciation_entry_automatically')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Does the system automatically calculate and record depreciation entries?",
      "fields": [
        "book_asset_depreciation_entry_automatically"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'book_asset_depreciation_entry_automatically')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Have we frozen any accounts for a specific date range?",
      "fields": [
        "acc_frozen_upto"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'acc_frozen_upto')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Are there any accounts frozen until a certain date in the system?",
      "fields": [
        "acc_frozen_upto"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'acc_frozen_upto')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Is party matching enabled for bank reconciliation?",
      "fields": [
        "enable_party_matching"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'enable_party_matching')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Do we enable party matching for reconciliation purposes?",
      "fields": [
        "enable_party_matching"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'enable_party_matching')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Is fuzzy matching enabled to reconcile parties?",
      "fields": [
        "enable_fuzzy_matching"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'enable_fuzzy_matching')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Do we use fuzzy matching to reconcile parties in the system?",
      "fields": [
        "enable_fuzzy_matching"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'enable_fuzzy_matching')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Can we manually apply a discount to a customer's invoice?",
      "fields": [
        "book_tax_discount_loss"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'book_tax_discount_loss')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Is it possible to apply discounts manually on an invoice?",
      "fields": [
        "book_tax_discount_loss"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'book_tax_discount_loss')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Can I adjust the discount on a customer's invoice directly?",
      "fields": [
        "book_tax_discount_loss"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'book_tax_discount_loss')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "How can I adjust payment terms for a specific invoice after it's been created?",
      "fields": [
        "automatically_fetch_payment_terms"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'automatically_fetch_payment_terms')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Can payment terms be changed after an invoice is issued?",
      "fields": [
        "automatically_fetch_payment_terms"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'automatically_fetch_payment_terms')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Is there a way to update the payment terms once an invoice is created?",
      "fields": [
        "automatically_fetch_payment_terms"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'automatically_fetch_payment_terms')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Can we process a refund for a payment that was previously reconciled?",
      "fields": [
        "auto_reconcile_payments"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'auto_reconcile_payments')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Is it possible to issue a refund for a reconciled payment?",
      "fields": [
        "auto_reconcile_payments"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'auto_reconcile_payments')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Can a payment that\u2019s been reconciled be refunded?",
      "fields": [
        "auto_reconcile_payments"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'auto_reconcile_payments')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "How do we handle partial payments when an order is canceled?",
      "fields": [
        "unlink_advance_payment_on_cancelation_of_order"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'unlink_advance_payment_on_cancelation_of_order')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "What happens to partial payments when an order is canceled?",
      "fields": [
        "unlink_advance_payment_on_cancelation_of_order"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'unlink_advance_payment_on_cancelation_of_order')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Do we refund partial payments if an order is canceled?",
      "fields": [
        "unlink_advance_payment_on_cancelation_of_order"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'unlink_advance_payment_on_cancelation_of_order')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Can a user with a specific role approve billing over a preset limit?",
      "fields": [
        "role_allowed_to_over_bill"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'role_allowed_to_over_bill')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Are there any role-based permissions for approving over-limit billing?",
      "fields": [
        "role_allowed_to_over_bill"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'role_allowed_to_over_bill')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Can certain roles approve billing amounts that exceed the set limit?",
      "fields": [
        "role_allowed_to_over_bill"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'role_allowed_to_over_bill')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "How do we control who has access to view payment details in the system?",
      "fields": [
        "role_allowed_to_over_bill"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'role_allowed_to_over_bill')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Can we restrict access to payment details based on user roles?",
      "fields": [
        "role_allowed_to_over_bill"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'role_allowed_to_over_bill')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "How do we manage user permissions to view payment information?",
      "fields": [
        "role_allowed_to_over_bill"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'role_allowed_to_over_bill')"
  },
  {
    "input": {
      "doctype": "Accounts Settings",
      "question": "Do we allow multi-currency invoices for customers from different countries?",
      "fields": [
        "allow_multi_currency_invoices_against_single_party_account"
      ]
    },
    "output": "frappe.db.get_value('Accounts Settings', None, 'allow_multi_currency_invoices_against_single_party_account')"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Show all leads from this month related to marketing.",
      "fields": [
        "lead_name",
        "market_segment",
        "source"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'market_segment': 'Marketing', 'creation': ('>=', frappe.utils.nowdate().replace(day=1))}, fields=['lead_name', 'market_segment', 'source'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Which leads came from 'Spring Promo' this month?",
      "fields": [
        "lead_name",
        "campaign_name",
        "creation"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'campaign_name': 'Spring Promo', 'creation': ('>=', frappe.utils.nowdate().replace(day=1))}, fields=['lead_name', 'campaign_name', 'creation'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "What leads are assigned to 'Ahmad bin Khalid'?",
      "fields": [
        "lead_name",
        "lead_owner"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'lead_owner': 'Ahmad bin Khalid'}, fields=['lead_name', 'lead_owner'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Which leads are assigned to 'David Clark'?",
      "fields": [
        "lead_name",
        "lead_owner"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'lead_owner': 'David Clark'}, fields=['lead_name', 'lead_owner'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "What\u2019s the status of lead 'L-2022-010'?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_value('Lead', 'L-2022-010', 'status')"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Show all leads from this month related to marketing.",
      "fields": [
        "lead_name",
        "market_segment",
        "creation"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'market_segment': 'Marketing', 'creation': ['>=', frappe.utils.nowdate().replace(day=1)]}, fields=['lead_name', 'market_segment', 'creation'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Which leads came from 'Spring Promo' this month?",
      "fields": [
        "lead_name",
        "campaign_name",
        "creation"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'campaign_name': 'Spring Promo', 'creation': ['>=', frappe.utils.nowdate().replace(day=1)]}, fields=['lead_name', 'campaign_name', 'creation'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "What leads are assigned to 'Ahmad bin Khalid'?",
      "fields": [
        "lead_name",
        "lead_owner"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'lead_owner': 'Ahmad bin Khalid'}, fields=['lead_name', 'lead_owner'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Which leads are assigned to 'David Clark'?",
      "fields": [
        "lead_name",
        "lead_owner"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'lead_owner': 'David Clark'}, fields=['lead_name', 'lead_owner'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "What\u2019s the status of lead 'L-2022-010'?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_value('Lead', 'L-2022-010', 'status')"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Find all QAR currency orders placed by 'MeadowByte Traders' using the 'Retail Price List'.",
      "fields": [
        "customer",
        "currency",
        "selling_price_list"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'customer': 'MeadowByte Traders', 'currency': 'QAR', 'selling_price_list': 'Retail Price List'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "List all sales orders for 'Alpha Tech' with territory 'Doha' and customer group 'Retail'.",
      "fields": [
        "customer",
        "territory",
        "customer_group"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'customer': 'Alpha Tech', 'territory': 'Doha', 'customer_group': 'Retail'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Quotation",
      "question": "Can you show me the sales quotation Q-12345 for March 10th 2024?",
      "fields": [
        "name",
        "customer",
        "items",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.get_all('Quotation', filters={'name': 'Q-12345', 'transaction_date': '2024-03-10'}, fields=['name', 'customer', 'items', 'grand_total', 'transaction_date'])"
  },
  {
    "input": {
      "doctype": "Quotation",
      "question": "What is the total amount on sales quotation Q-67890 for Global Tech?",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.get_value('Quotation', {'name': 'Q-67890', 'customer': 'Global Tech'}, 'grand_total')"
  },
  {
    "input": {
      "doctype": "Quotation",
      "question": "What is the status of sales quotation Q-22334 for Yenmuim Corp?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_value('Quotation', {'name': 'Q-22334', 'customer': 'Yenmuim Corp'}, 'status')"
  },
  {
    "input": {
      "doctype": "Quotation",
      "question": "Has sales quotation Q-33445 been approved for Kuywett Electronics?",
      "fields": [
        "docstatus"
      ]
    },
    "output": "frappe.get_value('Quotation', {'name': 'Q-33445', 'customer': 'Kuywett Electronics'}, 'docstatus')"
  },
  {
    "input": {
      "doctype": "Quotation",
      "question": "What items are listed in sales quotation Q-11223 for Organic Goods?",
      "fields": [
        "items"
      ]
    },
    "output": "frappe.get_value('Quotation', {'name': 'Q-11223', 'customer': 'Organic Goods'}, 'items')"
  },
  {
    "input": {
      "doctype": "Quotation",
      "question": "Can you list the products in sales quotation Q-55667 for Eco Solutions?",
      "fields": [
        "items"
      ]
    },
    "output": "frappe.get_value('Quotation', {'name': 'Q-55667', 'customer': 'Eco Solutions'}, 'items')"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Get all orders from 'XYZ LLC' using campaign 'RamadanPromo' and project 'New Branch Launch'.",
      "fields": [
        "customer",
        "campaign",
        "project"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'customer': 'XYZ LLC', 'campaign': 'RamadanPromo', 'project': 'New Branch Launch'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "List all sales orders placed in QAR with payment terms template 'Advance', and delivery scheduled before July 1, 2025.",
      "fields": [
        "currency",
        "payment_terms_template",
        "delivery_date"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'currency': 'QAR', 'payment_terms_template': 'Advance', 'delivery_date': ['<', '2025-07-01']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Find all fully delivered orders from 'Velvet Circuit Textiles' with a grand total over 25000 QAR and using price list 'Bulk Pricing'.",
      "fields": [
        "customer",
        "delivery_status",
        "grand_total",
        "selling_price_list"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'customer': 'Velvet Circuit Textiles', 'delivery_status': 'Fully Delivered', 'grand_total': ['>', 25000], 'selling_price_list': 'Bulk Pricing'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Get sales orders created after May 1, 2025, with campaign 'Summer2025' and source marked as 'Website'.",
      "fields": [
        "transaction_date",
        "campaign",
        "source"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'transaction_date': ['>', '2025-05-01'], 'campaign': 'Summer2025', 'source': 'Website'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Show all orders billed over 80%, with delivery pending, and with a delivery date after June 25, 2025.",
      "fields": [
        "per_billed",
        "delivery_status",
        "delivery_date"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'per_billed': ['>', 80], 'delivery_status': 'Not Delivered', 'delivery_date': ['>', '2025-06-25']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "What is the current status of my sales order with ID is_1989?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_value('Sales Order', 'is_1989', 'status')"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "How much do I owe for the sales order AS_190?",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_value('Sales Order', 'AS_190', 'outstanding_amount')"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "What items are included in the sales order SO156?",
      "fields": [
        "items"
      ]
    },
    "output": "frappe.get_value('Sales Order', 'SO156', 'items')"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Can you tell me the expected delivery date for sales order Sales_101?",
      "fields": [
        "delivery_date"
      ]
    },
    "output": "frappe.get_value('Sales Order', 'Sales_101', 'delivery_date')"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Who is the customer for sales order item_910, and what is their contact information?",
      "fields": [
        "customer",
        "contact_person",
        "contact_email",
        "contact_mobile"
      ]
    },
    "output": "frappe.get_value('Sales Order', 'item_910', ['customer', 'contact_person', 'contact_email', 'contact_mobile'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Has the payment been received for sales order SO-45672?",
      "fields": [
        "per_billed",
        "per_delivered",
        "billing_status"
      ]
    },
    "output": "frappe.get_value('Sales Order', 'SO-45672', ['per_billed', 'per_delivered', 'billing_status'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Can I modify the items in sales order s_001 before shipping?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_value('Sales Order', 's_001', 'status')"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Can you cancel the sales order SO-87654?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_value('Sales Order', 'SO-87654', 'status')"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "What discount was applied to sales order ksjidusidjs for customer ThistleWorks Corp?",
      "fields": [
        "discount_amount",
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.db.get_value('Sales Order',{'name': 'ksjidusidjs'},['customer', 'discount_amount', 'additional_discount_percentage'],as_dict=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice Item",
      "question": "How many Mango Juice bottles did we sell last week?",
      "fields": [
        "item_name",
        "qty"
      ]
    },
    "output": "from frappe.utils import now_datetime, add_days\nfrappe.db.count('Sales Invoice Item', {'item_name': 'Mango Juice', 'creation': ['between', [add_days(now_datetime(), -7), now_datetime()]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice Item",
      "question": "How many Apple Cider bottles did we sell on March 15th?",
      "fields": [
        "item_name",
        "qty"
      ]
    },
    "output": "frappe.db.count('Sales Invoice Item', {'item_name': 'Apple Cider', 'creation': ['between', ['2024-03-15 00:00:00', '2024-03-15 23:59:59']]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice Item",
      "question": "How many jars of Organic Honey did we sell in the past 30 days?",
      "fields": [
        "item_name",
        "qty"
      ]
    },
    "output": "from frappe.utils import now_datetime, add_days\nfrappe.db.count('Sales Invoice Item', {'item_name': 'Organic Honey', 'creation': ['between', [add_days(now_datetime(), -30), now_datetime()]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice Item",
      "question": "How many bottles of Premium Olive Oil did we sell in the first quarter?",
      "fields": [
        "item_name",
        "qty"
      ]
    },
    "output": "frappe.db.count('Sales Invoice Item', {'item_name': 'Premium Olive Oil', 'creation': ['between', ['2024-01-01 00:00:00', '2024-03-31 23:59:59']]})"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "How many orders did Global Foods make last month?",
      "fields": [
        "customer",
        "transaction_date"
      ]
    },
    "output": "from frappe.utils import get_first_day, get_last_day, add_months, nowdate\nfrappe.db.count('Sales Order', {'customer': 'Global Foods', 'transaction_date': ['between', [get_first_day(add_months(nowdate(), -1)), get_last_day(add_months(nowdate(), -1))]]})"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "What's the total value of pending orders?",
      "fields": [
        "status",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'status': 'To Deliver and Bill'}, fields=['grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "How many items are currently backordered?",
      "fields": [
        "items",
        "delivered_qty",
        "qty"
      ]
    },
    "output": "frappe.get_all('Sales Order Item', filters={'delivered_qty': ['<', 'qty']}, fields=['item_code'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "What's the total value of sales orders generated this month?",
      "fields": [
        "transaction_date",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={ 'transaction_date': ['between', ['2025-05-01', '2025-05-31']] }, fields=['grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "What is the quantity of backordered items for customer 'Delta Electronics'?",
      "fields": [
        "customer",
        "items",
        "delivered_qty",
        "qty"
      ]
    },
    "output": "frappe.get_all('Sales Order Item', filters={'parenttype': 'Sales Order', 'parent.customer': 'Delta Electronics', 'delivered_qty': ['<', 'qty']}, fields=['item_code', 'qty'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Did we meet our sales targets for the previous quarter?",
      "fields": [
        "transaction_date",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={ 'transaction_date': ['between', ['2025-01-01', '2025-03-31']] }, fields=['grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "How many sales orders were created during March?",
      "fields": [
        "transaction_date",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={ 'transaction_date': ['between', ['2025-03-01', '2025-03-31']] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "What is the total value of sales orders placed by 'TechPro Solutions' this month?",
      "fields": [
        "customer",
        "transaction_date",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={ 'customer': 'TechPro Solutions', 'transaction_date': ['between', ['2025-05-01', '2025-05-31']] }, fields=['grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "How many sales orders were placed with status 'Delivered' this quarter?",
      "fields": [
        "name",
        "status",
        "transaction_date"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'status': 'Delivered', 'transaction_date': ('between', ['2025-01-01', '2025-03-31'])}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Please show all sales orders placed by customers from the 'West Coast' this week.",
      "fields": [
        "name",
        "territory",
        "transaction_date"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'territory': 'West Coast', 'transaction_date': ('between', ['2025-04-25', '2025-05-01'])}, fields=['name', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "What is the status of the sales orders placed by top-tier customers 'Global Enterprises' this week?",
      "fields": [
        "name",
        "customer",
        "transaction_date",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'customer': 'Global Enterprises', 'transaction_date': ('between', ['2025-04-25', '2025-05-01'])}, fields=['name', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Can you display the sales orders created by customers from New York this week?",
      "fields": [
        "name",
        "customer",
        "transaction_date",
        "territory"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'territory': 'New York', 'transaction_date': ('between', ['2025-04-25', '2025-05-01'])}, fields=['name', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "List all the sales orders created this month for product 'Smartphone XYZ'.",
      "fields": [
        "name",
        "items",
        "transaction_date"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'transaction_date': ('between', ['2025-05-01', '2025-05-31'])}, fields=['name'], filters_nested={'items': {'item_name': 'Smartphone XYZ'}})"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "How many sales orders were generated in the last 7 days?",
      "fields": [
        "name",
        "transaction_date"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'transaction_date': ('between', ['2025-04-24', '2025-05-01'])}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "How much value in sales orders was processed by the 'Finance Division' this quarter?",
      "fields": [
        "grand_total",
        "cost_center",
        "transaction_date"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'cost_center': 'Finance Division', 'transaction_date': ('between', ['2025-01-01', '2025-03-31'])}, fields=['grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "What was the total sales order value for the second quarter?",
      "fields": [
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'transaction_date': ('between', ['2025-04-01', '2025-06-30'])}, fields=['grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "What is the total value of open sales orders worth over $10,000?",
      "fields": [
        "grand_total",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'status': 'Open', 'grand_total': ('>', 10000)}, fields=['grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "List all sales orders created with a total value greater than $5,000 for 'HighTech Corp'.",
      "fields": [
        "customer",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'customer': 'HighTech Corp', 'grand_total': ('>', 5000)}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Can you show me all sales orders created by 'Greenfield Ltd.' this month?",
      "fields": [
        "customer",
        "transaction_date"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'customer': 'Greenfield Ltd.', 'transaction_date': ('between', ['2025-05-01', '2025-05-31'])}, fields=['name', 'transaction_date'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "How many sales orders were made for the 'Redwood Project'?",
      "fields": [
        "project"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'project': 'Redwood Project'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Can you show me the details of open sales orders from last month for 'TechFusion Inc.'?",
      "fields": [
        "customer",
        "status",
        "transaction_date"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'customer': 'TechFusion Inc.', 'status': 'To Deliver and Bill', 'transaction_date': ['between', ['2025-04-01', '2025-04-30']]}, fields=['name', 'customer', 'status', 'grand_total', 'transaction_date'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "What's the total value of sales orders with a payment status 'Pending' for 'Global Enterprises'?",
      "fields": [
        "customer",
        "status",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'customer': 'Global Enterprises', 'billing_status': 'Not Billed'}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Please list all the sales orders that were created last week for product 'Wireless Router'.",
      "fields": [
        "transaction_date",
        "items"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'transaction_date': ['between', ['2025-04-21', '2025-04-27']], 'items.item_name': 'Wireless Router'}, fields=['name', 'customer', 'transaction_date', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "How many sales orders were confirmed in the past 30 days for 'TechPro Solutions'?",
      "fields": [
        "customer",
        "transaction_date"
      ]
    },
    "output": "frappe.db.count('Sales Order', filters={'customer': 'TechPro Solutions', 'transaction_date': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -30)]})"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "What\u2019s the total sales order value for 'Smartphone XYZ' in the past quarter?",
      "fields": [
        "items",
        "transaction_date",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'transaction_date': ['between', ['2025-01-01', '2025-03-31']], 'items.item_name': 'Smartphone XYZ'}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "How do the sales orders from last month compare with this month?",
      "fields": [
        "transaction_date",
        "grand_total"
      ]
    },
    "output": "last_month = frappe.get_all('Sales Order', filters={'transaction_date': ['between', ['2025-03-01', '2025-03-31']]}, fields=['grand_total'])\nthis_month = frappe.get_all('Sales Order', filters={'transaction_date': ['between', ['2025-04-01', '2025-04-30']]}, fields=['grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "How many sales orders were placed by new customers this month?",
      "fields": [
        "customer",
        "transaction_date"
      ]
    },
    "output": "# Assuming you have a custom field or logic to identify new customers\ndocuments = frappe.get_all('Sales Order', filters={'transaction_date': ['between', ['2025-05-01', '2025-05-31']]}, fields=['customer'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "How many sales orders were created in the 'North East' region this quarter?",
      "fields": [
        "territory",
        "transaction_date"
      ]
    },
    "output": "frappe.db.count('Sales Order', filters={'territory': 'North East', 'transaction_date': ['between', ['2025-01-01', '2025-03-31']]})"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "How many sales orders were cancelled last week?",
      "fields": [
        "transaction_date",
        "status"
      ]
    },
    "output": "frappe.db.count('Sales Order', filters={'status': 'Cancelled', 'transaction_date': ['between', ['2025-04-21', '2025-04-27']]})"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "How many sales orders were made for product group 'Smartphones' this quarter?",
      "fields": [
        "transaction_date",
        "items.item_group"
      ]
    },
    "output": "frappe.db.count('Sales Order', filters={'transaction_date': ['between', ['2025-01-01', '2025-03-31']], 'items.item_group': 'Smartphones'})"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "What\u2019s the trend in sales orders placed by 'TechPro Solutions' over the last six months?",
      "fields": [
        "transaction_date",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'customer': 'TechPro Solutions', 'transaction_date': ['between', ['2024-11-01', '2025-04-30']]}, fields=['transaction_date', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "What is the average value of sales orders created this month?",
      "fields": [
        "transaction_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT AVG(grand_total) FROM `tabSales Order` WHERE transaction_date BETWEEN '2025-05-01' AND '2025-05-31'')[0][0]"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "How many sales orders for 'Smartphone XYZ' are pending due to stock unavailability?",
      "fields": [
        "items.item_name",
        "delivery_status"
      ]
    },
    "output": "frappe.db.count('Sales Order', filters={'items.item_name': 'Smartphone XYZ', 'delivery_status': 'Not Delivered'})"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "What is the status of the sales order submitted by customer Ajith?",
      "fields": [
        "customer_name",
        "status"
      ]
    },
    "output": "frappe.get_list('Sales Order', filters={'customer_name': 'Ajith'}, fields=['status'], order_by='creation desc', limit=1)"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Find sales orders for 'Alpha Corp' with total above 75,000 QAR and delivery scheduled before June 30, 2025.",
      "fields": [
        "customer",
        "grand_total",
        "delivery_date"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'customer': 'Alpha Corp', 'grand_total': ['>', 75000], 'delivery_date': ['<', '2025-06-30']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Show sales orders from the 'Wholesale' customer group, placed in QAR currency, and marked as 'Partially Delivered'.",
      "fields": [
        "customer_group",
        "currency",
        "delivery_status"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'customer_group': 'Wholesale', 'currency': 'QAR', 'delivery_status': 'Partially Delivered'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Which orders are linked to the 'Mall Expansion' project and have not yet been fully billed?",
      "fields": [
        "project",
        "per_billed"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'project': 'Mall Expansion', 'per_billed': ['<', 100]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "List sales orders from 'Doha Traders' using coupon code 'NEWQTR' and with more than 10% discount.",
      "fields": [
        "customer",
        "coupon_code",
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'customer': 'Doha Traders', 'coupon_code': 'NEWQTR', 'additional_discount_percentage': ['>', 10]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Show orders tagged to 'Ramadan Campaign' and delivery date after May 15, 2025.",
      "fields": [
        "campaign",
        "delivery_date"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'campaign': 'Ramadan Campaign', 'delivery_date': ['>', '2025-05-15']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Get orders for 'Beta Solutions' where territory is 'Al Wakrah' and cost center is 'Retail South'.",
      "fields": [
        "customer",
        "territory",
        "cost_center"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'customer': 'Beta Solutions', 'territory': 'Al Wakrah', 'cost_center': 'Retail South'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Orders placed by 'Ali Group' between May 1 and May 31, 2025 with commission rate above 2%.",
      "fields": [
        "customer",
        "transaction_date",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'customer': 'Ali Group', 'transaction_date': ['between', ['2025-05-01', '2025-05-31']], 'commission_rate': ['>', 2]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "List orders billed over 90% that used the payment terms template 'Advance + Balance'.",
      "fields": [
        "per_billed",
        "payment_terms_template"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'per_billed': ['>', 90], 'payment_terms_template': 'Advance + Balance'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Find sales orders from 'Gulf Supplies' for project 'Expo Pavilion' where grand total exceeds 120000.",
      "fields": [
        "customer",
        "project",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'customer': 'Gulf Supplies', 'project': 'Expo Pavilion', 'grand_total': ['>', 120000]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Which sales orders were placed by customers in the 'Healthcare' group with currency 'USD' and territory 'Qatar'?",
      "fields": [
        "customer_group",
        "currency",
        "territory"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'customer_group': 'Healthcare', 'currency': 'USD', 'territory': 'Qatar'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Show orders that have both loyalty redemption and discount greater than 5%.",
      "fields": [
        "loyalty_points_redemption",
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'loyalty_points_redemption': 1, 'additional_discount_percentage': ['>', 5]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Orders placed in May 2025 by companies that are also customers internally.",
      "fields": [
        "transaction_date",
        "is_internal_customer"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'transaction_date': ['between', ['2025-05-01', '2025-05-31']], 'is_internal_customer': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Which sales orders used 'Retail Price List' in 'USD' and gave more than 10% discount?",
      "fields": [
        "selling_price_list",
        "currency",
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'selling_price_list': 'Retail Price List', 'currency': 'USD', 'additional_discount_percentage': ['>', 10]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Find orders from 'Fresh Market' with delivery scheduled before July and from territory 'Ruwais'.",
      "fields": [
        "customer",
        "delivery_date",
        "territory"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'customer': 'Fresh Market', 'delivery_date': ['<', '2025-07-01'], 'territory': 'Ruwais'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Can you give me the details of the sales order placed by customer Jane Smith on 15th March?",
      "fields": [
        "name",
        "customer",
        "transaction_date",
        "grand_total"
      ]
    },
    "output": "frappe.get_list('Sales Order', filters={'customer': 'Jane Smith', 'transaction_date': '2024-03-15'}, fields=['name', 'customer', 'transaction_date', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "List orders with commission rate over 5%, sales partner 'Global Sales', and territory 'Al Wakrah'.",
      "fields": [
        "commission_rate",
        "sales_partner",
        "territory"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'commission_rate': ['>', 5], 'sales_partner': 'Global Sales', 'territory': 'Al Wakrah'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Find orders from project 'Mall Launch', with total over 100,000 and cost center 'Doha Division'.",
      "fields": [
        "project",
        "grand_total",
        "cost_center"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'project': 'Mall Launch', 'grand_total': ['>', 100000], 'cost_center': 'Doha Division'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Show orders that used coupon 'EID2025', had more than 5% discount, and currency in USD.",
      "fields": [
        "coupon_code",
        "additional_discount_percentage",
        "currency"
      ]
    },
    "output": "frappe.get_all('Sales Order', filters={'coupon_code': 'EID2025', 'additional_discount_percentage': ['>', 5], 'currency': 'USD'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Quotation",
      "question": "Can you show the sales quotation Q-44556 for Bright Foods?",
      "fields": [
        "name",
        "items",
        "grand_total"
      ]
    },
    "output": "frappe.get_value('Quotation', {'name': 'Q-44556', 'customer': 'Bright Foods'}, ['name', 'items', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Quotation",
      "question": "What was the price for GreenTech Industries in quotation Q-77899?",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.get_value('Quotation', {'name': 'Q-77899', 'customer': 'GreenTech Industries'}, 'grand_total')"
  },
  {
    "input": {
      "doctype": "Quotation",
      "question": "When does sales quotation Q-22345 expire for Innovate Ltd?",
      "fields": [
        "valid_till"
      ]
    },
    "output": "frappe.get_value('Quotation', {'name': 'Q-22345', 'customer': 'Innovate Ltd'}, 'valid_till')"
  },
  {
    "input": {
      "doctype": "Quotation",
      "question": "Has sales quotation Q-33456 expired for ModernTech Supplies?",
      "fields": [
        "valid_till"
      ]
    },
    "output": "frappe.get_value('Quotation', {'name': 'Q-33456', 'customer': 'ModernTech Supplies'}, 'valid_till')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "What is the email address of customer John Doe?",
      "fields": [
        "email_id"
      ]
    },
    "output": "frappe.get_value('Customer', {'customer_name': 'John Doe'}, 'email_id')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "When was customer falikn Corp created in the system?",
      "fields": [
        "creation"
      ]
    },
    "output": "frappe.get_value('Customer', {'customer_name': 'falikn Corp'}, 'creation')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "What is the credit limit assigned to customer Fresh Mart?",
      "fields": [
        "credit_limits"
      ]
    },
    "output": "frappe.get_value('Customer', {'customer_name': 'Fresh Mart'}, 'credit_limits')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "What is the primary contact number for customer Zenith Traders?",
      "fields": [
        "mobile_no"
      ]
    },
    "output": "frappe.get_value('Customer', {'customer_name': 'Zenith Traders'}, 'mobile_no')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "What is the default currency used by customer Alpha Foods?",
      "fields": [
        "default_currency"
      ]
    },
    "output": "frappe.get_value('Customer', {'customer_name': 'Alpha Foods'}, 'default_currency')"
  },
  {
    "input": {
      "doctype": "Sales Person",
      "question": "What is the email ID of sales person Ahmed Khan?",
      "fields": [
        "employee"
      ]
    },
    "output": "frappe.get_value('Sales Person', {'sales_person_name': 'Ahmed Khan'}, 'employee')"
  },
  {
    "input": {
      "doctype": "Sales Person",
      "question": "When was sales person Jason Lee added to the system?",
      "fields": [
        "creation"
      ]
    },
    "output": "frappe.get_value('Sales Person', {'sales_person_name': 'Jason Lee'}, 'creation')"
  },
  {
    "input": {
      "doctype": "Sales Person",
      "question": "What is the employee ID of sales person Maria Gomez?",
      "fields": [
        "employee"
      ]
    },
    "output": "frappe.get_value('Sales Person', {'sales_person_name': 'Maria Gomez'}, 'employee')"
  },
  {
    "input": {
      "doctype": "Sales Person",
      "question": "What is the territory assigned to sales person Ramesh Patel?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.get_value('Sales Person', {'sales_person_name': 'Ramesh Patel'}, 'name')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "When was delivery note DN-00045 submitted?",
      "fields": [
        "posting_date"
      ]
    },
    "output": "frappe.get_value('Delivery Note', 'DN-00045', 'posting_date')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "What is the total quantity in delivery note DN-00123?",
      "fields": [
        "total_qty"
      ]
    },
    "output": "frappe.get_value('Delivery Note', 'DN-00123', 'total_qty')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Which customer was delivery note DN-00321 issued to?",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.get_value('Delivery Note', 'DN-00321', 'customer')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "What is the status of delivery note DN-00210?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_value('Delivery Note', 'DN-00210', 'status')"
  },
  {
    "input": {
      "doctype": "Delivery Note",
      "question": "Who created delivery note DN-00456?",
      "fields": [
        "owner"
      ]
    },
    "output": "frappe.get_value('Delivery Note', 'DN-00456', 'owner')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "What is the stock unit of item Mango Juice?",
      "fields": [
        "stock_uom"
      ]
    },
    "output": "frappe.get_value('Item', {'item_name': 'Mango Juice'}, 'stock_uom')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "What is the standard selling rate of item Organic Honey?",
      "fields": [
        "standard_rate"
      ]
    },
    "output": "frappe.get_value('Item', {'item_name': 'Organic Honey'}, 'standard_rate')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "What is the default warehouse for item Premium Olive Oil?",
      "fields": [
        "set_warehouse"
      ]
    },
    "output": "frappe.get_value('Item', {'item_name': 'Premium Olive Oil'}, 'set_warehouse')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "What brand is assigned to item Fresh Apple Cider?",
      "fields": [
        "brand"
      ]
    },
    "output": "frappe.get_value('Item', {'item_name': 'Fresh Apple Cider'}, 'brand')"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "When was item Golden Syrup last updated?",
      "fields": [
        "modified"
      ]
    },
    "output": "frappe.get_value('Item', {'item_name': 'Golden Syrup'}, 'modified')"
  },
  {
    "input": {
      "doctype": "Price List",
      "question": "What is the currency used in the Standard Selling price list?",
      "fields": [
        "currency"
      ]
    },
    "output": "frappe.get_value('Price List', 'Standard Selling', 'currency')"
  },
  {
    "input": {
      "doctype": "Price List",
      "question": "When was the Wholesale Price List last modified?",
      "fields": [
        "modified"
      ]
    },
    "output": "frappe.get_value('Price List', 'Wholesale Price List', 'modified')"
  },
  {
    "input": {
      "doctype": "Price List",
      "question": "Is the Export Price List enabled?",
      "fields": [
        "enabled"
      ]
    },
    "output": "frappe.get_value('Price List', 'Export Price List', 'enabled')"
  },
  {
    "input": {
      "doctype": "Price List",
      "question": "What is the buying/selling type of the Dealer Rate List?",
      "fields": [
        "buying",
        "selling"
      ]
    },
    "output": "frappe.get_value('Price List', 'Dealer Rate List', ['buying', 'selling'])"
  },
  {
    "input": {
      "doctype": "Price List",
      "question": "What is the territory assigned to the Retail Price List?",
      "fields": [
        "countries"
      ]
    },
    "output": "frappe.get_value('Price List', 'Retail Price List', 'countries')"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "How is lead 'L-2023-101' progressing?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_value('Lead', 'L-2023-101', 'status')"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Show me the qualified leads from the 'Trade Show'.",
      "fields": [
        "lead_name",
        "status"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'source': 'Trade Show', 'status': 'Qualified'}, fields=['lead_name', 'status'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Which leads came from the 'Tech Conference'?",
      "fields": [
        "lead_name",
        "source"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'source': 'Tech Conference'}, fields=['lead_name', 'source'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Who are the new leads this week?",
      "fields": [
        "lead_name",
        "creation"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -7)]}, fields=['lead_name', 'creation'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Which new leads did we get from 'Summer Discount'?",
      "fields": [
        "lead_name",
        "source"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'source': 'Summer Discount'}, fields=['lead_name', 'source'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "How many new leads did we get last month from 'Global Expo'?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.count('Lead', {'source': 'Global Expo', 'creation': ['between', [frappe.utils.add_months(frappe.utils.nowdate(), -1), frappe.utils.nowdate()]]})"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "How is lead 'L-2023-101' progressing?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_value('Lead', 'L-2023-101', 'status')"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Show me the qualified leads from the 'Trade Show'.",
      "fields": [
        "lead_name",
        "status"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'source': 'Trade Show', 'status': 'Qualified'}, fields=['lead_name', 'status'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Which leads came from the 'Tech Conference'?",
      "fields": [
        "lead_name",
        "source"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'source': 'Tech Conference'}, fields=['lead_name', 'source'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Who are the new leads this week?",
      "fields": [
        "lead_name",
        "creation"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -7)]}, fields=['lead_name', 'creation'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Which new leads did we get from 'Summer Discount'?",
      "fields": [
        "lead_name",
        "source"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'source': 'Summer Discount'}, fields=['lead_name', 'source'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "How many new leads did we get last month from 'Global Expo'?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.count('Lead', {'source': 'Global Expo', 'creation': ['between', [frappe.utils.add_months(frappe.utils.nowdate(), -1), frappe.utils.nowdate()]]})"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "How is lead 'L-2023-101' progressing?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_value('Lead', 'L-2023-101', 'status')"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Show me the qualified leads from the 'Trade Show'.",
      "fields": [
        "lead_name",
        "status"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'source': 'Trade Show', 'status': 'Qualified'}, fields=['lead_name', 'status'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Which leads came from the 'Tech Conference'?",
      "fields": [
        "lead_name",
        "source"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'source': 'Tech Conference'}, fields=['lead_name', 'source'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Who are the new leads this week?",
      "fields": [
        "lead_name",
        "creation"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -7)]}, fields=['lead_name', 'creation'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Which new leads did we get from 'Summer Discount'?",
      "fields": [
        "lead_name",
        "source"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'source': 'Summer Discount'}, fields=['lead_name', 'source'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "How many new leads did we get last month from 'Global Expo'?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.count('Lead', {'source': 'Global Expo', 'creation': ['between', [frappe.utils.add_months(frappe.utils.nowdate(), -1), frappe.utils.nowdate()]]})"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "How many leads did we get last month from 'Summer Promo'?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.count('Lead', {'source': 'Summer Promo', 'creation': ['between', [frappe.utils.add_months(frappe.utils.nowdate(), -1), frappe.utils.nowdate()]]})"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Show me all leads from 'Product Launch Event'.",
      "fields": [
        "lead_name",
        "source"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'source': 'Product Launch Event'}, fields=['lead_name', 'source'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Which leads were qualified at the 'New Year Sales'?",
      "fields": [
        "lead_name",
        "status",
        "source"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'source': 'New Year Sales', 'status': 'Qualified'}, fields=['lead_name', 'status', 'source'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "What\u2019s the status of the leads assigned to 'Mohammed Al-Mansoori'?",
      "fields": [
        "lead_name",
        "status"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'lead_owner': 'Mohammed Al-Mansoori'}, fields=['lead_name', 'status'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "How are the leads assigned to 'Bonanza Launch' doing?",
      "fields": [
        "lead_name",
        "status"
      ]
    },
    "output": "frappe.get_list('Lead', filters={'source': 'Bonanza Launch'}, fields=['lead_name', 'status'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "What leads have the email 'aysha.razak@example.com' from 'Next-Gen Product Launch'?",
      "fields": [
        "lead_name",
        "email_id",
        "campaign_name"
      ]
    },
    "output": "frappe.get_all('Lead', filters={'email_id': 'aysha.razak@example.com', 'campaign_name': 'Next-Gen Product Launch'}, fields=['lead_name', 'email_id', 'campaign_name'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "How many leads from 'Trade Show' are still marked as 'New'?",
      "fields": [
        "campaign_name",
        "status"
      ]
    },
    "output": "frappe.db.count('Lead', filters={'campaign_name': 'Trade Show', 'status': 'New'})"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Which leads from 'Product Launch Event' have a high annual revenue?",
      "fields": [
        "lead_name",
        "campaign_name",
        "annual_revenue"
      ]
    },
    "output": "frappe.get_all('Lead', filters={'campaign_name': 'Product Launch Event', 'annual_revenue': ['>', 1000000]}, fields=['lead_name', 'campaign_name', 'annual_revenue'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "How does this month\u2019s lead generation compare to last month\u2019s for 'Tech Innovators Expo'?",
      "fields": [
        "campaign_name",
        "creation"
      ]
    },
    "output": "frappe.get_all('Lead', filters={'campaign_name': 'Tech Innovators Expo', 'creation': ['between', [frappe.utils.get_first_day(frappe.utils.nowdate()), frappe.utils.get_last_day(frappe.utils.nowdate())]]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "What\u2019s the difference in conversion rates between leads from 'Online Webinar' and 'Summer Sales'?",
      "fields": [
        "campaign_name",
        "qualification_status"
      ]
    },
    "output": "frappe.get_all('Lead', filters={'campaign_name': ['in', ['Online Webinar', 'Summer Sales']]}, fields=['campaign_name', 'qualification_status'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Can you list the currently qualified leads from 'Tech Innovators Expo'?",
      "fields": [
        "lead_name",
        "campaign_name",
        "qualification_status"
      ]
    },
    "output": "frappe.get_all('Lead', filters={'campaign_name': 'Tech Innovators Expo', 'qualification_status': 'Qualified'}, fields=['lead_name', 'campaign_name', 'qualification_status'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Can you list the currently qualified leads from 'Tech Innovators Expo'?",
      "fields": [
        "qualification_status",
        "campaign_name"
      ]
    },
    "output": "frappe.get_all('Lead', filters={'qualification_status': 'Qualified', 'campaign_name': 'Tech Innovators Expo'}, fields=['name', 'lead_name', 'status'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Are there any unqualified leads from 'Summer Sales'?",
      "fields": [
        "qualification_status",
        "campaign_name"
      ]
    },
    "output": "frappe.get_all('Lead', filters={'qualification_status': 'Unqualified', 'campaign_name': 'Summer Sales'}, fields=['name', 'lead_name'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "Show me the leads created in the last two weeks for 'Tech Innovators Expo'.",
      "fields": [
        "creation",
        "campaign_name"
      ]
    },
    "output": "frappe.get_all('Lead', filters={'campaign_name': 'Tech Innovators Expo', 'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -14)]}, fields=['name', 'lead_name', 'creation'])"
  },
  {
    "input": {
      "doctype": "Lead",
      "question": "How many leads were generated last month from the 'Introducing the Future' campaign?",
      "fields": [
        "campaign_name",
        "creation"
      ]
    },
    "output": "frappe.db.count('Lead', filters={'campaign_name': 'Introducing the Future', 'creation': ['between', [frappe.utils.get_first_day(frappe.utils.add_months(frappe.utils.nowdate(), -1)), frappe.utils.get_last_day(frappe.utils.add_months(frappe.utils.nowdate(), -1))]]})"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Who still owes us payments from SteelWorks Ltd.?",
      "fields": [
        "party",
        "party_type",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Payment Entry', filters={'party_type': 'Customer', 'party': 'SteelWorks Ltd.', 'outstanding_amount': ['>', 0]}, fields=['name', 'party', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Did we receive payment from GreenTech Innovations for invoice 'GT-302'?",
      "fields": [
        "party",
        "references"
      ]
    },
    "output": "frappe.get_all('Payment Entry', filters={'party': 'GreenTech Innovations', 'references.reference_name': 'GT-302'}, fields=['name', 'paid_amount'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "What's the outstanding amount for John Williams?",
      "fields": [
        "party",
        "party_type",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Payment Entry', filters={'party_type': 'Customer', 'party': 'John Williams', 'outstanding_amount': ['>', 0]}, fields=['name', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Have we received all the payments we\u2019re owed for invoices 'INV-501' and 'INV-502'?",
      "fields": [
        "references"
      ]
    },
    "output": "frappe.get_all('Payment Entry', filters={'references.reference_name': ['in', ['INV-501', 'INV-502']]}, fields=['name', 'party', 'paid_amount'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Did we pay Fresh Supplies for invoice 'FS-123'?",
      "fields": [
        "party",
        "references",
        "payment_type"
      ]
    },
    "output": "frappe.get_all('Payment Entry', filters={'party': 'Fresh Supplies', 'references.reference_name': 'FS-123', 'payment_type': 'Pay'}, fields=['name', 'paid_amount'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Which invoices still need to be paid for Pinnacle Industries?",
      "fields": [
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Payment Entry', filters={'party': 'Pinnacle Industries', 'outstanding_amount': ['>', 0]}, fields=['name', 'references', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Everyone paid up yet for invoice 'INV-103' from Horizon Enterprises?",
      "fields": [
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Payment Entry', filters={'party': 'Horizon Enterprises', 'references.reference_name': 'INV-103'}, fields=['name', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Who still owes us payments for 'INV-105' from Tech Solutions?",
      "fields": [
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Payment Entry', filters={'party': 'Tech Solutions', 'references.reference_name': 'INV-105', 'outstanding_amount': ['>', 0]}, fields=['name', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Did we pay Fresh Foods their invoice 'FF-789'?",
      "fields": [
        "party",
        "references",
        "payment_type"
      ]
    },
    "output": "frappe.get_all('Payment Entry', filters={'party': 'Fresh Foods', 'references.reference_name': 'FF-789', 'payment_type': 'Pay'}, fields=['name', 'paid_amount'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Who hasn't paid their bill yet for invoice 'INV-110' from Elite Traders?",
      "fields": [
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Payment Entry', filters={'party': 'Elite Traders', 'references.reference_name': 'INV-110', 'outstanding_amount': ['>', 0]}, fields=['name', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Who owes us money from Finovate Solutions for 'INV-113'?",
      "fields": [
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Payment Entry', filters={'party': 'Finovate Solutions', 'references.reference_name': 'INV-113', 'outstanding_amount': ['>', 0]}, fields=['name', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Which bills still haven\u2019t been paid from customer 'Quantum Industries'?",
      "fields": [
        "party",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Payment Entry', filters={'party': 'Quantum Industries', 'outstanding_amount': ['>', 0]}, fields=['name', 'references', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "What\u2019s the total outstanding amount for invoice 'INV-207' from InnovateTech?",
      "fields": [
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Payment Entry', filters={'party': 'InnovateTech', 'references.reference_name': 'INV-207'}, fields=['name', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Did we receive payment from Urban Mart Ltd for invoice 'UM-123'?",
      "fields": [
        "party",
        "references",
        "payment_type"
      ]
    },
    "output": "frappe.get_all('Payment Entry', filters={'party': 'Urban Mart Ltd', 'references.reference_name': 'UM-123', 'payment_type': 'Receive'}, fields=['name', 'paid_amount'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Has everyone paid their bills for invoices 'INV-101' and 'INV-202' from Business Solutions?",
      "fields": [
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Payment Entry', filters={'party': 'Business Solutions', 'references.reference_name': ['in', ['INV-101', 'INV-202']], 'outstanding_amount': ['<=', 0]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Are there any overdue payments for 'TechnoWorks Ltd'?",
      "fields": [
        "party",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Payment Entry', filters={'party': 'TechnoWorks Ltd', 'outstanding_amount': ['>', 0]}, fields=['name', 'posting_date', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Did we get paid by XYZ Corp for invoice 'XYZ-789'?",
      "fields": [
        "party",
        "references",
        "payment_type"
      ]
    },
    "output": "frappe.get_all('Payment Entry', filters={'party': 'XYZ Corp', 'references.reference_name': 'XYZ-789', 'payment_type': 'Receive'}, fields=['name', 'paid_amount'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Have we settled the bill with the vendor 'Fresh Supplies' for invoice 'FS-501'?",
      "fields": [
        "party",
        "references",
        "payment_type",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Payment Entry', filters={'party': 'Fresh Supplies', 'references.reference_name': 'FS-501', 'payment_type': 'Pay', 'outstanding_amount': ['<=', 0]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "How much does John Williams still owe us?",
      "fields": [
        "party",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.get_value('Payment Entry', {'party': 'John Williams'}, 'outstanding_amount')"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Have we received all payments for invoices 'INV-501' and 'INV-502' this month?",
      "fields": [
        "references",
        "status"
      ]
    },
    "output": "frappe.db.get_all('Payment Entry', filters={'references': ['in', ['INV-501', 'INV-502']], 'posting_date': ['between', ['2025-04-01', '2025-04-30']]}, fields=['name', 'status'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Did we pay Fresh Supplies the full amount for invoice 'FS-123'?",
      "fields": [
        "party",
        "references",
        "paid_amount",
        "base_total_allocated_amount"
      ]
    },
    "output": "frappe.db.get_value('Payment Entry', {'party': 'Fresh Supplies', 'references': 'FS-123'}, ['paid_amount', 'base_total_allocated_amount'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Which invoices are unpaid for Pinnacle Industries between 'INV-101' and 'INV-105'?",
      "fields": [
        "party",
        "references",
        "status"
      ]
    },
    "output": "frappe.db.get_all('Payment Entry', filters={'party': 'Pinnacle Industries', 'references': ['in', ['INV-101', 'INV-102', 'INV-103', 'INV-104', 'INV-105']], 'status': ['!=', 'Paid']}, fields=['name', 'references'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Has everyone paid up yet for invoice 'INV-103' from Horizon Enterprises?",
      "fields": [
        "party",
        "references",
        "status"
      ]
    },
    "output": "frappe.db.get_value('Payment Entry', {'party': 'Horizon Enterprises', 'references': 'INV-103'}, 'status')"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Who still owes us payments for 'INV-105' from Tech Solutions?",
      "fields": [
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.get_value('Payment Entry', {'party': 'Tech Solutions', 'references': 'INV-105'}, 'outstanding_amount')"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Did we pay Fresh Foods their invoice 'FF-789'?",
      "fields": [
        "party",
        "references",
        "paid_amount"
      ]
    },
    "output": "frappe.db.get_value('Payment Entry', {'party': 'Fresh Foods', 'references': 'FF-789'}, 'paid_amount')"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Who hasn't paid their bill yet for invoice 'INV-110' from Elite Traders?",
      "fields": [
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.get_value('Payment Entry', {'party': 'Elite Traders', 'references': 'INV-110'}, 'outstanding_amount')"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Who owes us money from Finovate Solutions for 'INV-113'?",
      "fields": [
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.get_value('Payment Entry', {'party': 'Finovate Solutions', 'references': 'INV-113'}, 'outstanding_amount')"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Which bills still haven\u2019t been paid from customer 'Quantum Industries'?",
      "fields": [
        "party",
        "status"
      ]
    },
    "output": "frappe.db.get_all('Payment Entry', filters={'party': 'Quantum Industries', 'status': ['!=', 'Paid']}, fields=['name', 'references'])"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "What\u2019s the total outstanding amount for invoice 'INV-207' from NextGen Solutions?",
      "fields": [
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.get_value('Payment Entry', {'party': 'NextGen Solutions', 'references': 'INV-207'}, 'outstanding_amount')"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Did we receive payment from Urban Mart Ltd for invoice 'UM-123'?",
      "fields": [
        "party",
        "references",
        "paid_amount"
      ]
    },
    "output": "frappe.db.get_value('Payment Entry', {'party': 'Urban Mart Ltd', 'references': 'UM-123'}, 'paid_amount')"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "Can you provide a list of all payment entries linked to 'Tech Innovations Ltd.' for the last quarter?",
      "fields": [
        "party",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Payment Entry', filters={'party': 'Tech Innovations Ltd.', 'posting_date': ['>=', frappe.utils.add_months(frappe.utils.today(), -3)]}, fields=['name', 'party', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Show all items with a rate of $50 or more",
      "fields": [
        "item_name",
        "standard_rate"
      ]
    },
    "output": "frappe.get_all('Item', filters={'standard_rate': ['>=', 50]}, fields=['item_name', 'standard_rate'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Which items are still marked as active or not closed?",
      "fields": [
        "item_name",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Item', filters={'disabled': 0}, fields=['item_name'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Fetch open items with item code ITEM-1001.",
      "fields": [
        "item_code",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Item', filters={'item_code': 'ITEM-1001', 'disabled': 0}, fields=['item_code', 'item_name'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Any open items with the item code ITEM-1002?",
      "fields": [
        "item_code",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Item', filters={'item_code': 'ITEM-1002', 'disabled': 0}, fields=['item_code', 'item_name'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Which items have missing or late entries?",
      "fields": [
        "item_code",
        "end_of_life"
      ]
    },
    "output": "frappe.get_all('Item', filters={'end_of_life': ['<', frappe.utils.today()]}, fields=['item_code', 'item_name', 'end_of_life'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "How many items did we create last month?",
      "fields": [
        "creation"
      ]
    },
    "output": "len(frappe.get_all('Item', filters={'creation': ['between', [frappe.utils.add_months(frappe.utils.today(), -1), frappe.utils.today()]]}))"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Show me items with unit 'Nos' and open status.",
      "fields": [
        "stock_uom",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Item', filters={'stock_uom': 'Nos', 'disabled': 0}, fields=['item_code', 'item_name'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "How much rice is in stock?",
      "fields": [
        "item_code",
        "total_projected_qty"
      ]
    },
    "output": "frappe.get_all('Item', filters={'item_name': ['like', '%rice%']}, fields=['item_code', 'item_name', 'total_projected_qty'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Do we have enough items in the warehouse?",
      "fields": [
        "item_code",
        "total_projected_qty",
        "reorder_levels"
      ]
    },
    "output": "frappe.get_all('Item', filters={'total_projected_qty': ['<=', 0]}, fields=['item_code', 'item_name', 'total_projected_qty'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Any items running low?",
      "fields": [
        "item_code",
        "total_projected_qty"
      ]
    },
    "output": "frappe.get_all('Item', filters={'total_projected_qty': ['<', 10]}, fields=['item_code', 'item_name', 'total_projected_qty'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "What electronics do we have?",
      "fields": [
        "item_code",
        "item_group"
      ]
    },
    "output": "frappe.get_all('Item', filters={'item_group': 'Electronics'}, fields=['item_code', 'item_name', 'item_group'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Show items with color 'Red' and weight '500g'.",
      "fields": [
        "item_code",
        "attributes",
        "weight_per_unit"
      ]
    },
    "output": "frappe.get_all('Item', filters={'weight_per_unit': 500, 'attributes': ['like', '%Red%']}, fields=['item_code', 'item_name', 'weight_per_unit'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Show items approaching expiry in the next 30 days.",
      "fields": [
        "item_code",
        "end_of_life"
      ]
    },
    "output": "frappe.get_all('Item', filters={'end_of_life': ['between', [frappe.utils.today(), frappe.utils.add_days(frappe.utils.today(), 30)]]}, fields=['item_code', 'item_name', 'end_of_life'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Which items have batch numbers due for recall?",
      "fields": [
        "item_code",
        "has_batch_no"
      ]
    },
    "output": "frappe.get_all('Item', filters={'has_batch_no': 1}, fields=['item_code', 'item_name', 'has_batch_no'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Which items were transferred between warehouses last week?",
      "fields": [
        "item_code"
      ]
    },
    "output": "frappe.db.get_all('Stock Ledger Entry', filters={'posting_date': ['between', [frappe.utils.add_days(frappe.utils.today(), -7), frappe.utils.today()]], 'voucher_type': 'Stock Entry'}, fields=['item_code', 'warehouse', 'qty', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "How much stock was moved from warehouse A to warehouse B?",
      "fields": [
        "item_code",
        "warehouse",
        "qty"
      ]
    },
    "output": "frappe.db.get_all('Stock Ledger Entry', filters={'from_warehouse': 'Warehouse A', 'to_warehouse': 'Warehouse B'}, fields=['item_code', 'qty'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Show items with a discount rate above 10%.",
      "fields": [
        "item_code",
        "max_discount"
      ]
    },
    "output": "frappe.get_all('Item', filters={'max_discount': ['>', 10]}, fields=['item_code', 'item_name', 'max_discount'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Show items with unit 'kg' and below reorder level.",
      "fields": [
        "item_code",
        "stock_uom",
        "total_projected_qty"
      ]
    },
    "output": "frappe.get_all('Item', filters={'stock_uom': 'kg', 'total_projected_qty': ['<', 10]}, fields=['item_code', 'item_name', 'total_projected_qty'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Show all items with UOM 'kg' and a price greater than $100.",
      "fields": [
        "item_code",
        "stock_uom",
        "standard_rate"
      ]
    },
    "output": "frappe.get_all('Item', filters={'stock_uom': 'kg', 'standard_rate': ['>', 100]}, fields=['item_code', 'item_name', 'standard_rate'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Show items that have been marked 'on hold' or 'delayed in delivery'.",
      "fields": [
        "item_code",
        "item_name",
        "description"
      ]
    },
    "output": "frappe.get_all('Item', filters=[['description', 'like', '%on hold%'], ['description', 'like', '%delayed%']], fields=['item_code', 'item_name', 'description'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "What items are requested by customer 'InkNova Corp'?",
      "fields": [
        "item_code",
        "customer"
      ]
    },
    "output": "frappe.get_all('Item', filters={'customer': 'InkNova Corp'}, fields=['item_code', 'item_name'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "What items were ordered by 'LumenQuill Ltd' in the last month?",
      "fields": [
        "item_code",
        "item_name",
        "customer",
        "creation"
      ]
    },
    "output": "frappe.get_all('Item', filters={'customer': 'LumenQuill Ltd'}, fields=['item_code', 'item_name'], filters={'creation': ['>=', frappe.utils.add_months(frappe.utils.nowdate(), -1)]})"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Show items available in both 'Warehouse A' and 'Warehouse B'.",
      "fields": [
        "item_code",
        "item_name"
      ]
    },
    "output": "frappe.get_all('Item', filters=[['warehouse', 'in', ['Warehouse A', 'Warehouse B']]], fields=['item_code', 'item_name'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "What items are in stock at 'Warehouse X' but out of stock at 'Warehouse Y'?",
      "fields": [
        "item_code",
        "item_name"
      ]
    },
    "output": "frappe.get_all('Item', filters={'warehouse': 'Warehouse X'}, fields=['item_code', 'item_name'])  # Out of stock comparison requires custom script"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "How many items were returned in the last month?",
      "fields": [
        "item_code",
        "item_name",
        "creation"
      ]
    },
    "output": "frappe.db.count('Item', filters={'is_return': 1, 'creation': ['>=', frappe.utils.add_months(frappe.utils.nowdate(), -1)]})  # Assumes 'is_return' custom field"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Show all items transferred from 'Warehouse A' to 'Warehouse B' in the last quarter.",
      "fields": [
        "item_code",
        "item_name"
      ]
    },
    "output": "frappe.get_all('Item', filters=[['warehouse', '=', 'Warehouse B']], fields=['item_code', 'item_name'])  # Item transfers tracked via Stock Entry"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "What items are part of the ongoing sale with a discount of 20% or more?",
      "fields": [
        "item_code",
        "item_name",
        "max_discount"
      ]
    },
    "output": "frappe.get_all('Item', filters={ 'max_discount': ['>=', 20] }, fields=['item_code', 'item_name', 'max_discount'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Show items currently on promotional offer for the 'Black Friday Sale'.",
      "fields": [
        "item_code",
        "item_name",
        "description"
      ]
    },
    "output": "frappe.get_all('Item', filters={ 'description': ['like', '%Black Friday Sale%'] }, fields=['item_code', 'item_name', 'description'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Which items are part of the ongoing production batch?",
      "fields": [
        "item_code",
        "item_name",
        "default_bom"
      ]
    },
    "output": "frappe.get_all('Item', filters={ 'default_bom': ['!=', ''] }, fields=['item_code', 'item_name', 'default_bom'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Show me items used in manufacturing 'Product X'.",
      "fields": [
        "item_code",
        "item_name",
        "default_bom"
      ]
    },
    "output": "frappe.get_all('Item', filters={ 'variant_of': 'Product X' }, fields=['item_code', 'item_name'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Which items were returned by 'AmberCircuit Corp' in the past 30 days?",
      "fields": [
        "item_code",
        "customer",
        "posting_date",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Item', filters={'customer': 'AmberCircuit Corp', 'is_return': 1, 'posting_date': ['>=', frappe.utils.add_days(frappe.utils.today(), -30)]}, fields=['item_code', 'item_name'])"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "How can we track material usage in work orders with the BOM?",
      "fields": [
        "backflush_raw_materials_based_on"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').backflush_raw_materials_based_on"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Is there a way to track material use in work orders with the BOM?",
      "fields": [
        "backflush_raw_materials_based_on"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').backflush_raw_materials_based_on"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "How do we calculate material usage for work orders based on the BOM?",
      "fields": [
        "backflush_raw_materials_based_on"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').backflush_raw_materials_based_on"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Can we specify different consumption rates for materials at various production stages?",
      "fields": [
        "material_consumption_at_operation_level"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').material_consumption_at_operation_level"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Is it possible to adjust material consumption rates depending on the production stage?",
      "fields": [
        "material_consumption_at_operation_level"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').material_consumption_at_operation_level"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Can we change material consumption rates as the production process progresses?",
      "fields": [
        "material_consumption_at_operation_level"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').material_consumption_at_operation_level"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "How do we figure out the raw material usage for sub-assemblies?",
      "fields": [
        "backflush_raw_materials_based_on",
        "allow_sub_assembly_item_backflush"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').allow_sub_assembly_item_backflush"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "What\u2019s the method to calculate raw material usage for sub-assemblies?",
      "fields": [
        "backflush_raw_materials_based_on",
        "allow_sub_assembly_item_backflush"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').backflush_raw_materials_based_on"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Can we specify different consumption rates for materials at various production stages?",
      "fields": [
        "material_consumption"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').material_consumption"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Is it possible to adjust material consumption rates depending on the production stage?",
      "fields": [
        "material_consumption"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').material_consumption"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Can we change material consumption rates as the production process progresses?",
      "fields": [
        "material_consumption"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').material_consumption"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "How do we figure out the raw material usage for sub-assemblies?",
      "fields": [
        "set_op_cost_and_scrap_from_sub_assemblies"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').set_op_cost_and_scrap_from_sub_assemblies"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "What\u2019s the method to calculate raw material usage for sub-assemblies?",
      "fields": [
        "set_op_cost_and_scrap_from_sub_assemblies"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').set_op_cost_and_scrap_from_sub_assemblies"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Can we track work orders separately depending on different BOM versions?",
      "fields": [
        "validate_components_quantities_per_bom"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').validate_components_quantities_per_bom"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Is it possible to track work orders based on the BOM version?",
      "fields": [
        "validate_components_quantities_per_bom"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').validate_components_quantities_per_bom"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "How do we manage different BOM versions for work orders?",
      "fields": [
        "validate_components_quantities_per_bom"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').validate_components_quantities_per_bom"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Can we set material wastage percentages directly within the BOM?",
      "fields": [
        "validate_components_quantities_per_bom"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').validate_components_quantities_per_bom"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Is it possible to include material wastage percentages in the BOM?",
      "fields": [
        "validate_components_quantities_per_bom"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').validate_components_quantities_per_bom"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Can we manage wastage percentages for materials directly in the BOM?",
      "fields": [
        "validate_components_quantities_per_bom"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').validate_components_quantities_per_bom"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Do we need to track separate stock for WIP and finished goods?",
      "fields": [
        "default_wip_warehouse",
        "default_fg_warehouse"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_wip_warehouse, frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_fg_warehouse"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Should WIP and finished goods be tracked separately in the system?",
      "fields": [
        "default_wip_warehouse",
        "default_fg_warehouse"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_wip_warehouse, frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_fg_warehouse"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Do we maintain separate inventory for WIP and finished goods?",
      "fields": [
        "default_wip_warehouse",
        "default_fg_warehouse"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_wip_warehouse, frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_fg_warehouse"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "How  we manage the warehouse for finished goods in ERPNext?",
      "fields": [
        "default_fg_warehouse"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_fg_warehouse"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Where do we store finished goods in ERPNext?",
      "fields": [
        "default_fg_warehouse"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_fg_warehouse"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Where should finished goods be managed in ERPNext?",
      "fields": [
        "default_fg_warehouse"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_fg_warehouse"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Are we tracking the time spent on each operation for work orders?",
      "fields": [
        "job_card_excess_transfer",
        "mins_between_operations"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').mins_between_operations"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Can we track the time used in each operation for work orders?",
      "fields": [
        "mins_between_operations"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').mins_between_operations"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Do we monitor time spent on operations for work orders?",
      "fields": [
        "mins_between_operations"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').mins_between_operations"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Can we track the production rate at each workstation in real-time?",
      "fields": [
        "disable_capacity_planning",
        "allow_overtime",
        "allow_production_on_holidays"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').disable_capacity_planning"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "How can we monitor the production rate per workstation in real-time?",
      "fields": [
        "disable_capacity_planning"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').disable_capacity_planning"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Is real-time tracking of production rates possible for workstations?",
      "fields": [
        "disable_capacity_planning"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').disable_capacity_planning"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Can we forecast production capacity needs based on future work orders?",
      "fields": [
        "capacity_planning",
        "capacity_planning_for_days"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').capacity_planning"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Is it possible to forecast production needs based on upcoming work orders?",
      "fields": [
        "capacity_planning",
        "capacity_planning_for_days"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').capacity_planning_for_days"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Can we predict future production capacity based on work orders?",
      "fields": [
        "capacity_planning"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').capacity_planning"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Is raw material cost linked directly to the consumption entry in ERPNext?",
      "fields": [
        "get_rm_cost_from_consumption_entry"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').get_rm_cost_from_consumption_entry"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Can raw material costs be tied directly to consumption entries in ERPNext?",
      "fields": [
        "get_rm_cost_from_consumption_entry"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').get_rm_cost_from_consumption_entry"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Is raw material cost reflected in consumption entries in ERPNext?",
      "fields": [
        "get_rm_cost_from_consumption_entry"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').get_rm_cost_from_consumption_entry"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "What\u2019s the default warehouse for work-in-progress items in ERPNext?",
      "fields": [
        "default_wip_warehouse"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_wip_warehouse"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Where are work-in-progress items stored by default in ERPNext?",
      "fields": [
        "default_wip_warehouse"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_wip_warehouse"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "What warehouse is used by default for WIP in ERPNext?",
      "fields": [
        "default_wip_warehouse"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').default_wip_warehouse"
  },
  {
    "input": {
      "doctype": "Manufacturing Settings",
      "question": "Do we track the time taken for each process step during production?",
      "fields": [
        "mins_between_operations"
      ]
    },
    "output": "frappe.get_doc('Manufacturing Settings', 'Manufacturing Settings').mins_between_operations"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Is anyone on leave today?",
      "fields": [
        "employee",
        "status"
      ]
    },
    "output": "frappe.get_all('Leave Application', filters={'from_date': ['<=', '2025-05-01'], 'to_date': ['>=', '2025-05-01'], 'status': 'Approved'}, fields=['employee'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "How many employees are in the Sales department?",
      "fields": [
        "department"
      ]
    },
    "output": "frappe.db.count('Employee', filters={'department': 'Sales'})"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Who joined last quarter?",
      "fields": [
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-01-01', '2025-03-31']]}, fields=['name', 'employee_name'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Show me the list of all team leads.",
      "fields": [
        "designation"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'designation': 'Team Lead'}, fields=['name', 'employee_name', 'department'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Who was hired last month?",
      "fields": [
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-01', '2025-04-30']]}, fields=['name', 'employee_name'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "How many employees are currently on payroll?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.count('Employee', filters={'status': 'Active'})"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Show the employee directory.",
      "fields": [
        "employee_name",
        "department",
        "designation",
        "status"
      ]
    },
    "output": "frappe.get_all('Employee', fields=['name', 'employee_name', 'department', 'designation', 'status'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Who recently resigned?",
      "fields": [
        "status",
        "relieving_date"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'status': 'Left'}, fields=['name', 'employee_name', 'relieving_date'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "How many employees are eligible for retirement this year?",
      "fields": [
        "date_of_birth"
      ]
    },
    "output": "frappe.db.count('Employee', filters={ 'date_of_birth': ['<=', '1960-12-31'] })"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "How many employees are on a probationary period?",
      "fields": [
        "employment_type"
      ]
    },
    "output": "frappe.db.count('Employee', filters={'employment_type': 'Probation'})"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "How many employees have been with us for over 5 years?",
      "fields": [
        "date_of_joining"
      ]
    },
    "output": "frappe.db.count('Employee', filters={ 'date_of_joining': ['<=', frappe.utils.add_days(frappe.utils.nowdate(), -1825)] })"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "List employees connected to Project 'Alpha Construction'.",
      "fields": [
        "project"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'project': 'Alpha Construction'}, fields=['name', 'employee_name', 'project'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Who recently resigned?",
      "fields": [
        "employee_name",
        "status",
        "relieving_date"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'status': 'Left'}, fields=['employee_name', 'status', 'relieving_date'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "How many employees are eligible for retirement this year?",
      "fields": [
        "employee_name",
        "date_of_birth"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_birth': ['<=', '1965-12-31']}, fields=['employee_name'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "How many employees are on a probationary period?",
      "fields": [
        "employee_name",
        "employment_type"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'employment_type': 'Probation'}, fields=['employee_name'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "How many employees are using the new system?",
      "fields": [
        "employee_name",
        "status"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'status': 'Active'}, fields=['employee_name'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "How many employees have been with us for over 5 years?",
      "fields": [
        "employee_name",
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': ['<=', '2020-05-01']}, fields=['employee_name'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "List employees connected to Project 'Alpha Construction'.",
      "fields": [
        "employee_name",
        "project"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'project': 'Alpha Construction'}, fields=['employee_name', 'project'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Which customers have not paid yet from the retail group?",
      "fields": [
        "customer_name",
        "customer_group",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Customer', filters={'customer_group': 'Retail'}, fields=['customer_name'], filters_ext={'outstanding_amount': ['>', 0]})"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Which departments had the most employees join this week?",
      "fields": [
        "employee_name",
        "department",
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-25', '2025-05-01']]}, fields=['department'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "What\u2019s the employee hiring trend this quarter?",
      "fields": [
        "employee_name",
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-01', '2025-06-30']]}, fields=['date_of_joining'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Show customers from top territories this week.",
      "fields": [
        "customer_name",
        "territory",
        "creation"
      ]
    },
    "output": "frappe.get_all('Customer', filters={'creation': ['between', ['2025-04-25', '2025-05-01']]}, fields=['customer_name', 'territory'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "List employees named John Kim added this month.",
      "fields": [
        "employee_name",
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'employee_name': 'John Kim', 'date_of_joining': ['between', ['2025-05-01', '2025-05-31']]}, fields=['employee_name', 'date_of_joining'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "What's the trend in new employee joining dates this quarter?",
      "fields": [
        "employee_name",
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-01', '2025-06-30']]}, fields=['employee_name', 'date_of_joining'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "How many employee records are pending approval?",
      "fields": [
        "employee_name",
        "status"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'status': 'Pending'}, fields=['name', 'employee_name'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Summarize employees added last quarter.",
      "fields": [
        "employee_name",
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-01-01', '2025-03-31']]}, fields=['employee_name', 'date_of_joining'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Total number of employees added this year.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.count('Employee', {'date_of_joining': ['between', ['2025-01-01', '2025-12-31']]})"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Fetch employees who joined on January 1 and are marked as active.",
      "fields": [
        "employee_name",
        "date_of_joining",
        "status"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': '2025-01-01', 'status': 'Active'}, fields=['employee_name', 'date_of_joining', 'status'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Show employees with the highest activity this week.",
      "fields": [
        "employee_name",
        "modified"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'modified': ['between', ['2025-04-25', '2025-05-01']]}, fields=['employee_name', 'modified'], order_by='modified desc')"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Which employees in Finance have an open status?",
      "fields": [
        "employee_name",
        "department",
        "status"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'department': 'Finance', 'status': 'Open'}, fields=['employee_name', 'department', 'status'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Which employees are still pending?",
      "fields": [
        "employee_name",
        "status"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'status': 'Pending'}, fields=['employee_name', 'status'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Which employees have not been processed yet?",
      "fields": [
        "employee_name",
        "status"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'status': 'Pending'}, fields=['employee_name', 'status'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Who's assigned to the 'Lakeside Park' project?",
      "fields": [
        "employee_name",
        "project"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'project': 'Lakeside Park'}, fields=['employee_name', 'project'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Which customers have not paid yet from the retail group?",
      "fields": [
        "customer_name",
        "customer_group",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Customer', filters={'customer_group': 'Retail', 'outstanding_amount': ['>', 0]}, fields=['customer_name', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Which departments had the most employees join this week?",
      "fields": [
        "department",
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-28', '2025-05-04']]}, fields=['department'], group_by='department', order_by='count(*) desc')"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "What\u2019s the employee hiring trend this quarter?",
      "fields": [
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-01', '2025-06-30']]}, fields=['date_of_joining'], order_by='date_of_joining asc')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Show customers from top territories this week.",
      "fields": [
        "customer_name",
        "territory"
      ]
    },
    "output": "frappe.get_all('Customer', filters={'creation': ['between', ['2025-04-28', '2025-05-04']]}, fields=['customer_name', 'territory'], order_by='territory desc')"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "List employees named John Kim added this month.",
      "fields": [
        "employee_name",
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'employee_name': 'John Kim', 'date_of_joining': ['between', ['2025-05-01', '2025-05-31']]}, fields=['name', 'employee_name', 'date_of_joining'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "What's the trend in new employee joining dates this quarter?",
      "fields": [
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-01', '2025-06-30']]}, fields=['date_of_joining'], order_by='date_of_joining asc')"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "How many employee records are pending approval?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'status': 'Pending'}, fields=['name', 'employee_name'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Summarize employees added last quarter.",
      "fields": [
        "employee_name",
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-01-01', '2025-03-31']]}, fields=['employee_name', 'date_of_joining'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Total number of employees added this year.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.count('Employee', {'date_of_joining': ['between', ['2025-01-01', '2025-12-31']]})"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Fetch employees who joined on January 1 and are marked as active.",
      "fields": [
        "employee_name",
        "status",
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'status': 'Active', 'date_of_joining': '2025-01-01'}, fields=['employee_name', 'date_of_joining'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Show employees with the highest activity this week.",
      "fields": [
        "employee_name",
        "modified"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'modified': ['between', ['2025-04-28', '2025-05-04']]}, fields=['employee_name', 'modified'], order_by='modified desc')"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Which employees in Finance have an open status?",
      "fields": [
        "employee_name",
        "department",
        "status"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'department': 'Finance', 'status': 'Open'}, fields=['employee_name', 'status'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Which employees are still pending?",
      "fields": [
        "employee_name",
        "status"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'status': 'Pending'}, fields=['employee_name', 'status'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Which employees have not been processed yet?",
      "fields": [
        "employee_name",
        "status"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'status': 'Draft'}, fields=['employee_name', 'status'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Who's assigned to the 'Lakeside Park' project?",
      "fields": [
        "employee_name",
        "project"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'project': 'Lakeside Park'}, fields=['employee_name', 'project'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Which employees are assigned to the 'Maple Ridge Expansion' project?",
      "fields": [
        "employee_name",
        "project"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'project': 'Maple Ridge Expansion'}, fields=['employee_name', 'project'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Any employees linked to the 'Sunset Villas' project?",
      "fields": [
        "employee_name",
        "project"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'project': 'Sunset Villas'}, fields=['employee_name', 'project'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Which employees are assigned to the 'Blue Ocean Resort' project?",
      "fields": [
        "employee_name",
        "project"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'project': 'Blue Ocean Resort'}, fields=['employee_name', 'project'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "How many employees received performance awards last quarter?",
      "fields": [
        "employee_name",
        "feedback"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'feedback': ['like', '%award%'], 'date_of_joining': ['between', ['2025-01-01', '2025-03-31']]}, fields=['employee_name', 'feedback'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "How many employees have been promoted to managerial roles this year?",
      "fields": [
        "employee_name",
        "designation"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'designation': ['like', '%Manager%'], 'date_of_joining': ['between', ['2025-01-01', '2025-12-31']]}, fields=['employee_name', 'designation', 'date_of_joining'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "How many employees are on maternity leave?",
      "fields": [
        "employee_name",
        "status",
        "gender"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'gender': 'Female', 'status': 'On Leave'}, fields=['employee_name', 'status', 'gender'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Which departments had the most employees join this week?",
      "fields": [
        "department",
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-28', '2025-05-04']]}, fields=['department'], group_by='department', order_by='count(*) desc')"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "What\u2019s the employee hiring trend this quarter?",
      "fields": [
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-01', '2025-06-30']]}, fields=['employee_name', 'date_of_joining'], order_by='date_of_joining asc')"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "List employees named John Kim added this month.",
      "fields": [
        "employee_name",
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'employee_name': 'John Kim', 'date_of_joining': ['between', ['2025-05-01', '2025-05-31']]}, fields=['employee', 'employee_name', 'date_of_joining'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "What's the trend in new employee joining dates this quarter?",
      "fields": [
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-01', '2025-06-30']]}, fields=['date_of_joining'], order_by='date_of_joining asc')"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "How many employee records are pending approval?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'status': 'Pending'}, fields=['employee_name', 'status'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Summarize employees added last quarter.",
      "fields": [
        "employee_name",
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-01-01', '2025-03-31']]}, fields=['employee_name', 'date_of_joining'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Total number of employees added this year.",
      "fields": [
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-01-01', '2025-12-31']]}, fields=['employee_name'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Fetch employees who joined on January 1 and are marked as active.",
      "fields": [
        "date_of_joining",
        "status"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': '2025-01-01', 'status': 'Active'}, fields=['employee_name', 'status'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Show employees with the highest activity this week.",
      "fields": [
        "employee_name",
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-04-28', '2025-05-04']]}, fields=['employee_name', 'date_of_joining'], order_by='date_of_joining desc')"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Which employees in Finance have an open status?",
      "fields": [
        "department",
        "status"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'department': 'Finance', 'status': 'Open'}, fields=['employee_name', 'status'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Which employees are still pending?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'status': 'Pending'}, fields=['employee_name'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Which employees have not been processed yet?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'status': 'Not Processed'}, fields=['employee_name'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Who's assigned to the 'Lakeside Park' project?",
      "fields": [
        "employee_name",
        "project"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'project': 'Lakeside Park'}, fields=['employee_name', 'project'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Which employees are assigned to the 'Maple Ridge Expansion' project?",
      "fields": [
        "employee_name",
        "project"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'project': 'Maple Ridge Expansion'}, fields=['employee_name', 'project'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Any employees linked to the 'Sunset Villas' project?",
      "fields": [
        "employee_name",
        "project"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'project': 'Sunset Villas'}, fields=['employee_name', 'project'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Which employees are assigned to the 'Blue Ocean Resort' project?",
      "fields": [
        "employee_name",
        "project"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'project': 'Blue Ocean Resort'}, fields=['employee_name', 'project'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Which department had the most employees join recently?",
      "fields": [
        "department",
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': ['>', '2025-04-01']}, fields=['department'], group_by='department', order_by='count(*) desc')"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Which customers have not paid yet from the retail group?",
      "fields": [
        "customer_name",
        "customer_group",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Customer', filters={'customer_group': 'Retail', 'outstanding_amount': ['>', 0]}, fields=['customer_name', 'customer_group', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "Show customers from top territories this week.",
      "fields": [
        "territory",
        "creation"
      ]
    },
    "output": "frappe.get_all('Customer', filters={'creation': ['between', ['2025-04-28', '2025-05-04']]}, fields=['name', 'territory'], order_by='territory')"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "List employees named John Kim added this month.",
      "fields": [
        "employee_name",
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'employee_name': 'John Kim', 'date_of_joining': ['between', ['2025-05-01', '2025-05-31']]}, fields=['name', 'employee_name', 'date_of_joining'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Which department had the most employees join recently?",
      "fields": [
        "department",
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': ['>=', '2025-04-01']}, fields=['department'], group_by='department', order_by='count(*) desc')"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "How many employees have been promoted to managerial roles this year?",
      "fields": [
        "employee_name",
        "designation",
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'designation': ['like', '%Manager%'], 'date_of_joining': ['between', ['2025-01-01', '2025-12-31']]}, fields=['employee_name', 'designation', 'date_of_joining'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Which employees have been transferred to a new department this month?",
      "fields": [
        "employee_name",
        "department",
        "date_of_joining"
      ]
    },
    "output": "frappe.get_all('Employee', filters={'date_of_joining': ['between', ['2025-05-01', '2025-05-31']]}, fields=['employee_name', 'department', 'date_of_joining'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Who is currently listed as the custodian for asset PRINTER-HX200?",
      "fields": [
        "asset_name",
        "custodian"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'asset_name': 'PRINTER-HX200'}, fields=['custodian'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Can you tell me who\u2019s holding PROJECTOR-K980 right now?",
      "fields": [
        "asset_name",
        "custodian"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'asset_name': 'PROJECTOR-K980'}, fields=['custodian'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Any idea who\u2019s responsible for that scanner SCANMASTER-XL2?",
      "fields": [
        "asset_name",
        "custodian"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'asset_name': 'SCANMASTER-XL2'}, fields=['custodian'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Which department is responsible for managing the asset SERVER-R900?",
      "fields": [
        "asset_name",
        "department"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'asset_name': 'SERVER-R900'}, fields=['department'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Who's in charge of SWITCH-GX500?",
      "fields": [
        "asset_name",
        "custodian"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'asset_name': 'SWITCH-GX500'}, fields=['custodian'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "What team owns the FIREWALL-EDGE02 machine?",
      "fields": [
        "asset_name",
        "department"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'asset_name': 'FIREWALL-EDGE02'}, fields=['department'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "List all assets insured under policy number INS-2024-221.",
      "fields": [
        "asset_name",
        "policy_number"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'policy_number': 'INS-2024-221'}, fields=['name', 'asset_name', 'policy_number'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Which assets are covered by INS-2024-309?",
      "fields": [
        "asset_name",
        "policy_number"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'policy_number': 'INS-2024-309'}, fields=['name', 'asset_name', 'policy_number'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Can you pull up everything linked to policy INS-2025-088?",
      "fields": [
        "asset_name",
        "policy_number",
        "insured_value",
        "insurance_start_date",
        "insurance_end_date"
      ]
    },
    "output": "frappe.get_doc('Asset', {'policy_number': 'INS-2025-088'})"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Are there any assets with insurance ending this month?",
      "fields": [
        "insurance_end_date"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'insurance_end_date': ['between', ['2025-05-01', '2025-05-31']]}, fields=['asset_name', 'insurance_end_date'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Which assets need insurance renewal this month?",
      "fields": [
        "insurance_end_date"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'insurance_end_date': ['between', ['2025-05-01', '2025-05-31']]}, fields=['asset_name', 'insurance_end_date'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Anything due for insurance expiry right now?",
      "fields": [
        "insurance_end_date"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'insurance_end_date': ['<=', '2025-05-01']}, fields=['asset_name', 'insurance_end_date'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Which assets haven\u2019t been fully depreciated yet?",
      "fields": [
        "asset_name",
        "is_fully_depreciated"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'is_fully_depreciated': 0}, fields=['name', 'asset_name', 'is_fully_depreciated'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Show me all assets still depreciating.",
      "fields": [
        "asset_name",
        "is_fully_depreciated"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'is_fully_depreciated': 0}, fields=['name', 'asset_name'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Do we have any items that aren't fully depreciated?",
      "fields": [
        "is_fully_depreciated"
      ]
    },
    "output": "frappe.db.count('Asset', filters={'is_fully_depreciated': 0})"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "What depreciation frequency is set for asset PROJECTOR-LD320?",
      "fields": [
        "asset_name",
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.get_value('Asset', {'asset_name': 'PROJECTOR-LD320'}, 'frequency_of_depreciation')"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "How often do we depreciate SCANNER-BR410?",
      "fields": [
        "asset_name",
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.get_value('Asset', {'asset_name': 'SCANNER-BR410'}, 'frequency_of_depreciation')"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Is ROUTER-WAVE700 on yearly depreciation?",
      "fields": [
        "asset_name",
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.get_value('Asset', {'asset_name': 'ROUTER-WAVE700'}, 'frequency_of_depreciation')"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "When is the next depreciation scheduled for asset VEHICLE-B450?",
      "fields": [
        "next_depreciation_date"
      ]
    },
    "output": "frappe.get_value('Asset', 'VEHICLE-B450', 'next_depreciation_date')"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Show me the purchase receipt linked to asset MONITOR-VX992.",
      "fields": [
        "purchase_receipt"
      ]
    },
    "output": "frappe.get_value('Asset', 'MONITOR-VX992', 'purchase_receipt')"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Which assets are tied to Purchase Invoice INV-2025-0843?",
      "fields": [
        "purchase_invoice"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'purchase_invoice': 'INV-2025-0843'}, fields=['name', 'asset_name'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "What's the gross purchase amount of asset LAPTOP-ZBOOK-G5?",
      "fields": [
        "gross_purchase_amount"
      ]
    },
    "output": "frappe.get_value('Asset', 'LAPTOP-ZBOOK-G5', 'gross_purchase_amount')"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "List all assets under cost center 'Marketing-CC1'.",
      "fields": [
        "cost_center"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'cost_center': 'Marketing-CC1'}, fields=['name', 'asset_name', 'cost_center'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Find all assets owned by our Qatar branch.",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'company': 'Qatar'}, fields=['name', 'asset_name', 'company'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Show the depreciation schedule for asset 'Laptop-001'.",
      "fields": [
        "depreciation_schedule_view"
      ]
    },
    "output": "frappe.get_value('Asset', 'Laptop-001', 'depreciation_schedule_view')"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "List all assets due for maintenance this quarter.",
      "fields": [
        "maintenance_required"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'maintenance_required': 1}, fields=['name', 'asset_name', 'maintenance_required'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "What's the current value of asset 'Machine-001'?",
      "fields": [
        "value_after_depreciation"
      ]
    },
    "output": "frappe.get_value('Asset', 'Machine-001', 'value_after_depreciation')"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Which assets haven\u2019t been fully depreciated yet?",
      "fields": [
        "is_fully_depreciated"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'is_fully_depreciated': 0}, fields=['name', 'asset_name'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "What depreciation frequency is set for asset PROJECTOR-LD320?",
      "fields": [
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.get_value('Asset', 'PROJECTOR-LD320', 'frequency_of_depreciation')"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Which assets are covered by INS-2024-309?",
      "fields": [
        "policy_number"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'policy_number': 'INS-2024-309'}, fields=['name', 'asset_name', 'policy_number'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Next depreciation date for CAMERA-ZN80?",
      "fields": [
        "next_depreciation_date"
      ]
    },
    "output": "frappe.get_value('Asset', 'CAMERA-ZN80', 'next_depreciation_date')"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Which purchase receipt was used for MONITOR-VX992?",
      "fields": [
        "purchase_receipt"
      ]
    },
    "output": "frappe.get_value('Asset', 'MONITOR-VX992', 'purchase_receipt')"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Which assets are tied to Purchase Invoice INV-2025-0843?",
      "fields": [
        "purchase_invoice"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'purchase_invoice': 'INV-2025-0843'}, fields=['name', 'asset_name', 'purchase_invoice'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "What's the gross purchase amount of asset LAPTOP-ZBOOK-G5?",
      "fields": [
        "gross_purchase_amount"
      ]
    },
    "output": "frappe.get_value('Asset', 'LAPTOP-ZBOOK-G5', 'gross_purchase_amount')"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "List all assets under cost center 'Marketing-CC1'.",
      "fields": [
        "cost_center"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'cost_center': 'Marketing-CC1'}, fields=['name', 'asset_name', 'cost_center'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "What\u2019s the total value of our capex items?",
      "fields": [
        "purchase_amount"
      ]
    },
    "output": "frappe.db.get_value('Asset', {'docstatus': 1}, 'sum(purchase_amount)', as_dict=True)"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Show the depreciation schedule for asset 'Laptop-001'.",
      "fields": [
        "depreciation_schedule_view"
      ]
    },
    "output": "frappe.get_value('Asset', 'Laptop-001', 'depreciation_schedule_view')"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "List all assets due for maintenance this quarter.",
      "fields": [
        "maintenance_required"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'maintenance_required': 1}, fields=['name', 'asset_name', 'maintenance_required'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "What's the current value of asset 'Machine-001'?",
      "fields": [
        "value_after_depreciation"
      ]
    },
    "output": "frappe.get_value('Asset', 'Machine-001', 'value_after_depreciation')"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Show value changes to the 'Server-A' over the year.",
      "fields": [
        "value_after_depreciation",
        "depreciation_schedule_view"
      ]
    },
    "output": "frappe.get_value('Asset', 'Server-A', ['value_after_depreciation', 'depreciation_schedule_view'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Report assets that require maintenance this week.",
      "fields": [
        "maintenance_required"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'maintenance_required': 1}, fields=['name', 'asset_name', 'maintenance_required'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Find all assets owned by our Qatar branch.",
      "fields": [
        "location"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'location': 'Qatar'}, fields=['name', 'asset_name', 'location'])"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Can you pull the depreciation details for PRINTER-XD450?",
      "fields": [
        "depreciation_schedule_view"
      ]
    },
    "output": "frappe.get_value('Asset', 'PRINTER-XD450', 'depreciation_schedule_view')"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "How much is CAMERA-ZY202 worth on the books right now?",
      "fields": [
        "value_after_depreciation"
      ]
    },
    "output": "frappe.get_value('Asset', 'CAMERA-ZY202', 'value_after_depreciation')"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "Give me the yearly valuation trend for STORAGE-BX600.",
      "fields": [
        "depreciation_schedule_view"
      ]
    },
    "output": "frappe.get_value('Asset', 'STORAGE-BX600', 'depreciation_schedule_view')"
  },
  {
    "input": {
      "doctype": "Asset",
      "question": "What were the value changes recorded for ROUTER-GT950 this year?",
      "fields": [
        "asset_name",
        "value_after_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset', filters={'asset_name': 'ROUTER-GT950'}, fields=['asset_name', 'value_after_depreciation'])"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "Can I set up automatic backups to my S3 bucket in the system?",
      "fields": [
        "bucket",
        "enabled",
        "frequency"
      ]
    },
    "output": "frappe.get_doc('S3 Backup Settings')"
  },
  {
    "input": {
      "doctype": "Finance Book",
      "question": "Where can I view the list of finance books used in our company?",
      "fields": [
        "finance_book_name"
      ]
    },
    "output": "frappe.get_all('Finance Book', fields=['finance_book_name'])"
  },
  {
    "input": {
      "doctype": "Finance Book",
      "question": "Can I rename or update the name of an existing finance book?",
      "fields": [
        "finance_book_name"
      ]
    },
    "output": "frappe.set_value('Finance Book', 'OLD_BOOK_NAME', 'finance_book_name', 'NEW_BOOK_NAME')"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "What are the different UOM categories defined in our system?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.get_all('UOM Category', fields=['category_name'])"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "Can I create a new UOM category for packaging units?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.get_doc({'doctype': 'UOM Category', 'category_name': 'Packaging Units'}).insert()"
  },
  {
    "input": {
      "doctype": "Finance Book",
      "question": "What finance books are used by default for journal entries?",
      "fields": [
        "finance_book_name"
      ]
    },
    "output": "frappe.get_all('Finance Book', filters={}, fields=['finance_book_name'])"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "What are the different UOM categories defined in our system?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.get_all('UOM Category', fields=['category_name'])"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "Where can I find the category for weight-based units of measure?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.get_all('UOM Category', filters={'category_name': 'Weight'}, fields=['category_name'])"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "Can I create a new UOM category for packaging units?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.insert({'doctype': 'UOM Category', 'category_name': 'Packaging'})"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "Can I set up automatic backups to my S3 bucket in the system?",
      "fields": [
        "enabled",
        "bucket",
        "endpoint_url",
        "frequency"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'S3 Backup Settings', 'enabled': 1, 'bucket': 'your-bucket-name', 'endpoint_url': 'https://s3.amazonaws.com', 'frequency': 'Daily' }).insert()"
  },
  {
    "input": {
      "doctype": "Finance Book",
      "question": "Where can I view the list of finance books used in our company?",
      "fields": [
        "finance_book_name"
      ]
    },
    "output": "frappe.get_all('Finance Book', fields=['finance_book_name'])"
  },
  {
    "input": {
      "doctype": "Finance Book",
      "question": "Can I rename or update the name of an existing finance book?",
      "fields": [
        "finance_book_name"
      ]
    },
    "output": "frappe.db.set_value('Finance Book', 'EXISTING_BOOK_NAME', 'finance_book_name', 'NEW_BOOK_NAME')"
  },
  {
    "input": {
      "doctype": "Finance Book",
      "question": "List all finance books currently set up in the system.",
      "fields": [
        "finance_book_name"
      ]
    },
    "output": "frappe.get_all('Finance Book', fields=['finance_book_name'])"
  },
  {
    "input": {
      "doctype": "Finance Book",
      "question": "How do I add a new finance book for an overseas branch?",
      "fields": [
        "finance_book_name"
      ]
    },
    "output": "frappe.get_doc({'doctype': 'Finance Book', 'finance_book_name': 'Overseas Branch Book'}).insert()"
  },
  {
    "input": {
      "doctype": "Finance Book",
      "question": "Is there a finance book for our Singapore entity?",
      "fields": [
        "finance_book_name"
      ]
    },
    "output": "frappe.db.exists('Finance Book', {'finance_book_name': 'Singapore Entity'})"
  },
  {
    "input": {
      "doctype": "Finance Book",
      "question": "Show all finance books used for tax reporting purposes.",
      "fields": [
        "finance_book_name"
      ]
    },
    "output": "frappe.get_all('Finance Book', filters={'finance_book_name': ['like', '%Tax%']}, fields=['finance_book_name'])"
  },
  {
    "input": {
      "doctype": "Finance Book",
      "question": "Which finance books are linked to our international subsidiaries?",
      "fields": [
        "finance_book_name"
      ]
    },
    "output": "frappe.get_all('Finance Book', filters={'finance_book_name': ['like', '%International%']}, fields=['finance_book_name'])"
  },
  {
    "input": {
      "doctype": "Finance Book",
      "question": "How many finance books are currently active in our system?",
      "fields": [
        "finance_book_name"
      ]
    },
    "output": "frappe.db.count('Finance Book')"
  },
  {
    "input": {
      "doctype": "Finance Book",
      "question": "Where are the names of all configured finance books stored?",
      "fields": [
        "finance_book_name"
      ]
    },
    "output": "frappe.get_all('Finance Book', fields=['finance_book_name'])"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "What are the different UOM categories defined in our system?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.get_all('UOM Category', fields=['category_name'])"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "Where can I find the category for weight-based units of measure?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.get_all('UOM Category', filters={'category_name': 'Weight'}, fields=['name', 'category_name'])"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "Can I create a new UOM category for packaging units?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.get_doc({'doctype': 'UOM Category', 'category_name': 'Packaging'}).insert()"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "Can I preview how many characters and messages my SMS will consume?",
      "fields": [
        "total_characters",
        "total_messages"
      ]
    },
    "output": "frappe.get_all('SMS Center', fields=['total_characters', 'total_messages'])"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "Where do I write the SMS text before sending it to multiple contacts?",
      "fields": [
        "message"
      ]
    },
    "output": "frappe.get_all('SMS Center', fields=['message'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "List all production plan material requests created this week.",
      "fields": [
        "material_request",
        "material_request_date"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', filters={'material_request_date': ['between', ['2025-04-28', '2025-05-04']]}, fields=['material_request', 'material_request_date'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "Can I fetch all material request dates linked to production planning?",
      "fields": [
        "material_request_date"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', fields=['material_request_date'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "Where can I see which material requests are linked to a production plan?",
      "fields": [
        "material_request"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', fields=['material_request'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "I need to check when each material request was created in a production plan.",
      "fields": [
        "material_request",
        "material_request_date"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', fields=['material_request', 'material_request_date'])"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "Which module lets me define a list of receivers and send a common SMS?",
      "fields": [
        "receiver_list"
      ]
    },
    "output": "frappe.get_all('SMS Center', fields=['receiver_list'])"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "I want to create a message for all sales partners, where do I do that?",
      "fields": [
        "sales_partner",
        "message"
      ]
    },
    "output": "frappe.get_all('SMS Center', filters={'sales_partner': ['!=', '']}, fields=['sales_partner', 'message'])"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "Is there a way to quickly send an update to all supplier contacts?",
      "fields": [
        "supplier",
        "message"
      ]
    },
    "output": "frappe.get_all('SMS Center', filters={'supplier': ['!=', '']}, fields=['supplier', 'message'])"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "How do I filter customers by department before sending them an SMS?",
      "fields": [
        "customer",
        "department"
      ]
    },
    "output": "frappe.get_all('SMS Center', filters={'department': ['!=', '']}, fields=['customer', 'department'])"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "How do I track how many messages were sent through an SMS broadcast?",
      "fields": [
        "total_messages"
      ]
    },
    "output": "frappe.get_all('SMS Center', fields=['name', 'total_messages'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "Which material request is connected to the current production plan?",
      "fields": [
        "material_request"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', fields=['material_request'])"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "Can I preview how many characters and messages my SMS will consume?",
      "fields": [
        "total_characters",
        "total_messages"
      ]
    },
    "output": "frappe.get_all('SMS Center', fields=['name', 'total_characters', 'total_messages'])"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "Where do I write the SMS text before sending it to multiple contacts?",
      "fields": [
        "message"
      ]
    },
    "output": "frappe.get_all('SMS Center', fields=['name', 'message'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "Where can I see which material requests are linked to a production plan?",
      "fields": [
        "material_request"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', fields=['material_request'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "Show me all the material requests generated from production planning.",
      "fields": [
        "material_request"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', fields=['material_request'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "Which table stores the material request and its date under a production plan?",
      "fields": [
        "material_request",
        "material_request_date"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', fields=['material_request', 'material_request_date'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "I need to check when each material request was created in a production plan.",
      "fields": [
        "material_request",
        "material_request_date"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', fields=['material_request', 'material_request_date'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "Can I fetch all material request dates linked to production planning?",
      "fields": [
        "material_request_date"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', fields=['material_request_date'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "How do I view the list of requested raw materials from a production plan?",
      "fields": [
        "material_request"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', fields=['material_request'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "Where can I find which material request was generated for this production order?",
      "fields": [
        "material_request"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', fields=['material_request'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "Which material request is connected to the current production plan?",
      "fields": [
        "material_request"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', fields=['material_request'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "List all production plan material requests created this week.",
      "fields": [
        "material_request",
        "material_request_date"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', filters={'material_request_date': ['between', ['2025-04-29', '2025-05-05']]}, fields=['material_request', 'material_request_date'])"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "How can I send a bulk message to all active employees in one go?",
      "fields": [
        "receiver_list",
        "message",
        "send_sms"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'SMS Center', 'receiver_list': 'Active Employees', 'message': 'Your message here' }).send_sms()"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "Is it possible to send a notification to all open leads at once?",
      "fields": [
        "receiver_list",
        "message"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'SMS Center', 'receiver_list': 'Open Leads', 'message': 'Reminder: follow-up required.' }).send_sms()"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "I want to create a message for all sales partners, where do I do that?",
      "fields": [
        "sales_partner",
        "message"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'SMS Center', 'sales_partner': 'All', 'message': 'New promotion available.' }).send_sms()"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "Which module lets me define a list of receivers and send a common SMS?",
      "fields": [
        "create_receiver_list",
        "receiver_list",
        "message"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'SMS Center', 'create_receiver_list': 1, 'receiver_list': 'Custom Group', 'message': 'Hello all' }).send_sms()"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "Can I preview how many characters and messages my SMS will consume?",
      "fields": [
        "total_characters",
        "total_messages"
      ]
    },
    "output": "frappe.get_value('SMS Center', {'name': 'Last SMS'}, ['total_characters', 'total_messages'])"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "How do I filter customers by department before sending them an SMS?",
      "fields": [
        "customer",
        "department",
        "message"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'SMS Center', 'customer': 'All', 'department': 'Sales', 'message': 'Meeting at 10 AM' }).send_sms()"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "Is there a way to quickly send an update to all supplier contacts?",
      "fields": [
        "supplier",
        "message"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'SMS Center', 'supplier': 'All', 'message': 'Please note the upcoming changes.' }).send_sms()"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "How do I track how many messages were sent through an SMS broadcast?",
      "fields": [
        "total_messages"
      ]
    },
    "output": "frappe.get_value('SMS Center', {'name': 'Last Broadcast'}, 'total_messages')"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "Where do I write the SMS text before sending it to multiple contacts?",
      "fields": [
        "message"
      ]
    },
    "output": "frappe.get_doc('SMS Center', 'Draft SMS').message"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "Where can I see which material requests are linked to a production plan?",
      "fields": [
        "material_request"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', fields=['material_request'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "Show me all the material requests generated from production planning.",
      "fields": [
        "material_request",
        "material_request_date"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', fields=['material_request', 'material_request_date'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "Which table stores the material request and its date under a production plan?",
      "fields": [
        "material_request",
        "material_request_date"
      ]
    },
    "output": "frappe.get_list('Production Plan Material Request', fields=['material_request', 'material_request_date'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "I need to check when each material request was created in a production plan.",
      "fields": [
        "material_request",
        "material_request_date"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', fields=['material_request', 'material_request_date'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "Can I fetch all material request dates linked to production planning?",
      "fields": [
        "material_request_date"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', fields=['material_request_date'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "How do I view the list of requested raw materials from a production plan?",
      "fields": [
        "material_request"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', fields=['material_request'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "Where can I find which material request was generated for this production order?",
      "fields": [
        "material_request"
      ]
    },
    "output": "frappe.get_list('Production Plan Material Request', filters={'production_order': 'PROD-ORDER-001'}, fields=['material_request'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "Which material request is connected to the current production plan?",
      "fields": [
        "material_request"
      ]
    },
    "output": "frappe.get_value('Production Plan Material Request', {'production_plan': 'PROD-PLAN-2025-0001'}, 'material_request')"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "List all production plan material requests created this week.",
      "fields": [
        "material_request",
        "material_request_date"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', filters={'material_request_date': ['between', ['2025-04-29', '2025-05-05']]}, fields=['material_request', 'material_request_date'])"
  },
  {
    "input": {
      "doctype": "Project Type",
      "question": "Can I get a list of all the different project types we\u2019ve created?",
      "fields": [
        "project_type"
      ]
    },
    "output": "frappe.get_all('Project Type', fields=['project_type'])"
  },
  {
    "input": {
      "doctype": "Project Type",
      "question": "What project types are currently defined in the system?",
      "fields": [
        "project_type"
      ]
    },
    "output": "frappe.get_all('Project Type', fields=['project_type'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "Has a material request been made for this production plan yet?",
      "fields": [
        "material_request"
      ]
    },
    "output": "frappe.db.exists('Production Plan Material Request', {'material_request': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "Where is the record of raw material requests linked to a production plan stored?",
      "fields": [
        "material_request",
        "material_request_date"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', fields=['material_request', 'material_request_date'])"
  },
  {
    "input": {
      "doctype": "Production Plan Material Request",
      "question": "I want to view all linked material request dates under a specific plan.",
      "fields": [
        "material_request_date"
      ]
    },
    "output": "frappe.get_all('Production Plan Material Request', fields=['material_request_date'])"
  },
  {
    "input": {
      "doctype": "Project Type",
      "question": "Can I get a list of all the different project types we\u2019ve created?",
      "fields": [
        "project_type"
      ]
    },
    "output": "frappe.get_all('Project Type', fields=['project_type'])"
  },
  {
    "input": {
      "doctype": "Project Type",
      "question": "What project types are currently defined in the system?",
      "fields": [
        "project_type"
      ]
    },
    "output": "frappe.get_all('Project Type', fields=['project_type'])"
  },
  {
    "input": {
      "doctype": "Production Plan Sales Order",
      "question": "Can I fetch the sales order date and total for each linked sales order?",
      "fields": [
        "sales_order",
        "sales_order_date",
        "sales_order_amount"
      ]
    },
    "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order', 'sales_order_date', 'sales_order_amount'])"
  },
  {
    "input": {
      "doctype": "Production Plan Sales Order",
      "question": "Give me a list of all sales order numbers included in this production schedule.",
      "fields": [
        "sales_order"
      ]
    },
    "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order'])"
  },
  {
    "input": {
      "doctype": "Production Plan Sales Order",
      "question": "Which sales orders from customers have been linked to this production plan?",
      "fields": [
        "sales_order"
      ]
    },
    "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order'])"
  },
  {
    "input": {
      "doctype": "Production Plan Sales Order",
      "question": "What\u2019s the total value of sales orders being planned for production?",
      "fields": [
        "sales_order_amount"
      ]
    },
    "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order_amount'])"
  },
  {
    "input": {
      "doctype": "Production Plan Sales Order",
      "question": "I want to check the sales order dates involved in production planning.",
      "fields": [
        "sales_order_date"
      ]
    },
    "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order_date'])"
  },
  {
    "input": {
      "doctype": "Production Plan Sales Order",
      "question": "List all sales orders by customer for this production plan.",
      "fields": [
        "sales_order",
        "customer"
      ]
    },
    "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order', 'customer'])"
  },
  {
    "input": {
      "doctype": "Production Plan Sales Order",
      "question": "Where can I find the grand total of each sales order under a production plan?",
      "fields": [
        "sales_order",
        "sales_order_amount"
      ]
    },
    "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order', 'sales_order_amount'])"
  },
  {
    "input": {
      "doctype": "Production Plan Sales Order",
      "question": "Show me the sales orders included in this production planning process.",
      "fields": [
        "sales_order"
      ]
    },
    "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order'])"
  },
  {
    "input": {
      "doctype": "Production Plan Sales Order",
      "question": "Which customers have sales orders linked to a production plan?",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.get_all('Production Plan Sales Order', fields=['customer'])"
  },
  {
    "input": {
      "doctype": "Production Plan Sales Order",
      "question": "Can I view which sales orders are tied to a specific production plan?",
      "fields": [
        "sales_order",
        "parent"
      ]
    },
    "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order', 'parent'])"
  },
  {
    "input": {
      "doctype": "Production Plan Sales Order",
      "question": "Which sales orders from customers have been linked to this production plan?",
      "fields": [
        "sales_order",
        "customer",
        "parent"
      ]
    },
    "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order', 'customer', 'parent'])"
  },
  {
    "input": {
      "doctype": "Production Plan Sales Order",
      "question": "What\u2019s the total value of sales orders being planned for production?",
      "fields": [
        "sales_order_amount"
      ]
    },
    "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order_amount'])"
  },
  {
    "input": {
      "doctype": "Production Plan Sales Order",
      "question": "Give me a list of all sales order numbers included in this production schedule.",
      "fields": [
        "sales_order"
      ]
    },
    "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order'])"
  },
  {
    "input": {
      "doctype": "Production Plan Sales Order",
      "question": "Has the customer\u2019s sales order been considered in the production plan?",
      "fields": [
        "sales_order",
        "customer"
      ]
    },
    "output": "frappe.get_all('Production Plan Sales Order', filters={'customer': '<<Customer Name>>'}, fields=['sales_order'])"
  },
  {
    "input": {
      "doctype": "Production Plan Sales Order",
      "question": "Can I fetch the sales order date and total for each linked sales order?",
      "fields": [
        "sales_order_date",
        "sales_order_amount"
      ]
    },
    "output": "frappe.get_all('Production Plan Sales Order', fields=['sales_order_date', 'sales_order_amount'])"
  },
  {
    "input": {
      "doctype": "Project Type",
      "question": "Can I get a list of all the different project types we\u2019ve created?",
      "fields": [
        "project_type"
      ]
    },
    "output": "frappe.get_all('Project Type', fields=['project_type'])"
  },
  {
    "input": {
      "doctype": "Project Type",
      "question": "What project types are currently defined in the system?",
      "fields": [
        "project_type",
        "description"
      ]
    },
    "output": "frappe.get_all('Project Type', fields=['project_type', 'description'])"
  },
  {
    "input": {
      "doctype": "Project Type",
      "question": "Show me all types of projects listed with their descriptions.",
      "fields": [
        "project_type",
        "description"
      ]
    },
    "output": "frappe.get_all('Project Type', fields=['project_type', 'description'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Can you show me all defined activity types and their default rates?",
      "fields": [
        "activity_type",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Type', fields=['activity_type', 'billing_rate', 'costing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Where do we set the default billing and costing rate for each activity?",
      "fields": [
        "activity_type",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Type', fields=['activity_type', 'billing_rate', 'costing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Which activity types are active and which ones are disabled?",
      "fields": [
        "activity_type",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Activity Type', fields=['activity_type', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Do we have an activity type for design work with a set billing rate?",
      "fields": [
        "activity_type",
        "billing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Type', filters={'activity_type': 'Design'}, fields=['activity_type', 'billing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Which activity types are currently disabled in the system?",
      "fields": [
        "activity_type",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Activity Type', filters={'disabled': 1}, fields=['activity_type', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "List all active activity types used in projects.",
      "fields": [
        "activity_type",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Activity Type', filters={'disabled': 0}, fields=['activity_type'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Show me all activity types with their billing and costing rates.",
      "fields": [
        "activity_type",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Type', fields=['activity_type', 'billing_rate', 'costing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "What are the billing and costing rates for the activity type 'Consulting'?",
      "fields": [
        "activity_type",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Type', filters={'activity_type': 'Consulting'}, fields=['billing_rate', 'costing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Fetch the costing rate of 'Installation' activity type.",
      "fields": [
        "activity_type",
        "costing_rate"
      ]
    },
    "output": "frappe.get_value('Activity Type', {'activity_type': 'Installation'}, 'costing_rate')"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Is the activity type 'Field Support' currently enabled?",
      "fields": [
        "activity_type",
        "disabled"
      ]
    },
    "output": "frappe.get_value('Activity Type', {'activity_type': 'Field Support'}, 'disabled')"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Where can I see the rates associated with each task type?",
      "fields": [
        "activity_type",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Type', fields=['activity_type', 'billing_rate', 'costing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Which activity types are active and which ones are disabled?",
      "fields": [
        "activity_type",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Activity Type', fields=['activity_type', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Can you list all defined activity types in the system?",
      "fields": [
        "activity_type"
      ]
    },
    "output": "frappe.get_all('Activity Type', fields=['activity_type'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Show billing and costing rates for all activity types.",
      "fields": [
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Type', fields=['billing_rate', 'costing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Give me the billing rate for 'Design Work'.",
      "fields": [
        "activity_type",
        "billing_rate"
      ]
    },
    "output": "frappe.get_value('Activity Type', {'activity_type': 'Design Work'}, 'billing_rate')"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Retrieve all activity types where costing rate exceeds 100.",
      "fields": [
        "activity_type",
        "costing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Type', filters={'costing_rate': ['>', 100]}, fields=['activity_type', 'costing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "What activity types have a billing rate set to zero?",
      "fields": [
        "activity_type",
        "billing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Type', filters={'billing_rate': 0}, fields=['activity_type', 'billing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Which activities are marked as disabled?",
      "fields": [
        "activity_type",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Activity Type', filters={'disabled': 1}, fields=['activity_type', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "List all activities with billing rate higher than costing rate.",
      "fields": [
        "activity_type",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Type', fields=['activity_type', 'billing_rate', 'costing_rate'])  # Filter in code since Frappe does not support field comparison in DB"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Which activity types have both rates configured?",
      "fields": [
        "activity_type",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Type', filters={'billing_rate': ['>', 0], 'costing_rate': ['>', 0]}, fields=['activity_type', 'billing_rate', 'costing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Find all active activity types for project billing.",
      "fields": [
        "activity_type",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Activity Type', filters={'disabled': 0}, fields=['activity_type'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Fetch costing rate for 'Installation'.",
      "fields": [
        "activity_type",
        "costing_rate"
      ]
    },
    "output": "frappe.get_value('Activity Type', {'activity_type': 'Installation'}, 'costing_rate')"
  },
  {
    "input": {
      "doctype": "Project Type",
      "question": "Where do we store the description of each project type?",
      "fields": [
        "project_type",
        "description"
      ]
    },
    "output": "frappe.get_all('Project Type', fields=['project_type', 'description'])"
  },
  {
    "input": {
      "doctype": "Project Type",
      "question": "Is there a place to view all project categories we handle?",
      "fields": [
        "project_type",
        "description"
      ]
    },
    "output": "frappe.get_all('Project Type', fields=['project_type', 'description'])"
  },
  {
    "input": {
      "doctype": "Project Type",
      "question": "Which table holds our standard project types and their explanations?",
      "fields": [
        "project_type",
        "description"
      ]
    },
    "output": "frappe.get_all('Project Type', fields=['project_type', 'description'])"
  },
  {
    "input": {
      "doctype": "Project Type",
      "question": "Where can I find a description of internal vs external project types?",
      "fields": [
        "project_type",
        "description"
      ]
    },
    "output": "frappe.get_all('Project Type', fields=['project_type', 'description'])"
  },
  {
    "input": {
      "doctype": "Project Type",
      "question": "Show me all types of projects listed with their descriptions.",
      "fields": [
        "project_type",
        "description"
      ]
    },
    "output": "frappe.get_all('Project Type', fields=['project_type', 'description'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Can you show me all defined activity types and their default rates?",
      "fields": [
        "activity_type",
        "costing_rate",
        "billing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Type', fields=['activity_type', 'costing_rate', 'billing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Where do we set the default billing and costing rate for each activity?",
      "fields": [
        "activity_type",
        "costing_rate",
        "billing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Type', fields=['activity_type', 'costing_rate', 'billing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "What activities are listed for project time tracking?",
      "fields": [
        "activity_type"
      ]
    },
    "output": "frappe.get_all('Activity Type', fields=['activity_type'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "I need to review the list of activity types we use in our projects.",
      "fields": [
        "activity_type"
      ]
    },
    "output": "frappe.get_all('Activity Type', fields=['activity_type'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Which activity types are active and which ones are disabled?",
      "fields": [
        "activity_type",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Activity Type', fields=['activity_type', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Do we have an activity type for design work with a set billing rate?",
      "fields": [
        "activity_type",
        "billing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Type', filters={'activity_type': 'Design'}, fields=['activity_type', 'billing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "What\u2019s the default costing rate for installation activities?",
      "fields": [
        "activity_type",
        "costing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Type', filters={'activity_type': 'Installation'}, fields=['activity_type', 'costing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Where can I add a new activity type for field support?",
      "fields": [
        "activity_type"
      ]
    },
    "output": "frappe.get_all('Activity Type', filters={'activity_type': 'Field Support'}, fields=['activity_type'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Is there a place to see the rates associated with each task type?",
      "fields": [
        "activity_type",
        "costing_rate",
        "billing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Type', fields=['activity_type', 'costing_rate', 'billing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Can I disable an outdated activity type without deleting it?",
      "fields": [
        "activity_type",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Activity Type', filters={'disabled': 0}, fields=['activity_type'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Can we update the billing rate for a specific activity type?",
      "fields": [
        "activity_type",
        "billing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Type', fields=['activity_type', 'billing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Can I disable an outdated activity type without deleting it?",
      "fields": [
        "activity_type",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Activity Type', filters={'disabled': 0}, fields=['activity_type', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Where can I add a new activity type for field support?",
      "fields": [
        "activity_type"
      ]
    },
    "output": "frappe.get_all('Activity Type', filters={'activity_type': 'Field Support'}, fields=['activity_type'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Is there a place to see the rates associated with each task type?",
      "fields": [
        "activity_type",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Type', fields=['activity_type', 'billing_rate', 'costing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "Can we update the billing rate for a specific activity type?",
      "fields": [
        "activity_type",
        "billing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Type', filters={'activity_type': 'Design Work'}, fields=['activity_type', 'billing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Type",
      "question": "List all activity types available for timesheet entry.",
      "fields": [
        "activity_type"
      ]
    },
    "output": "frappe.get_all('Activity Type', fields=['activity_type'])"
  },
  {
    "input": {
      "doctype": "BOM Website Operation",
      "question": "What are the operations listed for the website BOM view?",
      "fields": [
        "operation"
      ]
    },
    "output": "frappe.get_all('BOM Website Operation', fields=['operation'])"
  },
  {
    "input": {
      "doctype": "BOM Website Operation",
      "question": "Where can I define the operation time for each step in the website BOM?",
      "fields": [
        "operation",
        "time_in_mins"
      ]
    },
    "output": "frappe.get_all('BOM Website Operation', fields=['operation', 'time_in_mins'])"
  },
  {
    "input": {
      "doctype": "BOM Website Operation",
      "question": "Is there a way to show operation images on the website BOM page?",
      "fields": [
        "operation",
        "website_image"
      ]
    },
    "output": "frappe.get_all('BOM Website Operation', fields=['operation', 'website_image'])"
  },
  {
    "input": {
      "doctype": "BOM Website Operation",
      "question": "Can I link workstations to each BOM operation visible on the website?",
      "fields": [
        "operation",
        "workstation"
      ]
    },
    "output": "frappe.get_all('BOM Website Operation', fields=['operation', 'workstation'])"
  },
  {
    "input": {
      "doctype": "BOM Website Operation",
      "question": "Show me all operations with thumbnails configured for the BOM website view.",
      "fields": [
        "operation",
        "thumbnail"
      ]
    },
    "output": "frappe.get_all('BOM Website Operation', filters={'thumbnail': ['!=', '']}, fields=['operation', 'thumbnail'])"
  },
  {
    "input": {
      "doctype": "BOM Website Operation",
      "question": "Where do we track the time in minutes for each operation in the online BOM?",
      "fields": [
        "operation",
        "time_in_mins"
      ]
    },
    "output": "frappe.get_all('BOM Website Operation', fields=['operation', 'time_in_mins'])"
  },
  {
    "input": {
      "doctype": "BOM Website Operation",
      "question": "Do website operations in BOM support image attachments?",
      "fields": [
        "operation",
        "website_image"
      ]
    },
    "output": "frappe.get_all('BOM Website Operation', filters={'website_image': ['!=', '']}, fields=['operation', 'website_image'])"
  },
  {
    "input": {
      "doctype": "BOM Website Operation",
      "question": "List the workstation assigned to each BOM operation for web display.",
      "fields": [
        "operation",
        "workstation"
      ]
    },
    "output": "frappe.get_all('BOM Website Operation', fields=['operation', 'workstation'])"
  },
  {
    "input": {
      "doctype": "BOM Website Operation",
      "question": "Which BOM operations are set with less than 10 minutes of operation time?",
      "fields": [
        "operation",
        "time_in_mins"
      ]
    },
    "output": "frappe.get_all('BOM Website Operation', filters={'time_in_mins': ['<', 10]}, fields=['operation', 'time_in_mins'])"
  },
  {
    "input": {
      "doctype": "BOM Website Operation",
      "question": "Are there any BOM operations on the site missing a workstation link?",
      "fields": [
        "operation",
        "workstation"
      ]
    },
    "output": "frappe.get_all('BOM Website Operation', filters={'workstation': ['=', None]}, fields=['operation'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "Which items are shown in the website view of the BOM?",
      "fields": [
        "item_code",
        "item_name"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', fields=['item_code', 'item_name'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "Can I display item images for each BOM component online?",
      "fields": [
        "item_code",
        "website_image"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', filters={'website_image': ['!=', '']}, fields=['item_code', 'website_image'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "Where do we set the quantity for each BOM item visible on the website?",
      "fields": [
        "item_code",
        "qty"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', fields=['item_code', 'qty'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "Show all website items used in a specific BOM structure.",
      "fields": [
        "item_code",
        "item_name",
        "description"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', fields=['item_code', 'item_name', 'description'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "Which BOM items have detailed descriptions for web display?",
      "fields": [
        "item_code",
        "description"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', filters={'description': ['!=', '']}, fields=['item_code', 'description'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "Is there a section to manage item thumbnails in the BOM website view?",
      "fields": [
        "item_code",
        "website_image"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', filters={'website_image': ['!=', '']}, fields=['item_code', 'website_image'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "What are the item codes listed for BOM website components?",
      "fields": [
        "item_code"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', fields=['item_code'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "Can I link additional item data for each BOM part on the website?",
      "fields": [
        "item_code",
        "description"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', fields=['item_code', 'description'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "Where can I update the name and description of items for website BOM display?",
      "fields": [
        "item_name",
        "description"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', fields=['item_name', 'description'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "How do I upload images for each BOM item shown on the web?",
      "fields": [
        "item_code",
        "website_image"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', filters={'website_image': ['!=', '']}, fields=['item_code', 'website_image'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "List all BOM website items with their respective quantities and descriptions.",
      "fields": [
        "item_code",
        "qty",
        "description"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', fields=['item_code', 'qty', 'description'])"
  },
  {
    "input": {
      "doctype": "BOM Website Operation",
      "question": "Are there any BOM operations on the site missing a workstation link?",
      "fields": [
        "operation",
        "workstation"
      ]
    },
    "output": "frappe.get_all('BOM Website Operation', filters={'workstation': ['=', '']}, fields=['operation'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "Which items are shown in the website view of the BOM?",
      "fields": [
        "item_code",
        "item_name"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', fields=['item_code', 'item_name'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "Can I display item images for each BOM component online?",
      "fields": [
        "item_code",
        "website_image"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', filters={'website_image': ['!=', '']}, fields=['item_code', 'website_image'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "Where do we set the quantity for each BOM item visible on the website?",
      "fields": [
        "item_code",
        "qty"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', fields=['item_code', 'qty'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "Show all website items used in a specific BOM structure.",
      "fields": [
        "item_code",
        "item_name",
        "description"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', fields=['item_code', 'item_name', 'description'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "Which BOM items have detailed descriptions for web display?",
      "fields": [
        "item_code",
        "description"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', filters={'description': ['!=', '']}, fields=['item_code', 'description'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "Is there a section to manage item thumbnails in the BOM website view?",
      "fields": [
        "item_code",
        "website_image"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', filters={'website_image': ['!=', '']}, fields=['item_code', 'website_image'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "What are the item codes listed for BOM website components?",
      "fields": [
        "item_code"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', fields=['item_code'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "Can I link additional item data for each BOM part on the website?",
      "fields": [
        "item_code",
        "description"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', filters={'description': ['!=', '']}, fields=['item_code', 'description'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "Where can I update the name and description of items for website BOM display?",
      "fields": [
        "item_name",
        "description"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', fields=['item_name', 'description'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "How do I upload images for each BOM item shown on the web?",
      "fields": [
        "item_code",
        "website_image"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', fields=['item_code', 'website_image'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "List all BOM website items with their respective quantities and descriptions.",
      "fields": [
        "item_code",
        "qty",
        "description"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', fields=['item_code', 'qty', 'description'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "Which website BOM items are missing an image attachment?",
      "fields": [
        "item_code",
        "website_image"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', filters={'website_image': ''}, fields=['item_code', 'website_image'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "Which item groups are available in the POS system?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "Can I see what item groups are linked to POS?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "What item group options are configured for the POS interface?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "List all item groups that are used in point-of-sale.",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "Where can I define item groups for POS usage?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "Do we have a record of item groups configured in the POS?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "Which groups of items are available to sell through POS?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "How do I update item groups in our POS system?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "Is there a list of item groups assigned specifically to POS terminals?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "Can I filter sales by item groups in the POS?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "Show me all POS item groups added recently.",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'], order_by='creation desc')"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "Where are the item group settings for POS transactions stored?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "BOM Website Item",
      "question": "Which website BOM items are missing an image attachment?",
      "fields": [
        "item_code",
        "website_image"
      ]
    },
    "output": "frappe.get_all('BOM Website Item', filters={'website_image': ''}, fields=['item_code', 'website_image'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "Which item groups are available in the POS system?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "Can I see what item groups are linked to POS?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "What item group options are configured for the POS interface?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "List all item groups that are used in point-of-sale.",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "Where can I define item groups for POS usage?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "Do we have a record of item groups configured in the POS?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "Which groups of items are available to sell through POS?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "How do I update item groups in our POS system?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "Is there a list of item groups assigned specifically to POS terminals?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "Can I filter sales by item groups in the POS?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "Show me all POS item groups added recently.",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'], order_by='creation desc')"
  },
  {
    "input": {
      "doctype": "POS Item Group",
      "question": "Where are the item group settings for POS transactions stored?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('POS Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "POS Customer Group",
      "question": "Which customer groups are enabled for POS transactions?",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
  },
  {
    "input": {
      "doctype": "POS Customer Group",
      "question": "Can I view the list of customer groups linked to POS?",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
  },
  {
    "input": {
      "doctype": "POS Customer Group",
      "question": "What customer groups are configured to work with the POS system?",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
  },
  {
    "input": {
      "doctype": "POS Customer Group",
      "question": "List all customer groups available for point-of-sale operations.",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
  },
  {
    "input": {
      "doctype": "POS Customer Group",
      "question": "Where do we assign customer groups for POS usage?",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
  },
  {
    "input": {
      "doctype": "POS Customer Group",
      "question": "Do we support group-based customer discounts in POS?",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
  },
  {
    "input": {
      "doctype": "POS Customer Group",
      "question": "Can I update customer groups used in POS billing?",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
  },
  {
    "input": {
      "doctype": "POS Customer Group",
      "question": "How are customer groups mapped in the POS configuration?",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
  },
  {
    "input": {
      "doctype": "POS Customer Group",
      "question": "Is there a way to restrict POS access by customer group?",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
  },
  {
    "input": {
      "doctype": "POS Customer Group",
      "question": "Which customer segments are active for POS checkout?",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
  },
  {
    "input": {
      "doctype": "POS Customer Group",
      "question": "Show me all customer groups set up for retail POS sales.",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
  },
  {
    "input": {
      "doctype": "POS Customer Group",
      "question": "What\u2019s the process to assign new customer groups in POS?",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_all('POS Customer Group', fields=['customer_group'])"
  },
  {
    "input": {
      "doctype": "Branch",
      "question": "Can you show me a list of all our active branches?",
      "fields": [
        "branch"
      ]
    },
    "output": "frappe.get_all('Branch', fields=['branch'])"
  },
  {
    "input": {
      "doctype": "Branch",
      "question": "Is there a branch registered under the name Downtown Store?",
      "fields": [
        "branch"
      ]
    },
    "output": "frappe.db.exists('Branch', {'branch': 'Downtown Store'})"
  },
  {
    "input": {
      "doctype": "Branch",
      "question": "Are branch names stored somewhere in the ERP system?",
      "fields": [
        "branch"
      ]
    },
    "output": "frappe.get_all('Branch', fields=['branch'])"
  },
  {
    "input": {
      "doctype": "Branch",
      "question": "Where do I manage our store and branch records?",
      "fields": [
        "branch"
      ]
    },
    "output": "frappe.get_all('Branch', fields=['branch'])"
  },
  {
    "input": {
      "doctype": "Branch",
      "question": "Can I get the details of the South Branch?",
      "fields": [
        "branch"
      ]
    },
    "output": "frappe.get_all('Branch', filters={'branch': 'South Branch'}, fields=['branch'])"
  },
  {
    "input": {
      "doctype": "Branch",
      "question": "Which branch is associated with our new distribution center?",
      "fields": [
        "branch"
      ]
    },
    "output": "frappe.get_all('Branch', filters={'branch': 'Distribution Center'}, fields=['branch'])"
  },
  {
    "input": {
      "doctype": "Branch",
      "question": "Are branch names stored somewhere in the ERP system?",
      "fields": [
        "branch"
      ]
    },
    "output": "frappe.get_all('Branch', fields=['branch'])"
  },
  {
    "input": {
      "doctype": "Branch",
      "question": "Can we rename a branch entry in the ERP?",
      "fields": [
        "branch"
      ]
    },
    "output": "frappe.get_all('Branch', fields=['branch'])"
  },
  {
    "input": {
      "doctype": "Branch",
      "question": "I need to create a record for the new Mumbai branch\u2014how do I do that?",
      "fields": [
        "branch"
      ]
    },
    "output": "frappe.get_all('Branch', filters={'branch': 'Mumbai'}, fields=['branch'])"
  },
  {
    "input": {
      "doctype": "BOM Website Operation",
      "question": "Can we filter BOM website operations by operation name or time?",
      "fields": [
        "operation",
        "time_in_mins"
      ]
    },
    "output": "frappe.get_all('BOM Website Operation', filters={'operation': ['!=', ''], 'time_in_mins': ['>', 0]}, fields=['operation', 'time_in_mins'])"
  },
  {
    "input": {
      "doctype": "Project Type",
      "question": "List out our project types so I can assign one to a new project.",
      "fields": [
        "project_type"
      ]
    },
    "output": "frappe.get_all('Project Type', fields=['project_type'])"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "Can I choose a specific branch and notify its customers only via SMS?",
      "fields": [
        "branch",
        "customer",
        "message"
      ]
    },
    "output": "frappe.get_all('SMS Center', filters={'branch': 'Specific Branch'}, fields=['customer', 'message'])"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "List all UOM categories used in item conversion.",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.get_all('UOM Category', fields=['category_name'])"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "Is there a separate UOM category for liquids?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.get_all('UOM Category', filters={'category_name': 'Liquids'}, fields=['category_name'])"
  },
  {
    "input": {
      "doctype": "Website Item Group",
      "question": "Where do I configure which item groups appear on our website?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "BOM Website Operation",
      "question": "Can we filter BOM website operations by operation name or time?",
      "fields": [
        "operation",
        "time_in_mins"
      ]
    },
    "output": "frappe.get_all('BOM Website Operation', filters={'operation': ['!=', ''], 'time_in_mins': ['>', 0]}, fields=['operation', 'time_in_mins'])"
  },
  {
    "input": {
      "doctype": "Project Type",
      "question": "List out our project types so I can assign one to a new project.",
      "fields": [
        "project_type"
      ]
    },
    "output": "frappe.get_all('Project Type', fields=['project_type'])"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "List all UOM categories used in item conversion.",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.get_all('UOM Category', fields=['category_name'])"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "Is there a separate UOM category for liquids?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.get_all('UOM Category', filters={'category_name': 'Liquids'}, fields=['category_name'])"
  },
  {
    "input": {
      "doctype": "Website Item Group",
      "question": "Where do I configure which item groups appear on our website?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "BOM Website Operation",
      "question": "Can we filter BOM website operations by operation name or time?",
      "fields": [
        "operation",
        "time_in_mins"
      ]
    },
    "output": "frappe.get_all('BOM Website Operation', filters={'operation': ['!=', ''], 'time_in_mins': ['>', 0]}, fields=['operation', 'time_in_mins'])"
  },
  {
    "input": {
      "doctype": "BOM Website Operation",
      "question": "How are BOM operation steps displayed with images on the website?",
      "fields": [
        "operation",
        "website_image",
        "thumbnail"
      ]
    },
    "output": "frappe.get_all('BOM Website Operation', fields=['operation', 'website_image', 'thumbnail'])"
  },
  {
    "input": {
      "doctype": "Project Type",
      "question": "List out our project types so I can assign one to a new project.",
      "fields": [
        "project_type"
      ]
    },
    "output": "frappe.get_all('Project Type', fields=['project_type'])"
  },
  {
    "input": {
      "doctype": "Project Type",
      "question": "Where can I find a list of all project type labels and their purpose?",
      "fields": [
        "project_type",
        "description"
      ]
    },
    "output": "frappe.get_all('Project Type', fields=['project_type', 'description'])"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "Can I choose a specific branch and notify its customers only via SMS?",
      "fields": [
        "branch",
        "customer",
        "send_sms"
      ]
    },
    "output": "frappe.get_all('SMS Center', filters={'branch': ['!=', ''], 'customer': ['!=', '']}, fields=['branch', 'customer', 'send_sms'])"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "What's the easiest way to notify all departments about a new update?",
      "fields": [
        "department",
        "message"
      ]
    },
    "output": "frappe.get_all('SMS Center', filters={'department': ['!=', '']}, fields=['department', 'message'])"
  },
  {
    "input": {
      "doctype": "SMS Center",
      "question": "How do I send SMS updates to customers from a particular sales partner?",
      "fields": [
        "sales_partner",
        "customer",
        "send_sms"
      ]
    },
    "output": "frappe.get_all('SMS Center', filters={'sales_partner': ['!=', ''], 'customer': ['!=', '']}, fields=['sales_partner', 'customer', 'send_sms'])"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "List all UOM categories used in item conversion.",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.get_all('UOM Category', fields=['category_name'])"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "Is there a separate UOM category for liquids?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.get_all('UOM Category', filters={'category_name': 'Liquid'}, fields=['category_name'])"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "Which UOM category does 'Box' belong to?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.get_all('UOM Category', filters={'category_name': 'Box'}, fields=['category_name'])"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "Show me all the categories defined for unit of measurement.",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.get_all('UOM Category', fields=['category_name'])"
  },
  {
    "input": {
      "doctype": "Website Item Group",
      "question": "Where do I configure which item groups appear on our website?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Website Item Group",
      "question": "How do I make a product category visible in the online store?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Website Item Group",
      "question": "Can I check which item groups are listed on our website shop page?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Website Item Group",
      "question": "Is there a way to control item group visibility for the website?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Website Item Group",
      "question": "List all the item groups currently shown on the website.",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Website Item Group",
      "question": "Where do I manage the product groupings for our website catalog?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Website Item Group",
      "question": "Which section handles the configuration of website product categories?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Website Item Group",
      "question": "Can you show me the setup for website-visible item groups?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Website Item Group",
      "question": "Where can I update the categories featured on the website?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Website Item Group",
      "question": "What\u2019s the doctype for linking item groups to website display?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Website Item Group",
      "question": "How do I ensure only specific item groups are shown online?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Website Item Group",
      "question": "Is there a way to organize product categories just for website use?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Detail",
      "question": "Where can I set up the conversion factor for different UOMs of an item?",
      "fields": [
        "uom",
        "conversion_factor"
      ]
    },
    "output": "frappe.get_all('UOM Conversion Detail', fields=['uom', 'conversion_factor'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Detail",
      "question": "How do I convert pieces to cartons in the system for a product?",
      "fields": [
        "uom",
        "conversion_factor"
      ]
    },
    "output": "frappe.get_all('UOM Conversion Detail', filters={'uom': 'Carton'}, fields=['uom', 'conversion_factor'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Detail",
      "question": "I need to define how many boxes equal one pallet\u2014where should I do that?",
      "fields": [
        "uom",
        "conversion_factor"
      ]
    },
    "output": "frappe.get_all('UOM Conversion Detail', filters={'uom': 'Pallet'}, fields=['uom', 'conversion_factor'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Detail",
      "question": "Can I configure UOM conversion for stock items?",
      "fields": [
        "uom",
        "conversion_factor"
      ]
    },
    "output": "frappe.get_all('UOM Conversion Detail', fields=['uom', 'conversion_factor'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Detail",
      "question": "What\u2019s the correct place to input UOM conversion factors?",
      "fields": [
        "uom",
        "conversion_factor"
      ]
    },
    "output": "frappe.get_all('UOM Conversion Detail', fields=['uom', 'conversion_factor'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Detail",
      "question": "Which doctype allows me to assign multiple UOMs to a product?",
      "fields": [
        "uom",
        "conversion_factor"
      ]
    },
    "output": "frappe.get_all('UOM Conversion Detail', fields=['uom', 'conversion_factor'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Detail",
      "question": "Where do I define how many units make up a case for an item?",
      "fields": [
        "uom",
        "conversion_factor"
      ]
    },
    "output": "frappe.get_all('UOM Conversion Detail', filters={'uom': 'Case'}, fields=['uom', 'conversion_factor'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Detail",
      "question": "How do I handle unit conversions like meter to centimeter for stock?",
      "fields": [
        "uom",
        "conversion_factor"
      ]
    },
    "output": "frappe.get_all('UOM Conversion Detail', filters={'uom': ['in', ['Meter', 'Centimeter']]}, fields=['uom', 'conversion_factor'])"
  },
  {
    "input": {
      "doctype": "Website Item Group",
      "question": "List all item groups used for product display on the website.",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Website Item Group",
      "question": "Can you show me all website item group records currently in the system?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('Website Item Group', fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Detail",
      "question": "List all UOM conversion factors configured for products.",
      "fields": [
        "uom",
        "conversion_factor"
      ]
    },
    "output": "frappe.get_all('UOM Conversion Detail', fields=['uom', 'conversion_factor'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Detail",
      "question": "Fetch conversion factors for items using pallet as the base UOM.",
      "fields": [
        "uom",
        "conversion_factor"
      ]
    },
    "output": "frappe.get_all('UOM Conversion Detail', filters={'uom': 'Pallet'}, fields=['uom', 'conversion_factor'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Detail",
      "question": "Show all defined conversion factors where UOM is 'Box'.",
      "fields": [
        "uom",
        "conversion_factor"
      ]
    },
    "output": "frappe.get_all('UOM Conversion Detail', filters={'uom': 'Box'}, fields=['uom', 'conversion_factor'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Detail",
      "question": "Show me where the conversion factor for item packaging is stored.",
      "fields": [
        "uom",
        "conversion_factor"
      ]
    },
    "output": "frappe.get_all('UOM Conversion Detail', fields=['uom', 'conversion_factor'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Detail",
      "question": "Where is the UOM to conversion ratio defined in the system?",
      "fields": [
        "uom",
        "conversion_factor"
      ]
    },
    "output": "frappe.get_all('UOM Conversion Detail', fields=['uom', 'conversion_factor'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Detail",
      "question": "How does ERPNext know how many dozens are in a carton?",
      "fields": [
        "uom",
        "conversion_factor"
      ]
    },
    "output": "frappe.get_all('UOM Conversion Detail', filters={'uom': 'Dozen'}, fields=['uom', 'conversion_factor'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Country",
      "question": "Where can I assign specific countries to a shipping rule?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_all('Shipping Rule Country', fields=['country'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Country",
      "question": "Can I restrict a shipping rule to only apply in Germany and France?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_all('Shipping Rule Country', filters={'country': ['in', ['Germany', 'France']]}, fields=['country'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Country",
      "question": "Which doctype links countries to their applicable shipping rules?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_all('Shipping Rule Country', fields=['country'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Country",
      "question": "How do I set up different shipping policies for each country?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_all('Shipping Rule Country', fields=['country'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Country",
      "question": "I need to configure which countries are eligible under a shipping plan\u2014where do I do that?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_all('Shipping Rule Country', fields=['country'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Country",
      "question": "Can I define a list of countries for a free shipping rule?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_all('Shipping Rule Country', fields=['country'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Country",
      "question": "Where can I add allowed countries under my custom shipping rule?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_all('Shipping Rule Country', fields=['country'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Country",
      "question": "Which form lets me define country-wise shipping availability?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_all('Shipping Rule Country', fields=['country'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Country",
      "question": "I want to allow shipping to the US only for this rule\u2014where do I configure that?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_all('Shipping Rule Country', filters={'country': 'United States'}, fields=['country'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Country",
      "question": "How can I list countries where a specific shipping method applies?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_all('Shipping Rule Country', fields=['country'])"
  },
  {
    "input": {
      "doctype": "Project",
      "question": "List all active projects created in the last 30 days.",
      "fields": [
        "name",
        "status",
        "creation"
      ]
    },
    "output": "frappe.get_list('Project', filters={ 'status': 'Active', 'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -30)] }, fields=['name', 'status', 'creation'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Which employees joined this year?",
      "fields": [
        "employee_name",
        "date_of_joining"
      ]
    },
    "output": "frappe.get_list('Employee', filters={ 'date_of_joining': ['between', ['2025-01-01', '2025-12-31']] }, fields=['employee_name', 'date_of_joining'])"
  },
  {
    "input": {
      "doctype": "Customer",
      "question": "List all customers from Qatar.",
      "fields": [
        "customer_name",
        "country"
      ]
    },
    "output": "frappe.get_list('Customer', filters={ 'country': 'Qatar' }, fields=['customer_name', 'country'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Condition",
      "question": "List all shipping conditions where the order value starts at $100.",
      "fields": [
        "from_value",
        "to_value",
        "shipping_amount"
      ]
    },
    "output": "frappe.get_list('Shipping Rule Condition', filters={'from_value': 100}, fields=['from_value', 'to_value', 'shipping_amount'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Condition",
      "question": "Can you show me conditions where shipping amount is greater than 50?",
      "fields": [
        "from_value",
        "to_value",
        "shipping_amount"
      ]
    },
    "output": "frappe.get_list('Shipping Rule Condition', filters={'shipping_amount': ['>', 50]}, fields=['from_value', 'to_value', 'shipping_amount'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Condition",
      "question": "Fetch all records where the to_value is less than 500.",
      "fields": [
        "from_value",
        "to_value",
        "shipping_amount"
      ]
    },
    "output": "frappe.get_list('Shipping Rule Condition', filters={'to_value': ['<', 500]}, fields=['from_value', 'to_value', 'shipping_amount'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Condition",
      "question": "Give me all shipping tiers that span from 0 to 999.",
      "fields": [
        "from_value",
        "to_value",
        "shipping_amount"
      ]
    },
    "output": "frappe.get_list('Shipping Rule Condition', filters={'from_value': 0, 'to_value': 999}, fields=['from_value', 'to_value', 'shipping_amount'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Condition",
      "question": "Get shipping rules where the shipping cost is exactly 25.",
      "fields": [
        "from_value",
        "to_value",
        "shipping_amount"
      ]
    },
    "output": "frappe.get_list('Shipping Rule Condition', filters={'shipping_amount': 25}, fields=['from_value', 'to_value', 'shipping_amount'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Country",
      "question": "Can I apply a different shipping rate based on destination country?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_list('Shipping Rule Country', fields=['country'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Country",
      "question": "Where is the country selection stored for each shipping rule?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_list('Shipping Rule Country', fields=['country'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Condition",
      "question": "How do I define shipping charges based on order value range?",
      "fields": [
        "from_value",
        "to_value",
        "shipping_amount"
      ]
    },
    "output": "frappe.get_list('Shipping Rule Condition', fields=['from_value', 'to_value', 'shipping_amount'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Condition",
      "question": "Where can I set a shipping amount for orders between $100 and $500?",
      "fields": [
        "from_value",
        "to_value",
        "shipping_amount"
      ]
    },
    "output": "frappe.get_list('Shipping Rule Condition', filters={'from_value': 100, 'to_value': 500}, fields=['from_value', 'to_value', 'shipping_amount'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Condition",
      "question": "Can I charge different shipping fees based on cart total?",
      "fields": [
        "from_value",
        "to_value",
        "shipping_amount"
      ]
    },
    "output": "frappe.get_list('Shipping Rule Condition', fields=['from_value', 'to_value', 'shipping_amount'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Condition",
      "question": "Which doctype allows setting minimum order value for a shipping rate?",
      "fields": [
        "from_value"
      ]
    },
    "output": "frappe.get_list('Shipping Rule Condition', fields=['from_value'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Condition",
      "question": "Is there a way to define tiered shipping costs based on purchase amount?",
      "fields": [
        "from_value",
        "to_value",
        "shipping_amount"
      ]
    },
    "output": "frappe.get_list('Shipping Rule Condition', fields=['from_value', 'to_value', 'shipping_amount'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Condition",
      "question": "How do I apply a fixed shipping fee if the order value is above $1000?",
      "fields": [
        "from_value",
        "shipping_amount"
      ]
    },
    "output": "frappe.get_list('Shipping Rule Condition', filters={'from_value': ['>', 1000]}, fields=['from_value', 'shipping_amount'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Condition",
      "question": "Can I configure shipping fees to vary by order subtotal?",
      "fields": [
        "from_value",
        "to_value",
        "shipping_amount"
      ]
    },
    "output": "frappe.get_list('Shipping Rule Condition', fields=['from_value', 'to_value', 'shipping_amount'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Condition",
      "question": "Where can I define the shipping amount for a specific value range?",
      "fields": [
        "from_value",
        "to_value",
        "shipping_amount"
      ]
    },
    "output": "frappe.get_list('Shipping Rule Condition', filters={'from_value': ['>=', 0]}, fields=['from_value', 'to_value', 'shipping_amount'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Condition",
      "question": "If I want to set a shipping fee only for small orders, where should I do that?",
      "fields": [
        "to_value",
        "shipping_amount"
      ]
    },
    "output": "frappe.get_list('Shipping Rule Condition', filters={'to_value': ['<=', 100]}, fields=['to_value', 'shipping_amount'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Condition",
      "question": "Which table lets me define from and to values for shipping tiers?",
      "fields": [
        "from_value",
        "to_value"
      ]
    },
    "output": "frappe.get_list('Shipping Rule Condition', fields=['from_value', 'to_value'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Condition",
      "question": "How do I control shipping rates based on the value of goods purchased?",
      "fields": [
        "from_value",
        "to_value",
        "shipping_amount"
      ]
    },
    "output": "frappe.get_list('Shipping Rule Condition', fields=['from_value', 'to_value', 'shipping_amount'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule Condition",
      "question": "Where do I input currency-based shipping charges by order value?",
      "fields": [
        "from_value",
        "to_value",
        "shipping_amount"
      ]
    },
    "output": "frappe.get_list('Shipping Rule Condition', fields=['from_value', 'to_value', 'shipping_amount'])"
  },
  {
    "input": {
      "doctype": "Price List Country",
      "question": "How can I assign a country to a specific price list?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_list('Price List Country', fields=['country'])"
  },
  {
    "input": {
      "doctype": "Price List Country",
      "question": "Is there a way to link different price lists to different countries?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_list('Price List Country', fields=['country'])"
  },
  {
    "input": {
      "doctype": "Price List Country",
      "question": "Can I define which price list applies to customers in Germany?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_list('Price List Country', filters={'country': 'Germany'}, fields=['country'])"
  },
  {
    "input": {
      "doctype": "Price List Country",
      "question": "Where do I set up country-specific pricing rules?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_list('Price List Country', fields=['country'])"
  },
  {
    "input": {
      "doctype": "Price List Country",
      "question": "Which doctype lets me tag a country to a price list for localization?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_list('Price List Country', fields=['country'])"
  },
  {
    "input": {
      "doctype": "Price List Country",
      "question": "How do I associate a price list with a customer's country?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_list('Price List Country', fields=['country'])"
  },
  {
    "input": {
      "doctype": "Price List Country",
      "question": "Can I control which price list is active in the US versus Canada?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_list('Price List Country', filters={'country': ['in', ['United States', 'Canada']]}, fields=['country'])"
  },
  {
    "input": {
      "doctype": "Price List Country",
      "question": "Where do I define country restrictions for a price list?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_list('Price List Country', fields=['country'])"
  },
  {
    "input": {
      "doctype": "Price List Country",
      "question": "I want my India customers to see INR pricing. How do I set that?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_list('Price List Country', filters={'country': 'India'}, fields=['country'])"
  },
  {
    "input": {
      "doctype": "Price List Country",
      "question": "What\u2019s the correct place to connect countries with price lists?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_list('Price List Country', fields=['country'])"
  },
  {
    "input": {
      "doctype": "Price List Country",
      "question": "Can price lists be limited to specific countries?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_list('Price List Country', fields=['country'])"
  },
  {
    "input": {
      "doctype": "Monthly Distribution Percentage",
      "question": "Where do I define the budget allocation for each month?",
      "fields": [
        "month",
        "percentage_allocation"
      ]
    },
    "output": "frappe.get_list('Monthly Distribution Percentage', fields=['month', 'percentage_allocation'])"
  },
  {
    "input": {
      "doctype": "Monthly Distribution Percentage",
      "question": "How can I assign specific percentage distributions to different months?",
      "fields": [
        "month",
        "percentage_allocation"
      ]
    },
    "output": "frappe.get_list('Monthly Distribution Percentage', fields=['month', 'percentage_allocation'])"
  },
  {
    "input": {
      "doctype": "Monthly Distribution Percentage",
      "question": "Can I spread annual expenses across all months in ERPNext?",
      "fields": [
        "month",
        "percentage_allocation"
      ]
    },
    "output": "frappe.get_list('Monthly Distribution Percentage', fields=['month', 'percentage_allocation'])"
  },
  {
    "input": {
      "doctype": "Monthly Distribution Percentage",
      "question": "What is the doctype for entering monthly percentage allocations?",
      "fields": [
        "month",
        "percentage_allocation"
      ]
    },
    "output": "frappe.get_list('Monthly Distribution Percentage', fields=['month', 'percentage_allocation'])"
  },
  {
    "input": {
      "doctype": "Monthly Distribution Percentage",
      "question": "Which table lets me set monthly percentages for planning purposes?",
      "fields": [
        "month",
        "percentage_allocation"
      ]
    },
    "output": "frappe.get_list('Monthly Distribution Percentage', fields=['month', 'percentage_allocation'])"
  },
  {
    "input": {
      "doctype": "Monthly Distribution Percentage",
      "question": "How do I configure monthly split for budget distribution?",
      "fields": [
        "month",
        "percentage_allocation"
      ]
    },
    "output": "frappe.get_list('Monthly Distribution Percentage', fields=['month', 'percentage_allocation'])"
  },
  {
    "input": {
      "doctype": "Monthly Distribution Percentage",
      "question": "Is there a way to distribute a percentage budget for each calendar month?",
      "fields": [
        "month",
        "percentage_allocation"
      ]
    },
    "output": "frappe.get_list('Monthly Distribution Percentage', fields=['month', 'percentage_allocation'])"
  },
  {
    "input": {
      "doctype": "Monthly Distribution Percentage",
      "question": "Where can I record the percentage of budget used in April?",
      "fields": [
        "month",
        "percentage_allocation"
      ]
    },
    "output": "frappe.get_list('Monthly Distribution Percentage', filters={'month': 'April'}, fields=['month', 'percentage_allocation'])"
  },
  {
    "input": {
      "doctype": "Monthly Distribution Percentage",
      "question": "Can I define month-wise cost distribution in ERP?",
      "fields": [
        "month",
        "percentage_allocation"
      ]
    },
    "output": "frappe.get_list('Monthly Distribution Percentage', fields=['month', 'percentage_allocation'])"
  },
  {
    "input": {
      "doctype": "Item Website Specification",
      "question": "Where can I add website-specific labels and descriptions for my items?",
      "fields": [
        "label",
        "description"
      ]
    },
    "output": "frappe.get_list('Item Website Specification', fields=['label', 'description'])"
  },
  {
    "input": {
      "doctype": "Item Website Specification",
      "question": "How do I define detailed product specs for display on the website?",
      "fields": [
        "label",
        "description"
      ]
    },
    "output": "frappe.get_list('Item Website Specification', fields=['label', 'description'])"
  },
  {
    "input": {
      "doctype": "Item Website Specification",
      "question": "Can I show custom specification labels for each item online?",
      "fields": [
        "label",
        "description"
      ]
    },
    "output": "frappe.get_list('Item Website Specification', fields=['label', 'description'])"
  },
  {
    "input": {
      "doctype": "Item Website Specification",
      "question": "Is there a way to display item features with headings on the website?",
      "fields": [
        "label",
        "description"
      ]
    },
    "output": "frappe.get_list('Item Website Specification', fields=['label', 'description'])"
  },
  {
    "input": {
      "doctype": "Item Website Specification",
      "question": "Where do I input website specs for a product like 'Weight: 5kg' or 'Material: Steel'?",
      "fields": [
        "label",
        "description"
      ]
    },
    "output": "frappe.get_list('Item Website Specification', fields=['label', 'description'])"
  },
  {
    "input": {
      "doctype": "Item Website Specification",
      "question": "Which doctype helps organize item details under separate website sections?",
      "fields": [
        "label",
        "description"
      ]
    },
    "output": "frappe.get_list('Item Website Specification', fields=['label', 'description'])"
  },
  {
    "input": {
      "doctype": "Item Website Specification",
      "question": "How do I add descriptive specifications for items that appear on the shop page?",
      "fields": [
        "label",
        "description"
      ]
    },
    "output": "frappe.get_list('Item Website Specification', fields=['label', 'description'])"
  },
  {
    "input": {
      "doctype": "Item Website Specification",
      "question": "I want to group product information under headings like 'Specifications' or 'Highlights'. Where do I do that?",
      "fields": [
        "label",
        "description"
      ]
    },
    "output": "frappe.get_list('Item Website Specification', fields=['label', 'description'])"
  },
  {
    "input": {
      "doctype": "Item Website Specification",
      "question": "What section should I use to enter extra text-based details for an item on the web?",
      "fields": [
        "label",
        "description"
      ]
    },
    "output": "frappe.get_list('Item Website Specification', fields=['label', 'description'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "How can I specify the size or color for an item variant?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', fields=['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "Where do I link item attributes like 'Material' to their values for each variant?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', filters={'item_attribute': 'Material'}, fields=['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "I want to define different variants of a T-shirt based on color. Which doctype should I use?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', filters={'item_attribute': 'Color'}, fields=['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "How do I map the attribute 'Size' to 'Large' for a variant of an item?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', filters={'item_attribute': 'Size', 'item_attribute_value': 'Large'}, fields=['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "Which form lets me assign a value to an attribute like 'Length' for a product?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', filters={'item_attribute': 'Length'}, fields=['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "Where can I manage the specific characteristics for each item version like color or size?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', fields=['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "Is there a way to configure item variants with selected attributes and their values?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', fields=['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "How do I record that this jacket variant is made of leather?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', filters={'item_attribute_value': 'Leather'}, fields=['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Cheque Print Template",
      "question": "Where do I configure the layout for printing cheques for different banks?",
      "fields": [
        "bank_name",
        "cheque_width",
        "cheque_height",
        "starting_position_from_top_edge"
      ]
    },
    "output": "frappe.get_all('Cheque Print Template', fields=['bank_name', 'cheque_width', 'cheque_height', 'starting_position_from_top_edge'])"
  },
  {
    "input": {
      "doctype": "Cheque Print Template",
      "question": "Is there a way to set the position of the payer\u2019s name and date on a cheque?",
      "fields": [
        "payer_name_from_top_edge",
        "payer_name_from_left_edge",
        "date_dist_from_top_edge",
        "date_dist_from_left_edge"
      ]
    },
    "output": "frappe.get_list('Cheque Print Template', fields=['payer_name_from_top_edge', 'payer_name_from_left_edge', 'date_dist_from_top_edge', 'date_dist_from_left_edge'])"
  },
  {
    "input": {
      "doctype": "Cheque Print Template",
      "question": "Where can I upload scanned cheque templates for visual alignment?",
      "fields": [
        "bank_name",
        "scanned_cheque"
      ]
    },
    "output": "frappe.get_list('Cheque Print Template', fields=['bank_name', 'scanned_cheque'])"
  },
  {
    "input": {
      "doctype": "Cheque Print Template",
      "question": "Can I enable an option to include an 'Account Payable' label on printed cheques?",
      "fields": [
        "bank_name",
        "is_account_payable"
      ]
    },
    "output": "frappe.get_all('Cheque Print Template', filters={'is_account_payable': 1}, fields=['bank_name', 'is_account_payable'])"
  },
  {
    "input": {
      "doctype": "Cheque Print Template",
      "question": "Where can I define spacing and width for cheque amounts in words?",
      "fields": [
        "amt_in_words_line_spacing",
        "amt_in_word_width"
      ]
    },
    "output": "frappe.get_list('Cheque Print Template', fields=['amt_in_words_line_spacing', 'amt_in_word_width'])"
  },
  {
    "input": {
      "doctype": "Cheque Print Template",
      "question": "Which template lets me adjust the distance of account number from the top and left edges?",
      "fields": [
        "bank_name",
        "acc_no_dist_from_top_edge",
        "acc_no_dist_from_left_edge"
      ]
    },
    "output": "frappe.get_list('Cheque Print Template', fields=['bank_name', 'acc_no_dist_from_top_edge', 'acc_no_dist_from_left_edge'])"
  },
  {
    "input": {
      "doctype": "Cheque Print Template",
      "question": "How do I configure cheque dimensions for a specific print format?",
      "fields": [
        "cheque_width",
        "cheque_height",
        "has_print_format"
      ]
    },
    "output": "frappe.get_all('Cheque Print Template', filters={'has_print_format': 1}, fields=['cheque_width', 'cheque_height', 'has_print_format'])"
  },
  {
    "input": {
      "doctype": "Cheque Print Template",
      "question": "How can I define the cheque size and margins for Citibank?",
      "fields": [
        "bank_name",
        "cheque_width",
        "cheque_height",
        "starting_position_from_top_edge"
      ]
    },
    "output": "frappe.get_value('Cheque Print Template', {'bank_name': 'Citibank'}, ['cheque_width', 'cheque_height', 'starting_position_from_top_edge'])"
  },
  {
    "input": {
      "doctype": "Authorization Control",
      "question": "Where can I manage who can approve transactions in ERPNext?",
      "fields": [
        "approval_doctype",
        "approving_user",
        "approval_limit"
      ]
    },
    "output": "frappe.get_list('Authorization Control', fields=['approval_doctype', 'approving_user', 'approval_limit'])"
  },
  {
    "input": {
      "doctype": "Authorization Control",
      "question": "How do I control user authorization levels for financial documents?",
      "fields": [
        "approval_doctype",
        "approving_user",
        "approval_limit"
      ]
    },
    "output": "frappe.get_list('Authorization Control', filters={'approval_doctype': 'Journal Entry'}, fields=['approving_user', 'approval_limit'])"
  },
  {
    "input": {
      "doctype": "Authorization Control",
      "question": "Can I create rules that restrict financial approvals based on amount?",
      "fields": [
        "approval_doctype",
        "approval_limit"
      ]
    },
    "output": "frappe.get_list('Authorization Control', filters={'approval_doctype': 'Purchase Order'}, fields=['approval_limit'])"
  },
  {
    "input": {
      "doctype": "Authorization Control",
      "question": "How do I define who is allowed to authorize high-value purchase orders?",
      "fields": [
        "approval_doctype",
        "approving_user",
        "approval_limit"
      ]
    },
    "output": "frappe.get_list('Authorization Control', filters={'approval_doctype': 'Purchase Order'}, fields=['approving_user', 'approval_limit'])"
  },
  {
    "input": {
      "doctype": "Authorization Control",
      "question": "Where do I configure hierarchical approval rules in ERPNext?",
      "fields": [
        "approval_doctype",
        "approving_user",
        "approval_level"
      ]
    },
    "output": "frappe.get_list('Authorization Control', fields=['approval_doctype', 'approving_user', 'approval_level'])"
  },
  {
    "input": {
      "doctype": "Item Attribute Value",
      "question": "Where can I add new values like 'Red', 'Blue', or 'Green' for the color attribute?",
      "fields": [
        "attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Attribute Value', filters={'attribute_value': ['in', ['Red', 'Blue', 'Green']]}, fields=['attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Attribute Value",
      "question": "How can I specify the abbreviation for an attribute value like XL for Extra Large?",
      "fields": [
        "attribute_value",
        "abbr"
      ]
    },
    "output": "frappe.get_value('Item Attribute Value', {'attribute_value': 'XL'}, ['attribute_value', 'abbr'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "List stock entries that were linked to a purchase order and have remarks.",
      "fields": [
        "purchase_order",
        "remarks"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'purchase_order': ['!=', ''], 'remarks': ['!=', ''] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Get stock entries created by user 'admin@erpgulf.com' on or after April 1, 2025.",
      "fields": [
        "owner",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'owner': 'admin@erpgulf.com', 'posting_date': ['>=', '2025-04-01'] }, fields=['name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Stock Entry",
      "question": "Find stock entries for project 'City Mall Construction' with value difference greater than 1000.",
      "fields": [
        "project",
        "value_difference"
      ]
    },
    "output": "frappe.get_all('Stock Entry', filters={ 'project': 'City Mall Construction', 'value_difference': ['>', 1000] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "List warehouses with email ending in '@example.com' and contact name starts with 'Ahmed'.",
      "fields": [
        "email_id",
        "owner"
      ]
    },
    "output": "frappe.get_all('Warehouse', filters={ 'email_id': ['like', '%@example.com'], 'owner': ['like', 'Ahmed%'] }, fields=['warehouse_name'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Find all warehouses created by 'admin@erpgulf.com' with state 'Doha'.",
      "fields": [
        "owner",
        "state"
      ]
    },
    "output": "frappe.get_list('Warehouse', filters={ 'owner': 'admin@erpgulf.com', 'state': 'Doha' }, fields=['warehouse_name', 'state'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Show all top-level warehouses (no parent) for company 'SteelMart'.",
      "fields": [
        "parent_warehouse",
        "company"
      ]
    },
    "output": "frappe.get_list('Warehouse', filters={ 'parent_warehouse': '', 'company': 'SteelMart' }, fields=['parent_warehouse', 'company'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which warehouses are grouped and also rejected warehouses?",
      "fields": [
        "is_group",
        "is_rejected_warehouse"
      ]
    },
    "output": "frappe.get_all('Warehouse', filters={ 'is_group': 1, 'is_rejected_warehouse': 1 }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "List warehouses with address on 'Industrial Zone' in city 'Umm Salal'.",
      "fields": [
        "address_line_1",
        "city"
      ]
    },
    "output": "frappe.get_all('Warehouse', filters={ 'address_line_1': 'Industrial Zone', 'city': 'Umm Salal' }, fields=['address_line_1'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Show warehouses where both phone and mobile numbers are missing.",
      "fields": [
        "phone_no",
        "mobile_no"
      ]
    },
    "output": "frappe.get_all('Warehouse', filters={ 'phone_no': '', 'mobile_no': '' }, fields=['warehouse_name'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Find all disabled warehouses that were created before Jan 1, 2023.",
      "fields": [
        "disabled",
        "creation"
      ]
    },
    "output": "frappe.get_list('Warehouse', filters={ 'disabled': 1, 'creation': ['<', '2023-01-01'] }, fields=['warehouse_name', 'creation'])"
  },
  {
    "input": {
      "doctype": "Item Attribute Value",
      "question": "Is there a place to manage values like 'Cotton' or 'Silk' under the Material attribute?",
      "fields": [
        "attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Attribute Value', filters={'attribute_value': ['in', ['Cotton', 'Silk']]}, fields=['attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "Where can I assign the value 'XL' to the attribute 'Size' for a clothing item?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', filters={'item_attribute': 'Size', 'item_attribute_value': 'XL'}, fields=['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "How do I map the attribute 'Size' to 'Large' for a variant of an item?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', filters={'item_attribute': 'Size', 'item_attribute_value': 'Large'}, fields=['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "Which form lets me assign a value to an attribute like 'Length' for a product?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', filters={'item_attribute': 'Length'}, fields=['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "Where can I assign the value 'XL' to the attribute 'Size' for a clothing item?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', filters={'item_attribute': 'Size', 'item_attribute_value': 'XL'}, fields=['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Attribute Value",
      "question": "Where can I add new values like 'Red', 'Blue', or 'Green' for the color attribute?",
      "fields": [
        "attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Attribute Value', filters={'attribute_value': ['in', ['Red', 'Blue', 'Green']]}, fields=['attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Attribute Value",
      "question": "I want to define possible size options like S, M, L for items. Which doctype should I use?",
      "fields": [
        "attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Attribute Value', filters={'attribute_value': ['in', ['S', 'M', 'L']]}, fields=['attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Attribute Value",
      "question": "How can I specify the abbreviation for an attribute value like XL for Extra Large?",
      "fields": [
        "attribute_value",
        "abbr"
      ]
    },
    "output": "frappe.get_value('Item Attribute Value', {'attribute_value': 'XL'}, ['attribute_value', 'abbr'])"
  },
  {
    "input": {
      "doctype": "Item Attribute Value",
      "question": "Which form lets me set the short code or abbreviation for each attribute value?",
      "fields": [
        "attribute_value",
        "abbr"
      ]
    },
    "output": "frappe.get_list('Item Attribute Value', fields=['attribute_value', 'abbr'])"
  },
  {
    "input": {
      "doctype": "Item Attribute Value",
      "question": "Is there a place to manage values like 'Cotton' or 'Silk' under the Material attribute?",
      "fields": [
        "attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Attribute Value', filters={'attribute_value': ['in', ['Cotton', 'Silk']]}, fields=['attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Attribute Value",
      "question": "Where do I store the actual values that belong to item attributes in ERPNext?",
      "fields": [
        "attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Attribute Value', fields=['attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Attribute Value",
      "question": "Can I update or edit the abbreviation linked to a specific attribute value?",
      "fields": [
        "attribute_value",
        "abbr"
      ]
    },
    "output": "frappe.get_value('Item Attribute Value', {'attribute_value': 'XL'}, ['abbr'])"
  },
  {
    "input": {
      "doctype": "Item Attribute Value",
      "question": "What doctype should I use to maintain all the allowed values for an item attribute?",
      "fields": [
        "attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Attribute Value', fields=['attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Attribute Value",
      "question": "How do I make sure the attribute value 'XL' is available for product variants?",
      "fields": [
        "attribute_value"
      ]
    },
    "output": "frappe.get_value('Item Attribute Value', {'attribute_value': 'XL'}, ['attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Attribute Value",
      "question": "Where do I manage a list of attribute values used for item variants?",
      "fields": [
        "attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Attribute Value', fields=['attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Attribute Value",
      "question": "If I need to add a new fabric type like 'Denim' to an attribute, which doctype should I modify?",
      "fields": [
        "attribute_value"
      ]
    },
    "output": "frappe.get_value('Item Attribute Value', {'attribute_value': 'Denim'}, ['attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "How can I specify the size or color for an item variant?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', {'item_attribute': 'Color'}, ['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "Where do I link item attributes like 'Material' to their values for each variant?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', {'item_attribute': 'Material'}, ['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "I want to define different variants of a T-shirt based on color. Which doctype should I use?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', {'item_attribute': 'Color'}, ['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "How do I map the attribute 'Size' to 'Large' for a variant of an item?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', {'item_attribute': 'Size', 'item_attribute_value': 'Large'}, ['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "Where can I track the internal transfers of an employee across different departments?",
      "fields": [
        "branch",
        "department",
        "designation",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Employee Internal Work History', fields=['branch', 'department', 'designation', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "How can I record an employee\u2019s previous roles within the same company?",
      "fields": [
        "branch",
        "department",
        "designation",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Employee Internal Work History', fields=['branch', 'department', 'designation', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "Which form allows me to log branch changes for an employee over time?",
      "fields": [
        "branch",
        "department",
        "designation",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Employee Internal Work History', fields=['branch', 'department', 'designation', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "Can I see when and where an employee held different designations?",
      "fields": [
        "branch",
        "department",
        "designation",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Employee Internal Work History', fields=['branch', 'department', 'designation', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "Is there a record of the departments an employee worked in since joining?",
      "fields": [
        "branch",
        "department",
        "designation",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Employee Internal Work History', fields=['branch', 'department', 'designation', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "How do I track an employee\u2019s job history within the company including department and dates?",
      "fields": [
        "branch",
        "department",
        "designation",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Employee Internal Work History', fields=['branch', 'department', 'designation', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "Where can I view an employee's timeline of roles and designations internally?",
      "fields": [
        "branch",
        "department",
        "designation",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Employee Internal Work History', fields=['branch', 'department', 'designation', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "Which doctype lets me document an employee\u2019s movement from one branch to another?",
      "fields": [
        "branch",
        "department",
        "designation",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Employee Internal Work History', fields=['branch', 'department', 'designation', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "Can I keep a record of internal department changes for HR auditing purposes?",
      "fields": [
        "branch",
        "department",
        "designation",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Employee Internal Work History', fields=['branch', 'department', 'designation', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "How can I document the companies an employee worked for before joining the organization?",
      "fields": [
        "company_name",
        "designation",
        "salary",
        "address",
        "contact",
        "total_experience"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'salary', 'address', 'contact', 'total_experience'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Where can I record details of the previous jobs an employee held before joining our company?",
      "fields": [
        "company_name",
        "designation",
        "salary",
        "address",
        "contact",
        "total_experience"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'salary', 'address', 'contact', 'total_experience'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Can I track the previous companies an employee worked for, including their salary details?",
      "fields": [
        "company_name",
        "salary",
        "total_experience"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'salary', 'total_experience'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "How can I store the address and contact details of an employee\u2019s previous employers?",
      "fields": [
        "company_name",
        "address",
        "contact"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'address', 'contact'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Where can I document the previous job roles and their associated salaries for an employee?",
      "fields": [
        "company_name",
        "designation",
        "salary"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'salary'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "How can I store an employee\u2019s educational qualifications, including university and degree information?",
      "fields": [
        "school_univ",
        "qualification",
        "level",
        "year_of_passing"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['school_univ', 'qualification', 'level', 'year_of_passing'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "Is there a place to record the major subjects studied by an employee during their education?",
      "fields": [
        "school_univ",
        "maj_opt_subj"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['school_univ', 'maj_opt_subj'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "Where can I record an employee\u2019s grade or percentage for their degree?",
      "fields": [
        "class_per"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['class_per'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "Can I document the year an employee graduated from their university?",
      "fields": [
        "year_of_passing"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['year_of_passing'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "How do I track the educational qualifications of an employee, including their graduation year?",
      "fields": [
        "qualification",
        "year_of_passing"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['qualification', 'year_of_passing'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "How do I track an employee's internal transfer history between different departments?",
      "fields": [
        "branch",
        "department",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "Where can I record the employee's job history within the same organization, including their branch and department?",
      "fields": [
        "branch",
        "department",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Can I track an employee's entire external career history with multiple companies?",
      "fields": [
        "company_name",
        "designation",
        "total_experience"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'total_experience'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "How do I store detailed academic qualifications for an employee including their degree, university, and year?",
      "fields": [
        "qualification",
        "school_univ",
        "year_of_passing"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['qualification', 'school_univ', 'year_of_passing'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Where can I record salary details for an employee\u2019s previous jobs?",
      "fields": [
        "company_name",
        "salary"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'salary'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Can I store the total experience of an employee from their previous employers?",
      "fields": [
        "company_name",
        "total_experience"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'total_experience'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "Where do I store the date range of an employee's internal transfers between different departments?",
      "fields": [
        "department",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['department', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Can I track all the companies an employee worked for, with the start and end dates for each role?",
      "fields": [
        "company_name",
        "designation",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "How can I track the educational qualifications of an employee, including their grade and university?",
      "fields": [
        "qualification",
        "school_univ",
        "class_per"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['qualification', 'school_univ', 'class_per'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "How can I check the available stock for product 'ABC123' in the warehouse?",
      "fields": [
        "item_code",
        "stock_qty",
        "warehouse"
      ]
    },
    "output": "frappe.get_list('Item', {'item_code': 'ABC123'}, ['stock_qty', 'warehouse'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "What is the status and delivery date of the orders placed for 'Product X' in the last quarter?",
      "fields": [
        "status",
        "delivery_date"
      ]
    },
    "output": "frappe.get_list('Purchase Order', {'item': 'Product X', 'date': ['>=', '2023-01-01'], 'date': ['<=', '2023-03-31']}, ['status', 'delivery_date'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Can I find an employee's previous salary details along with the company they worked at?",
      "fields": [
        "company_name",
        "salary"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'salary'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "Which qualification does an employee hold, and from which university did they graduate?",
      "fields": [
        "qualification",
        "school_univ"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['qualification', 'school_univ'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "Where can I track an employee's internal movement across departments with their joining dates?",
      "fields": [
        "department",
        "from_date"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['department', 'from_date'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "How do I record an employee\u2019s previous companies, including job titles and total experience?",
      "fields": [
        "company_name",
        "designation",
        "total_experience"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'total_experience'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Where do I find the total ordered quantity for 'Product Y' across all suppliers?",
      "fields": [
        "item_code",
        "quantity_ordered",
        "supplier"
      ]
    },
    "output": "frappe.get_list('Purchase Order', {'item_code': 'Product Y'}, ['quantity_ordered', 'supplier'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "How can I track the available stock for all products in warehouse 'W-101'?",
      "fields": [
        "item_code",
        "stock_qty",
        "warehouse"
      ]
    },
    "output": "frappe.get_list('Item', {'warehouse': 'W-101'}, ['item_code', 'stock_qty'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "How can I document an employee\u2019s transfer history including start and end dates?",
      "fields": [
        "branch",
        "department",
        "designation",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'designation', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Where can I record an employee\u2019s past work experiences before joining our company?",
      "fields": [
        "company_name",
        "designation",
        "salary",
        "address",
        "contact",
        "total_experience"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'salary', 'address', 'contact', 'total_experience'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "How do I track the previous companies an employee worked for?",
      "fields": [
        "company_name",
        "designation",
        "total_experience"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'total_experience'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Is there a way to store an employee\u2019s total experience from past jobs?",
      "fields": [
        "company_name",
        "total_experience"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'total_experience'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Where can I document the designations held by an employee at previous organizations?",
      "fields": [
        "company_name",
        "designation"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Can I maintain a record of previous salaries drawn by an employee?",
      "fields": [
        "company_name",
        "salary"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'salary'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Which module captures external companies an employee worked with before joining?",
      "fields": [
        "company_name"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "How do I record the address and contact details of an employee\u2019s previous employers?",
      "fields": [
        "company_name",
        "address",
        "contact"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'address', 'contact'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Is there a section to log an employee's entire external career history?",
      "fields": [
        "company_name",
        "designation",
        "total_experience"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'total_experience'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Which doctype stores past job roles and salaries for new hires?",
      "fields": [
        "company_name",
        "designation",
        "salary"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'salary'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "Where can I store an employee\u2019s academic qualifications?",
      "fields": [
        "school_univ",
        "qualification",
        "level",
        "year_of_passing"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['school_univ', 'qualification', 'level', 'year_of_passing'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "How do I track which university an employee graduated from?",
      "fields": [
        "school_univ"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['school_univ'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "Is there a section to capture the level of education for employees?",
      "fields": [
        "level"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['level'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "Can I record the year of passing for each qualification of an employee?",
      "fields": [
        "year_of_passing"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['year_of_passing'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "Where do I enter an employee\u2019s grade or percentage for their degree?",
      "fields": [
        "class_per"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['class_per'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "How can I document the major subjects an employee studied?",
      "fields": [
        "maj_opt_subj"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['maj_opt_subj'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "Which form lets me input graduation and post-graduation details for employees?",
      "fields": [
        "qualification",
        "school_univ"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['qualification', 'school_univ'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "Can I list all academic credentials of a staff member?",
      "fields": [
        "school_univ",
        "qualification",
        "level",
        "year_of_passing"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['school_univ', 'qualification', 'level', 'year_of_passing'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "Where can I maintain records of employees' educational backgrounds?",
      "fields": [
        "school_univ",
        "qualification",
        "level"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['school_univ', 'qualification', 'level'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "Is there a way to track optional subjects studied by an employee?",
      "fields": [
        "maj_opt_subj"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['maj_opt_subj'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "Which module stores school or university names for each employee?",
      "fields": [
        "school_univ"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['school_univ'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "How do I capture employee education details like level, year, and score?",
      "fields": [
        "level",
        "year_of_passing",
        "class_per"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['level', 'year_of_passing', 'class_per'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Can I view all external work experiences of a specific employee in one place?",
      "fields": [
        "company_name",
        "designation",
        "total_experience"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'total_experience'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Where can I list an employee\u2019s last few companies and their designations there?",
      "fields": [
        "company_name",
        "designation"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Which form should I use to record the total number of years an employee worked before joining us?",
      "fields": [
        "company_name",
        "total_experience"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'total_experience'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "Where do I store information about an employee\u2019s past designations within our company?",
      "fields": [
        "branch",
        "department",
        "designation"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'designation'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "I need to track which departments an employee worked in last year. Which module should I use?",
      "fields": [
        "branch",
        "department",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "Which form lets me assign a value to an attribute like 'Length' for a product?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', {'item_attribute': 'Length'}, ['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "How can I check the total number of items ordered for 'Product A' in the last 6 months?",
      "fields": [
        "item_code",
        "quantity_ordered"
      ]
    },
    "output": "frappe.get_list('Purchase Order', {'item_code': 'Product A', 'date': ['>=', '2022-10-01'], 'date': ['<=', '2023-03-31']}, ['quantity_ordered'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "Where can I find all available stock quantities for 'Product B' across warehouses?",
      "fields": [
        "item_code",
        "stock_qty",
        "warehouse"
      ]
    },
    "output": "frappe.get_list('Item', {'item_code': 'Product B'}, ['stock_qty', 'warehouse'])"
  },
  {
    "input": {
      "doctype": "Item",
      "question": "How do I get the total stock available for all products in 'Warehouse A'?",
      "fields": [
        "item_code",
        "stock_qty",
        "warehouse"
      ]
    },
    "output": "frappe.get_list('Item', {'warehouse': 'Warehouse A'}, ['item_code', 'stock_qty'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "Can I list all academic credentials of a staff member?",
      "fields": [
        "school_univ",
        "qualification",
        "level",
        "year_of_passing",
        "class_per",
        "maj_opt_subj"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['school_univ', 'qualification', 'level', 'year_of_passing', 'class_per', 'maj_opt_subj'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "Where can I maintain records of employees' educational backgrounds?",
      "fields": [
        "school_univ",
        "qualification",
        "level",
        "year_of_passing",
        "class_per",
        "maj_opt_subj"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['school_univ', 'qualification', 'level', 'year_of_passing', 'class_per', 'maj_opt_subj'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "Is there a way to track optional subjects studied by an employee?",
      "fields": [
        "maj_opt_subj"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['maj_opt_subj'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "Which module stores school or university names for each employee?",
      "fields": [
        "school_univ"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['school_univ'])"
  },
  {
    "input": {
      "doctype": "Employee Education",
      "question": "How do I capture employee education details like level, year, and score?",
      "fields": [
        "level",
        "year_of_passing",
        "class_per"
      ]
    },
    "output": "frappe.get_list('Employee Education', ['level', 'year_of_passing', 'class_per'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Can I view all external work experiences of a specific employee in one place?",
      "fields": [
        "company_name",
        "designation",
        "total_experience"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation', 'total_experience'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Where can I list an employee\u2019s last few companies and their designations there?",
      "fields": [
        "company_name",
        "designation"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'designation'])"
  },
  {
    "input": {
      "doctype": "Employee External Work History",
      "question": "Which form should I use to record the total number of years an employee worked before joining us?",
      "fields": [
        "company_name",
        "total_experience"
      ]
    },
    "output": "frappe.get_list('Employee External Work History', ['company_name', 'total_experience'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "Where do I store information about an employee\u2019s past designations within our company?",
      "fields": [
        "branch",
        "department",
        "designation",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'designation', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "I need to track which departments an employee worked in last year. Which module should I use?",
      "fields": [
        "branch",
        "department",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "Which form lets me assign a value to an attribute like 'Length' for a product?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', {'item_attribute': 'Length'}, ['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "Where can I manage the specific characteristics for each item version like color or size?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', ['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "Is there a way to configure item variants with selected attributes and their values?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', ['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "How do I record that this jacket variant is made of leather?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', ['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "Which doctype helps link 'Material' as Cotton for a specific product variant?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', {'item_attribute': 'Material', 'item_attribute_value': 'Cotton'}, ['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "Where can I assign the value 'XL' to the attribute 'Size' for a clothing item?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', {'item_attribute': 'Size', 'item_attribute_value': 'XL'}, ['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "I need to store the value of each attribute combination for an item variant. Where do I do that?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', ['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "What do I use to match an attribute like 'Color' with its value like 'Red' for each variant?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', {'item_attribute': 'Color', 'item_attribute_value': 'Red'}, ['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "Where can I track the internal transfers of an employee across different departments?",
      "fields": [
        "branch",
        "department",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "How can I record an employee\u2019s previous roles within the same company?",
      "fields": [
        "branch",
        "department",
        "designation",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'designation', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "Which form allows me to log branch changes for an employee over time?",
      "fields": [
        "branch",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['branch', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "Can I see when and where an employee held different designations?",
      "fields": [
        "branch",
        "department",
        "designation",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'designation', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "Is there a record of the departments an employee worked in since joining?",
      "fields": [
        "branch",
        "department",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "How do I track an employee\u2019s job history within the company including department and dates?",
      "fields": [
        "branch",
        "department",
        "designation",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'designation', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "Where can I view an employee's timeline of roles and designations internally?",
      "fields": [
        "branch",
        "department",
        "designation",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'designation', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "Which doctype lets me document an employee\u2019s movement from one branch to another?",
      "fields": [
        "branch",
        "department",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "Can I keep a record of internal department changes for HR auditing purposes?",
      "fields": [
        "branch",
        "department",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "How can I document an employee\u2019s transfer history including start and end dates?",
      "fields": [
        "branch",
        "department",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "Where do I store information about an employee\u2019s past designations within our company?",
      "fields": [
        "branch",
        "department",
        "designation",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'designation', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Employee Internal Work History",
      "question": "I need to track which departments an employee worked in last year. Which module should I use?",
      "fields": [
        "branch",
        "department",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Employee Internal Work History', ['branch', 'department', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Item Attribute Value",
      "question": "I need to create value options for the 'Style' attribute like 'Modern' and 'Classic'. Where can I do that?",
      "fields": [
        "attribute_value",
        "abbr"
      ]
    },
    "output": "frappe.get_list('Item Attribute Value', {'attribute_value': ['Modern', 'Classic']}, ['attribute_value', 'abbr'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "I need to store the value of each attribute combination for an item variant. Where do I do that?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', ['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant",
      "question": "What do I use to match an attribute like 'Color' with its value like 'Red' for each variant?",
      "fields": [
        "item_attribute",
        "item_attribute_value"
      ]
    },
    "output": "frappe.get_list('Item Variant', {'item_attribute': 'Color', 'item_attribute_value': 'Red'}, ['item_attribute', 'item_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Website Specification",
      "question": "Can I show multiple labeled descriptions under an item\u2019s product page?",
      "fields": [
        "item",
        "description"
      ]
    },
    "output": "frappe.get_list('Item Website Specification', ['item', 'description'])"
  },
  {
    "input": {
      "doctype": "Item Website Specification",
      "question": "Where can I edit the information users see in the specification tab on my item webpage?",
      "fields": [
        "item",
        "description"
      ]
    },
    "output": "frappe.get_list('Item Website Specification', ['item', 'description'])"
  },
  {
    "input": {
      "doctype": "Item Website Specification",
      "question": "Is there a field to hold website content describing product features for each item?",
      "fields": [
        "item",
        "description"
      ]
    },
    "output": "frappe.get_list('Item Website Specification', ['item', 'description'])"
  },
  {
    "input": {
      "doctype": "Monthly Distribution Percentage",
      "question": "I need to allocate 10% of budget to June. Where do I do that?",
      "fields": [
        "month",
        "percentage_allocation"
      ]
    },
    "output": "frappe.get_list('Monthly Distribution Percentage', {'month': 'June'}, ['month', 'percentage_allocation'])"
  },
  {
    "input": {
      "doctype": "Monthly Distribution Percentage",
      "question": "How to assign monthly weights for a yearly financial plan?",
      "fields": [
        "month",
        "percentage_allocation"
      ]
    },
    "output": "frappe.get_list('Monthly Distribution Percentage', ['month', 'percentage_allocation'])"
  },
  {
    "input": {
      "doctype": "Monthly Distribution Percentage",
      "question": "Which doctype is used for defining each month's allocation rate?",
      "fields": [
        "month",
        "percentage_allocation"
      ]
    },
    "output": "frappe.get_list('Monthly Distribution Percentage', ['month', 'percentage_allocation'])"
  },
  {
    "input": {
      "doctype": "Price List Country",
      "question": "Which doctype helps apply different pricing by geography?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.get_list('Price List Country', ['country'])"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "Where can I configure a new unit category for digital items?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.get_list('UOM Category', ['category_name'])"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "How do I manage categories of UOMs in ERPNext?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.get_list('UOM Category', ['category_name'])"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "What category is used for length measurements?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.get_list('UOM Category', ['category_name'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "Which requirements have already been fulfilled for this contract?",
      "fields": [
        "fulfilled",
        "requirement"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 1}, ['fulfilled', 'requirement'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "Can I check off fulfilled tasks in the contract fulfilment checklist?",
      "fields": [
        "fulfilled",
        "requirement"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 1}, ['fulfilled', 'requirement'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "Where can I review all pending contract requirements?",
      "fields": [
        "fulfilled",
        "requirement"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 0}, ['fulfilled', 'requirement'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "List all the notes added for unfulfilled contract requirements.",
      "fields": [
        "fulfilled",
        "requirement",
        "notes"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 0}, ['requirement', 'notes'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "How do I update notes for a contract requirement that\u2019s still pending?",
      "fields": [
        "fulfilled",
        "requirement",
        "notes"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 0}, ['requirement', 'notes'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "Which contract checklist items have been marked as fulfilled?",
      "fields": [
        "fulfilled",
        "requirement"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 1}, ['fulfilled', 'requirement'])"
  },
  {
    "input": {
      "doctype": "Projects Settings",
      "question": "Can we allow scheduling overlaps for workstations in project tasks?",
      "fields": [
        "timesheet_sb",
        "ignore_workstation_time_overlap"
      ]
    },
    "output": "frappe.get_value('Projects Settings', ['ignore_workstation_time_overlap'])"
  },
  {
    "input": {
      "doctype": "Projects Settings",
      "question": "How do I ignore user time conflicts during project planning?",
      "fields": [
        "timesheet_sb",
        "ignore_user_time_overlap"
      ]
    },
    "output": "frappe.get_value('Projects Settings', ['ignore_user_time_overlap'])"
  },
  {
    "input": {
      "doctype": "Projects Settings",
      "question": "Where can I toggle settings for employee time overlap in projects?",
      "fields": [
        "timesheet_sb",
        "ignore_employee_time_overlap"
      ]
    },
    "output": "frappe.get_value('Projects Settings', ['ignore_employee_time_overlap'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program Collection",
      "question": "What is the minimum amount a customer needs to spend to enter each loyalty tier?",
      "fields": [
        "tier_name",
        "min_spent"
      ]
    },
    "output": "frappe.get_list('Loyalty Program Collection', ['tier_name', 'min_spent'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program Collection",
      "question": "How is the collection factor calculated for loyalty tiers?",
      "fields": [
        "tier_name",
        "collection_factor"
      ]
    },
    "output": "frappe.get_list('Loyalty Program Collection', ['tier_name', 'collection_factor'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program Collection",
      "question": "List all loyalty program tiers and their required spending.",
      "fields": [
        "tier_name",
        "min_spent"
      ]
    },
    "output": "frappe.get_list('Loyalty Program Collection', ['tier_name', 'min_spent'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program Collection",
      "question": "Which loyalty tier requires the highest total spending?",
      "fields": [
        "tier_name",
        "min_spent"
      ]
    },
    "output": "frappe.get_list('Loyalty Program Collection', ['tier_name', 'min_spent'], {'min_spent': ['>', 0]})"
  },
  {
    "input": {
      "doctype": "Loyalty Program Collection",
      "question": "Can I view all tier names and LP conversion rates in the loyalty program?",
      "fields": [
        "tier_name",
        "collection_factor"
      ]
    },
    "output": "frappe.get_list('Loyalty Program Collection', ['tier_name', 'collection_factor'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program Collection",
      "question": "How many loyalty tiers are defined in the system?",
      "fields": [
        "tier_name"
      ]
    },
    "output": "frappe.get_list('Loyalty Program Collection', ['tier_name'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program Collection",
      "question": "Which tier offers the best collection factor for loyalty points?",
      "fields": [
        "tier_name",
        "collection_factor"
      ]
    },
    "output": "frappe.get_list('Loyalty Program Collection', {'collection_factor': ['>', 0]}, ['tier_name', 'collection_factor'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program Collection",
      "question": "Show me loyalty tiers based on customer spending thresholds.",
      "fields": [
        "tier_name",
        "min_spent"
      ]
    },
    "output": "frappe.get_list('Loyalty Program Collection', ['tier_name', 'min_spent'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program Collection",
      "question": "Is there a loyalty program tier with no minimum spend?",
      "fields": [
        "tier_name",
        "min_spent"
      ]
    },
    "output": "frappe.get_list('Loyalty Program Collection', {'min_spent': 0}, ['tier_name', 'min_spent'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program Collection",
      "question": "List loyalty program tiers and how much spending is needed for each.",
      "fields": [
        "tier_name",
        "min_spent"
      ]
    },
    "output": "frappe.get_list('Loyalty Program Collection', ['tier_name', 'min_spent'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program Collection",
      "question": "What\u2019s the LP collection rate for each loyalty tier?",
      "fields": [
        "tier_name",
        "collection_factor"
      ]
    },
    "output": "frappe.get_list('Loyalty Program Collection', ['tier_name', 'collection_factor'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program Collection",
      "question": "Give me details of loyalty program tiers and collection multipliers.",
      "fields": [
        "tier_name",
        "collection_factor"
      ]
    },
    "output": "frappe.get_list('Loyalty Program Collection', ['tier_name', 'collection_factor'])"
  },
  {
    "input": {
      "doctype": "Share Balance",
      "question": "What is the current share balance for each share type?",
      "fields": [
        "share_type",
        "no_of_shares"
      ]
    },
    "output": "frappe.get_list('Share Balance', ['share_type', 'no_of_shares'])"
  },
  {
    "input": {
      "doctype": "Share Balance",
      "question": "Show me the range of share numbers and total amount issued.",
      "fields": [
        "share_type",
        "from_no",
        "to_no",
        "amount"
      ]
    },
    "output": "frappe.get_list('Share Balance', ['share_type', 'from_no', 'to_no', 'amount'])"
  },
  {
    "input": {
      "doctype": "Share Balance",
      "question": "List all shares that are marked as purchased.",
      "fields": [
        "share_type",
        "current_state"
      ]
    },
    "output": "frappe.get_list('Share Balance', {'current_state': 'purchased'}, ['share_type', 'current_state'])"
  },
  {
    "input": {
      "doctype": "Share Balance",
      "question": "How many shares were issued for each share type and at what rate?",
      "fields": [
        "share_type",
        "no_of_shares",
        "rate"
      ]
    },
    "output": "frappe.get_list('Share Balance', ['share_type', 'no_of_shares', 'rate'])"
  },
  {
    "input": {
      "doctype": "Share Balance",
      "question": "Can I see share balances specific to companies only?",
      "fields": [
        "share_type",
        "is_company",
        "no_of_shares"
      ]
    },
    "output": "frappe.get_list('Share Balance', {'is_company': 1}, ['share_type', 'no_of_shares'])"
  },
  {
    "input": {
      "doctype": "Share Balance",
      "question": "What's the total number of shares issued in the system?",
      "fields": [
        "no_of_shares"
      ]
    },
    "output": "frappe.get_list('Share Balance', ['no_of_shares'])"
  },
  {
    "input": {
      "doctype": "Share Balance",
      "question": "Do we maintain share rate and count details for every share type?",
      "fields": [
        "share_type",
        "rate",
        "no_of_shares"
      ]
    },
    "output": "frappe.get_list('Share Balance', ['share_type', 'rate', 'no_of_shares'])"
  },
  {
    "input": {
      "doctype": "Share Balance",
      "question": "Are there any shares in the system currently in issued state?",
      "fields": [
        "share_type",
        "current_state"
      ]
    },
    "output": "frappe.get_list('Share Balance', {'current_state': 'issued'}, ['share_type', 'current_state'])"
  },
  {
    "input": {
      "doctype": "Share Balance",
      "question": "Where can I find the starting and ending share numbers for each type?",
      "fields": [
        "share_type",
        "from_no",
        "to_no"
      ]
    },
    "output": "frappe.get_list('Share Balance', ['share_type', 'from_no', 'to_no'])"
  },
  {
    "input": {
      "doctype": "Share Balance",
      "question": "List all share types along with their current state and amount.",
      "fields": [
        "share_type",
        "current_state",
        "amount"
      ]
    },
    "output": "frappe.get_list('Share Balance', ['share_type', 'current_state', 'amount'])"
  },
  {
    "input": {
      "doctype": "Share Balance",
      "question": "How is the share value calculated from number and rate?",
      "fields": [
        "no_of_shares",
        "rate",
        "amount"
      ]
    },
    "output": "frappe.get_list('Share Balance', ['no_of_shares', 'rate', 'amount'])"
  },
  {
    "input": {
      "doctype": "Share Balance",
      "question": "Do we have a record of company-owned shares separately?",
      "fields": [
        "is_company",
        "share_type",
        "no_of_shares"
      ]
    },
    "output": "frappe.get_list('Share Balance', {'is_company': 1}, ['share_type', 'no_of_shares'])"
  },
  {
    "input": {
      "doctype": "Opportunity Type",
      "question": "What are the different opportunity types defined in our system?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Opportunity Type', ['description'])"
  },
  {
    "input": {
      "doctype": "Opportunity Type",
      "question": "Can I see the description of each opportunity type?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Opportunity Type', ['description'])"
  },
  {
    "input": {
      "doctype": "Opportunity Type",
      "question": "List all types of opportunities used in our CRM module.",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Opportunity Type', ['description'])"
  },
  {
    "input": {
      "doctype": "Opportunity Type",
      "question": "How do we categorize different business opportunities?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Opportunity Type', ['description'])"
  },
  {
    "input": {
      "doctype": "Opportunity Type",
      "question": "Where do I define or manage opportunity categories?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Opportunity Type', ['description'])"
  },
  {
    "input": {
      "doctype": "Opportunity Type",
      "question": "Which opportunity types are currently available in the system?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Opportunity Type', ['description'])"
  },
  {
    "input": {
      "doctype": "Opportunity Type",
      "question": "Do we have a type defined for service-related opportunities?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Opportunity Type', {'description': 'service-related'}, ['description'])"
  },
  {
    "input": {
      "doctype": "Opportunity Type",
      "question": "Can I customize the descriptions for each opportunity type?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Opportunity Type', ['description'])"
  },
  {
    "input": {
      "doctype": "Opportunity Type",
      "question": "Is there a section where I can maintain opportunity labels?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Opportunity Type', ['description'])"
  },
  {
    "input": {
      "doctype": "Opportunity Type",
      "question": "How do I manage predefined opportunity types in our CRM?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Opportunity Type', ['description'])"
  },
  {
    "input": {
      "doctype": "Opportunity Type",
      "question": "Are opportunity types linked to any specific workflow?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Opportunity Type', ['description'])"
  },
  {
    "input": {
      "doctype": "Opportunity Type",
      "question": "What\u2019s the purpose of descriptions under each opportunity type?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Opportunity Type', ['description'])"
  },
  {
    "input": {
      "doctype": "Projects Settings",
      "question": "Are workstation schedule clashes ignored in our project setup?",
      "fields": [
        "ignore_workstation_time_overlap"
      ]
    },
    "output": "frappe.get_value('Projects Settings', ['ignore_workstation_time_overlap'])"
  },
  {
    "input": {
      "doctype": "Projects Settings",
      "question": "Show project settings related to time conflicts for users and employees.",
      "fields": [
        "ignore_user_time_overlap",
        "ignore_employee_time_overlap"
      ]
    },
    "output": "frappe.get_value('Projects Settings', ['ignore_user_time_overlap', 'ignore_employee_time_overlap'])"
  },
  {
    "input": {
      "doctype": "Projects Settings",
      "question": "Can we allow overlapping bookings for employees in project tasks?",
      "fields": [
        "ignore_employee_time_overlap"
      ]
    },
    "output": "frappe.get_value('Projects Settings', ['ignore_employee_time_overlap'])"
  },
  {
    "input": {
      "doctype": "Projects Settings",
      "question": "Do project settings allow multiple users to be scheduled at the same time?",
      "fields": [
        "ignore_user_time_overlap"
      ]
    },
    "output": "frappe.get_value('Projects Settings', ['ignore_user_time_overlap'])"
  },
  {
    "input": {
      "doctype": "Projects Settings",
      "question": "Is employee time overlap restricted in project configurations?",
      "fields": [
        "ignore_employee_time_overlap"
      ]
    },
    "output": "frappe.get_value('Projects Settings', ['ignore_employee_time_overlap'])"
  },
  {
    "input": {
      "doctype": "Projects Settings",
      "question": "Where do I configure project-level scheduling overlaps for users?",
      "fields": [
        "ignore_user_time_overlap"
      ]
    },
    "output": "frappe.get_value('Projects Settings', ['ignore_user_time_overlap'])"
  },
  {
    "input": {
      "doctype": "Projects Settings",
      "question": "Can I prevent time clashes for workstations in project operations?",
      "fields": [
        "ignore_workstation_time_overlap"
      ]
    },
    "output": "frappe.get_value('Projects Settings', ['ignore_workstation_time_overlap'])"
  },
  {
    "input": {
      "doctype": "Projects Settings",
      "question": "What are the overlap rules set for project resource planning?",
      "fields": [
        "ignore_user_time_overlap",
        "ignore_employee_time_overlap",
        "ignore_workstation_time_overlap"
      ]
    },
    "output": "frappe.get_value('Projects Settings', ['ignore_user_time_overlap', 'ignore_employee_time_overlap', 'ignore_workstation_time_overlap'])"
  },
  {
    "input": {
      "doctype": "Projects Settings",
      "question": "Is it possible to ignore workstation overlap in projects?",
      "fields": [
        "ignore_workstation_time_overlap"
      ]
    },
    "output": "frappe.get_value('Projects Settings', ['ignore_workstation_time_overlap'])"
  },
  {
    "input": {
      "doctype": "Mode of Payment Account",
      "question": "What is the default account used for payments in our company?",
      "fields": [
        "company",
        "default_account"
      ]
    },
    "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
  },
  {
    "input": {
      "doctype": "Mode of Payment Account",
      "question": "Show me the mapping between company and its payment account.",
      "fields": [
        "company",
        "default_account"
      ]
    },
    "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
  },
  {
    "input": {
      "doctype": "Mode of Payment Account",
      "question": "Where can I set the default account for a specific mode of payment?",
      "fields": [
        "company",
        "default_account"
      ]
    },
    "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
  },
  {
    "input": {
      "doctype": "Mode of Payment Account",
      "question": "Which account is linked to our payment gateway for PixelWaltz Ltd.?",
      "fields": [
        "company",
        "default_account"
      ]
    },
    "output": "frappe.get_list('Mode of Payment Account', {'company': 'PixelWaltz Ltd.'}, ['company', 'default_account'])"
  },
  {
    "input": {
      "doctype": "Mode of Payment Account",
      "question": "Can I assign a different default account per company for payments?",
      "fields": [
        "company",
        "default_account"
      ]
    },
    "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
  },
  {
    "input": {
      "doctype": "Mode of Payment Account",
      "question": "Is there a separate default payment account for each business unit?",
      "fields": [
        "company",
        "default_account"
      ]
    },
    "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
  },
  {
    "input": {
      "doctype": "Mode of Payment Account",
      "question": "How are default payment accounts configured per company?",
      "fields": [
        "company",
        "default_account"
      ]
    },
    "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
  },
  {
    "input": {
      "doctype": "Mode of Payment Account",
      "question": "List all mode of payment accounts set up for my organization.",
      "fields": [
        "company",
        "default_account"
      ]
    },
    "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
  },
  {
    "input": {
      "doctype": "Mode of Payment Account",
      "question": "Do we have default accounts assigned for each payment mode?",
      "fields": [
        "company",
        "default_account"
      ]
    },
    "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
  },
  {
    "input": {
      "doctype": "Mode of Payment Account",
      "question": "Can I configure payment accounts for multiple companies?",
      "fields": [
        "company",
        "default_account"
      ]
    },
    "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
  },
  {
    "input": {
      "doctype": "Mode of Payment Account",
      "question": "Where are company-specific payment accounts managed?",
      "fields": [
        "company",
        "default_account"
      ]
    },
    "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
  },
  {
    "input": {
      "doctype": "Mode of Payment Account",
      "question": "Is there a mapping between company and payment ledger?",
      "fields": [
        "company",
        "default_account"
      ]
    },
    "output": "frappe.get_list('Mode of Payment Account', ['company', 'default_account'])"
  },
  {
    "input": {
      "doctype": "Item Variant Settings",
      "question": "Where can I prevent automatic updates to item variants on save?",
      "fields": [
        "do_not_update_variants"
      ]
    },
    "output": "frappe.get_value('Item Variant Settings', ['do_not_update_variants'])"
  },
  {
    "input": {
      "doctype": "Item Variant Settings",
      "question": "How do I allow renaming of attribute values in item variants?",
      "fields": [
        "allow_rename_attribute_value"
      ]
    },
    "output": "frappe.get_value('Item Variant Settings', ['allow_rename_attribute_value'])"
  },
  {
    "input": {
      "doctype": "Item Variant Settings",
      "question": "Is there a way to stop variant updates during item changes?",
      "fields": [
        "do_not_update_variants"
      ]
    },
    "output": "frappe.get_value('Item Variant Settings', ['do_not_update_variants'])"
  },
  {
    "input": {
      "doctype": "Item Variant Settings",
      "question": "Which settings control behavior of item variants in ERPNext?",
      "fields": [
        "do_not_update_variants",
        "allow_rename_attribute_value",
        "copy_fields_to_variant"
      ]
    },
    "output": "frappe.get_value('Item Variant Settings', ['do_not_update_variants', 'allow_rename_attribute_value', 'copy_fields_to_variant'])"
  },
  {
    "input": {
      "doctype": "Item Variant Settings",
      "question": "Where do I configure allowed variant fields for item templates?",
      "fields": [
        "fields"
      ]
    },
    "output": "frappe.get_value('Item Variant Settings', ['fields'])"
  },
  {
    "input": {
      "doctype": "Item Variant Settings",
      "question": "What happens if I uncheck auto-update for item variants?",
      "fields": [
        "do_not_update_variants"
      ]
    },
    "output": "frappe.get_value('Item Variant Settings', ['do_not_update_variants'])"
  },
  {
    "input": {
      "doctype": "Item Variant Settings",
      "question": "Can I manage which fields affect item variant generation?",
      "fields": [
        "copy_fields_to_variant"
      ]
    },
    "output": "frappe.get_value('Item Variant Settings', ['copy_fields_to_variant'])"
  },
  {
    "input": {
      "doctype": "Item Variant Settings",
      "question": "Where can I view or change item variant field mappings?",
      "fields": [
        "fields"
      ]
    },
    "output": "frappe.get_value('Item Variant Settings', ['fields'])"
  },
  {
    "input": {
      "doctype": "Item Variant Settings",
      "question": "How to avoid triggering variant update logic in item master?",
      "fields": [
        "do_not_update_variants"
      ]
    },
    "output": "frappe.get_value('Item Variant Settings', ['do_not_update_variants'])"
  },
  {
    "input": {
      "doctype": "Item Variant Settings",
      "question": "Can we customize field selection logic for item variants?",
      "fields": [
        "fields"
      ]
    },
    "output": "frappe.get_value('Item Variant Settings', ['fields'])"
  },
  {
    "input": {
      "doctype": "Item Variant Settings",
      "question": "Which settings influence how variants behave after attribute changes?",
      "fields": [
        "do_not_update_variants"
      ]
    },
    "output": "frappe.get_value('Item Variant Settings', ['do_not_update_variants'])"
  },
  {
    "input": {
      "doctype": "Item Variant Settings",
      "question": "Where do I set which fields update across item variants?",
      "fields": [
        "copy_fields_to_variant"
      ]
    },
    "output": "frappe.get_value('Item Variant Settings', ['copy_fields_to_variant'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "Can I see the contract checklist that was amended from another version?",
      "fields": [
        "amended_from",
        "requirement"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'amended_from': 1}, ['amended_from', 'requirement'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "Are there any notes attached to the completed contract tasks?",
      "fields": [
        "fulfilled",
        "cb_notes",
        "notes"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 1}, ['fulfilled', 'cb_notes', 'notes'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "Is there a way to track checklist items carried over from a previous contract?",
      "fields": [
        "amended_from",
        "requirement"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'amended_from': 1}, ['amended_from', 'requirement'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "Show me the full contract fulfilment checklist and their statuses.",
      "fields": [
        "requirement",
        "fulfilled",
        "notes"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', ['requirement', 'fulfilled', 'notes'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "What checklist items are still pending fulfilment for the contract?",
      "fields": [
        "requirement",
        "fulfilled"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 0}, ['requirement', 'fulfilled'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "Which contract fulfilment entries have no notes added yet?",
      "fields": [
        "requirement",
        "notes"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'notes': ''}, ['requirement', 'notes'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "Which requirements have already been fulfilled for this contract?",
      "fields": [
        "fulfilled",
        "requirement"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 1}, ['fulfilled', 'requirement'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "Can I check off fulfilled tasks in the contract fulfilment checklist?",
      "fields": [
        "fulfilled",
        "cb_notes"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 1}, ['fulfilled', 'cb_notes'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "Where can I review all pending contract requirements?",
      "fields": [
        "requirement",
        "fulfilled"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 0}, ['requirement', 'fulfilled'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "List all the notes added for unfulfilled contract requirements.",
      "fields": [
        "notes",
        "requirement"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 0}, ['notes', 'requirement'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "How do I update notes for a contract requirement that\u2019s still pending?",
      "fields": [
        "notes",
        "fulfilled",
        "requirement"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 0}, ['notes', 'fulfilled', 'requirement'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "Which contract checklist items have been marked as fulfilled?",
      "fields": [
        "requirement",
        "fulfilled"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 1}, ['requirement', 'fulfilled'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "Can I see the contract checklist that was amended from another version?",
      "fields": [
        "amended_from",
        "requirement"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'amended_from': 1}, ['amended_from', 'requirement'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "Are there any notes attached to the completed contract tasks?",
      "fields": [
        "fulfilled",
        "cb_notes",
        "notes"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 1}, ['fulfilled', 'cb_notes', 'notes'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "Is there a way to track checklist items carried over from a previous contract?",
      "fields": [
        "amended_from",
        "requirement"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'amended_from': 1}, ['amended_from', 'requirement'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "Show me the full contract fulfilment checklist and their statuses.",
      "fields": [
        "requirement",
        "fulfilled",
        "notes"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', ['requirement', 'fulfilled', 'notes'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "What checklist items are still pending fulfilment for the contract?",
      "fields": [
        "requirement",
        "fulfilled"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'fulfilled': 0}, ['requirement', 'fulfilled'])"
  },
  {
    "input": {
      "doctype": "Contract Fulfilment Checklist",
      "question": "Which contract fulfilment entries have no notes added yet?",
      "fields": [
        "notes",
        "fulfilled"
      ]
    },
    "output": "frappe.get_list('Contract Fulfilment Checklist', {'notes': ''}, ['notes', 'fulfilled'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "What are the default fulfilment terms included in contract templates?",
      "fields": [
        "fulfilment_terms"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['fulfilment_terms'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "List all predefined requirements added in the contract template.",
      "fields": [
        "requirements"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['requirements'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "Can I define custom requirements for contract templates?",
      "fields": [
        "custom_requirements"
      ]
    },
    "output": "frappe.get_value('Contract Template Fulfilment Terms', ['custom_requirements'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "Where do I add fulfilment terms while designing a contract template?",
      "fields": [
        "fulfilment_terms"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['fulfilment_terms'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "Which section stores fulfilment requirements for contract templates?",
      "fields": [
        "section"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['section'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "Is there a way to view all requirement terms tied to templates?",
      "fields": [
        "requirement_terms"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['requirement_terms'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "How do I reuse requirement terms across different contract templates?",
      "fields": [
        "requirement_terms"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['requirement_terms'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "Can I copy fulfilment terms from one contract template to another?",
      "fields": [
        "fulfilment_terms"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['fulfilment_terms'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "What requirement terms are automatically included in contracts?",
      "fields": [
        "requirement_terms"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['requirement_terms'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "Show me the standard terms added in our contract template setups.",
      "fields": [
        "standard_terms"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['standard_terms'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "Where are template-specific contract fulfilment terms managed?",
      "fields": [
        "template_specific_terms"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['template_specific_terms'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "How are the contract template terms different from checklist items?",
      "fields": [
        "contract_terms",
        "checklist_items"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['contract_terms', 'checklist_items'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "What are the default fulfilment terms included in contract templates?",
      "fields": [
        "fulfilment_terms"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['fulfilment_terms'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "List all predefined requirements added in the contract template.",
      "fields": [
        "predefined_requirements"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['predefined_requirements'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "Can I define custom requirements for contract templates?",
      "fields": [
        "custom_requirements"
      ]
    },
    "output": "frappe.get_value('Contract Template Fulfilment Terms', ['custom_requirements'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "Where do I add fulfilment terms while designing a contract template?",
      "fields": [
        "fulfilment_terms"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['fulfilment_terms'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "Which section stores fulfilment requirements for contract templates?",
      "fields": [
        "section"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['section'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "Is there a way to view all requirement terms tied to templates?",
      "fields": [
        "requirement_terms"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['requirement_terms'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "How do I reuse requirement terms across different contract templates?",
      "fields": [
        "requirement_terms"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['requirement_terms'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "Can I copy fulfilment terms from one contract template to another?",
      "fields": [
        "fulfilment_terms"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['fulfilment_terms'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "What requirement terms are automatically included in contracts?",
      "fields": [
        "requirement_terms"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['requirement_terms'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "Show me the standard terms added in our contract template setups.",
      "fields": [
        "standard_terms"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['standard_terms'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "Where are template-specific contract fulfilment terms managed?",
      "fields": [
        "template_specific_terms"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['template_specific_terms'])"
  },
  {
    "input": {
      "doctype": "Contract Template Fulfilment Terms",
      "question": "How are the contract template terms different from checklist items?",
      "fields": [
        "contract_terms",
        "checklist_items"
      ]
    },
    "output": "frappe.get_list('Contract Template Fulfilment Terms', ['contract_terms', 'checklist_items'])"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "Which UOM categories are mandatory during UOM conversion?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.get_list('UOM Category', {'mandatory': 1}, ['category_name'])"
  },
  {
    "input": {
      "doctype": "UOM Category",
      "question": "Can I rename an existing UOM category without affecting items?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.get_list('UOM Category', ['category_name'])"
  },
  {
    "input": {
      "doctype": "Party Type",
      "question": "How can I configure party types like Customer or Supplier for transactions?",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.get_list('Party Type', ['party_type', 'account_type'])"
  },
  {
    "input": {
      "doctype": "Party Type",
      "question": "Which party types are linked with the Payable account type?",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.get_list('Party Type', {'account_type': 'Payable'}, ['party_type', 'account_type'])"
  },
  {
    "input": {
      "doctype": "Party Type",
      "question": "Show all party types set up in the ERP system.",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.get_list('Party Type', ['party_type', 'account_type'])"
  },
  {
    "input": {
      "doctype": "Party Type",
      "question": "Is there a party type defined for Employees in the chart of accounts?",
      "fields": [
        "party_type"
      ]
    },
    "output": "frappe.get_list('Party Type', {'party_type': 'Employee'}, ['party_type'])"
  },
  {
    "input": {
      "doctype": "Party Type",
      "question": "Which party type is associated with the Receivable account group?",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.get_list('Party Type', {'account_type': 'Receivable'}, ['party_type', 'account_type'])"
  },
  {
    "input": {
      "doctype": "Party Type",
      "question": "Can I map a new party type to both Payable and Receivable accounts?",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.get_list('Party Type', {'account_type': ['Payable', 'Receivable']}, ['party_type', 'account_type'])"
  },
  {
    "input": {
      "doctype": "Party Type",
      "question": "Where do I define account types for different party types?",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.get_list('Party Type', ['party_type', 'account_type'])"
  },
  {
    "input": {
      "doctype": "Party Type",
      "question": "Do we have any party type other than Customer or Supplier configured?",
      "fields": [
        "party_type"
      ]
    },
    "output": "frappe.get_list('Party Type', {'party_type': {'$nin': ['Customer', 'Supplier']}}, ['party_type'])"
  },
  {
    "input": {
      "doctype": "Party Type",
      "question": "What account type is assigned to party type 'Shareholder'?",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.get_list('Party Type', {'party_type': 'Shareholder'}, ['party_type', 'account_type'])"
  },
  {
    "input": {
      "doctype": "Party Type",
      "question": "List all party types and their associated account types.",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.get_list('Party Type', ['party_type', 'account_type'])"
  },
  {
    "input": {
      "doctype": "Party Type",
      "question": "How is the default account type decided for each party type?",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.get_list('Party Type', ['party_type', 'account_type'])"
  },
  {
    "input": {
      "doctype": "Party Type",
      "question": "Where can I edit the account type for a specific party type?",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.get_list('Party Type', ['party_type', 'account_type'])"
  },
  {
    "input": {
      "doctype": "Routing",
      "question": "Where can I define or manage the routing steps for manufacturing operations?",
      "fields": [
        "routing_name",
        "operations"
      ]
    },
    "output": "frappe.get_list('Routing', ['routing_name', 'operations'])"
  },
  {
    "input": {
      "doctype": "Routing",
      "question": "Can I see the list of routings that are currently disabled?",
      "fields": [
        "routing_name",
        "disabled"
      ]
    },
    "output": "frappe.get_list('Routing', {'disabled': 1}, ['routing_name', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Routing",
      "question": "What is the routing name used for assembling the new generator unit?",
      "fields": [
        "routing_name"
      ]
    },
    "output": "frappe.get_list('Routing', {'routing_name': 'Generator Assembly'}, ['routing_name'])"
  },
  {
    "input": {
      "doctype": "Routing",
      "question": "Which document stores the operation flow used in a BOM process?",
      "fields": [
        "operations"
      ]
    },
    "output": "frappe.get_list('Routing', ['operations'])"
  },
  {
    "input": {
      "doctype": "Routing",
      "question": "Is there a way to deactivate a routing without deleting it?",
      "fields": [
        "routing_name",
        "disabled"
      ]
    },
    "output": "frappe.get_list('Routing', {'disabled': 1}, ['routing_name', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Routing",
      "question": "Where do I view all BOM operations linked to a specific routing?",
      "fields": [
        "routing_name",
        "operations"
      ]
    },
    "output": "frappe.get_list('Routing', ['routing_name', 'operations'])"
  },
  {
    "input": {
      "doctype": "Routing",
      "question": "What ERP record helps organize the sequence of manufacturing tasks?",
      "fields": [
        "routing_name",
        "operations"
      ]
    },
    "output": "frappe.get_list('Routing', ['routing_name', 'operations'])"
  },
  {
    "input": {
      "doctype": "Routing",
      "question": "Show me the routing used for our engine assembly line.",
      "fields": [
        "routing_name"
      ]
    },
    "output": "frappe.get_list('Routing', {'routing_name': 'Engine Assembly'}, ['routing_name'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "Where can I define the types of shares available for employees or users?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.get_list('Share Type', ['title', 'description'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "I need to update the description of a specific share type. Where do I do that?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.get_list('Share Type', ['title', 'description'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "Show me all the share types we\u2019ve created in the system.",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.get_list('Share Type', ['title', 'description'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "Can I add a long description to a share type to explain its purpose?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.get_list('Share Type', ['title', 'description'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "How do I create a new share type with a specific title?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.get_list('Share Type', ['title', 'description'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "What doctype stores information about different types of shares we assign?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.get_list('Share Type', ['title', 'description'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "Is there a section to describe the purpose of each share type?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.get_list('Share Type', ['title', 'description'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "Where can I maintain the master list of share types in ERPNext?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.get_list('Share Type', ['title', 'description'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "Can I list all titles of the share types defined in our system?",
      "fields": [
        "title"
      ]
    },
    "output": "frappe.get_list('Share Type', ['title'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "How do I view or edit a share type\u2019s details like name and description?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.get_list('Share Type', ['title', 'description'])"
  },
  {
    "input": {
      "doctype": "BOM Update Tool",
      "question": "How do I replace an old BOM with a new one across items?",
      "fields": [
        "current_bom",
        "new_bom"
      ]
    },
    "output": "frappe.get_list('BOM Update Tool', ['current_bom', 'new_bom'])"
  },
  {
    "input": {
      "doctype": "BOM Update Tool",
      "question": "Is there a tool that lets me update BOMs in bulk?",
      "fields": [
        "current_bom",
        "new_bom"
      ]
    },
    "output": "frappe.get_list('BOM Update Tool', ['current_bom', 'new_bom'])"
  },
  {
    "input": {
      "doctype": "BOM Update Tool",
      "question": "Which doctype allows me to assign a new BOM to replace the existing one?",
      "fields": [
        "current_bom",
        "new_bom"
      ]
    },
    "output": "frappe.get_list('BOM Update Tool', ['current_bom', 'new_bom'])"
  },
  {
    "input": {
      "doctype": "Party Type",
      "question": "List all party types and their associated account types.",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.get_list('Party Type', ['party_type', 'account_type'])"
  },
  {
    "input": {
      "doctype": "Party Type",
      "question": "How is the default account type decided for each party type?",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.get_list('Party Type', ['party_type', 'account_type'])"
  },
  {
    "input": {
      "doctype": "Party Type",
      "question": "Where can I edit the account type for a specific party type?",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.get_list('Party Type', ['party_type', 'account_type'])"
  },
  {
    "input": {
      "doctype": "Routing",
      "question": "Where can I define or manage the routing steps for manufacturing operations?",
      "fields": [
        "routing_name",
        "operations"
      ]
    },
    "output": "frappe.get_list('Routing', ['routing_name', 'operations'])"
  },
  {
    "input": {
      "doctype": "Routing",
      "question": "Can I see the list of routings that are currently disabled?",
      "fields": [
        "routing_name",
        "disabled"
      ]
    },
    "output": "frappe.get_list('Routing', {'disabled': 1}, ['routing_name', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Routing",
      "question": "What is the routing name used for assembling the new generator unit?",
      "fields": [
        "routing_name"
      ]
    },
    "output": "frappe.get_list('Routing', {'routing_name': 'new generator unit'}, ['routing_name'])"
  },
  {
    "input": {
      "doctype": "Routing",
      "question": "Which document stores the operation flow used in a BOM process?",
      "fields": [
        "routing_name",
        "operations"
      ]
    },
    "output": "frappe.get_list('Routing', {'operations': 'BOM process'}, ['routing_name', 'operations'])"
  },
  {
    "input": {
      "doctype": "Routing",
      "question": "Is there a way to deactivate a routing without deleting it?",
      "fields": [
        "routing_name",
        "disabled"
      ]
    },
    "output": "frappe.get_list('Routing', {'disabled': 1}, ['routing_name', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Routing",
      "question": "Where do I view all BOM operations linked to a specific routing?",
      "fields": [
        "routing_name",
        "operations"
      ]
    },
    "output": "frappe.get_list('Routing', {'routing_name': 'specific routing'}, ['routing_name', 'operations'])"
  },
  {
    "input": {
      "doctype": "Routing",
      "question": "What ERP record helps organize the sequence of manufacturing tasks?",
      "fields": [
        "routing_name",
        "operations"
      ]
    },
    "output": "frappe.get_list('Routing', ['routing_name', 'operations'])"
  },
  {
    "input": {
      "doctype": "Routing",
      "question": "Show me the routing used for our engine assembly line.",
      "fields": [
        "routing_name"
      ]
    },
    "output": "frappe.get_list('Routing', {'routing_name': 'engine assembly line'}, ['routing_name'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "Where can I define the types of shares available for employees or users?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.get_list('Share Type', ['title', 'description'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "I need to update the description of a specific share type. Where do I do that?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.get_list('Share Type', ['title', 'description'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "Show me all the share types we\u2019ve created in the system.",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.get_list('Share Type', ['title', 'description'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "Can I add a long description to a share type to explain its purpose?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.get_list('Share Type', ['title', 'description'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "How do I create a new share type with a specific title?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.get_list('Share Type', ['title', 'description'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "What doctype stores information about different types of shares we assign?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.get_list('Share Type', ['title', 'description'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "Is there a section to describe the purpose of each share type?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.get_list('Share Type', ['title', 'description'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "Where can I maintain the master list of share types in ERPNext?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.get_list('Share Type', ['title', 'description'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "Can I list all titles of the share types defined in our system?",
      "fields": [
        "title"
      ]
    },
    "output": "frappe.get_list('Share Type', ['title'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "How do I view or edit a share type\u2019s details like name and description?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.get_list('Share Type', ['title', 'description'])"
  },
  {
    "input": {
      "doctype": "BOM Update Tool",
      "question": "How do I replace an old BOM with a new one across items?",
      "fields": [
        "current_bom",
        "new_bom",
        "replace"
      ]
    },
    "output": "frappe.get_list('BOM Update Tool', ['current_bom', 'new_bom', 'replace'])"
  },
  {
    "input": {
      "doctype": "BOM Update Tool",
      "question": "Is there a tool that lets me update BOMs in bulk?",
      "fields": [
        "replace_bom_section",
        "current_bom",
        "new_bom"
      ]
    },
    "output": "frappe.get_list('BOM Update Tool', ['replace_bom_section', 'current_bom', 'new_bom'])"
  },
  {
    "input": {
      "doctype": "BOM Update Tool",
      "question": "Which doctype allows me to assign a new BOM to replace the existing one?",
      "fields": [
        "replace_bom_section",
        "current_bom",
        "new_bom"
      ]
    },
    "output": "frappe.get_list('BOM Update Tool', ['replace_bom_section', 'current_bom', 'new_bom'])"
  },
  {
    "input": {
      "doctype": "BOM Update Tool",
      "question": "Where can I update all BOMs to reflect the latest price data?",
      "fields": [
        "update_cost_section",
        "update_latest_price_in_all_boms"
      ]
    },
    "output": "frappe.get_list('BOM Update Tool', ['update_cost_section', 'update_latest_price_in_all_boms'])"
  },
  {
    "input": {
      "doctype": "BOM Update Tool",
      "question": "Can I select a new BOM and automatically replace it across items?",
      "fields": [
        "current_bom",
        "new_bom",
        "replace"
      ]
    },
    "output": "frappe.get_list('BOM Update Tool', ['current_bom', 'new_bom', 'replace'])"
  },
  {
    "input": {
      "doctype": "BOM Update Tool",
      "question": "What tool allows replacing one BOM with another in the system?",
      "fields": [
        "current_bom",
        "new_bom",
        "replace"
      ]
    },
    "output": "frappe.get_list('BOM Update Tool', ['current_bom', 'new_bom', 'replace'])"
  },
  {
    "input": {
      "doctype": "BOM Update Tool",
      "question": "Is there a utility to update BOM references and refresh their prices?",
      "fields": [
        "update_cost_section",
        "update_latest_price_in_all_boms"
      ]
    },
    "output": "frappe.get_list('BOM Update Tool', ['update_cost_section', 'update_latest_price_in_all_boms'])"
  },
  {
    "input": {
      "doctype": "BOM Update Tool",
      "question": "How do I switch to a newer BOM version across multiple records?",
      "fields": [
        "current_bom",
        "new_bom",
        "replace"
      ]
    },
    "output": "frappe.get_list('BOM Update Tool', ['current_bom', 'new_bom', 'replace'])"
  },
  {
    "input": {
      "doctype": "BOM Update Tool",
      "question": "Can I replace BOMs in bulk without editing each item manually?",
      "fields": [
        "current_bom",
        "new_bom",
        "replace"
      ]
    },
    "output": "frappe.get_list('BOM Update Tool', ['current_bom', 'new_bom', 'replace'])"
  },
  {
    "input": {
      "doctype": "BOM Update Tool",
      "question": "Show me where I can change the default BOMs using a batch action.",
      "fields": [
        "replace_bom_section",
        "current_bom",
        "new_bom"
      ]
    },
    "output": "frappe.get_list('BOM Update Tool', ['replace_bom_section', 'current_bom', 'new_bom'])"
  },
  {
    "input": {
      "doctype": "Linked Location",
      "question": "How do I link a new warehouse or site location to the system?",
      "fields": [
        "location"
      ]
    },
    "output": "frappe.get_list('Linked Location', ['location'])"
  },
  {
    "input": {
      "doctype": "Linked Location",
      "question": "Can I see all the physical locations we've linked in ERPNext?",
      "fields": [
        "location"
      ]
    },
    "output": "frappe.get_list('Linked Location', ['location'])"
  },
  {
    "input": {
      "doctype": "Linked Location",
      "question": "Which document links each location to our logistics structure?",
      "fields": [
        "location"
      ]
    },
    "output": "frappe.get_list('Linked Location', ['location'])"
  },
  {
    "input": {
      "doctype": "Linked Location",
      "question": "Where can I configure location references used across modules?",
      "fields": [
        "location"
      ]
    },
    "output": "frappe.get_list('Linked Location', ['location'])"
  },
  {
    "input": {
      "doctype": "Linked Location",
      "question": "Is there a document where I can add or modify linked warehouse locations?",
      "fields": [
        "location"
      ]
    },
    "output": "frappe.get_list('Linked Location', ['location'])"
  },
  {
    "input": {
      "doctype": "Linked Location",
      "question": "I want to track transactions based on site locations. Where should I link them?",
      "fields": [
        "location"
      ]
    },
    "output": "frappe.get_list('Linked Location', ['location'])"
  },
  {
    "input": {
      "doctype": "Linked Location",
      "question": "How are locations mapped to transactions or users?",
      "fields": [
        "location"
      ]
    },
    "output": "frappe.get_list('Linked Location', ['location'])"
  },
  {
    "input": {
      "doctype": "Linked Location",
      "question": "Where do we store linked addresses or logistics points?",
      "fields": [
        "location"
      ]
    },
    "output": "frappe.get_list('Linked Location', ['location'])"
  },
  {
    "input": {
      "doctype": "Linked Location",
      "question": "Is there a setup to associate records with a specific warehouse location?",
      "fields": [
        "location"
      ]
    },
    "output": "frappe.get_list('Linked Location', ['location'])"
  },
  {
    "input": {
      "doctype": "Linked Location",
      "question": "Can I create a location link for a new service site?",
      "fields": [
        "location"
      ]
    },
    "output": "frappe.get_list('Linked Location', ['location'])"
  },
  {
    "input": {
      "doctype": "Linked Location",
      "question": "How do I manage the list of locations linked to a document type?",
      "fields": [
        "location"
      ]
    },
    "output": "frappe.get_list('Linked Location', ['location'])"
  },
  {
    "input": {
      "doctype": "Linked Location",
      "question": "Where are location links configured in ERPNext?",
      "fields": [
        "location"
      ]
    },
    "output": "frappe.get_list('Linked Location', ['location'])"
  },
  {
    "input": {
      "doctype": "Support Search Source",
      "question": "Where can I configure external sources to fetch support content from?",
      "fields": [
        "source",
        "query_route",
        "response_path"
      ]
    },
    "output": "frappe.get_list('Support Search Source', ['source', 'query_route', 'response_path'])"
  },
  {
    "input": {
      "doctype": "Support Search Source",
      "question": "I want to connect an API as a support data source. Where do I set that up?",
      "fields": [
        "source",
        "query_route",
        "response_path"
      ]
    },
    "output": "frappe.get_list('Support Search Source', ['source', 'query_route', 'response_path'])"
  },
  {
    "input": {
      "doctype": "Support Search Source",
      "question": "How do I add a search source with a custom query route and response path?",
      "fields": [
        "source",
        "query_route",
        "response_path"
      ]
    },
    "output": "frappe.get_list('Support Search Source', ['source', 'query_route', 'response_path'])"
  },
  {
    "input": {
      "doctype": "Currency Exchange",
      "question": "What was the USD to EUR exchange rate last Friday?",
      "fields": [
        "from_currency",
        "to_currency",
        "exchange_rate",
        "date"
      ]
    },
    "output": "frappe.get_list('Currency Exchange', {'from_currency': 'USD', 'to_currency': 'EUR'}, ['exchange_rate', 'date'])"
  },
  {
    "input": {
      "doctype": "Currency Exchange",
      "question": "Can I view the exchange rate used for buying GBP on 2024-12-15?",
      "fields": [
        "from_currency",
        "to_currency",
        "exchange_rate",
        "date",
        "for_buying"
      ]
    },
    "output": "frappe.get_list('Currency Exchange', {'from_currency': 'GBP', 'to_currency': 'USD', 'date': '2024-12-15', 'for_buying': 1}, ['exchange_rate'])"
  },
  {
    "input": {
      "doctype": "Currency Exchange",
      "question": "How do we define currency exchange rates for selling transactions?",
      "fields": [
        "from_currency",
        "to_currency",
        "exchange_rate",
        "for_selling"
      ]
    },
    "output": "frappe.get_list('Currency Exchange', {'for_selling': 1}, ['from_currency', 'to_currency', 'exchange_rate'])"
  },
  {
    "input": {
      "doctype": "Currency Exchange",
      "question": "Show all recorded currency exchange rates involving INR.",
      "fields": [
        "from_currency",
        "to_currency",
        "exchange_rate",
        "date"
      ]
    },
    "output": "frappe.get_list('Currency Exchange', {'from_currency': 'INR'}, ['from_currency', 'to_currency', 'exchange_rate', 'date'])"
  },
  {
    "input": {
      "doctype": "Currency Exchange",
      "question": "What is the latest exchange rate from AED to USD?",
      "fields": [
        "from_currency",
        "to_currency",
        "exchange_rate",
        "date"
      ]
    },
    "output": "frappe.get_list('Currency Exchange', {'from_currency': 'AED', 'to_currency': 'USD'}, ['exchange_rate', 'date'])"
  },
  {
    "input": {
      "doctype": "Currency Exchange",
      "question": "Where can I update the exchange rate for EUR to JPY?",
      "fields": [
        "from_currency",
        "to_currency",
        "exchange_rate"
      ]
    },
    "output": "frappe.get_list('Currency Exchange', {'from_currency': 'EUR', 'to_currency': 'JPY'}, ['exchange_rate'])"
  },
  {
    "input": {
      "doctype": "Currency Exchange",
      "question": "Is there a way to set separate rates for buying and selling currencies?",
      "fields": [
        "from_currency",
        "to_currency",
        "exchange_rate",
        "for_buying",
        "for_selling"
      ]
    },
    "output": "frappe.get_list('Currency Exchange', {'for_buying': 1, 'for_selling': 1}, ['from_currency', 'to_currency', 'exchange_rate'])"
  },
  {
    "input": {
      "doctype": "Currency Exchange",
      "question": "List all exchange rates recorded for transactions dated April 1st, 2025.",
      "fields": [
        "from_currency",
        "to_currency",
        "exchange_rate",
        "date"
      ]
    },
    "output": "frappe.get_list('Currency Exchange', {'date': '2025-04-01'}, ['from_currency', 'to_currency', 'exchange_rate'])"
  },
  {
    "input": {
      "doctype": "Currency Exchange",
      "question": "How do we manage historical exchange rates in the system?",
      "fields": [
        "from_currency",
        "to_currency",
        "exchange_rate",
        "date"
      ]
    },
    "output": "frappe.get_list('Currency Exchange', {}, ['from_currency', 'to_currency', 'exchange_rate', 'date'])"
  },
  {
    "input": {
      "doctype": "Currency Exchange",
      "question": "Has the system captured any exchange rate for SGD to MYR recently?",
      "fields": [
        "from_currency",
        "to_currency",
        "exchange_rate",
        "date"
      ]
    },
    "output": "frappe.get_list('Currency Exchange', {'from_currency': 'SGD', 'to_currency': 'MYR'}, ['exchange_rate', 'date'])"
  },
  {
    "input": {
      "doctype": "Currency Exchange",
      "question": "Which currency pairs have exchange rates defined for both buying and selling?",
      "fields": [
        "from_currency",
        "to_currency",
        "exchange_rate",
        "for_buying",
        "for_selling"
      ]
    },
    "output": "frappe.get_list('Currency Exchange', {'for_buying': 1, 'for_selling': 1}, ['from_currency', 'to_currency', 'exchange_rate'])"
  },
  {
    "input": {
      "doctype": "Currency Exchange",
      "question": "Where can I find daily exchange rate updates in ERPNext?",
      "fields": [
        "from_currency",
        "to_currency",
        "exchange_rate",
        "date"
      ]
    },
    "output": "frappe.get_list('Currency Exchange', {}, ['from_currency', 'to_currency', 'exchange_rate', 'date'])"
  },
  {
    "input": {
      "doctype": "Asset Category Account",
      "question": "Which accounts are used for fixed assets in PixelWaltz Corp?",
      "fields": [
        "company_name",
        "fixed_asset_account",
        "accumulated_depreciation_account",
        "depreciation_expense_account",
        "capital_work_in_progress_account"
      ]
    },
    "output": "frappe.get_list('Asset Category Account', {'company_name': 'PixelWaltz Corp'}, ['fixed_asset_account', 'accumulated_depreciation_account', 'depreciation_expense_account', 'capital_work_in_progress_account'])"
  },
  {
    "input": {
      "doctype": "Asset Category Account",
      "question": "Where can I find the depreciation expense account linked to an asset category?",
      "fields": [
        "depreciation_expense_account"
      ]
    },
    "output": "frappe.get_list('Asset Category Account', {}, ['depreciation_expense_account'])"
  },
  {
    "input": {
      "doctype": "Asset Category Account",
      "question": "Does each company have its own fixed asset account setup?",
      "fields": [
        "company_name",
        "fixed_asset_account"
      ]
    },
    "output": "frappe.get_list('Asset Category Account', {}, ['company_name', 'fixed_asset_account'])"
  },
  {
    "input": {
      "doctype": "Asset Category Account",
      "question": "Which account is used for capital work in progress under asset categories?",
      "fields": [
        "capital_work_in_progress_account"
      ]
    },
    "output": "frappe.get_list('Asset Category Account', {}, ['capital_work_in_progress_account'])"
  },
  {
    "input": {
      "doctype": "Asset Category Account",
      "question": "List all depreciation and accumulated depreciation accounts for asset groups.",
      "fields": [
        "depreciation_expense_account",
        "accumulated_depreciation_account"
      ]
    },
    "output": "frappe.get_list('Asset Category Account', {}, ['depreciation_expense_account', 'accumulated_depreciation_account'])"
  },
  {
    "input": {
      "doctype": "Asset Category Account",
      "question": "Can I review the company-wise mapping of fixed asset accounts?",
      "fields": [
        "company_name",
        "fixed_asset_account"
      ]
    },
    "output": "frappe.get_list('Asset Category Account', {}, ['company_name', 'fixed_asset_account'])"
  },
  {
    "input": {
      "doctype": "Asset Category Account",
      "question": "What account settings apply to asset purchases in XYZ Ltd?",
      "fields": [
        "company_name",
        "fixed_asset_account",
        "depreciation_expense_account"
      ]
    },
    "output": "frappe.get_list('Asset Category Account', {'company_name': 'XYZ Ltd'}, ['fixed_asset_account', 'depreciation_expense_account'])"
  },
  {
    "input": {
      "doctype": "Asset Category Account",
      "question": "Where are fixed asset account details stored for each company?",
      "fields": [
        "company_name",
        "fixed_asset_account"
      ]
    },
    "output": "frappe.get_list('Asset Category Account', {}, ['company_name', 'fixed_asset_account'])"
  },
  {
    "input": {
      "doctype": "Asset Category Account",
      "question": "Are depreciation accounts mandatory in asset category setup?",
      "fields": [
        "depreciation_expense_account"
      ]
    },
    "output": "frappe.get_list('Asset Category Account', {}, ['depreciation_expense_account'])"
  },
  {
    "input": {
      "doctype": "Asset Category Account",
      "question": "Which companies have both depreciation and capital work-in-progress accounts defined?",
      "fields": [
        "company_name",
        "depreciation_expense_account",
        "capital_work_in_progress_account"
      ]
    },
    "output": "frappe.get_list('Asset Category Account', {'depreciation_expense_account': ['!=', ''], 'capital_work_in_progress_account': ['!=', '']}, ['company_name', 'depreciation_expense_account', 'capital_work_in_progress_account'])"
  },
  {
    "input": {
      "doctype": "Asset Category Account",
      "question": "What fixed asset account is linked to our plant machinery?",
      "fields": [
        "fixed_asset_account"
      ]
    },
    "output": "frappe.get_list('Asset Category Account', {'fixed_asset_account': 'plant machinery'}, ['fixed_asset_account'])"
  },
  {
    "input": {
      "doctype": "Asset Category Account",
      "question": "How do I assign account heads for fixed assets in a new company?",
      "fields": [
        "company_name",
        "fixed_asset_account"
      ]
    },
    "output": "frappe.get_list('Asset Category Account', {'company_name': 'new company'}, ['fixed_asset_account'])"
  },
  {
    "input": {
      "doctype": "Support Search Source",
      "question": "Where do I define the base URL and parameters for a support API source?",
      "fields": [
        "base_url",
        "query_options_sb",
        "query_route"
      ]
    },
    "output": "frappe.get_list('Support Search Source', {}, ['base_url', 'query_options_sb', 'query_route'])"
  },
  {
    "input": {
      "doctype": "Support Search Source",
      "question": "Is there a way to pull search results dynamically from another system?",
      "fields": [
        "source_name",
        "source_type"
      ]
    },
    "output": "frappe.get_list('Support Search Source', {'source_type': 'dynamic'}, ['source_name', 'source_type'])"
  },
  {
    "input": {
      "doctype": "Support Search Source",
      "question": "Can I configure both GET and POST sources for support queries?",
      "fields": [
        "source_type",
        "query_route",
        "post_route"
      ]
    },
    "output": "frappe.get_list('Support Search Source', {'source_type': ['in', ['GET', 'POST']]}, ['source_type', 'query_route', 'post_route'])"
  },
  {
    "input": {
      "doctype": "Support Search Source",
      "question": "How can I customize the key fields to display in external search results?",
      "fields": [
        "result_title_field",
        "result_preview_field",
        "result_route_field"
      ]
    },
    "output": "frappe.get_list('Support Search Source', {}, ['result_title_field', 'result_preview_field', 'result_route_field'])"
  },
  {
    "input": {
      "doctype": "Support Search Source",
      "question": "Where is the post route key list defined for a support source?",
      "fields": [
        "post_route_key_list"
      ]
    },
    "output": "frappe.get_list('Support Search Source', {}, ['post_route_key_list'])"
  },
  {
    "input": {
      "doctype": "Support Search Source",
      "question": "Which doctype manages third-party support search endpoints?",
      "fields": [
        "source_doctype"
      ]
    },
    "output": "frappe.get_list('Support Search Source', {}, ['source_doctype'])"
  },
  {
    "input": {
      "doctype": "Support Search Source",
      "question": "Is there a field to define the title and preview fields for fetched results?",
      "fields": [
        "result_title_field",
        "result_preview_field"
      ]
    },
    "output": "frappe.get_list('Support Search Source', {}, ['result_title_field', 'result_preview_field'])"
  },
  {
    "input": {
      "doctype": "Support Search Source",
      "question": "Can I link a doctype to a support source and define its route behavior?",
      "fields": [
        "source_doctype",
        "query_route",
        "post_route"
      ]
    },
    "output": "frappe.get_list('Support Search Source', {}, ['source_doctype', 'query_route', 'post_route'])"
  },
  {
    "input": {
      "doctype": "Support Search Source",
      "question": "How can I map a query param and result key for a support source?",
      "fields": [
        "search_term_param_name",
        "response_result_key_path"
      ]
    },
    "output": "frappe.get_list('Support Search Source', {}, ['search_term_param_name', 'response_result_key_path'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "Is there a field for a text description of each share type?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Share Type', {}, ['description'])"
  },
  {
    "input": {
      "doctype": "Share Type",
      "question": "Which document stores the labels and notes for share classifications?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.get_list('Share Type', {}, ['title', 'description'])"
  },
  {
    "input": {
      "doctype": "Routing",
      "question": "Can I assign multiple BOM operations under a single routing plan?",
      "fields": [
        "operations"
      ]
    },
    "output": "frappe.get_list('Routing', {}, ['operations'])"
  },
  {
    "input": {
      "doctype": "Routing",
      "question": "List all active routings available in the system.",
      "fields": [
        "routing_name",
        "disabled"
      ]
    },
    "output": "frappe.get_list('Routing', { 'disabled': 0 }, ['routing_name'])"
  },
  {
    "input": {
      "doctype": "Routing",
      "question": "How do I configure a routing for a new batch production?",
      "fields": [
        "routing_name",
        "operations"
      ]
    },
    "output": "frappe.get_list('Routing', {}, ['routing_name', 'operations'])"
  },
  {
    "input": {
      "doctype": "Routing",
      "question": "Where are the routing names and their operations recorded?",
      "fields": [
        "routing_name",
        "operations"
      ]
    },
    "output": "frappe.get_list('Routing', {}, ['routing_name', 'operations'])"
  },
  {
    "input": {
      "doctype": "Delivery Settings",
      "question": "Where do we configure the email template used for dispatch notifications?",
      "fields": [
        "dispatch_template"
      ]
    },
    "output": "frappe.get_value('Delivery Settings', {}, 'dispatch_template')"
  },
  {
    "input": {
      "doctype": "Delivery Settings",
      "question": "Can I check which print format is used as an attachment in delivery notifications?",
      "fields": [
        "dispatch_attachment"
      ]
    },
    "output": "frappe.get_value('Delivery Settings', {}, 'dispatch_attachment')"
  },
  {
    "input": {
      "doctype": "Delivery Settings",
      "question": "Is there a setting to send dispatch emails with attachments automatically?",
      "fields": [
        "send_with_attachment"
      ]
    },
    "output": "frappe.get_value('Delivery Settings', {}, 'send_with_attachment')"
  },
  {
    "input": {
      "doctype": "Delivery Settings",
      "question": "Where can I find the setting to delay between delivery stops during a trip?",
      "fields": [
        "stop_delay"
      ]
    },
    "output": "frappe.get_value('Delivery Settings', {}, 'stop_delay')"
  },
  {
    "input": {
      "doctype": "Delivery Settings",
      "question": "Which configuration determines if a dispatch email includes an attachment?",
      "fields": [
        "send_with_attachment"
      ]
    },
    "output": "frappe.get_value('Delivery Settings', {}, 'send_with_attachment')"
  },
  {
    "input": {
      "doctype": "Delivery Settings",
      "question": "Can I update the email format used to notify customers about delivery?",
      "fields": [
        "dispatch_template"
      ]
    },
    "output": "frappe.get_value('Delivery Settings', {}, 'dispatch_template')"
  },
  {
    "input": {
      "doctype": "Delivery Settings",
      "question": "Where do I define the number of minutes to wait between delivery stops?",
      "fields": [
        "stop_delay"
      ]
    },
    "output": "frappe.get_value('Delivery Settings', {}, 'stop_delay')"
  },
  {
    "input": {
      "doctype": "Delivery Settings",
      "question": "What controls whether we attach print formats to dispatch notification emails?",
      "fields": [
        "dispatch_attachment"
      ]
    },
    "output": "frappe.get_value('Delivery Settings', {}, 'dispatch_attachment')"
  },
  {
    "input": {
      "doctype": "Delivery Settings",
      "question": "How do I configure which print format is used during a delivery dispatch?",
      "fields": [
        "dispatch_template"
      ]
    },
    "output": "frappe.get_value('Delivery Settings', {}, 'dispatch_template')"
  },
  {
    "input": {
      "doctype": "Delivery Settings",
      "question": "Can we manage the timing gap between each stop in a delivery route?",
      "fields": [
        "stop_delay"
      ]
    },
    "output": "frappe.get_value('Delivery Settings', {}, 'stop_delay')"
  },
  {
    "input": {
      "doctype": "Bank Guarantee",
      "question": "Where do I record details of a provided bank guarantee linked to a customer project?",
      "fields": [
        "reference_doctype",
        "reference_docname",
        "project"
      ]
    },
    "output": "frappe.get_value('Bank Guarantee', {}, ['reference_doctype', 'reference_docname', 'project'])"
  },
  {
    "input": {
      "doctype": "Bank Guarantee",
      "question": "How can I capture the bank, bank account, and SWIFT number for a guarantee?",
      "fields": [
        "bank",
        "bank_account",
        "swift_number"
      ]
    },
    "output": "frappe.get_value('Bank Guarantee', {}, ['bank', 'bank_account', 'swift_number'])"
  },
  {
    "input": {
      "doctype": "Bank Guarantee",
      "question": "Is there a place to store the IBAN and branch code for bank guarantee processing?",
      "fields": [
        "iban",
        "branch_code"
      ]
    },
    "output": "frappe.get_value('Bank Guarantee', {}, ['iban', 'branch_code'])"
  },
  {
    "input": {
      "doctype": "Bank Guarantee",
      "question": "Where can I set the amount, start date, and validity of a bank guarantee?",
      "fields": [
        "amount",
        "start_date",
        "validity"
      ]
    },
    "output": "frappe.get_value('Bank Guarantee', {}, ['amount', 'start_date', 'validity'])"
  },
  {
    "input": {
      "doctype": "Bank Guarantee",
      "question": "Can I store clauses or additional terms related to the bank guarantee?",
      "fields": [
        "more_information"
      ]
    },
    "output": "frappe.get_value('Bank Guarantee', {}, 'more_information')"
  },
  {
    "input": {
      "doctype": "Bank Guarantee",
      "question": "Which document holds the reference to a supplier's fixed deposit and margin money?",
      "fields": [
        "fixed_deposit_number",
        "margin_money"
      ]
    },
    "output": "frappe.get_value('Bank Guarantee', {}, ['fixed_deposit_number', 'margin_money'])"
  },
  {
    "input": {
      "doctype": "Bank Guarantee",
      "question": "Where do I maintain the bank guarantee number and the name of the beneficiary?",
      "fields": [
        "bank_guarantee_number",
        "name_of_beneficiary"
      ]
    },
    "output": "frappe.get_value('Bank Guarantee', {}, ['bank_guarantee_number', 'name_of_beneficiary'])"
  },
  {
    "input": {
      "doctype": "Bank Guarantee",
      "question": "How can I track charges incurred for issuing a bank guarantee?",
      "fields": [
        "charges"
      ]
    },
    "output": "frappe.get_value('Bank Guarantee', {}, 'charges')"
  },
  {
    "input": {
      "doctype": "Bank Guarantee",
      "question": "Is there a form where I can input a dynamic reference to a project or invoice for the guarantee?",
      "fields": [
        "project",
        "reference_doctype",
        "reference_docname"
      ]
    },
    "output": "frappe.get_value('Bank Guarantee', {}, ['project', 'reference_doctype', 'reference_docname'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Factor",
      "question": "Where can I define how many boxes equal one pallet for a product category?",
      "fields": [
        "category",
        "from_uom",
        "to_uom"
      ]
    },
    "output": "frappe.get_value('UOM Conversion Factor', {'category': 'product'}, ['from_uom', 'to_uom'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Factor",
      "question": "How do I set up the conversion from kilograms to grams in a specific category?",
      "fields": [
        "category",
        "from_uom",
        "to_uom"
      ]
    },
    "output": "frappe.get_value('UOM Conversion Factor', {'category': 'Weight'}, ['from_uom', 'to_uom'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Factor",
      "question": "Can I create a rule to convert meters to centimeters under a UOM category?",
      "fields": [
        "category",
        "from_uom",
        "to_uom"
      ]
    },
    "output": "frappe.get_value('UOM Conversion Factor', {'category': 'Length'}, ['from_uom', 'to_uom'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Factor",
      "question": "Where do I input the factor to convert from cartons to units?",
      "fields": [
        "category",
        "from_uom",
        "to_uom"
      ]
    },
    "output": "frappe.get_value('UOM Conversion Factor', {'category': 'Packaging'}, ['from_uom', 'to_uom'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Factor",
      "question": "How is the conversion value defined between 'From' and 'To' UOMs?",
      "fields": [
        "from_uom",
        "to_uom",
        "value"
      ]
    },
    "output": "frappe.get_value('UOM Conversion Factor', {}, ['from_uom', 'to_uom', 'value'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Factor",
      "question": "Where can I specify a UOM conversion within the 'Weight' category?",
      "fields": [
        "category",
        "from_uom",
        "to_uom"
      ]
    },
    "output": "frappe.get_value('UOM Conversion Factor', {'category': 'Weight'}, ['from_uom', 'to_uom'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Factor",
      "question": "What document do I use to declare that 1 box equals 12 pieces?",
      "fields": [
        "category",
        "from_uom",
        "to_uom",
        "value"
      ]
    },
    "output": "frappe.get_value('UOM Conversion Factor', {'category': 'Packaging'}, ['from_uom', 'to_uom', 'value'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Factor",
      "question": "Can I map a conversion from dozens to units under a category?",
      "fields": [
        "category",
        "from_uom",
        "to_uom"
      ]
    },
    "output": "frappe.get_value('UOM Conversion Factor', {'category': 'Packaging'}, ['from_uom', 'to_uom'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Factor",
      "question": "Is there a place to manage all unit of measurement conversions by category?",
      "fields": [
        "category",
        "from_uom",
        "to_uom"
      ]
    },
    "output": "frappe.get_all('UOM Conversion Factor', filters={'category': 'Weight'}, fields=['from_uom', 'to_uom'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Factor",
      "question": "How do I enter the value to convert from gallons to liters?",
      "fields": [
        "category",
        "from_uom",
        "to_uom",
        "value"
      ]
    },
    "output": "frappe.get_all('UOM Conversion Factor', filters={'from_uom': 'gallons', 'to_uom': 'liters'}, fields=['value'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Factor",
      "question": "Which form holds the link between different units like 'kg' and 'lb'?",
      "fields": [
        "category",
        "from_uom",
        "to_uom",
        "value"
      ]
    },
    "output": "frappe.get_all('UOM Conversion Factor', filters={'from_uom': 'kg', 'to_uom': 'lb'}, fields=['value'])"
  },
  {
    "input": {
      "doctype": "UOM Conversion Factor",
      "question": "Can I update a conversion factor between pieces and packets?",
      "fields": [
        "category",
        "from_uom",
        "to_uom",
        "value"
      ]
    },
    "output": "frappe.get_all('UOM Conversion Factor', filters={'from_uom': 'pieces', 'to_uom': 'packets'}, fields=['value'])"
  },
  {
    "input": {
      "doctype": "Bank Guarantee",
      "question": "Which form captures whether the guarantee is for receiving or providing?",
      "fields": [
        "bg_type"
      ]
    },
    "output": "frappe.get_all('Bank Guarantee', fields=['name', 'bg_type'])"
  },
  {
    "input": {
      "doctype": "Bank Guarantee",
      "question": "Can I view or edit a previous version of a bank guarantee that was amended?",
      "fields": [
        "name",
        "amended_from"
      ]
    },
    "output": "frappe.get_all('Bank Guarantee', filters={'amended_from': ['!=', '']}, fields=['name', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Bank Guarantee",
      "question": "Where do we track bank guarantees tied to a specific customer or supplier?",
      "fields": [
        "customer",
        "supplier"
      ]
    },
    "output": "frappe.get_all('Bank Guarantee', filters=[['customer', '!=', ''], ['supplier', '!=', '']], fields=['name', 'customer', 'supplier'])"
  },
  {
    "input": {
      "doctype": "Delivery Settings",
      "question": "Where is the dispatch template for delivery trips configured?",
      "fields": [
        "dispatch_template"
      ]
    },
    "output": "frappe.get_single_value('Delivery Settings', 'dispatch_template')"
  },
  {
    "input": {
      "doctype": "Delivery Settings",
      "question": "How do we enable or disable sending delivery emails with attachments?",
      "fields": [
        "send_with_attachment"
      ]
    },
    "output": "frappe.get_single_value('Delivery Settings', 'send_with_attachment')"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "Where do I enter the Access Key ID for my cloud backup?",
      "fields": [
        "access_key_id"
      ]
    },
    "output": "frappe.get_single_value('S3 Backup Settings', 'access_key_id')"
  },
  {
    "input": {
      "doctype": "User Select Document Type",
      "question": "How can I select a document type for a user?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.get_all('User Select Document Type', fields=['user', 'document_type'])"
  },
  {
    "input": {
      "doctype": "Workspace Chart",
      "question": "How do I create a new workspace chart?",
      "fields": [
        "chart_name"
      ]
    },
    "output": "frappe.get_doc({'doctype': 'Workspace Chart', 'chart_name': 'New Chart'}).insert()"
  },
  {
    "input": {
      "doctype": "Workspace Chart",
      "question": "Can I add multiple charts to a single workspace?",
      "fields": [
        "chart_name"
      ]
    },
    "output": "frappe.get_all('Workspace Chart', fields=['chart_name'])"
  },
  {
    "input": {
      "doctype": "Workspace Chart",
      "question": "How do I customize the chart label in the workspace?",
      "fields": [
        "chart_name",
        "label"
      ]
    },
    "output": "frappe.get_all('Workspace Chart', fields=['chart_name', 'label'])"
  },
  {
    "input": {
      "doctype": "Workspace Chart",
      "question": "List all chart names defined in workspaces.",
      "fields": [
        "chart_name"
      ]
    },
    "output": "frappe.get_all('Workspace Chart', fields=['chart_name'])"
  },
  {
    "input": {
      "doctype": "Workspace Chart",
      "question": "Retrieve all chart names and labels from workspace charts.",
      "fields": [
        "chart_name",
        "label"
      ]
    },
    "output": "frappe.get_all('Workspace Chart', fields=['chart_name', 'label'])"
  },
  {
    "input": {
      "doctype": "Bank Clearance Detail",
      "question": "Get all payment entries that are still pending bank clearance.",
      "fields": [
        "reference_name",
        "clearance_date"
      ]
    },
    "output": "frappe.get_all('Bank Clearance Detail', filters={'clearance_date': ['=', '']}, fields=['reference_name'])"
  },
  {
    "input": {
      "doctype": "Bank Clearance Detail",
      "question": "Fetch all cleared cheques along with their clearance dates.",
      "fields": [
        "reference_name",
        "clearance_date"
      ]
    },
    "output": "frappe.get_all('Bank Clearance Detail', filters={'clearance_date': ['!=', '']}, fields=['reference_name', 'clearance_date'])"
  },
  {
    "input": {
      "doctype": "Bank Clearance Detail",
      "question": "How many cheques were issued this month?",
      "fields": [
        "cheque_date"
      ]
    },
    "output": "from frappe.utils import get_first_day, get_last_day, nowdate;\nfrappe.db.count('Bank Clearance Detail', filters={\n  'cheque_date': ['between', [get_first_day(nowdate()), get_last_day(nowdate())]]\n})"
  },
  {
    "input": {
      "doctype": "Bank Clearance Detail",
      "question": "Check if any payment entry is still awaiting clearance.",
      "fields": [
        "clearance_date"
      ]
    },
    "output": "frappe.db.exists('Bank Clearance Detail', {'clearance_date': ['=', '']})"
  },
  {
    "input": {
      "doctype": "Bank Clearance Detail",
      "question": "Fetch the total amount of payments posted on April 1st.",
      "fields": [
        "amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.get_value('Bank Clearance Detail', {'posting_date': '2025-04-01'}, 'sum(amount)')"
  },
  {
    "input": {
      "doctype": "Bank Clearance Detail",
      "question": "List entries where cheque date and clearance date do not match.",
      "fields": [
        "cheque_date",
        "clearance_date",
        "payment_entry"
      ]
    },
    "output": "frappe.get_all('Bank Clearance Detail', filters=[['cheque_date', '!=', 'clearance_date']], fields=['payment_entry', 'cheque_date', 'clearance_date'])"
  },
  {
    "input": {
      "doctype": "Bank Clearance Detail",
      "question": "Get payment entries linked to a specific against account.",
      "fields": [
        "payment_entry",
        "against_account"
      ]
    },
    "output": "frappe.get_all('Bank Clearance Detail', filters={'against_account': 'Account XYZ'}, fields=['payment_entry', 'against_account'])"
  },
  {
    "input": {
      "doctype": "Item Alternative",
      "question": "Retrieve all alternative items available if a product is out of stock.",
      "fields": [
        "item_code",
        "alternative_item_code"
      ]
    },
    "output": "frappe.get_all('Item Alternative', fields=['item_code', 'alternative_item_code'])"
  },
  {
    "input": {
      "doctype": "Item Alternative",
      "question": "Get all alternatives defined for item code ITM-001.",
      "fields": [
        "item_code",
        "alternative_item_code"
      ]
    },
    "output": "frappe.get_all('Item Alternative', filters={'item_code': 'ITM-001'}, fields=['alternative_item_code'])"
  },
  {
    "input": {
      "doctype": "Item Alternative",
      "question": "Find all alternative items marked as two-way replacements.",
      "fields": [
        "item_code",
        "alternative_item_code",
        "two_way"
      ]
    },
    "output": "frappe.get_all('Item Alternative', filters={'two_way': 1}, fields=['item_code', 'alternative_item_code'])"
  },
  {
    "input": {
      "doctype": "Item Alternative",
      "question": "List all item pairs that support mutual replacement.",
      "fields": [
        "item_code",
        "alternative_item_code",
        "two_way"
      ]
    },
    "output": "frappe.get_all('Item Alternative', filters={'two_way': 1}, fields=['item_code', 'alternative_item_code'])"
  },
  {
    "input": {
      "doctype": "Item Alternative",
      "question": "Get all items that already have alternatives linked.",
      "fields": [
        "item_code"
      ]
    },
    "output": "frappe.get_all('Item Alternative', distinct=True, fields=['item_code'])"
  },
  {
    "input": {
      "doctype": "Item Alternative",
      "question": "List all products that have substitutes configured.",
      "fields": [
        "item_code",
        "alternative_item_code"
      ]
    },
    "output": "frappe.get_all('Item Alternative', distinct=True, fields=['item_code'])"
  },
  {
    "input": {
      "doctype": "Item Alternative",
      "question": "Show a list of primary items along with their fallback alternatives.",
      "fields": [
        "item_code",
        "alternative_item_code"
      ]
    },
    "output": "frappe.get_all('Item Alternative', fields=['item_code', 'alternative_item_code'])"
  },
  {
    "input": {
      "doctype": "Item Alternative",
      "question": "Fetch the alternative item name for each product.",
      "fields": [
        "item_code",
        "alternative_item_name"
      ]
    },
    "output": "frappe.get_all('Item Alternative', fields=['item_code', 'alternative_item_name'])"
  },
  {
    "input": {
      "doctype": "Item Alternative",
      "question": "Retrieve all substitute item relationships defined in the system.",
      "fields": [
        "item_code",
        "alternative_item_code"
      ]
    },
    "output": "frappe.get_all('Item Alternative', fields=['item_code', 'alternative_item_code'])"
  },
  {
    "input": {
      "doctype": "Item Alternative",
      "question": "List all bi-directionally linked item alternatives.",
      "fields": [
        "item_code",
        "alternative_item_code",
        "two_way"
      ]
    },
    "output": "frappe.get_all('Item Alternative', filters={'two_way': 1}, fields=['item_code', 'alternative_item_code'])"
  },
  {
    "input": {
      "doctype": "Item Alternative",
      "question": "List all items that serve as backups for other inventory products.",
      "fields": [
        "alternative_item_code"
      ]
    },
    "output": "frappe.get_all('Item Alternative', distinct=True, fields=['alternative_item_code'])"
  },
  {
    "input": {
      "doctype": "Item Alternative",
      "question": "Fetch all fields that contain the name of the alternate product.",
      "fields": [
        "alternative_item_name"
      ]
    },
    "output": "frappe.get_all('Item Alternative', fields=['item_code', 'alternative_item_name'])"
  },
  {
    "input": {
      "doctype": "Maintenance Team Member",
      "question": "Get a list of all current maintenance team members.",
      "fields": [
        "team_member",
        "full_name"
      ]
    },
    "output": "frappe.get_all('Maintenance Team Member', fields=['team_member', 'full_name'])"
  },
  {
    "input": {
      "doctype": "Maintenance Team Member",
      "question": "Retrieve the assigned maintenance role for each team member.",
      "fields": [
        "team_member",
        "maintenance_role"
      ]
    },
    "output": "frappe.get_all('Maintenance Team Member', fields=['team_member', 'maintenance_role'])"
  },
  {
    "input": {
      "doctype": "Maintenance Team Member",
      "question": "List all users in the technical maintenance crew with their roles.",
      "fields": [
        "team_member",
        "maintenance_role"
      ]
    },
    "output": "frappe.get_all('Maintenance Team Member', fields=['team_member', 'maintenance_role'])"
  },
  {
    "input": {
      "doctype": "Maintenance Team Member",
      "question": "Fetch the roles assigned to each technician in the maintenance unit.",
      "fields": [
        "team_member",
        "maintenance_role"
      ]
    },
    "output": "frappe.get_all('Maintenance Team Member', fields=['team_member', 'maintenance_role'])"
  },
  {
    "input": {
      "doctype": "Maintenance Team Member",
      "question": "Show the full names and roles of all maintenance personnel.",
      "fields": [
        "full_name",
        "maintenance_role"
      ]
    },
    "output": "frappe.get_all('Maintenance Team Member', fields=['full_name', 'maintenance_role'])"
  },
  {
    "input": {
      "doctype": "Maintenance Team Member",
      "question": "List all ERP user IDs assigned to the maintenance group.",
      "fields": [
        "team_member"
      ]
    },
    "output": "frappe.get_all('Maintenance Team Member', fields=['team_member'])"
  },
  {
    "input": {
      "doctype": "Maintenance Team Member",
      "question": "Retrieve the team roles defined for maintenance staff.",
      "fields": [
        "team_member",
        "maintenance_role"
      ]
    },
    "output": "frappe.get_all('Maintenance Team Member', fields=['team_member', 'maintenance_role'])"
  },
  {
    "input": {
      "doctype": "Maintenance Team Member",
      "question": "Get the assigned responsibilities of each maintenance team member.",
      "fields": [
        "team_member",
        "maintenance_role"
      ]
    },
    "output": "frappe.get_all('Maintenance Team Member', fields=['team_member', 'maintenance_role'])"
  },
  {
    "input": {
      "doctype": "Maintenance Team Member",
      "question": "Who is set as the supervisor in our maintenance team?",
      "fields": [
        "full_name",
        "maintenance_role"
      ]
    },
    "output": "frappe.get_all('Maintenance Team Member', filters={'maintenance_role': 'Supervisor'}, fields=['full_name'])"
  },
  {
    "input": {
      "doctype": "Maintenance Team Member",
      "question": "Show me the roles given to each technician.",
      "fields": [
        "team_member",
        "maintenance_role"
      ]
    },
    "output": "frappe.get_all('Maintenance Team Member', fields=['team_member', 'maintenance_role'])"
  },
  {
    "input": {
      "doctype": "Maintenance Team Member",
      "question": "Give me a list of maintenance team members with their names and roles.",
      "fields": [
        "team_member",
        "full_name",
        "maintenance_role"
      ]
    },
    "output": "frappe.get_all('Maintenance Team Member', fields=['team_member', 'full_name', 'maintenance_role'])"
  },
  {
    "input": {
      "doctype": "Maintenance Team Member",
      "question": "Who are the technical staff working on maintenance tasks?",
      "fields": [
        "full_name",
        "maintenance_role"
      ]
    },
    "output": "frappe.get_all('Maintenance Team Member', fields=['full_name', 'maintenance_role'])"
  },
  {
    "input": {
      "doctype": "Bank Clearance Detail",
      "question": "Has the bank cleared cheque number 875230?",
      "fields": [
        "cheque_number",
        "clearance_date"
      ]
    },
    "output": "frappe.db.exists('Bank Clearance Detail', {'cheque_number': '875230', 'clearance_date': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Bank Clearance Detail",
      "question": "List all cheque payments and how much they were for.",
      "fields": [
        "cheque_number",
        "amount"
      ]
    },
    "output": "frappe.get_all('Bank Clearance Detail', filters={'cheque_number': ['!=', '']}, fields=['cheque_number', 'amount'])"
  },
  {
    "input": {
      "doctype": "Bank Clearance Detail",
      "question": "Show me any bank clearance records where the cheque date is missing.",
      "fields": [
        "cheque_number",
        "cheque_date"
      ]
    },
    "output": "frappe.get_all('Bank Clearance Detail', filters={'cheque_date': ['=', '']}, fields=['cheque_number'])"
  },
  {
    "input": {
      "doctype": "Bank Clearance Detail",
      "question": "Get all records where the payment type is 'Payment Entry'.",
      "fields": [
        "payment_document",
        "payment_entry"
      ]
    },
    "output": "frappe.get_all('Bank Clearance Detail', filters={'payment_document': 'Payment Entry'}, fields=['payment_document', 'payment_entry'])"
  },
  {
    "input": {
      "doctype": "Bank Clearance Detail",
      "question": "Show me all entries where the posting date is earlier than the cheque date.",
      "fields": [
        "posting_date",
        "cheque_date"
      ]
    },
    "output": "frappe.get_all('Bank Clearance Detail', filters=[['posting_date', '<', 'cheque_date']], fields=['posting_date', 'cheque_date'])"
  },
  {
    "input": {
      "doctype": "Market Segment",
      "question": "Give me a list of all market segments we\u2019ve created.",
      "fields": [
        "market_segment"
      ]
    },
    "output": "frappe.get_all('Market Segment', fields=['market_segment'])"
  },
  {
    "input": {
      "doctype": "Market Segment",
      "question": "Show me the names of all our target market segments.",
      "fields": [
        "market_segment"
      ]
    },
    "output": "frappe.get_all('Market Segment', fields=['market_segment'])"
  },
  {
    "input": {
      "doctype": "Market Segment",
      "question": "Check if we have any defined market segments for our business.",
      "fields": [
        "market_segment"
      ]
    },
    "output": "frappe.db.exists('Market Segment', {})"
  },
  {
    "input": {
      "doctype": "Market Segment",
      "question": "List all market segments registered in the system that contain the word 'Retail'.",
      "fields": [
        "market_segment"
      ]
    },
    "output": "frappe.get_all('Market Segment', filters={'market_segment': ['like', '%Retail%']}, fields=['market_segment'])"
  },
  {
    "input": {
      "doctype": "Bank Clearance Detail",
      "question": "List entries where the posting date is before the cheque date.",
      "fields": [
        "posting_date",
        "cheque_date"
      ]
    },
    "output": "frappe.get_all('Bank Clearance Detail', filters=[['posting_date', '<', 'cheque_date']], fields=['posting_date', 'cheque_date'])"
  },
  {
    "input": {
      "doctype": "Market Segment",
      "question": "Show all market segments we\u2019ve added so far.",
      "fields": [
        "market_segment"
      ]
    },
    "output": "frappe.get_all('Market Segment', fields=['market_segment'])"
  },
  {
    "input": {
      "doctype": "Market Segment",
      "question": "Get the names of all our target market segments.",
      "fields": [
        "market_segment"
      ]
    },
    "output": "frappe.get_all('Market Segment', fields=['market_segment'])"
  },
  {
    "input": {
      "doctype": "Market Segment",
      "question": "Check if we have any market segments added in the system.",
      "fields": [
        "market_segment"
      ]
    },
    "output": "frappe.db.exists('Market Segment', {})"
  },
  {
    "input": {
      "doctype": "Market Segment",
      "question": "Show me market segments that include the word 'Retail'.",
      "fields": [
        "market_segment"
      ]
    },
    "output": "frappe.get_all('Market Segment', filters={'market_segment': ['like', '%Retail%']}, fields=['market_segment'])"
  },
  {
    "input": {
      "doctype": "Bank Transaction Mapping",
      "question": "Show me where we\u2019ve mapped bank file columns to our system fields.",
      "fields": [
        "file_field",
        "bank_transaction_field"
      ]
    },
    "output": "frappe.get_all('Bank Transaction Mapping', fields=['file_field', 'bank_transaction_field'])"
  },
  {
    "input": {
      "doctype": "Bank Transaction Mapping",
      "question": "List all mappings between bank file fields and ERP bank fields.",
      "fields": [
        "file_field",
        "bank_transaction_field"
      ]
    },
    "output": "frappe.get_all('Bank Transaction Mapping', fields=['file_field', 'bank_transaction_field'])"
  },
  {
    "input": {
      "doctype": "Bank Transaction Mapping",
      "question": "Show me if we\u2019ve mapped any CSV columns from a bank file to internal fields.",
      "fields": [
        "file_field",
        "bank_transaction_field"
      ]
    },
    "output": "frappe.db.exists('Bank Transaction Mapping', {})"
  },
  {
    "input": {
      "doctype": "Bank Transaction Mapping",
      "question": "Find the row where the transaction date field from the bank file is mapped.",
      "fields": [
        "file_field",
        "bank_transaction_field"
      ]
    },
    "output": "frappe.get_all('Bank Transaction Mapping', filters={'file_field': ['like', '%transaction date%']}, fields=['file_field', 'bank_transaction_field'])"
  },
  {
    "input": {
      "doctype": "Bank Transaction Mapping",
      "question": "List all entries that define how we map bank statement fields into the system.",
      "fields": [
        "file_field",
        "bank_transaction_field"
      ]
    },
    "output": "frappe.get_all('Bank Transaction Mapping', fields=['file_field', 'bank_transaction_field'])"
  },
  {
    "input": {
      "doctype": "Bank Transaction Mapping",
      "question": "Check how each column in the bank file is mapped to ERP transaction fields.",
      "fields": [
        "file_field",
        "bank_transaction_field"
      ]
    },
    "output": "frappe.get_all('Bank Transaction Mapping', fields=['file_field', 'bank_transaction_field'])"
  },
  {
    "input": {
      "doctype": "Bank Transaction Mapping",
      "question": "Show the mapping setup between bank file columns and ERP fields.",
      "fields": [
        "file_field",
        "bank_transaction_field"
      ]
    },
    "output": "frappe.get_all('Bank Transaction Mapping', fields=['file_field', 'bank_transaction_field'])"
  },
  {
    "input": {
      "doctype": "Bank Transaction Mapping",
      "question": "Find how the 'amount' column from bank data is mapped in our system.",
      "fields": [
        "file_field",
        "bank_transaction_field"
      ]
    },
    "output": "frappe.get_all('Bank Transaction Mapping', filters={'file_field': ['like', '%amount%']}, fields=['file_field', 'bank_transaction_field'])"
  },
  {
    "input": {
      "doctype": "Bank Transaction Mapping",
      "question": "Check if we\u2019ve mapped any bank transaction fields like reference number or account.",
      "fields": [
        "bank_transaction_field"
      ]
    },
    "output": "frappe.get_all('Bank Transaction Mapping', filters=[['bank_transaction_field', 'in', ['reference number', 'account']]], fields=['bank_transaction_field'])"
  },
  {
    "input": {
      "doctype": "Bank Transaction Mapping",
      "question": "Show where we\u2019ve defined how to interpret the bank file during import.",
      "fields": [
        "file_field",
        "bank_transaction_field"
      ]
    },
    "output": "frappe.get_all('Bank Transaction Mapping', fields=['file_field', 'bank_transaction_field'])"
  },
  {
    "input": {
      "doctype": "Bank Transaction Mapping",
      "question": "Show where the bank file column is mapped to the transaction type in our system.",
      "fields": [
        "file_field",
        "bank_transaction_field"
      ]
    },
    "output": "frappe.get_all('Bank Transaction Mapping', filters={'bank_transaction_field': ['like', '%transaction type%']}, fields=['file_field', 'bank_transaction_field'])"
  },
  {
    "input": {
      "doctype": "Bank Transaction Mapping",
      "question": "Check if we have any mappings from external bank fields to ERP fields.",
      "fields": [
        "file_field",
        "bank_transaction_field"
      ]
    },
    "output": "frappe.db.exists('Bank Transaction Mapping', {})"
  },
  {
    "input": {
      "doctype": "Bank Clearance Detail",
      "question": "Count how many cheques were cleared between March 1 and March 31.",
      "fields": [
        "clearance_date"
      ]
    },
    "output": "frappe.db.count('Bank Clearance Detail', filters=[['clearance_date', '>=', '2025-03-01'], ['clearance_date', '<=', '2025-03-31']])"
  },
  {
    "input": {
      "doctype": "Lost Reason Detail",
      "question": "List all the reasons why we lost recent opportunities.",
      "fields": [
        "lost_reason"
      ]
    },
    "output": "frappe.get_all('Lost Reason Detail', fields=['lost_reason'])"
  },
  {
    "input": {
      "doctype": "Lost Reason Detail",
      "question": "Get all lost reasons used in recent deals.",
      "fields": [
        "lost_reason"
      ]
    },
    "output": "frappe.get_all('Lost Reason Detail', fields=['lost_reason'])"
  },
  {
    "input": {
      "doctype": "Lost Reason Detail",
      "question": "Show me all lost reason details tied to failed opportunities this quarter.",
      "fields": [
        "lost_reason"
      ]
    },
    "output": "frappe.get_all('Lost Reason Detail', fields=['lost_reason'])"
  },
  {
    "input": {
      "doctype": "Bank Account Subtype",
      "question": "What are the available subtypes for bank accounts in our system?",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.get_all('Bank Account Subtype', fields=['account_subtype'])"
  },
  {
    "input": {
      "doctype": "Bank Account Subtype",
      "question": "Show me a list of all defined bank account subtypes.",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.get_all('Bank Account Subtype', fields=['account_subtype'])"
  },
  {
    "input": {
      "doctype": "Bank Account Subtype",
      "question": "List the subtypes configured under bank account settings.",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.get_all('Bank Account Subtype', fields=['account_subtype'])"
  },
  {
    "input": {
      "doctype": "Bank Account Subtype",
      "question": "Check if we have a 'Savings' or 'Current' subtype in our bank account setup.",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.get_all('Bank Account Subtype', filters={['account_subtype', 'in', ['Savings', 'Current']]}, fields=['account_subtype'])"
  },
  {
    "input": {
      "doctype": "Bank Account Subtype",
      "question": "List all custom bank account subtypes added for our company.",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.get_all('Bank Account Subtype', fields=['account_subtype'])"
  },
  {
    "input": {
      "doctype": "Bank Account Subtype",
      "question": "Check if there's a specific subtype for credit card accounts.",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.get_all('Bank Account Subtype', filters={'account_subtype': ['like', '%credit card%']}, fields=['account_subtype'])"
  },
  {
    "input": {
      "doctype": "Bank Account Subtype",
      "question": "Show the subtype classifications for different bank accounts.",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.get_all('Bank Account Subtype', fields=['account_subtype'])"
  },
  {
    "input": {
      "doctype": "Bank Account Subtype",
      "question": "Check if bank accounts are categorized by subtype anywhere in the system.",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.db.exists('Bank Account Subtype', {})"
  },
  {
    "input": {
      "doctype": "Bank Account Subtype",
      "question": "List any subtypes like 'Overdraft' and 'Cash Credit' if they're in ERPNext.",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.get_all('Bank Account Subtype', filters={'account_subtype': ['in', ['Overdraft', 'Cash Credit']]}, fields=['account_subtype'])"
  },
  {
    "input": {
      "doctype": "Bank Account Subtype",
      "question": "Show how bank accounts are grouped by subtype in our configuration.",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.get_all('Bank Account Subtype', fields=['account_subtype'])"
  },
  {
    "input": {
      "doctype": "Bank Account Subtype",
      "question": "Check if our ERP system stores subtypes for different bank account types.",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.db.exists('Bank Account Subtype', {})"
  },
  {
    "input": {
      "doctype": "Bank Account Subtype",
      "question": "Which document holds the labels for bank account subtypes?",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.get_all('Bank Account Subtype', fields=['account_subtype'])"
  },
  {
    "input": {
      "doctype": "Lost Reason Detail",
      "question": "Show me the lost reasons tied to sales we didn\u2019t win.",
      "fields": [
        "lost_reason"
      ]
    },
    "output": "frappe.get_all('Lost Reason Detail', fields=['lost_reason'])"
  },
  {
    "input": {
      "doctype": "Lost Reason Detail",
      "question": "Get all the reasons we lost opportunities in the last 6 months.",
      "fields": [
        "lost_reason"
      ]
    },
    "output": "frappe.get_all('Lost Reason Detail', fields=['lost_reason'])"
  },
  {
    "input": {
      "doctype": "Item Tax Template Detail",
      "question": "Show me the tax accounts applied in each item tax template.",
      "fields": [
        "tax_type"
      ]
    },
    "output": "frappe.get_all('Item Tax Template Detail', fields=['tax_type'])"
  },
  {
    "input": {
      "doctype": "Item Tax Template Detail",
      "question": "List the tax rate configured for each item.",
      "fields": [
        "tax_rate"
      ]
    },
    "output": "frappe.get_all('Item Tax Template Detail', fields=['tax_rate'])"
  },
  {
    "input": {
      "doctype": "Item Tax Template Detail",
      "question": "Which tax type is linked to the 18% GST rate?",
      "fields": [
        "tax_type",
        "tax_rate"
      ]
    },
    "output": "frappe.get_all('Item Tax Template Detail', filters={'tax_rate': 18}, fields=['tax_type'])"
  },
  {
    "input": {
      "doctype": "Item Tax Template Detail",
      "question": "Check if any item tax templates have no tax rate specified.",
      "fields": [
        "tax_type",
        "tax_rate"
      ]
    },
    "output": "frappe.get_all('Item Tax Template Detail', filters={'tax_rate': ['=', '']}, fields=['tax_type'])"
  },
  {
    "input": {
      "doctype": "Item Tax Template Detail",
      "question": "List all item tax template details that use the 'Sales - TX' account.",
      "fields": [
        "tax_type"
      ]
    },
    "output": "frappe.get_all('Item Tax Template Detail', filters={'tax_type': 'Sales - TX'}, fields=['tax_type'])"
  },
  {
    "input": {
      "doctype": "Item Tax Template Detail",
      "question": "View the tax type and rate for all item tax templates.",
      "fields": [
        "tax_type",
        "tax_rate"
      ]
    },
    "output": "frappe.get_all('Item Tax Template Detail', fields=['tax_type', 'tax_rate'])"
  },
  {
    "input": {
      "doctype": "Item Tax Template Detail",
      "question": "Show tax types with rates greater than 15% in item tax templates.",
      "fields": [
        "tax_type",
        "tax_rate"
      ]
    },
    "output": "frappe.get_all('Item Tax Template Detail', filters=[['tax_rate', '>', 15]], fields=['tax_type', 'tax_rate'])"
  },
  {
    "input": {
      "doctype": "Item Tax Template Detail",
      "question": "Find entries where the 'Output VAT' account is used.",
      "fields": [
        "tax_type"
      ]
    },
    "output": "frappe.get_all('Item Tax Template Detail', filters={'tax_type': 'Output VAT'}, fields=['tax_type'])"
  },
  {
    "input": {
      "doctype": "Item Tax Template Detail",
      "question": "Show item tax template entries where the tax rate is missing.",
      "fields": [
        "tax_type",
        "tax_rate"
      ]
    },
    "output": "frappe.get_all('Item Tax Template Detail', filters={'tax_rate': ['=', '']}, fields=['tax_type'])"
  },
  {
    "input": {
      "doctype": "Item Tax Template Detail",
      "question": "Check if multiple tax types are linked to a single item tax template.",
      "fields": [
        "tax_type"
      ]
    },
    "output": "frappe.get_all('Item Tax Template Detail', fields=['tax_type'])"
  },
  {
    "input": {
      "doctype": "Item Tax Template Detail",
      "question": "Get the tax rate for items under the 'Standard Rate Template'.",
      "fields": [
        "tax_type",
        "tax_rate"
      ]
    },
    "output": "frappe.get_all('Item Tax Template Detail', filters={'tax_type': 'Standard Rate Template'}, fields=['tax_rate'])"
  },
  {
    "input": {
      "doctype": "Item Tax Template Detail",
      "question": "See if we use different tax accounts across templates.",
      "fields": [
        "tax_type"
      ]
    },
    "output": "frappe.get_all('Item Tax Template Detail', fields=['tax_type'])"
  },
  {
    "input": {
      "doctype": "Lost Reason Detail",
      "question": "Check how many opportunities were marked lost due to high pricing.",
      "fields": [
        "lost_reason"
      ]
    },
    "output": "frappe.db.count('Lost Reason Detail', filters={'lost_reason': 'High Pricing'})"
  },
  {
    "input": {
      "doctype": "Lost Reason Detail",
      "question": "Give me a list of all unique opportunity lost reasons.",
      "fields": [
        "lost_reason"
      ]
    },
    "output": "frappe.get_all('Lost Reason Detail', fields=['lost_reason'])"
  },
  {
    "input": {
      "doctype": "Employee Group",
      "question": "Can you show me all the employee groups we\u2019ve created so far?",
      "fields": [
        "employee_group_name"
      ]
    },
    "output": "frappe.get_all('Employee Group', fields=['employee_group_name'])"
  },
  {
    "input": {
      "doctype": "Employee Group",
      "question": "Which group is assigned to our warehouse staff?",
      "fields": [
        "employee_group_name"
      ]
    },
    "output": "frappe.get_all('Employee Group', filters={'employee_group_name': ['like', '%warehouse%']}, fields=['employee_group_name'])"
  },
  {
    "input": {
      "doctype": "Employee Group",
      "question": "List the employees in the Logistics employee group.",
      "fields": [
        "employee_group_name",
        "employee_list"
      ]
    },
    "output": "frappe.get_all('Employee Group', filters={'employee_group_name': 'Logistics'}, fields=['employee_list'])"
  },
  {
    "input": {
      "doctype": "Employee Group",
      "question": "Do we have an employee group for our temporary staff?",
      "fields": [
        "employee_group_name"
      ]
    },
    "output": "frappe.db.exists('Employee Group', {'employee_group_name': ['like', '%temporary%']})"
  },
  {
    "input": {
      "doctype": "Employee Group",
      "question": "Which employees are part of the 'Sales Team A' group?",
      "fields": [
        "employee_group_name",
        "employee_list"
      ]
    },
    "output": "frappe.get_all('Employee Group', filters={'employee_group_name': 'Sales Team A'}, fields=['employee_list'])"
  },
  {
    "input": {
      "doctype": "Employee Group",
      "question": "Show me the list of employee groups that include at least one member.",
      "fields": [
        "employee_group_name",
        "employee_list"
      ]
    },
    "output": "frappe.get_all('Employee Group', filters={'employee_list': ['!=', '']}, fields=['employee_group_name'])"
  },
  {
    "input": {
      "doctype": "Employee Group",
      "question": "How many employee groups are defined in our system?",
      "fields": [
        "employee_group_name"
      ]
    },
    "output": "frappe.db.count('Employee Group')"
  },
  {
    "input": {
      "doctype": "Employee Group",
      "question": "Is John Smith part of any employee group?",
      "fields": [
        "employee_list"
      ]
    },
    "output": "frappe.db.exists('Employee Group', {'employee_list': ['like', '%John Smith%']})"
  },
  {
    "input": {
      "doctype": "Employee Group",
      "question": "Find all employee groups with names starting with 'Admin'.",
      "fields": [
        "employee_group_name"
      ]
    },
    "output": "frappe.get_all('Employee Group', filters={'employee_group_name': ['like', 'Admin%']}, fields=['employee_group_name'])"
  },
  {
    "input": {
      "doctype": "Employee Group",
      "question": "Can I see a breakdown of employees under each employee group?",
      "fields": [
        "employee_group_name",
        "employee_list"
      ]
    },
    "output": "frappe.get_all('Employee Group', fields=['employee_group_name', 'employee_list'])"
  },
  {
    "input": {
      "doctype": "Employee Group",
      "question": "Which employee group does our support staff belong to?",
      "fields": [
        "employee_group_name",
        "employee_list"
      ]
    },
    "output": "frappe.get_all('Employee Group', filters={'employee_list': ['like', '%Support Staff%']}, fields=['employee_group_name'])"
  },
  {
    "input": {
      "doctype": "Lost Reason Detail",
      "question": "Which reasons were assigned when deals didn\u2019t go through?",
      "fields": [
        "lost_reason"
      ]
    },
    "output": "frappe.get_all('Lost Reason Detail', fields=['lost_reason'])"
  },
  {
    "input": {
      "doctype": "Lost Reason Detail",
      "question": "Are there any trends in opportunity losses based on lost reason data?",
      "fields": [
        "lost_reason"
      ]
    },
    "output": "frappe.get_all('Lost Reason Detail', fields=['lost_reason'])"
  },
  {
    "input": {
      "doctype": "Lost Reason Detail",
      "question": "Can I export all lost reasons linked to lost opportunities for review?",
      "fields": [
        "lost_reason"
      ]
    },
    "output": "frappe.get_list('Lost Reason Detail', fields=['lost_reason'], limit_page_length=1000)"
  },
  {
    "input": {
      "doctype": "Lost Reason Detail",
      "question": "Which lost reason was recorded for our biggest failed deal?",
      "fields": [
        "lost_reason"
      ]
    },
    "output": "frappe.get_all('Lost Reason Detail', fields=['lost_reason'], order_by='idx desc', limit=1)"
  },
  {
    "input": {
      "doctype": "Lost Reason Detail",
      "question": "How often is 'customer chose competitor' marked as a lost reason?",
      "fields": [
        "lost_reason"
      ]
    },
    "output": "frappe.db.count('Lost Reason Detail', filters={'lost_reason': 'Customer Chose Competitor'})"
  },
  {
    "input": {
      "doctype": "Workspace Chart",
      "question": "How many workspace charts are configured in the system?",
      "fields": [
        "chart_name"
      ]
    },
    "output": "frappe.db.count('Workspace Chart')"
  },
  {
    "input": {
      "doctype": "Workspace Chart",
      "question": "Does a chart named 'Sales Overview' exist in the system?",
      "fields": [
        "chart_name"
      ]
    },
    "output": "frappe.db.exists('Workspace Chart', {'chart_name': 'Sales Overview'})"
  },
  {
    "input": {
      "doctype": "Workspace Chart",
      "question": "List all workspace charts with a label containing the word 'Performance'.",
      "fields": [
        "label",
        "chart_name"
      ]
    },
    "output": "frappe.get_all('Workspace Chart', filters={'label': ['like', '%Performance%']}, fields=['chart_name', 'label'])"
  },
  {
    "input": {
      "doctype": "Workspace Chart",
      "question": "What is the label of the chart named 'Daily Metrics'?",
      "fields": [
        "chart_name",
        "label"
      ]
    },
    "output": "frappe.db.get_value('Workspace Chart', {'chart_name': 'Daily Metrics'}, 'label')"
  },
  {
    "input": {
      "doctype": "Auto Repeat",
      "question": "List all auto-repeat setups scheduled to run weekly.",
      "fields": [
        "frequency"
      ]
    },
    "output": "frappe.get_all('Auto Repeat', filters={'frequency': 'Weekly'}, fields=['reference_doctype', 'reference_document', 'start_date', 'frequency'])"
  },
  {
    "input": {
      "doctype": "Auto Repeat",
      "question": "How many auto-repeat tasks are active in April 2025?",
      "fields": [
        "start_date"
      ]
    },
    "output": "frappe.db.count('Auto Repeat', filters=[['start_date', 'between', ['2025-04-01', '2025-04-30']]])"
  },
  {
    "input": {
      "doctype": "Auto Repeat",
      "question": "Do we have any auto-repeat configurations without an end date?",
      "fields": [
        "end_date"
      ]
    },
    "output": "frappe.db.exists('Auto Repeat', {'end_date': ''})"
  },
  {
    "input": {
      "doctype": "Auto Repeat",
      "question": "What is the next scheduled date for any auto-repeat task?",
      "fields": [
        "next_schedule_date"
      ]
    },
    "output": "frappe.get_all('Auto Repeat', fields=['next_schedule_date'], order_by='next_schedule_date asc', limit=1)"
  },
  {
    "input": {
      "doctype": "Auto Repeat",
      "question": "Which auto-repeat entries have email notifications enabled?",
      "fields": [
        "notify_by_email"
      ]
    },
    "output": "frappe.get_all('Auto Repeat', filters={'notify_by_email': 1}, fields=['reference_doctype', 'reference_document', 'notify_by_email'])"
  },
  {
    "input": {
      "doctype": "Auto Repeat",
      "question": "List auto-repeat tasks that include a reminder template.",
      "fields": [
        "template"
      ]
    },
    "output": "frappe.get_all('Auto Repeat', filters={'template': ['!=', '']}, fields=['template', 'subject'])"
  },
  {
    "input": {
      "doctype": "Auto Repeat",
      "question": "Get the email recipients configured for each auto-repeat task.",
      "fields": [
        "recipients"
      ]
    },
    "output": "frappe.get_all('Auto Repeat', fields=['reference_doctype', 'recipients'])"
  },
  {
    "input": {
      "doctype": "Auto Repeat",
      "question": "Fetch contact emails set using the get_contacts option.",
      "fields": [
        "get_contacts"
      ]
    },
    "output": "frappe.get_all('Auto Repeat', filters={'get_contacts': 1}, fields=['recipients', 'get_contacts'])"
  },
  {
    "input": {
      "doctype": "Auto Repeat",
      "question": "How many auto-repeat entries are linked to Sales Invoice or Purchase Invoice?",
      "fields": [
        "reference_doctype"
      ]
    },
    "output": "frappe.db.count('Auto Repeat', filters={'reference_doctype': ['in', ['Sales Invoice', 'Purchase Invoice']]})"
  },
  {
    "input": {
      "doctype": "Auto Repeat",
      "question": "Get preview messages used in existing auto-repeat email templates.",
      "fields": [
        "preview_message"
      ]
    },
    "output": "frappe.get_all('Auto Repeat', filters={'preview_message': ['!=', '']}, fields=['preview_message', 'reference_doctype'])"
  },
  {
    "input": {
      "doctype": "Auto Repeat",
      "question": "Which print formats are linked to auto-repeat records?",
      "fields": [
        "print_format"
      ]
    },
    "output": "frappe.get_all('Auto Repeat', filters={'print_format': ['!=', '']}, fields=['print_format', 'reference_doctype'])"
  },
  {
    "input": {
      "doctype": "UAE VAT Settings",
      "question": "Fetch the UAE VAT account configuration for Gulf Trading LLC.",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.get_value('UAE VAT Settings', {'company': 'Gulf Trading LLC'}, 'uae_vat_accounts')"
  },
  {
    "input": {
      "doctype": "Global Search Settings",
      "question": "Which doctypes are currently allowed in global search?",
      "fields": [
        "allowed_in_global_search"
      ]
    },
    "output": "frappe.get_all('Global Search Settings', filters={'allowed_in_global_search': 1}, fields=['allowed_in_global_search'])"
  },
  {
    "input": {
      "doctype": "Global Search Settings",
      "question": "List all doctypes that are currently included in global search.",
      "fields": [
        "allowed_in_global_search"
      ]
    },
    "output": "frappe.get_all('Global Search Settings', filters={'allowed_in_global_search': 1}, fields=['name', 'allowed_in_global_search'])"
  },
  {
    "input": {
      "doctype": "Global Search Settings",
      "question": "Is the Item doctype enabled for global search?",
      "fields": [
        "allowed_in_global_search"
      ]
    },
    "output": "frappe.db.exists('Global Search Settings', {'name': 'Item', 'allowed_in_global_search': 1})"
  },
  {
    "input": {
      "doctype": "Global Search Settings",
      "question": "How many doctypes are excluded from global search?",
      "fields": [
        "allowed_in_global_search"
      ]
    },
    "output": "frappe.db.count('Global Search Settings', filters={'allowed_in_global_search': 0})"
  },
  {
    "input": {
      "doctype": "Global Search Settings",
      "question": "Get all doctypes allowed in global search that include the word 'Customer'.",
      "fields": [
        "name",
        "allowed_in_global_search"
      ]
    },
    "output": "frappe.get_all('Global Search Settings', filters={'allowed_in_global_search': 1, 'name': ['like', '%Customer%']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Global Search Settings",
      "question": "Check if both Customer and Supplier are marked as searchable globally.",
      "fields": [
        "allowed_in_global_search"
      ]
    },
    "output": "all([frappe.db.exists('Global Search Settings', {'name': 'Customer', 'allowed_in_global_search': 1}), frappe.db.exists('Global Search Settings', {'name': 'Supplier', 'allowed_in_global_search': 1})])"
  },
  {
    "input": {
      "doctype": "Global Search Settings",
      "question": "List all doctypes currently enabled for the universal search bar.",
      "fields": [
        "allowed_in_global_search"
      ]
    },
    "output": "frappe.get_all('Global Search Settings', filters={'allowed_in_global_search': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Global Search Settings",
      "question": "How many doctypes have search indexing turned off?",
      "fields": [
        "allowed_in_global_search"
      ]
    },
    "output": "frappe.db.count('Global Search Settings', filters={'allowed_in_global_search': 0})"
  },
  {
    "input": {
      "doctype": "Global Search Settings",
      "question": "Which doctypes include the word 'Lead' and are visible in global search?",
      "fields": [
        "allowed_in_global_search"
      ]
    },
    "output": "frappe.get_all('Global Search Settings', filters={'allowed_in_global_search': 1, 'name': ['like', '%Lead%']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Global Search Settings",
      "question": "Check if the 'Opportunity' doctype is excluded from global search.",
      "fields": [
        "allowed_in_global_search"
      ]
    },
    "output": "not frappe.db.exists('Global Search Settings', {'name': 'Opportunity', 'allowed_in_global_search': 1})"
  },
  {
    "input": {
      "doctype": "Availability Of Slots",
      "question": "What time slots are available on Mondays?",
      "fields": [
        "day_of_week",
        "from_time",
        "to_time"
      ]
    },
    "output": "frappe.get_all('Availability Of Slots', filters={'day_of_week': 'Monday'}, fields=['from_time', 'to_time'])"
  },
  {
    "input": {
      "doctype": "Availability Of Slots",
      "question": "List all working hours set for each weekday.",
      "fields": [
        "day_of_week",
        "from_time",
        "to_time"
      ]
    },
    "output": "frappe.get_all('Availability Of Slots', fields=['day_of_week', 'from_time', 'to_time'])"
  },
  {
    "input": {
      "doctype": "Availability Of Slots",
      "question": "What time slots are available for Friday bookings?",
      "fields": [
        "day_of_week",
        "from_time",
        "to_time"
      ]
    },
    "output": "frappe.get_all('Availability Of Slots', filters={'day_of_week': 'Friday'}, fields=['from_time', 'to_time'])"
  },
  {
    "input": {
      "doctype": "Availability Of Slots",
      "question": "Show me available time ranges defined for each day of the week.",
      "fields": [
        "day_of_week",
        "from_time",
        "to_time"
      ]
    },
    "output": "frappe.get_all('Availability Of Slots', fields=['day_of_week', 'from_time', 'to_time'])"
  },
  {
    "input": {
      "doctype": "Availability Of Slots",
      "question": "How many time slots are defined for each weekday?",
      "fields": [
        "day_of_week"
      ]
    },
    "output": "frappe.get_all('Availability Of Slots', fields=['day_of_week'], group_by='day_of_week', distinct=True)"
  },
  {
    "input": {
      "doctype": "Availability Of Slots",
      "question": "Get all time slots configured for Saturday.",
      "fields": [
        "day_of_week",
        "from_time",
        "to_time"
      ]
    },
    "output": "frappe.get_all('Availability Of Slots', filters={'day_of_week': 'Saturday'}, fields=['from_time', 'to_time'])"
  },
  {
    "input": {
      "doctype": "Availability Of Slots",
      "question": "Check if the system has time ranges set for Sunday.",
      "fields": [
        "day_of_week"
      ]
    },
    "output": "frappe.db.exists('Availability Of Slots', {'day_of_week': 'Sunday'})"
  },
  {
    "input": {
      "doctype": "Availability Of Slots",
      "question": "Which slots fall outside standard working hours (before 09:00 or after 18:00)?",
      "fields": [
        "from_time",
        "to_time"
      ]
    },
    "output": "frappe.get_all('Availability Of Slots', filters=[['from_time', '<', '09:00'], ['to_time', '>', '18:00']], fields=['day_of_week', 'from_time', 'to_time'])"
  },
  {
    "input": {
      "doctype": "Availability Of Slots",
      "question": "Get weekday-wise time ranges where each day has a different availability.",
      "fields": [
        "day_of_week",
        "from_time",
        "to_time"
      ]
    },
    "output": "frappe.get_all('Availability Of Slots', fields=['day_of_week', 'from_time', 'to_time'], distinct=True)"
  },
  {
    "input": {
      "doctype": "POS Field",
      "question": "List all field labels configured for the POS screen.",
      "fields": [
        "label"
      ]
    },
    "output": "frappe.get_all('POS Field', fields=['label'])"
  },
  {
    "input": {
      "doctype": "POS Field",
      "question": "Which fields in POS have default values set?",
      "fields": [
        "fieldname",
        "default_value"
      ]
    },
    "output": "frappe.get_all('POS Field', filters={['default_value', '!=', '']}, fields=['fieldname', 'default_value'])"
  },
  {
    "input": {
      "doctype": "POS Field",
      "question": "Show me all POS fields that are marked as mandatory.",
      "fields": [
        "fieldname",
        "reqd"
      ]
    },
    "output": "frappe.get_all('POS Field', filters={'reqd': 1}, fields=['fieldname'])"
  },
  {
    "input": {
      "doctype": "POS Field",
      "question": "Which fields are set as read-only in the POS interface?",
      "fields": [
        "fieldname",
        "read_only"
      ]
    },
    "output": "frappe.get_all('POS Field', filters={'read_only': 1}, fields=['fieldname'])"
  },
  {
    "input": {
      "doctype": "POS Field",
      "question": "Get the field types assigned to each POS field.",
      "fields": [
        "fieldname",
        "fieldtype"
      ]
    },
    "output": "frappe.get_all('POS Field', fields=['fieldname', 'fieldtype'])"
  },
  {
    "input": {
      "doctype": "POS Field",
      "question": "List all POS fields with dropdown options configured.",
      "fields": [
        "fieldname",
        "options"
      ]
    },
    "output": "frappe.get_all('POS Field', filters={['fieldtype', '=', 'Select']}, fields=['fieldname', 'options'])"
  },
  {
    "input": {
      "doctype": "POS Field",
      "question": "Which fields are currently visible in the POS configuration?",
      "fields": [
        "fieldname",
        "label"
      ]
    },
    "output": "frappe.get_all('POS Field', fields=['fieldname', 'label'])"
  },
  {
    "input": {
      "doctype": "POS Field",
      "question": "Which field label is used for the billing section in POS?",
      "fields": [
        "fieldname",
        "label"
      ]
    },
    "output": "frappe.get_all('POS Field', filters={['label', 'like', '%billing%']}, fields=['fieldname', 'label'])"
  },
  {
    "input": {
      "doctype": "POS Field",
      "question": "What field types are available for customizing the POS form?",
      "fields": [
        "fieldtype"
      ]
    },
    "output": "frappe.get_all('POS Field', distinct=True, fields=['fieldtype'])"
  },
  {
    "input": {
      "doctype": "POS Field",
      "question": "Show me dropdown fields in POS along with their default selections.",
      "fields": [
        "fieldname",
        "fieldtype",
        "default_value"
      ]
    },
    "output": "frappe.get_all('POS Field', filters={['fieldtype', '=', 'Select']}, fields=['fieldname', 'default_value'])"
  },
  {
    "input": {
      "doctype": "Accounting Dimension Detail",
      "question": "Show me the default accounting dimensions set for each company.",
      "fields": [
        "company",
        "default_dimension"
      ]
    },
    "output": "frappe.get_all('Accounting Dimension Detail', fields=['company', 'default_dimension'])"
  },
  {
    "input": {
      "doctype": "Accounting Dimension Detail",
      "question": "Which dimensions are mandatory for profit and loss statements?",
      "fields": [
        "default_dimension",
        "mandatory_for_pl"
      ]
    },
    "output": "frappe.get_all('Accounting Dimension Detail', filters={'mandatory_for_pl': 1}, fields=['default_dimension'])"
  },
  {
    "input": {
      "doctype": "Accounting Dimension Detail",
      "question": "List all balance sheet dimensions where tagging is mandatory.",
      "fields": [
        "default_dimension",
        "mandatory_for_bs"
      ]
    },
    "output": "frappe.get_all('Accounting Dimension Detail', filters={'mandatory_for_bs': 1}, fields=['default_dimension'])"
  },
  {
    "input": {
      "doctype": "Accounting Dimension Detail",
      "question": "Which companies have automatic balancing entries enabled for dimensions?",
      "fields": [
        "company",
        "automatically_post_balancing_accounting_entry"
      ]
    },
    "output": "frappe.get_all('Accounting Dimension Detail', filters={'automatically_post_balancing_accounting_entry': 1}, fields=['company'])"
  },
  {
    "input": {
      "doctype": "Accounting Dimension Detail",
      "question": "Get the offsetting account linked with each accounting dimension.",
      "fields": [
        "default_dimension",
        "offsetting_account"
      ]
    },
    "output": "frappe.get_all('Accounting Dimension Detail', fields=['default_dimension', 'offsetting_account'])"
  },
  {
    "input": {
      "doctype": "Accounting Dimension Detail",
      "question": "Find all dimension settings configured for 'Marlin Biocomposites Pvt. Ltd.'.",
      "fields": [
        "company",
        "default_dimension",
        "mandatory_for_bs",
        "mandatory_for_pl"
      ]
    },
    "output": "frappe.get_all('Accounting Dimension Detail', filters={'company': 'Marlin Biocomposites Pvt. Ltd.'}, fields=['default_dimension', 'mandatory_for_bs', 'mandatory_for_pl'])"
  },
  {
    "input": {
      "doctype": "Accounting Dimension Detail",
      "question": "Which document types have custom default dimensions applied?",
      "fields": [
        "reference_document",
        "default_dimension"
      ]
    },
    "output": "frappe.get_all('Accounting Dimension Detail', fields=['reference_document', 'default_dimension'])"
  },
  {
    "input": {
      "doctype": "Accounting Dimension Detail",
      "question": "Are there any reference documents linked to accounting dimensions?",
      "fields": [
        "reference_document"
      ]
    },
    "output": "frappe.get_all('Accounting Dimension Detail', filters={'reference_document': ['!=', '']}, fields=['reference_document'])"
  },
  {
    "input": {
      "doctype": "Accounting Period",
      "question": "Where do I define the start and end dates for a fiscal period?",
      "fields": [
        "start_date",
        "end_date"
      ]
    },
    "output": "frappe.get_all('Accounting Period', fields=['start_date', 'end_date'])"
  },
  {
    "input": {
      "doctype": "Accounting Period",
      "question": "How can I assign a company to a specific accounting period?",
      "fields": [
        "period_name",
        "company"
      ]
    },
    "output": "frappe.get_all('Accounting Period', fields=['period_name', 'company'])"
  },
  {
    "input": {
      "doctype": "Accounting Period",
      "question": "Where can I view all closed documents within a fiscal period?",
      "fields": [
        "period_name",
        "closed_documents"
      ]
    },
    "output": "frappe.get_all('Accounting Period', fields=['period_name', 'closed_documents'])"
  },
  {
    "input": {
      "doctype": "Accounting Period",
      "question": "Is there a way to restrict entries for closed periods in ERPNext?",
      "fields": [
        "period_name",
        "closed_documents"
      ]
    },
    "output": "frappe.get_all('Accounting Period', filters={'closed_documents': ['!=', '']}, fields=['period_name'])"
  },
  {
    "input": {
      "doctype": "Accounting Period",
      "question": "I want to block certain financial entries after year-end. How do I do that?",
      "fields": [
        "end_date",
        "closed_documents"
      ]
    },
    "output": "frappe.get_all('Accounting Period', filters={'end_date': ['<', 'today']}, fields=['period_name', 'closed_documents'])"
  },
  {
    "input": {
      "doctype": "Accounting Period",
      "question": "How do I define a quarterly period and prevent backdated entries for it?",
      "fields": [
        "start_date",
        "end_date",
        "closed_documents"
      ]
    },
    "output": "frappe.get_all('Accounting Period', filters={'closed_documents': ['!=', '']}, fields=['start_date', 'end_date'])"
  },
  {
    "input": {
      "doctype": "Accounting Period",
      "question": "Where do I close specific documents for a particular accounting period?",
      "fields": [
        "period_name",
        "closed_documents"
      ]
    },
    "output": "frappe.get_all('Accounting Period', fields=['period_name', 'closed_documents'])"
  },
  {
    "input": {
      "doctype": "Accounting Period",
      "question": "Check if there's any defined accounting period for the company 'Zenthos Maritime Holdings'.",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.exists('Accounting Period', {'company': 'Zenthos Maritime Holdings'})"
  },
  {
    "input": {
      "doctype": "Accounting Period",
      "question": "How many accounting periods are configured in total?",
      "fields": [
        "period_name"
      ]
    },
    "output": "frappe.db.count('Accounting Period')"
  },
  {
    "input": {
      "doctype": "Accounting Period",
      "question": "Get the start and end date of the accounting period named 'Q3 Closing FY 2023-24'.",
      "fields": [
        "start_date",
        "end_date"
      ]
    },
    "output": "frappe.db.get_value('Accounting Period', 'Q3 Closing FY 2023-24', ['start_date', 'end_date'])"
  },
  {
    "input": {
      "doctype": "Session Default",
      "question": "Where can I set default values for specific doctypes during a user session?",
      "fields": [
        "ref_doctype"
      ]
    },
    "output": "frappe.get_all('Session Default', fields=['ref_doctype'])"
  },
  {
    "input": {
      "doctype": "Session Default",
      "question": "How do I specify the default document type for a user's session?",
      "fields": [
        "ref_doctype"
      ]
    },
    "output": "frappe.get_all('Session Default', filters={}, fields=['ref_doctype'])"
  },
  {
    "input": {
      "doctype": "Session Default",
      "question": "Check if a default doctype is already defined for this session.",
      "fields": [
        "ref_doctype"
      ]
    },
    "output": "frappe.db.exists('Session Default', {})"
  },
  {
    "input": {
      "doctype": "Session Default",
      "question": "How many session-level default entries are there in total?",
      "fields": [
        "ref_doctype"
      ]
    },
    "output": "frappe.db.count('Session Default')"
  },
  {
    "input": {
      "doctype": "Session Default",
      "question": "Get the default document type for session ID 'USR-SESSION-2024-01'.",
      "fields": [
        "ref_doctype"
      ]
    },
    "output": "frappe.db.get_value('Session Default', 'USR-SESSION-2024-01', 'ref_doctype')"
  },
  {
    "input": {
      "doctype": "Session Default Settings",
      "question": "Where can I manage all session default configurations for my account?",
      "fields": [
        "session_defaults"
      ]
    },
    "output": "frappe.get_all('Session Default Settings', fields=['session_defaults'])"
  },
  {
    "input": {
      "doctype": "Session Default Settings",
      "question": "How do I set up defaults that apply to my session each time I log in?",
      "fields": [
        "session_defaults"
      ]
    },
    "output": "frappe.get_all('Session Default Settings', fields=['session_defaults'])"
  },
  {
    "input": {
      "doctype": "Session Default Settings",
      "question": "Is there a place where I can define multiple default doctypes for sessions?",
      "fields": [
        "session_defaults"
      ]
    },
    "output": "frappe.get_all('Session Default Settings', fields=['session_defaults'])"
  },
  {
    "input": {
      "doctype": "Session Default Settings",
      "question": "Check if session default settings exist for any user.",
      "fields": [
        "session_defaults"
      ]
    },
    "output": "frappe.db.exists('Session Default Settings', {})"
  },
  {
    "input": {
      "doctype": "Session Default Settings",
      "question": "How many users have customized their session default settings?",
      "fields": [
        "session_defaults"
      ]
    },
    "output": "frappe.db.count('Session Default Settings')"
  },
  {
    "input": {
      "doctype": "Session Default Settings",
      "question": "Get the session default settings for user \u2018john.doe@example.com\u2019.",
      "fields": [
        "session_defaults"
      ]
    },
    "output": "frappe.db.get_value('Session Default Settings', 'john.doe@example.com', 'session_defaults')"
  },
  {
    "input": {
      "doctype": "Session Default Settings",
      "question": "List all session defaults where Company is set to 'HTS Qatar'.",
      "fields": [
        "session_defaults"
      ]
    },
    "output": "frappe.get_all('Session Default Settings', filters={ 'session_defaults': ['like', '%HTS Qatar%'] }, fields=['session_defaults'])"
  },
  {
    "input": {
      "doctype": "Session Default Settings",
      "question": "Show me the full session default configuration document for my user.",
      "fields": [
        "session_defaults"
      ]
    },
    "output": "frappe.get_doc('Session Default Settings', 'john.doe@example.com')"
  },
  {
    "input": {
      "doctype": "Session Default Settings",
      "question": "List all session default settings with their document names.",
      "fields": [
        "session_defaults"
      ]
    },
    "output": "frappe.get_list('Session Default Settings', fields=['name', 'session_defaults'])"
  },
  {
    "input": {
      "doctype": "Session Default Settings",
      "question": "List all session default settings with their document names.",
      "fields": [
        "session_defaults"
      ]
    },
    "output": "frappe.get_list('Session Default Settings', fields=['name', 'session_defaults'])"
  },
  {
    "input": {
      "doctype": "Session Default Settings",
      "question": "How many session default settings are defined in total?",
      "fields": [
        "session_defaults"
      ]
    },
    "output": "frappe.db.count('Session Default Settings')"
  },
  {
    "input": {
      "doctype": "Session Default Settings",
      "question": "Check if session default settings exist for any user.",
      "fields": []
    },
    "output": "frappe.db.exists('Session Default Settings', {})"
  },
  {
    "input": {
      "doctype": "Session Default Settings",
      "question": "Fetch the session default settings for user elina.petrova@aerogemindustries.com.",
      "fields": [
        "session_defaults"
      ]
    },
    "output": "frappe.db.get_value('Session Default Settings', 'elina.petrova@aerogemindustries.com', 'session_defaults')"
  },
  {
    "input": {
      "doctype": "Session Default Settings",
      "question": "Get the full session default document for malik.rahman@novacap-group.org.",
      "fields": [
        "session_defaults"
      ]
    },
    "output": "frappe.get_doc('Session Default Settings', 'malik.rahman@novacap-group.org')"
  },
  {
    "input": {
      "doctype": "Campaign Email Schedule",
      "question": "List all campaign email schedules and the templates used.",
      "fields": [
        "email_template",
        "send_after_days"
      ]
    },
    "output": "frappe.get_all('Campaign Email Schedule', fields=['email_template', 'send_after_days'])"
  },
  {
    "input": {
      "doctype": "Campaign Email Schedule",
      "question": "Check if any email schedule exists for template 'Product Re-Engagement Series - Phase 2'.",
      "fields": [
        "email_template"
      ]
    },
    "output": "frappe.db.exists('Campaign Email Schedule', {'email_template': 'Product Re-Engagement Series - Phase 2'})"
  },
  {
    "input": {
      "doctype": "Campaign Email Schedule",
      "question": "How many campaign emails are scheduled with a 3-day delay?",
      "fields": [
        "send_after_days"
      ]
    },
    "output": "frappe.db.count('Campaign Email Schedule', {'send_after_days': 3})"
  },
  {
    "input": {
      "doctype": "Campaign Email Schedule",
      "question": "Fetch the email template set for the schedule with name 'Q2Retention-Blitz-Alpha'.",
      "fields": [
        "email_template"
      ]
    },
    "output": "frappe.db.get_value('Campaign Email Schedule', 'Q2Retention-Blitz-Alpha', 'email_template')"
  },
  {
    "input": {
      "doctype": "Campaign Email Schedule",
      "question": "Get the full details of the campaign email schedule named 'PhaseOne-WarmUp-April'.",
      "fields": [
        "email_template",
        "send_after_days"
      ]
    },
    "output": "frappe.get_doc('Campaign Email Schedule', 'PhaseOne-WarmUp-April')"
  },
  {
    "input": {
      "doctype": "Campaign Email Schedule",
      "question": "Which templates are scheduled to go out exactly 2 days after the campaign starts?",
      "fields": [
        "email_template",
        "send_after_days"
      ]
    },
    "output": "frappe.get_all('Campaign Email Schedule', filters={'send_after_days': 2}, fields=['email_template'])"
  },
  {
    "input": {
      "doctype": "Campaign Email Schedule",
      "question": "How many emails are scheduled to go out more than 3 days into the campaign?",
      "fields": [
        "send_after_days"
      ]
    },
    "output": "frappe.db.count('Campaign Email Schedule', filters=[['send_after_days', '>', 3]])"
  },
  {
    "input": {
      "doctype": "Campaign Email Schedule",
      "question": "Check if there's any schedule entry for the 'Intro Campaign' email template.",
      "fields": [
        "email_template"
      ]
    },
    "output": "frappe.db.exists('Campaign Email Schedule', {'email_template': 'Intro Campaign'})"
  },
  {
    "input": {
      "doctype": "Campaign Email Schedule",
      "question": "Get the delay in days for sending the 'Welcome Follow-Up' email template.",
      "fields": [
        "send_after_days"
      ]
    },
    "output": "frappe.db.get_value('Campaign Email Schedule', {'email_template': 'Welcome Follow-Up'}, 'send_after_days')"
  },
  {
    "input": {
      "doctype": "Campaign Email Schedule",
      "question": "Retrieve the complete campaign email schedule with name 'CES-00012'.",
      "fields": [
        "email_template",
        "send_after_days"
      ]
    },
    "output": "frappe.get_doc('Campaign Email Schedule', 'CES-00012')"
  },
  {
    "input": {
      "doctype": "Manufacturer",
      "question": "List all manufacturers along with their full names and short names.",
      "fields": [
        "manufacturer_name",
        "short_name"
      ]
    },
    "output": "frappe.get_all('Manufacturer', fields=['manufacturer_name', 'short_name'])"
  },
  {
    "input": {
      "doctype": "Manufacturer",
      "question": "How many manufacturers do we currently have in the system?",
      "fields": []
    },
    "output": "frappe.db.count('Manufacturer')"
  },
  {
    "input": {
      "doctype": "Manufacturer",
      "question": "Check if we already have a manufacturer named 'Heliogen BioDynamics Ltd'.",
      "fields": [
        "manufacturer_name"
      ]
    },
    "output": "frappe.db.exists('Manufacturer', {'manufacturer_name': 'Heliogen BioDynamics Ltd'})"
  },
  {
    "input": {
      "doctype": "Manufacturer",
      "question": "Get the country and website of the manufacturer 'OrionFlex Components GmbH'.",
      "fields": [
        "country",
        "website"
      ]
    },
    "output": "frappe.db.get_value('Manufacturer', {'manufacturer_name': 'OrionFlex Components GmbH'}, ['country', 'website'])"
  },
  {
    "input": {
      "doctype": "Manufacturer",
      "question": "Show me all the details of the manufacturer record with ID 'MFR-02147'.",
      "fields": []
    },
    "output": "frappe.get_doc('Manufacturer', 'MFR-02147')"
  },
  {
    "input": {
      "doctype": "Manufacturer",
      "question": "List all manufacturers with their websites and countries.",
      "fields": [
        "manufacturer_name",
        "website",
        "country"
      ]
    },
    "output": "frappe.get_all('Manufacturer', fields=['manufacturer_name', 'website', 'country'])"
  },
  {
    "input": {
      "doctype": "Manufacturer",
      "question": "Do we have a manufacturer called 'Arko Pharma International BV'? ",
      "fields": [
        "manufacturer_name"
      ]
    },
    "output": "frappe.db.exists('Manufacturer', {'manufacturer_name': 'Arko Pharma International BV'})"
  },
  {
    "input": {
      "doctype": "Manufacturer",
      "question": "Fetch all fields for the manufacturer with ID 'MFTR-ADV-0419'.",
      "fields": []
    },
    "output": "frappe.get_doc('Manufacturer', 'MFTR-ADV-0419')"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "Show all defined issue types and their descriptions.",
      "fields": [
        "name",
        "description"
      ]
    },
    "output": "frappe.get_all('Issue Type', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Invoice Discounting",
      "question": "List all invoice discounting records for the company 'Altair Commodities & Finance LLP'.",
      "fields": [
        "company",
        "total_amount",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Invoice Discounting', filters={'company': 'Altair Commodities & Finance LLP'}, fields=['company', 'total_amount', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Invoice Discounting",
      "question": "How many invoice discounting entries do we have?",
      "fields": []
    },
    "output": "frappe.db.count('Invoice Discounting')"
  },
  {
    "input": {
      "doctype": "Invoice Discounting",
      "question": "Get the bank account and short-term loan used in record 'DISC-FINX-0923-A5'.",
      "fields": [
        "bank_account",
        "short_term_loan"
      ]
    },
    "output": "frappe.db.get_value('Invoice Discounting', 'DISC-FINX-0923-A5', ['bank_account', 'short_term_loan'])"
  },
  {
    "input": {
      "doctype": "Invoice Discounting",
      "question": "Where can I view the status of invoice discounting transactions like 'Disbursed' or 'Settled'?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_all('Invoice Discounting', filters={'status': ['in', ['Disbursed', 'Settled']]}, fields=['name', 'status'])"
  },
  {
    "input": {
      "doctype": "Invoice Discounting",
      "question": "How do I capture bank account details when receiving invoice-based loan disbursement?",
      "fields": [
        "bank_account",
        "short_term_loan"
      ]
    },
    "output": "frappe.get_list('Invoice Discounting', fields=['name', 'bank_account', 'short_term_loan'])"
  },
  {
    "input": {
      "doctype": "Invoice Discounting",
      "question": "Is there a place to track bank charges and AR adjustments for invoice discounting?",
      "fields": [
        "bank_charges",
        "accounts_receivable_credit",
        "accounts_receivable_discounted",
        "accounts_receivable_unpaid"
      ]
    },
    "output": "frappe.get_all('Invoice Discounting', fields=['bank_charges', 'accounts_receivable_credit', 'accounts_receivable_discounted', 'accounts_receivable_unpaid'])"
  },
  {
    "input": {
      "doctype": "Invoice Discounting",
      "question": "How can I log invoice-based funding and link it to bank and loan accounts?",
      "fields": [
        "short_term_loan",
        "bank_account"
      ]
    },
    "output": "frappe.get_all('Invoice Discounting', fields=['name', 'short_term_loan', 'bank_account'])"
  },
  {
    "input": {
      "doctype": "Invoice Discounting",
      "question": "Do we have any invoice discounting transactions with bank charges over 1000?",
      "fields": [
        "bank_charges"
      ]
    },
    "output": "frappe.get_list('Invoice Discounting', filters=[['bank_charges', '>', 1000]], fields=['name', 'bank_charges'])"
  },
  {
    "input": {
      "doctype": "Invoice Discounting",
      "question": "How many invoice discounting transactions are linked to the 'HSBC Loan' account?",
      "fields": [
        "short_term_loan"
      ]
    },
    "output": "frappe.db.count('Invoice Discounting', {'short_term_loan': 'HSBC Loan'})"
  },
  {
    "input": {
      "doctype": "Invoice Discounting",
      "question": "Fetch complete record for invoice discounting ID 'INV-DISC-0030'.",
      "fields": []
    },
    "output": "frappe.get_doc('Invoice Discounting', 'INV-DISC-0030')"
  },
  {
    "input": {
      "doctype": "Invoice Discounting",
      "question": "What is the loan account linked to transaction ID 'INV-DISC-0045'?",
      "fields": [
        "short_term_loan"
      ]
    },
    "output": "frappe.get_value('Invoice Discounting', 'INV-DISC-0045', 'short_term_loan')"
  },
  {
    "input": {
      "doctype": "Invoice Discounting",
      "question": "Do we have any invoice discounting record for account 'Citibank Receivables'?",
      "fields": [
        "short_term_loan"
      ]
    },
    "output": "frappe.db.exists('Invoice Discounting', {'short_term_loan': 'Citibank Receivables'})"
  },
  {
    "input": {
      "doctype": "Invoice Discounting",
      "question": "Can I record the loan period and interest details for invoice discounting?",
      "fields": [
        "loan_start_date",
        "loan_period",
        "loan_end_date"
      ]
    },
    "output": "frappe.get_all('Invoice Discounting', fields=['loan_start_date', 'loan_period', 'loan_end_date'])"
  },
  {
    "input": {
      "doctype": "Warehouse Type",
      "question": "Where can I define different categories for my warehouses like cold storage or transit?",
      "fields": [
        "name",
        "description"
      ]
    },
    "output": "frappe.get_list('Warehouse Type', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Warehouse Type",
      "question": "How do I add a label or classification for each warehouse we manage?",
      "fields": [
        "name",
        "description"
      ]
    },
    "output": "frappe.get_doc('Warehouse Type', 'Cold Storage')"
  },
  {
    "input": {
      "doctype": "Warehouse Type",
      "question": "Can I describe the function or specialization of a warehouse?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Warehouse Type', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Warehouse Type",
      "question": "What doctype should I use to set a type like 'finished goods' or 'raw materials' warehouse?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.exists('Warehouse Type', {'name': 'Finished Goods'})"
  },
  {
    "input": {
      "doctype": "Warehouse Type",
      "question": "Where do I configure custom warehouse types with brief descriptions?",
      "fields": [
        "name",
        "description"
      ]
    },
    "output": "frappe.get_all('Warehouse Type', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "How many warehouses are categorized under \u2018Cold Storage\u2019?",
      "fields": [
        "warehouse_type"
      ]
    },
    "output": "frappe.db.count('Warehouse', {'warehouse_type': 'Cold Storage'})"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "List all warehouses tagged as \u2018Transit\u2019 type.",
      "fields": [
        "name",
        "warehouse_type"
      ]
    },
    "output": "frappe.get_list('Warehouse', filters={'warehouse_type': 'Transit'}, fields=['name', 'warehouse_type'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Fetch full details of warehouse named 'Central Depot'.",
      "fields": []
    },
    "output": "frappe.get_doc('Warehouse', 'Central Depot')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "What are the names and types of all operational warehouses?",
      "fields": [
        "name",
        "warehouse_type"
      ]
    },
    "output": "frappe.get_all('Warehouse', fields=['name', 'warehouse_type'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which warehouses were created this month?",
      "fields": [
        "name",
        "creation"
      ]
    },
    "output": "frappe.get_all('Warehouse', filters=[['creation', '>=', frappe.utils.formatdate(frappe.utils.get_first_day(frappe.utils.nowdate()), 'yyyy-MM-dd')]], fields=['name', 'creation'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program",
      "question": "List all loyalty programs active between Jan and Mar 2025.",
      "fields": [
        "loyalty_program_name",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Loyalty Program', filters={ 'from_date': ['>=', '2025-01-01'], 'to_date': ['<=', '2025-03-31'] }, fields=['loyalty_program_name', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program",
      "question": "Fetch full configuration for the program named 'Gold Rewards'.",
      "fields": []
    },
    "output": "frappe.get_doc('Loyalty Program', 'Gold Rewards')"
  },
  {
    "input": {
      "doctype": "Loyalty Program",
      "question": "How many loyalty programs have auto-enrollment enabled?",
      "fields": [
        "auto_opt_in"
      ]
    },
    "output": "frappe.db.count('Loyalty Program', {'auto_opt_in': 1})"
  },
  {
    "input": {
      "doctype": "Loyalty Program",
      "question": "Show all loyalty programs assigned to the 'Retail Customers' group.",
      "fields": [
        "loyalty_program_name",
        "customer_group"
      ]
    },
    "output": "frappe.get_list('Loyalty Program', filters={'customer_group': 'Retail Customers'}, fields=['loyalty_program_name', 'customer_group'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program",
      "question": "List loyalty programs that expire within 90 days of creation.",
      "fields": [
        "loyalty_program_name",
        "expiry_duration"
      ]
    },
    "output": "frappe.get_all('Loyalty Program', filters={ 'expiry_duration': ['<=', 90] }, fields=['loyalty_program_name', 'expiry_duration'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program",
      "question": "What is the expiry duration for the loyalty program 'Premium Gold'?",
      "fields": [
        "expiry_duration"
      ]
    },
    "output": "frappe.db.get_value('Loyalty Program', {'loyalty_program_name': 'Premium Gold'}, 'expiry_duration')"
  },
  {
    "input": {
      "doctype": "Loyalty Program",
      "question": "Which expense account is linked to the loyalty program 'Silver Tier'?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.db.get_value('Loyalty Program', {'loyalty_program_name': 'Silver Tier'}, 'expense_account')"
  },
  {
    "input": {
      "doctype": "Loyalty Program",
      "question": "List all loyalty programs defined for company 'MyShop Corp'.",
      "fields": [
        "name",
        "company"
      ]
    },
    "output": "frappe.get_list('Loyalty Program', filters={'company': 'MyShop Corp'}, fields=['name', 'company'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program",
      "question": "Can you show all loyalty programs restricted to 'North Region'?",
      "fields": [
        "loyalty_program_name",
        "customer_territory"
      ]
    },
    "output": "frappe.get_list('Loyalty Program', filters={'customer_territory': 'North Region'}, fields=['loyalty_program_name'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program",
      "question": "How do I set up a new loyalty program for my customers?",
      "fields": [
        "loyalty_program_name",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_doc('Loyalty Program', 'NEW-LOYALTY-2024')"
  },
  {
    "input": {
      "doctype": "Loyalty Program",
      "question": "Where can I configure different tiers for customer loyalty rewards?",
      "fields": [
        "loyalty_program_type",
        "rules"
      ]
    },
    "output": "frappe.get_all('Loyalty Program', fields=['name', 'loyalty_program_type', 'rules'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program",
      "question": "Can I automatically enroll all customers into a loyalty scheme?",
      "fields": [
        "auto_opt_in"
      ]
    },
    "output": "frappe.get_list('Loyalty Program', filters={'auto_opt_in': 1}, fields=['name', 'auto_opt_in'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program",
      "question": "Where do I set the date range during which a loyalty program is active?",
      "fields": [
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Loyalty Program', fields=['name', 'from_date', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program",
      "question": "How can I define the conversion rate from currency to loyalty points?",
      "fields": [
        "conversion_factor"
      ]
    },
    "output": "frappe.get_all('Loyalty Program', fields=['name', 'conversion_factor'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program",
      "question": "Where can I specify the account that logs loyalty program expenses?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.get_list('Loyalty Program', fields=['name', 'expense_account'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program",
      "question": "How do I define how long loyalty points are valid for?",
      "fields": [
        "expiry_duration"
      ]
    },
    "output": "frappe.get_value('Loyalty Program', {'name': 'LOYALTY-CLASSIC'}, 'expiry_duration')"
  },
  {
    "input": {
      "doctype": "Loyalty Program",
      "question": "Can I restrict a loyalty scheme to customers in a specific region?",
      "fields": [
        "customer_territory"
      ]
    },
    "output": "frappe.get_list('Loyalty Program', filters={'customer_territory': 'Gulf Region'}, fields=['name', 'customer_territory'])"
  },
  {
    "input": {
      "doctype": "Loyalty Program",
      "question": "How many loyalty programs are linked to the 'Retail Customers' group?",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.db.count('Loyalty Program', {'customer_group': 'Retail Customers'})"
  },
  {
    "input": {
      "doctype": "Loyalty Program",
      "question": "Fetch the full details of the 'Gold Tier' loyalty program.",
      "fields": []
    },
    "output": "frappe.get_doc('Loyalty Program', 'Gold Tier')"
  },
  {
    "input": {
      "doctype": "Shipping Rule",
      "question": "Where do I define the shipping cost rules for sales orders?",
      "fields": [
        "label",
        "shipping_amount"
      ]
    },
    "output": "frappe.get_all('Shipping Rule', fields=['name', 'label', 'shipping_amount'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule",
      "question": "How can I apply different shipping charges for different countries?",
      "fields": [
        "countries",
        "shipping_amount"
      ]
    },
    "output": "frappe.get_list('Shipping Rule', fields=['name', 'countries', 'shipping_amount'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule",
      "question": "Is it possible to calculate shipping based on the total weight of items?",
      "fields": [
        "calculate_based_on"
      ]
    },
    "output": "frappe.get_value('Shipping Rule', {'calculate_based_on': 'Net Weight'}, 'name')"
  },
  {
    "input": {
      "doctype": "Shipping Rule",
      "question": "How do I configure a shipping rule specific to purchases?",
      "fields": [
        "shipping_rule_type"
      ]
    },
    "output": "frappe.get_list('Shipping Rule', filters={'shipping_rule_type': 'Purchase'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule",
      "question": "Can I set a fixed shipping fee regardless of order size?",
      "fields": [
        "calculate_based_on",
        "shipping_amount"
      ]
    },
    "output": "frappe.get_list('Shipping Rule', filters={'calculate_based_on': 'Fixed'}, fields=['name', 'shipping_amount'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule",
      "question": "Where can I disable a shipping rule that\u2019s no longer in use?",
      "fields": [
        "disabled"
      ]
    },
    "output": "frappe.get_all('Shipping Rule', filters={'disabled': 1}, fields=['name', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule",
      "question": "How do I link shipping charges to a specific cost center?",
      "fields": [
        "cost_center"
      ]
    },
    "output": "frappe.get_list('Shipping Rule', fields=['name', 'cost_center'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule",
      "question": "Where can I assign an account for booking shipping charges?",
      "fields": [
        "account"
      ]
    },
    "output": "frappe.get_all('Shipping Rule', fields=['name', 'account'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule",
      "question": "How do I set up a shipping rule that calculates charges based on the net total of the order?",
      "fields": [
        "calculate_based_on"
      ]
    },
    "output": "frappe.get_list('Shipping Rule', filters={'calculate_based_on': 'Net Total'}, fields=['name', 'calculate_based_on'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule",
      "question": "I want to apply different shipping fees for certain conditions. Where can I define those?",
      "fields": [
        "conditions"
      ]
    },
    "output": "frappe.get_all('Shipping Rule', fields=['name', 'conditions'])"
  },
  {
    "input": {
      "doctype": "Shipping Rule",
      "question": "Which form should I use to create a shipping rule for my company?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.get_doc('Shipping Rule', 'Standard Domestic')"
  },
  {
    "input": {
      "doctype": "Shipping Rule",
      "question": "How can I specify that a shipping rule only applies to certain countries?",
      "fields": [
        "countries"
      ]
    },
    "output": "frappe.get_list('Shipping Rule', filters={'countries': ['like', '%UAE%']}, fields=['name', 'countries'])"
  },
  {
    "input": {
      "doctype": "Communication Link",
      "question": "How can I associate a communication with a specific document in the system?",
      "fields": [
        "link_doctype",
        "link_name"
      ]
    },
    "output": "frappe.get_list('Communication Link', fields=['link_doctype', 'link_name'])"
  },
  {
    "input": {
      "doctype": "Communication Link",
      "question": "Where do I link an email or message to a particular invoice or sales order?",
      "fields": [
        "link_doctype",
        "link_name"
      ]
    },
    "output": "frappe.get_all('Communication Link', filters={'link_doctype': 'Sales Invoice'}, fields=['link_doctype', 'link_name'])"
  },
  {
    "input": {
      "doctype": "Communication Link",
      "question": "Is there a way to dynamically link a communication to different doctypes?",
      "fields": [
        "link_doctype"
      ]
    },
    "output": "frappe.get_list('Communication Link', fields=['link_doctype'])"
  },
  {
    "input": {
      "doctype": "Communication Link",
      "question": "How do I track which document a message was related to?",
      "fields": [
        "link_name"
      ]
    },
    "output": "frappe.get_list('Communication Link', fields=['link_name'])"
  },
  {
    "input": {
      "doctype": "Communication Link",
      "question": "Where can I view the title of the document linked to a communication?",
      "fields": [
        "link_title"
      ]
    },
    "output": "frappe.get_all('Communication Link', fields=['link_title'])"
  },
  {
    "input": {
      "doctype": "Communication Link",
      "question": "Can I create a link between a support email and a specific issue record?",
      "fields": [
        "link_doctype",
        "link_name"
      ]
    },
    "output": "frappe.get_all('Communication Link', filters={'link_doctype': 'Issue'}, fields=['link_doctype', 'link_name'])"
  },
  {
    "input": {
      "doctype": "Communication Link",
      "question": "Get the full details of the link between email and document INV-2025-0012.",
      "fields": []
    },
    "output": "frappe.get_doc('Communication Link', 'INV-2025-0012')"
  },
  {
    "input": {
      "doctype": "Communication Link",
      "question": "What's the title of the document linked to communication ID COM-00015?",
      "fields": [
        "link_title"
      ]
    },
    "output": "frappe.get_value('Communication Link', 'COM-00015', 'link_title')"
  },
  {
    "input": {
      "doctype": "Communication Link",
      "question": "How many communication links are tied to the 'Issue' doctype?",
      "fields": [
        "link_doctype"
      ]
    },
    "output": "frappe.db.count('Communication Link', {'link_doctype': 'Issue'})"
  },
  {
    "input": {
      "doctype": "Communication Link",
      "question": "Where do I link an email or message to a particular invoice or sales order?",
      "fields": [
        "link_doctype",
        "link_name"
      ]
    },
    "output": "frappe.get_all('Communication Link', filters={'link_doctype': 'Sales Order'}, fields=['link_name'])"
  },
  {
    "input": {
      "doctype": "Communication Link",
      "question": "How can I associate a communication with a specific document in the system?",
      "fields": [
        "link_doctype",
        "link_name",
        "link_title"
      ]
    },
    "output": "frappe.get_list('Communication Link', fields=['link_doctype', 'link_name', 'link_title'])"
  },
  {
    "input": {
      "doctype": "Communication Link",
      "question": "Get the full details of the link between email and document INV-2025-0012.",
      "fields": []
    },
    "output": "frappe.get_doc('Communication Link', 'INV-2025-0012')"
  },
  {
    "input": {
      "doctype": "Communication Link",
      "question": "What's the title of the document linked to communication ID COM-00015?",
      "fields": [
        "link_title"
      ]
    },
    "output": "frappe.get_value('Communication Link', 'COM-00015', 'link_title')"
  },
  {
    "input": {
      "doctype": "Communication Link",
      "question": "How many communication links are tied to the 'Issue' doctype?",
      "fields": [
        "link_doctype"
      ]
    },
    "output": "frappe.db.count('Communication Link', {'link_doctype': 'Issue'})"
  },
  {
    "input": {
      "doctype": "Issue Priority",
      "question": "Where do I define different priority levels for customer issues?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Issue Priority', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Issue Priority",
      "question": "How can I categorize support tickets as high, medium, or low urgency?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Issue Priority', filters={'description': ['in', ['High', 'Medium', 'Low']]}, fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Issue Priority",
      "question": "Is there a way to set descriptions for different issue priorities in our helpdesk?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Issue Priority', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Issue Priority",
      "question": "What is the description for priority label 'Urgent'?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_value('Issue Priority', {'name': 'Urgent'}, 'description')"
  },
  {
    "input": {
      "doctype": "Issue Priority",
      "question": "Get the full record for the issue priority labeled 'Critical'.",
      "fields": []
    },
    "output": "frappe.get_doc('Issue Priority', 'Critical')"
  },
  {
    "input": {
      "doctype": "Issue Priority",
      "question": "How many priority levels have a non-empty description?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.count('Issue Priority', [['description', '!=', '']])"
  },
  {
    "input": {
      "doctype": "Issue Priority",
      "question": "What do I use to define urgency levels for issues reported by customers?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_doc('Issue Priority', 'High')"
  },
  {
    "input": {
      "doctype": "Issue Priority",
      "question": "Can I customize the meaning of 'High Priority' or 'Low Priority' for our support team?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Issue Priority', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Issue Priority",
      "question": "Where can I update the description for critical issues in the system?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Issue Priority', filters={'name': 'Critical'}, fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Issue Priority",
      "question": "How can I add a note or explanation for what each issue priority means?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Issue Priority', filters=[['description', '=', 'set']], fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Issue Priority",
      "question": "Can I create a new custom priority level for incoming issues?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_doc('Issue Priority', 'Custom Priority')"
  },
  {
    "input": {
      "doctype": "Issue Priority",
      "question": "How many issue priority labels have a description added?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.count('Issue Priority', filters=[['description', '!=', '']])"
  },
  {
    "input": {
      "doctype": "Issue Priority",
      "question": "I want to check what note is linked to the 'Urgent' issue priority.",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.get_value('Issue Priority', 'Urgent', 'description')"
  },
  {
    "input": {
      "doctype": "Personal Data Download Request",
      "question": "How can a user request a copy of all their personal data?",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.get_doc('Personal Data Download Request', 'REQ-USER-0001')"
  },
  {
    "input": {
      "doctype": "Personal Data Download Request",
      "question": "Where do I track user requests to download their personal information?",
      "fields": [
        "user",
        "user_name"
      ]
    },
    "output": "frappe.get_list('Personal Data Download Request', fields=['name', 'user', 'user_name'])"
  },
  {
    "input": {
      "doctype": "Personal Data Download Request",
      "question": "Where can I review historical personal data download requests?",
      "fields": [
        "user",
        "amended_from"
      ]
    },
    "output": "frappe.get_all('Personal Data Download Request', fields=['name', 'user', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Personal Data Download Request",
      "question": "How can I check if a user has already requested a data export?",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.db.get_value('Personal Data Download Request', {'user': 'john@example.com'}, 'name')"
  },
  {
    "input": {
      "doctype": "Personal Data Download Request",
      "question": "I need to know which users requested their personal data. Where can I find this?",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.get_list('Personal Data Download Request', fields=['user'])"
  },
  {
    "input": {
      "doctype": "Personal Data Download Request",
      "question": "Is there a way to log when a user requests to download their account data?",
      "fields": [
        "user",
        "amended_from"
      ]
    },
    "output": "frappe.get_all('Personal Data Download Request', filters=[['amended_from', '=', 'set']], fields=['name', 'user', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Personal Data Download Request",
      "question": "How many users have submitted personal data download requests?",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.db.count('Personal Data Download Request')"
  },
  {
    "input": {
      "doctype": "Personal Data Download Request",
      "question": "Can I track multiple personal data requests from the same user?",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.get_list('Personal Data Download Request', filters={'user': 'john@example.com'}, fields=['name', 'user'])"
  },
  {
    "input": {
      "doctype": "Personal Data Download Request",
      "question": "Where are GDPR personal data access requests recorded?",
      "fields": [
        "user_name",
        "amended_from"
      ]
    },
    "output": "frappe.get_all('Personal Data Download Request', fields=['name', 'user_name', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Personal Data Download Request",
      "question": "Which doctype stores the name of the user requesting data export?",
      "fields": [
        "user_name"
      ]
    },
    "output": "frappe.db.get_value('Personal Data Download Request', {'user_name': 'John Doe'}, 'name')"
  },
  {
    "input": {
      "doctype": "Personal Data Download Request",
      "question": "Where do I store amendments to previous personal data requests?",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.get_list('Personal Data Download Request', filters=[['amended_from', '=', 'set']], fields=['name', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Personal Data Download Request",
      "question": "Is there a record of personal data export requests initiated by users?",
      "fields": []
    },
    "output": "frappe.db.count('Personal Data Download Request')"
  },
  {
    "input": {
      "doctype": "Communication Link",
      "question": "How do I make sure each communication is properly mapped to its related record?",
      "fields": [
        "link_doctype",
        "link_name"
      ]
    },
    "output": "frappe.get_list('Communication Link', fields=['link_doctype', 'link_name'])"
  },
  {
    "input": {
      "doctype": "Communication Link",
      "question": "What do I use to define the connection between an email and a document like a task or lead?",
      "fields": [
        "link_doctype",
        "link_name"
      ]
    },
    "output": "frappe.get_all('Communication Link', filters={'link_doctype': ['in', ['Task', 'Lead']]}, fields=['link_doctype', 'link_name'])"
  },
  {
    "input": {
      "doctype": "Communication Link",
      "question": "How do I store the link title when associating a document with a message?",
      "fields": [
        "link_title"
      ]
    },
    "output": "frappe.get_list('Communication Link', fields=['link_title'])"
  },
  {
    "input": {
      "doctype": "Invoice Discounting",
      "question": "Where can I associate multiple invoices with a single invoice discounting record?",
      "fields": [
        "invoices"
      ]
    },
    "output": "frappe.get_doc('Invoice Discounting', 'INV-DISC-0005')"
  },
  {
    "input": {
      "doctype": "Invoice Discounting",
      "question": "How can I capture total discounting amount and track settlement status?",
      "fields": [
        "total_amount",
        "status"
      ]
    },
    "output": "frappe.get_all('Invoice Discounting', fields=['name', 'total_amount', 'status'])"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "How do I add a new issue type like 'Login Problem' or 'System Error'?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Issue Type', filters={'description': ['in', ['Login Problem', 'System Error']]}, fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "Where do I maintain a list of issue types for categorizing customer tickets?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.count('Issue Type')"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "Which form lets me add a short description for a new issue category?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_doc('Issue Type', 'New Category')"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "I need to update the descriptions for our existing support issue types. Where do I go?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Issue Type', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "Where can I configure common categories for helpdesk and IT support tickets?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Issue Type', filters={'description': ['like', '%IT support%']}, fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "Is there a place to manage predefined issue categories for reporting purposes?",
      "fields": []
    },
    "output": "frappe.db.count('Issue Type')"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "What do I use to classify technical support tickets into types?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Issue Type', filters={'description': ['like', '%technical%']}, fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "How do I record different types of issues that users frequently report?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Issue Type', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "I want to create a new category for product-related complaints. Which module should I use?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_doc('Issue Type', 'Product Complaints')"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "Can I group issues based on type for better analysis? Where do I do this?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Issue Type', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "Which form lets me add a short description for a new issue category?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_doc('Issue Type', 'New Category')"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "I need to update the descriptions for our existing support issue types. Where do I go?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Issue Type', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "Where can I configure common categories for helpdesk and IT support tickets?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Issue Type', filters={'description': ['like', '%IT support%']}, fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "Is there a place to manage predefined issue categories for reporting purposes?",
      "fields": []
    },
    "output": "frappe.db.count('Issue Type')"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "What do I use to classify technical support tickets into types?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Issue Type', filters={'description': ['like', '%technical%']}, fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "How do I record different types of issues that users frequently report?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Issue Type', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "I want to create a new category for product-related complaints. Which module should I use?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_doc('Issue Type', 'Product Complaints')"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "Can I group issues based on type for better analysis? Where do I do this?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Issue Type', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "Fetch the description of 'High Priority' issue type.",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.get_value('Issue Type', {'name': 'High Priority'}, 'description')"
  },
  {
    "input": {
      "doctype": "Communication Medium Timeslot",
      "question": "How can I define available time slots for our communication channels by employee group?",
      "fields": [
        "employee_group",
        "day_of_week",
        "from_time",
        "to_time"
      ]
    },
    "output": "frappe.get_list('Communication Medium Timeslot', fields=['employee_group', 'day_of_week', 'from_time', 'to_time'])"
  },
  {
    "input": {
      "doctype": "Communication Medium Timeslot",
      "question": "Where do I manage weekly availability schedules for employee groups in customer support?",
      "fields": [
        "employee_group",
        "day_of_week"
      ]
    },
    "output": "frappe.get_all('Communication Medium Timeslot', fields=['name', 'employee_group', 'day_of_week'])"
  },
  {
    "input": {
      "doctype": "Communication Medium Timeslot",
      "question": "Can I set different communication times for each employee group?",
      "fields": [
        "employee_group"
      ]
    },
    "output": "frappe.db.count('Communication Medium Timeslot', {'employee_group': 'Support Team'})"
  },
  {
    "input": {
      "doctype": "Communication Medium Timeslot",
      "question": "Which section lets me configure support team time slots for calls and chats?",
      "fields": []
    },
    "output": "frappe.get_doc('Communication Medium Timeslot', 'COMM-TIME-0003')"
  },
  {
    "input": {
      "doctype": "Communication Medium Timeslot",
      "question": "How do I specify working hours for each day of the week for an employee group?",
      "fields": [
        "day_of_week",
        "from_time",
        "to_time"
      ]
    },
    "output": "frappe.get_all('Communication Medium Timeslot', filters={'employee_group': 'Sales'}, fields=['day_of_week', 'from_time', 'to_time'])"
  },
  {
    "input": {
      "doctype": "Communication Medium Timeslot",
      "question": "Where can I assign a communication schedule to a specific employee group?",
      "fields": [
        "employee_group"
      ]
    },
    "output": "frappe.db.get_value('Communication Medium Timeslot', {'employee_group': 'Tech Team'}, 'day_of_week')"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "Which form lets me add a short description for a new issue category?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_doc('Issue Type', 'Login Problem')"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "Where can I configure common categories for helpdesk and IT support tickets?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Issue Type', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "Can I group issues based on type for better analysis?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.count('Issue Type')"
  },
  {
    "input": {
      "doctype": "Issue Type",
      "question": "Where do I maintain a list of issue types for categorizing customer tickets?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Issue Type', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Communication Medium Timeslot",
      "question": "Is there a way to block communication times for certain employee groups?",
      "fields": [
        "employee_group"
      ]
    },
    "output": "frappe.get_list('Communication Medium Timeslot', filters={'employee_group': 'Support'}, fields=['name', 'employee_group'])"
  },
  {
    "input": {
      "doctype": "Communication Medium Timeslot",
      "question": "Can I manage weekly contact availability for different departments?",
      "fields": [
        "employee_group",
        "day_of_week"
      ]
    },
    "output": "frappe.get_all('Communication Medium Timeslot', fields=['name', 'employee_group', 'day_of_week'])"
  },
  {
    "input": {
      "doctype": "Communication Medium Timeslot",
      "question": "Where can I record the daily communication schedule for support teams?",
      "fields": [
        "day_of_week",
        "from_time",
        "to_time"
      ]
    },
    "output": "frappe.get_list('Communication Medium Timeslot', fields=['day_of_week', 'from_time', 'to_time'])"
  },
  {
    "input": {
      "doctype": "Communication Medium Timeslot",
      "question": "How do I ensure that our support staff are only contacted during certain hours?",
      "fields": [
        "employee_group"
      ]
    },
    "output": "frappe.db.count('Communication Medium Timeslot', {'employee_group': 'Customer Care'})"
  },
  {
    "input": {
      "doctype": "Communication Medium Timeslot",
      "question": "Which module allows assigning time-based communication slots to employee groups?",
      "fields": []
    },
    "output": "frappe.get_doc('Communication Medium Timeslot', 'COMM-TIME-0021')"
  },
  {
    "input": {
      "doctype": "Session Default",
      "question": "Where can I customize which document types are preloaded during a session?",
      "fields": [
        "ref_doctype"
      ]
    },
    "output": "frappe.get_list('Session Default', fields=['ref_doctype'])"
  },
  {
    "input": {
      "doctype": "Session Default",
      "question": "Is there a way to pre-select a document type for faster transactions?",
      "fields": [
        "ref_doctype"
      ]
    },
    "output": "frappe.db.get_value('Session Default', {'ref_doctype': 'Sales Order'}, 'ref_doctype')"
  },
  {
    "input": {
      "doctype": "Session Default",
      "question": "Where can I manage user-level defaults for document types?",
      "fields": [
        "ref_doctype"
      ]
    },
    "output": "frappe.get_all('Session Default', fields=['name', 'ref_doctype'])"
  },
  {
    "input": {
      "doctype": "Session Default",
      "question": "I want to simplify user navigation by setting default doctypes. Which doctype helps with this?",
      "fields": [
        "ref_doctype"
      ]
    },
    "output": "frappe.db.count('Session Default')"
  },
  {
    "input": {
      "doctype": "Communication Medium Timeslot",
      "question": "I want to define time slots for communication availability. Where do I set this up?",
      "fields": [
        "day_of_week",
        "from_time",
        "to_time"
      ]
    },
    "output": "frappe.get_list('Communication Medium Timeslot', fields=['day_of_week', 'from_time', 'to_time'])"
  },
  {
    "input": {
      "doctype": "Session Default",
      "question": "Which default document types are set for the current session?",
      "fields": [
        "ref_doctype"
      ]
    },
    "output": "frappe.get_list('Session Default', fields=['name', 'ref_doctype'])"
  },
  {
    "input": {
      "doctype": "Session Default",
      "question": "How can I find which user has a Sales Order set as their default?",
      "fields": [
        "ref_doctype"
      ]
    },
    "output": "frappe.get_list('Session Default', filters={'ref_doctype': 'Sales Order'}, fields=['name', 'ref_doctype'])"
  },
  {
    "input": {
      "doctype": "Session Default",
      "question": "Fetch the full record for a session default entry named 'SESSION-DEF-001'.",
      "fields": []
    },
    "output": "frappe.get_doc('Session Default', 'SESSION-DEF-001')"
  },
  {
    "input": {
      "doctype": "Session Default",
      "question": "How many session defaults have been set for the 'Purchase Order' doctype?",
      "fields": [
        "ref_doctype"
      ]
    },
    "output": "frappe.db.count('Session Default', {'ref_doctype': 'Purchase Order'})"
  },
  {
    "input": {
      "doctype": "Session Default",
      "question": "Get the default doctype reference for a specific session default entry.",
      "fields": [
        "ref_doctype"
      ]
    },
    "output": "frappe.get_value('Session Default', {'name': 'SESSION-DEF-001'}, 'ref_doctype')"
  },
  {
    "input": {
      "doctype": "Accounting Dimension Detail",
      "question": "List all configured dimension details used in accounting.",
      "fields": [
        "accounting_dimension"
      ]
    },
    "output": "frappe.get_all('Accounting Dimension Detail', fields=['name', 'accounting_dimension'])"
  },
  {
    "input": {
      "doctype": "Accounting Dimension Detail",
      "question": "How many active dimension mappings are configured for 'Cost Center'?",
      "fields": [
        "accounting_dimension"
      ]
    },
    "output": "frappe.db.count('Accounting Dimension Detail', {'accounting_dimension': 'Cost Center'})"
  },
  {
    "input": {
      "doctype": "Accounting Dimension Detail",
      "question": "Check what dimension is set in record 'ACC-DIM-0042'.",
      "fields": [
        "accounting_dimension"
      ]
    },
    "output": "frappe.get_value('Accounting Dimension Detail', {'name': 'ACC-DIM-0042'}, 'accounting_dimension')"
  },
  {
    "input": {
      "doctype": "Accounting Dimension Detail",
      "question": "Show all dimension filters set to restrict values.",
      "fields": [
        "apply_restriction_on_values"
      ]
    },
    "output": "frappe.get_list('Accounting Dimension Detail', filters={'apply_restriction_on_values': 1}, fields=['name', 'apply_restriction_on_values'])"
  },
  {
    "input": {
      "doctype": "Accounting Dimension Detail",
      "question": "Fetch full detail of a dimension mapping named 'ACC-DIM-0009'.",
      "fields": []
    },
    "output": "frappe.get_doc('Accounting Dimension Detail', 'ACC-DIM-0009')"
  },
  {
    "input": {
      "doctype": "Availability Of Slots",
      "question": "List all available weekday time slots.",
      "fields": [
        "day_of_week",
        "from_time",
        "to_time"
      ]
    },
    "output": "frappe.get_list('Availability Of Slots', filters={'day_of_week': ['in', ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']]}, fields=['day_of_week', 'from_time', 'to_time'])"
  },
  {
    "input": {
      "doctype": "Availability Of Slots",
      "question": "Get complete slot details for Friday evening hours.",
      "fields": []
    },
    "output": "frappe.get_doc('Availability Of Slots', 'FRI-EVE-001')"
  },
  {
    "input": {
      "doctype": "Availability Of Slots",
      "question": "How many Sunday slots are configured?",
      "fields": [
        "day_of_week"
      ]
    },
    "output": "frappe.db.count('Availability Of Slots', {'day_of_week': 'Sunday'})"
  },
  {
    "input": {
      "doctype": "Quick Stock Balance",
      "question": "Show me stock quantity and value for ITEM-002 at Warehouse A.",
      "fields": [
        "item",
        "warehouse",
        "qty",
        "value"
      ]
    },
    "output": "frappe.get_all('Quick Stock Balance', filters={'item': 'ITEM-002', 'warehouse': 'Warehouse A'}, fields=['item', 'qty', 'value'])"
  },
  {
    "input": {
      "doctype": "Quick Stock Balance",
      "question": "What's the current quantity of ITEM-001?",
      "fields": [
        "qty"
      ]
    },
    "output": "frappe.db.get_value('Quick Stock Balance', {'item': 'ITEM-001'}, 'qty')"
  },
  {
    "input": {
      "doctype": "Quick Stock Balance",
      "question": "Give me all barcode-based stock balance records.",
      "fields": [
        "item_barcode",
        "qty"
      ]
    },
    "output": "frappe.get_list('Quick Stock Balance', filters={'item_barcode': ['!=', '']}, fields=['item_barcode', 'qty'])"
  },
  {
    "input": {
      "doctype": "Quick Stock Balance",
      "question": "Get full details of stock balance for ITEM-005 on March 31, 2024.",
      "fields": []
    },
    "output": "frappe.get_doc('Quick Stock Balance', 'ITEM-005-MAR31')"
  },
  {
    "input": {
      "doctype": "POS Field",
      "question": "Show me all POS fields marked as mandatory.",
      "fields": [
        "fieldname",
        "reqd"
      ]
    },
    "output": "frappe.get_list('POS Field', filters={'reqd': 1}, fields=['fieldname', 'label', 'reqd'])"
  },
  {
    "input": {
      "doctype": "POS Field",
      "question": "What is the default value for the 'discount_code' POS field?",
      "fields": [
        "default_value"
      ]
    },
    "output": "frappe.db.get_value('POS Field', {'fieldname': 'discount_code'}, 'default_value')"
  },
  {
    "input": {
      "doctype": "POS Field",
      "question": "How many POS fields are marked read-only?",
      "fields": [
        "read_only"
      ]
    },
    "output": "frappe.db.count('POS Field', {'read_only': 1})"
  },
  {
    "input": {
      "doctype": "POS Field",
      "question": "Fetch complete configuration for the 'coupon_code' POS field.",
      "fields": []
    },
    "output": "frappe.get_doc('POS Field', 'coupon_code')"
  },
  {
    "input": {
      "doctype": "Quick Stock Balance",
      "question": "List all stock balance entries for warehouse WH-01.",
      "fields": [
        "warehouse",
        "item",
        "qty"
      ]
    },
    "output": "frappe.get_list('Quick Stock Balance', filters={'warehouse': 'WH-01'}, fields=['item', 'qty'])"
  },
  {
    "input": {
      "doctype": "Quick Stock Balance",
      "question": "Which items have stock quantity below 10 in Warehouse A?",
      "fields": [
        "warehouse",
        "qty",
        "item"
      ]
    },
    "output": "frappe.get_list('Quick Stock Balance', filters={ 'warehouse': 'Warehouse A', 'qty': ['<', 10] }, fields=['item', 'qty'])"
  },
  {
    "input": {
      "doctype": "Quick Stock Balance",
      "question": "Show all items with quantity and value in Warehouse B.",
      "fields": [
        "warehouse",
        "item",
        "qty",
        "value"
      ]
    },
    "output": "frappe.get_all('Quick Stock Balance', filters={'warehouse': 'Warehouse B'}, fields=['item', 'qty', 'value'])"
  },
  {
    "input": {
      "doctype": "Quick Stock Balance",
      "question": "Get full stock details for item ITEM-001 in warehouse WH-01.",
      "fields": []
    },
    "output": "frappe.get_doc('Quick Stock Balance', 'ITEM-001-WH-01')"
  },
  {
    "input": {
      "doctype": "Quick Stock Balance",
      "question": "What is the stock quantity for ITEM-X1 in Warehouse Central?",
      "fields": [
        "qty"
      ]
    },
    "output": "frappe.db.get_value('Quick Stock Balance', {'item': 'ITEM-X1', 'warehouse': 'Warehouse Central'}, 'qty')"
  },
  {
    "input": {
      "doctype": "Quick Stock Balance",
      "question": "How many records exist for Warehouse C with non-zero stock?",
      "fields": [
        "warehouse",
        "qty"
      ]
    },
    "output": "frappe.db.count('Quick Stock Balance', {'warehouse': 'Warehouse C', 'qty': ['>', 0]})"
  },
  {
    "input": {
      "doctype": "Quick Stock Balance",
      "question": "List items with barcode starting with '987' in Warehouse 5.",
      "fields": [
        "item_barcode",
        "warehouse"
      ]
    },
    "output": "frappe.get_list('Quick Stock Balance', filters={ 'item_barcode': ['like', '987%'], 'warehouse': 'Warehouse 5' }, fields=['item', 'qty'])"
  },
  {
    "input": {
      "doctype": "Quick Stock Balance",
      "question": "What\u2019s the stock value for ITEM-200 on 2025-04-30?",
      "fields": [
        "item",
        "value",
        "date"
      ]
    },
    "output": "frappe.get_list('Quick Stock Balance', filters={ 'item': 'ITEM-200', 'date': '2025-04-30' }, fields=['value'])"
  },
  {
    "input": {
      "doctype": "Quick Stock Balance",
      "question": "Find all stock balances for item ITEM-Z across all warehouses with images.",
      "fields": [
        "item",
        "image"
      ]
    },
    "output": "frappe.get_all('Quick Stock Balance', filters={'item': 'ITEM-Z'}, fields=['warehouse', 'qty', 'image'])"
  },
  {
    "input": {
      "doctype": "Quick Stock Balance",
      "question": "Give me the description and image for ITEM-XYZ.",
      "fields": [
        "item_description",
        "image"
      ]
    },
    "output": "frappe.get_list('Quick Stock Balance', filters={'item': 'ITEM-XYZ'}, fields=['item_description', 'image'])"
  },
  {
    "input": {
      "doctype": "Quick Stock Balance",
      "question": "Which report gives me item stock value along with its description and image?",
      "fields": [
        "item_name",
        "item_description",
        "image",
        "value"
      ]
    },
    "output": "frappe.get_list('Quick Stock Balance', fields=['item_name', 'item_description', 'image', 'value'])"
  },
  {
    "input": {
      "doctype": "Quick Stock Balance",
      "question": "How many items have quantity available in warehouse 'Main Store'?",
      "fields": [
        "warehouse",
        "qty"
      ]
    },
    "output": "frappe.db.count('Quick Stock Balance', filters={'warehouse': 'Main Store', 'qty': ['>', 0]})"
  },
  {
    "input": {
      "doctype": "Quick Stock Balance",
      "question": "What's the quantity and stock value of item 'ITEM-101' on 2025-04-30?",
      "fields": [
        "item",
        "date",
        "qty",
        "value"
      ]
    },
    "output": "frappe.get_list('Quick Stock Balance', filters={'item': 'ITEM-101', 'date': '2025-04-30'}, fields=['qty', 'value'])"
  },
  {
    "input": {
      "doctype": "Quick Stock Balance",
      "question": "Fetch full details of item stock using barcode '9876543210'.",
      "fields": [
        "item_barcode"
      ]
    },
    "output": "frappe.get_doc('Quick Stock Balance', {'item_barcode': '9876543210'})"
  },
  {
    "input": {
      "doctype": "Quick Stock Balance",
      "question": "Get quantity of item 'ITEM-202' available in 'Cold Storage'.",
      "fields": [
        "item",
        "warehouse",
        "qty"
      ]
    },
    "output": "frappe.get_value('Quick Stock Balance', {'item': 'ITEM-202', 'warehouse': 'Cold Storage'}, 'qty')"
  },
  {
    "input": {
      "doctype": "Tag",
      "question": "How do I create a new tag to categorize my records?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_doc('Tag', 'New Category')"
  },
  {
    "input": {
      "doctype": "Tag",
      "question": "Which doctype lets me define labels or tags for better grouping?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Tag', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Tag",
      "question": "Where do I add a tag description for my items or documents?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Tag', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Tag",
      "question": "Which tag is used to label important documents?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.get_value('Tag', {'description': 'Important'}, 'name')"
  },
  {
    "input": {
      "doctype": "Tag",
      "question": "How many tags have the word 'Sales' in their description?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.count('Tag', filters=[['description', 'like', '%Sales%']])"
  },
  {
    "input": {
      "doctype": "Tag",
      "question": "Where can I edit the text for a tag label used in CRM records?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Tag', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Tag",
      "question": "I want to reuse a label for filtering records\u2014where do I define that?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Tag', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Tag",
      "question": "How do I store keywords that describe a record for easier search?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_doc('Tag', 'CRM-Search-Helper')"
  },
  {
    "input": {
      "doctype": "Tag",
      "question": "Which doctype is responsible for holding descriptive keywords or labels?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Tag', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Tag",
      "question": "Where do I define a tag used for document categorization?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_doc('Tag', 'Document Category')"
  },
  {
    "input": {
      "doctype": "Tag",
      "question": "Can I create a short description for document tags?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_list('Tag', fields=['name', 'description'])"
  },
  {
    "input": {
      "doctype": "Tag",
      "question": "Where do I update the meaning behind tags I assign to records?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_doc('Tag', 'Sales Lead Tags')"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "Where do I store the email address of a contact?",
      "fields": [
        "email_id"
      ]
    },
    "output": "frappe.get_list('Contact Email', fields=['name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "How do I mark an email as the primary one for a contact?",
      "fields": [
        "email_id",
        "is_primary"
      ]
    },
    "output": "frappe.get_doc('Contact Email', 'alessia.ramires@azurotech.mx')"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "Which form holds the email ID information for a customer or supplier?",
      "fields": [
        "email_id"
      ]
    },
    "output": "frappe.get_all('Contact Email', fields=['name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "I need to check if a contact has a primary email set\u2014where do I find that?",
      "fields": [
        "is_primary"
      ]
    },
    "output": "frappe.get_list('Contact Email', filters={'is_primary': 1}, fields=['name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "How can I associate an email address with a contact record?",
      "fields": [
        "email_id"
      ]
    },
    "output": "frappe.get_doc('Contact Email', 'sales.ops@halvorsen-global.co.uk')"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "Where do I manage the primary and secondary emails of a contact?",
      "fields": [
        "email_id",
        "is_primary"
      ]
    },
    "output": "frappe.get_all('Contact Email', fields=['name', 'email_id', 'is_primary'])"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "Can I set a default email for each contact in the system?",
      "fields": [
        "email_id",
        "is_primary"
      ]
    },
    "output": "frappe.db.get_value('Contact Email', {'is_primary': 1}, 'email_id')"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "How many contacts have their primary email set?",
      "fields": [
        "is_primary"
      ]
    },
    "output": "frappe.db.count('Contact Email', {'is_primary': 1})"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "Where is the email address of each contact stored?",
      "fields": [
        "email_id"
      ]
    },
    "output": "frappe.get_list('Contact Email', fields=['name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "How can I identify if 'lia.hoffman@kavotech.nl' is marked as the primary email?",
      "fields": [
        "email_id",
        "is_primary"
      ]
    },
    "output": "frappe.get_doc('Contact Email', 'lia.hoffman@kavotech.nl')"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "Which record shows the email ID linked to a supplier or customer contact?",
      "fields": [
        "email_id"
      ]
    },
    "output": "frappe.get_all('Contact Email', fields=['name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "How can I list all contact emails that are marked as primary?",
      "fields": [
        "is_primary"
      ]
    },
    "output": "frappe.get_list('Contact Email', filters={'is_primary': 1}, fields=['name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "I want to associate 'ravi.natarajan@solaceinstruments.in' with a contact\u2014how can I fetch the record?",
      "fields": [
        "email_id"
      ]
    },
    "output": "frappe.get_doc('Contact Email', 'ravi.natarajan@solaceinstruments.in')"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "Where can I view all contact emails including whether they are primary?",
      "fields": [
        "email_id",
        "is_primary"
      ]
    },
    "output": "frappe.get_all('Contact Email', fields=['name', 'email_id', 'is_primary'])"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "Can I retrieve the default email set as primary for any contact?",
      "fields": [
        "email_id",
        "is_primary"
      ]
    },
    "output": "frappe.db.get_value('Contact Email', {'is_primary': 1}, 'email_id')"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "How many contacts currently have their email marked as primary?",
      "fields": [
        "is_primary"
      ]
    },
    "output": "frappe.db.count('Contact Email', {'is_primary': 1})"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "What doctype should I use to store contact email addresses?",
      "fields": [
        "email_id"
      ]
    },
    "output": "frappe.get_all('Contact Email', fields=['name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "Where can I find or set an email marked as primary for a contact?",
      "fields": [
        "email_id",
        "is_primary"
      ]
    },
    "output": "frappe.get_list('Contact Email', filters={'is_primary': 1}, fields=['email_id'])"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "Where can I view all email addresses linked to a contact?",
      "fields": [
        "email_id"
      ]
    },
    "output": "frappe.get_list('Contact Email', fields=['email_id'])"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "Which doctype lets me record multiple email IDs for one person?",
      "fields": [
        "email_id"
      ]
    },
    "output": "frappe.db.count('Contact Email', {})"
  },
  {
    "input": {
      "doctype": "Assignment Rule Day",
      "question": "How can I assign tasks based on specific weekdays?",
      "fields": [
        "day"
      ]
    },
    "output": "frappe.get_all('Assignment Rule Day', fields=['name', 'day'])"
  },
  {
    "input": {
      "doctype": "Assignment Rule Day",
      "question": "Where do I define which day of the week a rule should apply?",
      "fields": [
        "day"
      ]
    },
    "output": "frappe.get_list('Assignment Rule Day', fields=['name', 'day'])"
  },
  {
    "input": {
      "doctype": "Assignment Rule Day",
      "question": "I want a rule to only trigger on Fridays\u2014how can I do that?",
      "fields": [
        "day"
      ]
    },
    "output": "frappe.get_list('Assignment Rule Day', filters={'day': 'Friday'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Assignment Rule Day",
      "question": "Which form lets me pick a specific day for assignment logic?",
      "fields": [
        "day"
      ]
    },
    "output": "frappe.get_doc('Assignment Rule Day', 'WEEKDAY-LOGIC')"
  },
  {
    "input": {
      "doctype": "Assignment Rule Day",
      "question": "Where can I list out weekdays for auto-assignment settings?",
      "fields": [
        "day"
      ]
    },
    "output": "frappe.db.get_value('Assignment Rule Day', {'day': 'Monday'}, 'day')"
  },
  {
    "input": {
      "doctype": "Assignment Rule Day",
      "question": "How do I configure weekday-wise distribution of tasks?",
      "fields": [
        "day"
      ]
    },
    "output": "frappe.db.count('Assignment Rule Day', {'day': ['in', ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']]})"
  },
  {
    "input": {
      "doctype": "Assignment Rule Day",
      "question": "Is there a way to restrict assignments to weekdays only?",
      "fields": [
        "day"
      ]
    },
    "output": "frappe.get_list('Assignment Rule Day', filters={'day': ['in', ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday']]}, fields=['name', 'day'])"
  },
  {
    "input": {
      "doctype": "Assignment Rule Day",
      "question": "Where do I add days to control which day rules should trigger?",
      "fields": [
        "day"
      ]
    },
    "output": "frappe.get_all('Assignment Rule Day', fields=['name', 'day'])"
  },
  {
    "input": {
      "doctype": "Assignment Rule Day",
      "question": "What\u2019s the doctype for configuring assignment schedule by day?",
      "fields": []
    },
    "output": "frappe.get_doc('Assignment Rule Day', 'ASSIGN-SCHEDULE-WEEKDAY')"
  },
  {
    "input": {
      "doctype": "Assignment Rule Day",
      "question": "I need to ensure some assignments only happen on Tuesdays\u2014how can I do this?",
      "fields": [
        "day"
      ]
    },
    "output": "frappe.get_list('Assignment Rule Day', filters={'day': 'Tuesday'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Assignment Rule Day",
      "question": "Where can I specify the working day for task distribution rules?",
      "fields": [
        "day"
      ]
    },
    "output": "frappe.db.get_value('Assignment Rule Day', {'day': 'Wednesday'}, 'day')"
  },
  {
    "input": {
      "doctype": "Assignment Rule Day",
      "question": "How can I control assignments by weekday using rules?",
      "fields": [
        "day"
      ]
    },
    "output": "frappe.db.count('Assignment Rule Day', {'day': ['in', ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']]})"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "Where do I store the email address of a contact?",
      "fields": [
        "email_id"
      ]
    },
    "output": "frappe.get_list('Contact Email', fields=['name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "How do I mark an email as the primary one for a contact?",
      "fields": [
        "email_id",
        "is_primary"
      ]
    },
    "output": "frappe.get_list('Contact Email', filters={'is_primary': 1}, fields=['email_id'])"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "Which form holds the email ID information for a customer or supplier?",
      "fields": [
        "email_id"
      ]
    },
    "output": "frappe.get_all('Contact Email', fields=['name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "I need to check if a contact has a primary email set\u2014where do I find that?",
      "fields": [
        "is_primary"
      ]
    },
    "output": "frappe.db.get_value('Contact Email', {'is_primary': 1}, 'email_id')"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "How can I associate an email address with a contact record?",
      "fields": [
        "email_id"
      ]
    },
    "output": "frappe.get_doc('Contact Email', 'john.doe@example.com')"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "Where do I manage the primary and secondary emails of a contact?",
      "fields": [
        "email_id",
        "is_primary"
      ]
    },
    "output": "frappe.get_all('Contact Email', fields=['email_id', 'is_primary'])"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "Can I set a default email for each contact in the system?",
      "fields": [
        "email_id",
        "is_primary"
      ]
    },
    "output": "frappe.get_list('Contact Email', filters={'is_primary': 1}, fields=['email_id'])"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "Where can I find or set an email marked as primary for a contact?",
      "fields": [
        "is_primary"
      ]
    },
    "output": "frappe.db.count('Contact Email', {'is_primary': 1})"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "Where can I view all email addresses linked to a contact?",
      "fields": [
        "email_id"
      ]
    },
    "output": "frappe.get_list('Contact Email', fields=['email_id'])"
  },
  {
    "input": {
      "doctype": "Contact Email",
      "question": "Which doctype lets me record multiple email IDs for one person?",
      "fields": [
        "email_id"
      ]
    },
    "output": "frappe.get_doc('Contact Email', 'multi@example.com')"
  },
  {
    "input": {
      "doctype": "UAE VAT Settings",
      "question": "How can I view the VAT accounts linked to my company in the UAE?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.get_list('UAE VAT Settings', filters={'company': 'My Company'}, fields=['uae_vat_accounts'])"
  },
  {
    "input": {
      "doctype": "UAE VAT Settings",
      "question": "Can I add custom VAT accounts for the UAE in the settings?",
      "fields": [
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.get_all('UAE VAT Settings', fields=['name', 'uae_vat_accounts'])"
  },
  {
    "input": {
      "doctype": "UAE VAT Settings",
      "question": "How do I configure the default VAT accounts for the UAE?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.get_doc('UAE VAT Settings', 'DEFAULT-UAE-VAT')"
  },
  {
    "input": {
      "doctype": "UAE VAT Settings",
      "question": "How do I update the VAT accounts after setting them up?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.get_list('UAE VAT Settings', fields=['name', 'uae_vat_accounts'])"
  },
  {
    "input": {
      "doctype": "UAE VAT Settings",
      "question": "Can I assign a VAT account to a FrostEcho company in the UAE VAT settings?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.get_value('UAE VAT Settings', {'company': 'FrostEcho Holdings'}, 'uae_vat_accounts')"
  },
  {
    "input": {
      "doctype": "UAE VAT Settings",
      "question": "Is there a way to check which VAT accounts are associated with each company in the UAE?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.get_all('UAE VAT Settings', fields=['company', 'uae_vat_accounts'])"
  },
  {
    "input": {
      "doctype": "UAE VAT Settings",
      "question": "Can I remove a VAT account from the UAE VAT settings?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.get_doc('UAE VAT Settings', 'REMOVE-VAT-2024')"
  },
  {
    "input": {
      "doctype": "UAE VAT Settings",
      "question": "How do I add a new company to the UAE VAT settings?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.get_doc('UAE VAT Settings', 'NEW-COMPANY-VAT')"
  },
  {
    "input": {
      "doctype": "UAE VAT Settings",
      "question": "Is it possible to manage multiple UAE VAT accounts under a single company?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.db.count('UAE VAT Settings', {'company': 'Nebula Thread Holdings'})"
  },
  {
    "input": {
      "doctype": "UAE VAT Settings",
      "question": "How do I link my company with the UAE VAT accounts?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.get_list('UAE VAT Settings', filters={'company': 'Nebula Thread Holdings'}, fields=['uae_vat_accounts'])"
  },
  {
    "input": {
      "doctype": "Voice Call Settings",
      "question": "How do I set up voice call settings for my user?",
      "fields": [
        "user",
        "call_receiving_device"
      ]
    },
    "output": "frappe.get_doc('Voice Call Settings', {'user': 'demo@example.com'})"
  },
  {
    "input": {
      "doctype": "Voice Call Settings",
      "question": "Can I choose the device through which voice calls are received?",
      "fields": [
        "user",
        "call_receiving_device"
      ]
    },
    "output": "frappe.get_list('Voice Call Settings', fields=['user', 'call_receiving_device'])"
  },
  {
    "input": {
      "doctype": "Voice Call Settings",
      "question": "How do I configure the greeting message for incoming calls?",
      "fields": [
        "user",
        "greeting_message"
      ]
    },
    "output": "frappe.get_all('Voice Call Settings', fields=['user', 'greeting_message'])"
  },
  {
    "input": {
      "doctype": "Voice Call Settings",
      "question": "Is it possible to set a message for when the agent is busy?",
      "fields": [
        "agent_busy_message"
      ]
    },
    "output": "frappe.get_all('Voice Call Settings', fields=['user', 'agent_busy_message'])"
  },
  {
    "input": {
      "doctype": "Voice Call Settings",
      "question": "Can I configure an unavailable message for when the agent cannot take a call?",
      "fields": [
        "agent_unavailable_message"
      ]
    },
    "output": "frappe.get_list('Voice Call Settings', fields=['user', 'agent_unavailable_message'])"
  },
  {
    "input": {
      "doctype": "Voice Call Settings",
      "question": "Which device has been set to receive calls for user 'agent1@example.com'?",
      "fields": [
        "user",
        "call_receiving_device"
      ]
    },
    "output": "frappe.db.get_value('Voice Call Settings', {'user': 'agent1@example.com'}, 'call_receiving_device')"
  },
  {
    "input": {
      "doctype": "Voice Call Settings",
      "question": "How many users have configured a custom busy message?",
      "fields": [
        "agent_busy_message"
      ]
    },
    "output": "frappe.db.count('Voice Call Settings', {'agent_busy_message': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "UAE VAT Settings",
      "question": "Can I assign specific VAT rates to the accounts in the UAE VAT settings?",
      "fields": [
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.get_all('UAE VAT Settings', fields=['company', 'uae_vat_accounts'])"
  },
  {
    "input": {
      "doctype": "UAE VAT Settings",
      "question": "How do I view the VAT accounts linked to my company in the UAE?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.get_list('UAE VAT Settings', filters={'company': 'Alpha Tech LLC'}, fields=['uae_vat_accounts'])"
  },
  {
    "input": {
      "doctype": "UAE VAT Settings",
      "question": "Is it possible to manage multiple UAE VAT accounts under a single company?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.count('UAE VAT Settings', {'company': 'Alpha Tech LLC'})"
  },
  {
    "input": {
      "doctype": "UAE VAT Settings",
      "question": "Which VAT accounts are currently active for 'Global Enterprises'?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.db.get_value('UAE VAT Settings', {'company': 'Global Enterprises'}, 'uae_vat_accounts')"
  },
  {
    "input": {
      "doctype": "UAE VAT Settings",
      "question": "How do I retrieve the full VAT setup record for 'Inspire Group FZ LLC'?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.get_doc('UAE VAT Settings', {'company': 'Inspire Group FZ LLC'})"
  },
  {
    "input": {
      "doctype": "UAE VAT Settings",
      "question": "Can I list all VAT configurations across companies?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.get_all('UAE VAT Settings', fields=['company', 'uae_vat_accounts'])"
  },
  {
    "input": {
      "doctype": "UAE VAT Settings",
      "question": "I want to update or review VAT account assignments per company. Where should I query?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.get_list('UAE VAT Settings', fields=['company', 'uae_vat_accounts'])"
  },
  {
    "input": {
      "doctype": "Voice Call Settings",
      "question": "How do I update the call receiving device for a specific user?",
      "fields": [
        "user",
        "call_receiving_device"
      ]
    },
    "output": "frappe.get_list('Voice Call Settings', filters={'user': 'leena.wu@skybridgetele.cn'}, fields=['call_receiving_device'])"
  },
  {
    "input": {
      "doctype": "Voice Call Settings",
      "question": "Can I assign different devices for different users to receive voice calls?",
      "fields": [
        "user",
        "call_receiving_device"
      ]
    },
    "output": "frappe.get_all('Voice Call Settings', fields=['user', 'call_receiving_device'])"
  },
  {
    "input": {
      "doctype": "Voice Call Settings",
      "question": "Is it possible to set up a custom message for when the agent is unavailable?",
      "fields": [
        "agent_unavailable_message"
      ]
    },
    "output": "frappe.get_all('Voice Call Settings', fields=['user', 'agent_unavailable_message'])"
  },
  {
    "input": {
      "doctype": "Voice Call Settings",
      "question": "What happens if I do not set a greeting message for voice calls?",
      "fields": [
        "greeting_message"
      ]
    },
    "output": "frappe.db.count('Voice Call Settings', {'greeting_message': ''})"
  },
  {
    "input": {
      "doctype": "Voice Call Settings",
      "question": "How can I enable or disable the greeting message feature?",
      "fields": [
        "user",
        "greeting_message"
      ]
    },
    "output": "frappe.get_value('Voice Call Settings', {'user': 'fatima.zeidan@voxline.ae'}, 'greeting_message')"
  },
  {
    "input": {
      "doctype": "Voice Call Settings",
      "question": "How can I change the greeting message after it has been set?",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.get_doc('Voice Call Settings', {'user': 'sysadmin@aurelink.io'})"
  },
  {
    "input": {
      "doctype": "Voice Call Settings",
      "question": "How can I change the greeting message after it has been set?",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.get_doc('Voice Call Settings', {'user': 'sysadmin@aurelink.io'})"
  },
  {
    "input": {
      "doctype": "Voice Call Settings",
      "question": "What happens if I do not set a greeting message for voice calls?",
      "fields": [
        "greeting_message"
      ]
    },
    "output": "frappe.get_all('Voice Call Settings', filters={'greeting_message': ''}, fields=['user', 'greeting_message'])"
  },
  {
    "input": {
      "doctype": "Voice Call Settings",
      "question": "How many users have set a custom agent unavailable message?",
      "fields": [
        "agent_unavailable_message"
      ]
    },
    "output": "frappe.db.count('Voice Call Settings', {'agent_unavailable_message': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Auto Repeat",
      "question": "How can I update the status of an auto-repeat task?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_doc('Auto Repeat', {'status': 'Active'})"
  },
  {
    "input": {
      "doctype": "Auto Repeat",
      "question": "Fetch all auto-repeat tasks ending this month.",
      "fields": [
        "end_date"
      ]
    },
    "output": "frappe.get_list('Auto Repeat', filters={ 'end_date': ['between', ['2025-05-01', '2025-05-31']] }, fields=['reference_document', 'status', 'end_date'])"
  },
  {
    "input": {
      "doctype": "Auto Repeat",
      "question": "How many auto repeat records are currently disabled?",
      "fields": [
        "disabled"
      ]
    },
    "output": "frappe.db.count('Auto Repeat', {'disabled': 1})"
  },
  {
    "input": {
      "doctype": "Workspace Chart",
      "question": "How can I share a workspace chart with other users?",
      "fields": [
        "chart_name"
      ]
    },
    "output": "frappe.get_doc('Workspace Chart', 'Sales Overview')"
  },
  {
    "input": {
      "doctype": "Workspace Chart",
      "question": "Where can I find all charts with label 'Accounts'?",
      "fields": [
        "label"
      ]
    },
    "output": "frappe.get_list('Workspace Chart', filters={'label': 'Accounts'}, fields=['chart_name', 'label'])"
  },
  {
    "input": {
      "doctype": "User Select Document Type",
      "question": "Can I assign different document types to different users?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.get_list('User Select Document Type', fields=['name', 'document_type'])"
  },
  {
    "input": {
      "doctype": "User Select Document Type",
      "question": "How many document types are currently assigned to users?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.db.count('User Select Document Type', {'document_type': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Voice Call Settings",
      "question": "Retrieve the call receiving device used by a specific user.",
      "fields": [
        "user",
        "call_receiving_device"
      ]
    },
    "output": "frappe.db.get_value('Voice Call Settings', {'user': 'admin@company.com'}, 'call_receiving_device')"
  },
  {
    "input": {
      "doctype": "Auto Repeat",
      "question": "Get all auto repeat templates submitted with 'Weekly' frequency.",
      "fields": [
        "frequency"
      ]
    },
    "output": "frappe.get_all('Auto Repeat', filters={'frequency': 'Weekly'}, fields=['reference_doctype', 'start_date'])"
  },
  {
    "input": {
      "doctype": "User Select Document Type",
      "question": "How do I view a list of document types available for a user?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.get_list('User Select Document Type', fields=['document_type'])"
  },
  {
    "input": {
      "doctype": "User Select Document Type",
      "question": "How do I assign new document types to a user in ERPNext?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.get_doc('User Select Document Type', 'Sales Invoice')"
  },
  {
    "input": {
      "doctype": "User Select Document Type",
      "question": "Can I delete a document type assignment from a user?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.get_all('User Select Document Type', filters={'document_type': 'Purchase Order'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "User Select Document Type",
      "question": "How do I manage permissions for selected document types?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.get_list('User Select Document Type', filters={'document_type': ['!=', '']}, fields=['document_type'])"
  },
  {
    "input": {
      "doctype": "User Select Document Type",
      "question": "Can I assign multiple document types to a single user?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.db.get_value('User Select Document Type', {'document_type': 'Quotation'}, 'document_type')"
  },
  {
    "input": {
      "doctype": "User Select Document Type",
      "question": "How do I restrict users to view only specific document types?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.get_doc('User Select Document Type', {'document_type': 'Delivery Note'})"
  },
  {
    "input": {
      "doctype": "User Select Document Type",
      "question": "Can I modify the allowed document types for a user after initial assignment?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.get_all('User Select Document Type', filters={'document_type': 'Sales Order'}, fields=['document_type'])"
  },
  {
    "input": {
      "doctype": "User Select Document Type",
      "question": "How do I audit document type access by users?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.db.count('User Select Document Type', {'document_type': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "How do I retrieve all modules linked to user types?",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.get_list('User Type Module', fields=['module'])"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "How can I check which user types are linked to the HR module?",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.get_all('User Type Module', filters={'module': 'HR'}, fields=['module'])"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "Show me the full details of a user type linked to the 'Accounts' module.",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.get_doc('User Type Module', {'module': 'Accounts'})"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "How many user type modules are linked to the CRM module?",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.db.count('User Type Module', {'module': 'CRM'})"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "Get the module assigned to a specific user type if available.",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.db.get_value('User Type Module', {'module': 'Support'}, 'module')"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "List all modules assigned to user types.",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.get_list('User Type Module', fields=['module'])"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "Show all entries where the module is CRM.",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.get_list('User Type Module', filters={'module': 'CRM'}, fields=['module'])"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "Which modules are linked with user types for the Support team?",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.get_list('User Type Module', filters={'module': 'Support'}, fields=['module'])"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "Fetch all modules linked to user types starting with 'A'.",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.get_list('User Type Module', filters={'module': ['like', 'A%']}, fields=['module'])"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "Get all module assignments regardless of filters for reporting.",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.get_all('User Type Module', fields=['name', 'module'])"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "Get every module assignment, including disabled ones.",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.get_all('User Type Module', fields=['module'])"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "Open the full document for the module Accounts.",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.get_doc('User Type Module', {'module': 'Accounts'})"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "How many modules are assigned to user types?",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.db.count('User Type Module', {'module': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "Check the module linked to this assignment.",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.db.get_value('User Type Module', {'name': 'USR-MOD-2025-0001'}, 'module')"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "Get the record for module 'HR'.",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.get_doc('User Type Module', {'module': 'HR'})"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "Can I view all modules assigned to a particular user type?",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.get_list('User Type Module', filters={'module': 'HR'}, fields=['module'])"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "How do I assign a new module from the list of available modules?",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.get_list('User Type Module', fields=['module'])"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "Can I assign the same module to multiple user types?",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.get_list('User Type Module', filters={'module': 'CRM'}, fields=['name', 'module'])"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "How do I create custom modules for user types?",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.get_list('User Type Module', filters={'module': ['like', 'Custom%']}, fields=['module'])"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "Fetch all module-user type mappings including inactive ones.",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.get_all('User Type Module', fields=['name', 'module'])"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "How can I list all available modules regardless of assignment?",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.get_all('User Type Module', fields=['module'])"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "What happens when I unassign a module from a user type?",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.get_doc('User Type Module', {'module': 'Projects'})"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "How many module records are currently active?",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.db.count('User Type Module', {'module': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "Get the module name linked to this entry.",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.db.get_value('User Type Module', {'name': 'UTM-0005'}, 'module')"
  },
  {
    "input": {
      "doctype": "User Type Module",
      "question": "Can I configure permissions for a module in a user type?",
      "fields": [
        "module"
      ]
    },
    "output": "frappe.get_list('User Type Module', filters={'module': 'Accounts'}, fields=['name', 'module'])"
  },
  {
    "input": {
      "doctype": "Promotional Scheme",
      "question": "How do I disable a promotional scheme in ERPNext?",
      "fields": [
        "disable"
      ]
    },
    "output": "frappe.get_doc('Promotional Scheme', {'disable': 1})"
  },
  {
    "input": {
      "doctype": "Promotional Scheme",
      "question": "Which schemes apply to customer groups and are not disabled?",
      "fields": [
        "customer_group",
        "disable"
      ]
    },
    "output": "frappe.get_all('Promotional Scheme', filters={'customer_group': 'Retail', 'disable': 0}, fields=['name', 'valid_from', 'valid_upto'])"
  },
  {
    "input": {
      "doctype": "Promotional Scheme",
      "question": "Fetch promotional schemes applicable to the brand 'Acme'",
      "fields": [
        "brands"
      ]
    },
    "output": "frappe.get_list('Promotional Scheme', filters={'brands': ['like', '%Acme%']}, fields=['name', 'brands'])"
  },
  {
    "input": {
      "doctype": "Promotional Scheme",
      "question": "How many promotional schemes are linked to the campaign 'Festive2025'?",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.db.count('Promotional Scheme', {'campaign': 'Festive2025'})"
  },
  {
    "input": {
      "doctype": "Promotional Scheme",
      "question": "What is the scheme valid from January 1 to March 31, 2025?",
      "fields": [
        "valid_from",
        "valid_upto"
      ]
    },
    "output": "frappe.get_list('Promotional Scheme', filters={'valid_from': ['>=', '2025-01-01'], 'valid_upto': ['<=', '2025-03-31']}, fields=['name', 'valid_from', 'valid_upto'])"
  },
  {
    "input": {
      "doctype": "Promotional Scheme",
      "question": "What is the start date of the 'Summer Promo 2025' scheme?",
      "fields": [
        "valid_from"
      ]
    },
    "output": "frappe.db.get_value('Promotional Scheme', {'name': 'Summer Promo 2025'}, 'valid_from')"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "Where can I find the redirect URI tied to an OAuth code in ERPNext?",
      "fields": [
        "authorization_code",
        "redirect_uri_bound_to_authorization_code"
      ]
    },
    "output": "frappe.get_list('OAuth Authorization Code', filters={}, fields=['authorization_code', 'redirect_uri_bound_to_authorization_code'])"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "How do I validate the code challenge method used in an OAuth transaction?",
      "fields": [
        "code_challenge_method"
      ]
    },
    "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'auth_code_xyz'}, 'code_challenge_method')"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "Where do I set the lifetime or validity of an OAuth authorization code in ERPNext?",
      "fields": [
        "validity"
      ]
    },
    "output": "frappe.get_doc('OAuth Authorization Code', {'authorization_code': 'auth_code_123'})"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "How many OAuth codes were generated by user `jane@example.com`?",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.db.count('OAuth Authorization Code', {'user': 'jane@example.com'})"
  },
  {
    "input": {
      "doctype": "Job Card Operation",
      "question": "Where can I add the quantity completed for a specific operation in the job card?",
      "fields": [
        "completed_qty"
      ]
    },
    "output": "frappe.get_doc('Job Card Operation', {'status': 'Work In Progress'})"
  },
  {
    "input": {
      "doctype": "Job Card Operation",
      "question": "Can I change the status of an operation to 'Pending' in a job card?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_doc('Job Card Operation', {'status': 'Pending'})"
  },
  {
    "input": {
      "doctype": "Job Card Operation",
      "question": "How do I track the work-in-progress status for operations in job cards?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_list('Job Card Operation', filters={'status': 'Work In Progress'}, fields=['status', 'completed_qty'])"
  },
  {
    "input": {
      "doctype": "Job Card Operation",
      "question": "How many operations are currently marked as 'Complete'?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.count('Job Card Operation', {'status': 'Completed'})"
  },
  {
    "input": {
      "doctype": "Job Card Operation",
      "question": "Where can I view the completed time for each operation in the job card?",
      "fields": [
        "completed_time"
      ]
    },
    "output": "frappe.get_all('Job Card Operation', fields=['status', 'completed_time'])"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "How can I check if a specific authorization code has expired in ERPNext?",
      "fields": [
        "authorization_code",
        "expiration_time"
      ]
    },
    "output": "frappe.get_doc('OAuth Authorization Code', {'authorization_code': 'auth_xyz_5678'})"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "Where can I find the redirect URI tied to an OAuth code in ERPNext?",
      "fields": [
        "authorization_code",
        "redirect_uri_bound_to_authorization_code"
      ]
    },
    "output": "frappe.get_list('OAuth Authorization Code', filters={}, fields=['authorization_code', 'redirect_uri_bound_to_authorization_code'])"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "How do I validate the code challenge method used in an OAuth transaction?",
      "fields": [
        "code_challenge_method"
      ]
    },
    "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'auth_code_xyz'}, 'code_challenge_method')"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "Where do I set the lifetime or validity of an OAuth authorization code in ERPNext?",
      "fields": [
        "validity"
      ]
    },
    "output": "frappe.get_doc('OAuth Authorization Code', {'authorization_code': 'auth_code_123'})"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "How many OAuth codes were generated by user `jane@example.com`?",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.db.count('OAuth Authorization Code', {'user': 'jane@example.com'})"
  },
  {
    "input": {
      "doctype": "Job Card Operation",
      "question": "Where can I add the quantity completed for a specific operation in the job card?",
      "fields": [
        "completed_qty"
      ]
    },
    "output": "frappe.get_doc('Job Card Operation', {'status': 'Work In Progress'})"
  },
  {
    "input": {
      "doctype": "Job Card Operation",
      "question": "Can I change the status of an operation to 'Pending' in a job card?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_doc('Job Card Operation', {'status': 'Pending'})"
  },
  {
    "input": {
      "doctype": "Job Card Operation",
      "question": "How do I track the work-in-progress status for operations in job cards?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_list('Job Card Operation', filters={'status': 'Work In Progress'}, fields=['status', 'completed_qty'])"
  },
  {
    "input": {
      "doctype": "Job Card Operation",
      "question": "How many operations are currently marked as 'Complete'?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.count('Job Card Operation', {'status': 'Completed'})"
  },
  {
    "input": {
      "doctype": "Job Card Operation",
      "question": "Where can I view the completed time for each operation in the job card?",
      "fields": [
        "completed_time"
      ]
    },
    "output": "frappe.get_all('Job Card Operation', fields=['status', 'completed_time'])"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "How can I check if a specific authorization code has expired in ERPNext?",
      "fields": [
        "authorization_code",
        "expiration_time"
      ]
    },
    "output": "frappe.get_doc('OAuth Authorization Code', {'authorization_code': 'auth_xyz_5678'})"
  },
  {
    "input": {
      "doctype": "Contact Us Settings",
      "question": "How can I set up an email address to forward customer queries to?",
      "fields": [
        "forward_to_email"
      ]
    },
    "output": "frappe.get_doc('Contact Us Settings')"
  },
  {
    "input": {
      "doctype": "Contact Us Settings",
      "question": "Where do I configure the address lines for the contact us section?",
      "fields": [
        "address_line1",
        "address_line2"
      ]
    },
    "output": "frappe.get_all('Contact Us Settings', fields=['address_line1', 'address_line2'])"
  },
  {
    "input": {
      "doctype": "Contact Us Settings",
      "question": "How can I add a city and state for the contact us address?",
      "fields": [
        "city",
        "state"
      ]
    },
    "output": "frappe.get_list('Contact Us Settings', fields=['city', 'state'])"
  },
  {
    "input": {
      "doctype": "Contact Us Settings",
      "question": "Where do I specify the phone number for customer queries?",
      "fields": [
        "phone"
      ]
    },
    "output": "frappe.db.get_value('Contact Us Settings', None, 'phone')"
  },
  {
    "input": {
      "doctype": "Contact Us Settings",
      "question": "How many contact us settings have an email ID defined?",
      "fields": [
        "email_id"
      ]
    },
    "output": "frappe.db.count('Contact Us Settings', {'email_id': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Contact Us Settings",
      "question": "How do I add a heading for the contact us section?",
      "fields": [
        "heading"
      ]
    },
    "output": "frappe.get_doc('Contact Us Settings').heading"
  },
  {
    "input": {
      "doctype": "Contact Us Settings",
      "question": "How can I change the introduction message for the contact us page?",
      "fields": [
        "introduction"
      ]
    },
    "output": "frappe.get_doc('Contact Us Settings').introduction"
  },
  {
    "input": {
      "doctype": "Contact Us Settings",
      "question": "Where can I set up the country and pincode in the contact us settings?",
      "fields": [
        "country",
        "pincode"
      ]
    },
    "output": "frappe.get_list('Contact Us Settings', fields=['country', 'pincode'])"
  },
  {
    "input": {
      "doctype": "Contact Us Settings",
      "question": "How do I add a Skype ID for the contact us section?",
      "fields": [
        "skype"
      ]
    },
    "output": "frappe.db.get_value('Contact Us Settings', None, 'skype')"
  },
  {
    "input": {
      "doctype": "Contact Us Settings",
      "question": "Can I add an email ID for customer inquiries?",
      "fields": [
        "email_id"
      ]
    },
    "output": "frappe.get_doc('Contact Us Settings').email_id"
  },
  {
    "input": {
      "doctype": "Plaid Settings",
      "question": "How can I enable Plaid integration for my system?",
      "fields": [
        "enabled"
      ]
    },
    "output": "frappe.get_doc('Plaid Settings', 'Plaid Settings')"
  },
  {
    "input": {
      "doctype": "Accounting Dimension",
      "question": "How many disabled accounting dimensions do we have?",
      "fields": [
        "disabled"
      ]
    },
    "output": "frappe.db.count('Accounting Dimension', {'disabled': 1})"
  },
  {
    "input": {
      "doctype": "Accounting Dimension",
      "question": "How do I list all active accounting dimensions?",
      "fields": [
        "label",
        "document_type"
      ]
    },
    "output": "frappe.get_list('Accounting Dimension', filters={'disabled': 0}, fields=['label', 'document_type'])"
  },
  {
    "input": {
      "doctype": "Accounting Dimension",
      "question": "Can I retrieve the document type of an accounting dimension by label?",
      "fields": [
        "label"
      ]
    },
    "output": "frappe.db.get_value('Accounting Dimension', {'label': 'Project'}, 'document_type')"
  },
  {
    "input": {
      "doctype": "Quality Inspection Parameter Group",
      "question": "How do I fetch all parameter groups?",
      "fields": [
        "group_name"
      ]
    },
    "output": "frappe.get_all('Quality Inspection Parameter Group', fields=['group_name'])"
  },
  {
    "input": {
      "doctype": "Quality Inspection Parameter Group",
      "question": "Can I get details of a parameter group by name?",
      "fields": [
        "group_name"
      ]
    },
    "output": "frappe.get_doc('Quality Inspection Parameter Group', 'Raw Material Checks')"
  },
  {
    "input": {
      "doctype": "Plaid Settings",
      "question": "Where is the Plaid client ID stored?",
      "fields": [
        "plaid_client_id"
      ]
    },
    "output": "frappe.get_list('Plaid Settings', fields=['plaid_client_id'])"
  },
  {
    "input": {
      "doctype": "Plaid Settings",
      "question": "How do I get all Plaid settings where auto sync is enabled?",
      "fields": [
        "automatic_sync"
      ]
    },
    "output": "frappe.get_all('Plaid Settings', filters={'automatic_sync': 1}, fields=['enabled', 'plaid_env'])"
  },
  {
    "input": {
      "doctype": "Quality Inspection Parameter Group",
      "question": "Which parameter groups are used for inspections?",
      "fields": [
        "group_name"
      ]
    },
    "output": "frappe.get_list('Quality Inspection Parameter Group', filters={}, fields=['group_name'])"
  },
  {
    "input": {
      "doctype": "Accounting Dimension",
      "question": "Get the full record for the 'Cost Center' dimension.",
      "fields": [
        "label"
      ]
    },
    "output": "frappe.get_doc('Accounting Dimension', {'label': 'Cost Center'})"
  },
  {
    "input": {
      "doctype": "Landed Cost Item",
      "question": "How do I list all landed cost items related to fixed assets?",
      "fields": [
        "is_fixed_asset"
      ]
    },
    "output": "frappe.get_list('Landed Cost Item', filters={'is_fixed_asset': 1}, fields=['item_code', 'qty', 'rate'])"
  },
  {
    "input": {
      "doctype": "Landed Cost Item",
      "question": "What is the rate and quantity for the landed cost item ckjdjs123?",
      "fields": [
        "item_code",
        "qty",
        "rate"
      ]
    },
    "output": "frappe.get_doc('Landed Cost Item', {'item_code': 'ckjdjs123'})"
  },
  {
    "input": {
      "doctype": "Landed Cost Item",
      "question": "Get the description of the item with code LCI-0001",
      "fields": [
        "item_code",
        "description"
      ]
    },
    "output": "frappe.db.get_value('Landed Cost Item', {'item_code': 'LCI-0001'}, 'description')"
  },
  {
    "input": {
      "doctype": "Landed Cost Item",
      "question": "How many landed cost items have more than 10 quantity?",
      "fields": [
        "qty"
      ]
    },
    "output": "frappe.db.count('Landed Cost Item', {'qty': ['>', 10]})"
  },
  {
    "input": {
      "doctype": "Landed Cost Item",
      "question": "List all landed cost entries with a specified receipt document type.",
      "fields": [
        "receipt_document_type",
        "receipt_document"
      ]
    },
    "output": "frappe.get_all('Landed Cost Item', filters={'receipt_document_type': 'Purchase Receipt'}, fields=['item_code', 'receipt_document'])"
  },
  {
    "input": {
      "doctype": "Quality Inspection Parameter",
      "question": "List all parameters grouped under 'Packaging Standards'.",
      "fields": [
        "parameter",
        "parameter_group"
      ]
    },
    "output": "frappe.get_list('Quality Inspection Parameter', filters={'parameter_group': 'Packaging Standards'}, fields=['parameter'])"
  },
  {
    "input": {
      "doctype": "Quality Inspection Parameter",
      "question": "Get the description for the parameter Moisture Content.",
      "fields": [
        "parameter",
        "description"
      ]
    },
    "output": "frappe.db.get_value('Quality Inspection Parameter', {'parameter': 'Moisture Content'}, 'description')"
  },
  {
    "input": {
      "doctype": "Quality Inspection Parameter",
      "question": "How many parameters belong to the 'Chemical Tests' group?",
      "fields": [
        "parameter_group"
      ]
    },
    "output": "frappe.db.count('Quality Inspection Parameter', {'parameter_group': 'Chemical Tests'})"
  },
  {
    "input": {
      "doctype": "Quality Inspection Parameter",
      "question": "Retrieve the full record for the parameter 'PH Level'.",
      "fields": [
        "parameter"
      ]
    },
    "output": "frappe.get_doc('Quality Inspection Parameter', {'parameter': 'PH Level'})"
  },
  {
    "input": {
      "doctype": "Quality Inspection Parameter",
      "question": "Fetch all inspection parameters and their descriptions.",
      "fields": [
        "parameter",
        "description"
      ]
    },
    "output": "frappe.get_all('Quality Inspection Parameter', fields=['parameter', 'description'])"
  },
  {
    "input": {
      "doctype": "Landed Cost Item",
      "question": "How do I view all landed cost items linked to a purchase receipt?",
      "fields": [
        "purchase_receipt_item",
        "receipt_document"
      ]
    },
    "output": "frappe.get_list('Landed Cost Item', filters={'receipt_document_type': 'Purchase Receipt'}, fields=['item_code', 'description', 'receipt_document'])"
  },
  {
    "input": {
      "doctype": "Landed Cost Item",
      "question": "How many landed cost items are marked as fixed assets?",
      "fields": [
        "is_fixed_asset"
      ]
    },
    "output": "frappe.db.count('Landed Cost Item', {'is_fixed_asset': 1})"
  },
  {
    "input": {
      "doctype": "Landed Cost Item",
      "question": "Fetch all items with a rate greater than 100 under landed cost items.",
      "fields": [
        "rate",
        "item_code",
        "description"
      ]
    },
    "output": "frappe.get_all('Landed Cost Item', filters={ 'rate': ['>', 100] }, fields=['item_code', 'description', 'rate'])"
  },
  {
    "input": {
      "doctype": "Landed Cost Voucher",
      "question": "How do I fetch a landed cost voucher by name?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_doc('Landed Cost Voucher', 'LCV-0001')"
  },
  {
    "input": {
      "doctype": "Landed Cost Voucher",
      "question": "List all vouchers created in May 2025.",
      "fields": [
        "posting_date"
      ]
    },
    "output": "frappe.get_list('Landed Cost Voucher', filters={ 'posting_date': ['between', ['2025-05-01', '2025-05-31']] }, fields=['name', 'company', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Landed Cost Voucher",
      "question": "How many landed cost vouchers were amended from previous ones?",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.db.count('Landed Cost Voucher', {'amended_from': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Landed Cost Voucher",
      "question": "Get the total tax for voucher LCV-0003.",
      "fields": [
        "total_taxes_and_charges"
      ]
    },
    "output": "frappe.db.get_value('Landed Cost Voucher', 'LCV-0003', 'total_taxes_and_charges')"
  },
  {
    "input": {
      "doctype": "Landed Cost Voucher",
      "question": "Retrieve the distribution method used in voucher LCV-0004.",
      "fields": [
        "distribute_charges_based_on"
      ]
    },
    "output": "frappe.db.get_value('Landed Cost Voucher', 'LCV-0004', 'distribute_charges_based_on')"
  },
  {
    "input": {
      "doctype": "Landed Cost Voucher",
      "question": "List all landed cost vouchers with more than 2 purchase receipts.",
      "fields": [
        "purchase_receipts"
      ]
    },
    "output": "frappe.get_list('Landed Cost Voucher', filters={}, fields=['name', 'purchase_receipts'])"
  },
  {
    "input": {
      "doctype": "Landed Cost Voucher",
      "question": "How many vouchers have taxes included?",
      "fields": [
        "taxes"
      ]
    },
    "output": "frappe.db.count('Landed Cost Voucher', {'taxes': ['!=', []]})"
  },
  {
    "input": {
      "doctype": "Landed Cost Item",
      "question": "Get landed cost item details where charges were applied.",
      "fields": [
        "applicable_charges"
      ]
    },
    "output": "frappe.get_all('Landed Cost Item', filters={'applicable_charges': ['!=', '']}, fields=['item_code', 'rate', 'applicable_charges'])"
  },
  {
    "input": {
      "doctype": "Landed Cost Item",
      "question": "Retrieve full details of a landed cost item with item code 'ITEM-0003'.",
      "fields": [
        "item_code"
      ]
    },
    "output": "frappe.get_doc('Landed Cost Item', {'item_code': 'ITEM-0003'})"
  },
  {
    "input": {
      "doctype": "Landed Cost Item",
      "question": "How many landed cost items have a quantity greater than 50?",
      "fields": [
        "qty"
      ]
    },
    "output": "frappe.db.count('Landed Cost Item', {'qty': ['>', 50]})"
  },
  {
    "input": {
      "doctype": "Landed Cost Voucher",
      "question": "Fetch vouchers posted after 1st June 2024.",
      "fields": [
        "posting_date"
      ]
    },
    "output": "frappe.get_list('Landed Cost Voucher', filters={ 'posting_date': ['>', '2024-06-01'] }, fields=['name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Accounting Dimension",
      "question": "How can I set default values for my accounting dimension?",
      "fields": [
        "dimension_defaults"
      ]
    },
    "output": "frappe.get_list('Accounting Dimension', filters={'dimension_defaults': ['!=', '']}, fields=['label', 'dimension_defaults'])"
  },
  {
    "input": {
      "doctype": "Accounting Dimension",
      "question": "How can I disable an accounting dimension?",
      "fields": [
        "label"
      ]
    },
    "output": "frappe.get_doc('Accounting Dimension', {'label': 'Project'})"
  },
  {
    "input": {
      "doctype": "Accounting Dimension",
      "question": "What fields are included in the accounting dimension setup?",
      "fields": [
        "document_type",
        "label",
        "fieldname"
      ]
    },
    "output": "frappe.get_all('Accounting Dimension', fields=['document_type', 'label', 'fieldname'])"
  },
  {
    "input": {
      "doctype": "Quality Inspection Reading",
      "question": "How do I create a new quality inspection reading for a parameter?",
      "fields": [
        "specification",
        "parameter_group",
        "reading_1"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'Quality Inspection Reading', 'specification': 'Length Check', 'parameter_group': 'Raw Material', 'reading_1': 12.5 })"
  },
  {
    "input": {
      "doctype": "Quality Inspection Reading",
      "question": "Can I link a quality inspection reading to a quality inspection parameter group?",
      "fields": [
        "parameter_group"
      ]
    },
    "output": "frappe.get_list('Quality Inspection Reading', filters={'parameter_group': 'Finished Goods'}, fields=['specification', 'parameter_group'])"
  },
  {
    "input": {
      "doctype": "Quality Inspection Reading",
      "question": "How do I record the readings for a quality inspection parameter?",
      "fields": [
        "specification",
        "reading_1",
        "reading_2"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'Quality Inspection Reading', 'specification': 'Width Tolerance', 'reading_1': 4.3, 'reading_2': 4.5 })"
  },
  {
    "input": {
      "doctype": "Quality Inspection Reading",
      "question": "How can I set up minimum and maximum values for quality inspection readings?",
      "fields": [
        "specification",
        "min_value",
        "max_value"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'Quality Inspection Reading', 'specification': 'Thickness', 'min_value': 5.0, 'max_value': 10.0 })"
  },
  {
    "input": {
      "doctype": "Quality Inspection Reading",
      "question": "Can I use formulas for acceptance criteria in quality inspection readings?",
      "fields": [
        "specification",
        "formula_based_criteria",
        "acceptance_formula"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'Quality Inspection Reading', 'specification': 'Length Variance', 'formula_based_criteria': 1, 'acceptance_formula': 'reading_1 + reading_2 <= 25' })"
  },
  {
    "input": {
      "doctype": "Quality Inspection Reading",
      "question": "How can I manually inspect and update a quality inspection reading?",
      "fields": [
        "manual_inspection",
        "specification",
        "reading_1"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'Quality Inspection Reading', 'manual_inspection': 1, 'specification': 'Visual Defects', 'reading_1': 'OK' })"
  },
  {
    "input": {
      "doctype": "Quality Inspection Reading",
      "question": "Can I have multiple readings for the same quality inspection parameter?",
      "fields": [
        "specification",
        "reading_1",
        "reading_2",
        "reading_3"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'Quality Inspection Reading', 'specification': 'Weight Tolerance', 'reading_1': 9.8, 'reading_2': 10.1, 'reading_3': 9.9 })"
  },
  {
    "input": {
      "doctype": "Quality Inspection Reading",
      "question": "How do I mark a quality inspection reading as accepted or rejected?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_list('Quality Inspection Reading', filters={'status': 'Accepted'}, fields=['specification', 'reading_1', 'status'])"
  },
  {
    "input": {
      "doctype": "Quality Inspection Reading",
      "question": "How can I set up automated criteria for quality inspection readings?",
      "fields": [
        "formula_based_criteria",
        "acceptance_formula"
      ]
    },
    "output": "frappe.get_list('Quality Inspection Reading', filters={'formula_based_criteria': 1}, fields=['specification', 'acceptance_formula'])"
  },
  {
    "input": {
      "doctype": "Quality Inspection Reading",
      "question": "How many readings are manually inspected?",
      "fields": [
        "manual_inspection"
      ]
    },
    "output": "frappe.db.count('Quality Inspection Reading', {'manual_inspection': 1})"
  },
  {
    "input": {
      "doctype": "Plaid Settings",
      "question": "Where can I configure the Plaid client ID and secret?",
      "fields": [
        "plaid_client_id",
        "plaid_secret"
      ]
    },
    "output": "frappe.get_doc('Plaid Settings', 'Plaid Settings')"
  },
  {
    "input": {
      "doctype": "Quality Inspection Parameter",
      "question": "How do I create a new quality inspection parameter?",
      "fields": [
        "parameter",
        "parameter_group",
        "description"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'Quality Inspection Parameter', 'parameter': 'Color Uniformity', 'parameter_group': 'Fabric Quality', 'description': 'Check for color consistency across batch' })"
  },
  {
    "input": {
      "doctype": "Quality Inspection Parameter",
      "question": "What is the role of parameter groups in quality inspection parameters?",
      "fields": [
        "parameter_group"
      ]
    },
    "output": "frappe.get_list('Quality Inspection Parameter', fields=['parameter', 'parameter_group'])"
  },
  {
    "input": {
      "doctype": "Quality Inspection Parameter",
      "question": "How can I link a quality inspection parameter to a group?",
      "fields": [
        "parameter_group"
      ]
    },
    "output": "frappe.db.get_value('Quality Inspection Parameter', {'parameter': 'Tensile Strength'}, 'parameter_group')"
  },
  {
    "input": {
      "doctype": "Quality Inspection Parameter",
      "question": "What details can I add for each quality inspection parameter?",
      "fields": [
        "parameter",
        "description"
      ]
    },
    "output": "frappe.get_all('Quality Inspection Parameter', fields=['parameter', 'description'])"
  },
  {
    "input": {
      "doctype": "Quality Inspection Parameter",
      "question": "Can I update the description of a quality inspection parameter?",
      "fields": [
        "parameter",
        "description"
      ]
    },
    "output": "frappe.get_doc({ 'doctype': 'Quality Inspection Parameter', 'parameter': 'Thickness Range', 'description': 'Updated notes on standard range' })"
  },
  {
    "input": {
      "doctype": "Website Attribute",
      "question": "How do I link an item attribute to a website attribute?",
      "fields": [
        "attribute"
      ]
    },
    "output": "frappe.get_doc('Website Attribute', 'Color')"
  },
  {
    "input": {
      "doctype": "Website Attribute",
      "question": "What types of attributes can be assigned to a website?",
      "fields": [
        "attribute"
      ]
    },
    "output": "frappe.get_all('Website Attribute', fields=['attribute'])"
  },
  {
    "input": {
      "doctype": "Payment Term",
      "question": "How do I create a new payment term?",
      "fields": [
        "payment_term_name"
      ]
    },
    "output": "frappe.get_doc('Payment Term', 'Net 30')"
  },
  {
    "input": {
      "doctype": "Payment Term",
      "question": "How can I set a payment term based on invoice date?",
      "fields": [
        "due_date_based_on"
      ]
    },
    "output": "frappe.get_list('Payment Term', filters={'due_date_based_on': 'Invoice Date'}, fields=['payment_term_name', 'credit_days'])"
  },
  {
    "input": {
      "doctype": "Payment Term",
      "question": "Can I apply a discount based on payment terms?",
      "fields": [
        "discount"
      ]
    },
    "output": "frappe.get_all('Payment Term', filters={'discount': ['>', 0]}, fields=['payment_term_name', 'discount'])"
  },
  {
    "input": {
      "doctype": "Payment Term",
      "question": "How can I set the payment due date based on the end of the invoice month?",
      "fields": [
        "due_date_based_on",
        "credit_months"
      ]
    },
    "output": "frappe.get_doc('Payment Term', {'due_date_based_on': 'End of Invoice Month', 'credit_months': 1})"
  },
  {
    "input": {
      "doctype": "Payment Term",
      "question": "What options do I have for defining credit terms in payment terms?",
      "fields": [
        "credit_days",
        "credit_months"
      ]
    },
    "output": "frappe.get_list('Payment Term', fields=['payment_term_name', 'credit_days', 'credit_months'])"
  },
  {
    "input": {
      "doctype": "Payment Term",
      "question": "How can I apply a discount based on invoice amounts in payment terms?",
      "fields": [
        "discount_type",
        "discount"
      ]
    },
    "output": "frappe.db.count('Payment Term', {'discount_type': 'Percentage', 'discount': ['>', 0]})"
  },
  {
    "input": {
      "doctype": "Subscription Invoice",
      "question": "How do I create a subscription invoice linked to a specific document?",
      "fields": [
        "document_type",
        "invoice"
      ]
    },
    "output": "frappe.get_doc('Subscription Invoice', {'document_type': 'Sales Invoice', 'invoice': 'INV-2025-0001'})"
  },
  {
    "input": {
      "doctype": "Subscription Invoice",
      "question": "Can I generate a subscription invoice for multiple documents?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.get_list('Subscription Invoice', fields=['document_type', 'invoice'])"
  },
  {
    "input": {
      "doctype": "Subscription Invoice",
      "question": "How do I link a subscription invoice to an existing document type?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.db.get_value('Subscription Invoice', {'document_type': 'Sales Invoice'}, 'invoice')"
  },
  {
    "input": {
      "doctype": "Plaid Settings",
      "question": "How can I automatically sync accounts every hour with Plaid?",
      "fields": [
        "automatic_sync"
      ]
    },
    "output": "frappe.get_list('Plaid Settings', filters={'automatic_sync': 1}, fields=['plaid_env'])"
  },
  {
    "input": {
      "doctype": "Plaid Settings",
      "question": "Is it possible to enable European access for Plaid in my settings?",
      "fields": [
        "enable_european_access"
      ]
    },
    "output": "frappe.db.count('Plaid Settings', {'enable_european_access': 1})"
  },
  {
    "input": {
      "doctype": "Plaid Settings",
      "question": "Where do I select the Plaid environment for my system (sandbox, development, production)?",
      "fields": [
        "plaid_env"
      ]
    },
    "output": "frappe.get_list('Plaid Settings', fields=['plaid_env'])"
  },
  {
    "input": {
      "doctype": "Plaid Settings",
      "question": "Can I change the Plaid environment to production?",
      "fields": [
        "plaid_env"
      ]
    },
    "output": "frappe.get_doc('Plaid Settings', {'plaid_env': 'production'})"
  },
  {
    "input": {
      "doctype": "Plaid Settings",
      "question": "How can I enable or disable Plaid synchronization for my accounts?",
      "fields": [
        "enabled"
      ]
    },
    "output": "frappe.get_list('Plaid Settings', fields=['enabled', 'automatic_sync'])"
  },
  {
    "input": {
      "doctype": "Plaid Settings",
      "question": "What is the process for enabling automatic account sync every hour in Plaid settings?",
      "fields": [
        "automatic_sync"
      ]
    },
    "output": "frappe.get_doc('Plaid Settings', {'automatic_sync': 1})"
  },
  {
    "input": {
      "doctype": "Plaid Settings",
      "question": "How do I enter my Plaid client ID and secret into the settings?",
      "fields": [
        "plaid_client_id",
        "plaid_secret"
      ]
    },
    "output": "frappe.get_list('Plaid Settings', fields=['plaid_client_id', 'plaid_secret'])"
  },
  {
    "input": {
      "doctype": "Plaid Settings",
      "question": "Where do I configure the Plaid client secret for my ERP system?",
      "fields": [
        "plaid_secret"
      ]
    },
    "output": "frappe.get_list('Plaid Settings', fields=['plaid_secret'])"
  },
  {
    "input": {
      "doctype": "Plaid Settings",
      "question": "Can I synchronize all accounts automatically in Plaid settings?",
      "fields": [
        "automatic_sync"
      ]
    },
    "output": "frappe.db.count('Plaid Settings', {'automatic_sync': 1})"
  },
  {
    "input": {
      "doctype": "Plaid Settings",
      "question": "What settings do I need to adjust to enable European access with Plaid?",
      "fields": [
        "enable_european_access"
      ]
    },
    "output": "frappe.get_doc('Plaid Settings', {'enable_european_access': 1})"
  },
  {
    "input": {
      "doctype": "Project Template Task",
      "question": "How do I add a task to my project template?",
      "fields": [
        "task",
        "subject"
      ]
    },
    "output": "frappe.get_doc('Project Template Task', 'New Task')"
  },
  {
    "input": {
      "doctype": "Project Template Task",
      "question": "Where can I view the subject of a task in my project template?",
      "fields": [
        "subject"
      ]
    },
    "output": "frappe.get_list('Project Template Task', fields=['subject'])"
  },
  {
    "input": {
      "doctype": "Project Template Task",
      "question": "How do I link a task to a project template?",
      "fields": [
        "task"
      ]
    },
    "output": "frappe.db.get_value('Project Template Task', {'task': 'Development Phase'}, 'subject')"
  },
  {
    "input": {
      "doctype": "Project Template Task",
      "question": "Can I edit the subject of a task in the project template?",
      "fields": [
        "subject"
      ]
    },
    "output": "frappe.get_doc('Project Template Task', {'subject': 'Finalize UI'})"
  },
  {
    "input": {
      "doctype": "Project Template Task",
      "question": "What field do I use to set the task name in the project template?",
      "fields": [
        "task"
      ]
    },
    "output": "frappe.get_list('Project Template Task', fields=['task'])"
  },
  {
    "input": {
      "doctype": "Project Template Task",
      "question": "How can I view all tasks in a project template?",
      "fields": [
        "task",
        "subject"
      ]
    },
    "output": "frappe.get_all('Project Template Task', fields=['task', 'subject'])"
  },
  {
    "input": {
      "doctype": "Project Template Task",
      "question": "Where can I see the task details in a project template?",
      "fields": [
        "task",
        "subject"
      ]
    },
    "output": "frappe.get_doc('Project Template Task', 'Task Planning')"
  },
  {
    "input": {
      "doctype": "Project Template Task",
      "question": "How can I view the subject of each task in a project template?",
      "fields": [
        "task",
        "subject"
      ]
    },
    "output": "frappe.get_list('Project Template Task', fields=['task', 'subject'])"
  },
  {
    "input": {
      "doctype": "Project Template Task",
      "question": "How do I get the list of all tasks from project templates?",
      "fields": [
        "task"
      ]
    },
    "output": "frappe.get_all('Project Template Task', fields=['task'])"
  },
  {
    "input": {
      "doctype": "Project Template Task",
      "question": "Can I see which task names are used in project template tasks?",
      "fields": [
        "task"
      ]
    },
    "output": "frappe.get_list('Project Template Task', distinct=True, fields=['task'])"
  },
  {
    "input": {
      "doctype": "Project Template Task",
      "question": "Where can I check subjects assigned to tasks in the project template?",
      "fields": [
        "subject"
      ]
    },
    "output": "frappe.get_list('Project Template Task', fields=['subject'])"
  },
  {
    "input": {
      "doctype": "Asset Category",
      "question": "How do I list all asset categories in the system?",
      "fields": [
        "asset_category_name"
      ]
    },
    "output": "frappe.get_all('Asset Category', fields=['asset_category_name'])"
  },
  {
    "input": {
      "doctype": "Asset Category",
      "question": "Can I view which asset categories have CWIP accounting enabled?",
      "fields": [
        "asset_category_name",
        "enable_cwip_accounting"
      ]
    },
    "output": "frappe.get_list('Asset Category', filters={'enable_cwip_accounting': 1}, fields=['asset_category_name'])"
  },
  {
    "input": {
      "doctype": "Asset Category",
      "question": "Which finance books are linked to each asset category?",
      "fields": [
        "asset_category_name",
        "finance_books"
      ]
    },
    "output": "frappe.get_list('Asset Category', fields=['asset_category_name', 'finance_books'])"
  },
  {
    "input": {
      "doctype": "Asset Category",
      "question": "How do I retrieve the accounts mapped to each asset category?",
      "fields": [
        "asset_category_name",
        "accounts"
      ]
    },
    "output": "frappe.get_list('Asset Category', fields=['asset_category_name', 'accounts'])"
  },
  {
    "input": {
      "doctype": "Asset Category",
      "question": "Can I view all asset categories in the system?",
      "fields": [
        "asset_category_name"
      ]
    },
    "output": "frappe.get_all('Asset Category', fields=['asset_category_name'])"
  },
  {
    "input": {
      "doctype": "Asset Category",
      "question": "How can I view the finance books linked to an asset category?",
      "fields": [
        "finance_books"
      ]
    },
    "output": "frappe.get_list('Asset Category', fields=['asset_category_name', 'finance_books'])"
  },
  {
    "input": {
      "doctype": "Asset Category",
      "question": "Can I retrieve the depreciation options for each asset category?",
      "fields": [
        "asset_category_name",
        "depreciation_options"
      ]
    },
    "output": "frappe.get_list('Asset Category', fields=['asset_category_name', 'depreciation_options'])"
  },
  {
    "input": {
      "doctype": "Asset Category",
      "question": "How many asset categories have Capital Work in Progress Accounting enabled?",
      "fields": [
        "enable_cwip_accounting"
      ]
    },
    "output": "frappe.db.count('Asset Category', {'enable_cwip_accounting': 1})"
  },
  {
    "input": {
      "doctype": "Asset Category",
      "question": "Can I view the list of accounts linked to each asset category?",
      "fields": [
        "asset_category_name",
        "accounts"
      ]
    },
    "output": "frappe.get_list('Asset Category', fields=['asset_category_name', 'accounts'])"
  },
  {
    "input": {
      "doctype": "Asset Category",
      "question": "What is the depreciation setup for the 'Plant & Machinery' category?",
      "fields": [
        "depreciation_options"
      ]
    },
    "output": "frappe.db.get_value('Asset Category', {'asset_category_name': 'Plant & Machinery'}, 'depreciation_options')"
  },
  {
    "input": {
      "doctype": "Asset Category",
      "question": "Get the full document of the asset category named 'Office Equipment'.",
      "fields": [
        "asset_category_name"
      ]
    },
    "output": "frappe.get_doc('Asset Category', 'Office Equipment')"
  },
  {
    "input": {
      "doctype": "Payment Terms Template Detail",
      "question": "How can I list all payment terms template details with their discount types and amounts?",
      "fields": [
        "payment_term",
        "discount_type",
        "discount"
      ]
    },
    "output": "frappe.get_list('Payment Terms Template Detail', fields=['payment_term', 'discount_type', 'discount'])"
  },
  {
    "input": {
      "doctype": "Payment Terms Template Detail",
      "question": "How many payment term templates offer a discount greater than 5%?",
      "fields": [
        "discount"
      ]
    },
    "output": "frappe.db.count('Payment Terms Template Detail', {'discount': ['>', 5]})"
  },
  {
    "input": {
      "doctype": "Payment Terms Template Detail",
      "question": "Can I get the mode of payment used in each payment terms template?",
      "fields": [
        "payment_term",
        "mode_of_payment"
      ]
    },
    "output": "frappe.get_list('Payment Terms Template Detail', fields=['payment_term', 'mode_of_payment'])"
  },
  {
    "input": {
      "doctype": "Payment Terms Template Detail",
      "question": "Which payment terms templates are based on the invoice due date?",
      "fields": [
        "payment_term",
        "due_date_based_on"
      ]
    },
    "output": "frappe.get_list('Payment Terms Template Detail', filters={'due_date_based_on': 'Invoice Date'}, fields=['payment_term'])"
  },
  {
    "input": {
      "doctype": "Payment Terms Template Detail",
      "question": "What is the invoice portion defined in each payment terms template?",
      "fields": [
        "payment_term",
        "invoice_portion"
      ]
    },
    "output": "frappe.get_list('Payment Terms Template Detail', fields=['payment_term', 'invoice_portion'])"
  },
  {
    "input": {
      "doctype": "Payment Terms Template Detail",
      "question": "Get the credit period in days for all payment terms.",
      "fields": [
        "payment_term",
        "credit_days"
      ]
    },
    "output": "frappe.get_list('Payment Terms Template Detail', fields=['payment_term', 'credit_days'])"
  },
  {
    "input": {
      "doctype": "Payment Terms Template Detail",
      "question": "What is the discount validity period for each template?",
      "fields": [
        "payment_term",
        "discount_validity"
      ]
    },
    "output": "frappe.get_list('Payment Terms Template Detail', fields=['payment_term', 'discount_validity'])"
  },
  {
    "input": {
      "doctype": "Contact Us Settings",
      "question": "What is the current email address used for forwarding customer queries?",
      "fields": [
        "forward_to_email"
      ]
    },
    "output": "frappe.db.get_value('Contact Us Settings', 'Contact Us Settings', 'forward_to_email')"
  },
  {
    "input": {
      "doctype": "Contact Us Settings",
      "question": "Can I fetch the phone number and email ID listed for customer support?",
      "fields": [
        "phone",
        "email_id"
      ]
    },
    "output": "frappe.get_list('Contact Us Settings', fields=['phone', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Contact Us Settings",
      "question": "Where are the query options configured in the contact us settings?",
      "fields": [
        "query_options"
      ]
    },
    "output": "frappe.db.get_value('Contact Us Settings', 'Contact Us Settings', 'query_options')"
  },
  {
    "input": {
      "doctype": "Project Template Task",
      "question": "What is the subject and task name for all tasks in project templates?",
      "fields": [
        "task",
        "subject"
      ]
    },
    "output": "frappe.get_all('Project Template Task', fields=['task', 'subject'])"
  },
  {
    "input": {
      "doctype": "Job Card Operation",
      "question": "Where do I update the completed quantity for the job card operation JCO-2389?",
      "fields": [
        "completed_qty"
      ]
    },
    "output": "frappe.db.get_value('Job Card Operation', {'name': 'JCO-2389'}, 'completed_qty')"
  },
  {
    "input": {
      "doctype": "Job Card Operation",
      "question": "What is the current status of the job card operation JCO-2389?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.get_value('Job Card Operation', {'name': 'JCO-2389'}, 'status')"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "Is the OAuth authorization code OA-9F8X3Q still valid?",
      "fields": [
        "validity"
      ]
    },
    "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'OA-9F8X3Q'}, 'validity')"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "What code challenge method is used in the OAuth authorization code OA-9F8X3Q?",
      "fields": [
        "code_challenge_method"
      ]
    },
    "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'OA-9F8X3Q'}, 'code_challenge_method')"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "What are the scopes defined in the OAuth authorization code OA-9F8X3Q?",
      "fields": [
        "scopes"
      ]
    },
    "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'OA-9F8X3Q'}, 'scopes')"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "What nonce value is used in the OAuth authorization code OA-9F8X3Q?",
      "fields": [
        "nonce"
      ]
    },
    "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'OA-9F8X3Q'}, 'nonce')"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "What is the validity status of the OAuth authorization code OA-9F8X3Q?",
      "fields": [
        "validity"
      ]
    },
    "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'OA-9F8X3Q'}, 'validity')"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "Which client is linked to the OAuth authorization code OA-9F8X3Q?",
      "fields": [
        "client"
      ]
    },
    "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'OA-9F8X3Q'}, 'client')"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "What is the expiration time for the OAuth authorization code OA-9F8X3Q?",
      "fields": [
        "expiration_time"
      ]
    },
    "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'OA-9F8X3Q'}, 'expiration_time')"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "What is the redirect URI for the OAuth authorization code OA-9F8X3Q?",
      "fields": [
        "redirect_uri_bound_to_authorization_code"
      ]
    },
    "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'OA-9F8X3Q'}, 'redirect_uri_bound_to_authorization_code')"
  },
  {
    "input": {
      "doctype": "Job Card Operation",
      "question": "What are all operations completed this week?",
      "fields": [
        "status",
        "completed_time"
      ]
    },
    "output": "frappe.get_list('Job Card Operation', filters={'status': 'Completed', 'completed_time': ('>=', frappe.utils.add_days(frappe.utils.nowdate(), -7))}, fields=['name', 'completed_time'])"
  },
  {
    "input": {
      "doctype": "Job Card Operation",
      "question": "List all job card operations that are currently in progress.",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.get_list('Job Card Operation', filters={'status': 'In Process'}, fields=['name', 'status'])"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "Retrieve all active OAuth authorization codes.",
      "fields": [
        "authorization_code",
        "validity"
      ]
    },
    "output": "frappe.get_all('OAuth Authorization Code', filters={'validity': 'Active'}, fields=['authorization_code', 'validity'])"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "Get all OAuth codes that have expired.",
      "fields": [
        "authorization_code",
        "expiration_time"
      ]
    },
    "output": "frappe.get_all('OAuth Authorization Code', filters={'expiration_time': ('<', frappe.utils.now())}, fields=['authorization_code', 'expiration_time'])"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "Fetch the full record for a 89isji authorization code.",
      "fields": [
        "authorization_code"
      ]
    },
    "output": "frappe.get_doc('OAuth Authorization Code', {'authorization_code': '89isji'})"
  },
  {
    "input": {
      "doctype": "Job Card Operation",
      "question": "Get the details of a job card operation by name.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.get_doc('Job Card Operation', 'JCO-0001')"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "What is the validity status of the OAuth authorization code 'akjdisjdoi'?",
      "fields": [
        "validity"
      ]
    },
    "output": "frappe.db.get_value('OAuth Authorization Code', {'authorization_code': 'akjdisjdoi'}, 'validity')"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "How many OAuth authorization codes were issued today?",
      "fields": [
        "creation"
      ]
    },
    "output": "frappe.db.count('OAuth Authorization Code', {'creation': ('>=', frappe.utils.nowdate())})"
  },
  {
    "input": {
      "doctype": "Job Card Operation",
      "question": "Show operations completed more than 10 hours ago.",
      "fields": [
        "completed_time"
      ]
    },
    "output": "frappe.get_list('Job Card Operation', filters={'completed_time': ('<', frappe.utils.add_to_date(frappe.utils.now_datetime(), hours=-10))}, fields=['name', 'completed_time'])"
  },
  {
    "input": {
      "doctype": "OAuth Authorization Code",
      "question": "Find all authorization codes linked to the client 'Client123'.",
      "fields": [
        "client"
      ]
    },
    "output": "frappe.get_list('OAuth Authorization Code', filters={'client': 'Client123'}, fields=['authorization_code', 'client'])"
  },
  {
    "input": {
      "doctype": "Import Supplier Invoice",
      "question": "How can I view the status of imported supplier invoices in ERPNext?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.get_list('Import Supplier Invoice', fields=['name', 'status'])"
  },
  {
    "input": {
      "doctype": "Import Supplier Invoice",
      "question": "How many imported supplier invoices are marked as completed?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.count('Import Supplier Invoice', {'status': 'Completed'})"
  },
  {
    "input": {
      "doctype": "Import Supplier Invoice",
      "question": "Where is the tax account mapped in a supplier invoice import?",
      "fields": [
        "tax_account"
      ]
    },
    "output": "frappe.db.get_value('Import Supplier Invoice', {'name': 'IMP-0001'}, 'tax_account')"
  },
  {
    "input": {
      "doctype": "Import Supplier Invoice",
      "question": "List all supplier invoice imports for the company 'Qatar Trading Co'.",
      "fields": [
        "name",
        "company"
      ]
    },
    "output": "frappe.get_all('Import Supplier Invoice', filters={'company': 'Qatar Trading Co'}, fields=['name', 'status'])"
  },
  {
    "input": {
      "doctype": "Personal Data Deletion Step",
      "question": "How do I track the status of each personal data deletion step in ERPNext?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.get_list('Personal Data Deletion Step', fields=['name', 'status'])"
  },
  {
    "input": {
      "doctype": "Personal Data Deletion Step",
      "question": "How many deletion steps apply to the 'Customer' document type?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.db.count('Personal Data Deletion Step', {'document_type': 'Customer'})"
  },
  {
    "input": {
      "doctype": "Personal Data Deletion Step",
      "question": "Get details of deletion steps where partial deletion is enabled.",
      "fields": [
        "partial",
        "fields"
      ]
    },
    "output": "frappe.get_all('Personal Data Deletion Step', filters={'partial': 1}, fields=['document_type', 'fields'])"
  },
  {
    "input": {
      "doctype": "Personal Data Deletion Step",
      "question": "How can I find all personal data deletion steps where status is 'Pending'?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_list('Personal Data Deletion Step', filters={'status': 'Pending'}, fields=['name', 'status'])"
  },
  {
    "input": {
      "doctype": "Personal Data Deletion Step",
      "question": "Can I get the filter criteria applied to a personal data deletion step?",
      "fields": [
        "filtered_by"
      ]
    },
    "output": "frappe.db.get_value('Personal Data Deletion Step', {'name': 'DEL-0001'}, 'filtered_by')"
  },
  {
    "input": {
      "doctype": "Personal Data Deletion Step",
      "question": "Which fields are configured to be deleted in a specific step?",
      "fields": [
        "fields"
      ]
    },
    "output": "frappe.db.get_value('Personal Data Deletion Step', {'name': 'DEL-0002'}, 'fields')"
  },
  {
    "input": {
      "doctype": "Personal Data Deletion Step",
      "question": "How many personal data deletion steps are marked as partial?",
      "fields": [
        "partial"
      ]
    },
    "output": "frappe.db.count('Personal Data Deletion Step', filters={'partial': 1})"
  },
  {
    "input": {
      "doctype": "Personal Data Deletion Step",
      "question": "Show all personal data deletion steps for the document type 'Customer'.",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.get_all('Personal Data Deletion Step', filters={'document_type': 'Customer'}, fields=['name', 'document_type'])"
  },
  {
    "input": {
      "doctype": "Personal Data Deletion Step",
      "question": "Fetch the complete record of a personal data deletion step with ID DEL-0003.",
      "fields": []
    },
    "output": "frappe.get_doc('Personal Data Deletion Step', 'DEL-0003')"
  },
  {
    "input": {
      "doctype": "Job Card Item",
      "question": "How can I retrieve the stock UOM for a specific item code on a job card?",
      "fields": [
        "stock_uom"
      ]
    },
    "output": "frappe.db.get_value('Job Card Item', {'item_code': 'ITEM-001'}, 'stock_uom')"
  },
  {
    "input": {
      "doctype": "Job Card Item",
      "question": "Where is the source warehouse defined for job card item ITEM-001?",
      "fields": [
        "source_warehouse"
      ]
    },
    "output": "frappe.db.get_value('Job Card Item', {'item_code': 'ITEM-001'}, 'source_warehouse')"
  },
  {
    "input": {
      "doctype": "Job Card Item",
      "question": "How many job card items have required quantity greater than 5?",
      "fields": [
        "required_qty"
      ]
    },
    "output": "frappe.db.count('Job Card Item', filters={ 'required_qty': ['>', 5] })"
  },
  {
    "input": {
      "doctype": "Job Card Item",
      "question": "List all job card items that allow alternative items.",
      "fields": [
        "item_code",
        "allow_alternative_item"
      ]
    },
    "output": "frappe.get_list('Job Card Item', filters={ 'allow_alternative_item': 1 }, fields=['item_code', 'allow_alternative_item'])"
  },
  {
    "input": {
      "doctype": "Job Card Item",
      "question": "Fetch complete details of a job card item using its item code.",
      "fields": []
    },
    "output": "frappe.get_doc('Job Card Item', {'item_code': 'ITEM-001'})"
  },
  {
    "input": {
      "doctype": "Job Card Item",
      "question": "How can I get the description for a specific job card item in ERPNext?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.get_value('Job Card Item', {'item_code': 'ITEM-001'}, 'description')"
  },
  {
    "input": {
      "doctype": "Job Card Item",
      "question": "What stock UOM is defined for the job card item ITEM-001?",
      "fields": [
        "stock_uom"
      ]
    },
    "output": "frappe.db.get_value('Job Card Item', {'item_code': 'ITEM-001'}, 'stock_uom')"
  },
  {
    "input": {
      "doctype": "Job Card Item",
      "question": "How many job card items have required quantity greater than 10?",
      "fields": [
        "required_qty"
      ]
    },
    "output": "frappe.db.count('Job Card Item', filters={ 'required_qty': ['>', 10] })"
  },
  {
    "input": {
      "doctype": "Job Card Item",
      "question": "List all job card items that have transferred quantities more than 5.",
      "fields": [
        "item_code",
        "transferred_qty"
      ]
    },
    "output": "frappe.get_list('Job Card Item', filters={ 'transferred_qty': ['>', 5] }, fields=['item_code', 'transferred_qty'])"
  },
  {
    "input": {
      "doctype": "Job Card Item",
      "question": "Get full details of a job card item where alternative item use is allowed.",
      "fields": []
    },
    "output": "frappe.get_doc('Job Card Item', {'allow_alternative_item': 1})"
  },
  {
    "input": {
      "doctype": "POS Search Fields",
      "question": "How can I fetch all POS search fields configured with the fieldname 'item_code'?",
      "fields": [
        "fieldname"
      ]
    },
    "output": "frappe.get_list('POS Search Fields', filters={'fieldname': 'item_code'}, fields=['field', 'fieldname'])"
  },
  {
    "input": {
      "doctype": "POS Search Fields",
      "question": "What is the POS fieldname used for item name search?",
      "fields": [
        "fieldname"
      ]
    },
    "output": "frappe.db.get_value('POS Search Fields', {'field': 'item_name'}, 'fieldname')"
  },
  {
    "input": {
      "doctype": "POS Search Fields",
      "question": "How many fields are currently configured for POS search?",
      "fields": []
    },
    "output": "frappe.db.count('POS Search Fields')"
  },
  {
    "input": {
      "doctype": "POS Search Fields",
      "question": "What is the full record for the POS field configured to search by item group?",
      "fields": []
    },
    "output": "frappe.get_value('POS Search Fields', {'fieldname': 'item_group'}, '*')"
  },
  {
    "input": {
      "doctype": "POS Search Fields",
      "question": "How many fields are currently configured for POS search in ERPNext?",
      "fields": []
    },
    "output": "frappe.db.count('POS Search Fields')"
  },
  {
    "input": {
      "doctype": "POS Settings",
      "question": "Get the full POS settings document to inspect enabled field configurations.",
      "fields": []
    },
    "output": "frappe.get_doc('POS Settings', 'POS Settings')"
  },
  {
    "input": {
      "doctype": "POS Settings",
      "question": "What are the currently configured POS invoice fields?",
      "fields": [
        "invoice_fields"
      ]
    },
    "output": "frappe.db.get_value('POS Settings', 'POS Settings', 'invoice_fields')"
  },
  {
    "input": {
      "doctype": "POS Settings",
      "question": "What invoice fields are currently configured in the POS settings?",
      "fields": [
        "invoice_fields"
      ]
    },
    "output": "frappe.db.get_value('POS Settings', 'POS Settings', 'invoice_fields')"
  },
  {
    "input": {
      "doctype": "POS Settings",
      "question": "What POS search fields are enabled in the current configuration?",
      "fields": [
        "pos_search_fields"
      ]
    },
    "output": "frappe.db.get_value('POS Settings', 'POS Settings', 'pos_search_fields')"
  },
  {
    "input": {
      "doctype": "POS Settings",
      "question": "List all POS Settings records with their invoice and search fields.",
      "fields": [
        "invoice_fields",
        "pos_search_fields"
      ]
    },
    "output": "frappe.get_all('POS Settings', fields=['invoice_fields', 'pos_search_fields'])"
  },
  {
    "input": {
      "doctype": "POS Settings",
      "question": "How many POS Settings documents are configured in the system?",
      "fields": []
    },
    "output": "frappe.db.count('POS Settings')"
  },
  {
    "input": {
      "doctype": "POS Settings",
      "question": "Get the full POS Settings document for inspection.",
      "fields": []
    },
    "output": "frappe.get_doc('POS Settings', 'POS Settings')"
  },
  {
    "input": {
      "doctype": "POS Settings",
      "question": "List POS Settings records where the invoice fields include 'item_name'.",
      "fields": [
        "invoice_fields"
      ]
    },
    "output": "frappe.get_list('POS Settings', filters={'invoice_fields': ['like', '%item_name%']}, fields=['invoice_fields'])"
  },
  {
    "input": {
      "doctype": "User Group Member",
      "question": "List all users who are part of the 'Sales Team' user group.",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.get_list('User Group Member', filters={'parent': 'Sales Team'}, fields=['user'])"
  },
  {
    "input": {
      "doctype": "User Group Member",
      "question": "Get all user group memberships stored in the system.",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.get_all('User Group Member', fields=['user'])"
  },
  {
    "input": {
      "doctype": "User Group Member",
      "question": "Retrieve the full document of a specific user group member with name 'UGM-0001'.",
      "fields": []
    },
    "output": "frappe.get_doc('User Group Member', 'UGM-0001')"
  },
  {
    "input": {
      "doctype": "User Group Member",
      "question": "How many users are assigned to user group 'Managers'?",
      "fields": []
    },
    "output": "frappe.db.count('User Group Member', {'parent': 'Managers'})"
  },
  {
    "input": {
      "doctype": "User Group Member",
      "question": "What is the user assigned to a group member record with ID 'UGM-0010'?",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.db.get_value('User Group Member', 'UGM-0010', 'user')"
  },
  {
    "input": {
      "doctype": "Job Card Item",
      "question": "Which job card items belong to the 'Raw Materials' group?",
      "fields": [
        "item_code",
        "item_group"
      ]
    },
    "output": "frappe.get_list('Job Card Item', filters={'item_group': 'Raw Materials'}, fields=['item_code', 'item_group'])"
  },
  {
    "input": {
      "doctype": "Job Card Item",
      "question": "Show job card items where stock UOM is 'Nos'.",
      "fields": [
        "item_code",
        "stock_uom"
      ]
    },
    "output": "frappe.get_list('Job Card Item', filters={'stock_uom': 'Nos'}, fields=['item_code', 'stock_uom'])"
  },
  {
    "input": {
      "doctype": "Personal Data Deletion Step",
      "question": "List all deletion steps with status set to 'Pending'.",
      "fields": [
        "document_type",
        "status"
      ]
    },
    "output": "frappe.get_list('Personal Data Deletion Step', filters={'status': 'Pending'}, fields=['document_type', 'status'])"
  },
  {
    "input": {
      "doctype": "Job Card Item",
      "question": "List job card items with their item code, group, and UOM values.",
      "fields": [
        "item_code",
        "item_group",
        "uom"
      ]
    },
    "output": "frappe.get_all('Job Card Item', fields=['item_code', 'item_group', 'uom'])"
  },
  {
    "input": {
      "doctype": "Personal Data Deletion Step",
      "question": "Fetch all configured fields marked for deletion.",
      "fields": [
        "fields"
      ]
    },
    "output": "frappe.get_all('Personal Data Deletion Step', fields=['fields'])"
  },
  {
    "input": {
      "doctype": "Job Card Item",
      "question": "Get details of job card item 'ITEM-0001'.",
      "fields": []
    },
    "output": "frappe.get_doc('Job Card Item', {'item_code': 'ITEM-0001'})"
  },
  {
    "input": {
      "doctype": "Personal Data Deletion Step",
      "question": "Get full configuration for deletion step 'PDDS-0003'.",
      "fields": []
    },
    "output": "frappe.get_doc('Personal Data Deletion Step', 'PDDS-0003')"
  },
  {
    "input": {
      "doctype": "Job Card Item",
      "question": "How many job card items are available in the system?",
      "fields": []
    },
    "output": "frappe.db.count('Job Card Item')"
  },
  {
    "input": {
      "doctype": "Job Card Item",
      "question": "What is the UOM for job card item 'ITEM-0002'?",
      "fields": [
        "uom"
      ]
    },
    "output": "frappe.db.get_value('Job Card Item', {'item_code': 'ITEM-0002'}, 'uom')"
  },
  {
    "input": {
      "doctype": "Personal Data Deletion Step",
      "question": "List all document types linked to personal data deletion steps.",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.get_all('Personal Data Deletion Step', fields=['document_type'])"
  },
  {
    "input": {
      "doctype": "Personal Data Deletion Step",
      "question": "Fetch deletion steps that apply a filter by 'status'.",
      "fields": [
        "filtered_by"
      ]
    },
    "output": "frappe.get_list('Personal Data Deletion Step', filters={'filtered_by': 'status'}, fields=['document_type', 'filtered_by'])"
  },
  {
    "input": {
      "doctype": "Job Card Item",
      "question": "Show job card items where required quantity is greater than 10.",
      "fields": [
        "item_code",
        "required_qty"
      ]
    },
    "output": "frappe.get_list('Job Card Item', filters={ 'required_qty': ['>', 10] }, fields=['item_code', 'required_qty'])"
  },
  {
    "input": {
      "doctype": "Job Card Item",
      "question": "Get all job card items allowing alternative items.",
      "fields": [
        "item_code",
        "allow_alternative_item"
      ]
    },
    "output": "frappe.get_list('Job Card Item', filters={'allow_alternative_item': 1}, fields=['item_code', 'allow_alternative_item'])"
  },
  {
    "input": {
      "doctype": "Personal Data Deletion Step",
      "question": "Show deletion steps that are marked as partial.",
      "fields": [
        "document_type",
        "partial"
      ]
    },
    "output": "frappe.get_list('Personal Data Deletion Step', filters={'partial': 1}, fields=['document_type', 'partial'])"
  },
  {
    "input": {
      "doctype": "Import Supplier Invoice",
      "question": "Where can I view the list of all supplier invoices with the default buying price list 'Standard Buying'?",
      "fields": [
        "default_buying_price_list"
      ]
    },
    "output": "frappe.get_list('Import Supplier Invoice', filters={'default_buying_price_list': 'Standard Buying'}, fields=['item_code', 'default_buying_price_list'])"
  },
  {
    "input": {
      "doctype": "Import Supplier Invoice",
      "question": "How do I retrieve all imported invoices with status set to 'Success'?",
      "fields": [
        "status",
        "invoice_series"
      ]
    },
    "output": "frappe.get_list('Import Supplier Invoice', filters={'status': 'Success'}, fields=['invoice_series', 'status'])"
  },
  {
    "input": {
      "doctype": "Import Supplier Invoice",
      "question": "Get all import records including the supplier group and tax account fields.",
      "fields": [
        "supplier_group",
        "tax_account"
      ]
    },
    "output": "frappe.get_all('Import Supplier Invoice', fields=['supplier_group', 'tax_account'])"
  },
  {
    "input": {
      "doctype": "Import Supplier Invoice",
      "question": "Show all supplier invoice import entries with their company and item code.",
      "fields": [
        "company",
        "item_code"
      ]
    },
    "output": "frappe.get_all('Import Supplier Invoice', fields=['company', 'item_code'])"
  },
  {
    "input": {
      "doctype": "Import Supplier Invoice",
      "question": "Retrieve the full document of the supplier invoice import record 'IMP-INV-0005'.",
      "fields": []
    },
    "output": "frappe.get_doc('Import Supplier Invoice', 'IMP-INV-0005')"
  },
  {
    "input": {
      "doctype": "Import Supplier Invoice",
      "question": "What is the company name for the invoice with item code 'ITEM-1002'?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.get_value('Import Supplier Invoice', {'item_code': 'ITEM-1002'}, 'company')"
  },
  {
    "input": {
      "doctype": "Customer Item",
      "question": "Which customers are linked to the item 'ITEM-0001'?",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.get_list('Customer Item', filters={'item_code': 'ITEM-0001'}, fields=['customer'])"
  },
  {
    "input": {
      "doctype": "Customer Item",
      "question": "List all customer-item relationships.",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.get_all('Customer Item', fields=['customer'])"
  },
  {
    "input": {
      "doctype": "Import Supplier Invoice",
      "question": "How many invoice import records are currently in the system?",
      "fields": []
    },
    "output": "frappe.db.count('Import Supplier Invoice')"
  },
  {
    "input": {
      "doctype": "Import Supplier Invoice",
      "question": "List invoices imported for supplier group 'Electronics Vendors'.",
      "fields": [
        "supplier_group"
      ]
    },
    "output": "frappe.get_list('Import Supplier Invoice', filters={'supplier_group': 'Electronics Vendors'}, fields=['item_code', 'supplier_group'])"
  },
  {
    "input": {
      "doctype": "Customer Item",
      "question": "How can I view all items linked to customer 'CUST-1001' in ERPNext?",
      "fields": [
        "item_code",
        "customer"
      ]
    },
    "output": "frappe.get_list('Customer Item', filters={'customer': 'CUST-1001'}, fields=['item_code', 'customer'])"
  },
  {
    "input": {
      "doctype": "Customer Item",
      "question": "List all customers linked to item 'ITEM-1234'.",
      "fields": [
        "customer",
        "item_code"
      ]
    },
    "output": "frappe.get_list('Customer Item', filters={'item_code': 'ITEM-1234'}, fields=['customer'])"
  },
  {
    "input": {
      "doctype": "Customer Item",
      "question": "Retrieve all customer-item mappings in the system.",
      "fields": [
        "customer",
        "item_code"
      ]
    },
    "output": "frappe.get_all('Customer Item', fields=['customer', 'item_code'])"
  },
  {
    "input": {
      "doctype": "Customer Item",
      "question": "Get the customer associated with item code 'ITEM-0010'.",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.db.get_value('Customer Item', {'item_code': 'ITEM-0010'}, 'customer')"
  },
  {
    "input": {
      "doctype": "Customer Item",
      "question": "How many customer-item links exist in the system?",
      "fields": []
    },
    "output": "frappe.db.count('Customer Item')"
  },
  {
    "input": {
      "doctype": "Customer Item",
      "question": "Fetch the full document of the customer-item entry with ID 'CI-0005'.",
      "fields": []
    },
    "output": "frappe.get_doc('Customer Item', 'CI-0005')"
  },
  {
    "input": {
      "doctype": "Customer Item",
      "question": "Get a list of customers linked to electronics category items.",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.get_list('Customer Item', filters={'item_code': ['like', 'ELEC%']}, fields=['customer', 'item_code'])"
  },
  {
    "input": {
      "doctype": "DocType Link",
      "question": "List all DocType links that are hidden from the UI.",
      "fields": [
        "link_doctype",
        "hidden"
      ]
    },
    "output": "frappe.get_list('DocType Link', filters={'hidden': 1}, fields=['link_doctype', 'hidden'])"
  },
  {
    "input": {
      "doctype": "DocType Link",
      "question": "Which DocType links are marked as child tables?",
      "fields": [
        "link_doctype",
        "is_child_table"
      ]
    },
    "output": "frappe.get_list('DocType Link', filters={'is_child_table': 1}, fields=['link_doctype', 'is_child_table'])"
  },
  {
    "input": {
      "doctype": "DocType Link",
      "question": "List all DocType links where the parent doctype is 'Customer'.",
      "fields": [
        "link_doctype",
        "parent_doctype"
      ]
    },
    "output": "frappe.get_list('DocType Link', filters={'parent_doctype': 'Customer'}, fields=['link_doctype', 'parent_doctype'])"
  },
  {
    "input": {
      "doctype": "DocType Link",
      "question": "Which DocType links are configured as custom?",
      "fields": [
        "link_doctype",
        "custom"
      ]
    },
    "output": "frappe.get_list('DocType Link', filters={'custom': 1}, fields=['link_doctype', 'custom'])"
  },
  {
    "input": {
      "doctype": "DocType Link",
      "question": "List DocType links with the group flag enabled.",
      "fields": [
        "link_doctype",
        "group"
      ]
    },
    "output": "frappe.get_list('DocType Link', filters={'group': 1}, fields=['link_doctype', 'group'])"
  },
  {
    "input": {
      "doctype": "DocType Link",
      "question": "Find DocType links with parent DocType 'Sales Order'.",
      "fields": [
        "link_doctype",
        "parent_doctype"
      ]
    },
    "output": "frappe.get_list('DocType Link', filters={'parent_doctype': 'Sales Order'}, fields=['link_doctype', 'parent_doctype'])"
  },
  {
    "input": {
      "doctype": "DocType Link",
      "question": "Show DocType links where the link DocType is 'Quotation'.",
      "fields": [
        "link_doctype",
        "parent_doctype"
      ]
    },
    "output": "frappe.get_list('DocType Link', filters={'link_doctype': 'Quotation'}, fields=['link_doctype', 'parent_doctype'])"
  },
  {
    "input": {
      "doctype": "DocType Link",
      "question": "Fetch all configured DocType links and their parent doctypes.",
      "fields": [
        "link_doctype",
        "parent_doctype"
      ]
    },
    "output": "frappe.get_all('DocType Link', fields=['link_doctype', 'parent_doctype'])"
  },
  {
    "input": {
      "doctype": "DocType Link",
      "question": "Export all DocType link configurations including fieldnames and child table flag.",
      "fields": [
        "link_fieldname",
        "is_child_table"
      ]
    },
    "output": "frappe.get_all('DocType Link', fields=['link_fieldname', 'is_child_table'])"
  },
  {
    "input": {
      "doctype": "DocType Link",
      "question": "Get all custom DocType link definitions.",
      "fields": [
        "link_doctype",
        "custom"
      ]
    },
    "output": "frappe.get_all('DocType Link', filters={'custom': 1}, fields=['link_doctype', 'custom'])"
  },
  {
    "input": {
      "doctype": "DocType Link",
      "question": "Get the complete configuration for the DocType link pointing to 'Delivery Note'.",
      "fields": []
    },
    "output": "frappe.get_doc('DocType Link', 'Delivery Note')"
  },
  {
    "input": {
      "doctype": "DocType Link",
      "question": "Get the full document for the DocType link from 'Customer'.",
      "fields": []
    },
    "output": "frappe.get_doc('DocType Link', 'Customer')"
  },
  {
    "input": {
      "doctype": "DocType Link",
      "question": "Retrieve full configuration for the DocType link targeting 'Item'.",
      "fields": []
    },
    "output": "frappe.get_doc('DocType Link', 'Item')"
  },
  {
    "input": {
      "doctype": "DocType Link",
      "question": "Get the link fieldname used for the 'Sales Invoice' DocType.",
      "fields": [
        "link_fieldname"
      ]
    },
    "output": "frappe.db.get_value('DocType Link', {'link_doctype': 'Sales Invoice'}, 'link_fieldname')"
  },
  {
    "input": {
      "doctype": "DocType Link",
      "question": "Fetch the group flag for the DocType link related to 'Quotation'.",
      "fields": [
        "group"
      ]
    },
    "output": "frappe.db.get_value('DocType Link', {'link_doctype': 'Quotation'}, 'group')"
  },
  {
    "input": {
      "doctype": "DocType Link",
      "question": "How many DocType links are configured as hidden?",
      "fields": [
        "hidden"
      ]
    },
    "output": "frappe.db.count('DocType Link', {'hidden': 1})"
  },
  {
    "input": {
      "doctype": "DocType Link",
      "question": "How many DocType links are marked as child tables?",
      "fields": [
        "is_child_table"
      ]
    },
    "output": "frappe.db.count('DocType Link', {'is_child_table': 1})"
  },
  {
    "input": {
      "doctype": "DocType Link",
      "question": "How many DocType links point to the 'Sales Invoice' doctype?",
      "fields": [
        "link_doctype"
      ]
    },
    "output": "frappe.db.count('DocType Link', {'link_doctype': 'Sales Invoice'})"
  },
  {
    "input": {
      "doctype": "DocType Link",
      "question": "Count the number of DocType links associated with 'Purchase Order'.",
      "fields": [
        "parent_doctype"
      ]
    },
    "output": "frappe.db.count('DocType Link', {'parent_doctype': 'Purchase Order'})"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "List all supplied purchase order items with a required quantity above 50.",
      "fields": [
        "main_item_code",
        "required_qty"
      ]
    },
    "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'required_qty': ['>', 50] }, fields=['main_item_code', 'required_qty'])"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "How many supplied items have a returned quantity greater than zero?",
      "fields": [
        "returned_qty"
      ]
    },
    "output": "frappe.db.count('Purchase Order Item Supplied', { 'returned_qty': ['>', 0] })"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Get the reference name and amount for all purchase order items.",
      "fields": [
        "reference_name",
        "amount"
      ]
    },
    "output": "frappe.get_all('Purchase Order Item Supplied', fields=['reference_name', 'amount'])"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Fetch all item codes with their conversion factor where the stock UOM is 'Nos'.",
      "fields": [
        "rm_item_code",
        "conversion_factor"
      ]
    },
    "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'stock_uom': 'Nos' }, fields=['rm_item_code', 'conversion_factor'])"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Get the total number of purchase order supplied items recorded.",
      "fields": []
    },
    "output": "frappe.db.count('Purchase Order Item Supplied')"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "List all items that have been fully consumed in the purchase order.",
      "fields": [
        "main_item_code",
        "consumed_qty",
        "supplied_qty"
      ]
    },
    "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'consumed_qty': ['=', 'supplied_qty'] }, fields=['main_item_code', 'consumed_qty', 'supplied_qty'])"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "How many purchase order items are linked to BOM details?",
      "fields": [
        "bom_detail_no"
      ]
    },
    "output": "frappe.db.count('Purchase Order Item Supplied', { 'bom_detail_no': ['!=', ''] })"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "What is the returned quantity for item RM-2023-0015 in the order?",
      "fields": [
        "returned_qty"
      ]
    },
    "output": "frappe.db.get_value('Purchase Order Item Supplied', { 'rm_item_code': 'RM-2023-0015' }, 'returned_qty')"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "List all purchase order items supplied from the 'WH-CENTRAL-001'.",
      "fields": [
        "main_item_code",
        "reserve_warehouse"
      ]
    },
    "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'reserve_warehouse': 'WH-CENTRAL-001' }, fields=['main_item_code', 'reserve_warehouse'])"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Get the complete configuration of the supplied item entry with reference 'POIS-000145'.",
      "fields": []
    },
    "output": "frappe.get_doc('Purchase Order Item Supplied', 'POIS-000145')"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "List all records showing the item code and consumed quantity.",
      "fields": [
        "rm_item_code",
        "consumed_qty"
      ]
    },
    "output": "frappe.get_all('Purchase Order Item Supplied', fields=['rm_item_code', 'consumed_qty'])"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Fetch the supplied quantity and total supplied quantity for all items with required quantity above 100.",
      "fields": [
        "supplied_qty",
        "total_supplied_qty"
      ]
    },
    "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'required_qty': ['>', 100] }, fields=['supplied_qty', 'total_supplied_qty'])"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Get the amount field for item POIS-000389 in the system.",
      "fields": [
        "amount"
      ]
    },
    "output": "frappe.db.get_value('Purchase Order Item Supplied', { 'name': 'POIS-000389' }, 'amount')"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "View the rate and conversion factor for all supplied items.",
      "fields": [
        "rate",
        "conversion_factor"
      ]
    },
    "output": "frappe.get_all('Purchase Order Item Supplied', fields=['rate', 'conversion_factor'])"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Get the full document for supplied item with name 'POIS-REQ-0007'.",
      "fields": []
    },
    "output": "frappe.get_doc('Purchase Order Item Supplied', 'POIS-REQ-0007')"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "List all supplied items with their main and raw material codes.",
      "fields": [
        "main_item_code",
        "rm_item_code"
      ]
    },
    "output": "frappe.get_all('Purchase Order Item Supplied', fields=['main_item_code', 'rm_item_code'])"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Get the stock UOM and rate of all items supplied from WH-002-MFG.",
      "fields": [
        "stock_uom",
        "rate"
      ]
    },
    "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'reserve_warehouse': 'WH-002-MFG' }, fields=['stock_uom', 'rate'])"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Fetch the configuration of the record with name 'POIS-CON-0754'.",
      "fields": []
    },
    "output": "frappe.get_doc('Purchase Order Item Supplied', 'POIS-CON-0754')"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "List all records with rate greater than 200 for supplied items.",
      "fields": [
        "rate"
      ]
    },
    "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'rate': ['>', 200] }, fields=['main_item_code', 'rate'])"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "List all POS closing entries where the difference is not zero.",
      "fields": [
        "mode_of_payment",
        "difference"
      ]
    },
    "output": "frappe.get_list('POS Closing Entry Detail', filters={'difference': ['!=', 0]}, fields=['mode_of_payment', 'difference'])"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "List POS entries where the closing amount is less than the expected amount.",
      "fields": [
        "expected_amount",
        "closing_amount"
      ]
    },
    "output": "frappe.get_list('POS Closing Entry Detail', filters={ 'closing_amount': ['<', 'expected_amount'] }, fields=['expected_amount', 'closing_amount'])"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "List POS entries that used 'Cash' as the mode of payment.",
      "fields": [
        "mode_of_payment"
      ]
    },
    "output": "frappe.get_list('POS Closing Entry Detail', filters={ 'mode_of_payment': 'Cash' }, fields=['mode_of_payment'])"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "List entries where the opening amount is greater than 1000.",
      "fields": [
        "opening_amount"
      ]
    },
    "output": "frappe.get_list('POS Closing Entry Detail', filters={ 'opening_amount': ['>', 1000] }, fields=['opening_amount'])"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "List all fields for POS closing entries with difference not equal to 0.",
      "fields": []
    },
    "output": "frappe.get_all('POS Closing Entry Detail', filters={'difference': ['!=', 0]})"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Get all POS entries where expected amount is more than closing amount.",
      "fields": [
        "expected_amount",
        "closing_amount"
      ]
    },
    "output": "frappe.get_all('POS Closing Entry Detail', filters={'expected_amount': ['>', 'closing_amount']}, fields=['expected_amount', 'closing_amount'])"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Get all POS closing entries with mode of payment 'Card'.",
      "fields": [
        "mode_of_payment"
      ]
    },
    "output": "frappe.get_all('POS Closing Entry Detail', filters={'mode_of_payment': 'Card'}, fields=['mode_of_payment'])"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Fetch POS entries with opening amount greater than 0.",
      "fields": [
        "opening_amount"
      ]
    },
    "output": "frappe.get_all('POS Closing Entry Detail', filters={ 'opening_amount': ['>', 0] }, fields=['opening_amount'])"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Get the full document of a POS closing entry with ID 'POS-CL-0001'.",
      "fields": []
    },
    "output": "frappe.get_doc('POS Closing Entry Detail', 'POS-CL-0001')"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Retrieve the full record of a POS closing entry based on its mode of payment being 'UPI'.",
      "fields": [
        "mode_of_payment"
      ]
    },
    "output": "frappe.get_doc('POS Closing Entry Detail', {'mode_of_payment': 'UPI'})"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Fetch complete details for a POS entry with closing amount 5000.",
      "fields": [
        "closing_amount"
      ]
    },
    "output": "frappe.get_doc('POS Closing Entry Detail', {'closing_amount': 5000})"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Get the opening amount for a POS entry where mode of payment is 'Cash'.",
      "fields": [
        "mode_of_payment",
        "opening_amount"
      ]
    },
    "output": "frappe.db.get_value('POS Closing Entry Detail', {'mode_of_payment': 'Cash'}, 'opening_amount')"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Get the expected amount where closing amount is 7000.",
      "fields": [
        "closing_amount",
        "expected_amount"
      ]
    },
    "output": "frappe.db.get_value('POS Closing Entry Detail', {'closing_amount': 7000}, 'expected_amount')"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Count how many POS closing entries have a difference greater than 0.",
      "fields": [
        "difference"
      ]
    },
    "output": "frappe.db.count('POS Closing Entry Detail', {'difference': ['>', 0]})"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "How many entries have opening amount below 100?",
      "fields": [
        "opening_amount"
      ]
    },
    "output": "frappe.db.count('POS Closing Entry Detail', {'opening_amount': ['<', 100]})"
  },
  {
    "input": {
      "doctype": "Sales Partner Item",
      "question": "List all items linked to the sales partner 'Brass Lantern Co.'.",
      "fields": [
        "sales_partner"
      ]
    },
    "output": "frappe.get_list('Sales Partner Item', filters={'sales_partner': 'Brass Lantern Co.'}, fields=['sales_partner'])"
  },
  {
    "input": {
      "doctype": "Sales Partner Item",
      "question": "Show all records where sales partner is 'Partner A'.",
      "fields": [
        "sales_partner"
      ]
    },
    "output": "frappe.get_list('Sales Partner Item', filters={'sales_partner': 'Partner A'}, fields=['sales_partner'])"
  },
  {
    "input": {
      "doctype": "Sales Partner Item",
      "question": "List items that have a sales partner assigned.",
      "fields": [
        "sales_partner"
      ]
    },
    "output": "frappe.get_list('Sales Partner Item', filters={'sales_partner': ['!=', '']}, fields=['sales_partner'])"
  },
  {
    "input": {
      "doctype": "Sales Partner Item",
      "question": "Get records of items without any assigned sales partner.",
      "fields": [
        "sales_partner"
      ]
    },
    "output": "frappe.get_list('Sales Partner Item', filters={'sales_partner': ''}, fields=['sales_partner'])"
  },
  {
    "input": {
      "doctype": "Sales Partner Item",
      "question": "List all item-sales partner mappings in the system.",
      "fields": [
        "sales_partner"
      ]
    },
    "output": "frappe.get_all('Sales Partner Item', fields=['sales_partner'])"
  },
  {
    "input": {
      "doctype": "Sales Partner Item",
      "question": "Fetch all sales partner item records regardless of filters.",
      "fields": []
    },
    "output": "frappe.get_all('Sales Partner Item')"
  },
  {
    "input": {
      "doctype": "Sales Partner Item",
      "question": "Get all sales partner assignments with field-level info.",
      "fields": [
        "sales_partner"
      ]
    },
    "output": "frappe.get_all('Sales Partner Item', fields=['name', 'sales_partner'])"
  },
  {
    "input": {
      "doctype": "Sales Partner Item",
      "question": "Fetch every row of sales partner item with full field data.",
      "fields": []
    },
    "output": "frappe.get_all('Sales Partner Item', fields='*')"
  },
  {
    "input": {
      "doctype": "Sales Partner Item",
      "question": "Get the full document for the record with ID 'SPI-0001'.",
      "fields": []
    },
    "output": "frappe.get_doc('Sales Partner Item', 'SPI-0001')"
  },
  {
    "input": {
      "doctype": "Sales Partner Item",
      "question": "Fetch the complete document where sales partner is 'XYZ Group'.",
      "fields": [
        "sales_partner"
      ]
    },
    "output": "frappe.get_doc('Sales Partner Item', {'sales_partner': 'XYZ Group'})"
  },
  {
    "input": {
      "doctype": "Sales Partner Item",
      "question": "Retrieve the full document for a sales partner item with sales partner 'Distributor X'.",
      "fields": [
        "sales_partner"
      ]
    },
    "output": "frappe.get_doc('Sales Partner Item', {'sales_partner': 'Distributor X'})"
  },
  {
    "input": {
      "doctype": "Sales Partner Item",
      "question": "Get the sales partner assigned to the item with ID 'ITEM-0002'.",
      "fields": [
        "sales_partner"
      ]
    },
    "output": "frappe.db.get_value('Sales Partner Item', {'name': 'ITEM-0002'}, 'sales_partner')"
  },
  {
    "input": {
      "doctype": "Sales Partner Item",
      "question": "Get the sales partner linked to item row with name 'SPI-1010'.",
      "fields": [
        "sales_partner"
      ]
    },
    "output": "frappe.db.get_value('Sales Partner Item', 'SPI-1010', 'sales_partner')"
  },
  {
    "input": {
      "doctype": "Sales Partner Item",
      "question": "Count how many items are linked to sales partner 'Wisp & Warden Co'.",
      "fields": [
        "sales_partner"
      ]
    },
    "output": "frappe.db.count('Sales Partner Item', {'sales_partner': 'Wisp & Warden Co'})"
  },
  {
    "input": {
      "doctype": "Sales Partner Item",
      "question": "How many item-partner mappings exist in total?",
      "fields": []
    },
    "output": "frappe.db.count('Sales Partner Item')"
  },
  {
    "input": {
      "doctype": "Sales Partner Item",
      "question": "Show sales partner records where no partner is assigned.",
      "fields": [
        "sales_partner"
      ]
    },
    "output": "frappe.get_list('Sales Partner Item', filters={'sales_partner': ''}, fields=['sales_partner'])"
  },
  {
    "input": {
      "doctype": "Sales Partner Item",
      "question": "Find records where sales partner is 'Blue Line Distributors'.",
      "fields": [
        "sales_partner"
      ]
    },
    "output": "frappe.get_list('Sales Partner Item', filters={'sales_partner': 'Blue Line Distributors'}, fields=['sales_partner'])"
  },
  {
    "input": {
      "doctype": "Sales Partner Item",
      "question": "Get all records linked to sales partner 'QuickSell Ltd'.",
      "fields": [
        "sales_partner"
      ]
    },
    "output": "frappe.get_list('Sales Partner Item', filters={'sales_partner': 'QuickSell Ltd'}, fields=['sales_partner'])"
  },
  {
    "input": {
      "doctype": "Sales Partner Item",
      "question": "List items associated with the sales partner 'TradeGlobal'.",
      "fields": [
        "sales_partner"
      ]
    },
    "output": "frappe.get_list('Sales Partner Item', filters={'sales_partner': 'TradeGlobal'}, fields=['sales_partner'])"
  },
  {
    "input": {
      "doctype": "Territory Item",
      "question": "List all items associated with the territory 'Middle East'.",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.get_list('Territory Item', filters={'territory': 'Middle East'}, fields=['territory'])"
  },
  {
    "input": {
      "doctype": "Territory Item",
      "question": "Show all entries where territory is assigned as 'USA'.",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.get_list('Territory Item', filters={'territory': 'USA'}, fields=['territory'])"
  },
  {
    "input": {
      "doctype": "Territory Item",
      "question": "List items that are missing a territory assignment.",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.get_list('Territory Item', filters={'territory': ''}, fields=['territory'])"
  },
  {
    "input": {
      "doctype": "Territory Item",
      "question": "List all items that belong to the 'Europe' territory.",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.get_list('Territory Item', filters={'territory': 'Europe'}, fields=['territory'])"
  },
  {
    "input": {
      "doctype": "Territory Item",
      "question": "Get all territory item mappings with full details.",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.get_all('Territory Item', fields=['name', 'territory'])"
  },
  {
    "input": {
      "doctype": "Territory Item",
      "question": "Fetch all territory assignments defined in the system.",
      "fields": []
    },
    "output": "frappe.get_all('Territory Item')"
  },
  {
    "input": {
      "doctype": "Territory Item",
      "question": "Get a complete list of all territory items including fields.",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.get_all('Territory Item', fields=['territory'])"
  },
  {
    "input": {
      "doctype": "Territory Item",
      "question": "Show all mappings where a territory is specified.",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.get_all('Territory Item', filters={'territory': ['!=', '']}, fields=['territory'])"
  },
  {
    "input": {
      "doctype": "Territory Item",
      "question": "Get the complete document for the mapping with ID 'TRI-001'.",
      "fields": []
    },
    "output": "frappe.get_doc('Territory Item', 'TRI-001')"
  },
  {
    "input": {
      "doctype": "Territory Item",
      "question": "Fetch the full document for a territory mapping linked to 'North India'.",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.get_doc('Territory Item', {'territory': 'North India'})"
  },
  {
    "input": {
      "doctype": "Territory Item",
      "question": "Retrieve the full config of a territory mapping for territory 'Australia'.",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.get_doc('Territory Item', {'territory': 'Australia'})"
  },
  {
    "input": {
      "doctype": "Territory Item",
      "question": "Get the territory linked to item row 'TRI-009'.",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.db.get_value('Territory Item', 'TRI-009', 'territory')"
  },
  {
    "input": {
      "doctype": "Territory Item",
      "question": "Fetch the assigned territory for the record with name 'TRI-010'.",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.db.get_value('Territory Item', {'name': 'TRI-010'}, 'territory')"
  },
  {
    "input": {
      "doctype": "Territory Item",
      "question": "Count the number of items assigned to 'India West'.",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.db.count('Territory Item', {'territory': 'India West'})"
  },
  {
    "input": {
      "doctype": "Territory Item",
      "question": "How many territory mappings exist in total?",
      "fields": []
    },
    "output": "frappe.db.count('Territory Item')"
  },
  {
    "input": {
      "doctype": "Territory Item",
      "question": "Count how many records do not have any territory set.",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.db.count('Territory Item', {'territory': ''})"
  },
  {
    "input": {
      "doctype": "Territory Item",
      "question": "Get all records assigned to the territory 'Asia Pacific'.",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.get_list('Territory Item', filters={'territory': 'Asia Pacific'}, fields=['territory'])"
  },
  {
    "input": {
      "doctype": "Territory Item",
      "question": "Find all items linked to the 'Africa' territory.",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.get_list('Territory Item', filters={'territory': 'Africa'}, fields=['territory'])"
  },
  {
    "input": {
      "doctype": "Territory Item",
      "question": "List entries for the territory 'South America'.",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.get_list('Territory Item', filters={'territory': 'South America'}, fields=['territory'])"
  },
  {
    "input": {
      "doctype": "Territory Item",
      "question": "Get all territory assignments where territory is not empty.",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.get_list('Territory Item', filters={'territory': ['!=', '']}, fields=['territory'])"
  },
  {
    "input": {
      "doctype": "Customer Group Item",
      "question": "List all items linked to the customer group 'Retail'.",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_list('Customer Group Item', filters={'customer_group': 'Retail'}, fields=['customer_group'])"
  },
  {
    "input": {
      "doctype": "Customer Group Item",
      "question": "How many items are assigned to the customer group 'Wholesale'?",
      "fields": []
    },
    "output": "frappe.db.count('Customer Group Item', {'customer_group': 'Wholesale'})"
  },
  {
    "input": {
      "doctype": "Customer Group Item",
      "question": "What is the customer group linked to item 'ITEM-00023'?",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.db.get_value('Customer Group Item', {'name': 'ITEM-00023'}, 'customer_group')"
  },
  {
    "input": {
      "doctype": "Customer Group Item",
      "question": "Fetch all customer group item mappings with customer groups displayed.",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_all('Customer Group Item', fields=['customer_group'])"
  },
  {
    "input": {
      "doctype": "Customer Group Item",
      "question": "Get full details of the customer group item record for item 'ITEM-00045'.",
      "fields": []
    },
    "output": "frappe.get_doc('Customer Group Item', 'ITEM-00045')"
  },
  {
    "input": {
      "doctype": "Customer Group Item",
      "question": "List all customer group item mappings for customer group 'Enterprise'.",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_list('Customer Group Item', filters={'customer_group': 'Enterprise'}, fields=['customer_group'])"
  },
  {
    "input": {
      "doctype": "Customer Group Item",
      "question": "How many mappings exist in total for customer group items?",
      "fields": []
    },
    "output": "frappe.db.count('Customer Group Item')"
  },
  {
    "input": {
      "doctype": "Customer Group Item",
      "question": "View the customer group associated with record ID 'CGI-00123'.",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.db.get_value('Customer Group Item', {'name': 'CGI-00123'}, 'customer_group')"
  },
  {
    "input": {
      "doctype": "Customer Group Item",
      "question": "Fetch all customer group item records to analyze linked groups.",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_all('Customer Group Item', fields=['customer_group'])"
  },
  {
    "input": {
      "doctype": "Customer Group Item",
      "question": "Retrieve the full document for a customer group item with ID 'CGI-00009'.",
      "fields": []
    },
    "output": "frappe.get_doc('Customer Group Item', 'CGI-00009')"
  },
  {
    "input": {
      "doctype": "Customer Group Item",
      "question": "List customer group item links sorted by group name.",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_list('Customer Group Item', fields=['customer_group'], order_by='customer_group asc')"
  },
  {
    "input": {
      "doctype": "Customer Group Item",
      "question": "Get all customer group items linked to either 'Retail' or 'Corporate'.",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_list('Customer Group Item', filters={'customer_group': ['in', ['Retail', 'Corporate']]}, fields=['customer_group'])"
  },
  {
    "input": {
      "doctype": "Customer Group Item",
      "question": "What is the total count of customer group mappings for group 'Wholesale'?",
      "fields": []
    },
    "output": "frappe.db.count('Customer Group Item', {'customer_group': 'Wholesale'})"
  },
  {
    "input": {
      "doctype": "Customer Group Item",
      "question": "View the mapping record for customer group item 'CGI-00007'.",
      "fields": []
    },
    "output": "frappe.get_doc('Customer Group Item', 'CGI-00007')"
  },
  {
    "input": {
      "doctype": "Customer Group Item",
      "question": "List the customer group assignments created in the last 30 days.",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_list('Customer Group Item', filters={ 'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -30)] }, fields=['customer_group'])"
  },
  {
    "input": {
      "doctype": "Customer Group Item",
      "question": "Get all records that are not linked to 'Retail' group.",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_list('Customer Group Item', filters={ 'customer_group': ['!=', 'Retail'] }, fields=['customer_group'])"
  },
  {
    "input": {
      "doctype": "Customer Group Item",
      "question": "Show all group item records where group name contains 'Corp'.",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_list('Customer Group Item', filters={ 'customer_group': ['like', '%Corp%'] }, fields=['customer_group'])"
  },
  {
    "input": {
      "doctype": "Customer Group Item",
      "question": "Fetch all records with group 'Retail' and sort them descending by name.",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.get_list('Customer Group Item', filters={'customer_group': 'Retail'}, fields=['customer_group'], order_by='name desc')"
  },
  {
    "input": {
      "doctype": "Customer Group Item",
      "question": "How many unique customer group item records are there?",
      "fields": []
    },
    "output": "frappe.db.count('Customer Group Item')"
  },
  {
    "input": {
      "doctype": "Campaign Item",
      "question": "Which items are linked to the 'Summer Sale' campaign?",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.get_list('Campaign Item', filters={'campaign': 'Summer Sale'}, fields=['campaign'])"
  },
  {
    "input": {
      "doctype": "Campaign Item",
      "question": "How many items are associated with the Diwali marketing campaign?",
      "fields": []
    },
    "output": "frappe.db.count('Campaign Item', {'campaign': 'Diwali'})"
  },
  {
    "input": {
      "doctype": "Campaign Item",
      "question": "Get the campaign name for campaign item 'CMP-00012'.",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.db.get_value('Campaign Item', {'name': 'CMP-00012'}, 'campaign')"
  },
  {
    "input": {
      "doctype": "Campaign Item",
      "question": "Fetch all campaign item records with campaign info.",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.get_all('Campaign Item', fields=['campaign'])"
  },
  {
    "input": {
      "doctype": "Campaign Item",
      "question": "Show me the full campaign item document for ID 'CMP-00023'.",
      "fields": []
    },
    "output": "frappe.get_doc('Campaign Item', 'CMP-00023')"
  },
  {
    "input": {
      "doctype": "Campaign Item",
      "question": "List all campaign items under 'Referral Reward' strategy.",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.get_list('Campaign Item', filters={'campaign': 'Referral Reward'}, fields=['campaign'])"
  },
  {
    "input": {
      "doctype": "Campaign Item",
      "question": "Count how many campaign items are currently configured.",
      "fields": []
    },
    "output": "frappe.db.count('Campaign Item')"
  },
  {
    "input": {
      "doctype": "Campaign Item",
      "question": "What campaign is assigned to item 'ITEM-00098'?",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.db.get_value('Campaign Item', {'name': 'ITEM-00098'}, 'campaign')"
  },
  {
    "input": {
      "doctype": "Campaign Item",
      "question": "Retrieve all campaign items sorted by campaign name.",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.get_list('Campaign Item', fields=['campaign'], order_by='campaign asc')"
  },
  {
    "input": {
      "doctype": "Campaign Item",
      "question": "Get all campaign records that are not part of 'Summer Sale'.",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.get_list('Campaign Item', filters={'campaign': ['!=', 'Summer Sale']}, fields=['campaign'])"
  },
  {
    "input": {
      "doctype": "Campaign Item",
      "question": "List all campaign item mappings created this month.",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.get_list('Campaign Item', filters={ 'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -30)] }, fields=['campaign'])"
  },
  {
    "input": {
      "doctype": "Campaign Item",
      "question": "Pull the record for campaign item 'CMP-00044'.",
      "fields": []
    },
    "output": "frappe.get_doc('Campaign Item', 'CMP-00044')"
  },
  {
    "input": {
      "doctype": "Campaign Item",
      "question": "Fetch all products involved in the loyalty points campaign.",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.get_list('Campaign Item', filters={'campaign': 'Loyalty Points'}, fields=['campaign'])"
  },
  {
    "input": {
      "doctype": "Campaign Item",
      "question": "What campaign is item CMP-00897 part of?",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.db.get_value('Campaign Item', {'name': 'CMP-00897'}, 'campaign')"
  },
  {
    "input": {
      "doctype": "Campaign Item",
      "question": "How many campaigns include bundled items?",
      "fields": []
    },
    "output": "frappe.db.count('Campaign Item', {'campaign': ['like', '%bundle%']})"
  },
  {
    "input": {
      "doctype": "Campaign Item",
      "question": "Get a list of all campaign items for our digital promotion campaign.",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.get_list('Campaign Item', filters={'campaign': 'Digital Promo'}, fields=['campaign'])"
  },
  {
    "input": {
      "doctype": "Campaign Item",
      "question": "Which campaign items were modified last week?",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.get_list('Campaign Item', filters={ 'modified': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -7)] }, fields=['campaign'])"
  },
  {
    "input": {
      "doctype": "Campaign Item",
      "question": "What are the campaign items related to the Christmas marketing push?",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.get_list('Campaign Item', filters={'campaign': 'Christmas'}, fields=['campaign'])"
  },
  {
    "input": {
      "doctype": "Campaign Item",
      "question": "How many entries are there for the special launch campaign?",
      "fields": []
    },
    "output": "frappe.db.count('Campaign Item', {'campaign': 'Special Launch'})"
  },
  {
    "input": {
      "doctype": "Supplier Item",
      "question": "List all items provided by the supplier 'Glint Harbor Supplies'.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.get_list('Supplier Item', filters={'supplier': 'Glint Harbor Supplies'}, fields=['supplier'])"
  },
  {
    "input": {
      "doctype": "Supplier Item",
      "question": "How many supplier items are associated with 'XYZ Traders'?",
      "fields": []
    },
    "output": "frappe.db.count('Supplier Item', {'supplier': 'XYZ Traders'})"
  },
  {
    "input": {
      "doctype": "Supplier Item",
      "question": "Get the name of the supplier linked to item 'ITEM-00034'.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.db.get_value('Supplier Item', {'name': 'ITEM-00034'}, 'supplier')"
  },
  {
    "input": {
      "doctype": "Supplier Item",
      "question": "Fetch all supplier item records for purchase analysis.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.get_all('Supplier Item', fields=['supplier'])"
  },
  {
    "input": {
      "doctype": "Supplier Item",
      "question": "Retrieve the full document for supplier item ID 'SUPITEM-0045'.",
      "fields": []
    },
    "output": "frappe.get_doc('Supplier Item', 'SUPITEM-0045')"
  },
  {
    "input": {
      "doctype": "Supplier Item",
      "question": "List all suppliers linked to items created in the last 30 days.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.get_list('Supplier Item', filters={ 'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -30)] }, fields=['supplier'])"
  },
  {
    "input": {
      "doctype": "Supplier Item",
      "question": "How many items are associated with any supplier?",
      "fields": []
    },
    "output": "frappe.db.count('Supplier Item')"
  },
  {
    "input": {
      "doctype": "Supplier Item",
      "question": "Get the supplier name for item entry 'SI-00112'.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.db.get_value('Supplier Item', {'name': 'SI-00112'}, 'supplier')"
  },
  {
    "input": {
      "doctype": "Supplier Item",
      "question": "Fetch all supplier item mappings for inventory planning.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.get_all('Supplier Item', fields=['supplier'])"
  },
  {
    "input": {
      "doctype": "Supplier Item",
      "question": "Retrieve supplier item document for ID 'SUP-ITEM-2025-01'.",
      "fields": []
    },
    "output": "frappe.get_doc('Supplier Item', 'SUP-ITEM-2025-01')"
  },
  {
    "input": {
      "doctype": "Supplier Item",
      "question": "List all supplier items where supplier is not 'Generic Supplier'.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.get_list('Supplier Item', filters={ 'supplier': ['!=', 'Generic Supplier'] }, fields=['supplier'])"
  },
  {
    "input": {
      "doctype": "Supplier Item",
      "question": "Show all supplier item entries created this week.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.get_list('Supplier Item', filters={ 'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -7)] }, fields=['supplier'])"
  },
  {
    "input": {
      "doctype": "Supplier Item",
      "question": "List all supplier items linked to supplier 'Eastern Trade Corp'.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.get_list('Supplier Item', filters={'supplier': 'Eastern Trade Corp'}, fields=['supplier'])"
  },
  {
    "input": {
      "doctype": "Supplier Item",
      "question": "Pull the complete document for the supplier item 'ITEM-SUP-102'.",
      "fields": []
    },
    "output": "frappe.get_doc('Supplier Item', 'ITEM-SUP-102')"
  },
  {
    "input": {
      "doctype": "Supplier Item",
      "question": "Show supplier-item relationships filtered by a specific region or tag.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.get_list('Supplier Item', filters={'supplier': ['like', '%Region%']}, fields=['supplier'])"
  },
  {
    "input": {
      "doctype": "Supplier Item",
      "question": "Which supplier is linked to the item 'LED Panel - 60W'?",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.get_list('Supplier Item', filters={'name': 'LED Panel - 60W'}, fields=['supplier'])"
  },
  {
    "input": {
      "doctype": "Supplier Item",
      "question": "Get the supplier-item mapping where supplier is 'Alpha Corp'.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.get_list('Supplier Item', filters={'supplier': 'Alpha Corp'}, fields=['supplier'])"
  },
  {
    "input": {
      "doctype": "Supplier Item",
      "question": "Give me a full list of supplier records with suppliers visible.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.get_all('Supplier Item', fields=['supplier'])"
  },
  {
    "input": {
      "doctype": "Supplier Item",
      "question": "Find all items that have more than one supplier linked.",
      "fields": []
    },
    "output": "frappe.get_list('Supplier Item', filters={}, fields=['supplier'], group_by='name', having='count(*) > 1')"
  },
  {
    "input": {
      "doctype": "Supplier Item",
      "question": "How many suppliers have been updated this month?",
      "fields": []
    },
    "output": "frappe.db.count('Supplier Item', {'modified': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -30)]})"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Where can I view the mode of payment for the closing entry in ERPNext?",
      "fields": [
        "mode_of_payment"
      ]
    },
    "output": "frappe.db.get_value('POS Closing Entry Detail', {'name': 'POS-CL-0001'}, 'mode_of_payment')"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "How do I calculate the closing amount based on the opening and expected amounts in POS closing entry in ERPNext?",
      "fields": [
        "opening_amount",
        "expected_amount",
        "closing_amount"
      ]
    },
    "output": "frappe.get_list('POS Closing Entry Detail', filters={}, fields=['opening_amount', 'expected_amount', 'closing_amount'])"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "How can I reconcile the opening and closing amounts for POS transactions in ERPNext?",
      "fields": [
        "opening_amount",
        "closing_amount"
      ]
    },
    "output": "frappe.get_list('POS Closing Entry Detail', fields=['opening_amount', 'closing_amount'])"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Can I track discrepancies between the expected and closing amounts for POS in ERPNext?",
      "fields": [
        "expected_amount",
        "closing_amount",
        "difference"
      ]
    },
    "output": "frappe.get_list('POS Closing Entry Detail', fields=['expected_amount', 'closing_amount', 'difference'])"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Where do I update the difference field after reviewing POS closing entry in ERPNext?",
      "fields": [
        "difference"
      ]
    },
    "output": "frappe.db.get_value('POS Closing Entry Detail', {'name': 'POS-CL-0002'}, 'difference')"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "How do I handle discrepancies in the POS closing entry in ERPNext?",
      "fields": [
        "difference"
      ]
    },
    "output": "frappe.get_list('POS Closing Entry Detail', filters={ 'difference': ['!=', 0] }, fields=['difference'])"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Get the full document for closing entry with ID 'POS-CL-0003'.",
      "fields": []
    },
    "output": "frappe.get_doc('POS Closing Entry Detail', 'POS-CL-0003')"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Retrieve all entries with mode of payment as 'Cash'.",
      "fields": [
        "mode_of_payment"
      ]
    },
    "output": "frappe.get_list('POS Closing Entry Detail', filters={'mode_of_payment': 'Cash'}, fields=['mode_of_payment'])"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Show all POS closing entry records from this month.",
      "fields": []
    },
    "output": "frappe.get_list('POS Closing Entry Detail', filters={ 'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -30)] })"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Fetch all fields for the entry 'POS-CL-2025-01'.",
      "fields": []
    },
    "output": "frappe.get_doc('POS Closing Entry Detail', 'POS-CL-2025-01')"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "How many entries have a non-zero difference in closing amounts?",
      "fields": [
        "difference"
      ]
    },
    "output": "frappe.db.count('POS Closing Entry Detail', {'difference': ['!=', 0]})"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "How many POS closing entries were created today?",
      "fields": []
    },
    "output": "frappe.db.count('POS Closing Entry Detail', {'creation': ['>=', frappe.utils.nowdate()]})"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "List closing amounts and expected values for all entries this week.",
      "fields": [
        "closing_amount",
        "expected_amount"
      ]
    },
    "output": "frappe.get_list('POS Closing Entry Detail', filters={ 'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -7)] }, fields=['closing_amount', 'expected_amount'])"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Which entries show mismatch between expected and closing values?",
      "fields": [
        "expected_amount",
        "closing_amount"
      ]
    },
    "output": "frappe.get_list('POS Closing Entry Detail', filters={ 'expected_amount': ['!=', 'closing_amount'] }, fields=['expected_amount', 'closing_amount'])"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Pull expected and opening amounts for the last 5 entries.",
      "fields": [
        "expected_amount",
        "opening_amount"
      ]
    },
    "output": "frappe.get_list('POS Closing Entry Detail', limit_page_length=5, fields=['expected_amount', 'opening_amount'])"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Retrieve all details for entries with 'Card' as payment mode.",
      "fields": [
        "mode_of_payment"
      ]
    },
    "output": "frappe.get_all('POS Closing Entry Detail', filters={'mode_of_payment': 'Card'}, fields=['mode_of_payment', 'opening_amount', 'expected_amount', 'closing_amount', 'difference'])"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Get expected vs actual closing data for POS entries flagged for review.",
      "fields": [
        "expected_amount",
        "closing_amount"
      ]
    },
    "output": "frappe.get_list('POS Closing Entry Detail', filters={'difference': ['!=', 0]}, fields=['expected_amount', 'closing_amount'])"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "List all POS entries with expected amount greater than 1000.",
      "fields": [
        "expected_amount"
      ]
    },
    "output": "frappe.get_list('POS Closing Entry Detail', filters={ 'expected_amount': ['>', 1000] }, fields=['expected_amount'])"
  },
  {
    "input": {
      "doctype": "POS Closing Entry Detail",
      "question": "Get all closing entries created this year with non-zero discrepancies.",
      "fields": [
        "difference"
      ]
    },
    "output": "frappe.get_list('POS Closing Entry Detail', filters={ 'difference': ['!=', 0], 'creation': ['>=', '2025-01-01'] }, fields=['difference'])"
  },
  {
    "input": {
      "doctype": "DocType Layout Field",
      "question": "Where can I select a field to make it visible in the doctype layout in ERPNext?",
      "fields": [
        "label",
        "fieldname"
      ]
    },
    "output": "frappe.get_list('DocType Layout Field', fields=['label', 'fieldname'])"
  },
  {
    "input": {
      "doctype": "DocType Layout Field",
      "question": "How can I reorder fields in a doctype layout in ERPNext?",
      "fields": [
        "label",
        "fieldname"
      ]
    },
    "output": "frappe.get_list('DocType Layout Field', order_by='idx asc', fields=['label', 'fieldname'])"
  },
  {
    "input": {
      "doctype": "DocType Layout Field",
      "question": "Which layout fields are currently hidden in ERPNext?",
      "fields": [
        "fieldname"
      ]
    },
    "output": "frappe.get_list('DocType Layout Field', filters={'hidden': 1}, fields=['fieldname'])"
  },
  {
    "input": {
      "doctype": "DocType Layout Field",
      "question": "How do I set up a custom field in the layout for a doctype in ERPNext?",
      "fields": [
        "label",
        "fieldname"
      ]
    },
    "output": "frappe.get_list('DocType Layout Field', filters={'label': ['like', '%Custom%']}, fields=['label', 'fieldname'])"
  },
  {
    "input": {
      "doctype": "DocType Layout Field",
      "question": "Where do I add a new label for a field in ERPNext doctype layout?",
      "fields": [
        "label"
      ]
    },
    "output": "frappe.db.get_value('DocType Layout Field', {'label': 'New Field'}, 'label')"
  },
  {
    "input": {
      "doctype": "DocType Layout Field",
      "question": "Can I hide a field in the doctype layout in ERPNext?",
      "fields": [
        "fieldname"
      ]
    },
    "output": "frappe.get_list('DocType Layout Field', filters={'hidden': 1}, fields=['fieldname'])"
  },
  {
    "input": {
      "doctype": "DocType Layout Field",
      "question": "How many fields are configured in the current doctype layout?",
      "fields": []
    },
    "output": "frappe.db.count('DocType Layout Field')"
  },
  {
    "input": {
      "doctype": "DocType Layout Field",
      "question": "How do I update an existing field's name in a doctype layout in ERPNext?",
      "fields": [
        "fieldname"
      ]
    },
    "output": "frappe.get_doc('DocType Layout Field', 'custom_fieldname')"
  },
  {
    "input": {
      "doctype": "DocType Layout Field",
      "question": "Can I add dynamic links in the layout fields of a doctype in ERPNext?",
      "fields": [
        "fieldname"
      ]
    },
    "output": "frappe.get_list('DocType Layout Field', filters={'fieldtype': 'Dynamic Link'}, fields=['fieldname'])"
  },
  {
    "input": {
      "doctype": "DocType Layout Field",
      "question": "How many custom layout fields are currently visible in ERPNext?",
      "fields": []
    },
    "output": "frappe.db.count('DocType Layout Field', {'hidden': 0})"
  },
  {
    "input": {
      "doctype": "DocType Layout Field",
      "question": "How do I manage visibility for different fields in the layout of ERPNext doctypes?",
      "fields": [
        "fieldname"
      ]
    },
    "output": "frappe.get_list('DocType Layout Field', fields=['fieldname', 'hidden'])"
  },
  {
    "input": {
      "doctype": "DocType Layout Field",
      "question": "How do I view all layout fields for the 'Sales Invoice' doctype?",
      "fields": [
        "label",
        "fieldname"
      ]
    },
    "output": "frappe.get_all('DocType Layout Field', filters={'doctype': 'Sales Invoice'}, fields=['label', 'fieldname'])"
  },
  {
    "input": {
      "doctype": "DocType Layout Field",
      "question": "Get layout field document with fieldname 'discount_amount'.",
      "fields": []
    },
    "output": "frappe.get_doc('DocType Layout Field', 'discount_amount')"
  },
  {
    "input": {
      "doctype": "DocType Layout Field",
      "question": "How can I set default values for fields in a doctype layout in ERPNext?",
      "fields": [
        "fieldname"
      ]
    },
    "output": "frappe.get_list('DocType Layout Field', fields=['fieldname', 'default'])"
  },
  {
    "input": {
      "doctype": "DocType Layout Field",
      "question": "Pull all custom layout fieldnames used in the Purchase Invoice doctype.",
      "fields": [
        "fieldname"
      ]
    },
    "output": "frappe.get_list('DocType Layout Field', filters={'doctype': 'Purchase Invoice'}, fields=['fieldname'])"
  },
  {
    "input": {
      "doctype": "DocType Layout Field",
      "question": "Get all fields where label contains 'Tax' for layout customization.",
      "fields": [
        "label"
      ]
    },
    "output": "frappe.get_all('DocType Layout Field', filters={'label': ['like', '%Tax%']}, fields=['label'])"
  },
  {
    "input": {
      "doctype": "DocType Layout Field",
      "question": "Get all layout field configurations currently used in the system.",
      "fields": [
        "label",
        "fieldname"
      ]
    },
    "output": "frappe.get_all('DocType Layout Field', fields=['label', 'fieldname'])"
  },
  {
    "input": {
      "doctype": "DocType Layout Field",
      "question": "View layout fields added in the last 7 days for customization audit.",
      "fields": []
    },
    "output": "frappe.get_list('DocType Layout Field', filters={'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -7)]})"
  },
  {
    "input": {
      "doctype": "DocType Layout Field",
      "question": "Which layout fields have empty labels and should be fixed?",
      "fields": [
        "label"
      ]
    },
    "output": "frappe.get_list('DocType Layout Field', filters={'label': ''}, fields=['fieldname'])"
  },
  {
    "input": {
      "doctype": "DocType Layout Field",
      "question": "How many layout fields were customized in 2024?",
      "fields": []
    },
    "output": "frappe.db.count('DocType Layout Field', {'creation': ['between', ['2024-01-01', '2024-12-31']]})"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "List all items with returned quantities greater than zero in ERPNext.",
      "fields": [
        "main_item_code",
        "returned_qty"
      ]
    },
    "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'returned_qty': ['>', 0] }, fields=['main_item_code', 'returned_qty'])"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Fetch all fields of the item supplied entry with BOM detail 'BOM-0005'.",
      "fields": []
    },
    "output": "frappe.get_doc('Purchase Order Item Supplied', 'BOM-0005')"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "How many items were supplied with a conversion factor of 1?",
      "fields": []
    },
    "output": "frappe.db.count('Purchase Order Item Supplied', { 'conversion_factor': 1 })"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Show all supplied items with more than 10 units consumed.",
      "fields": [
        "main_item_code",
        "consumed_qty"
      ]
    },
    "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'consumed_qty': ['>', 10] }, fields=['main_item_code', 'consumed_qty'])"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Which items have their stock UOM set to 'Nos'?",
      "fields": [
        "main_item_code",
        "stock_uom"
      ]
    },
    "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'stock_uom': 'Nos' }, fields=['main_item_code', 'stock_uom'])"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Get all records where supplied quantity exceeds required quantity.",
      "fields": [
        "required_qty",
        "supplied_qty"
      ]
    },
    "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'supplied_qty': ['>', 'required_qty'] }, fields=['required_qty', 'supplied_qty'])"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Get the item code and amount for all entries where amount is above 5000.",
      "fields": [
        "main_item_code",
        "amount"
      ]
    },
    "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'amount': ['>', 5000] }, fields=['main_item_code', 'amount'])"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Fetch the item record for 'ITEM-00023' including its reference name and BOM detail.",
      "fields": [
        "reference_name",
        "bom_detail_no"
      ]
    },
    "output": "frappe.get_all('Purchase Order Item Supplied', filters={ 'main_item_code': 'ITEM-00023' }, fields=['reference_name', 'bom_detail_no'])"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "How do I view the full document for a supplied item with reference 'PO-1001'?",
      "fields": []
    },
    "output": "frappe.get_doc('Purchase Order Item Supplied', 'PO-1001')"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Count how many supplied entries exist for reserve warehouse 'Stores - A'.",
      "fields": []
    },
    "output": "frappe.db.count('Purchase Order Item Supplied', { 'reserve_warehouse': 'Stores - A' })"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "What\u2019s the rate for item 'ITEM-0001' supplied in the PO?",
      "fields": [
        "rate"
      ]
    },
    "output": "frappe.db.get_value('Purchase Order Item Supplied', { 'main_item_code': 'ITEM-0001' }, 'rate')"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Fetch the required quantity for item 'ITEM-9001'.",
      "fields": [
        "required_qty"
      ]
    },
    "output": "frappe.db.get_value('Purchase Order Item Supplied', { 'main_item_code': 'ITEM-9001' }, 'required_qty')"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "How do I pull all entries along with their conversion factors?",
      "fields": [
        "main_item_code",
        "conversion_factor"
      ]
    },
    "output": "frappe.get_all('Purchase Order Item Supplied', fields=['main_item_code', 'conversion_factor'])"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Get all PO items with rate set and returned quantity zero.",
      "fields": [
        "rate",
        "returned_qty"
      ]
    },
    "output": "frappe.get_all('Purchase Order Item Supplied', filters={ 'rate': ['>', 0], 'returned_qty': 0 }, fields=['main_item_code', 'rate', 'returned_qty'])"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Show me the list of records for items with reserved warehouse 'Main Stores'.",
      "fields": [
        "main_item_code",
        "reserve_warehouse"
      ]
    },
    "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'reserve_warehouse': 'Main Stores' }, fields=['main_item_code', 'reserve_warehouse'])"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Pull the document details of BOM reference 'BOM-88002'.",
      "fields": []
    },
    "output": "frappe.get_doc('Purchase Order Item Supplied', 'BOM-88002')"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "What is the total number of unique PO item records in the system?",
      "fields": []
    },
    "output": "frappe.db.count('Purchase Order Item Supplied')"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Retrieve all items with supplied_qty greater than consumed_qty.",
      "fields": [
        "supplied_qty",
        "consumed_qty"
      ]
    },
    "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'supplied_qty': ['>', 'consumed_qty'] }, fields=['main_item_code', 'supplied_qty', 'consumed_qty'])"
  },
  {
    "input": {
      "doctype": "Purchase Order Item Supplied",
      "question": "Which items in the PO have consumed quantities equal to required quantities?",
      "fields": [
        "consumed_qty",
        "required_qty"
      ]
    },
    "output": "frappe.get_list('Purchase Order Item Supplied', filters={ 'consumed_qty': ['=', 'required_qty'] }, fields=['main_item_code', 'required_qty', 'consumed_qty'])"
  },
  {
    "input": {
      "doctype": "SLA Fulfilled On Status",
      "question": "List all SLA statuses currently used in ERPNext.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_list('SLA Fulfilled On Status', fields=['status'])"
  },
  {
    "input": {
      "doctype": "SLA Fulfilled On Status",
      "question": "List all SLA statuses that match the word 'Closed'.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_list('SLA Fulfilled On Status', filters={'status': 'Closed'}, fields=['status'])"
  },
  {
    "input": {
      "doctype": "SLA Fulfilled On Status",
      "question": "How many SLA fulfillment statuses are there in ERPNext?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.count('SLA Fulfilled On Status')"
  },
  {
    "input": {
      "doctype": "SLA Fulfilled On Status",
      "question": "Get the full document of SLA status 'Open'.",
      "fields": []
    },
    "output": "frappe.get_doc('SLA Fulfilled On Status', 'Open')"
  },
  {
    "input": {
      "doctype": "SLA Fulfilled On Status",
      "question": "How many SLA statuses are configured as 'In Progress'?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.count('SLA Fulfilled On Status', {'status': 'In Progress'})"
  },
  {
    "input": {
      "doctype": "SLA Fulfilled On Status",
      "question": "Retrieve all SLA status entries for validation.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_all('SLA Fulfilled On Status', fields=['status'])"
  },
  {
    "input": {
      "doctype": "SLA Fulfilled On Status",
      "question": "Get the document with SLA status 'Resolved'.",
      "fields": []
    },
    "output": "frappe.get_doc('SLA Fulfilled On Status', 'Resolved')"
  },
  {
    "input": {
      "doctype": "SLA Fulfilled On Status",
      "question": "Fetch all SLA statuses with their exact names.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_list('SLA Fulfilled On Status', fields=['status'])"
  },
  {
    "input": {
      "doctype": "SLA Fulfilled On Status",
      "question": "Get all SLA statuses listed in the system configuration.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_all('SLA Fulfilled On Status', fields=['status'])"
  },
  {
    "input": {
      "doctype": "SLA Fulfilled On Status",
      "question": "Which status is configured for 'Resolved' SLAs?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.get_value('SLA Fulfilled On Status', {'status': 'Resolved'}, 'status')"
  },
  {
    "input": {
      "doctype": "SLA Fulfilled On Status",
      "question": "Fetch SLA statuses used to trigger email alerts.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_list('SLA Fulfilled On Status', filters={'status': 'Pending'}, fields=['status'])"
  },
  {
    "input": {
      "doctype": "SLA Fulfilled On Status",
      "question": "Get SLA fulfillment statuses for tracking purposes.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_list('SLA Fulfilled On Status', fields=['status'])"
  },
  {
    "input": {
      "doctype": "SLA Fulfilled On Status",
      "question": "List all SLA fulfillment statuses defined in the system.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_list('SLA Fulfilled On Status', fields=['status'])"
  },
  {
    "input": {
      "doctype": "SLA Fulfilled On Status",
      "question": "Show me all SLA statuses configured for customer support workflows.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_all('SLA Fulfilled On Status', fields=['status'])"
  },
  {
    "input": {
      "doctype": "SLA Fulfilled On Status",
      "question": "How many SLA statuses are configured in the system?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.count('SLA Fulfilled On Status')"
  },
  {
    "input": {
      "doctype": "SLA Fulfilled On Status",
      "question": "Fetch the full document for the status 'Completed'.",
      "fields": []
    },
    "output": "frappe.get_doc('SLA Fulfilled On Status', 'Completed')"
  },
  {
    "input": {
      "doctype": "SLA Fulfilled On Status",
      "question": "Get the name of the SLA status record where the status is 'Overdue'.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.get_value('SLA Fulfilled On Status', {'status': 'Overdue'}, 'name')"
  },
  {
    "input": {
      "doctype": "SLA Fulfilled On Status",
      "question": "List all SLA fulfillment statuses used for tracking escalations.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_list('SLA Fulfilled On Status', filters={'status': ['like', '%Escalation%']}, fields=['status'])"
  },
  {
    "input": {
      "doctype": "SLA Fulfilled On Status",
      "question": "Show all SLA statuses that include the word 'Closed'.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_all('SLA Fulfilled On Status', filters={'status': ['like', '%Closed%']}, fields=['status'])"
  },
  {
    "input": {
      "doctype": "SLA Fulfilled On Status",
      "question": "How many SLA statuses contain the term 'Pending'?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.count('SLA Fulfilled On Status', {'status': ['like', '%Pending%']})"
  },
  {
    "input": {
      "doctype": "Item Tax",
      "question": "List all item tax templates for 'VAT 5%' category.",
      "fields": [
        "item_tax_template",
        "tax_category"
      ]
    },
    "output": "frappe.get_list('Item Tax', filters={'tax_category': 'VAT 5%'}, fields=['item_tax_template', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Item Tax",
      "question": "Show me item tax records where the minimum rate is below 10.",
      "fields": [
        "minimum_net_rate"
      ]
    },
    "output": "frappe.get_list('Item Tax', filters={ 'minimum_net_rate': ['<', 10] }, fields=['item_tax_template', 'minimum_net_rate'])"
  },
  {
    "input": {
      "doctype": "Item Tax",
      "question": "Which items have tax categories 'Luxury' assigned?",
      "fields": [
        "item_tax_template",
        "tax_category"
      ]
    },
    "output": "frappe.get_list('Item Tax', filters={'tax_category': 'Luxury'}, fields=['item_tax_template', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Item Tax",
      "question": "List all item taxes valid from January 1, 2024.",
      "fields": [
        "item_tax_template",
        "valid_from"
      ]
    },
    "output": "frappe.get_list('Item Tax', filters={'valid_from': '2024-01-01'}, fields=['item_tax_template', 'valid_from'])"
  },
  {
    "input": {
      "doctype": "Item Tax",
      "question": "Find item tax records with maximum net rate greater than 100.",
      "fields": [
        "item_tax_template",
        "maximum_net_rate"
      ]
    },
    "output": "frappe.get_list('Item Tax', filters={ 'maximum_net_rate': ['>', 100] }, fields=['item_tax_template', 'maximum_net_rate'])"
  },
  {
    "input": {
      "doctype": "Item Tax",
      "question": "Which tax templates are used for category 'Retail'?",
      "fields": [
        "item_tax_template",
        "tax_category"
      ]
    },
    "output": "frappe.get_list('Item Tax', filters={'tax_category': 'Retail'}, fields=['item_tax_template', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Item Tax",
      "question": "Show item tax templates applicable before 2023.",
      "fields": [
        "item_tax_template",
        "valid_from"
      ]
    },
    "output": "frappe.get_list('Item Tax', filters={ 'valid_from': ['<', '2023-01-01'] }, fields=['item_tax_template', 'valid_from'])"
  },
  {
    "input": {
      "doctype": "Item Tax",
      "question": "Get all item tax records with a net rate range between 20 and 50.",
      "fields": [
        "minimum_net_rate",
        "maximum_net_rate"
      ]
    },
    "output": "frappe.get_list('Item Tax', filters={ 'minimum_net_rate': ['>=', 20], 'maximum_net_rate': ['<=', 50] }, fields=['item_tax_template', 'minimum_net_rate', 'maximum_net_rate'])"
  },
  {
    "input": {
      "doctype": "Item Tax",
      "question": "Fetch all tax category and validity combinations defined.",
      "fields": [
        "tax_category",
        "valid_from"
      ]
    },
    "output": "frappe.get_all('Item Tax', fields=['tax_category', 'valid_from'])"
  },
  {
    "input": {
      "doctype": "Item Tax",
      "question": "Return all fields of item taxes defined after March 2023.",
      "fields": []
    },
    "output": "frappe.get_all('Item Tax', filters={ 'valid_from': ['>', '2023-03-01'] })"
  },
  {
    "input": {
      "doctype": "Item Tax",
      "question": "Get the full records of item taxes with category 'Wholesale'.",
      "fields": []
    },
    "output": "frappe.get_all('Item Tax', filters={'tax_category': 'Wholesale'})"
  },
  {
    "input": {
      "doctype": "Item Tax",
      "question": "Get complete document for item tax template 'GST 18%'.",
      "fields": []
    },
    "output": "frappe.get_doc('Item Tax', 'GST 18%')"
  },
  {
    "input": {
      "doctype": "Item Tax",
      "question": "Retrieve the full document of item tax with tax category 'Retail VAT'.",
      "fields": []
    },
    "output": "frappe.get_doc('Item Tax', {'tax_category': 'Retail VAT'})"
  },
  {
    "input": {
      "doctype": "Item Tax",
      "question": "Pull the entire configuration of item tax with a template named 'Luxury_Tax'.",
      "fields": []
    },
    "output": "frappe.get_doc('Item Tax', 'Luxury_Tax')"
  },
  {
    "input": {
      "doctype": "Item Tax",
      "question": "What is the tax category for template 'GST 12%'?",
      "fields": [
        "tax_category"
      ]
    },
    "output": "frappe.db.get_value('Item Tax', {'item_tax_template': 'GST 12%'}, 'tax_category')"
  },
  {
    "input": {
      "doctype": "Item Tax",
      "question": "Show the minimum net rate for item tax template 'Eco_Tax'.",
      "fields": [
        "minimum_net_rate"
      ]
    },
    "output": "frappe.db.get_value('Item Tax', {'item_tax_template': 'Eco_Tax'}, 'minimum_net_rate')"
  },
  {
    "input": {
      "doctype": "Item Tax",
      "question": "Fetch the validity date for template 'Retail_Tax'.",
      "fields": [
        "valid_from"
      ]
    },
    "output": "frappe.db.get_value('Item Tax', {'item_tax_template': 'Retail_Tax'}, 'valid_from')"
  },
  {
    "input": {
      "doctype": "Item Tax",
      "question": "How many item taxes are valid from 2024 onwards?",
      "fields": [
        "valid_from"
      ]
    },
    "output": "frappe.db.count('Item Tax', {'valid_from': ['>=', '2024-01-01']})"
  },
  {
    "input": {
      "doctype": "Item Tax",
      "question": "Count how many item taxes are assigned to the 'Export' category.",
      "fields": [
        "tax_category"
      ]
    },
    "output": "frappe.db.count('Item Tax', {'tax_category': 'Export'})"
  },
  {
    "input": {
      "doctype": "Assignment Rule",
      "question": "List all assignment rules that are currently disabled.",
      "fields": [
        "name",
        "disabled"
      ]
    },
    "output": "frappe.get_list('Assignment Rule', filters={'disabled': 1}, fields=['name', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Assignment Rule",
      "question": "Get all assignment rules for the Sales Invoice doctype.",
      "fields": [
        "name",
        "document_type"
      ]
    },
    "output": "frappe.get_list('Assignment Rule', filters={'document_type': 'Sales Invoice'}, fields=['name', 'document_type'])"
  },
  {
    "input": {
      "doctype": "Assignment Rule",
      "question": "List all assignment rules that use priority-based logic.",
      "fields": [
        "name",
        "priority"
      ]
    },
    "output": "frappe.get_list('Assignment Rule', filters={'priority': 'High'}, fields=['name', 'priority'])"
  },
  {
    "input": {
      "doctype": "Assignment Rule",
      "question": "Which assignment rules are using a custom assign condition?",
      "fields": [
        "name",
        "assign_condition"
      ]
    },
    "output": "frappe.get_list('Assignment Rule', filters={'assign_condition': ['!=', '']}, fields=['name', 'assign_condition'])"
  },
  {
    "input": {
      "doctype": "Assignment Rule",
      "question": "List assignment rules where the unassign condition is defined.",
      "fields": [
        "name",
        "unassign_condition"
      ]
    },
    "output": "frappe.get_list('Assignment Rule', filters={'unassign_condition': ['!=', '']}, fields=['name', 'unassign_condition'])"
  },
  {
    "input": {
      "doctype": "Assignment Rule",
      "question": "List all rules with custom due date logic configured.",
      "fields": [
        "name",
        "due_date_based_on"
      ]
    },
    "output": "frappe.get_list('Assignment Rule', filters={'due_date_based_on': ['!=', '']}, fields=['name', 'due_date_based_on'])"
  },
  {
    "input": {
      "doctype": "Assignment Rule",
      "question": "List rules with custom document type assignment settings.",
      "fields": [
        "document_type",
        "description"
      ]
    },
    "output": "frappe.get_list('Assignment Rule', filters={'description': ['!=', '']}, fields=['document_type', 'description'])"
  },
  {
    "input": {
      "doctype": "Assignment Rule",
      "question": "Fetch all assignment rules regardless of filters.",
      "fields": [
        "name",
        "priority"
      ]
    },
    "output": "frappe.get_all('Assignment Rule', fields=['name', 'priority'])"
  },
  {
    "input": {
      "doctype": "Assignment Rule",
      "question": "Fetch every rule and its last assigned user.",
      "fields": [
        "name",
        "last_user"
      ]
    },
    "output": "frappe.get_all('Assignment Rule', fields=['name', 'last_user'])"
  },
  {
    "input": {
      "doctype": "Assignment Rule",
      "question": "Get complete details of the assignment rule named 'Support Ticket Routing'.",
      "fields": []
    },
    "output": "frappe.get_doc('Assignment Rule', 'Support Ticket Routing')"
  },
  {
    "input": {
      "doctype": "Assignment Rule",
      "question": "Get the full configuration for 'Sales Order Round Robin Rule'.",
      "fields": []
    },
    "output": "frappe.get_doc('Assignment Rule', 'Sales Order Round Robin Rule')"
  },
  {
    "input": {
      "doctype": "Assignment Rule",
      "question": "Fetch all configuration fields of 'High Priority Lead Assignment'.",
      "fields": []
    },
    "output": "frappe.get_doc('Assignment Rule', 'High Priority Lead Assignment')"
  },
  {
    "input": {
      "doctype": "Assignment Rule",
      "question": "Which user was last assigned by the 'Task Priority Rule'?",
      "fields": [
        "name",
        "last_user"
      ]
    },
    "output": "frappe.db.get_value('Assignment Rule', {'name': 'Task Priority Rule'}, 'last_user')"
  },
  {
    "input": {
      "doctype": "Assignment Rule",
      "question": "How many assignment rules are configured in total?",
      "fields": []
    },
    "output": "frappe.db.count('Assignment Rule')"
  },
  {
    "input": {
      "doctype": "Assignment Rule",
      "question": "How many rules are currently disabled?",
      "fields": [
        "disabled"
      ]
    },
    "output": "frappe.db.count('Assignment Rule', {'disabled': 1})"
  },
  {
    "input": {
      "doctype": "South Africa VAT Settings",
      "question": "List all VAT settings configured for companies in South Africa.",
      "fields": [
        "company",
        "vat_accounts"
      ]
    },
    "output": "frappe.get_list('South Africa VAT Settings', fields=['company', 'vat_accounts'])"
  },
  {
    "input": {
      "doctype": "South Africa VAT Settings",
      "question": "Which VAT settings are linked to the company 'Drizzle & Flint Corp SA'?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.get_list('South Africa VAT Settings', filters={'company': 'Drizzle & Flint Corp SA'}, fields=['company'])"
  },
  {
    "input": {
      "doctype": "South Africa VAT Settings",
      "question": "List companies with multiple VAT accounts configured.",
      "fields": [
        "company",
        "vat_accounts"
      ]
    },
    "output": "frappe.get_list('South Africa VAT Settings', filters={'vat_accounts': ['!=', '']}, fields=['company', 'vat_accounts'])"
  },
  {
    "input": {
      "doctype": "South Africa VAT Settings",
      "question": "Find all companies with VAT settings configured in ERPNext.",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.get_list('South Africa VAT Settings', fields=['company'])"
  },
  {
    "input": {
      "doctype": "South Africa VAT Settings",
      "question": "List VAT configuration settings for all registered South African companies.",
      "fields": [
        "company",
        "vat_accounts"
      ]
    },
    "output": "frappe.get_list('South Africa VAT Settings', fields=['company', 'vat_accounts'])"
  },
  {
    "input": {
      "doctype": "South Africa VAT Settings",
      "question": "Which companies in South Africa have no VAT accounts set yet?",
      "fields": [
        "company",
        "vat_accounts"
      ]
    },
    "output": "frappe.get_list('South Africa VAT Settings', filters={'vat_accounts': ''}, fields=['company'])"
  },
  {
    "input": {
      "doctype": "South Africa VAT Settings",
      "question": "Get companies with any VAT setup in place.",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.get_list('South Africa VAT Settings', filters={'company': ['!=', '']}, fields=['company'])"
  },
  {
    "input": {
      "doctype": "South Africa VAT Settings",
      "question": "Fetch all South African VAT settings including company and linked VAT accounts.",
      "fields": [
        "company",
        "vat_accounts"
      ]
    },
    "output": "frappe.get_all('South Africa VAT Settings', fields=['company', 'vat_accounts'])"
  },
  {
    "input": {
      "doctype": "South Africa VAT Settings",
      "question": "Retrieve the complete VAT mapping configuration across companies.",
      "fields": [
        "company",
        "vat_accounts"
      ]
    },
    "output": "frappe.get_all('South Africa VAT Settings', fields=['company', 'vat_accounts'])"
  },
  {
    "input": {
      "doctype": "South Africa VAT Settings",
      "question": "Get all configuration fields for VAT setup in South Africa.",
      "fields": []
    },
    "output": "frappe.get_all('South Africa VAT Settings')"
  },
  {
    "input": {
      "doctype": "South Africa VAT Settings",
      "question": "Get the full configuration for ARust PetalBC Corp SA\u2019s VAT settings.",
      "fields": []
    },
    "output": "frappe.get_doc('South Africa VAT Settings', 'Rust Petal Corp SA')"
  },
  {
    "input": {
      "doctype": "South Africa VAT Settings",
      "question": "Retrieve all setup details for company 'Cape Traders (Pty) Ltd'.",
      "fields": []
    },
    "output": "frappe.get_doc('South Africa VAT Settings', 'Cape Traders (Pty) Ltd')"
  },
  {
    "input": {
      "doctype": "South Africa VAT Settings",
      "question": "Show VAT settings document for 'Durban Wholesale SA'.",
      "fields": []
    },
    "output": "frappe.get_doc('South Africa VAT Settings', 'Durban Wholesale SA')"
  },
  {
    "input": {
      "doctype": "South Africa VAT Settings",
      "question": "Which VAT accounts are linked to the company 'Cactus Loom Corp SA'?",
      "fields": [
        "vat_accounts"
      ]
    },
    "output": "frappe.db.get_value('South Africa VAT Settings', {'company': 'Cactus Loom Corp SA'}, 'vat_accounts')"
  },
  {
    "input": {
      "doctype": "South Africa VAT Settings",
      "question": "What company is configured in the VAT settings for 'Durban Wholesale SA'?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.get_value('South Africa VAT Settings', {'name': 'Durban Wholesale SA'}, 'company')"
  },
  {
    "input": {
      "doctype": "South Africa VAT Settings",
      "question": "How many VAT configurations are defined for South African companies?",
      "fields": []
    },
    "output": "frappe.db.count('South Africa VAT Settings')"
  },
  {
    "input": {
      "doctype": "South Africa VAT Settings",
      "question": "Count how many companies do not have VAT accounts set yet.",
      "fields": [
        "vat_accounts"
      ]
    },
    "output": "frappe.db.count('South Africa VAT Settings', {'vat_accounts': ''})"
  },
  {
    "input": {
      "doctype": "Service Level Priority",
      "question": "List all service level priorities and their response times.",
      "fields": [
        "priority",
        "response_time"
      ]
    },
    "output": "frappe.get_list('Service Level Priority', fields=['priority', 'response_time'])"
  },
  {
    "input": {
      "doctype": "Service Level Priority",
      "question": "Get all service level priorities with a response time of 4 hours or less.",
      "fields": [
        "priority",
        "response_time"
      ]
    },
    "output": "frappe.get_list('Service Level Priority', filters={'response_time': ['<=', 4]}, fields=['priority', 'response_time'])"
  },
  {
    "input": {
      "doctype": "Service Level Priority",
      "question": "Count how many service level priorities have a resolution time above 12 hours.",
      "fields": [
        "resolution_time"
      ]
    },
    "output": "frappe.db.count('Service Level Priority', {'resolution_time': ['>', 12]})"
  },
  {
    "input": {
      "doctype": "Service Level Priority",
      "question": "Retrieve the response and resolution time for the 'High' priority level.",
      "fields": [
        "response_time",
        "resolution_time"
      ]
    },
    "output": "frappe.db.get_value('Service Level Priority', {'priority': 'High'}, ['response_time', 'resolution_time'])"
  },
  {
    "input": {
      "doctype": "Service Level Priority",
      "question": "Fetch the full configuration for the 'Urgent' service level.",
      "fields": []
    },
    "output": "frappe.get_doc('Service Level Priority', 'Urgent')"
  },
  {
    "input": {
      "doctype": "Service Level Priority",
      "question": "Show all priorities where resolution time is optional (blank).",
      "fields": [
        "priority",
        "resolution_time"
      ]
    },
    "output": "frappe.get_list('Service Level Priority', filters={'resolution_time': ''}, fields=['priority', 'resolution_time'])"
  },
  {
    "input": {
      "doctype": "Service Level Priority",
      "question": "Get all defined priorities in the system with both response and resolution times.",
      "fields": [
        "priority",
        "response_time",
        "resolution_time"
      ]
    },
    "output": "frappe.get_all('Service Level Priority', fields=['priority', 'response_time', 'resolution_time'])"
  },
  {
    "input": {
      "doctype": "Service Level Priority",
      "question": "List all service level priorities marked as default.",
      "fields": [
        "priority",
        "is_default"
      ]
    },
    "output": "frappe.get_list('Service Level Priority', filters={'is_default': 1}, fields=['priority', 'is_default'])"
  },
  {
    "input": {
      "doctype": "Service Level Priority",
      "question": "Get the resolution time for 'High' priority service level.",
      "fields": [
        "resolution_time"
      ]
    },
    "output": "frappe.db.get_value('Service Level Priority', {'priority': 'High'}, 'resolution_time')"
  },
  {
    "input": {
      "doctype": "Service Level Priority",
      "question": "Count how many service level priorities are defined.",
      "fields": []
    },
    "output": "frappe.db.count('Service Level Priority')"
  },
  {
    "input": {
      "doctype": "Service Level Priority",
      "question": "Fetch all service level priorities with first response time greater than 1 hour.",
      "fields": [
        "priority",
        "first_respond_time"
      ]
    },
    "output": "frappe.get_list('Service Level Priority', filters={ 'first_respond_time': ['>', 60] }, fields=['priority', 'first_respond_time'])"
  },
  {
    "input": {
      "doctype": "Service Level Priority",
      "question": "Get complete configuration for 'Urgent' service level priority.",
      "fields": []
    },
    "output": "frappe.get_doc('Service Level Priority', 'Urgent')"
  },
  {
    "input": {
      "doctype": "Service Level Priority",
      "question": "How many service level priorities are marked with a resolution time?",
      "fields": [
        "resolution_time"
      ]
    },
    "output": "frappe.db.count('Service Level Priority', {'resolution_time': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Service Level Priority",
      "question": "Get all service level priority names and their resolution times.",
      "fields": [
        "priority",
        "resolution_time"
      ]
    },
    "output": "frappe.get_all('Service Level Priority', fields=['priority', 'resolution_time'])"
  },
  {
    "input": {
      "doctype": "Service Level Priority",
      "question": "What is the first response time for 'Normal' priority?",
      "fields": [
        "first_respond_time"
      ]
    },
    "output": "frappe.db.get_value('Service Level Priority', {'priority': 'Normal'}, 'first_respond_time')"
  },
  {
    "input": {
      "doctype": "Service Level Priority",
      "question": "Show the list of all priorities and their response and resolution times.",
      "fields": [
        "priority",
        "first_respond_time",
        "resolution_time"
      ]
    },
    "output": "frappe.get_all('Service Level Priority', fields=['priority', 'first_respond_time', 'resolution_time'])"
  },
  {
    "input": {
      "doctype": "Service Level Priority",
      "question": "Fetch service level priorities that have resolution time below 30 minutes.",
      "fields": [
        "priority",
        "resolution_time"
      ]
    },
    "output": "frappe.get_list('Service Level Priority', filters={ 'resolution_time': ['<', 30] }, fields=['priority', 'resolution_time'])"
  },
  {
    "input": {
      "doctype": "Service Level Priority",
      "question": "Get details of the service level priority called 'Critical'.",
      "fields": []
    },
    "output": "frappe.get_doc('Service Level Priority', 'Critical')"
  },
  {
    "input": {
      "doctype": "Service Level Priority",
      "question": "List all priorities where first response time is exactly 15 minutes.",
      "fields": [
        "priority",
        "first_respond_time"
      ]
    },
    "output": "frappe.get_list('Service Level Priority', filters={'first_respond_time': 15}, fields=['priority', 'first_respond_time'])"
  },
  {
    "input": {
      "doctype": "Service Level Priority",
      "question": "Retrieve the first response and resolution times for 'Low' priority.",
      "fields": [
        "first_respond_time",
        "resolution_time"
      ]
    },
    "output": "frappe.get_list('Service Level Priority', filters={'priority': 'Low'}, fields=['first_respond_time', 'resolution_time'])"
  },
  {
    "input": {
      "doctype": "Sub Operation",
      "question": "List all sub-operations with their associated main operations.",
      "fields": [
        "operation"
      ]
    },
    "output": "frappe.get_list('Sub Operation', fields=['operation'])"
  },
  {
    "input": {
      "doctype": "Sub Operation",
      "question": "Get the time in minutes for the sub-operation 'Drilling'.",
      "fields": [
        "time_in_mins"
      ]
    },
    "output": "frappe.db.get_value('Sub Operation', {'operation': 'Drilling'}, 'time_in_mins')"
  },
  {
    "input": {
      "doctype": "Sub Operation",
      "question": "Retrieve all sub-operations and their descriptions.",
      "fields": [
        "operation",
        "description"
      ]
    },
    "output": "frappe.get_all('Sub Operation', fields=['operation', 'description'])"
  },
  {
    "input": {
      "doctype": "Sub Operation",
      "question": "How many sub-operations are defined in the system?",
      "fields": []
    },
    "output": "frappe.db.count('Sub Operation')"
  },
  {
    "input": {
      "doctype": "Sub Operation",
      "question": "Get the complete document for the sub-operation 'Cutting'.",
      "fields": []
    },
    "output": "frappe.get_doc('Sub Operation', 'Cutting')"
  },
  {
    "input": {
      "doctype": "Sub Operation",
      "question": "List all sub-operations that require 60 minutes or more.",
      "fields": [
        "operation",
        "time_in_mins"
      ]
    },
    "output": "frappe.get_list('Sub Operation', filters={'time_in_mins': ['>=', 60]}, fields=['operation', 'time_in_mins'])"
  },
  {
    "input": {
      "doctype": "Sub Operation",
      "question": "Retrieve all sub-operations that include a description.",
      "fields": [
        "operation",
        "description"
      ]
    },
    "output": "frappe.get_list('Sub Operation', filters={'description': ['!=', '']}, fields=['operation', 'description'])"
  },
  {
    "input": {
      "doctype": "Sub Operation",
      "question": "Count how many sub-operations are linked to the operation 'Painting'.",
      "fields": [
        "operation"
      ]
    },
    "output": "frappe.db.count('Sub Operation', {'operation': 'Painting'})"
  },
  {
    "input": {
      "doctype": "Sub Operation",
      "question": "Fetch all sub-operations and their time values for review.",
      "fields": [
        "operation",
        "time_in_mins"
      ]
    },
    "output": "frappe.get_all('Sub Operation', fields=['operation', 'time_in_mins'])"
  },
  {
    "input": {
      "doctype": "Sub Operation",
      "question": "What is the description of the sub-operation 'Polishing'?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.get_value('Sub Operation', {'operation': 'Polishing'}, 'description')"
  },
  {
    "input": {
      "doctype": "Sub Operation",
      "question": "Get all sub-operations where the time required is less than 30 minutes.",
      "fields": [
        "operation",
        "time_in_mins"
      ]
    },
    "output": "frappe.get_list('Sub Operation', filters={'time_in_mins': ['<', 30]}, fields=['operation', 'time_in_mins'])"
  },
  {
    "input": {
      "doctype": "Sub Operation",
      "question": "Retrieve all sub-operations for the operation 'Milling'.",
      "fields": [
        "operation"
      ]
    },
    "output": "frappe.get_list('Sub Operation', filters={'operation': 'Milling'}, fields=['operation'])"
  },
  {
    "input": {
      "doctype": "Sub Operation",
      "question": "Count all sub-operations having any description entered.",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.count('Sub Operation', {'description': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sub Operation",
      "question": "Get the document for the sub-operation with ID 'OPR-2025-001'.",
      "fields": []
    },
    "output": "frappe.get_doc('Sub Operation', 'OPR-2025-001')"
  },
  {
    "input": {
      "doctype": "Sub Operation",
      "question": "Get all sub-operations along with their description and duration.",
      "fields": [
        "operation",
        "description",
        "time_in_mins"
      ]
    },
    "output": "frappe.get_list('Sub Operation', fields=['operation', 'description', 'time_in_mins'])"
  },
  {
    "input": {
      "doctype": "Sub Operation",
      "question": "Fetch only the name and time for all sub-operations longer than 45 minutes.",
      "fields": [
        "operation",
        "time_in_mins"
      ]
    },
    "output": "frappe.get_list('Sub Operation', filters={'time_in_mins': ['>', 45]}, fields=['operation', 'time_in_mins'])"
  },
  {
    "input": {
      "doctype": "Sub Operation",
      "question": "Retrieve just the operation names from Sub Operation.",
      "fields": [
        "operation"
      ]
    },
    "output": "frappe.get_all('Sub Operation', fields=['operation'])"
  },
  {
    "input": {
      "doctype": "Sub Operation",
      "question": "How many sub-operations are associated with 'Assembly'?",
      "fields": [
        "operation"
      ]
    },
    "output": "frappe.db.count('Sub Operation', {'operation': 'Assembly'})"
  },
  {
    "input": {
      "doctype": "Sub Operation",
      "question": "Fetch all fields for the sub-operation 'Grinding'.",
      "fields": []
    },
    "output": "frappe.get_doc('Sub Operation', 'Grinding')"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "How do I check the current S3 bucket name used for backups?",
      "fields": [
        "bucket"
      ]
    },
    "output": "frappe.db.get_value('S3 Backup Settings', {}, 'bucket')"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "Where can I find the email address used for backup notifications?",
      "fields": [
        "notify_email"
      ]
    },
    "output": "frappe.db.get_value('S3 Backup Settings', {}, 'notify_email')"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "List all S3 backup settings where email alerts are enabled.",
      "fields": [
        "name",
        "send_email_for_successful_backup"
      ]
    },
    "output": "frappe.get_list('S3 Backup Settings', filters={'send_email_for_successful_backup': 1}, fields=['name', 'send_email_for_successful_backup'])"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "Show me all configurations that use weekly backups.",
      "fields": [
        "name",
        "frequency"
      ]
    },
    "output": "frappe.get_list('S3 Backup Settings', filters={'frequency': 'Weekly'}, fields=['name', 'frequency'])"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "Can I count how many setups are scheduled for monthly backups?",
      "fields": [
        "frequency"
      ]
    },
    "output": "frappe.db.count('S3 Backup Settings', {'frequency': 'Monthly'})"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "How many S3 backup configurations are skipping file backups?",
      "fields": [
        "backup_files"
      ]
    },
    "output": "frappe.db.count('S3 Backup Settings', {'backup_files': 0})"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "Give me the access key for my current backup setup.",
      "fields": [
        "access_key_id"
      ]
    },
    "output": "frappe.db.get_value('S3 Backup Settings', {}, 'access_key_id')"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "Get all S3 configurations that point to my custom endpoint.",
      "fields": [
        "name",
        "endpoint_url"
      ]
    },
    "output": "frappe.get_list('S3 Backup Settings', filters={'endpoint_url': 'your-custom-endpoint.com'}, fields=['name', 'endpoint_url'])"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "Retrieve the full S3 Backup Settings document.",
      "fields": [
        "enabled",
        "access_key_id",
        "secret_access_key",
        "notify_email",
        "bucket",
        "endpoint_url",
        "frequency",
        "backup_files"
      ]
    },
    "output": "frappe.get_doc('S3 Backup Settings', 'S3 Backup Settings')"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "Which configurations have automatic backups enabled?",
      "fields": [
        "name",
        "enabled"
      ]
    },
    "output": "frappe.get_all('S3 Backup Settings', filters={'enabled': 1}, fields=['name', 'enabled'])"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "Is the automatic backup currently enabled in my system?",
      "fields": [
        "enabled"
      ]
    },
    "output": "frappe.db.get_value('S3 Backup Settings', {}, 'enabled')"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "List all entries that use the Daily backup schedule.",
      "fields": [
        "name",
        "frequency"
      ]
    },
    "output": "frappe.get_list('S3 Backup Settings', filters={'frequency': 'Daily'}, fields=['name', 'frequency'])"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "How many configurations have the notification email blank?",
      "fields": [
        "notify_email"
      ]
    },
    "output": "frappe.db.count('S3 Backup Settings', {'notify_email': ''})"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "Which settings have notifications disabled for successful backups?",
      "fields": [
        "name",
        "send_email_for_successful_backup"
      ]
    },
    "output": "frappe.get_list('S3 Backup Settings', filters={'send_email_for_successful_backup': 0}, fields=['name', 'send_email_for_successful_backup'])"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "Fetch all configurations where file backups are included.",
      "fields": [
        "name",
        "backup_files"
      ]
    },
    "output": "frappe.get_all('S3 Backup Settings', filters={'backup_files': 1}, fields=['name', 'backup_files'])"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "Get the endpoint URL used for the current S3 backup.",
      "fields": [
        "endpoint_url"
      ]
    },
    "output": "frappe.db.get_value('S3 Backup Settings', {}, 'endpoint_url')"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "Show me all entries that use 'weekly' as backup frequency and have file backups enabled.",
      "fields": [
        "name",
        "frequency",
        "backup_files"
      ]
    },
    "output": "frappe.get_list('S3 Backup Settings', filters={'frequency': 'Weekly', 'backup_files': 1}, fields=['name', 'frequency', 'backup_files'])"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "Find the configurations where automatic backups are turned off.",
      "fields": [
        "name",
        "enabled"
      ]
    },
    "output": "frappe.get_list('S3 Backup Settings', filters={'enabled': 0}, fields=['name', 'enabled'])"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "Give me the secret access key used for the current S3 connection.",
      "fields": [
        "secret_access_key"
      ]
    },
    "output": "frappe.db.get_value('S3 Backup Settings', {}, 'secret_access_key')"
  },
  {
    "input": {
      "doctype": "S3 Backup Settings",
      "question": "Retrieve all backup settings that include both email notifications and file backups.",
      "fields": [
        "name",
        "send_email_for_successful_backup",
        "backup_files"
      ]
    },
    "output": "frappe.get_list('S3 Backup Settings', filters={'send_email_for_successful_backup': 1, 'backup_files': 1}, fields=['name', 'send_email_for_successful_backup', 'backup_files'])"
  },
  {
    "input": {
      "doctype": "Activity Cost",
      "question": "What is the billing rate for each activity type in our system?",
      "fields": [
        "activity_type",
        "billing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Cost', fields=['activity_type', 'billing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Cost",
      "question": "Can I check the costing rate for activities performed by employees in the marketing department?",
      "fields": [
        "employee",
        "costing_rate",
        "department"
      ]
    },
    "output": "frappe.get_all('Activity Cost', filters={'department': 'Marketing'}, fields=['employee', 'costing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Cost",
      "question": "List all activity costs along with their activity type and billing rate.",
      "fields": [
        "activity_type",
        "billing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Cost', fields=['activity_type', 'billing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Cost",
      "question": "Show me activity cost records assigned to employee John Doe.",
      "fields": [
        "employee",
        "activity_type",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Cost', filters={'employee': 'John Doe'}, fields=['activity_type', 'billing_rate', 'costing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Cost",
      "question": "I need to know which department has the highest activity costing rate.",
      "fields": [
        "department",
        "costing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Cost', fields=['department', 'costing_rate'], order_by='costing_rate desc', limit=1)"
  },
  {
    "input": {
      "doctype": "Activity Cost",
      "question": "Can you pull up all activity costs with missing employee information?",
      "fields": [
        "activity_type",
        "billing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Cost', filters={'employee': ['=', '']}, fields=['activity_type', 'billing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Cost",
      "question": "Get the billing and costing rates for all activities involving the sales team.",
      "fields": [
        "department",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Cost', filters={'department': 'Sales'}, fields=['billing_rate', 'costing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Cost",
      "question": "Do we have any activities without a defined billing rate?",
      "fields": [
        "activity_type"
      ]
    },
    "output": "frappe.get_all('Activity Cost', filters={'billing_rate': ['=', '']}, fields=['activity_type'])"
  },
  {
    "input": {
      "doctype": "Activity Cost",
      "question": "Fetch all records where activity type is 'Consulting' along with their rates.",
      "fields": [
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Cost', filters={'activity_type': 'Consulting'}, fields=['billing_rate', 'costing_rate'])"
  },
  {
    "input": {
      "doctype": "Activity Cost",
      "question": "Which employees have activities listed with both billing and costing rates?",
      "fields": [
        "employee",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.get_all('Activity Cost', filters={ 'billing_rate': ['!=', 0], 'costing_rate': ['!=', 0] }, fields=['employee'])"
  },
  {
    "input": {
      "doctype": "Activity Cost",
      "question": "I'd like a summary of activity costs grouped by department.",
      "fields": [
        "department",
        "billing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT department, SUM(billing_rate) as total_billing FROM `tabActivity Cost` GROUP BY department')"
  },
  {
    "input": {
      "doctype": "Activity Cost",
      "question": "What are the titles used in activity cost entries and their associated employees?",
      "fields": [
        "title",
        "employee"
      ]
    },
    "output": "frappe.get_all('Activity Cost', fields=['title', 'employee'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "Can I see the scorecard data for all suppliers for the current quarter?",
      "fields": [
        "supplier",
        "total_score",
        "start_date",
        "end_date"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'start_date': ['>=', frappe.utils.get_quarter_start()], 'end_date': ['<=', frappe.utils.get_quarter_end()] }, fields=['supplier', 'total_score', 'start_date', 'end_date'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "Show me which suppliers have the highest period score this year.",
      "fields": [
        "supplier",
        "total_score"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'start_date': ['>=', frappe.utils.get_year_start()] }, fields=['supplier', 'total_score'], order_by='total_score desc')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "I want to track supplier performance from January to March.",
      "fields": [
        "supplier",
        "total_score",
        "start_date",
        "end_date"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'start_date': ['>=', '2025-01-01'], 'end_date': ['<=', '2025-03-31'] }, fields=['supplier', 'total_score'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "What is the score of supplier Alpha Industries for last fiscal period?",
      "fields": [
        "supplier",
        "total_score",
        "start_date",
        "end_date"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'supplier': 'Alpha Industries' }, fields=['total_score', 'start_date', 'end_date'], order_by='end_date desc', limit=1)"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "List all suppliers who scored below 80% in the last evaluation period.",
      "fields": [
        "supplier",
        "total_score"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'total_score': ['<', 80] }, fields=['supplier', 'total_score'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "Can I review the scorecard criteria used for supplier evaluations?",
      "fields": [
        "criteria"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', fields=['criteria'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "Give me the performance details of suppliers who were evaluated using scorecard SSP-2024.",
      "fields": [
        "supplier",
        "total_score",
        "scorecard"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'scorecard': 'SSP-2024' }, fields=['supplier', 'total_score'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "Which suppliers were evaluated using custom variables this quarter?",
      "fields": [
        "supplier",
        "variables"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'variables': ['!=', ''], 'start_date': ['>=', frappe.utils.get_quarter_start()] }, fields=['supplier', 'variables'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "Show me all scorecard periods that were created using the PU-SSP series.",
      "fields": [
        "supplier",
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'naming_series': ['like', 'PU-SSP%'] }, fields=['supplier', 'naming_series'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "What was the evaluation period for supplier Global Textiles in 2023?",
      "fields": [
        "supplier",
        "start_date",
        "end_date"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'supplier': 'Global Textiles', 'start_date': ['>=', '2023-01-01'], 'end_date': ['<=', '2023-12-31'] }, fields=['start_date', 'end_date'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "Retrieve the supplier scorecard period that was amended recently.",
      "fields": [
        "supplier",
        "amended_from",
        "total_score"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'amended_from': ['!=', ''] }, fields=['supplier', 'amended_from', 'total_score'], order_by='modified desc', limit=1)"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "List all suppliers along with their criteria and total scores for the latest period.",
      "fields": [
        "supplier",
        "criteria",
        "total_score"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', fields=['supplier', 'criteria', 'total_score'], order_by='end_date desc')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "Can I see the scorecard data for all suppliers for the current quarter?",
      "fields": [
        "supplier",
        "total_score",
        "start_date",
        "end_date"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'start_date': ['>=', frappe.utils.get_quarter_start()], 'end_date': ['<=', frappe.utils.get_quarter_end()] }, fields=['supplier', 'total_score', 'start_date', 'end_date'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "Show me which suppliers have the highest period score this year.",
      "fields": [
        "supplier",
        "total_score"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'start_date': ['>=', frappe.utils.get_year_start()] }, fields=['supplier', 'total_score'], order_by='total_score desc')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "I want to track supplier performance from January to March.",
      "fields": [
        "supplier",
        "total_score",
        "start_date",
        "end_date"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'start_date': ['>=', '2025-01-01'], 'end_date': ['<=', '2025-03-31'] }, fields=['supplier', 'total_score'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "What is the score of supplier Alpha Industries for last fiscal period?",
      "fields": [
        "supplier",
        "total_score",
        "start_date",
        "end_date"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'supplier': 'Alpha Industries' }, fields=['total_score', 'start_date', 'end_date'], order_by='end_date desc', limit=1)"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "List all suppliers who scored below 80% in the last evaluation period.",
      "fields": [
        "supplier",
        "total_score"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'total_score': ['<', 80] }, fields=['supplier', 'total_score'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "Can I review the scorecard criteria used for supplier evaluations?",
      "fields": [
        "criteria"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', fields=['criteria'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "Give me the performance details of suppliers who were evaluated using scorecard SSP-2024.",
      "fields": [
        "supplier",
        "total_score",
        "scorecard"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'scorecard': 'SSP-2024' }, fields=['supplier', 'total_score'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "Which suppliers were evaluated using custom variables this quarter?",
      "fields": [
        "supplier",
        "variables"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'variables': ['!=', ''], 'start_date': ['>=', frappe.utils.get_quarter_start()] }, fields=['supplier', 'variables'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "Show me all scorecard periods that were created using the PU-SSP series.",
      "fields": [
        "supplier",
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'naming_series': ['like', 'PU-SSP%'] }, fields=['supplier', 'naming_series'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "What was the evaluation period for supplier Global Textiles in 2023?",
      "fields": [
        "supplier",
        "start_date",
        "end_date"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'supplier': 'Global Textiles', 'start_date': ['>=', '2023-01-01'], 'end_date': ['<=', '2023-12-31'] }, fields=['start_date', 'end_date'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "Retrieve the supplier scorecard period that was amended recently.",
      "fields": [
        "supplier",
        "amended_from",
        "total_score"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', filters={ 'amended_from': ['!=', ''] }, fields=['supplier', 'amended_from', 'total_score'], order_by='modified desc', limit=1)"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Period",
      "question": "List all suppliers along with their criteria and total scores for the latest period.",
      "fields": [
        "supplier",
        "criteria",
        "total_score"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Period', fields=['supplier', 'criteria', 'total_score'], order_by='end_date desc')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Criteria",
      "question": "How many scorecard criteria are currently defined in the system?",
      "fields": []
    },
    "output": "frappe.db.count('Supplier Scorecard Scoring Criteria')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Criteria",
      "question": "List all criteria names with their maximum scores.",
      "fields": [
        "criteria_name",
        "max_score"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Criteria', fields=['criteria_name', 'max_score'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Criteria",
      "question": "Which scoring criteria have a weight greater than 25?",
      "fields": [
        "criteria_name",
        "weight"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Criteria', filters={'weight': ['>', 25]}, fields=['criteria_name', 'weight'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Criteria",
      "question": "Get the formula for scoring compliance evaluation.",
      "fields": [
        "formula"
      ]
    },
    "output": "frappe.db.get_value('Supplier Scorecard Scoring Criteria', {'criteria_name': 'Compliance'}, 'formula')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Criteria",
      "question": "Fetch the weight and max score for the 'quality assurance' criterion.",
      "fields": [
        "weight",
        "max_score"
      ]
    },
    "output": "frappe.db.get_value('Supplier Scorecard Scoring Criteria', {'criteria_name': 'Quality Assurance'}, ['weight', 'max_score'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Criteria",
      "question": "Show all scoring formulas currently defined.",
      "fields": [
        "criteria_name",
        "formula"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Criteria', fields=['criteria_name', 'formula'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Criteria",
      "question": "How many criteria have no score or weight assigned?",
      "fields": [
        "score",
        "weight"
      ]
    },
    "output": "frappe.db.count('Supplier Scorecard Scoring Criteria', {'score': 0, 'weight': 0})"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Criteria",
      "question": "Get the current score for the 'delivery timeliness' criterion.",
      "fields": [
        "score"
      ]
    },
    "output": "frappe.db.get_value('Supplier Scorecard Scoring Criteria', {'criteria_name': 'Delivery Timeliness'}, 'score')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Criteria",
      "question": "List criteria with scores above 80.",
      "fields": [
        "criteria_name",
        "score"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Criteria', filters={'score': ['>', 80]}, fields=['criteria_name', 'score'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Criteria",
      "question": "Show me the criterion that has the highest weight.",
      "fields": [
        "criteria_name",
        "weight"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Criteria', fields=['criteria_name', 'weight'], order_by='weight desc', limit=1)"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Criteria",
      "question": "List all scorecard metrics and their assigned weights.",
      "fields": [
        "criteria_name",
        "weight"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Scoring Criteria', fields=['criteria_name', 'weight'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Criteria",
      "question": "Retrieve complete details of the 'Product Quality' scoring criterion.",
      "fields": [
        "criteria_name",
        "score",
        "weight",
        "max_score",
        "formula"
      ]
    },
    "output": "frappe.get_doc('Supplier Scorecard Scoring Criteria', 'Product Quality')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Criteria",
      "question": "Find all scoring criteria with a max score below 50.",
      "fields": [
        "criteria_name",
        "max_score"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Criteria', filters={'max_score': ['<', 50]}, fields=['criteria_name', 'max_score'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Criteria",
      "question": "Give me the name and formula of all active scoring criteria.",
      "fields": [
        "criteria_name",
        "formula"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Scoring Criteria', fields=['criteria_name', 'formula'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Criteria",
      "question": "Which scoring criteria have score exactly 0?",
      "fields": [
        "criteria_name",
        "score"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Criteria', filters={'score': 0}, fields=['criteria_name', 'score'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Criteria",
      "question": "Get all scorecard criteria with formula containing the word 'average'.",
      "fields": [
        "criteria_name",
        "formula"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Criteria', filters={'formula': ['like', '%average%']}, fields=['criteria_name', 'formula'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Criteria",
      "question": "How many scoring criteria have weight above 30?",
      "fields": [
        "weight"
      ]
    },
    "output": "frappe.db.count('Supplier Scorecard Scoring Criteria', {'weight': ['>', 30]})"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Criteria",
      "question": "Fetch all scorecard criteria names with their current score values.",
      "fields": [
        "criteria_name",
        "score"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Criteria', fields=['criteria_name', 'score'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Criteria",
      "question": "Find the criterion that contributes most to the final supplier score based on weight.",
      "fields": [
        "criteria_name",
        "weight"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Criteria', fields=['criteria_name', 'weight'], order_by='weight desc', limit=1)"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Criteria",
      "question": "List all criteria with their scores and weights for evaluation this month.",
      "fields": [
        "criteria_name",
        "score",
        "weight"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Criteria', fields=['criteria_name', 'score', 'weight'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "List all variable names used in the supplier scorecard setup.",
      "fields": [
        "variable_label"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Variable', fields=['variable_label'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Get the value assigned to the 'on-time performance' scoring variable.",
      "fields": [
        "value"
      ]
    },
    "output": "frappe.db.get_value('Supplier Scorecard Scoring Variable', {'variable_label': 'On-Time Performance'}, 'value')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "How many variables are defined for supplier performance scoring?",
      "fields": []
    },
    "output": "frappe.db.count('Supplier Scorecard Scoring Variable')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "List all scoring variable labels along with their paths.",
      "fields": [
        "variable_label",
        "path"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Variable', fields=['variable_label', 'path'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Fetch the full record for the variable 'Delivery Delay'.",
      "fields": [
        "variable_label",
        "description",
        "value",
        "param_name",
        "path"
      ]
    },
    "output": "frappe.get_doc('Supplier Scorecard Scoring Variable', 'Delivery Delay')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Show the parameter names and values used in the last supplier evaluation.",
      "fields": [
        "param_name",
        "value"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Scoring Variable', fields=['param_name', 'value'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "How many variables use 'variance' in their parameter name?",
      "fields": [
        "param_name"
      ]
    },
    "output": "frappe.db.count('Supplier Scorecard Scoring Variable', {'param_name': ['like', '%variance%']})"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Get the path for the scoring variable named 'Defect Rate'.",
      "fields": [
        "path"
      ]
    },
    "output": "frappe.db.get_value('Supplier Scorecard Scoring Variable', {'variable_label': 'Defect Rate'}, 'path')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "List all variable labels and descriptions.",
      "fields": [
        "variable_label",
        "description"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Variable', fields=['variable_label', 'description'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Retrieve the full document for the variable 'Compliance Score'.",
      "fields": [
        "variable_label",
        "value",
        "param_name",
        "description",
        "path"
      ]
    },
    "output": "frappe.get_doc('Supplier Scorecard Scoring Variable', 'Compliance Score')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Give me variable labels where the description is empty.",
      "fields": [
        "variable_label",
        "description"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Variable', filters={'description': ['in', [null, '']]}, fields=['variable_label', 'description'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Get scoring variables where path contains 'timeliness'.",
      "fields": [
        "variable_label",
        "path"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Variable', filters={'path': ['like', '%timeliness%']}, fields=['variable_label', 'path'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Fetch the latest scoring variables with values.",
      "fields": [
        "variable_label",
        "value"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Scoring Variable', fields=['variable_label', 'value'], order_by='modified desc', limit=5)"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Find the variables used for evaluating supplier responsiveness.",
      "fields": [
        "variable_label",
        "description"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Variable', filters={'description': ['like', '%responsiveness%']}, fields=['variable_label', 'description'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Retrieve the complete details of the variable 'Return Rate'.",
      "fields": [
        "variable_label",
        "value",
        "description",
        "path",
        "param_name"
      ]
    },
    "output": "frappe.get_doc('Supplier Scorecard Scoring Variable', 'Return Rate')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Show variables whose value is between 20 and 60.",
      "fields": [
        "variable_label",
        "value"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Variable', filters={'value': ['between', [20, 60]]}, fields=['variable_label', 'value'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Which variables reference 'Sunrise Ltd' in their description?",
      "fields": [
        "variable_label",
        "description"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Variable', filters={'description': ['like', '%Sunrise Ltd%']}, fields=['variable_label', 'description'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "List scoring variables with parameter names and values.",
      "fields": [
        "param_name",
        "value"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Scoring Variable', fields=['param_name', 'value'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Give me all scoring variables where value exceeds 80.",
      "fields": [
        "variable_label",
        "value"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Variable', filters={'value': ['>', 80]}, fields=['variable_label', 'value'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Variable",
      "question": "List all variable labels used in supplier scorecards.",
      "fields": [
        "variable_label"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Variable', fields=['variable_label'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Variable",
      "question": "Get the parameter name for the variable 'Lead Time'.",
      "fields": [
        "param_name"
      ]
    },
    "output": "frappe.db.get_value('Supplier Scorecard Variable', {'variable_label': 'Lead Time'}, 'param_name')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Variable",
      "question": "Count how many scorecard variables are defined.",
      "fields": []
    },
    "output": "frappe.db.count('Supplier Scorecard Variable')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Variable",
      "question": "Show me all custom variables in the supplier scorecard.",
      "fields": [
        "variable_label",
        "is_custom"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Variable', filters={'is_custom': 1}, fields=['variable_label', 'is_custom'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Variable",
      "question": "Retrieve the complete record for the 'On-Time Delivery' variable.",
      "fields": [
        "variable_label",
        "param_name",
        "path",
        "is_custom",
        "description"
      ]
    },
    "output": "frappe.get_doc('Supplier Scorecard Variable', 'On-Time Delivery')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Variable",
      "question": "Get all variable labels and their paths.",
      "fields": [
        "variable_label",
        "path"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Variable', fields=['variable_label', 'path'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Variable",
      "question": "Which variables don\u2019t have any descriptions?",
      "fields": [
        "variable_label",
        "description"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Variable', filters={'description': ['in', [null, '']]}, fields=['variable_label', 'description'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Variable",
      "question": "Give me all standard variables that are not marked as custom.",
      "fields": [
        "variable_label",
        "is_custom"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Variable', filters={'is_custom': 0}, fields=['variable_label', 'is_custom'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Variable",
      "question": "Find the variable used to calculate supplier quality score.",
      "fields": [
        "variable_label",
        "description"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Variable', filters={'description': ['like', '%quality score%']}, fields=['variable_label', 'description'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Variable",
      "question": "Retrieve all variables along with path and parameter name.",
      "fields": [
        "variable_label",
        "path",
        "param_name"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Variable', fields=['variable_label', 'path', 'param_name'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Variable",
      "question": "Get the full details of the variable 'Defect Rate'.",
      "fields": [
        "variable_label",
        "description",
        "param_name",
        "path",
        "is_custom"
      ]
    },
    "output": "frappe.get_doc('Supplier Scorecard Variable', 'Defect Rate')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Variable",
      "question": "Which variables include 'timeliness' in the path?",
      "fields": [
        "variable_label",
        "path"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Variable', filters={'path': ['like', '%timeliness%']}, fields=['variable_label', 'path'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Variable",
      "question": "How many variables have 'supplier' in their description?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.count('Supplier Scorecard Variable', {'description': ['like', '%supplier%']})"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Variable",
      "question": "Give me all scorecard variables and their descriptions.",
      "fields": [
        "variable_label",
        "description"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Variable', fields=['variable_label', 'description'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Variable",
      "question": "List all parameter names used in scorecard variables.",
      "fields": [
        "param_name"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Variable', fields=['param_name'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Variable",
      "question": "Fetch all variable labels that relate to lead time.",
      "fields": [
        "variable_label",
        "description"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Variable', filters={'description': ['like', '%lead time%']}, fields=['variable_label', 'description'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Variable",
      "question": "Retrieve full document of the variable labeled 'Compliance'.",
      "fields": [
        "variable_label",
        "param_name",
        "description",
        "path",
        "is_custom"
      ]
    },
    "output": "frappe.get_doc('Supplier Scorecard Variable', 'Compliance')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Variable",
      "question": "Which variables contain 'delivery' in their path?",
      "fields": [
        "variable_label",
        "path"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Variable', filters={'path': ['like', '%delivery%']}, fields=['variable_label', 'path'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Variable",
      "question": "Give me the parameter name for 'Cost Efficiency' variable.",
      "fields": [
        "param_name"
      ]
    },
    "output": "frappe.db.get_value('Supplier Scorecard Variable', {'variable_label': 'Cost Efficiency'}, 'param_name')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard",
      "question": "List all suppliers with their current status and scores.",
      "fields": [
        "supplier",
        "status",
        "supplier_score"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard', fields=['supplier', 'status', 'supplier_score'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard",
      "question": "How many suppliers have been evaluated this quarter?",
      "fields": []
    },
    "output": "frappe.db.count('Supplier Scorecard')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard",
      "question": "Get the scoring setup used for supplier 'FreshMart Pvt Ltd'.",
      "fields": [
        "scoring_setup"
      ]
    },
    "output": "frappe.db.get_value('Supplier Scorecard', {'supplier': 'FreshMart Pvt Ltd'}, 'scoring_setup')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard",
      "question": "Fetch the scorecard document for supplier 'Green Supplies Co'.",
      "fields": [
        "supplier",
        "supplier_score",
        "status",
        "period",
        "criteria"
      ]
    },
    "output": "frappe.get_doc('Supplier Scorecard', 'Green Supplies Co')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard",
      "question": "Which suppliers are flagged to prevent both RFQs and POs?",
      "fields": [
        "supplier",
        "prevent_rfqs",
        "prevent_pos"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard', filters={'prevent_rfqs': 1, 'prevent_pos': 1}, fields=['supplier', 'prevent_rfqs', 'prevent_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard",
      "question": "List suppliers with monthly evaluation period.",
      "fields": [
        "supplier",
        "period"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard', filters={'period': 'Monthly'}, fields=['supplier', 'period'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard",
      "question": "Who are the employees notified when supplier scores drop?",
      "fields": [
        "supplier",
        "employee",
        "notify_employee"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard', filters={'notify_employee': 1}, fields=['supplier', 'employee'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard",
      "question": "Which suppliers have RFQs blocked based on scorecard?",
      "fields": [
        "supplier",
        "prevent_rfqs"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard', filters={'prevent_rfqs': 1}, fields=['supplier', 'prevent_rfqs'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard",
      "question": "Get full scorecard for 'Alpha Metals Ltd'.",
      "fields": [
        "supplier",
        "supplier_score",
        "criteria_setup",
        "standings"
      ]
    },
    "output": "frappe.get_doc('Supplier Scorecard', 'Alpha Metals Ltd')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard",
      "question": "Find suppliers with custom weighting functions in use.",
      "fields": [
        "supplier",
        "weighting_function"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard', filters={'weighting_function': ['!=', '']}, fields=['supplier', 'weighting_function'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard",
      "question": "Get a list of all active scorecards where vendors are notified.",
      "fields": [
        "supplier",
        "notify_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard', filters={'notify_supplier': 1}, fields=['supplier', 'notify_supplier'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard",
      "question": "Count the number of suppliers currently blocked from POs.",
      "fields": [
        "prevent_pos"
      ]
    },
    "output": "frappe.db.count('Supplier Scorecard', {'prevent_pos': 1})"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard",
      "question": "What is the status of 'Delta Construction Supply'?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.get_value('Supplier Scorecard', {'supplier': 'Delta Construction Supply'}, 'status')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard",
      "question": "List all supplier scorecards evaluated annually.",
      "fields": [
        "supplier",
        "period"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard', filters={'period': 'Yearly'}, fields=['supplier', 'period'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard",
      "question": "Retrieve scorecards showing standings for performance evaluations.",
      "fields": [
        "supplier",
        "standings"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard', filters={'standings': ['!=', '']}, fields=['supplier', 'standings'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard",
      "question": "List suppliers and their scorecard status indicators.",
      "fields": [
        "supplier",
        "status",
        "indicator_color"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard', fields=['supplier', 'status', 'indicator_color'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard",
      "question": "Which suppliers are warned before sending purchase orders?",
      "fields": [
        "supplier",
        "warn_pos"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard', filters={'warn_pos': 1}, fields=['supplier', 'warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard",
      "question": "Retrieve the full scorecard for 'Industrial Tools Co'.",
      "fields": [
        "supplier",
        "supplier_score",
        "criteria",
        "scoring_setup"
      ]
    },
    "output": "frappe.get_doc('Supplier Scorecard', 'Industrial Tools Co')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard",
      "question": "List suppliers with status set as 'Under Review'.",
      "fields": [
        "supplier",
        "status"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard', filters={'status': 'Under Review'}, fields=['supplier', 'status'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard",
      "question": "Which suppliers are prevented from both RFQs and warned on POs?",
      "fields": [
        "supplier",
        "prevent_rfqs",
        "warn_pos"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard', filters={'prevent_rfqs': 1, 'warn_pos': 1}, fields=['supplier', 'prevent_rfqs', 'warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Standing",
      "question": "List all supplier standings with their color codes.",
      "fields": [
        "standing_name",
        "standing_color"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Standing', fields=['standing_name', 'standing_color'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Standing",
      "question": "Which standings have 'green' as their standing color?",
      "fields": [
        "standing_name",
        "standing_color"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Standing', filters={'standing_color': 'Green'}, fields=['standing_name', 'standing_color'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Standing",
      "question": "Count how many scorecard standings prevent both RFQs and POs.",
      "fields": []
    },
    "output": "frappe.db.count('Supplier Scorecard Standing', {'prevent_rfqs': 1, 'prevent_pos': 1})"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Standing",
      "question": "Get full details of the standing named 'At Risk'.",
      "fields": [
        "standing_name",
        "standing_color",
        "min_grade",
        "max_grade"
      ]
    },
    "output": "frappe.get_doc('Supplier Scorecard Standing', 'At Risk')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Standing",
      "question": "Which standings have notification for employees enabled?",
      "fields": [
        "standing_name",
        "notify_employee"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Standing', filters={'notify_employee': 1}, fields=['standing_name', 'notify_employee'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Standing",
      "question": "List scorecard standings where min grade is above 80%.",
      "fields": [
        "standing_name",
        "min_grade"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Standing', filters={'min_grade': ['>', 80]}, fields=['standing_name', 'min_grade'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Standing",
      "question": "Get min and max grade ranges for each standing.",
      "fields": [
        "standing_name",
        "min_grade",
        "max_grade"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Standing', fields=['standing_name', 'min_grade', 'max_grade'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Standing",
      "question": "Who is the employee linked to 'Low Priority' standing?",
      "fields": [
        "employee_link"
      ]
    },
    "output": "frappe.db.get_value('Supplier Scorecard Standing', {'standing_name': 'Low Priority'}, 'employee_link')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Standing",
      "question": "Find standings where RFQs are only warned, not blocked.",
      "fields": [
        "standing_name",
        "warn_rfqs",
        "prevent_rfqs"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Standing', filters={'warn_rfqs': 1, 'prevent_rfqs': 0}, fields=['standing_name', 'warn_rfqs', 'prevent_rfqs'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Standing",
      "question": "Show all standings that have supplier notifications enabled.",
      "fields": [
        "standing_name",
        "notify_supplier"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Standing', filters={'notify_supplier': 1}, fields=['standing_name', 'notify_supplier'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Standing",
      "question": "Get the full record of standing called 'Critical Risk'.",
      "fields": [
        "standing_name",
        "min_grade",
        "max_grade",
        "prevent_pos"
      ]
    },
    "output": "frappe.get_doc('Supplier Scorecard Standing', 'Critical Risk')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Standing",
      "question": "Which standings show red color and low grades?",
      "fields": [
        "standing_name",
        "standing_color",
        "min_grade"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Standing', filters={'standing_color': 'Red'}, fields=['standing_name', 'standing_color', 'min_grade'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Standing",
      "question": "Get all standings with both warn_pos and prevent_pos off.",
      "fields": [
        "standing_name",
        "warn_pos",
        "prevent_pos"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Standing', filters={'warn_pos': 0, 'prevent_pos': 0}, fields=['standing_name', 'warn_pos', 'prevent_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Standing",
      "question": "How many total standings are currently defined?",
      "fields": []
    },
    "output": "frappe.db.count('Supplier Scorecard Standing')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Standing",
      "question": "Get the employee notified for 'Yellow' standing level.",
      "fields": [
        "employee_link"
      ]
    },
    "output": "frappe.db.get_value('Supplier Scorecard Standing', {'standing_color': 'Yellow'}, 'employee_link')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Standing",
      "question": "List standings that prevent RFQs but not POs.",
      "fields": [
        "standing_name",
        "prevent_rfqs",
        "prevent_pos"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Standing', filters={'prevent_rfqs': 1, 'prevent_pos': 0}, fields=['standing_name', 'prevent_rfqs', 'prevent_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Standing",
      "question": "Get standings that trigger employee alerts.",
      "fields": [
        "standing_name",
        "notify_employee",
        "employee_link"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Standing', filters={'notify_employee': 1}, fields=['standing_name', 'employee_link'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Standing",
      "question": "Which standings show warning for POs but not prevention?",
      "fields": [
        "standing_name",
        "warn_pos",
        "prevent_pos"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Standing', filters={'warn_pos': 1, 'prevent_pos': 0}, fields=['standing_name', 'warn_pos', 'prevent_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Standing",
      "question": "Get the full details of the standing 'Preferred Supplier'.",
      "fields": [
        "standing_name",
        "standing_color",
        "min_grade",
        "notify_supplier"
      ]
    },
    "output": "frappe.get_doc('Supplier Scorecard Standing', 'Preferred Supplier')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Standing",
      "question": "List all scorecard standings with their min and max grades.",
      "fields": [
        "standing_name",
        "min_grade",
        "max_grade"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Standing', fields=['standing_name', 'min_grade', 'max_grade'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Standing",
      "question": "Get the employee linked to 'Critical Risk' standing.",
      "fields": [
        "employee_link"
      ]
    },
    "output": "frappe.db.get_value('Supplier Scorecard Scoring Standing', {'standing_name': 'Critical Risk'}, 'employee_link')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Standing",
      "question": "Count how many standings have red color and prevent POs.",
      "fields": []
    },
    "output": "frappe.db.count('Supplier Scorecard Scoring Standing', {'standing_color': 'Red', 'prevent_pos': 1})"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Standing",
      "question": "Show me standings where RFQs are warned but not blocked.",
      "fields": [
        "standing_name",
        "warn_rfqs",
        "prevent_rfqs"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Standing', filters={'warn_rfqs': 1, 'prevent_rfqs': 0}, fields=['standing_name', 'warn_rfqs', 'prevent_rfqs'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Standing",
      "question": "Fetch all standings with green color and max grade \u2264 90%.",
      "fields": [
        "standing_name",
        "standing_color",
        "max_grade"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Standing', filters={'standing_color': 'Green', 'max_grade': ['<=', 90]}, fields=['standing_name', 'standing_color', 'max_grade'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Standing",
      "question": "Retrieve full record for 'At Risk' standing.",
      "fields": [
        "standing_name",
        "min_grade",
        "max_grade",
        "standing_color",
        "prevent_pos"
      ]
    },
    "output": "frappe.get_doc('Supplier Scorecard Scoring Standing', 'At Risk')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Standing",
      "question": "Which standings have notifications enabled for employees?",
      "fields": [
        "standing_name",
        "notify_employee"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Standing', filters={'notify_employee': 1}, fields=['standing_name', 'notify_employee'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Standing",
      "question": "List all standings that trigger supplier notifications.",
      "fields": [
        "standing_name",
        "notify_supplier"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Standing', filters={'notify_supplier': 1}, fields=['standing_name', 'notify_supplier'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Standing",
      "question": "Which standings have a minimum grade above 85%?",
      "fields": [
        "standing_name",
        "min_grade"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Standing', filters={'min_grade': ['>', 85]}, fields=['standing_name', 'min_grade'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Standing",
      "question": "List standings with yellow, orange, or red colors.",
      "fields": [
        "standing_name",
        "standing_color"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Standing', filters={'standing_color': ['in', ['Yellow', 'Orange', 'Red']]}, fields=['standing_name', 'standing_color'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Standing",
      "question": "Get scorecard standings that prevent RFQs.",
      "fields": [
        "standing_name",
        "prevent_rfqs"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Standing', filters={'prevent_rfqs': 1}, fields=['standing_name', 'prevent_rfqs'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Standing",
      "question": "Fetch all standings with no warnings or blocks on RFQs/POs.",
      "fields": [
        "standing_name",
        "warn_rfqs",
        "warn_pos",
        "prevent_rfqs",
        "prevent_pos"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Standing', filters={'warn_rfqs': 0, 'warn_pos': 0, 'prevent_rfqs': 0, 'prevent_pos': 0}, fields=['standing_name', 'warn_rfqs', 'warn_pos', 'prevent_rfqs', 'prevent_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Standing",
      "question": "How many total supplier scorecard standings are configured?",
      "fields": []
    },
    "output": "frappe.db.count('Supplier Scorecard Scoring Standing')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Standing",
      "question": "Show me standings where blue color is assigned and there are no restrictions.",
      "fields": [
        "standing_name",
        "standing_color",
        "warn_rfqs",
        "prevent_rfqs",
        "warn_pos",
        "prevent_pos"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Standing', filters={'standing_color': 'Blue', 'warn_rfqs': 0, 'prevent_rfqs': 0, 'warn_pos': 0, 'prevent_pos': 0}, fields=['standing_name', 'standing_color'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Standing",
      "question": "Retrieve standings that block purchase orders and have red color.",
      "fields": [
        "standing_name",
        "prevent_pos",
        "standing_color"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Standing', filters={'prevent_pos': 1, 'standing_color': 'Red'}, fields=['standing_name', 'prevent_pos', 'standing_color'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Standing",
      "question": "Get complete record for the standing 'Preferred Partner'.",
      "fields": [
        "standing_name",
        "min_grade",
        "max_grade",
        "notify_employee",
        "notify_supplier"
      ]
    },
    "output": "frappe.get_doc('Supplier Scorecard Scoring Standing', 'Preferred Partner')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Standing",
      "question": "List scorecard standings with employee notification set.",
      "fields": [
        "standing_name",
        "employee_link"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Scoring Standing', filters={'notify_employee': 1}, fields=['standing_name', 'employee_link'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Standing",
      "question": "Which standings use a red indicator and warn on POs?",
      "fields": [
        "standing_name",
        "standing_color",
        "warn_pos"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Scoring Standing', filters={'standing_color': 'Red', 'warn_pos': 1}, fields=['standing_name', 'standing_color', 'warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Standing",
      "question": "Give me all standings that prevent both RFQs and POs.",
      "fields": [
        "standing_name",
        "prevent_rfqs",
        "prevent_pos"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Scoring Standing', filters={'prevent_rfqs': 1, 'prevent_pos': 1}, fields=['standing_name', 'prevent_rfqs', 'prevent_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "List all variable labels and parameter names used for supplier evaluation.",
      "fields": [
        "variable_label",
        "param_name"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Variable', fields=['variable_label', 'param_name'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Show all scoring variables with missing values.",
      "fields": [
        "variable_label",
        "value"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Variable', filters={'value': ['is', 'null']}, fields=['variable_label', 'value'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Count the number of scoring variables currently in the system.",
      "fields": []
    },
    "output": "frappe.db.count('Supplier Scorecard Scoring Variable')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "What is the value for the variable labeled 'On-Time Delivery Rate'?",
      "fields": [
        "value"
      ]
    },
    "output": "frappe.db.get_value('Supplier Scorecard Scoring Variable', {'variable_label': 'On-Time Delivery Rate'}, 'value')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Get all variables with the word 'variance' in their path.",
      "fields": [
        "variable_label",
        "path"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Variable', filters={'path': ['like', '%variance%']}, fields=['variable_label', 'path'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Retrieve the full document for 'Lead Time Delay Variable'.",
      "fields": [
        "variable_label",
        "description",
        "value",
        "param_name",
        "path"
      ]
    },
    "output": "frappe.get_doc('Supplier Scorecard Scoring Variable', 'Lead Time Delay Variable')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Fetch all scoring variables associated with the supplier 'Sunrise Ltd'.",
      "fields": [
        "variable_label",
        "param_name",
        "value"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Variable', filters={'supplier': 'Sunrise Ltd'}, fields=['variable_label', 'param_name', 'value'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "List the parameter names and paths of all scoring variables.",
      "fields": [
        "param_name",
        "path"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Variable', fields=['param_name', 'path'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Retrieve all custom scoring variables with their descriptions.",
      "fields": [
        "variable_label",
        "description"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Variable', filters={'description': ['!=', '']}, fields=['variable_label', 'description'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Get scoring variables where value is greater than 80.",
      "fields": [
        "variable_label",
        "value"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Variable', filters={'value': ['>', 80]}, fields=['variable_label', 'value'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "How many variables have a path defined but no value?",
      "fields": []
    },
    "output": "frappe.db.count('Supplier Scorecard Scoring Variable', {'path': ['!=', ''], 'value': ['is', 'null']})"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Fetch the full variable document labeled 'Quality Defect Rate'.",
      "fields": [
        "variable_label",
        "description",
        "value",
        "param_name",
        "path"
      ]
    },
    "output": "frappe.get_doc('Supplier Scorecard Scoring Variable', 'Quality Defect Rate')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Which variables contain the word 'delivery' in their parameter name?",
      "fields": [
        "variable_label",
        "param_name"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Variable', filters={'param_name': ['like', '%delivery%']}, fields=['variable_label', 'param_name'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "List variables with blank descriptions.",
      "fields": [
        "variable_label",
        "description"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Variable', filters={'description': ''}, fields=['variable_label', 'description'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Show all supplier scoring variables and their values.",
      "fields": [
        "variable_label",
        "value"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Scoring Variable', fields=['variable_label', 'value'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "What path is set for the variable 'Defect Ratio'?",
      "fields": [
        "path"
      ]
    },
    "output": "frappe.db.get_value('Supplier Scorecard Scoring Variable', {'variable_label': 'Defect Ratio'}, 'path')"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Get all variables used to track supplier lead time.",
      "fields": [
        "variable_label",
        "path"
      ]
    },
    "output": "frappe.get_all('Supplier Scorecard Scoring Variable', filters={'path': ['like', '%lead_time%']}, fields=['variable_label', 'path'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Retrieve variables having defined paths but empty values.",
      "fields": [
        "variable_label",
        "path",
        "value"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Variable', filters={'path': ['!=', ''], 'value': ['is', 'null']}, fields=['variable_label', 'path', 'value'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Which scoring variables include 'compliance' in their label?",
      "fields": [
        "variable_label"
      ]
    },
    "output": "frappe.get_list('Supplier Scorecard Scoring Variable', filters={'variable_label': ['like', '%compliance%']}, fields=['variable_label'])"
  },
  {
    "input": {
      "doctype": "Supplier Scorecard Scoring Variable",
      "question": "Show the complete document for the variable 'Late Invoice Ratio'.",
      "fields": [
        "variable_label",
        "description",
        "value",
        "param_name",
        "path"
      ]
    },
    "output": "frappe.get_doc('Supplier Scorecard Scoring Variable', 'Late Invoice Ratio')"
  },
  {
    "input": {
      "doctype": "Homepage Section Card",
      "question": "List all homepage section cards with their titles and subtitles.",
      "fields": [
        "title",
        "subtitle"
      ]
    },
    "output": "frappe.get_list('Homepage Section Card', fields=['title', 'subtitle'])"
  },
  {
    "input": {
      "doctype": "Homepage Section Card",
      "question": "Count how many homepage section cards are configured.",
      "fields": []
    },
    "output": "frappe.db.count('Homepage Section Card')"
  },
  {
    "input": {
      "doctype": "Homepage Section Card",
      "question": "Which card has the title 'Sales Overview'?",
      "fields": [
        "subtitle"
      ]
    },
    "output": "frappe.db.get_value('Homepage Section Card', {'title': 'Sales Overview'}, 'subtitle')"
  },
  {
    "input": {
      "doctype": "Homepage Section Card",
      "question": "Fetch all cards that have route links defined.",
      "fields": [
        "title",
        "route"
      ]
    },
    "output": "frappe.get_list('Homepage Section Card', filters={'route': ['!=', '']}, fields=['title', 'route'])"
  },
  {
    "input": {
      "doctype": "Homepage Section Card",
      "question": "Get homepage section cards with both title and content fields filled.",
      "fields": [
        "title",
        "content"
      ]
    },
    "output": "frappe.get_list('Homepage Section Card', filters={'content': ['!=', '']}, fields=['title', 'content'])"
  },
  {
    "input": {
      "doctype": "Homepage Section Card",
      "question": "Retrieve all homepage cards that include an image.",
      "fields": [
        "title",
        "image"
      ]
    },
    "output": "frappe.get_list('Homepage Section Card', filters={'image': ['!=', '']}, fields=['title', 'image'])"
  },
  {
    "input": {
      "doctype": "Homepage Section Card",
      "question": "Fetch details for the homepage card titled 'Featured Products'.",
      "fields": [
        "title",
        "subtitle",
        "route",
        "image",
        "content"
      ]
    },
    "output": "frappe.get_doc('Homepage Section Card', 'Featured Products')"
  },
  {
    "input": {
      "doctype": "Homepage Section Card",
      "question": "How many cards have no route defined?",
      "fields": []
    },
    "output": "frappe.db.count('Homepage Section Card', {'route': ''})"
  },
  {
    "input": {
      "doctype": "Homepage Section Card",
      "question": "Get all homepage cards that contain the word 'Dashboard' in title.",
      "fields": [
        "title",
        "route"
      ]
    },
    "output": "frappe.get_list('Homepage Section Card', filters={'title': ['like', '%Dashboard%']}, fields=['title', 'route'])"
  },
  {
    "input": {
      "doctype": "Homepage Section Card",
      "question": "Show me all cards with subtitles containing the word 'Report'.",
      "fields": [
        "title",
        "subtitle"
      ]
    },
    "output": "frappe.get_list('Homepage Section Card', filters={'subtitle': ['like', '%Report%']}, fields=['title', 'subtitle'])"
  },
  {
    "input": {
      "doctype": "Homepage Section Card",
      "question": "Get the card where the route is '/sales-dashboard'.",
      "fields": [
        "title"
      ]
    },
    "output": "frappe.db.get_value('Homepage Section Card', {'route': '/sales-dashboard'}, 'title')"
  },
  {
    "input": {
      "doctype": "Homepage Section Card",
      "question": "Fetch cards that have both a subtitle and image set.",
      "fields": [
        "title",
        "subtitle",
        "image"
      ]
    },
    "output": "frappe.get_list('Homepage Section Card', filters={'subtitle': ['!=', ''], 'image': ['!=', '']}, fields=['title', 'subtitle', 'image'])"
  },
  {
    "input": {
      "doctype": "Homepage Section Card",
      "question": "Retrieve the full document for 'Analytics Overview' homepage card.",
      "fields": [
        "title",
        "subtitle",
        "image",
        "route",
        "content"
      ]
    },
    "output": "frappe.get_doc('Homepage Section Card', 'Analytics Overview')"
  },
  {
    "input": {
      "doctype": "Homepage Section Card",
      "question": "Get homepage cards sorted by title alphabetically.",
      "fields": [
        "title"
      ]
    },
    "output": "frappe.get_all('Homepage Section Card', fields=['title'], order_by='title asc')"
  },
  {
    "input": {
      "doctype": "Homepage Section Card",
      "question": "List all card titles with route links starting with '/app/'.",
      "fields": [
        "title",
        "route"
      ]
    },
    "output": "frappe.get_list('Homepage Section Card', filters={'route': ['like', '/app/%']}, fields=['title', 'route'])"
  },
  {
    "input": {
      "doctype": "Homepage Section Card",
      "question": "Fetch all cards with content containing the word 'summary'.",
      "fields": [
        "title",
        "content"
      ]
    },
    "output": "frappe.get_list('Homepage Section Card', filters={'content': ['like', '%summary%']}, fields=['title', 'content'])"
  },
  {
    "input": {
      "doctype": "Homepage Section Card",
      "question": "Which cards include an image but have no subtitle?",
      "fields": [
        "title",
        "image",
        "subtitle"
      ]
    },
    "output": "frappe.get_list('Homepage Section Card', filters={'image': ['!=', ''], 'subtitle': ''}, fields=['title', 'image'])"
  },
  {
    "input": {
      "doctype": "Homepage Section Card",
      "question": "Show all cards that have both title and subtitle fields filled.",
      "fields": [
        "title",
        "subtitle"
      ]
    },
    "output": "frappe.get_all('Homepage Section Card', filters={'title': ['!=', ''], 'subtitle': ['!=', '']}, fields=['title', 'subtitle'])"
  },
  {
    "input": {
      "doctype": "Homepage Section Card",
      "question": "Get the homepage card record for 'Operations Summary'.",
      "fields": [
        "title",
        "subtitle",
        "image",
        "route",
        "content"
      ]
    },
    "output": "frappe.get_doc('Homepage Section Card', 'Operations Summary')"
  },
  {
    "input": {
      "doctype": "Homepage Section Card",
      "question": "Fetch all homepage cards with route fields defined and content not empty.",
      "fields": [
        "title",
        "route",
        "content"
      ]
    },
    "output": "frappe.get_all('Homepage Section Card', filters={'route': ['!=', ''], 'content': ['!=', '']}, fields=['title', 'route', 'content'])"
  },
  {
    "input": {
      "doctype": "BOM Scrap Item",
      "question": "List all scrap item codes along with their stock quantity.",
      "fields": [
        "item_code",
        "stock_qty"
      ]
    },
    "output": "frappe.get_list('BOM Scrap Item', fields=['item_code', 'stock_qty'])"
  },
  {
    "input": {
      "doctype": "BOM Scrap Item",
      "question": "What is the rate of 'Aluminum Scrap' in the BOM?",
      "fields": [
        "rate"
      ]
    },
    "output": "frappe.db.get_value('BOM Scrap Item', {'item_name': 'Aluminum Scrap'}, 'rate')"
  },
  {
    "input": {
      "doctype": "BOM Scrap Item",
      "question": "Count how many scrap items are listed in total.",
      "fields": []
    },
    "output": "frappe.db.count('BOM Scrap Item')"
  },
  {
    "input": {
      "doctype": "BOM Scrap Item",
      "question": "Fetch the full record for scrap item 'Iron Chips'.",
      "fields": [
        "item_code",
        "item_name",
        "stock_qty",
        "rate",
        "amount",
        "stock_uom"
      ]
    },
    "output": "frappe.get_doc('BOM Scrap Item', 'Iron Chips')"
  },
  {
    "input": {
      "doctype": "BOM Scrap Item",
      "question": "List all BOM scrap items where base rate is greater than 5.",
      "fields": [
        "item_code",
        "base_rate"
      ]
    },
    "output": "frappe.get_list('BOM Scrap Item', filters={'base_rate': ['>', 5]}, fields=['item_code', 'base_rate'])"
  },
  {
    "input": {
      "doctype": "BOM Scrap Item",
      "question": "Get scrap items with base amount above 100.",
      "fields": [
        "item_code",
        "base_amount"
      ]
    },
    "output": "frappe.get_list('BOM Scrap Item', filters={'base_amount': ['>', 100]}, fields=['item_code', 'base_amount'])"
  },
  {
    "input": {
      "doctype": "BOM Scrap Item",
      "question": "Fetch scrap item names that contain the word 'scrap'.",
      "fields": [
        "item_name"
      ]
    },
    "output": "frappe.get_list('BOM Scrap Item', filters={'item_name': ['like', '%scrap%']}, fields=['item_name'])"
  },
  {
    "input": {
      "doctype": "BOM Scrap Item",
      "question": "How many scrap items have a quantity over 10 units?",
      "fields": []
    },
    "output": "frappe.db.count('BOM Scrap Item', {'stock_qty': ['>', 10]})"
  },
  {
    "input": {
      "doctype": "BOM Scrap Item",
      "question": "Get the base rate for scrap item code 'SCRP-0003'.",
      "fields": [
        "base_rate"
      ]
    },
    "output": "frappe.db.get_value('BOM Scrap Item', {'item_code': 'SCRP-0003'}, 'base_rate')"
  },
  {
    "input": {
      "doctype": "BOM Scrap Item",
      "question": "Fetch full document for item code 'SCRP-0021'.",
      "fields": [
        "item_code",
        "item_name",
        "stock_qty",
        "rate",
        "amount",
        "base_rate",
        "base_amount",
        "stock_uom"
      ]
    },
    "output": "frappe.get_doc('BOM Scrap Item', 'SCRP-0021')"
  },
  {
    "input": {
      "doctype": "BOM Scrap Item",
      "question": "List all scrap items with amount less than 50.",
      "fields": [
        "item_code",
        "amount"
      ]
    },
    "output": "frappe.get_list('BOM Scrap Item', filters={'amount': ['<', 50]}, fields=['item_code', 'amount'])"
  },
  {
    "input": {
      "doctype": "BOM Scrap Item",
      "question": "Get all scrap items in 'kg' unit of measure.",
      "fields": [
        "item_code",
        "stock_uom"
      ]
    },
    "output": "frappe.get_list('BOM Scrap Item', filters={'stock_uom': 'kg'}, fields=['item_code', 'stock_uom'])"
  },
  {
    "input": {
      "doctype": "BOM Scrap Item",
      "question": "Show me the scrap quantities for item code 'SCRP-0090'.",
      "fields": [
        "stock_qty"
      ]
    },
    "output": "frappe.get_list('BOM Scrap Item', filters={'item_code': 'SCRP-0090'}, fields=['stock_qty'])"
  },
  {
    "input": {
      "doctype": "BOM Scrap Item",
      "question": "Retrieve base amount and rate for all scrap items.",
      "fields": [
        "item_code",
        "base_rate",
        "base_amount"
      ]
    },
    "output": "frappe.get_list('BOM Scrap Item', fields=['item_code', 'base_rate', 'base_amount'])"
  },
  {
    "input": {
      "doctype": "BOM Scrap Item",
      "question": "Fetch all items categorized under 'non-reusable materials'.",
      "fields": [
        "item_code",
        "item_name"
      ]
    },
    "output": "frappe.get_all('BOM Scrap Item', filters={'item_name': ['like', '%non-reusable%']}, fields=['item_code', 'item_name'])"
  },
  {
    "input": {
      "doctype": "BOM Scrap Item",
      "question": "Give me the list of scrap items for BOM-0043.",
      "fields": [
        "item_code",
        "stock_qty",
        "rate"
      ]
    },
    "output": "frappe.get_all('BOM Scrap Item', filters={'parent': 'BOM-0043'}, fields=['item_code', 'stock_qty', 'rate'])"
  },
  {
    "input": {
      "doctype": "BOM Scrap Item",
      "question": "Fetch items from BOMs configured to send scrap to Warehouse-S1.",
      "fields": [
        "item_code",
        "item_name"
      ]
    },
    "output": "frappe.get_list('BOM Scrap Item', filters={'item_name': ['like', '%Warehouse-S1%']}, fields=['item_code', 'item_name'])"
  },
  {
    "input": {
      "doctype": "BOM Scrap Item",
      "question": "What scrap items were generated during the last BOM update?",
      "fields": [
        "item_code",
        "item_name",
        "stock_qty"
      ]
    },
    "output": "frappe.get_all('BOM Scrap Item', fields=['item_code', 'item_name', 'stock_qty'])"
  },
  {
    "input": {
      "doctype": "BOM Scrap Item",
      "question": "Retrieve the full document for scrap item code 'SCRP-0010'.",
      "fields": [
        "item_code",
        "item_name",
        "stock_qty",
        "rate",
        "amount",
        "base_rate",
        "base_amount",
        "stock_uom"
      ]
    },
    "output": "frappe.get_doc('BOM Scrap Item', 'SCRP-0010')"
  },
  {
    "input": {
      "doctype": "BOM Scrap Item",
      "question": "Get the rate and quantity of 'Steel Scrap' in the BOM.",
      "fields": [
        "rate",
        "stock_qty"
      ]
    },
    "output": "frappe.get_list('BOM Scrap Item', filters={'item_name': 'Steel Scrap'}, fields=['rate', 'stock_qty'])"
  },
  {
    "input": {
      "doctype": "Tax Withheld Vouchers",
      "question": "List all vouchers that had tax withheld last month.",
      "fields": [
        "voucher_type",
        "voucher_name",
        "taxable_amount"
      ]
    },
    "output": "frappe.get_list('Tax Withheld Vouchers', filters={'posting_date': ['between', ['2024-04-01', '2024-04-30']]}, fields=['voucher_type', 'voucher_name', 'taxable_amount'])"
  },
  {
    "input": {
      "doctype": "Tax Withheld Vouchers",
      "question": "Count the number of withheld tax vouchers in this quarter.",
      "fields": []
    },
    "output": "frappe.db.count('Tax Withheld Vouchers', {'posting_date': ['between', ['2024-04-01', '2024-06-30']]})"
  },
  {
    "input": {
      "doctype": "Tax Withheld Vouchers",
      "question": "Fetch all vouchers with taxable amount greater than 5000.",
      "fields": [
        "voucher_name",
        "taxable_amount"
      ]
    },
    "output": "frappe.get_list('Tax Withheld Vouchers', filters={'taxable_amount': ['>', 5000]}, fields=['voucher_name', 'taxable_amount'])"
  },
  {
    "input": {
      "doctype": "Tax Withheld Vouchers",
      "question": "Get the taxable amount for voucher INV-0456.",
      "fields": [
        "taxable_amount"
      ]
    },
    "output": "frappe.db.get_value('Tax Withheld Vouchers', {'voucher_name': 'INV-0456'}, 'taxable_amount')"
  },
  {
    "input": {
      "doctype": "Tax Withheld Vouchers",
      "question": "Get all withheld tax vouchers for client payments.",
      "fields": [
        "voucher_name",
        "taxable_amount"
      ]
    },
    "output": "frappe.get_list('Tax Withheld Vouchers', filters={'voucher_type': 'Client Payment'}, fields=['voucher_name', 'taxable_amount'])"
  },
  {
    "input": {
      "doctype": "Tax Withheld Vouchers",
      "question": "Fetch all vouchers for which tax was withheld from Sales Invoices.",
      "fields": [
        "voucher_name",
        "voucher_type"
      ]
    },
    "output": "frappe.get_list('Tax Withheld Vouchers', filters={'voucher_type': 'Sales Invoice'}, fields=['voucher_name', 'voucher_type'])"
  },
  {
    "input": {
      "doctype": "Tax Withheld Vouchers",
      "question": "Was any tax withheld on Purchase Invoice PI-1005?",
      "fields": [
        "voucher_name",
        "taxable_amount"
      ]
    },
    "output": "frappe.get_list('Tax Withheld Vouchers', filters={'voucher_name': 'PI-1005'}, fields=['voucher_name', 'taxable_amount'])"
  },
  {
    "input": {
      "doctype": "Tax Withheld Vouchers",
      "question": "Get all vouchers for supplier payments this week.",
      "fields": [
        "voucher_name",
        "voucher_type",
        "taxable_amount"
      ]
    },
    "output": "frappe.get_list('Tax Withheld Vouchers', filters={'voucher_type': 'Supplier Payment', 'posting_date': ['between', ['2025-05-01', '2025-05-07']]}, fields=['voucher_name', 'voucher_type', 'taxable_amount'])"
  },
  {
    "input": {
      "doctype": "Tax Withheld Vouchers",
      "question": "Retrieve taxable amount for voucher PV-2023-88.",
      "fields": [
        "taxable_amount"
      ]
    },
    "output": "frappe.db.get_value('Tax Withheld Vouchers', {'voucher_name': 'PV-2023-88'}, 'taxable_amount')"
  },
  {
    "input": {
      "doctype": "Tax Withheld Vouchers",
      "question": "Fetch vouchers where tax was withheld for April 2024.",
      "fields": [
        "voucher_name",
        "voucher_type"
      ]
    },
    "output": "frappe.get_all('Tax Withheld Vouchers', filters={'posting_date': ['between', ['2024-04-01', '2024-04-30']]}, fields=['voucher_name', 'voucher_type'])"
  },
  {
    "input": {
      "doctype": "Tax Withheld Vouchers",
      "question": "Get full document for withheld tax voucher INV-0456.",
      "fields": [
        "voucher_name",
        "voucher_type",
        "taxable_amount"
      ]
    },
    "output": "frappe.get_doc('Tax Withheld Vouchers', 'INV-0456')"
  },
  {
    "input": {
      "doctype": "Tax Withheld Vouchers",
      "question": "Show vouchers that had taxable amount declared for withholding.",
      "fields": [
        "voucher_name",
        "taxable_amount"
      ]
    },
    "output": "frappe.get_list('Tax Withheld Vouchers', filters={'taxable_amount': ['>', 0]}, fields=['voucher_name', 'taxable_amount'])"
  },
  {
    "input": {
      "doctype": "Tax Withheld Vouchers",
      "question": "How much tax was withheld for the March invoice?",
      "fields": [
        "taxable_amount"
      ]
    },
    "output": "frappe.get_list('Tax Withheld Vouchers', filters={'posting_date': ['between', ['2024-03-01', '2024-03-31']]}, fields=['voucher_name', 'taxable_amount'])"
  },
  {
    "input": {
      "doctype": "Tax Withheld Vouchers",
      "question": "List vouchers with taxable amount between 1,000 and 5,000.",
      "fields": [
        "voucher_name",
        "taxable_amount"
      ]
    },
    "output": "frappe.get_list('Tax Withheld Vouchers', filters={'taxable_amount': ['between', [1000, 5000]]}, fields=['voucher_name', 'taxable_amount'])"
  },
  {
    "input": {
      "doctype": "Tax Withheld Vouchers",
      "question": "Get all vouchers where withholding occurred on supplier payouts.",
      "fields": [
        "voucher_name",
        "voucher_type"
      ]
    },
    "output": "frappe.get_list('Tax Withheld Vouchers', filters={'voucher_type': 'Supplier Payment'}, fields=['voucher_name', 'voucher_type'])"
  },
  {
    "input": {
      "doctype": "Tax Withheld Vouchers",
      "question": "Get list of vouchers for withholding on client payments.",
      "fields": [
        "voucher_name",
        "voucher_type"
      ]
    },
    "output": "frappe.get_list('Tax Withheld Vouchers', filters={'voucher_type': 'Client Payment'}, fields=['voucher_name', 'voucher_type'])"
  },
  {
    "input": {
      "doctype": "Tax Withheld Vouchers",
      "question": "Retrieve document for tax withheld voucher PV-2023-88.",
      "fields": [
        "voucher_name",
        "voucher_type",
        "taxable_amount"
      ]
    },
    "output": "frappe.get_doc('Tax Withheld Vouchers', 'PV-2023-88')"
  },
  {
    "input": {
      "doctype": "Tax Withheld Vouchers",
      "question": "Fetch full record for voucher PI-1005.",
      "fields": [
        "voucher_name",
        "voucher_type",
        "taxable_amount"
      ]
    },
    "output": "frappe.get_doc('Tax Withheld Vouchers', 'PI-1005')"
  },
  {
    "input": {
      "doctype": "Tax Withheld Vouchers",
      "question": "Get all vouchers with withheld tax above 10,000.",
      "fields": [
        "voucher_name",
        "taxable_amount"
      ]
    },
    "output": "frappe.get_all('Tax Withheld Vouchers', filters={'taxable_amount': ['>', 10000]}, fields=['voucher_name', 'taxable_amount'])"
  },
  {
    "input": {
      "doctype": "Tax Withheld Vouchers",
      "question": "List all vouchers with withholding between Jan and Mar 2024.",
      "fields": [
        "voucher_name",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Tax Withheld Vouchers', filters={'posting_date': ['between', ['2024-01-01', '2024-03-31']]}, fields=['voucher_name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Token Cache",
      "question": "Which user has an access token stored in the system?",
      "fields": [
        "user",
        "access_token"
      ]
    },
    "output": "frappe.get_list('Token Cache', filters={'access_token': ['not', '=']}, fields=['user', 'access_token'])"
  },
  {
    "input": {
      "doctype": "Token Cache",
      "question": "List all entries with a refresh token available.",
      "fields": [
        "user",
        "refresh_token"
      ]
    },
    "output": "frappe.get_list('Token Cache', filters={'refresh_token': ['not', '=']}, fields=['user', 'refresh_token'])"
  },
  {
    "input": {
      "doctype": "Token Cache",
      "question": "Find all token entries where provider name is Google.",
      "fields": [
        "user",
        "provider_name"
      ]
    },
    "output": "frappe.get_list('Token Cache', filters={'provider_name': 'Google'}, fields=['user', 'provider_name'])"
  },
  {
    "input": {
      "doctype": "Token Cache",
      "question": "Check token states saved for different users in the cache.",
      "fields": [
        "user",
        "state"
      ]
    },
    "output": "frappe.get_list('Token Cache', fields=['user', 'state'])"
  },
  {
    "input": {
      "doctype": "Token Cache",
      "question": "I want to check the expiry duration of all access tokens.",
      "fields": [
        "user",
        "expires_in"
      ]
    },
    "output": "frappe.get_list('Token Cache', fields=['user', 'expires_in'])"
  },
  {
    "input": {
      "doctype": "Token Cache",
      "question": "Give me a list of token cache entries where token type is 'Bearer'.",
      "fields": [
        "user",
        "token_type"
      ]
    },
    "output": "frappe.get_list('Token Cache', filters={'token_type': 'Bearer'}, fields=['user', 'token_type'])"
  },
  {
    "input": {
      "doctype": "Token Cache",
      "question": "Who has an active token with provider name 'Facebook'?",
      "fields": [
        "user",
        "provider_name"
      ]
    },
    "output": "frappe.get_list('Token Cache', filters={'provider_name': 'Facebook'}, fields=['user', 'provider_name'])"
  },
  {
    "input": {
      "doctype": "Token Cache",
      "question": "Can I get the list of token types saved in the system?",
      "fields": [
        "token_type"
      ]
    },
    "output": "frappe.get_list('Token Cache', fields=['token_type'])"
  },
  {
    "input": {
      "doctype": "Token Cache",
      "question": "How many token cache records are stored currently?",
      "fields": []
    },
    "output": "frappe.db.count('Token Cache')"
  },
  {
    "input": {
      "doctype": "Token Cache",
      "question": "Show me the connected apps and tokens linked to John Doe.",
      "fields": [
        "connected_app",
        "access_token"
      ]
    },
    "output": "frappe.get_list('Token Cache', filters={'user': 'John Doe'}, fields=['connected_app', 'access_token'])"
  },
  {
    "input": {
      "doctype": "Token Cache",
      "question": "Which users have tokens configured with a success URI?",
      "fields": [
        "user",
        "success_uri"
      ]
    },
    "output": "frappe.get_all('Token Cache', filters={'success_uri': ['not', '=']}, fields=['user', 'success_uri'])"
  },
  {
    "input": {
      "doctype": "Token Cache",
      "question": "Retrieve all token cache records associated with Connected App A.",
      "fields": [
        "user",
        "connected_app"
      ]
    },
    "output": "frappe.get_all('Token Cache', filters={'connected_app': 'Connected App A'}, fields=['user', 'connected_app'])"
  },
  {
    "input": {
      "doctype": "Token Cache",
      "question": "Show me token records that include scopes like email or profile.",
      "fields": [
        "user",
        "scopes"
      ]
    },
    "output": "frappe.get_all('Token Cache', filters={'scopes': ['like', '%email%']}, fields=['user', 'scopes'])"
  },
  {
    "input": {
      "doctype": "Token Cache",
      "question": "How many token entries are stored for provider Google?",
      "fields": []
    },
    "output": "frappe.db.count('Token Cache', {'provider_name': 'Google'})"
  },
  {
    "input": {
      "doctype": "Token Cache",
      "question": "Get the expiry duration for John Doe\u2019s token.",
      "fields": [
        "expires_in"
      ]
    },
    "output": "frappe.db.get_value('Token Cache', {'user': 'John Doe'}, 'expires_in')"
  },
  {
    "input": {
      "doctype": "Token Cache",
      "question": "Fetch the complete token cache entry for John Doe.",
      "fields": [
        "user",
        "connected_app",
        "provider_name",
        "access_token",
        "refresh_token",
        "expires_in",
        "state",
        "scopes",
        "success_uri",
        "token_type"
      ]
    },
    "output": "frappe.get_doc('Token Cache', 'John Doe')"
  },
  {
    "input": {
      "doctype": "Token Cache",
      "question": "Get full token record for user john@example.com.",
      "fields": [
        "user",
        "connected_app",
        "access_token",
        "expires_in"
      ]
    },
    "output": "frappe.get_doc('Token Cache', 'john@example.com')"
  },
  {
    "input": {
      "doctype": "Token Cache",
      "question": "Retrieve token cache data for user 'admin'.",
      "fields": [
        "user",
        "access_token",
        "refresh_token"
      ]
    },
    "output": "frappe.get_doc('Token Cache', 'admin')"
  },
  {
    "input": {
      "doctype": "Token Cache",
      "question": "Show the list of users who have access tokens.",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.get_list('Token Cache', filters={'access_token': ['not', '=']}, fields=['user'])"
  },
  {
    "input": {
      "doctype": "Token Cache",
      "question": "List connected apps for users with Bearer token type.",
      "fields": [
        "user",
        "connected_app"
      ]
    },
    "output": "frappe.get_list('Token Cache', filters={'token_type': 'Bearer'}, fields=['user', 'connected_app'])"
  },
  {
    "input": {
      "doctype": "Territory",
      "question": "What's the name of the territory managed by Arun?",
      "fields": [
        "territory_name",
        "territory_manager"
      ]
    },
    "output": "frappe.db.get_value('Territory', {'territory_manager': 'Arun'}, 'territory_name')"
  },
  {
    "input": {
      "doctype": "Territory",
      "question": "Which territory reports to West Zone?",
      "fields": [
        "territory_name",
        "parent_territory"
      ]
    },
    "output": "frappe.get_list('Territory', filters={'parent_territory': 'West Zone'}, fields=['territory_name', 'parent_territory'])"
  },
  {
    "input": {
      "doctype": "Territory",
      "question": "List all territories that are marked as groups.",
      "fields": [
        "territory_name",
        "is_group"
      ]
    },
    "output": "frappe.get_list('Territory', filters={'is_group': 1}, fields=['territory_name', 'is_group'])"
  },
  {
    "input": {
      "doctype": "Territory",
      "question": "Show me the left and right values for the Central region territory.",
      "fields": [
        "lft",
        "rgt"
      ]
    },
    "output": "frappe.db.get_value('Territory', {'territory_name': 'Central'}, ['lft', 'rgt'])"
  },
  {
    "input": {
      "doctype": "Territory",
      "question": "Can you find the previous parent of the 'Southwest India' territory?",
      "fields": [
        "old_parent"
      ]
    },
    "output": "frappe.db.get_value('Territory', {'territory_name': 'Southwest India'}, 'old_parent')"
  },
  {
    "input": {
      "doctype": "Territory",
      "question": "Is East India a parent territory or part of another territory?",
      "fields": [
        "parent_territory"
      ]
    },
    "output": "frappe.db.get_value('Territory', {'territory_name': 'East India'}, 'parent_territory')"
  },
  {
    "input": {
      "doctype": "Territory",
      "question": "Which territories have assigned managers?",
      "fields": [
        "territory_name",
        "territory_manager"
      ]
    },
    "output": "frappe.get_list('Territory', filters={'territory_manager': ['not', '=']}, fields=['territory_name', 'territory_manager'])"
  },
  {
    "input": {
      "doctype": "Territory",
      "question": "Find all territories under 'India' that are not groups.",
      "fields": [
        "territory_name",
        "parent_territory",
        "is_group"
      ]
    },
    "output": "frappe.get_list('Territory', filters={'parent_territory': 'India', 'is_group': 0}, fields=['territory_name'])"
  },
  {
    "input": {
      "doctype": "Territory",
      "question": "I want to see all target details linked to the territory 'North Zone'.",
      "fields": [
        "targets"
      ]
    },
    "output": "frappe.get_doc('Territory', 'North Zone').targets"
  },
  {
    "input": {
      "doctype": "Territory",
      "question": "Get the hierarchy position (lft and rgt) for the territory named 'Asia'.",
      "fields": [
        "lft",
        "rgt"
      ]
    },
    "output": "frappe.get_doc('Territory', 'Asia')"
  },
  {
    "input": {
      "doctype": "Territory",
      "question": "Does 'Uttar Pradesh' territory belong to any parent group?",
      "fields": [
        "parent_territory"
      ]
    },
    "output": "frappe.get_doc('Territory', 'Uttar Pradesh').parent_territory"
  },
  {
    "input": {
      "doctype": "Territory",
      "question": "Which territory is managed by the sales person Rajeev?",
      "fields": [
        "territory_name",
        "territory_manager"
      ]
    },
    "output": "frappe.get_doc('Territory', {'territory_manager': 'Rajeev'})"
  },
  {
    "input": {
      "doctype": "Territory",
      "question": "List all territories that belong to the Asia group.",
      "fields": [
        "territory_name",
        "parent_territory"
      ]
    },
    "output": "frappe.get_all('Territory', filters={'parent_territory': 'Asia'}, fields=['territory_name'])"
  },
  {
    "input": {
      "doctype": "Territory",
      "question": "Count the total number of territory groups defined.",
      "fields": []
    },
    "output": "frappe.db.count('Territory', {'is_group': 1})"
  },
  {
    "input": {
      "doctype": "Territory",
      "question": "Count how many territories do not belong to any parent.",
      "fields": []
    },
    "output": "frappe.db.count('Territory', {'parent_territory': ['is', 'not set']})"
  },
  {
    "input": {
      "doctype": "Territory",
      "question": "Show me all territories that are leaf nodes (not groups).",
      "fields": [
        "territory_name",
        "is_group"
      ]
    },
    "output": "frappe.get_all('Territory', filters={'is_group': 0}, fields=['territory_name'])"
  },
  {
    "input": {
      "doctype": "Territory",
      "question": "Get all fields for the territory record 'South India'.",
      "fields": [
        "territory_name",
        "parent_territory",
        "is_group",
        "territory_manager",
        "lft",
        "rgt",
        "old_parent",
        "targets"
      ]
    },
    "output": "frappe.get_doc('Territory', 'South India')"
  },
  {
    "input": {
      "doctype": "Territory",
      "question": "Find all territories that changed their parent in the last update.",
      "fields": [
        "territory_name",
        "old_parent"
      ]
    },
    "output": "frappe.get_list('Territory', filters={'old_parent': ['not', '=']}, fields=['territory_name', 'old_parent'])"
  },
  {
    "input": {
      "doctype": "Territory",
      "question": "Get all parent-child mappings of territories.",
      "fields": [
        "territory_name",
        "parent_territory"
      ]
    },
    "output": "frappe.get_all('Territory', fields=['territory_name', 'parent_territory'])"
  },
  {
    "input": {
      "doctype": "Territory",
      "question": "List all territories where no manager is assigned.",
      "fields": [
        "territory_name",
        "territory_manager"
      ]
    },
    "output": "frappe.get_list('Territory', filters={'territory_manager': ['is', 'not set']}, fields=['territory_name'])"
  },
  {
    "input": {
      "doctype": "Target Detail",
      "question": "How can I define yearly sales targets for different item groups?",
      "fields": [
        "item_group",
        "fiscal_year",
        "target_qty",
        "target_amount"
      ]
    },
    "output": "frappe.get_list('Target Detail', fields=['item_group', 'fiscal_year', 'target_qty', 'target_amount'])"
  },
  {
    "input": {
      "doctype": "Target Detail",
      "question": "Where do I set the sales target quantity for a specific fiscal year?",
      "fields": [
        "item_group",
        "fiscal_year",
        "target_qty"
      ]
    },
    "output": "frappe.get_list('Target Detail', filters={'fiscal_year': '2024-2025'}, fields=['item_group', 'target_qty'])"
  },
  {
    "input": {
      "doctype": "Target Detail",
      "question": "Which form lets me link item groups with monthly distribution targets?",
      "fields": [
        "item_group",
        "distribution_id"
      ]
    },
    "output": "frappe.get_all('Target Detail', filters={'distribution_id': ['not', '=']}, fields=['item_group', 'distribution_id'])"
  },
  {
    "input": {
      "doctype": "Target Detail",
      "question": "How do I assign a target amount to an item group for this fiscal year?",
      "fields": [
        "item_group",
        "fiscal_year",
        "target_amount"
      ]
    },
    "output": "frappe.get_doc('Target Detail', {'item_group': 'Electronics', 'fiscal_year': '2024-2025'})"
  },
  {
    "input": {
      "doctype": "Target Detail",
      "question": "Where do I record item-wise targets for a sales team?",
      "fields": [
        "item_group",
        "fiscal_year",
        "target_qty",
        "target_amount"
      ]
    },
    "output": "frappe.get_list('Target Detail', fields=['item_group', 'target_qty', 'target_amount'])"
  },
  {
    "input": {
      "doctype": "Target Detail",
      "question": "I want to set both quantity and value-based targets for product categories. What doctype should I use?",
      "fields": [
        "item_group",
        "target_qty",
        "target_amount"
      ]
    },
    "output": "frappe.get_all('Target Detail', fields=['item_group', 'target_qty', 'target_amount'])"
  },
  {
    "input": {
      "doctype": "Target Detail",
      "question": "How can I track monthly distribution against yearly item group targets?",
      "fields": [
        "item_group",
        "distribution_id",
        "target_qty",
        "fiscal_year"
      ]
    },
    "output": "frappe.get_list('Target Detail', fields=['item_group', 'distribution_id', 'target_qty', 'fiscal_year'])"
  },
  {
    "input": {
      "doctype": "Target Detail",
      "question": "Where can I map fiscal year targets to specific item groups?",
      "fields": [
        "fiscal_year",
        "item_group"
      ]
    },
    "output": "frappe.get_list('Target Detail', fields=['fiscal_year', 'item_group'])"
  },
  {
    "input": {
      "doctype": "Target Detail",
      "question": "How do I specify monthly target allocation for a fiscal year?",
      "fields": [
        "distribution_id",
        "fiscal_year"
      ]
    },
    "output": "frappe.get_all('Target Detail', filters={'fiscal_year': '2024-2025'}, fields=['distribution_id'])"
  },
  {
    "input": {
      "doctype": "Target Detail",
      "question": "Is there a way to plan targets by item group and spread them over months?",
      "fields": [
        "item_group",
        "distribution_id"
      ]
    },
    "output": "frappe.get_all('Target Detail', filters={'distribution_id': ['not', '=']}, fields=['item_group', 'distribution_id'])"
  },
  {
    "input": {
      "doctype": "Target Detail",
      "question": "Can I use the same monthly distribution for multiple item groups\u2019 targets?",
      "fields": [
        "distribution_id"
      ]
    },
    "output": "frappe.db.count('Target Detail', {'distribution_id': 'Monthly-2024'})"
  },
  {
    "input": {
      "doctype": "Target Detail",
      "question": "How do I manage fiscal year targets by value and quantity for products?",
      "fields": [
        "item_group",
        "fiscal_year",
        "target_qty",
        "target_amount"
      ]
    },
    "output": "frappe.get_doc('Target Detail', {'item_group': 'Home Appliances', 'fiscal_year': '2024-2025'})"
  },
  {
    "input": {
      "doctype": "Target Detail",
      "question": "Show me all item groups with target quantities defined.",
      "fields": [
        "item_group",
        "target_qty"
      ]
    },
    "output": "frappe.get_list('Target Detail', filters={'target_qty': ['>', 0]}, fields=['item_group', 'target_qty'])"
  },
  {
    "input": {
      "doctype": "Target Detail",
      "question": "What is the target amount for 'Mobile Phones' in 2023-24?",
      "fields": [
        "item_group",
        "fiscal_year",
        "target_amount"
      ]
    },
    "output": "frappe.db.get_value('Target Detail', {'item_group': 'Mobile Phones', 'fiscal_year': '2023-2024'}, 'target_amount')"
  },
  {
    "input": {
      "doctype": "Target Detail",
      "question": "How many item groups have defined targets for the year 2024?",
      "fields": [
        "fiscal_year"
      ]
    },
    "output": "frappe.db.count('Target Detail', {'fiscal_year': '2024-2025'})"
  },
  {
    "input": {
      "doctype": "Target Detail",
      "question": "Get full details of the target set for 'Laptops' in this fiscal year.",
      "fields": [
        "item_group",
        "fiscal_year",
        "target_qty",
        "target_amount",
        "distribution_id"
      ]
    },
    "output": "frappe.get_doc('Target Detail', {'item_group': 'Laptops', 'fiscal_year': '2024-2025'})"
  },
  {
    "input": {
      "doctype": "Target Detail",
      "question": "List all fiscal years where targets have been assigned.",
      "fields": [
        "fiscal_year"
      ]
    },
    "output": "frappe.get_all('Target Detail', fields=['fiscal_year'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Target Detail",
      "question": "Find item groups that share the same monthly distribution ID.",
      "fields": [
        "item_group",
        "distribution_id"
      ]
    },
    "output": "frappe.get_list('Target Detail', filters={'distribution_id': 'Monthly-2024'}, fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Target Detail",
      "question": "Where do I find target details assigned to the 'Furniture' item group?",
      "fields": [
        "item_group",
        "target_qty",
        "target_amount",
        "fiscal_year"
      ]
    },
    "output": "frappe.get_doc('Target Detail', {'item_group': 'Furniture'})"
  },
  {
    "input": {
      "doctype": "Target Detail",
      "question": "Show target quantity for 'Printers' in the year 2024-25.",
      "fields": [
        "item_group",
        "fiscal_year",
        "target_qty"
      ]
    },
    "output": "frappe.db.get_value('Target Detail', {'item_group': 'Printers', 'fiscal_year': '2024-2025'}, 'target_qty')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "What is the document type linked to advance entry ADV-9668?",
      "fields": [
        "reference_type"
      ]
    },
    "output": "frappe.db.get_value('Purchase Invoice Advance', {'name': 'ADV-9668'}, 'reference_type')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "List the reference types used in advance payments made this month.",
      "fields": [
        "reference_type"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'posting_date': ['between', ['2024-04-01', '2024-04-30']]}, fields=['reference_type'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Which advance entries are connected to a 'Purchase Invoice'?",
      "fields": [
        "reference_type"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'reference_type': 'Purchase Invoice'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Is there any advance entry linked to an 'Expense Claim'?",
      "fields": [
        "reference_type"
      ]
    },
    "output": "frappe.db.exists('Purchase Invoice Advance', {'reference_type': 'Expense Claim'})"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "What reference types are most common in supplier advance payments?",
      "fields": [
        "reference_type"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', fields=['reference_type'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Find the reference type associated with the latest advance payment record.",
      "fields": [
        "reference_type"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', fields=['reference_type'], order_by='posting_date desc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Which reference types are used for advances above QAR 10,000?",
      "fields": [
        "reference_type",
        "advance_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={ 'advance_amount': ['>', 10000] }, fields=['reference_type'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "What type of document is linked to the most recent advance entry from Falcon Supplies?",
      "fields": [
        "reference_type"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'supplier': 'Falcon Supplies'}, fields=['reference_type'], order_by='posting_date desc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Check the reference type for all advances linked to supplier 'Global Distributors'.",
      "fields": [
        "reference_type"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'supplier': 'Global Distributors'}, fields=['reference_type'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Retrieve reference types for advances posted in March 2024.",
      "fields": [
        "reference_type"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'posting_date': ['between', ['2024-03-01', '2024-03-31']]}, fields=['reference_type'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "What is the reference document linked to advance entry ADV-0041?",
      "fields": [
        "reference_name"
      ]
    },
    "output": "frappe.db.get_value('Purchase Invoice Advance', {'name': 'ADV-0041'}, 'reference_name')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "What is the exchange gain or loss recorded for advance ADV-5001?",
      "fields": [
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.db.get_value('Purchase Invoice Advance', {'name': 'ADV-5001'}, 'exchange_gain_loss')"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "When was the exchange difference posted for advance entry SIA-0092?",
      "fields": [
        "difference_posting_date"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice Advance', {'name': 'SIA-0092'}, 'difference_posting_date')"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Show all posting dates for exchange differences recorded in 2023.",
      "fields": [
        "difference_posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={ 'difference_posting_date': ['between', ['2023-01-01', '2023-12-31']] }, fields=['difference_posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "When did we last post an exchange difference adjustment?",
      "fields": [
        "difference_posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', fields=['difference_posting_date'], order_by='difference_posting_date desc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "What dates were gain/loss entries made for supplier 'Maxwell Corp'?",
      "fields": [
        "difference_posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'supplier': 'Maxwell Corp'}, fields=['difference_posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Which advance entries posted gain/loss adjustments in February 2024?",
      "fields": [
        "difference_posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={ 'difference_posting_date': ['between', ['2024-02-01', '2024-02-29']] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "List the exchange gain/loss values for all advance payments in March 2024.",
      "fields": [
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'posting_date': ['between', ['2024-03-01', '2024-03-31']]}, fields=['exchange_gain_loss'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "What exchange rate was applied to document PINV-0452?",
      "fields": [
        "ref_exchange_rate"
      ]
    },
    "output": "frappe.db.get_value('Purchase Invoice Advance', {'reference_name': 'PINV-0452'}, 'ref_exchange_rate')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Show the reference exchange rate for the latest advance entry.",
      "fields": [
        "ref_exchange_rate"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', fields=['ref_exchange_rate'], order_by='posting_date desc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "What exchange rates were used for advances posted last month?",
      "fields": [
        "ref_exchange_rate"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'posting_date': ['between', ['2024-04-01', '2024-04-30']]}, fields=['ref_exchange_rate'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "What was the exchange rate for the advance entry ADV-0030?",
      "fields": [
        "ref_exchange_rate"
      ]
    },
    "output": "frappe.db.get_value('Purchase Invoice Advance', {'name': 'ADV-0030'}, 'ref_exchange_rate')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Find exchange rates used in all April 2024 supplier advances.",
      "fields": [
        "ref_exchange_rate"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'posting_date': ['between', ['2024-04-01', '2024-04-30']]}, fields=['ref_exchange_rate'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Retrieve exchange rates where allocated amount exceeded QAR 1000.",
      "fields": [
        "ref_exchange_rate",
        "allocated_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={ 'allocated_amount': ['>', 1000] }, fields=['ref_exchange_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "What is the reference type linked to the advance record SIA-2025-0001?",
      "fields": [
        "reference_type"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice Advance', {'name': 'SIA-2025-0001'}, 'reference_type')"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Show me the document type connected with advance entry SIA-3023.",
      "fields": [
        "reference_type"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice Advance', {'name': 'SIA-3023'}, 'reference_type')"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "What kind of document is the advance associated with in record ADV-SINV-047?",
      "fields": [
        "reference_type"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice Advance', {'name': 'ADV-SINV-047'}, 'reference_type')"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Provide the type of reference document for the advance SIA-8005.",
      "fields": [
        "reference_type"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice Advance', {'name': 'SIA-8005'}, 'reference_type')"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "For entry SIA-7613, what is the document type it is linked to?",
      "fields": [
        "reference_type"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice Advance', {'name': 'SIA-7613'}, 'reference_type')"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Which document type is most frequently associated with sales advance payments?",
      "fields": [
        "reference_type"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', fields=['reference_type'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "What document types are recorded for advances posted last quarter?",
      "fields": [
        "reference_type"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'posting_date': ['between', ['2024-01-01', '2024-03-31']]}, fields=['reference_type'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Find out whether any advances are linked to 'Sales Order'.",
      "fields": [
        "reference_type"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice Advance', {'reference_type': 'Sales Order'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Get the reference type of the most recent advance linked to Orion Tech.",
      "fields": [
        "reference_type"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'customer': 'Orion Tech'}, fields=['reference_type'], order_by='posting_date desc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "List remarks from advances posted with an amount greater than QAR 5,000.",
      "fields": [
        "remarks",
        "advance_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'advance_amount': ['>', 5000]}, fields=['remarks'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "For which advances was 'final adjustment' noted in the remarks field?",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'remarks': ['like', '%final adjustment%']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Show remarks added to the most recent advance received from Greenwave Ltd.",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'customer': 'Greenwave Ltd.'}, fields=['remarks'], order_by='posting_date desc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Which records include remarks containing the word 'reallocation'?",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'remarks': ['like', '%reallocation%']}, fields=['remarks'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Pull all remarks associated with document SINV-2088 advances.",
      "fields": [
        "remarks",
        "reference_name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'reference_name': 'SINV-2088'}, fields=['remarks'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Show the reference row used in the advance record SINVADV-5503.",
      "fields": [
        "reference_row"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice Advance', {'name': 'SINVADV-5503'}, 'reference_row')"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Which row of the original invoice is linked to advance SINVADV-2029?",
      "fields": [
        "reference_row"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice Advance', {'name': 'SINVADV-2029'}, 'reference_row')"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Get all advances that reference line number 2 in their invoices.",
      "fields": [
        "reference_row"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'reference_row': 2}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "For invoice SINV-8891, which line item is this advance linked to?",
      "fields": [
        "reference_row",
        "reference_name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'reference_name': 'SINV-8891'}, fields=['reference_row'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Show the row index linked to the advance for document SINV-3001.",
      "fields": [
        "reference_row",
        "reference_name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'reference_name': 'SINV-3001'}, fields=['reference_row'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "What is the advance amount paid under entry SINVADV-3407?",
      "fields": [
        "advance_amount"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice Advance', {'name': 'SINVADV-3407'}, 'advance_amount')"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Which advances recorded any exchange rate gain or loss?",
      "fields": [
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={ 'exchange_gain_loss': ['!=', 0] }, fields=['name', 'exchange_gain_loss'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Show the currency exchange difference for entry SIA-3245.",
      "fields": [
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice Advance', {'name': 'SIA-3245'}, 'exchange_gain_loss')"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Find entries with exchange gain/loss above QAR 500.",
      "fields": [
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={ 'exchange_gain_loss': ['>', 500] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Retrieve gain/loss on currency for foreign advances in Q4 2023.",
      "fields": [
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={ 'posting_date': ['between', ['2023-10-01', '2023-12-31']] }, fields=['exchange_gain_loss'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "What's the exchange loss recorded for customer Teal Spire Retail?",
      "fields": [
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={ 'customer': 'Teal Spire Retail' }, fields=['exchange_gain_loss'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Which entries have zero allocated amounts?",
      "fields": [
        "allocated_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'allocated_amount': 0}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Identify records where allocated amount is greater than QAR 20,000.",
      "fields": [
        "allocated_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'allocated_amount': ['>', 20000]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "What\u2019s the total allocated amount across all customer advances in Q1 2024?",
      "fields": [
        "allocated_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'posting_date': ['between', ['2024-01-01', '2024-03-31']]}, fields=['allocated_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "For entry ADV-4567, what value has been allocated so far?",
      "fields": [
        "allocated_amount"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice Advance', {'name': 'ADV-4567'}, 'allocated_amount')"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "What is the total allocated advance amount made by \u2018Nexa Distributors\u2019?",
      "fields": [
        "allocated_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'customer': 'Nexa Distributors'}, fields=['allocated_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "What portion of advance has been allocated in entry SINVADV-2217?",
      "fields": [
        "allocated_amount"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice Advance', {'name': 'SINVADV-2217'}, 'allocated_amount')"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "List all entries where allocated amount is less than QAR 5,000.",
      "fields": [
        "allocated_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'allocated_amount': ['<', 5000]}, fields=['name', 'allocated_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "What is the average allocated amount for all advances in March 2024?",
      "fields": [
        "allocated_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'posting_date': ['between', ['2024-03-01', '2024-03-31']]}, fields=['allocated_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Which advance entries had full allocation matching the total advance amount?",
      "fields": [
        "allocated_amount",
        "advance_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'allocated_amount': ['!=', 0]}, fields=['name', 'advance_amount', 'allocated_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "What is the allocated amount for the advance referencing SINV-4401?",
      "fields": [
        "allocated_amount",
        "reference_name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'reference_name': 'SINV-4401'}, fields=['allocated_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Show advance payments greater than QAR 25,000.",
      "fields": [
        "advance_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'advance_amount': ['>', 25000]}, fields=['name', 'advance_amount'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "What is the start date of the stock balance for document CSB-00023?",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.db.get_value('Closing Stock Balance', {'name': 'CSB-00023'}, 'from_date')"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "What is the closing date for the stock report CSB-0031?",
      "fields": [
        "to_date"
      ]
    },
    "output": "frappe.db.get_value('Closing Stock Balance', {'name': 'CSB-0031'}, 'to_date')"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Is the unit of measurement shown in report CSB-0485?",
      "fields": [
        "include_uom"
      ]
    },
    "output": "frappe.db.get_value('Closing Stock Balance', {'name': 'CSB-0485'}, 'include_uom')"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "List reports where UOM inclusion is disabled.",
      "fields": [
        "include_uom"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'include_uom': 0}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Which reports include the unit of measurement column?",
      "fields": [
        "include_uom"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'include_uom': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Find the UOM inclusion flag for the report submitted on 2024-04-01.",
      "fields": [
        "include_uom"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'from_date': '2024-04-01'}, fields=['include_uom'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "What type of warehouse stores the closing stock for item 'ITEM-1009'?",
      "fields": [
        "warehouse_type",
        "item_code"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'item_code': 'ITEM-1009'}, fields=['warehouse_type'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Which warehouse types are used for items in the 'Electronics' group?",
      "fields": [
        "warehouse_type",
        "item_group"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'item_group': 'Electronics'}, fields=['warehouse_type'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Fetch the warehouse type for stock record CSB-1024.",
      "fields": [
        "warehouse_type"
      ]
    },
    "output": "frappe.db.get_value('Closing Stock Balance', {'name': 'CSB-1024'}, 'warehouse_type')"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Show warehouse types used for all closing stock entries created after April 1, 2024.",
      "fields": [
        "warehouse_type",
        "from_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'from_date': ['>', '2024-04-01']}, fields=['warehouse_type'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "List all warehouse types used by 'Tech Distributors Ltd'.",
      "fields": [
        "warehouse_type",
        "company"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'company': 'Tech Distributors Ltd'}, fields=['warehouse_type'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Which warehouse type is most commonly used across all warehouses?",
      "fields": [
        "warehouse_type",
        "warehouse"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', fields=['warehouse_type'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Which stock balance entries are amendments of previous records?",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'amended_from': ['!=', '']}, fields=['name', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Get amendment source document for CSB-0035.",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.db.get_value('Closing Stock Balance', {'name': 'CSB-0035'}, 'amended_from')"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "List all entries in Closing Stock Balance that were amendments.",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'amended_from': ['!=', '']}, fields=['name', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Is CSB-0221 an updated version of another stock balance document?",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.db.get_value('Closing Stock Balance', {'name': 'CSB-0221'}, 'amended_from')"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Show previous documents that were amended into current entries.",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'amended_from': ['!=', '']}, fields=['amended_from'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Find the original entry for the amended stock report CSB-0105.",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.db.get_value('Closing Stock Balance', {'name': 'CSB-0105'}, 'amended_from')"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Has CSB-0098 been amended from an earlier entry?",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.db.get_value('Closing Stock Balance', {'name': 'CSB-0098'}, 'amended_from')"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Show all current stock balances that are revised versions of older entries.",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'amended_from': ['!=', '']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Find entries that were created as amendments to earlier closing stock records.",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'amended_from': ['!=', '']}, fields=['name', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Check if the entry CSB-1002 is an amendment of a previous stock report.",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.db.get_value('Closing Stock Balance', {'name': 'CSB-1002'}, 'amended_from')"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "List warehouse types associated with closing stock between January and March 2024.",
      "fields": [
        "warehouse_type",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'from_date': ['>=', '2024-01-01'], 'to_date': ['<=', '2024-03-31']}, fields=['warehouse_type'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Which warehouse type is used in entry CSB-00456?",
      "fields": [
        "warehouse_type"
      ]
    },
    "output": "frappe.db.get_value('Closing Stock Balance', {'name': 'CSB-00456'}, 'warehouse_type')"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Show all distinct warehouse types used in closing stock entries of 'Global Mart'.",
      "fields": [
        "warehouse_type",
        "company"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'company': 'Global Mart'}, fields=['warehouse_type'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Get the latest warehouse type used in closing stock for finished goods.",
      "fields": [
        "warehouse_type",
        "item_group"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'item_group': 'Finished Goods'}, fields=['warehouse_type'], order_by='to_date desc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Did the warehouse summary for March 2024 include UOM details?",
      "fields": [
        "include_uom"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'from_date': ['>=', '2024-03-01'], 'to_date': ['<=', '2024-03-31']}, fields=['include_uom'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "What item group is associated with the stock entry CSB-5043?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.db.get_value('Closing Stock Balance', {'name': 'CSB-5043'}, 'item_group')"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "List all item groups included in the April 2024 closing stock report.",
      "fields": [
        "item_group",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'from_date': ['>=', '2024-04-01'], 'to_date': ['<=', '2024-04-30']}, fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Which item group includes 'STEEL-325' in this report?",
      "fields": [
        "item_group",
        "item_code"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'item_code': 'STEEL-325'}, fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "What item groups are tracked for Warehouse A during Q1 2024?",
      "fields": [
        "item_group",
        "warehouse",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'warehouse': 'Warehouse A', 'from_date': ['>=', '2024-01-01'], 'to_date': ['<=', '2024-03-31']}, fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Identify the item group that includes the product 'CAP-102'.",
      "fields": [
        "item_group",
        "item_code"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'item_code': 'CAP-102'}, fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Which item groups had balances across multiple warehouses last month?",
      "fields": [
        "item_group",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'to_date': ['between', ['2024-04-01', '2024-04-30']]}, fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "What item group is recorded most frequently across entries in May 2024?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'to_date': ['between', ['2024-05-01', '2024-05-31']]}, fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "What item group appears with status 'Draft' in recent entries?",
      "fields": [
        "item_group",
        "status"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'status': 'Draft'}, fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "For the company FreshMart, which item groups were tracked in April 2024?",
      "fields": [
        "item_group",
        "company",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'company': 'FreshMart', 'from_date': ['>=', '2024-04-01'], 'to_date': ['<=', '2024-04-30']}, fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "What item groups were recorded in the report for warehouse type 'Transit'?",
      "fields": [
        "item_group",
        "warehouse_type"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'warehouse_type': 'Transit'}, fields=['item_group'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Which item code is recorded in report CSB-1201?",
      "fields": [
        "item_code"
      ]
    },
    "output": "frappe.db.get_value('Closing Stock Balance', {'name': 'CSB-1201'}, 'item_code')"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "List all item codes tracked between March and April 2024.",
      "fields": [
        "item_code",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'from_date': ['>=', '2024-03-01'], 'to_date': ['<=', '2024-04-30']}, fields=['item_code'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Show me item codes recorded for Finished Goods Warehouse only.",
      "fields": [
        "item_code",
        "warehouse"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'warehouse': 'Finished Goods Warehouse'}, fields=['item_code'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Which item codes were recorded under the 'Spare Parts' group?",
      "fields": [
        "item_code",
        "item_group"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'item_group': 'Spare Parts'}, fields=['item_code'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Get all unique item codes recorded in the latest stock balance entries.",
      "fields": [
        "item_code"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', fields=['item_code'], order_by='creation desc', distinct=True)"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Identify items recorded in stock balances after May 1st.",
      "fields": [
        "item_code",
        "from_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'from_date': ['>', '2024-05-01']}, fields=['item_code'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "What item codes appear most frequently in closing balances this quarter?",
      "fields": [
        "item_code"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', fields=['item_code'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Which items are missing from the Central Warehouse report?",
      "fields": [
        "item_code",
        "warehouse"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'warehouse': 'Central Warehouse'}, fields=['item_code'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Show item codes with data submitted by Summit Electronics.",
      "fields": [
        "item_code",
        "company"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'company': 'Summit Electronics'}, fields=['item_code'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Which item codes have not been updated in the last report from Raw Materials Warehouse?",
      "fields": [
        "item_code",
        "warehouse"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'warehouse': 'Raw Materials Warehouse'}, fields=['item_code'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "List the to_date for all stock reports submitted in April 2024.",
      "fields": [
        "to_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'status': 'Submitted', 'to_date': ['between', ['2024-04-01', '2024-04-30']]}, fields=['to_date'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Get the report end date for stock balance CSB-240.",
      "fields": [
        "to_date"
      ]
    },
    "output": "frappe.db.get_value('Closing Stock Balance', {'name': 'CSB-240'}, 'to_date')"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "When does the warehouse report for WH-23 end?",
      "fields": [
        "to_date",
        "warehouse"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'warehouse': 'WH-23'}, fields=['to_date'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Which stock reports have their closing date set to 2024-06-30?",
      "fields": [
        "to_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'to_date': '2024-06-30'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "What is the latest closing date used in stock balance reports?",
      "fields": [
        "to_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', fields=['to_date'], order_by='to_date desc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Retrieve the to_date for balances ending in May 2024.",
      "fields": [
        "to_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'to_date': ['between', ['2024-05-01', '2024-05-31']]}, fields=['to_date'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Show the closing date for all reports created by 'BrightSteel Corp'.",
      "fields": [
        "to_date",
        "company"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'company': 'BrightSteel Corp'}, fields=['to_date'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "What's the last recorded stock closing date for warehouse WH-MFG-01?",
      "fields": [
        "to_date",
        "warehouse"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'warehouse': 'WH-MFG-01'}, fields=['to_date'], order_by='to_date desc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "What closing dates were used in reports submitted this week?",
      "fields": [
        "to_date",
        "status"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'status': 'Submitted', 'to_date': ['between', ['2024-05-20', '2024-05-25']]}, fields=['to_date'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Give me the beginning date of the stock balance for the April cycle.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'to_date': ['between', ['2024-04-01', '2024-04-30']]}, fields=['from_date'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "When did the stock balance period begin for 'Trinity Corp'?",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'company': 'Trinity Corp'}, fields=['from_date'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Retrieve the earliest from_date in closing stock balance records for warehouse 'WH-0001'.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'warehouse': 'WH-0001'}, fields=['from_date'], order_by='from_date asc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Find all records where the from_date is before 2024-03-01.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'from_date': ['<', '2024-03-01']}, fields=['name', 'from_date'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "List the starting dates of stock reports in March 2024.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'from_date': ['between', ['2024-03-01', '2024-03-31']]}, fields=['from_date'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Get the from_date for stock balance submitted under item group 'Electronics'.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'item_group': 'Electronics'}, fields=['from_date'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "What is the starting date of the balance recorded for the warehouse 'Main Store'?",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'warehouse': 'Main Store'}, fields=['from_date'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Check the start date of closing stock records in status 'Submitted'.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'status': 'Submitted'}, fields=['from_date'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Show the from_date for stock balance linked to item_code 'ITM-9023'.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'item_code': 'ITM-9023'}, fields=['from_date'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "What is the naming series used for the April 2024 stock closure document?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'from_date': ['>=', '2024-04-01'], 'to_date': ['<=', '2024-04-30']}, fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Get the current status of stock closing for the item group 'Raw Materials'.",
      "fields": [
        "status",
        "item_group"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'item_group': 'Raw Materials'}, fields=['status'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "List all closing stock balances that have been cancelled.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'status': 'Cancelled'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Which closing stock entries for 'SuperMart Ltd.' are still in Draft?",
      "fields": [
        "company",
        "status"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'company': 'SuperMart Ltd.', 'status': 'Draft'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Check the approval status for stock balance with warehouse type 'Distribution'.",
      "fields": [
        "warehouse_type",
        "status"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'warehouse_type': 'Distribution'}, fields=['status'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "How many cancelled stock balances were filed by 'Trident Corp'?",
      "fields": [
        "status",
        "company"
      ]
    },
    "output": "frappe.db.count('Closing Stock Balance', {'status': 'Cancelled', 'company': 'Trident Corp'})"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "What is the current status of the stock balance document with item code 'PACK-2241'?",
      "fields": [
        "status",
        "item_code"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'item_code': 'PACK-2241'}, fields=['status'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Show me all closing stock balances that are in Draft state.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'status': 'Draft'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "How many closing stock documents are currently marked as Submitted?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.count('Closing Stock Balance', {'status': 'Submitted'})"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Get the status of the stock balance entry submitted by NovaTech Corp.",
      "fields": [
        "status",
        "company"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'company': 'NovaTech Corp'}, fields=['status'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Find the status of the most recent stock closing for 'Main Warehouse'.",
      "fields": [
        "status",
        "warehouse"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'warehouse': 'Main Warehouse'}, fields=['status'], order_by='to_date desc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Which entries were cancelled in the last quarter?",
      "fields": [
        "status",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={ 'status': 'Cancelled', 'from_date': ['>=', '2024-01-01'], 'to_date': ['<=', '2024-03-31'] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Check the status of stock balance with warehouse 'East Wing Depot'.",
      "fields": [
        "status",
        "warehouse"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'warehouse': 'East Wing Depot'}, fields=['status'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "How many Draft entries are there for the item 'CABLE-3010'?",
      "fields": [
        "status",
        "item_code"
      ]
    },
    "output": "frappe.db.count('Closing Stock Balance', {'status': 'Draft', 'item_code': 'CABLE-3010'})"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Fetch the status of stock reports generated in April 2024.",
      "fields": [
        "status",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'from_date': ['>=', '2024-04-01'], 'to_date': ['<=', '2024-04-30']}, fields=['status'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Show all closing stock documents with Submitted status from TechPlus Ltd.",
      "fields": [
        "status",
        "company"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'status': 'Submitted', 'company': 'TechPlus Ltd.'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Show me the document series code used in closing stock balance sheets.",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Which naming pattern is followed for stock balance entries of May 2024?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'from_date': ['>=', '2024-05-01'], 'to_date': ['<=', '2024-05-31']}, fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Identify the naming series used in the most recent stock balance document for Beta Corp.",
      "fields": [
        "naming_series",
        "company"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'company': 'Beta Corp'}, fields=['naming_series'], order_by='to_date desc', limit=1)"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "What naming convention is used in documents tracking monthly closing stock?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "What is the highest advance amount recorded this year?",
      "fields": [
        "advance_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'posting_date': ['between', ['2024-01-01', '2024-12-31']]}, fields=['advance_amount'], order_by='advance_amount desc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "How much advance was paid for invoice SINV-3020?",
      "fields": [
        "advance_amount",
        "reference_name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'reference_name': 'SINV-3020'}, fields=['advance_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "What are the advance amounts received in February 2024?",
      "fields": [
        "advance_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'posting_date': ['between', ['2024-02-01', '2024-02-29']]}, fields=['advance_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Show all remarks added to advances posted this week.",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'posting_date': ['between', ['2025-05-19', '2025-05-25']]}, fields=['remarks'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "What remarks were recorded for the advance linked to document SINV-9042?",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'reference_name': 'SINV-9042'}, fields=['remarks'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Find any internal notes or descriptions added to large advance records.",
      "fields": [
        "remarks",
        "advance_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'advance_amount': ['>', 20000]}, fields=['remarks'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "For which advances was a remark tagged as 'urgent allocation required'?",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'remarks': ['like', '%urgent allocation required%']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Display all remarks where the comment mentions 'prepaid adjustment'.",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'remarks': ['like', '%prepaid adjustment%']}, fields=['remarks'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Which advances had a recorded exchange gain or loss for March 2024?",
      "fields": [
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={ 'posting_date': ['between', ['2024-03-01', '2024-03-31']], 'exchange_gain_loss': ['!=', 0] }, fields=['exchange_gain_loss'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "What is the naming series used for the closing stock record created for April 2024?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'from_date': ['>=', '2024-04-01'], 'to_date': ['<=', '2024-04-30']}, fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Which naming series pattern is followed in closing stock entries for Alpha Corp?",
      "fields": [
        "naming_series",
        "company"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'company': 'Alpha Corp'}, fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Show me the document series used for stock balances finalized last quarter.",
      "fields": [
        "naming_series",
        "status"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'status': 'Submitted'}, fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "What is the unique series format used to identify closing stock balance entries?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Closing Stock Balance",
      "question": "Can you provide the naming convention applied to the latest closing stock submission?",
      "fields": [
        "naming_series",
        "status"
      ]
    },
    "output": "frappe.get_all('Closing Stock Balance', filters={'status': 'Submitted'}, fields=['naming_series'], order_by='modified desc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "What\u2019s the gain or loss due to currency rate for invoice SINV-8721?",
      "fields": [
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice Advance', {'reference_name': 'SINV-8721'}, 'exchange_gain_loss')"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Find the exchange loss on any entries with ref exchange rate below 3.5.",
      "fields": [
        "exchange_gain_loss",
        "ref_exchange_rate"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={ 'ref_exchange_rate': ['<', 3.5] }, fields=['exchange_gain_loss'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "What are the exchange gains or losses in Q1 for foreign currency advances?",
      "fields": [
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={ 'posting_date': ['between', ['2024-01-01', '2024-03-31']] }, fields=['exchange_gain_loss'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "List gains or losses recorded from foreign payments in February.",
      "fields": [
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={ 'posting_date': ['between', ['2024-02-01', '2024-02-29']] }, fields=['exchange_gain_loss'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "For which documents were advances received from customer 'Nova Traders'?",
      "fields": [
        "reference_name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'customer': 'Nova Traders'}, fields=['reference_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Show reference names of advances that were partially allocated.",
      "fields": [
        "reference_name",
        "allocated_amount",
        "advance_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'allocated_amount': ['<', 'advance_amount']}, fields=['reference_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "List the documents against which more than QAR 25,000 was received in advance.",
      "fields": [
        "reference_name",
        "advance_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'advance_amount': ['>', 25000]}, fields=['reference_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "What are the referenced document IDs for fully allocated advances?",
      "fields": [
        "reference_name",
        "allocated_amount",
        "advance_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'allocated_amount': ['=', 'advance_amount']}, fields=['reference_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "What is the document name linked to advance entry SIA-1020?",
      "fields": [
        "reference_name"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice Advance', {'name': 'SIA-1020'}, 'reference_name')"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Which documents have been referenced in customer advances this week?",
      "fields": [
        "reference_name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'posting_date': ['between', ['2025-05-19', '2025-05-25']]}, fields=['reference_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Can you list reference names tied to advances for \u2018Alpha Corp\u2019?",
      "fields": [
        "reference_name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'customer': 'Alpha Corp'}, fields=['reference_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Show me the document IDs of all advances from April 2024.",
      "fields": [
        "reference_name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'posting_date': ['between', ['2024-04-01', '2024-04-30']]}, fields=['reference_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "Which referenced documents have more than QAR 15,000 as advance?",
      "fields": [
        "reference_name",
        "advance_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={ 'advance_amount': ['>', 15000] }, fields=['reference_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Advance",
      "question": "List reference types for all advances exceeding QAR 20,000.",
      "fields": [
        "reference_type",
        "advance_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Advance', filters={'advance_amount': ['>', 20000]}, fields=['reference_type'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "When was the gain/loss journal entry posted for entry ADV-3001?",
      "fields": [
        "difference_posting_date"
      ]
    },
    "output": "frappe.db.get_value('Purchase Invoice Advance', {'name': 'ADV-3001'}, 'difference_posting_date')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Which advance entries had gain/loss posted on 2024-03-10?",
      "fields": [
        "difference_posting_date"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'difference_posting_date': '2024-03-10'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "List all gain/loss difference posting dates for entries recorded in March 2024.",
      "fields": [
        "difference_posting_date"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'difference_posting_date': ['between', ['2024-03-01', '2024-03-31']]}, fields=['difference_posting_date'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "When was the gain/loss impact posted for supplier 'Vertex Global'?",
      "fields": [
        "difference_posting_date"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'supplier': 'Vertex Global'}, fields=['difference_posting_date'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Retrieve the latest gain/loss posting date for supplier 'TopDeal Supplies'.",
      "fields": [
        "difference_posting_date"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'supplier': 'TopDeal Supplies'}, fields=['difference_posting_date'], order_by='posting_date desc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "For advances exceeding QAR 15,000, when were the gain/loss differences posted?",
      "fields": [
        "difference_posting_date",
        "advance_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={ 'advance_amount': ['>', 15000] }, fields=['difference_posting_date'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Check the gain/loss posting dates for all entries with exchange differences.",
      "fields": [
        "difference_posting_date",
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={ 'exchange_gain_loss': ['!=', 0] }, fields=['difference_posting_date'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "What were the gain/loss posting dates for all advances in Q1 2024?",
      "fields": [
        "difference_posting_date"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'difference_posting_date': ['between', ['2024-01-01', '2024-03-31']]}, fields=['difference_posting_date'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Give me the posting dates for gain/loss on foreign currency adjustments for March 2024 advances.",
      "fields": [
        "difference_posting_date"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'difference_posting_date': ['between', ['2024-03-01', '2024-03-31']]}, fields=['difference_posting_date'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "When were gains or losses posted for supplier-linked advances this quarter?",
      "fields": [
        "difference_posting_date"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'difference_posting_date': ['between', ['2024-01-01', '2024-03-31']]}, fields=['difference_posting_date'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "What reference exchange rates were set for entries linked to Purchase Orders?",
      "fields": [
        "ref_exchange_rate",
        "reference_type"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'reference_type': 'Purchase Order'}, fields=['ref_exchange_rate'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Show reference exchange rates used in supplier prepayments from March 2024.",
      "fields": [
        "ref_exchange_rate"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'posting_date': ['between', ['2024-03-01', '2024-03-31']]}, fields=['ref_exchange_rate'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "List the exchange rates used for supplier 'Zantrix Global'.",
      "fields": [
        "ref_exchange_rate",
        "supplier"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'supplier': 'Zantrix Global'}, fields=['ref_exchange_rate'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Show entries that applied an exchange rate greater than 3.5.",
      "fields": [
        "ref_exchange_rate"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={ 'ref_exchange_rate': ['>', 3.5] }, fields=['ref_exchange_rate'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Which advances had exchange gain/loss exceeding 500?",
      "fields": [
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={ 'exchange_gain_loss': ['>', 500] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Find the reference name for the advance entry labeled 'ADV-1042'.",
      "fields": [
        "reference_name"
      ]
    },
    "output": "frappe.db.get_value('Purchase Invoice Advance', {'name': 'ADV-1042'}, 'reference_name')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Which documents have been referenced in supplier advances posted after May 1st, 2024?",
      "fields": [
        "reference_name"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'posting_date': ['>', '2024-05-01']}, fields=['reference_name'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "List reference names of all advances related to 'Tech Parts Co'.",
      "fields": [
        "reference_name"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'supplier': 'Tech Parts Co'}, fields=['reference_name'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "List all advance entries referencing document PINV-8743.",
      "fields": [
        "reference_name"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'reference_name': 'PINV-8743'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Which referenced documents were linked to advance payments created this year?",
      "fields": [
        "reference_name"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'posting_date': ['between', ['2024-01-01', '2024-12-31']]}, fields=['reference_name'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Retrieve reference names for all advances made to 'Gulf Paper Traders'.",
      "fields": [
        "reference_name"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'supplier': 'Gulf Paper Traders'}, fields=['reference_name'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Find the latest advance entry and its linked reference document.",
      "fields": [
        "reference_name"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', fields=['reference_name'], order_by='posting_date desc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Which reference documents received advance payments above QAR 20,000?",
      "fields": [
        "reference_name",
        "advance_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={ 'advance_amount': ['>', 20000] }, fields=['reference_name'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Are there any advances referencing document ID PINV-10001?",
      "fields": [
        "reference_name"
      ]
    },
    "output": "frappe.db.exists('Purchase Invoice Advance', {'reference_name': 'PINV-10001'})"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "How many unique reference documents were linked in March 2024?",
      "fields": [
        "reference_name"
      ]
    },
    "output": "frappe.db.count('Purchase Invoice Advance', {'posting_date': ['between', ['2024-03-01', '2024-03-31']]})"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "What remarks were added to advance entry ADV-5612?",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.get_value('Purchase Invoice Advance', {'name': 'ADV-5612'}, 'remarks')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Fetch remarks where the allocated amount is less than QAR 2000.",
      "fields": [
        "remarks",
        "allocated_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'allocated_amount': ['<', 2000]}, fields=['remarks'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Show remarks attached to any advance for document PINV-9022.",
      "fields": [
        "remarks",
        "reference_name"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'reference_name': 'PINV-9022'}, fields=['remarks'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Get remarks from advances that recorded an exchange gain or loss.",
      "fields": [
        "remarks",
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'exchange_gain_loss': ['!=', 0]}, fields=['remarks'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Are there remarks logged for any reference to 'Expense Claim'?",
      "fields": [
        "remarks",
        "reference_type"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'reference_type': 'Expense Claim'}, fields=['remarks'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Which row number is linked to advance entry ADV-11007?",
      "fields": [
        "reference_row"
      ]
    },
    "output": "frappe.db.get_value('Purchase Invoice Advance', {'name': 'ADV-11007'}, 'reference_row')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Fetch the reference row values for all advance payments related to supplier 'Silverline Traders'.",
      "fields": [
        "reference_row"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'supplier': 'Silverline Traders'}, fields=['reference_row'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Get the reference row from the latest advance entry made by 'SpeedChem Supplies'.",
      "fields": [
        "reference_row"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'supplier': 'SpeedChem Supplies'}, fields=['reference_row'], order_by='posting_date desc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "What are the reference row numbers for all advances posted in March 2024?",
      "fields": [
        "reference_row"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'posting_date': ['between', ['2024-03-01', '2024-03-31']]}, fields=['reference_row'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Which reference rows are associated with entries having an advance amount above QAR 8,000?",
      "fields": [
        "reference_row",
        "advance_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={ 'advance_amount': ['>', 8000] }, fields=['reference_row'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Find out which reference row entry corresponds to advance number ADV-8802.",
      "fields": [
        "reference_row"
      ]
    },
    "output": "frappe.db.get_value('Purchase Invoice Advance', {'name': 'ADV-8802'}, 'reference_row')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Do we have any advance records linked to reference row number 3?",
      "fields": [
        "reference_row"
      ]
    },
    "output": "frappe.db.exists('Purchase Invoice Advance', {'reference_row': 3})"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Check which reference rows are linked to the document ID PINV-2089.",
      "fields": [
        "reference_row",
        "reference_name"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'reference_name': 'PINV-2089'}, fields=['reference_row'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "For entries referencing the document type 'Purchase Invoice', what are their row numbers?",
      "fields": [
        "reference_row",
        "reference_type"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'reference_type': 'Purchase Invoice'}, fields=['reference_row'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "What is the row number linked to advance PINVADV-2091?",
      "fields": [
        "reference_row"
      ]
    },
    "output": "frappe.db.get_value('Purchase Invoice Advance', {'name': 'PINVADV-2091'}, 'reference_row')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "List advance entries with amounts greater than QAR 8000.",
      "fields": [
        "advance_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={ 'advance_amount': ['>', 8000] }, fields=['name', 'advance_amount'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Get the advance amount recorded for entry ADV-7340.",
      "fields": [
        "advance_amount"
      ]
    },
    "output": "frappe.db.get_value('Purchase Invoice Advance', {'name': 'ADV-7340'}, 'advance_amount')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Fetch all advance entries with an amount of QAR 5000.",
      "fields": [
        "advance_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'advance_amount': 5000}, fields=['name', 'advance_amount'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Check if there's any advance paid more than QAR 15000.",
      "fields": [
        "advance_amount"
      ]
    },
    "output": "frappe.db.exists('Purchase Invoice Advance', {'advance_amount': ['>', 15000]})"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Get the advance amount for the latest entry from Al Hayat Supplies.",
      "fields": [
        "advance_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'supplier': 'Al Hayat Supplies'}, fields=['advance_amount'], order_by='posting_date desc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "How much was advanced in entry ADV-4091?",
      "fields": [
        "advance_amount"
      ]
    },
    "output": "frappe.db.get_value('Purchase Invoice Advance', {'name': 'ADV-4091'}, 'advance_amount')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "List advance amounts greater than 5000 QAR.",
      "fields": [
        "advance_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'advance_amount': ['>', 5000]}, fields=['name', 'advance_amount'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "What remarks were added to advance entry ADV-5612?",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.get_value('Purchase Invoice Advance', {'name': 'ADV-5612'}, 'remarks')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Show all remarks recorded for advances made to 'Bright Supplies Co.'.",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'supplier': 'Bright Supplies Co.'}, fields=['remarks'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "What is the total advance value logged for supplier voucher PINV-1445?",
      "fields": [
        "advance_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'reference_name': 'PINV-1445'}, fields=['advance_amount'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Get all advance entries where amount is not equal to the allocated amount.",
      "fields": [
        "advance_amount",
        "allocated_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'advance_amount': ['!=', 'allocated_amount']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "List the advance amount for supplier 'Elite Procurement Co.' from last week.",
      "fields": [
        "advance_amount",
        "supplier"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'supplier': 'Elite Procurement Co.', 'posting_date': ['between', ['2024-04-01', '2024-04-07']]}, fields=['advance_amount'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "How much of the advance was allocated for PINV-00942?",
      "fields": [
        "allocated_amount",
        "reference_name"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'reference_name': 'PINV-00942'}, fields=['allocated_amount'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "What is the allocated amount for the latest advance entry?",
      "fields": [
        "allocated_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', fields=['allocated_amount'], order_by='posting_date desc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "What amount has been allocated from advance entry ADV-3024?",
      "fields": [
        "allocated_amount"
      ]
    },
    "output": "frappe.db.get_value('Purchase Invoice Advance', {'name': 'ADV-3024'}, 'allocated_amount')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Show me the allocated amounts for all supplier advances.",
      "fields": [
        "allocated_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', fields=['allocated_amount'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "List allocation amounts for advance payments over QAR 5000.",
      "fields": [
        "advance_amount",
        "allocated_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={ 'advance_amount': ['>', 5000] }, fields=['allocated_amount'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Find all advances with zero allocated amount.",
      "fields": [
        "allocated_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={ 'allocated_amount': 0 }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Check allocated amounts from March 2024 advances.",
      "fields": [
        "allocated_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={ 'posting_date': ['between', ['2024-03-01', '2024-03-31']] }, fields=['allocated_amount'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Retrieve allocated amounts from the latest five entries.",
      "fields": [
        "allocated_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', fields=['allocated_amount'], order_by='posting_date desc', limit_page_length=5)"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Which entries have allocations above QAR 8,000?",
      "fields": [
        "allocated_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={ 'allocated_amount': ['>', 8000] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Tell me the allocated amount for entry ADV-2040.",
      "fields": [
        "allocated_amount"
      ]
    },
    "output": "frappe.db.get_value('Purchase Invoice Advance', {'name': 'ADV-2040'}, 'allocated_amount')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Can you retrieve the comment added for advance entry ADV-2091?",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.get_value('Purchase Invoice Advance', {'name': 'ADV-2091'}, 'remarks')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "What is the exchange gain or loss recorded for advance ADV-5001?",
      "fields": [
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.db.get_value('Purchase Invoice Advance', {'name': 'ADV-5001'}, 'exchange_gain_loss')"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "List exchange gain/loss amounts for all advance entries posted this year.",
      "fields": [
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={ 'posting_date': ['between', ['2024-01-01', '2024-12-31']] }, fields=['exchange_gain_loss'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Show the exchange gain or loss for all advances made to supplier 'Delta Exports'.",
      "fields": [
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={ 'supplier': 'Delta Exports' }, fields=['exchange_gain_loss'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Get all advances where exchange gain or loss was recorded above QAR 100.",
      "fields": [
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={ 'exchange_gain_loss': ['>', 100] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Retrieve the exchange gain or loss amount from the latest supplier advance.",
      "fields": [
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', fields=['exchange_gain_loss'], order_by='posting_date desc', limit_page_length=1)"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Which advance entries had no exchange difference recorded?",
      "fields": [
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={ 'exchange_gain_loss': 0 }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Find the exchange differences for all advances linked to invoice PINV-9932.",
      "fields": [
        "exchange_gain_loss",
        "reference_name"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={ 'reference_name': 'PINV-9932' }, fields=['exchange_gain_loss'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "List exchange gain/loss amounts by supplier across all advances.",
      "fields": [
        "exchange_gain_loss"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', fields=['exchange_gain_loss'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "List all comments or notes on advances posted in February 2024.",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'posting_date': ['between', ['2024-02-01', '2024-02-29']]}, fields=['remarks'])"
  },
  {
    "input": {
      "doctype": "Purchase Invoice Advance",
      "question": "Retrieve remarks associated with supplier prepayments where allocated amount exceeds QAR 5000.",
      "fields": [
        "remarks",
        "allocated_amount"
      ]
    },
    "output": "frappe.get_all('Purchase Invoice Advance', filters={'allocated_amount': ['>', 5000]}, fields=['remarks'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Can you retrieve the finance book for the asset tagged as AF-7820?",
      "fields": [
        "finance_book"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-7820'}, fields=['finance_book'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Which finance book does asset AF-5620 belong to?",
      "fields": [
        "finance_book"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-5620'}, fields=['finance_book'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Find the finance book managing depreciation for asset ID AF-7854.",
      "fields": [
        "finance_book"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-7854'}, fields=['finance_book'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Retrieve the finance book associated with asset AF-9991.",
      "fields": [
        "finance_book"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-9991'}, fields=['finance_book'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Which finance book tracks assets that follow straight-line depreciation?",
      "fields": [
        "finance_book"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'depreciation_method': 'Straight Line'}, fields=['finance_book'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "List all finance books that support daily prorata-based depreciation.",
      "fields": [
        "finance_book"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'daily_prorata_based': 1}, fields=['finance_book'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Which finance book is assigned to asset ID AF-9285?",
      "fields": [
        "finance_book"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-9285'}, fields=['finance_book'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Under which finance book is asset AF-1023 recorded?",
      "fields": [
        "finance_book"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-1023'}, fields=['finance_book'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "What finance book is currently tracking depreciation for asset AF-2034?",
      "fields": [
        "finance_book"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-2034'}, fields=['finance_book'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Show me the finance book linked to asset AF-3321.",
      "fields": [
        "finance_book"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-3321'}, fields=['finance_book'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Can you find the depreciation method for asset AF-2048?",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-2048'}, fields=['depreciation_method'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "What depreciation method is applied for asset AF-5623?",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-5623'}, fields=['depreciation_method'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Retrieve depreciation method used in asset AF-9991.",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-9991'}, fields=['depreciation_method'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Can you find the depreciation method for asset AF-2048?",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-2048'}, fields=['depreciation_method'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "What depreciation method is applied for asset AF-5623?",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-5623'}, fields=['depreciation_method'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Retrieve depreciation method used in asset AF-9991.",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-9991'}, fields=['depreciation_method'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Which depreciation method applies to high-value equipment?",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'asset_type': 'High Value'}, fields=['depreciation_method'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Retrieve depreciation method for leased machinery.",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'asset_type': 'Leased'}, fields=['depreciation_method'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Find depreciation method best suited for assets with unpredictable usage.",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'asset_usage': 'Unpredictable'}, fields=['depreciation_method'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Retrieve depreciation method for long-life factory equipment.",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'asset_category': 'Manufacturing Equipment'}, fields=['depreciation_method'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "How many depreciation cycles are planned for asset AF-1023?",
      "fields": [
        "total_number_of_depreciations"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-1023'}, fields=['total_number_of_depreciations'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Find the total number of depreciation entries planned for asset AF-7854.",
      "fields": [
        "total_number_of_depreciations"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-7854'}, fields=['total_number_of_depreciations'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "How many planned depreciation cycles exist for assets acquired in 2023?",
      "fields": [
        "total_number_of_depreciations"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'acquisition_year': '2023'}, fields=['total_number_of_depreciations'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "How many depreciation cycles are planned for leased equipment?",
      "fields": [
        "total_number_of_depreciations"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'asset_type': 'Leased'}, fields=['total_number_of_depreciations'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Retrieve the total depreciation cycles planned for asset AF-2034.",
      "fields": [
        "total_number_of_depreciations"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-2034'}, fields=['total_number_of_depreciations'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Show me the planned depreciation cycle count for asset AF-5620.",
      "fields": [
        "total_number_of_depreciations"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-5620'}, fields=['total_number_of_depreciations'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Which assets have the highest number of planned depreciation cycles?",
      "fields": [
        "total_number_of_depreciations"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', order_by='total_number_of_depreciations desc', fields=['name', 'total_number_of_depreciations'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Retrieve the total planned depreciation cycles for high-value assets.",
      "fields": [
        "total_number_of_depreciations"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'asset_category': 'High Value'}, fields=['total_number_of_depreciations'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "What’s the planned depreciation cycle count for assets with salvage value above 50%?",
      "fields": [
        "total_number_of_depreciations"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'salvage_value_percentage': {'>' : '50'}}, fields=['total_number_of_depreciations'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Find planned depreciation cycles for assets that follow monthly depreciation frequency.",
      "fields": [
        "total_number_of_depreciations"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'frequency_of_depreciation': 'Monthly'}, fields=['total_number_of_depreciations'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "How many booked depreciation entries exist for asset AF-1023?",
      "fields": [
        "total_number_of_booked_depreciations"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-1023'}, fields=['total_number_of_booked_depreciations'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Retrieve booked depreciation cycles for asset AF-7854.",
      "fields": [
        "total_number_of_booked_depreciations"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-7854'}, fields=['total_number_of_booked_depreciations'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "How many booked depreciation cycles exist for assets with a depreciation start date in 2023?",
      "fields": [
        "total_number_of_booked_depreciations",
        "depreciation_start_date"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'depreciation_start_date': {'>=': '2023-01-01', '<=': '2023-12-31'}}, fields=['total_number_of_booked_depreciations'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Retrieve the number of booked depreciation entries for leased equipment.",
      "fields": [
        "total_number_of_booked_depreciations"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'asset_type': 'Leased'}, fields=['total_number_of_booked_depreciations'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Show me the booked depreciation cycles for asset AF-2034.",
      "fields": [
        "total_number_of_booked_depreciations"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-2034'}, fields=['total_number_of_booked_depreciations'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Find the booked depreciation cycle count for asset AF-5620.",
      "fields": [
        "total_number_of_booked_depreciations"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-5620'}, fields=['total_number_of_booked_depreciations'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Which assets have the highest number of booked depreciation cycles?",
      "fields": [
        "total_number_of_booked_depreciations"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', order_by='total_number_of_booked_depreciations desc', fields=['name', 'total_number_of_booked_depreciations'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Retrieve booked depreciation cycles for assets with high expected value after useful life.",
      "fields": [
        "total_number_of_booked_depreciations",
        "expected_value_after_useful_life"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'expected_value_after_useful_life': {'>': 'HIGH_VALUE_THRESHOLD'}}, fields=['total_number_of_booked_depreciations'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "What’s the booked depreciation cycle count for assets with salvage value above 50%?",
      "fields": [
        "total_number_of_booked_depreciations"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'salvage_value_percentage': {'>' : '50'}}, fields=['total_number_of_booked_depreciations'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Find booked depreciation cycles for assets that follow monthly depreciation frequency.",
      "fields": [
        "total_number_of_booked_depreciations"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'frequency_of_depreciation': 'Monthly'}, fields=['total_number_of_booked_depreciations'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Is asset AF-1023 using daily prorata-based depreciation?",
      "fields": [
        "daily_prorata_based"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-1023'}, fields=['daily_prorata_based'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Retrieve depreciation setting for asset AF-7854—does it follow daily prorata?",
      "fields": [
        "daily_prorata_based"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-7854'}, fields=['daily_prorata_based'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "How does daily prorata-based depreciation affect asset AF-2034?",
      "fields": [
        "daily_prorata_based"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-2034'}, fields=['daily_prorata_based'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Does asset AF-9991 follow a daily prorata-based calculation?",
      "fields": [
        "daily_prorata_based"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-9991'}, fields=['daily_prorata_based'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Which assets are set to use daily prorata-based depreciation?",
      "fields": [
        "daily_prorata_based"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'daily_prorata_based': 1}, fields=['name', 'daily_prorata_based'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Retrieve assets applying daily prorata depreciation for leased equipment.",
      "fields": [
        "daily_prorata_based"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'asset_type': 'Leased', 'daily_prorata_based': 1}, fields=['name', 'daily_prorata_based'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Are high-value assets set to daily prorata-based depreciation?",
      "fields": [
        "daily_prorata_based"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'asset_category': 'High Value', 'daily_prorata_based': 1}, fields=['name', 'daily_prorata_based'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "What depreciation settings allow both daily prorata and monthly frequency?",
      "fields": [
        "daily_prorata_based"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'daily_prorata_based': 1, 'frequency_of_depreciation': 'Monthly'}, fields=['name', 'daily_prorata_based', 'frequency_of_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Find daily prorata depreciation settings for assets acquired before 2020.",
      "fields": [
        "daily_prorata_based",
        "depreciation_start_date"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'depreciation_start_date': {'<': '2020-01-01'}, 'daily_prorata_based': 1}, fields=['name', 'daily_prorata_based'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Identify assets that switched from non-daily to daily prorata-based depreciation.",
      "fields": [
        "daily_prorata_based"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'daily_prorata_based': 1, 'previous_depreciation_method': {'!=': 'Daily'}}, fields=['name', 'daily_prorata_based', 'previous_depreciation_method'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Does asset AF-1023 use shift-based depreciation?",
      "fields": [
        "shift_based"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-1023'}, fields=['shift_based'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Which assets follow shift-based depreciation?",
      "fields": [
        "shift_based"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'shift_based': 1}, fields=['name', 'shift_based'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Retrieve shift-based depreciation setting for asset AF-7854.",
      "fields": [
        "shift_based"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-7854'}, fields=['shift_based'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Are leased assets set to shift-based depreciation?",
      "fields": [
        "shift_based"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'asset_type': 'Leased', 'shift_based': 1}, fields=['name', 'shift_based'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Which depreciation method is best for shift-based assets?",
      "fields": [
        "shift_based"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'shift_based': 1}, fields=['depreciation_method'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "How does shift-based depreciation impact 24/7 operational equipment?",
      "fields": [
        "shift_based"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'operational_hours': '24/7', 'shift_based': 1}, fields=['name', 'shift_based'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Identify assets with shift-based depreciation activated.",
      "fields": [
        "shift_based"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'shift_based': 1}, fields=['name', 'shift_based'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Retrieve shift-based depreciation settings for high-value assets.",
      "fields": [
        "shift_based"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'asset_category': 'High Value', 'shift_based': 1}, fields=['name', 'shift_based'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Find shift-based depreciation settings for assets acquired before 2020.",
      "fields": [
        "shift_based",
        "depreciation_start_date"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'depreciation_start_date': {'<': '2020-01-01'}, 'shift_based': 1}, fields=['name', 'shift_based'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Identify assets that switched from non-shift-based to shift-based depreciation.",
      "fields": [
        "shift_based"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'shift_based': 1, 'previous_depreciation_method': {'!=': 'Shift-Based'}}, fields=['name', 'shift_based', 'previous_depreciation_method'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "How frequently is depreciation recorded for asset AF-1023?",
      "fields": [
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-1023'}, fields=['frequency_of_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Retrieve depreciation frequency for asset AF-7854.",
      "fields": [
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-7854'}, fields=['frequency_of_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "What depreciation frequency applies to assets with an expected value after useful life greater than $100,000?",
      "fields": [
        "frequency_of_depreciation",
        "expected_value_after_useful_life"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'expected_value_after_useful_life': {'>': 100000}}, fields=['frequency_of_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "How often is depreciation recorded for leased equipment?",
      "fields": [
        "frequency_of_depreciation",
        "shift_based"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'shift_based': 1}, fields=['name', 'frequency_of_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Identify assets that use monthly depreciation frequency.",
      "fields": [
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'frequency_of_depreciation': 'Monthly'}, fields=['name', 'frequency_of_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "When does depreciation start for asset AF-1023?",
      "fields": [
        "depreciation_start_date"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-1023'}, fields=['depreciation_start_date'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Find the depreciation start date for asset AF-7854.",
      "fields": [
        "depreciation_start_date"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-7854'}, fields=['depreciation_start_date'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "What is the depreciation start date for leased equipment?",
      "fields": [
        "depreciation_start_date"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'asset_type': 'Leased'}, fields=['depreciation_start_date'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Retrieve depreciation start dates for assets acquired before 2020.",
      "fields": [
        "depreciation_start_date"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'acquisition_year': {'<': '2020'}}, fields=['depreciation_start_date'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Identify assets whose depreciation starts in 2023.",
      "fields": [
        "depreciation_start_date"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'depreciation_start_date': {'>=': '2023-01-01'}}, fields=['name', 'depreciation_start_date'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "What is the depreciation start date for assets with an expected value after useful life greater than $100,000?",
      "fields": [
        "depreciation_start_date",
        "expected_value_after_useful_life"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'expected_value_after_useful_life': {'>': 100000}}, fields=['name', 'depreciation_start_date'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Does asset AF-9991 have a scheduled depreciation start date?",
      "fields": [
        "depreciation_start_date"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-9991'}, fields=['depreciation_start_date'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Find depreciation start dates for assets with salvage value above 50%.",
      "fields": [
        "depreciation_start_date",
        "salvage_value_percentage"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'salvage_value_percentage': {'>': 50}}, fields=['depreciation_start_date', 'salvage_value_percentage'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Retrieve depreciation start dates for assets switching from monthly to quarterly frequency.",
      "fields": [
        "depreciation_start_date"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'frequency_of_depreciation': 'Quarterly', 'previous_frequency': 'Monthly'}, fields=['name', 'depreciation_start_date'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Identify assets that switched from an undefined to a fixed depreciation start date.",
      "fields": [
        "depreciation_start_date"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'depreciation_start_date': {'!=': None}}, fields=['name', 'depreciation_start_date'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "What is the salvage value percentage for asset record AF-2024-003?",
      "fields": [
        "salvage_value_percentage"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AF-2024-003'}, fields=['salvage_value_percentage'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Show the salvage value percentages for all asset finance books.",
      "fields": [
        "salvage_value_percentage"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', fields=['salvage_value_percentage'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Which assets have a salvage value percentage above 20?",
      "fields": [
        "salvage_value_percentage"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={ 'salvage_value_percentage': ['>', 20] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "List assets where salvage value is 0%.",
      "fields": [
        "salvage_value_percentage"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'salvage_value_percentage': 0}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Get salvage value percentages for assets that use Straight Line depreciation.",
      "fields": [
        "salvage_value_percentage",
        "depreciation_method"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'depreciation_method': 'Straight Line'}, fields=['salvage_value_percentage'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Which depreciation entries have salvage value between 10 and 15 percent?",
      "fields": [
        "salvage_value_percentage"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={ 'salvage_value_percentage': ['between', [10, 15]] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Find all assets whose retained value percentage is not zero.",
      "fields": [
        "salvage_value_percentage"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={ 'salvage_value_percentage': ['!=', 0] }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Show salvage percentages for assets starting depreciation in 2024.",
      "fields": [
        "salvage_value_percentage",
        "depreciation_start_date"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={ 'depreciation_start_date': ['between', ['2024-01-01', '2024-12-31']] }, fields=['salvage_value_percentage'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Retrieve the salvage value percentage for all assets using Reducing Balance method.",
      "fields": [
        "salvage_value_percentage",
        "depreciation_method"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'depreciation_method': 'Reducing Balance'}, fields=['salvage_value_percentage'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Give me the salvage value percent of assets that depreciate monthly.",
      "fields": [
        "salvage_value_percentage",
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'frequency_of_depreciation': 'Monthly'}, fields=['salvage_value_percentage'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "What is the depreciation rate defined for asset AFB-003?",
      "fields": [
        "rate_of_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AFB-003'}, fields=['rate_of_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "List the depreciation rate and method used for straight line assets.",
      "fields": [
        "rate_of_depreciation",
        "depreciation_method"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'depreciation_method': 'Straight Line'}, fields=['rate_of_depreciation', 'depreciation_method'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Find all assets with an annual depreciation rate above 10%.",
      "fields": [
        "rate_of_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'rate_of_depreciation': ['>', 10]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "What is the depreciation rate and start date for asset AFB-104?",
      "fields": [
        "rate_of_depreciation",
        "depreciation_start_date"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AFB-104'}, fields=['rate_of_depreciation', 'depreciation_start_date'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Which records show quarterly depreciation and more than 5% rate?",
      "fields": [
        "rate_of_depreciation",
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'frequency_of_depreciation': 'Quarterly', 'rate_of_depreciation': ['>', 5]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Give depreciation rate and expected value after use for AFB-212.",
      "fields": [
        "rate_of_depreciation",
        "expected_value_after_useful_life"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AFB-212'}, fields=['rate_of_depreciation', 'expected_value_after_useful_life'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Show depreciation rate for assets with salvage value above 15%.",
      "fields": [
        "rate_of_depreciation",
        "salvage_value_percentage"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'salvage_value_percentage': ['>', 15]}, fields=['rate_of_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "What is the depreciation rate for assets following Reducing Balance method?",
      "fields": [
        "rate_of_depreciation",
        "depreciation_method"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'depreciation_method': 'Reducing Balance'}, fields=['rate_of_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "List depreciation rates for assets posted after January 1, 2024.",
      "fields": [
        "rate_of_depreciation",
        "depreciation_start_date"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'depreciation_start_date': ['>', '2024-01-01']}, fields=['rate_of_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Find assets with over 20% depreciation rate and monthly schedule.",
      "fields": [
        "rate_of_depreciation",
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'rate_of_depreciation': ['>', 20], 'frequency_of_depreciation': 'Monthly'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "What is the estimated value of the asset after its useful life ends?",
      "fields": [
        "expected_value_after_useful_life"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={{}}, fields=['expected_value_after_useful_life'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "How much will be left of the asset’s value once it's fully depreciated?",
      "fields": [
        "expected_value_after_useful_life"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', fields=['name', 'expected_value_after_useful_life'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Retrieve the expected post-depreciation value for asset AFB-2024-004.",
      "fields": [
        "finance_book",
        "expected_value_after_useful_life",
        "finance_book"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'finance_book': 'AFB-2024-004'}, fields=['expected_value_after_useful_life'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Show the expected value and depreciation frequency for AFB-204.",
      "fields": [
        "finance_book",
        "expected_value_after_useful_life",
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'finance_book': 'AFB-204'}, fields=['expected_value_after_useful_life', 'frequency_of_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "What will be the final estimated asset value and the annual depreciation rate for asset AFB-775?",
      "fields": [
        "finance_book",
        "expected_value_after_useful_life",
        "rate_of_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'finance_book': 'AFB-775'}, fields=['expected_value_after_useful_life', 'rate_of_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Give me the expected value and the depreciation method for AFB-001.",
      "fields": [
        "finance_book",
        "expected_value_after_useful_life",
        "depreciation_method"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'finance_book': 'AFB-001'}, fields=['expected_value_after_useful_life', 'depreciation_method'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Find the salvage percent and expected post-life value for AFB-122.",
      "fields": [
        "finance_book",
        "expected_value_after_useful_life",
        "salvage_value_percentage"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'finance_book': 'AFB-122'}, fields=['expected_value_after_useful_life', 'salvage_value_percentage'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "What is the expected value after useful life and how frequently is depreciation applied?",
      "fields": [
        "expected_value_after_useful_life",
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={{}}, fields=['expected_value_after_useful_life', 'frequency_of_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Give details of depreciation method and expected asset value after use for AFB-091.",
      "fields": [
        "finance_book",
        "expected_value_after_useful_life",
        "depreciation_method"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'finance_book': 'AFB-091'}, fields=['expected_value_after_useful_life', 'depreciation_method'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Fetch the future asset value and value after depreciation for AFB-995.",
      "fields": [
        "finance_book",
        "expected_value_after_useful_life",
        "value_after_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'finance_book': 'AFB-995'}, fields=['expected_value_after_useful_life', 'value_after_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "What is the final value of the asset after depreciation ends?",
      "fields": [
        "value_after_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', fields=['value_after_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Show the post-depreciation value for asset AFB-4021.",
      "fields": [
        "name",
        "value_after_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AFB-4021'}, fields=['value_after_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Give the asset’s value after all depreciation has been posted.",
      "fields": [
        "value_after_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={}, fields=['value_after_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "What field shows the value left after all depreciation cycles?",
      "fields": [
        "total_number_of_depreciations",
        "value_after_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'total_number_of_depreciations': ['>', 0]}, fields=['value_after_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Find the end-of-life value of the asset using straight line depreciation.",
      "fields": [
        "value_after_depreciation",
        "depreciation_method"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'depreciation_method': 'Straight Line'}, fields=['value_after_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "For asset FIN-8902, what’s the remaining value after monthly depreciation?",
      "fields": [
        "name",
        "value_after_depreciation",
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'FIN-8902', 'frequency_of_depreciation': 'Monthly'}, fields=['value_after_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "How do we determine what value is left after full depreciation?",
      "fields": [
        "value_after_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', fields=['value_after_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Show value of asset AFB-999 after its useful life ends.",
      "fields": [
        "name",
        "value_after_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'name': 'AFB-999'}, fields=['value_after_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "What value remains after depreciation for assets with reducing balance method?",
      "fields": [
        "value_after_depreciation",
        "depreciation_method"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', filters={'depreciation_method': 'Reducing Balance'}, fields=['value_after_depreciation'])"
  },
  {
    "input": {
      "doctype": "Asset Finance Book",
      "question": "Which field indicates the final worth of the asset post-depreciation?",
      "fields": [
        "value_after_depreciation"
      ]
    },
    "output": "frappe.get_all('Asset Finance Book', fields=['value_after_depreciation'])"
  },
  {
    "input": {
      "doctype": "Blanket Order",
      "question": "What is the series pattern used to generate the ID for this blanket order?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Blanket Order', filters={}, fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Blanket Order",
      "question": "Identify the naming convention used to assign blanket order numbers.",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Blanket Order', filters={}, fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Blanket Order",
      "question": "Which field defines the prefix or pattern for auto-generating the agreement ID?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Blanket Order', filters={}, fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Blanket Order",
      "question": "What value structure is used to auto-assign blanket order numbers at creation?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Blanket Order', filters={}, fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Blanket Order",
      "question": "When a new blanket order is created, which field determines how its ID is generated?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Blanket Order', filters={}, fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Blanket Order",
      "question": "Show the naming format logic applied to blanket order IDs in Buekx Pvt Ltd.",
      "fields": [
        "naming_series",
        "company"
      ]
    },
    "output": "frappe.get_all('Blanket Order', filters={'company': 'Buekx Pvt Ltd'}, fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Blanket Order",
      "question": "Which field ensures sequential numbering of long-term supplier agreements?",
      "fields": [
        "naming_series",
        "blanket_order_type"
      ]
    },
    "output": "frappe.get_all('Blanket Order', filters={'blanket_order_type': 'Supplier'}, fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Blanket Order",
      "question": "What defines how the order ID is automatically structured and incremented?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Blanket Order', filters={}, fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Blanket Order",
      "question": "In the case of multiple companies, which field helps standardize the ID format for agreements?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Blanket Order', filters={}, fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Blanket Order",
      "question": "How does the system decide what prefix or series to assign to a new agreement record?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Blanket Order', filters={}, fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Who is the sales partner named 'BrightEdge Corp'?",
      "fields": []
    },
    "output": "frappe.get_doc('Sales Partner', 'BrightEdge Corp')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give name , website link of  partner who referred 'NovaTech'?",
      "fields": [
        "partner_name",
        "website",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'referral_code': 'NovaTech'}, fields=['partner_name', 'website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all sales partners along with their names and commission percentages.",
      "fields": [
        "partner_name",
        "commission_rate"
      ]
    },
    "output": "frappe.get_list('Sales Partner', fields=['partner_name', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Identify the distributor with the partner name 'QatarSuppliers Ltd.'",
      "fields": [
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'QatarSuppliers Ltd.'}, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show me the names and types of all sales partners listed on the website.",
      "fields": [
        "partner_name",
        "partner_type",
        "show_in_website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'show_in_website': 1}, fields=['partner_name', 'partner_type'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partner with the name 'Omega Resale' has a commission rate above 10%?",
      "fields": [
        "partner_name",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'Omega Resale', 'commission_rate': ['>', 10]}, fields=['partner_name', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find all partners where the name contains the word 'Global'.",
      "fields": [
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': ['like', '%Global%']}, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me a list of partner names and referral codes for email marketing.",
      "fields": [
        "partner_name",
        "referral_code"
      ]
    },
    "output": "frappe.get_list('Sales Partner',fields=['partner_name', 'referral_code'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What is the partner name and their introduction text for 'MavenConnect'?",
      "fields": [
        "partner_name",
        "introduction"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'MavenConnect'}, fields=['partner_name', 'introduction'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What type of sales partner is 'EliteMark Inc.'—a distributor or a reseller?",
      "fields": [
        "partner_name",
        "partner_type"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'partner_name': 'EliteMark Inc.'}, 'partner_type')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show me all partners who are listed as commission agents.",
      "fields": [
        "partner_type",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Commission Agent'}, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which sales partners have the partner type set as affiliate?",
      "fields": [
        "partner_type",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate'}, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find all dealer-type partners operating in the 'GCC' territory.",
      "fields": [
        "partner_type",
        "territory",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Dealer', 'territory': 'GCC'}, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What is the partner type associated with 'ResellXperts Pvt Ltd'?",
      "fields": [
        "partner_name",
        "partner_type"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'partner_name': 'ResellXperts Pvt Ltd'}, 'partner_type')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do we have any affiliates who referred new customers this quarter?",
      "fields": [
        "partner_type",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate'}, fields=['referral_code'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all resellers whose websites are publicly visible on our portal.",
      "fields": [
        "partner_type",
        "show_in_website",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Reseller', 'show_in_website': 1}, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partner types do we currently work with across all operational territories?",
      "fields": [
        "partner_type",
        "territory"
      ]
    },
    "output": "frappe.db.get_list('Sales Partner', distinct=True, fields=['partner_type', 'territory'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me the names and partner types of every partner earning over 10% commission.",
      "fields": [
        "partner_name",
        "partner_type",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'commission_rate': ['>', 10]}, fields=['partner_name', 'partner_type'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Between resellers and distributors, which type has the higher count in our system?",
      "fields": [
        "partner_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_type, COUNT(*) as total FROM `tabSales Partner` WHERE partner_type IN ('Reseller', 'Distributor') GROUP BY partner_type ORDER BY total DESC''')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which region is 'Alpha Distributors' assigned to?",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.get_value('Sales Partner', 'Alpha Distributors', 'territory')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me the territory and commission rate for 'Skyline Partners'.",
      "fields": [
        "territory",
        "commission_rate"
      ]
    },
    "output": "frappe.get_value('Sales Partner', 'Skyline Partners', ['territory', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "In which markets are our affiliate partners most active?",
      "fields": [
        "territory",
        "partner_type"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate'}, fields=['territory'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List partners operating in 'Southeast Asia' and show their partner type.",
      "fields": [
        "territory",
        "partner_name",
        "partner_type"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'Southeast Asia'}, fields=['partner_name', 'partner_type'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find all sales partners assigned to the 'GCC' territory.",
      "fields": [
        "partner_name",
        "territory"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'GCC'}, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "How many partners are listed under the 'Europe' territory?",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.db.count('Sales Partner', {'territory': 'Europe'})"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which regions have the most commission agents listed?",
      "fields": [
        "territory",
        "partner_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT territory, COUNT(*) as total FROM `tabSales Partner` WHERE partner_type = 'Commission Agent' GROUP BY territory ORDER BY total DESC''')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List the names and territories of all partners visible on our website.",
      "fields": [
        "partner_name",
        "territory",
        "show_in_website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'show_in_website': 1}, fields=['partner_name', 'territory'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What’s the combined list of regions covered by our resellers and distributors?",
      "fields": [
        "territory",
        "partner_type"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': ['in', ['Reseller', 'Distributor']]}, fields=['territory'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do we have any sales partners working in both Europe and Asia?",
      "fields": [
        "partner_name",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name FROM `tabSales Partner` WHERE territory IN ('Europe', 'Asia') GROUP BY partner_name HAVING COUNT(DISTINCT territory) = 2''')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What is the commission rate set for 'ResellXperts Pvt Ltd'?",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "frappe.get_value('Sales Partner', 'ResellXperts Pvt Ltd', 'commission_rate')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all sales partners with a commission rate above 12%.",
      "fields": [
        "name",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'commission_rate': ['>', 12]}, fields=['name','commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Who are the partners with a commission rate of exactly 10.5%?",
      "fields": [
        "name",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'commission_rate': 10.5}, fields=['name', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me names and commission rates of partners who are resellers.",
      "fields": [
        "commission_rate",
        "partner_type",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'reseller'}, fields=['partner_name', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show partners with commission rates above 8% operating in 'South Asia'.",
      "fields": [
        "partner_name",
        "commission_rate",
        "territory"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'commission_rate': ['>', 8], 'territory': 'South Asia'}, fields=['partner_name', 'commission_rate', 'territory'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Is there a partner with 0% commission rate in the system?",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "frappe.db.exists('Sales Partner', {'commission_rate': 0})"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find all distributors with commission rates between 5% and 15%.",
      "fields": [
        "partner_name",
        "partner_type",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Distributor', 'commission_rate': ['between', [5, 15]]}, fields=['partner_name', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partner offers the highest commission?",
      "fields": [
        "name",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, commission_rate FROM `tabSales Partner` ORDER BY commission_rate DESC LIMIT 1''')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do any of the top-performing partners have a commission rate below 5%?",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "frappe.db.exists('Sales Partner', {'commission_rate': ['<', 5]})"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show partner names, types, and commission rates for website-visible partners.",
      "fields": [
        "partner_name",
        "partner_type",
        "show_in_website",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'show_in_website': 1}, fields=['partner_name', 'partner_type', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Can you show the address and contact details linked to 'SummitTrade Inc.'?",
      "fields": [
        "address_contacts",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'SummitTrade Inc.'}, fields=['address_contacts'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which sales partners have more than one address or contact entry associated with them?",
      "fields": [
        "address_contacts"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'address_contacts': ['!=', []] }, fields=['address_contacts'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all contact entries found under sales partners based in the UAE.",
      "fields": [
        "address_contacts",
        "territory"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'UAE'}, fields=['address_contacts'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Are there any partners without any contact or address entries listed?",
      "fields": [
        "address_contacts",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'address_contacts': []}, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Fetch the partner name, type, and all contact records for resellers in North America.",
      "fields": [
        "partner_name",
        "partner_type",
        "territory",
        "address_contacts"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Reseller', 'territory': 'North America'}, fields=['partner_name', 'partner_type', 'address_contacts'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "How many contact records are stored for the partner 'GreenLink Pvt Ltd'?",
      "fields": [
        "address_contacts",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'GreenLink Pvt Ltd'}, fields=['address_contacts'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me a breakdown of sales partners and their total number of linked contact entries.",
      "fields": [
        "address_contacts",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields=['partner_name', 'address_contacts'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do we have any distributors that haven’t added address contacts yet?",
      "fields": [
        "partner_type",
        "address_contacts"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Distributor', 'address_contacts': []}, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show me all partners whose address_contacts field includes both phone and email.",
      "fields": [
        "address_contacts",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'address_contacts': ['has', ['phone', 'email']]}, fields=['partner_name', 'address_contacts'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What contact information exists for partners with active referral codes and visible websites?",
      "fields": [
        "address_contacts",
        "referral_code",
        "show_in_website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'referral_code': ['!=', ''], 'show_in_website': 1}, fields=['address_contacts'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Can you show the address and contact details linked to 'SummitTrade Inc.'?",
      "fields": [
        "address_contacts",
        "partner_name",
        "contact_desc",
        "address_desc",
        "territory",
        "contact_html"
      ]
    },
    "output": "partner_name = 'SummitTrade Inc.'\\nsales_partner = frappe.get_all(\\n    'Sales Partner',\\n    filters={'partner_name': partner_name},\\n    fields=['name']\\n)\\nif not sales_partner:\\n    print(f'Sales Partner '{partner_name}' not found.')\\nelse:\\n    partner_id = sales_partner[0]['name']"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which sales partners have more than one address or contact entry associated with them?",
      "fields": [
        "address_contacts",
        "partner_name",
        "address_desc",
        "contact_desc",
        "territory",
        "partner_type"
      ]
    },
    "output": "sales_partners = frappe.get_all('Sales Partner', fields=['name', 'partner_name'])\\n\\nresult = []\\nfor sp in sales_partners:\\n    # Count address records linked to this Sales Partner\\n    address_count = frappe.db.count(\\n        'Dynamic Link',\\n        filters={\\n            'link_doctype': 'Sales Partner',\\n            'link_name': sp['name'],\\n            'parenttype': 'Address'\\n        }\\n    )\\n    # Count contact records linked to this Sales Partner\\n    contact_count = frappe.db.count(\\n        'Dynamic Link',\\n        filters={\\n            'link_doctype': 'Sales Partner',\\n            'link_name': sp['name'],\\n            'parenttype': 'Contact'\\n        }\\n    )\\n    result.append({\\n        'partner_name': sp['partner_name'],\\n        'address_count': address_count,\\n        'contact_count': contact_count\\n    })\\n\\n# Filter partners with more than one address or contact\\nmulti_address_or_contact = [\\n    r for r in result\\n    if r['address_count'] > 1 or r['contact_count'] > 1\\n]\\n\\nprint('Sales Partners with more than one address or contact:')\\nprint(multi_address_or_contact)"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all contact entries found under sales partners based in the UAE.",
      "fields": [
        "address_contacts",
        "territory",
        "partner_name",
        "address_desc",
        "partner_type",
        "contact_html"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'UAE'}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Are there any partners without any contact or address entries listed?",
      "fields": [
        "address_contacts",
        "partner_name",
        "address_desc",
        "contact_desc",
        "territory",
        "partner_type"
      ]
    },
    "output": "sales_partners = frappe.get_all('Sales Partner', fields=['name', 'partner_name'])\\npartners_without_entries = []\\n\\nfor sp in sales_partners:\\n    doc = frappe.get_doc('Sales Partner', sp['name'])\\n    address_contacts = getattr(doc, 'address_contacts', '')\\n    if not address_contacts or not address_contacts.strip():\\n        partners_without_entries.append(sp['partner_name'])\\n\\nprint('Partners without any contact or address entries (address_contacts empty):', partners_without_entries)"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Fetch the partner name, type, and all contact records for resellers in North America.",
      "fields": [
        "partner_name",
        "partner_type",
        "territory",
        "address_contacts",
        "address_desc",
        "contact_desc"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Reseller', 'territory': 'North America'}, fields = ['partner_name', 'partner_type'])"
  },
  {
    "input": {
      "doctype": "Contact",
      "question": "How many contact records are stored for the partner 'GreenLink Pvt Ltd'?",
      "fields": [
        "name",
        "middle_name",
        "last_name",
        "full_name",
        "email_id",
        "user",
        "address_contact"
      ]
    },
    "output": "frappe.db.count('Contact',filters={'name': 'GreenLink Pvt Ltd'})"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me a breakdown of sales partners and their total number of linked contact entries.",
      "fields": [
        "name",
        "partner_name",
        "contact_desc"
      ]
    },
    "output": "sales_partners = frappe.get_all('Sales Partner', fields=['name', 'partner_name'])\\nresult = []\\n\\nfor sp in sales_partners:\\n    doc = frappe.get_doc('Sales Partner', sp['name'])\\n       contact_count = len(getattr(doc, 'contact_desc', []))\\n    result.append({\\n        'sales_partner': sp['partner_name'],\\n        'contact_count': contact_count\\n    })\\n\\nprint(result)"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do we have any distributors that haven’t added address contacts yet?",
      "fields": [
        "name",
        "address_contacts",
        "partner_name"
      ]
    },
    "output": "sales_partners = frappe.get_all('Sales Partner', fields=['name', 'partner_name'])\\ndistributors_without_contacts = []\\nfor sp in sales_partners:\\n    doc = frappe.get_doc('Sales Partner', sp['name'])\\n    address_contacts = getattr(doc, 'address_contacts', '')\\n    if not address_contacts or not address_contacts.strip():\\n        distributors_without_contacts.append(sp['partner_name'])\\nprint('Distributors without address contacts info (address_contacts empty):', distributors_without_contacts)"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners don’t have any address_desc provided?",
      "fields": [
        "name",
        "partner_name",
        "address_desc"
      ]
    },
    "output": "sales_partners = frappe.get_all('Sales Partner', fields=['name', 'partner_name'])\\npartners_without_address_desc = []\\nfor sp in sales_partners:\\n    doc = frappe.get_doc('Sales Partner', sp['name'])\\n    address_desc = getattr(doc, 'address_desc', '')\\n    if not address_desc or not address_desc.strip():\\n        partners_without_address_desc.append(sp['partner_name'])\\nprint('Partners without address_desc provided:', partners_without_address_desc)"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Count the number of partners with 'No. 14' in their address description.",
      "fields": [
        "name",
        "address_desc",
        "partner_name"
      ]
    },
    "output": "sales_partners = frappe.get_all('Sales Partner', fields=['name'])\\ncount = 0\\nfor sp in sales_partners:\\n    doc = frappe.get_doc('Sales Partner', sp['name'])\\n    address_desc = getattr(doc, 'address_desc', '')\\n    if address_desc and 'No. 14' in address_desc:\\n        count += 1\\nprint('Number of partners with 'No. 14' in address description:', count)"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Export the partner name and address_desc of all affiliates in the system.",
      "fields": [
        "name",
        "partner_name",
        "address_desc"
      ]
    },
    "output": "sales_partners = frappe.get_all('Sales Partner', fields=['name', 'partner_name'])\\nfor sp in sales_partners:\\n    doc = frappe.get_doc('Sales Partner', sp['name'])\\n    address_desc = getattr(doc, 'address_desc', '')\\n    print(f'Partner: {sp['partner_name']}')\\n    print(f'Address Description:\\n{address_desc}\\n{'-'*40}')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show the address_desc field for all listed partners.",
      "fields": [
        "name",
        "address_desc",
        "partner_name"
      ]
    },
    "output": "sales_partners = frappe.get_all('Sales Partner', fields=['name', 'partner_name'])\\n\\nfor sp in sales_partners:\\n    doc = frappe.get_doc('Sales Partner', sp['name'])\\n    address_desc = getattr(doc, 'address_desc', '')\\n    print(f'Partner: {sp['partner_name']}')\\n    print(f'Address Description:\\n{address_desc}')\\n    print('-' * 40)"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Can I get the address description for every distributor we work with?",
      "fields": [
        "name",
        "address_desc",
        "partner_name"
      ]
    },
    "output": "sales_partners = frappe.get_all('Sales Partner', fields=['name', 'partner_name'])\\n\\nprint('Address Descriptions for All Distributors:')\\nprint('-' * 50)\\n\\nfor sp in sales_partners:\\n    doc = frappe.get_doc('Sales Partner', sp['name'])\\n    address_desc = getattr(doc, 'address_desc', '')\\n    print(f'Distributor: {sp['partner_name']}')\\n    print(f'Address Description:\\n{address_desc}')\\n    print('-' * 50)"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which sales partners have their address_desc starting with 'Suite 3A'?",
      "fields": [
        "name",
        "address_desc",
        "partner_name"
      ]
    },
    "output": "sales_partners = frappe.get_all('Sales Partner', fields=['name', 'partner_name'])\\nresult = []\\n\\nfor sp in sales_partners:\\n    doc = frappe.get_doc('Sales Partner', sp['name'])\\n    address_desc = getattr(doc, 'address_desc', '')\\n    if address_desc and address_desc.startswith('Suite 3A'):\\n        result.append(sp['partner_name'])\\n\\nprint('Sales partners with address_desc starting with 'Suite 3A':', result)"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List names and short address descriptions of partners based in Europe.",
      "fields": [
        "name",
        "partner_name",
        "territory",
        "address_desc"
      ]
    },
    "output": "sales_partners = frappe.get_all('Sales Partner', filters={'territory': 'Europe'}, fields=['name', 'partner_name'])\\nresult = []\\n\\nfor sp in sales_partners:\\n    doc = frappe.get_doc('Sales Partner', sp['name'])\\n    address_desc = getattr(doc, 'address_desc', '')\\n    result.append({\\n        'partner_name': sp['partner_name'],\\n        'address_desc': address_desc[:100] + '...' if len(address_desc) > 100 else address_desc\\n    })\\n\\nprint('Partners in Europe with address descriptions:', result)"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get me address_desc and territory for all commission agents.",
      "fields": [
        "name",
        "address_desc",
        "territory",
        "partner_type"
      ]
    },
    "output": "sales_partners = frappe.get_all('Sales Partner', filters={'partner_type': 'Commission Agent'}, fields=['name', 'territory'])\\nresult = []\\n\\nfor sp in sales_partners:\\n    doc = frappe.get_doc('Sales Partner', sp['name'])\\n    address_desc = getattr(doc, 'address_desc', '')\\n    result.append({\\n        'address_desc': address_desc,\\n        'territory': sp['territory']\\n    })\\n\\nprint('Address descriptions and territories for commission agents:', result)"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Does 'MarketWide Inc.' have an address description stored?",
      "fields": [
        "name",
        "address_desc",
        "partner_name"
      ]
    },
    "output": "sales_partners = frappe.get_all('Sales Partner', filters={'partner_name': 'MarketWide Inc.'}, fields=['name'])\\nif sales_partners:\\n    doc = frappe.get_doc('Sales Partner', sales_partners[0]['name'])\\n    address_desc = getattr(doc, 'address_desc', '')\\n    print('Does 'MarketWide Inc.' have an address description stored?', bool(address_desc and address_desc.strip()))\\nelse:\\n    print(''MarketWide Inc.' not found.')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "How much commission does 'TradeSphere Global' earn?",
      "fields": [
        "commission_rate",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'TradeSphere Global'}, fields=['commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all sales partners earning more than 10% commission.",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'commission_rate': ['>', 10]}, fields=['commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What’s the commission rate for our distributor 'BrightWave Solutions'?",
      "fields": [
        "commission_rate",
        "partner_name",
        "partner_type"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'BrightWave Solutions', 'partner_type': 'Distributor'}, fields=['commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show names and commission percentages of all commission agents.",
      "fields": [
        "partner_name",
        "partner_type",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Commission Agent'}, fields=['partner_name', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find partners earning less than or equal to 5% commission.",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'commission_rate': ['<=', 5]}, fields=['commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Is there any partner with exactly 12% commission?",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'commission_rate': 12}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me the partner name, website, and commission percentage for all resellers.",
      "fields": [
        "partner_name",
        "partner_type",
        "website",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Reseller'}, fields=['partner_name', 'website', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Compare the commission rates between 'TradeWing Pvt Ltd' and 'GlobalReach Partners'.",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': ['in', ['TradeWing Pvt Ltd', 'GlobalReach Partners']]}, fields=['commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What are the commission rates for all partners based in 'MENA' region?",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'MENA'}, fields=['commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Are distributors earning more commission than affiliates?",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': ['in', ['Distributor', 'Affiliate']]}, fields=['commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What is the description given for 'Orbit Trade Solutions' in our partner records?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'Orbit Trade Solutions'}, fields=['description'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all partners along with their descriptions.",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields=['partner_name', 'description'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners include the word 'logistics' in their description?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'description': ['like', '%logistics%']}, fields=['partner_name', 'description'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Can you show the name and description of each partner based in Asia?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'Asia'}, fields=['partner_name', 'description'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Can you show the name and description of each partner based in Asia?",
      "fields": [
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'Asia'}, fields=['partner_name', 'description'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get me the description and partner type for affiliates in our list.",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'affiliate'}, fields=['description', 'partner_type'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get me the description and partner type for affiliates in our list.",
      "fields": [
        "partner_type"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'affiliate'}, fields=['description', 'partner_type'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do we have a partner with 'ecommerce' mentioned in the description?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'description': ['like', '%ecommerce%']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Compare the descriptions of 'BrightLeaf Group' and 'CoreBridge Alliance'.",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': ['in', ['BrightLeaf Group', 'CoreBridge Alliance']]}, fields=['partner_name', 'description'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show me names and descriptions of all partners who earn over 15% commission.",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'commission_rate': ['>', 15] }, fields=['partner_name', 'description'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show me names and descriptions of all partners who earn over 15% commission.",
      "fields": [
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'commission_rate': ['>', 15] }, fields=['partner_name', 'description'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What’s the official description of our partner 'LogiMax Pvt Ltd'?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'LogiMax Pvt Ltd'}, fields=['description'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find all partners who have empty or missing descriptions.",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'description': ['in', ['', null]]}, fields=['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show me the contact details displayed for 'Orbit Connect Pvt Ltd'.",
      "fields": [
        "contact_html"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'Orbit Connect Pvt Ltd'}, fields=['contact_html'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which sales partners have formatted contact information available?",
      "fields": [
        "contact_html"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'contact_html': ['!=', '']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do we store contact HTML for each partner profile?",
      "fields": [
        "contact_html"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'contact_html': ['!=', '']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get a list of all partners with their HTML-based contact blocks.",
      "fields": [
        "contact_html"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'contact_html': ['!=', '']}, fields=['partner_name', 'contact_html'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners have both their formatted contacts and website links listed?",
      "fields": [
        "contact_html",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'contact_html': ['!=', ''], 'website': ['!=', ''] }, fields=['partner_name', 'contact_html', 'website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me the contact block and territory for all resellers.",
      "fields": [
        "contact_html",
        "territory"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Reseller'}, fields=['contact_html', 'territory'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find partners who have provided both contact HTML and introduction.",
      "fields": [
        "contact_html",
        "introduction"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'contact_html': ['!=', ''], 'introduction': ['!=', ''] }, fields=['partner_name', 'contact_html', 'introduction'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What are the targets set for each of our sales partners?",
      "fields": [
        "targets"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields=['targets'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me the list of all partners along with their sales targets.",
      "fields": [
        "partner_name",
        "targets"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields=['partner_name', 'targets'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show targets assigned to distributor-type partners across all territories.",
      "fields": [
        "partner_type",
        "targets"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Distributor'}, fields=['partner_type', 'targets'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partner has the highest sales target set for this year?",
      "fields": [
        "partner_name",
        "targets"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields=['partner_name', 'targets'], order_by='targets desc', limit=1)"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List partner names and their targets who operate in the UAE region.",
      "fields": [
        "partner_name",
        "targets"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'UAE'}, fields=['partner_name', 'targets'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Can you show me partner types and the targets they are expected to meet?",
      "fields": [
        "partner_type",
        "targets"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields=['partner_type', 'targets'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me all partners marked as affiliates with targets above QAR 500,000.",
      "fields": [
        "partner_type",
        "targets"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate', 'targets': ('>', 500000)}, fields=['partner_type', 'targets'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which of our resellers have sales targets for the upcoming quarter?",
      "fields": [
        "partner_type",
        "targets"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Reseller'}, fields=['partner_type', 'targets'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Compare sales targets across partner types and list the top performers.",
      "fields": [
        "partner_type",
        "targets"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields=['partner_type', 'targets'], order_by='targets desc')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do we have any partners without any assigned sales targets?",
      "fields": [
        "targets"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'targets': ''}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What is the official website of 'Torotta Avlaye'?",
      "fields": [
        "partner_name",
        "website"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'partner_name': 'Torotta Avlaye'}, 'website')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all partners whose websites end with '.com.qa'.",
      "fields": [
        "website",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'website': ['like', '%.com.qa']}, fields=['name', 'website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do any of our reseller partners have websites listed?",
      "fields": [
        "partner_type",
        "website",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Reseller', 'website': ['!=', '']}, fields=['name', 'website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show partner names and their websites for those visible to the public.",
      "fields": [
        "partner_name",
        "website",
        "show_in_website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'show_in_website': 1}, fields=['partner_name', 'website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners have no website provided in their records?",
      "fields": [
        "website",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'website': ['=', '']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get me a list of partner websites containing the word 'global'.",
      "fields": [
        "website",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'website': ['like', '%global%']}, fields=['partner_name', 'website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Can you find all distributor partners and display their website URLs?",
      "fields": [
        "partner_type",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Distributor'}, fields=['website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do we have any affiliate partners with websites ending in '.org'?",
      "fields": [
        "partner_type",
        "website",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate', 'website': ['like', '%.org']}, fields=['name', 'website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Between 'Resell360' and 'OmniPartners', which one has a listed website?",
      "fields": [
        "partner_name",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': ['in', ['Resell360', 'OmniPartners']], 'website': ['!=', '']}, fields=['partner_name', 'website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partner has the website 'www.synergylink.com'?",
      "fields": [
        "website",
        "partner_name"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'website': 'www.synergylink.com'}, 'partner_name')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all partners along with their referral_code values.",
      "fields": [
        "name",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields=['name', 'referral_code'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners don’t have any referral_code provided in their records?",
      "fields": [
        "referral_code",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'referral_code': ''}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find partners who have referral codes starting with 'AFF-'.",
      "fields": [
        "name",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'referral_code': ['like', 'AFF-%']}, fields=['name', 'referral_code'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get the referral_code and website for all affiliate-type partners.",
      "fields": [
        "partner_type",
        "referral_code",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate'}, fields=['referral_code', 'website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Export partner_name and referral_code for all partners in Qatar.",
      "fields": [
        "territory",
        "partner_name",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'Qatar'}, fields=['partner_name', 'referral_code'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What is the referral code assigned to 'Altura Traders'?",
      "fields": [
        "partner_name",
        "referral_code"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'partner_name': 'Altura Traders'}, 'referral_code')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Does 'Zenith Connect' have a referral_code assigned?",
      "fields": [
        "partner_name",
        "referral_code"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'partner_name': 'Zenith Connect'}, 'referral_code')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Count how many partners have valid referral codes stored.",
      "fields": [
        "referral_code"
      ]
    },
    "output": "frappe.db.count('Sales Partner', {'referral_code': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What is the route path assigned to 'GlobalLink Solutions' on our website?",
      "fields": [
        "route",
        "partner_name"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'partner_name': 'GlobalLink Solutions'}, 'route')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all sales partners whose route starts with '/partners/'.",
      "fields": [
        "name",
        "route"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'route': ['like', '/partners/%']}, fields=['name', 'route'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show me the partner names and their corresponding web route paths.",
      "fields": [
        "partner_name",
        "route"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields=['partner_name', 'route'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners have unique route entries configured for the site?",
      "fields": [
        "name",
        "route"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'route': ['!=', '']}, fields=['name', 'route'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do we have any partners using the default route value or an empty one?",
      "fields": [
        "name",
        "route"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'route': ''}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Between 'TradeBridge' and 'MarketScope', who has a custom route defined?",
      "fields": [
        "partner_name",
        "route"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': ['in', ['TradeBridge', 'MarketScope']], 'route': ['!=', '']}, fields=['partner_name', 'route'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me all route entries that contain the word 'exclusive'.",
      "fields": [
        "route"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'route': ['like', '%exclusive%']}, fields=['route'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which sales partner has the URL route '/partner-profile/gcc-distributor'?",
      "fields": [
        "partner_name",
        "route"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'route': '/partner-profile/gcc-distributor'}, 'partner_name')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Export all visible partners on the website along with their route links.",
      "fields": [
        "partner_name",
        "route",
        "show_in_website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'show_in_website': 1}, fields=['partner_name', 'route'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Are there any route fields duplicated across different partners?",
      "fields": [
        "route"
      ]
    },
    "output": "frappe.db.sql('SELECT route, COUNT(*) FROM `tabSales Partner` GROUP BY route HAVING COUNT(*) > 1')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What is the external website link provided for 'BlueOcean Vendors'?",
      "fields": [
        "partner_name",
        "partner_website",
        "route",
        "logo"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'partner_name': 'BlueOcean Vendors'}, 'partner_website')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List the partner_website URLs of all partners visible to customers.",
      "fields": [
        "partner_website",
        "show_in_website",
        "website",
        "contact_desc"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'show_in_website': 1}, fields=['partner_website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Can I view the official external sites for all commission agents?",
      "fields": [
        "partner_website",
        "commission_rate",
        "referral_code",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'commission_rate': ['!=', 0]}, fields=['partner_website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get partner names and partner_website links for reseller-type entries.",
      "fields": [
        "partner_name",
        "partner_website",
        "partner_type",
        "referral_code",
        "route"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Reseller'}, fields=['partner_name', 'partner_website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners do not have a partner_website listed yet?",
      "fields": [
        "partner_website",
        "description",
        "contact_html",
        "logo"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_website': ''}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Are there any affiliate partners whose websites contain 'tradehub'?",
      "fields": [
        "partner_type",
        "partner_website",
        "website",
        "route"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate', 'partner_website': ['like', '%tradehub%']}, fields=['partner_website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Between 'NetBridge Ltd' and 'MarketSpark', who has a valid partner_website?",
      "fields": [
        "partner_name",
        "partner_website",
        "introduction",
        "route"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': ['in', ['NetBridge Ltd', 'MarketSpark']], 'partner_website': ['!=', '']}, fields=['partner_name', 'partner_website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show all partner_website URLs that end in '.tech' domain.",
      "fields": [
        "partner_website",
        "route",
        "website",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_website': ['like', '%.tech']}, fields=['partner_website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do any of the partners have a link to 'https://affiliateworld.org' in their records?",
      "fields": [
        "partner_website",
        "website",
        "route",
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_website': 'https://affiliateworld.org'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Fetch the partner_website and contact description for partners in South America.",
      "fields": [
        "partner_website",
        "contact_desc",
        "territory",
        "route"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'South America'}, fields=['partner_website', 'contact_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What is the introduction note for 'Orbit Traders' in our sales partner list?",
      "fields": [
        "introduction"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'partner_name': 'Orbit Traders'}, 'introduction')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show me all partners along with their introduction texts.",
      "fields": [
        "name",
        "introduction"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields=['name', 'introduction'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which sales partners have introduction messages starting with 'Leading exporter'?",
      "fields": [
        "name",
        "introduction"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'introduction': ['like', 'Leading exporter%']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List the name and introduction for every commission agent.",
      "fields": [
        "partner_type",
        "partner_name",
        "introduction"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Commission Agent'}, fields=['partner_name', 'introduction'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners don't have any introduction filled in?",
      "fields": [
        "name",
        "introduction"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'introduction': ''}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Provide all introductions for partners in the European region.",
      "fields": [
        "territory",
        "introduction"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'Europe'}, fields=['introduction'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Export a list of reseller-type partners and their introduction fields.",
      "fields": [
        "partner_type",
        "introduction"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Reseller'}, fields=['introduction'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Check if 'GlobeX Trade Corp' has an introduction field entered.",
      "fields": [
        "partner_name",
        "introduction"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'partner_name': 'GlobeX Trade Corp'}, 'introduction')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "How many sales partners have included an introduction message?",
      "fields": [
        "introduction"
      ]
    },
    "output": "frappe.db.count('Sales Partner', {'introduction': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all partners whose introductions contain the word 'global'.",
      "fields": [
        "name",
        "introduction"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'introduction': ['like', '%global%']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "What is the naming pattern used to generate supplier IDs?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_single_value('Supplier', 'naming_series')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Can you show me how supplier codes are automatically generated?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_single_value('Supplier', 'naming_series')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which document controls the prefix used for new supplier entries?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_single_value('Supplier', 'naming_series')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find out how supplier numbers are structured in the system.",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_single_value('Supplier', 'naming_series')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Where is the supplier ID format like 'SUP-.YYYY.-' defined?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_single_value('Supplier', 'naming_series')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How are suppliers named when records are created?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_single_value('Supplier', 'naming_series')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "What format is used for supplier auto-generated names?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_single_value('Supplier', 'naming_series')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Is there a setting that defines how new supplier records are named?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_single_value('Supplier', 'naming_series')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which doctype includes the naming_series for vendors?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Supplier',fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "What is the naming pattern for the vendors?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_single_value('Supplier', 'naming_series')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who is the vendor with code SUP-00015? I need their registered name for invoicing.",
      "fields": [
        "supplier_name"
      ]
    },
    "output": "frappe.get_value('Supplier', {'name': 'SUP-00015'}, 'supplier_name')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Pull up a list of suppliers based in Germany for vendor negotiations.",
      "fields": [
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'Germany'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me the supplier name for internal transport services. We need to update the contract.",
      "fields": [
        "supplier_name",
        "is_transporter"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the supplier name and mobile number for 'Metallic Edge Corp'.",
      "fields": [
        "supplier_name",
        "mobile_no"
      ]
    },
    "output": "frappe.get_value('Supplier', {'supplier_name': 'Metallic Edge Corp'}, ['supplier_name', 'mobile_no'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find the supplier that uses the email 'supplies@techlink.io'.",
      "fields": [
        "supplier_name",
        "email_id"
      ]
    },
    "output": "frappe.get_value('Supplier', {'email_id': 'supplies@techlink.io'}, 'supplier_name')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get me the supplier name and default currency for vendors that are marked frozen in the system.",
      "fields": [
        "supplier_name",
        "default_currency",
        "is_frozen"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_frozen': 1}, fields=['supplier_name', 'default_currency'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Check the supplier name and primary contact for vendor ID SUP-00021.",
      "fields": [
        "supplier_name",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.get_value('Supplier', {'name': 'SUP-00021'}, ['supplier_name', 'supplier_primary_contact'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all active suppliers under the 'Raw Material' group.",
      "fields": [
        "supplier_name",
        "supplier_group",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_group': 'Raw Material', 'disabled': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "I need supplier names and email IDs for transport service providers.",
      "fields": [
        "supplier_name",
        "email_id",
        "is_transporter"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields=['supplier_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which country is 'Atlantic Trade Co.' registered in?",
      "fields": [
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.get_value('Supplier', {'supplier_name': 'Atlantic Trade Co.'}, 'country')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers located in the United Arab Emirates.",
      "fields": [
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'United Arab Emirates'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get suppliers from India and Bangladesh for textile sourcing.",
      "fields": [
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': ['in', ['India', 'Bangladesh']]}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me vendors registered in countries outside the EU.",
      "fields": [
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': ['not in', ['Germany', 'France', 'Italy', 'Spain']]}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do we have any suppliers from South Korea?",
      "fields": [
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'South Korea'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Filter all supplier entries that mention 'Germany' as their country.",
      "fields": [
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'Germany'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How many suppliers are currently registered in China?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.db.count('Supplier', {'country': 'China'})"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Export list of suppliers along with their country of operation.",
      "fields": [
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'country'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which vendors are based in Australia and New Zealand?",
      "fields": [
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': ['in', ['Australia', 'New Zealand']]}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who are our suppliers from Latin American countries?",
      "fields": [
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': ['in', ['Brazil', 'Argentina', 'Colombia', 'Chile']]}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which supplier group does 'Fresh Agro Supplies' fall under?",
      "fields": [
        "supplier_group",
        "supplier_name"
      ]
    },
    "output": "frappe.get_value('Supplier', {'supplier_name': 'Fresh Agro Supplies'}, 'supplier_group')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers categorized under 'Raw Material Vendors'.",
      "fields": [
        "supplier_group",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_group': 'Raw Material Vendors'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How many suppliers do we have in the 'Importers' group?",
      "fields": [
        "supplier_group",
        "email_id",
        "image",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.db.count('Supplier', {'supplier_group': 'Importers'})"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the supplier names and their groups for all active vendors from India.",
      "fields": [
        "supplier_group",
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India'}, fields=['supplier_name', 'supplier_group'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show the group classification for suppliers that are transport service providers.",
      "fields": [
        "supplier_group",
        "is_transporter",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields=['supplier_name', 'supplier_group'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do we have any local suppliers under the 'Capital Equipment' group?",
      "fields": [
        "supplier_group",
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_group': 'Capital Equipment', 'country': 'India'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Pull all supplier records under the 'Utilities & Services' group with payment terms set.",
      "fields": [
        "supplier_group",
        "payment_terms",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_group': 'Utilities & Services', 'payment_terms': ['!=', '']}, fields=['supplier_name', 'payment_terms'])"
  },
  {
    "input": {
      "doctype": "BOM",
      "question": "List all active BOMs for item 'Steel Frame Assembly', sorted by creation date.",
      "fields": [
        "item",
        "is_active",
        "creation"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT name, item, creation\nFROM `tabBOM`\nWHERE is_active = 1 AND item = 'Steel Frame Assembly'\nORDER BY creation ASC\n\"\"\")"
  },
  {
    "input": {
      "doctype": "BOM",
      "question": "Which BOMs include alternative items like 'Aluminum Rod'?",
      "fields": [
        "name",
        "items",
        "allow_alternative_item"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT bom.name, bi.item_code, bi.alternative_item\nFROM `tabBOM` bom\nJOIN `tabBOM Item` bi ON bom.name = bi.parent\nWHERE bi.alternative_item = 'Aluminum Rod'\n\"\"\")"
  },
  {
    "input": {
      "doctype": "BOM",
      "question": "Which BOMs use routing 'Assembly Line A' and what are their names?",
      "fields": [
        "name",
        "routing"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT name, routing\nFROM `tabBOM`\nWHERE routing = 'Assembly Line A'\n\"\"\")"
  },
  {
    "input": {
      "doctype": "BOM",
      "question": "List BOMs that have more than 5 exploded items.",
      "fields": [
        "name",
        "items"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT bi.parent AS bom_name, COUNT(bi.item_code) AS exploded_item_count\nFROM `tabBOM Item` bi\nGROUP BY bi.parent\nHAVING COUNT(bi.item_code) > 5\n\"\"\")"
  },
  {
    "input": {
      "doctype": "BOM",
      "question": "Which BOMs were amended from 'BOM-STEEL-001'?",
      "fields": [
        "name",
        "amended_from"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT name, amended_from\nFROM `tabBOM`\nWHERE amended_from = 'BOM-STEEL-001'\n\"\"\")"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "For each supplier group, show the default currency and the number of associated suppliers.",
      "fields": [
        "supplier_group",
        "default_currency"
      ]
    },
    "output": "frappe.db.get_list('Supplier', fields=['supplier_group', 'default_currency'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any suppliers who also handle transportation services for us?",
      "fields": [
        "is_transporter"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which vendors are marked as transport providers for our delivery operations?",
      "fields": [
        "is_transporter",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Pull up supplier names along with their transport service status for audit purposes.",
      "fields": [
        "supplier_name",
        "is_transporter"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'is_transporter'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show transport status and type for all active vendors.",
      "fields": [
        "is_transporter",
        "supplier_type",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 0}, fields=['is_transporter', 'supplier_type'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers in our system provide transport services along with their products?",
      "fields": [
        "is_transporter",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List supplier name, group, and transport status for review.",
      "fields": [
        "supplier_name",
        "supplier_group",
        "is_transporter"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'supplier_group', 'is_transporter'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which vendors don’t provide transport services but outsource deliveries?",
      "fields": [
        "is_transporter",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me all suppliers with their names and whether they handle transportation.",
      "fields": [
        "supplier_name",
        "is_transporter"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'is_transporter'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the supplier name, type, and transport capability status for construction vendors.",
      "fields": [
        "supplier_name",
        "supplier_type",
        "is_transporter",
        "supplier_group"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_group': 'Construction'}, fields=['supplier_name', 'supplier_type', 'is_transporter'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which of our suppliers also operate as logistics partners?",
      "fields": [
        "is_transporter",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers who haven't uploaded their business image yet.",
      "fields": [
        "image",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'image': ''}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Pull the image and default currency info for active suppliers.",
      "fields": [
        "image",
        "default_currency",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 0}, fields=['image', 'default_currency'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which vendors have profile pictures and valid email addresses?",
      "fields": [
        "image",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'image': ['!=', ''], 'email_id': ['!=', '']}, fields=['image', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do any suppliers have images associated with their company profiles?",
      "fields": [
        "image",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'image': ['!=', '']}, fields=['supplier_name', 'image'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get me the profile pictures and contact details of key international vendors.",
      "fields": [
        "image",
        "mobile_no",
        "email_id",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'International'}, fields=['image', 'mobile_no', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which vendors have uploaded a profile image in the system?",
      "fields": [
        "image",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'image': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me the supplier name and image for all internal suppliers.",
      "fields": [
        "supplier_name",
        "image",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1}, fields=['supplier_name', 'image'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers along with their logos for catalog publishing.",
      "fields": [
        "supplier_name",
        "image"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'image': ['!=', '']}, fields=['supplier_name', 'image'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do we have image records for vendors categorized as 'Transport Services'?",
      "fields": [
        "image",
        "supplier_name",
        "supplier_type"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_type': 'Transport Services', 'image': ['!=', '']}, fields=['supplier_name', 'image'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the name, type, and image of all disabled suppliers.",
      "fields": [
        "supplier_name",
        "supplier_type",
        "image",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1}, fields=['supplier_name', 'supplier_type', 'image'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers with a configured default bank account.",
      "fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['!=', '']}, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers don't have any default bank account set?",
      "fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ''}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the names and default bank accounts of all internal suppliers.",
      "fields": [
        "supplier_name",
        "default_bank_account",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1}, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Pull all disabled suppliers who still have default bank accounts linked.",
      "fields": [
        "disabled",
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1, 'default_bank_account': ['!=', '']}, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which vendors use 'HSBC Main' as their default bank?",
      "fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': 'HSBC Main'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Retrieve the supplier name, currency, and bank account for international suppliers.",
      "fields": [
        "supplier_name",
        "default_currency",
        "default_bank_account",
        "supplier_group"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_group': 'International'}, fields=['supplier_name', 'default_currency', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get all suppliers with both a default bank account and a tax ID.",
      "fields": [
        "default_bank_account",
        "tax_id",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={[ 'default_bank_account', '!=', '' ], [ 'tax_id', '!=', '' ]}, fields=['supplier_name', 'default_bank_account', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me a list of all vendors and their bank accounts for payment processing.",
      "fields": [
        "supplier_name",
        "default_bank_account"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={}, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any suppliers with missing bank and price list setup?",
      "fields": [
        "default_bank_account",
        "default_price_list",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={[ 'default_bank_account', '=', '' ], [ 'default_price_list', '=', '' ]}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List internal suppliers who have a bank account but no tax ID.",
      "fields": [
        "is_internal_supplier",
        "default_bank_account",
        "supplier_name",
        "tax_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={ 'is_internal_supplier': 1, 'default_bank_account': ['!=', ''], 'tax_id': '' }, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers with a configured default bank account.",
      "fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['isnot', '']}, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers don't have any default bank account set?",
      "fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the names and default bank accounts of all internal suppliers.",
      "fields": [
        "supplier_name",
        "default_bank_account",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1}, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Pull all disabled suppliers who still have default bank accounts linked.",
      "fields": [
        "supplier_name",
        "default_bank_account",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1, 'default_bank_account': ['isnot', '']}, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which vendors use 'HSBC Main' as their default bank?",
      "fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': 'HSBC Main'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Retrieve the supplier name, currency, and bank account for international suppliers.",
      "fields": [
        "supplier_name",
        "default_currency",
        "default_bank_account",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': ['!=', 'Local']}, fields=['supplier_name', 'default_currency', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get all suppliers with both a default bank account and a tax ID.",
      "fields": [
        "default_bank_account",
        "tax_id",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['isnot', ''], 'tax_id': ['isnot', '']}, fields=['supplier_name', 'default_bank_account', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me a list of all vendors and their bank accounts for payment processing.",
      "fields": [
        "supplier_name",
        "default_bank_account"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['isnot', '']}, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any suppliers with missing bank and price list setup?",
      "fields": [
        "default_bank_account",
        "default_price_list",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': '', 'default_price_list': ''}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List internal suppliers who have a bank account but no tax ID.",
      "fields": [
        "is_internal_supplier",
        "default_bank_account",
        "tax_id",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'default_bank_account': ['isnot', ''], 'tax_id': ''}, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "What is the default bank account associated with each supplier?",
      "fields": [
        "default_bank_account"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get supplier names along with their default bank accounts.",
      "fields": [
        "supplier_name",
        "default_bank_account"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which internal suppliers have a default bank account listed?",
      "fields": [
        "is_internal_supplier",
        "default_bank_account"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1}, fields=['default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me the name, currency, and default bank account for all active suppliers.",
      "fields": [
        "supplier_name",
        "default_currency",
        "default_bank_account",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 0}, fields=['supplier_name', 'default_currency', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers who have no default bank account setup but are not frozen.",
      "fields": [
        "default_bank_account",
        "is_frozen"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': '', 'is_frozen': 0}, fields=['default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Pull suppliers with both a valid default bank account and price list.",
      "fields": [
        "default_bank_account",
        "default_price_list"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['!=', ''], 'default_price_list': ['!=', '']}, fields=['default_bank_account', 'default_price_list'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers that are not disabled and have bank details set for default transactions.",
      "fields": [
        "default_bank_account",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 0, 'default_bank_account': ['!=', '']}, fields=['default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me the suppliers who represent companies and have default bank accounts set.",
      "fields": [
        "represents_company",
        "default_bank_account"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['!=', ''], 'represents_company': ['!=', '']}, fields=['default_bank_account', 'represents_company'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Export supplier names and their bank accounts used for automatic payments.",
      "fields": [
        "supplier_name",
        "default_bank_account",
        "payment_terms"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'default_bank_account', 'payment_terms'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do any vendors lack a default bank account for incoming payment setups?",
      "fields": [
        "default_bank_account"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ''}, fields=['default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which sales partners have 'Standard Selling' as their default price list?",
      "fields": [
        "default_price_list"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'default_price_list': 'Standard Selling'}, fields = ['default_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show me all partners and their assigned default price lists.",
      "fields": [
        "partner_name",
        "default_price_list"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields = ['partner_name', 'default_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Are there any partners that haven’t selected a default price list yet?",
      "fields": [
        "partner_name",
        "default_price_list"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'default_price_list': ['=', '']}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me the names of partners in Europe using 'Retail Prices' as their default list.",
      "fields": [
        "partner_name",
        "territory",
        "default_price_list"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'Europe', 'default_price_list': 'Retail Prices'}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Who is using 'Wholesale Rates' as the default price list and is also a reseller?",
      "fields": [
        "partner_name",
        "partner_type",
        "default_price_list"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Reseller', 'default_price_list': 'Wholesale Rates'}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List distributors with missing default price list configuration.",
      "fields": [
        "partner_name",
        "partner_type",
        "default_price_list"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Distributor', 'default_price_list': ['=', '']}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Can I see which default price list 'SkyTrade Ltd' is using?",
      "fields": [
        "partner_name",
        "default_price_list"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'SkyTrade Ltd'}, fields = ['default_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which affiliates are assigned 'International Pricing' as their default price list?",
      "fields": [
        "partner_type",
        "default_price_list",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate', 'default_price_list': 'International Pricing'}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "How many sales partners use the 'Qatar Discounted List' by default?",
      "fields": [
        "default_price_list"
      ]
    },
    "output": "frappe.db.count('Sales Partner', {'default_price_list': 'Qatar Discounted List'})"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "I want to audit all partners that use a price list starting with 'North America'.",
      "fields": [
        "default_price_list",
        "partner_name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'default_price_list': ['like', 'North America%']}, fields = ['partner_name', 'default_price_list'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have 'Standard Chartered - 112233' as their bank?",
      "fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': 'Standard Chartered - 112233'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me all partners and their assigned default bank accounts.",
      "fields": [
        "supplier_name",
        "default_bank_account"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any suppliers that haven’t set up a default bank account yet?",
      "fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Does 'Pacific Traders' have a default bank account set?",
      "fields": [
        "default_bank_account"
      ]
    },
    "output": "frappe.get_value('Supplier', 'Pacific Traders', 'default_bank_account')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers with their default bank accounts defined.",
      "fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['!=', '']}, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find internal suppliers using 'Standard Chartered - 112233' as their bank.",
      "fields": [
        "is_internal_supplier",
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'default_bank_account': 'Standard Chartered - 112233'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who are the UAE suppliers that use 'Mashreq Bank - 4455' by default?",
      "fields": [
        "country",
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'United Arab Emirates', 'default_bank_account': 'Mashreq Bank - 4455'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How many suppliers use a defined default bank account?",
      "fields": [
        "default_bank_account"
      ]
    },
    "output": "frappe.db.count('Supplier', {'default_bank_account': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers using a bank account starting with 'Doha Bank'.",
      "fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['like', 'Doha Bank%']}, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Check the default bank account of 'BrightBridge Supplies' if available.",
      "fields": [
        "default_bank_account"
      ]
    },
    "output": "frappe.get_value('Supplier', 'BrightBridge Supplies', 'default_bank_account')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers represent HTS Qatar?",
      "fields": [
        "represents_company",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'represents_company': 'HTS Qatar'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List the suppliers and companies they represent.",
      "fields": [
        "supplier_name",
        "represents_company"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'represents_company'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do we have any suppliers that do not represent a company?",
      "fields": [
        "supplier_name",
        "represents_company"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'represents_company': ['=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How many suppliers are linked to 'Global Traders Inc.'?",
      "fields": [
        "represents_company"
      ]
    },
    "output": "frappe.db.count('Supplier', {'represents_company': 'Global Traders Inc.'})"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Check which company 'BrightSource LLC' represents.",
      "fields": [
        "represents_company"
      ]
    },
    "output": "frappe.get_value('Supplier', 'BrightSource LLC', 'represents_company')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who are the suppliers from India representing a company?",
      "fields": [
        "country",
        "represents_company",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'represents_company': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me suppliers who represent 'Vertex Technologies' and are internal vendors.",
      "fields": [
        "represents_company",
        "is_internal_supplier",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'represents_company': 'Vertex Technologies', 'is_internal_supplier': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which company does 'Delta Logistics' represent and what is their email?",
      "fields": [
        "supplier_name",
        "represents_company",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_name': 'Delta Logistics'}, fields=['represents_company', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers that represent companies starting with 'Qatar'.",
      "fields": [
        "represents_company",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'represents_company': ['like', 'Qatar%']}, fields=['supplier_name', 'represents_company'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there suppliers that represent different companies across territories?",
      "fields": [
        "represents_company",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT represents_company, COUNT(DISTINCT country) as territories FROM `tabSupplier` WHERE represents_company IS NOT NULL GROUP BY represents_company HAVING territories > 1''')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which companies is 'Max Traders Ltd' associated with as a supplier?",
      "fields": [
        "supplier_name",
        "companies"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_name': 'Max Traders Ltd'}, fields=['companies'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers and their linked companies.",
      "fields": [
        "supplier_name",
        "companies"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'companies'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there suppliers associated with more than one company?",
      "fields": [
        "supplier_name",
        "companies"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM `tabSupplier` WHERE JSON_LENGTH(companies) > 1''')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How many suppliers are linked with 'Qatar Oil Co' as their company?",
      "fields": [
        "companies"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) FROM `tabSupplier` WHERE JSON_CONTAINS(companies, ''Qatar Oil Co'')''')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Fetch the companies for supplier 'BrightLogix LLC'.",
      "fields": [
        "companies"
      ]
    },
    "output": "frappe.get_value('Supplier', 'BrightLogix LLC', 'companies')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do we have any suppliers not linked to any company?",
      "fields": [
        "supplier_name",
        "companies"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'companies': ['=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give the names of suppliers in India connected to multiple companies.",
      "fields": [
        "supplier_name",
        "country",
        "companies"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM `tabSupplier` WHERE country = 'India' AND JSON_LENGTH(companies) > 1''')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers grouped by the company they represent.",
      "fields": [
        "companies"
      ]
    },
    "output": "frappe.db.sql('''SELECT JSON_UNQUOTE(JSON_EXTRACT(companies, '$[0]')) AS company, COUNT(*) as total_suppliers FROM `tabSupplier` GROUP BY company''')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get a list of internal suppliers and their companies.",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "companies"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1}, fields=['supplier_name', 'companies'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are linked with 'HTS Qatar' and listed under 'International Vendors' group?",
      "fields": [
        "supplier_name",
        "supplier_group",
        "companies"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM `tabSupplier` WHERE supplier_group = 'International Vendors' AND JSON_CONTAINS(companies, ''HTS Qatar'')''')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me all suppliers along with their business background or description.",
      "fields": [
        "supplier_name",
        "supplier_details"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'supplier_details'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "What’s written in the profile section of 'GulfSteel Ltd'?",
      "fields": [
        "supplier_details"
      ]
    },
    "output": "frappe.get_value('Supplier', 'GulfSteel Ltd', 'supplier_details')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers that have 'construction materials' mentioned in their business description.",
      "fields": [
        "supplier_name",
        "supplier_details"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_details': ['like', '%construction materials%']}, fields=['supplier_name', 'supplier_details'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any suppliers whose profile mentions both logistics and warehousing?",
      "fields": []
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabSupplier` WHERE supplier_details LIKE '%logistics%' AND supplier_details LIKE '%warehousing%'''')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Retrieve details of internal suppliers describing supply chain services.",
      "fields": [
        "supplier_name",
        "supplier_details"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'supplier_details': ['like', '%supply chain%']}, fields=['supplier_name', 'supplier_details'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have not provided any business description yet?",
      "fields": [
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_details': ['=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get supplier names and details for those in the 'Raw Materials' group.",
      "fields": [
        "supplier_name",
        "supplier_details"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_group': 'Raw Materials'}, fields=['supplier_name', 'supplier_details'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers with 'Retailer' type have lengthy descriptions in their profile?",
      "fields": []
    },
    "output": "frappe.db.sql('''SELECT name, supplier_details FROM `tabSupplier` WHERE supplier_type = 'Retailer' AND LENGTH(supplier_details) > 200''')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Tell me about the description and background of ‘Oceanic Trade Co’.",
      "fields": [
        "supplier_details"
      ]
    },
    "output": "frappe.get_value('Supplier', 'Oceanic Trade Co', 'supplier_details')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "I want to find suppliers whose details mention 'eco-friendly' or 'green'.",
      "fields": [
        "supplier_details"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabSupplier` WHERE supplier_details LIKE '%eco-friendly%' OR supplier_details LIKE '%green%'''')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have specified their preferred communication language?",
      "fields": [
        "language",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'language': ['!=', '']}, fields=['supplier_name', 'language'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers along with their language preferences.",
      "fields": [
        "language",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'language'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who are the suppliers using Arabic as their preferred language?",
      "fields": [
        "language",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'language': 'Arabic'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers from Qatar who prefer to communicate in English.",
      "fields": [
        "language",
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'Qatar', 'language': 'English'}, fields=['supplier_name', 'language'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do any internal suppliers use Spanish as their language setting?",
      "fields": [
        "language",
        "supplier_name",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'language': 'Spanish'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List the languages used by suppliers marked as transporters.",
      "fields": [
        "language",
        "supplier_name",
        "is_transporter"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields=['supplier_name', 'language'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Can I see which language 'Elite Logistics' prefers for communication?",
      "fields": [
        "language",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_name': 'Elite Logistics'}, fields=['language'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have not set any language preference?",
      "fields": [
        "language",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'language': ['=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How many suppliers are using French as their communication language?",
      "fields": [
        "language"
      ]
    },
    "output": "frappe.db.count('Supplier', {'language': 'French'})"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me a list of suppliers using any language setting starting with 'En'.",
      "fields": [
        "language",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'language': ['like', 'En%']}, fields=['supplier_name', 'language'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have a valid Tax ID on file?",
      "fields": [
        "tax_id",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'tax_id': ['!=', '']}, fields=['supplier_name', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers and their registered tax IDs.",
      "fields": [
        "supplier_name",
        "tax_id"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who uses 'QA-77890' as their Tax ID?",
      "fields": [
        "supplier_name",
        "tax_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'tax_id': 'QA-77890'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers in the UAE with a Tax ID starting with 'AE'.",
      "fields": [
        "country",
        "tax_id",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'UAE', 'tax_id': ['like', 'AE%']}, fields=['supplier_name', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which internal suppliers have no tax ID provided?",
      "fields": [
        "is_internal_supplier",
        "tax_id",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'tax_id': ['=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me the tax ID of 'PrimeSteel Ltd'.",
      "fields": [
        "supplier_name",
        "tax_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_name': 'PrimeSteel Ltd'}, fields=['tax_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List transporters along with their tax identification numbers.",
      "fields": [
        "is_transporter",
        "tax_id",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields=['supplier_name', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How many suppliers have a Tax ID containing 'VAT'?",
      "fields": [
        "tax_id"
      ]
    },
    "output": "frappe.db.count('Supplier', {'tax_id': ['like', '%VAT%']})"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me the suppliers and tax IDs for those using 'Retail Group'.",
      "fields": [
        "supplier_group",
        "supplier_name",
        "tax_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_group': 'Retail Group'}, fields=['supplier_name', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have tax IDs that end with '99'?",
      "fields": [
        "supplier_name",
        "tax_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'tax_id': ['like', '%99']}, fields=['supplier_name', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers along with their tax categories.",
      "fields": [
        "supplier_name",
        "tax_category"
      ]
    },
    "output": "frappe.get_all('Supplier', fields = ['supplier_name', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers fall under the 'Goods and Services' tax category?",
      "fields": [
        "tax_category",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'tax_category': 'Goods and Services'}, fields = ['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any suppliers without a defined tax category?",
      "fields": [
        "tax_category",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'tax_category': ['=', '']}, fields = ['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me suppliers categorized under 'Zero Tax'.",
      "fields": [
        "tax_category",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'tax_category': 'Zero Tax'}, fields = ['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which supplier named 'Al Jazeera Supplies' has what tax category?",
      "fields": [
        "supplier_name",
        "tax_category"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_name': 'Al Jazeera Supplies'}, fields = ['tax_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Fetch all tax categories of internal suppliers.",
      "fields": [
        "is_internal_supplier",
        "tax_category",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1}, fields = ['supplier_name', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find all Indian suppliers in the 'Export Category' for tax.",
      "fields": [
        "country",
        "tax_category",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'tax_category': 'Export Category'}, fields = ['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List names and tax categories for transporters.",
      "fields": [
        "is_transporter",
        "supplier_name",
        "tax_category"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields = ['supplier_name', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are any disabled suppliers assigned a tax category?",
      "fields": [
        "disabled",
        "tax_category",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1, 'tax_category': ['!=', '']}, fields = ['supplier_name', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me the tax categories of suppliers having VAT in their tax ID.",
      "fields": [
        "tax_id",
        "tax_category",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'tax_id': ['like', '%VAT%']}, fields = ['supplier_name', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers with their tax withholding categories.",
      "fields": [
        "supplier_name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'tax_withholding_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are associated with the 'Professional Services' tax withholding category?",
      "fields": [
        "supplier_name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'tax_withholding_category': 'Professional Services'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do any internal suppliers fall under a tax withholding category?",
      "fields": [
        "is_internal_supplier",
        "supplier_name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1}, fields=['supplier_name', 'tax_withholding_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "What is the withholding category for the supplier named 'Oceanic Traders'?",
      "fields": [
        "supplier_name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_name': 'Oceanic Traders'}, fields=['tax_withholding_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me names and withholding categories for all transporters.",
      "fields": [
        "is_transporter",
        "supplier_name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields=['supplier_name', 'tax_withholding_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers do not have any tax withholding category assigned?",
      "fields": [
        "supplier_name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'tax_withholding_category': ['=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Can you get me suppliers from Qatar with tax withholding category labeled 'Consulting'?",
      "fields": [
        "country",
        "tax_withholding_category",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'Qatar', 'tax_withholding_category': 'Consulting'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any disabled suppliers linked to a withholding category?",
      "fields": [
        "disabled",
        "supplier_name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1, 'tax_withholding_category': ['!=', '']}, fields=['supplier_name', 'tax_withholding_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "I need a breakdown of withholding tax categories used by all suppliers.",
      "fields": [
        "supplier_name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'tax_withholding_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Fetch suppliers with tax ID containing 'VAT' and show their tax withholding categories.",
      "fields": [
        "tax_id",
        "supplier_name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'tax_id': ['like', '%VAT%']}, fields=['supplier_name', 'tax_withholding_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have a billing address listed as their primary address?",
      "fields": [
        "supplier_name",
        "primary_address"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'primary_address': ['!=', '']}, fields=['supplier_name', 'primary_address'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have a primary address saved?",
      "fields": [
        "supplier_name",
        "supplier_primary_address"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_primary_address': ['!=', '']}, fields=['supplier_name', 'supplier_primary_address'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are marked with a warning for POS?",
      "fields": [
        "warn_pos"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_pos': 1}, fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the list of suppliers and whether they trigger POS warnings.",
      "fields": [
        "warn_pos"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List Indian suppliers with POS warnings enabled.",
      "fields": [
        "warn_pos",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'warn_pos': 1}, fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who are the suppliers that are not flagged for POS?",
      "fields": [
        "warn_pos"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_pos': 0}, fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which disabled suppliers also have POS warnings turned on?",
      "fields": [
        "warn_pos",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1, 'warn_pos': 1}, fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers with POS warning flags and their emails.",
      "fields": [
        "warn_pos",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_pos': 1}, fields=['warn_pos', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find the supplier group of all those with POS warnings active.",
      "fields": [
        "warn_pos",
        "supplier_group"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_pos': 1}, fields=['warn_pos', 'supplier_group'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there suppliers flagged for POS but not frozen?",
      "fields": [
        "warn_pos",
        "is_frozen"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_pos': 1, 'is_frozen': 0}, fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Retrieve suppliers with POS warnings and their primary contacts.",
      "fields": [
        "warn_pos",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_pos': 1}, fields=['warn_pos', 'supplier_primary_contact'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers from Qatar who are warned for POS.",
      "fields": [
        "warn_pos",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'Qatar', 'warn_pos': 1}, fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List the suppliers and their registered primary addresses.",
      "fields": [
        "supplier_name",
        "supplier_primary_address"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'supplier_primary_address'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show all suppliers that do not have a primary address assigned.",
      "fields": [
        "supplier_name",
        "supplier_primary_address"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_primary_address': ['=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do any Indian suppliers have a registered primary address?",
      "fields": [
        "supplier_name",
        "supplier_primary_address",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'supplier_primary_address': ['!=', '']}, fields=['supplier_name', 'supplier_primary_address'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which internal suppliers have a specified primary address?",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "supplier_primary_address"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'supplier_primary_address': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get suppliers with both primary address and contact person set.",
      "fields": [
        "supplier_name",
        "supplier_primary_address",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_primary_address': ['!=', ''], 'supplier_primary_contact': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find primary address and email for each supplier.",
      "fields": [
        "supplier_name",
        "supplier_primary_address",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'supplier_primary_address', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have the same primary and billing address?",
      "fields": [
        "supplier_primary_address",
        "primary_address",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_primary_address': ['=', 'primary_address']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there suppliers with a defined primary address and website?",
      "fields": [
        "supplier_name",
        "supplier_primary_address",
        "website"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_primary_address': ['!=', ''], 'website': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers along with their names, emails, and primary addresses.",
      "fields": [
        "supplier_name",
        "email_id",
        "supplier_primary_address"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'email_id', 'supplier_primary_address'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me the primary billing addresses for all suppliers.",
      "fields": [
        "supplier_name",
        "primary_address"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'primary_address'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers that don’t have any billing address saved.",
      "fields": [
        "supplier_name",
        "primary_address"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'primary_address': ['=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do suppliers from the UAE have a defined billing address?",
      "fields": [
        "supplier_name",
        "country",
        "primary_address"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'UAE', 'primary_address': ['!=', '']}, fields=['supplier_name', 'primary_address'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which transporters have a recorded primary address?",
      "fields": [
        "supplier_name",
        "is_transporter",
        "primary_address"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1, 'primary_address': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me suppliers with matching primary and main addresses.",
      "fields": [
        "supplier_name",
        "primary_address",
        "supplier_primary_address"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'primary_address': ['=', 'supplier_primary_address']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers and their contact details including billing address.",
      "fields": [
        "supplier_name",
        "email_id",
        "primary_address"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'email_id', 'primary_address'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which internal suppliers have a primary address mentioned?",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "primary_address"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'primary_address': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find out suppliers with websites and billing addresses both filled.",
      "fields": [
        "supplier_name",
        "primary_address",
        "website"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'primary_address': ['!=', ''], 'website': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers list email and billing address together?",
      "fields": [
        "supplier_name",
        "email_id",
        "primary_address"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'email_id', 'primary_address'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who is listed as the primary contact for each supplier?",
      "fields": [
        "supplier_name",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'supplier_primary_contact'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers along with their main contact persons.",
      "fields": [
        "supplier_name",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'supplier_primary_contact'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find all suppliers without a primary contact assigned.",
      "fields": [
        "supplier_name",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_primary_contact': ['=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do any internal suppliers have a primary contact defined?",
      "fields": [
        "is_internal_supplier",
        "supplier_primary_contact",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'supplier_primary_contact': ['!=', '']}, fields=['supplier_name', 'supplier_primary_contact'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers from India have listed their primary contact person?",
      "fields": [
        "country",
        "supplier_primary_contact",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'supplier_primary_contact': ['!=', '']}, fields=['supplier_name', 'supplier_primary_contact'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me suppliers that have both primary contact and address information.",
      "fields": [
        "supplier_primary_contact",
        "supplier_primary_address",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_primary_contact': ['!=', ''], 'supplier_primary_address': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all primary contacts and their email for every supplier.",
      "fields": [
        "supplier_name",
        "supplier_primary_contact",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'supplier_primary_contact', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me suppliers whose primary contact name includes the word 'Manager'.",
      "fields": [
        "supplier_name",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_primary_contact': ['like', '%Manager%']}, fields=['supplier_name', 'supplier_primary_contact'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any suppliers without email but with a contact person listed?",
      "fields": [
        "email_id",
        "supplier_primary_contact",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'email_id': ['=', ''], 'supplier_primary_contact': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me a list of supplier names with mobile and contact details.",
      "fields": [
        "supplier_name",
        "mobile_no",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'mobile_no', 'supplier_primary_contact'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers along with their mobile numbers.",
      "fields": [
        "supplier_name",
        "mobile_no"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'mobile_no'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have not provided a mobile number?",
      "fields": [
        "supplier_name",
        "mobile_no"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'mobile_no': ['=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me suppliers with a mobile number starting with '+974'.",
      "fields": [
        "supplier_name",
        "mobile_no"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'mobile_no': ['like', '+974%']}, fields=['supplier_name', 'mobile_no'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get names and mobile contacts of all internal suppliers.",
      "fields": [
        "supplier_name",
        "mobile_no",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1}, fields=['supplier_name', 'mobile_no'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers whose mobile numbers are longer than 10 digits.",
      "fields": [
        "supplier_name",
        "mobile_no"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'mobile_no': ['regexp', '^.{11,}$']}, fields=['supplier_name', 'mobile_no'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers with mobile numbers and email addresses.",
      "fields": [
        "supplier_name",
        "mobile_no",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'mobile_no', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers listed from India have valid mobile numbers?",
      "fields": [
        "supplier_name",
        "mobile_no",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'mobile_no': ['!=', '']}, fields=['supplier_name', 'mobile_no'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers where the mobile number and email are both missing.",
      "fields": [
        "mobile_no",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'mobile_no': ['=', ''], 'email_id': ['=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do any suppliers use a mobile number containing the digits '999'?",
      "fields": [
        "supplier_name",
        "mobile_no"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'mobile_no': ['like', '%999%']}, fields=['supplier_name', 'mobile_no'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers with both contact person and mobile number available.",
      "fields": [
        "supplier_name",
        "supplier_primary_contact",
        "mobile_no"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_primary_contact': ['!=', ''], 'mobile_no': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me all suppliers with their email addresses.",
      "fields": [
        "supplier_name",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have not provided an email address?",
      "fields": [
        "supplier_name",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'email_id': ['=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers whose email contains 'procure'.",
      "fields": [
        "supplier_name",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'email_id': ['like', '%procure%']}, fields=['supplier_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get internal suppliers and their email contacts.",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1}, fields=['supplier_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers whose email ends with '@gmail.com'.",
      "fields": [
        "supplier_name",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'email_id': ['like', '%@gmail.com']}, fields=['supplier_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers from Qatar have their email ID registered?",
      "fields": [
        "supplier_name",
        "country",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'Qatar', 'email_id': ['!=', '']}, fields=['supplier_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers with both email and website available.",
      "fields": [
        "email_id",
        "website",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'email_id': ['!=', ''], 'website': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do any suppliers use a common domain in their email addresses?",
      "fields": [
        "supplier_name",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'email_id': ['like', '%@%']}, fields=['supplier_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers where both mobile number and email are missing.",
      "fields": [
        "supplier_name",
        "mobile_no",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'mobile_no': ['=', ''], 'email_id': ['=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have the same email as their contact person?",
      "fields": [
        "supplier_name",
        "email_id",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'email_id': ['=', 'supplier_primary_contact']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers with their assigned payment terms.",
      "fields": [
        "supplier_name",
        "payment_terms"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'payment_terms'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers do not have any payment terms specified?",
      "fields": [
        "supplier_name",
        "payment_terms"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'payment_terms': ['=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any suppliers who follow Net 30 payment terms?",
      "fields": [
        "supplier_name",
        "payment_terms"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'payment_terms': 'Net 30'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me the list of internal suppliers and their payment terms.",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "payment_terms"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1}, fields=['supplier_name', 'payment_terms'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers from the US use immediate payment terms?",
      "fields": [
        "supplier_name",
        "country",
        "payment_terms"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'United States', 'payment_terms': 'Immediate'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Can I get the payment terms and contact email for each supplier?",
      "fields": [
        "supplier_name",
        "payment_terms",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'payment_terms', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have both payment terms and a price list defined?",
      "fields": [
        "supplier_name",
        "payment_terms",
        "default_price_list"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'payment_terms': ['!=', ''], 'default_price_list': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me suppliers where payment terms are missing but price list is available.",
      "fields": [
        "supplier_name",
        "payment_terms",
        "default_price_list"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'payment_terms': ['=', ''], 'default_price_list': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get suppliers with Net 15 terms and based in Qatar.",
      "fields": [
        "supplier_name",
        "payment_terms",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'payment_terms': 'Net 15', 'country': 'Qatar'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List the names, payment terms, and groups of all suppliers.",
      "fields": [
        "supplier_name",
        "payment_terms",
        "supplier_group"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'payment_terms', 'supplier_group'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers and their linked account settings.",
      "fields": [
        "supplier_name",
        "accounts"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'accounts'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers do not have any account details configured?",
      "fields": [
        "supplier_name",
        "accounts"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'accounts': ['=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me internal suppliers with defined accounts.",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "accounts"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'accounts': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the account records of suppliers from India.",
      "fields": [
        "supplier_name",
        "country",
        "accounts"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India'}, fields=['supplier_name', 'accounts'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any suppliers whose accounts section is empty?",
      "fields": [
        "supplier_name",
        "accounts"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'accounts': ['=','']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers from the US have account records?",
      "fields": [
        "supplier_name",
        "country",
        "accounts"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'United States', 'accounts': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Provide a list of supplier names with their accounts and emails.",
      "fields": [
        "supplier_name",
        "accounts",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'accounts', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers with both accounts and payment terms specified.",
      "fields": [
        "supplier_name",
        "accounts",
        "payment_terms"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'accounts': ['!=', ''], 'payment_terms': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers whose accounts section includes more than one record.",
      "fields": [
        "supplier_name",
        "accounts"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'accounts': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Can I get supplier groups with their accounts info?",
      "fields": [
        "supplier_group",
        "accounts"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_group', 'accounts'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers allow creating purchase invoices without a purchase order?",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_order"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'allow_purchase_invoice_creation_without_purchase_order': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers who require a purchase order for creating invoices.",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_order"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'allow_purchase_invoice_creation_without_purchase_order': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the setting status for creating invoices without purchase orders for each supplier.",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_order"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'allow_purchase_invoice_creation_without_purchase_order'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me suppliers from India who allow invoices without POs.",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_order",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'allow_purchase_invoice_creation_without_purchase_order': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there internal suppliers who allow bypassing purchase orders?",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "allow_purchase_invoice_creation_without_purchase_order"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'allow_purchase_invoice_creation_without_purchase_order': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers with email addresses allow skipping POs for invoices?",
      "fields": [
        "supplier_name",
        "email_id",
        "allow_purchase_invoice_creation_without_purchase_order"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'allow_purchase_invoice_creation_without_purchase_order': 1}, fields=['supplier_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Fetch supplier names and invoice policy flags regarding POs.",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_order"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'allow_purchase_invoice_creation_without_purchase_order'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers grouped by supplier type who allow invoice creation without POs.",
      "fields": [
        "supplier_name",
        "supplier_type",
        "allow_purchase_invoice_creation_without_purchase_order"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'allow_purchase_invoice_creation_without_purchase_order': 1}, fields=['supplier_name', 'supplier_type'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers do not allow creating invoices before purchase orders?",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_order"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'allow_purchase_invoice_creation_without_purchase_order': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Can you show suppliers and their PO invoice policy side by side?",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_order"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'allow_purchase_invoice_creation_without_purchase_order'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers allow creating invoices without a purchase receipt?",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'allow_purchase_invoice_creation_without_purchase_receipt': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers who require a receipt before invoicing.",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'allow_purchase_invoice_creation_without_purchase_receipt': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get supplier names and their invoice creation policy with respect to receipts.",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'allow_purchase_invoice_creation_without_purchase_receipt'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show internal suppliers who can skip purchase receipts while invoicing.",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'allow_purchase_invoice_creation_without_purchase_receipt': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which Indian suppliers allow invoice creation without purchase receipts?",
      "fields": [
        "supplier_name",
        "country",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'allow_purchase_invoice_creation_without_purchase_receipt': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers and whether they allow skipping receipts for invoices.",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'allow_purchase_invoice_creation_without_purchase_receipt'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Can you show suppliers with their country and invoice receipt policy?",
      "fields": [
        "supplier_name",
        "country",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'country', 'allow_purchase_invoice_creation_without_purchase_receipt'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Suppliers who don’t allow invoices without receipts?",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'allow_purchase_invoice_creation_without_purchase_receipt': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers and their invoice policy on receipts?",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'allow_purchase_invoice_creation_without_purchase_receipt'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers with their invoice without receipt setting and emails.",
      "fields": [
        "supplier_name",
        "email_id",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'email_id', 'allow_purchase_invoice_creation_without_purchase_receipt'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are currently frozen and inactive?",
      "fields": [
        "supplier_name",
        "is_frozen"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_frozen': 1}, fields=['supplier_name', 'is_frozen'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List frozen suppliers along with their email and group.",
      "fields": [
        "supplier_name",
        "is_frozen",
        "email_id",
        "supplier_group"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_frozen': 1}, fields=['supplier_name', 'email_id', 'supplier_group', 'is_frozen'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers that are not frozen.",
      "fields": [
        "supplier_name",
        "is_frozen"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_frozen': 0}, fields=['supplier_name', 'is_frozen'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get a list of suppliers and whether they are frozen or not.",
      "fields": [
        "supplier_name",
        "is_frozen"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'is_frozen'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which internal suppliers are marked as frozen?",
      "fields": [
        "supplier_name",
        "is_frozen",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'is_frozen': 1}, fields=['supplier_name', 'is_frozen', 'is_internal_supplier'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Suppliers from India who are frozen?",
      "fields": [
        "supplier_name",
        "is_frozen",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'is_frozen': 1}, fields=['supplier_name', 'country', 'is_frozen'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers and their frozen status along with email ID.",
      "fields": [
        "supplier_name",
        "is_frozen",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'is_frozen', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who are the frozen suppliers that also have pending RFQs?",
      "fields": [
        "supplier_name",
        "is_frozen",
        "warn_rfqs"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_frozen': 1, 'warn_rfqs': 1}, fields=['supplier_name', 'is_frozen', 'warn_rfqs'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get frozen suppliers and check their payment terms.",
      "fields": [
        "supplier_name",
        "is_frozen",
        "payment_terms"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_frozen': 1}, fields=['supplier_name', 'payment_terms', 'is_frozen'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Provide a list of all suppliers with frozen status and country.",
      "fields": [
        "supplier_name",
        "is_frozen",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'is_frozen', 'country'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have been disabled in the system?",
      "fields": [
        "supplier_name",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1}, fields=['supplier_name', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all disabled suppliers along with their emails.",
      "fields": [
        "supplier_name",
        "disabled",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1}, fields=['supplier_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get supplier names and whether they are disabled or active.",
      "fields": [
        "supplier_name",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which Indian suppliers have been disabled?",
      "fields": [
        "supplier_name",
        "disabled",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'disabled': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find disabled suppliers and their group classification.",
      "fields": [
        "supplier_name",
        "disabled",
        "supplier_group"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1}, fields=['supplier_name', 'supplier_group'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show all suppliers that are not disabled.",
      "fields": [
        "supplier_name",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List names and disabled status of suppliers from USA.",
      "fields": [
        "supplier_name",
        "disabled",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'USA'}, fields=['supplier_name', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which disabled suppliers are also frozen?",
      "fields": [
        "supplier_name",
        "disabled",
        "is_frozen"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1, 'is_frozen': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give the names, emails, and disabled status of suppliers.",
      "fields": [
        "supplier_name",
        "email_id",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'email_id', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Retrieve all suppliers with their disabled status and tax ID.",
      "fields": [
        "supplier_name",
        "disabled",
        "tax_id"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'disabled', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are marked with a warning for RFQs?",
      "fields": [
        "supplier_name",
        "warn_rfqs"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_rfqs': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the list of suppliers and whether they trigger RFQ warnings.",
      "fields": [
        "supplier_name",
        "warn_rfqs"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'warn_rfqs'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List Indian suppliers with RFQ warnings enabled.",
      "fields": [
        "supplier_name",
        "warn_rfqs",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'warn_rfqs': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who are the suppliers that are not flagged for RFQs?",
      "fields": [
        "supplier_name",
        "warn_rfqs"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_rfqs': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which disabled suppliers also have RFQ warnings turned on?",
      "fields": [
        "supplier_name",
        "warn_rfqs",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1, 'warn_rfqs': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers with RFQ warning flags and their emails.",
      "fields": [
        "supplier_name",
        "warn_rfqs",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_rfqs': 1}, fields=['supplier_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find the supplier group of all those with RFQ warnings active.",
      "fields": [
        "supplier_name",
        "warn_rfqs",
        "supplier_group"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_rfqs': 1}, fields=['supplier_name', 'supplier_group'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there suppliers flagged for RFQs but not frozen?",
      "fields": [
        "supplier_name",
        "warn_rfqs",
        "is_frozen"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_rfqs': 1, 'is_frozen': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Retrieve suppliers with RFQ warnings and their primary contacts.",
      "fields": [
        "supplier_name",
        "warn_rfqs",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_rfqs': 1}, fields=['supplier_name', 'supplier_primary_contact'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers from Qatar who are warned for RFQs.",
      "fields": [
        "supplier_name",
        "warn_rfqs",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'Qatar', 'warn_rfqs': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are blocked from receiving RFQs?",
      "fields": [
        "prevent_rfqs"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_rfqs': 1}, fields=['prevent_rfqs'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List the suppliers with the RFQ restriction enabled.",
      "fields": [
        "prevent_rfqs"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_rfqs': 1}, fields=['prevent_rfqs'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any Indian suppliers who are prevented from receiving RFQs?",
      "fields": [
        "prevent_rfqs",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'prevent_rfqs': 1}, fields=['prevent_rfqs'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are eligible to receive RFQs?",
      "fields": [
        "prevent_rfqs",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_rfqs': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get all suppliers that are not blocked from RFQs and are active.",
      "fields": [
        "prevent_rfqs",
        "disabled",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_rfqs': 0, 'disabled': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers with RFQ restriction are also frozen?",
      "fields": [
        "prevent_rfqs",
        "is_frozen"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_rfqs': 1, 'is_frozen': 1}, fields=['prevent_rfqs'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Retrieve suppliers with RFQ prevention and their email contacts.",
      "fields": [
        "prevent_rfqs",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_rfqs': 1}, fields=['prevent_rfqs', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers marked to prevent RFQs, along with their types.",
      "fields": [
        "prevent_rfqs",
        "supplier_type"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_rfqs': 1}, fields=['prevent_rfqs', 'supplier_type'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who are the internal suppliers blocked from RFQs?",
      "fields": [
        "prevent_rfqs",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_rfqs': 1, 'is_internal_supplier': 1}, fields=['prevent_rfqs'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers restricted from RFQs with their status and country.",
      "fields": [
        "prevent_rfqs",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_rfqs': 1}, fields=['prevent_rfqs', 'country'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are blocked from making POS transactions?",
      "fields": [
        "supplier_name",
        "prevent_pos"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_pos': 1}, fields=['supplier_name', 'prevent_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me the list of suppliers who have POS restrictions.",
      "fields": [
        "supplier_name",
        "prevent_pos"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_pos': 1}, fields=['supplier_name', 'prevent_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are any internal suppliers blocked from POS operations?",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "prevent_pos"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'prevent_pos': 1}, fields=['supplier_name', 'is_internal_supplier', 'prevent_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers from India who are prevented from POS transactions.",
      "fields": [
        "supplier_name",
        "country",
        "prevent_pos"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'prevent_pos': 1}, fields=['supplier_name', 'country', 'prevent_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are allowed to use POS features?",
      "fields": [
        "supplier_name",
        "prevent_pos"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_pos': 0}, fields=['supplier_name', 'prevent_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the supplier names and their POS restriction status.",
      "fields": [
        "supplier_name",
        "prevent_pos"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'prevent_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Can you show suppliers with both RFQ and POS restrictions?",
      "fields": [
        "supplier_name",
        "prevent_pos",
        "prevent_rfqs"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_pos': 1, 'prevent_rfqs': 1}, fields=['supplier_name', 'prevent_pos', 'prevent_rfqs'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers that are disabled and cannot access POS.",
      "fields": [
        "supplier_name",
        "prevent_pos",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_pos': 1, 'disabled': 1}, fields=['supplier_name', 'prevent_pos', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who among the transporters are barred from POS usage?",
      "fields": [
        "supplier_name",
        "is_transporter",
        "prevent_pos"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1, 'prevent_pos': 1}, fields=['supplier_name', 'is_transporter', 'prevent_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers with POS restrictions and alert flags.",
      "fields": [
        "supplier_name",
        "prevent_pos",
        "warn_pos"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_pos': 1, 'warn_pos': 1}, fields=['supplier_name', 'prevent_pos', 'warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are currently on hold?",
      "fields": [
        "supplier_name",
        "on_hold"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1}, fields=['supplier_name', 'on_hold'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers that are not on hold.",
      "fields": [
        "supplier_name",
        "on_hold"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 0}, fields=['supplier_name', 'on_hold'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers with a hold status flag.",
      "fields": [
        "supplier_name",
        "on_hold"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1}, fields=['supplier_name', 'on_hold'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get names of internal suppliers that are on hold.",
      "fields": [
        "supplier_name",
        "on_hold",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1, 'is_internal_supplier': 1}, fields=['supplier_name', 'on_hold', 'is_internal_supplier'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are any Indian suppliers on hold?",
      "fields": [
        "supplier_name",
        "on_hold",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1, 'country': 'India'}, fields=['supplier_name', 'on_hold', 'country'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are on hold and also disabled?",
      "fields": [
        "supplier_name",
        "on_hold",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1, 'disabled': 1}, fields=['supplier_name', 'on_hold', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers who are both transporters and are on hold.",
      "fields": [
        "supplier_name",
        "on_hold",
        "is_transporter"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1, 'is_transporter': 1}, fields=['supplier_name', 'on_hold', 'is_transporter'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me the list of suppliers on hold and also warned for RFQs.",
      "fields": [
        "supplier_name",
        "on_hold",
        "warn_rfqs"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1, 'warn_rfqs': 1}, fields=['supplier_name', 'on_hold', 'warn_rfqs'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers with hold flag and a release date set.",
      "fields": [
        "supplier_name",
        "on_hold",
        "release_date"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1, 'release_date': ['!=', '']}, fields=['supplier_name', 'on_hold', 'release_date'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Retrieve all supplier names and their on-hold status.",
      "fields": [
        "supplier_name",
        "on_hold"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'on_hold'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are marked with a warning for POS?",
      "fields": [
        "warn_pos"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_pos': 1}, fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the list of suppliers and whether they trigger POS warnings.",
      "fields": [
        "warn_pos"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List Indian suppliers with POS warnings enabled.",
      "fields": [
        "warn_pos",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'warn_pos': 1}, fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who are the suppliers that are not flagged for POS?",
      "fields": [
        "warn_pos"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_pos': 0}, fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which disabled suppliers also have POS warnings turned on?",
      "fields": [
        "warn_pos",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1, 'warn_pos': 1}, fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers with POS warning flags and their emails.",
      "fields": [
        "warn_pos",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_pos': 1}, fields=['warn_pos', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find the supplier group of all those with POS warnings active.",
      "fields": [
        "warn_pos",
        "supplier_group"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_pos': 1}, fields=['warn_pos', 'supplier_group'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there suppliers flagged for POS but not frozen?",
      "fields": [
        "warn_pos",
        "is_frozen"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_pos': 1, 'is_frozen': 0}, fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Retrieve suppliers with POS warnings and their primary contacts.",
      "fields": [
        "warn_pos",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_pos': 1}, fields=['warn_pos', 'supplier_primary_contact'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers from Qatar who are warned for POS.",
      "fields": [
        "warn_pos",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'Qatar', 'warn_pos': 1}, fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have a release date assigned?",
      "fields": [
        "supplier_name",
        "release_date"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'release_date': ['!=', '']}, fields=['supplier_name', 'release_date'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers with release dates after January 1st, 2025.",
      "fields": [
        "supplier_name",
        "release_date"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'release_date': ['>', '2025-01-01']}, fields=['supplier_name', 'release_date'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers who are on hold and have a scheduled release date.",
      "fields": [
        "supplier_name",
        "on_hold",
        "release_date"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1, 'release_date': ['!=', '']}, fields=['supplier_name', 'release_date'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers whose release date is in March 2025.",
      "fields": [
        "supplier_name",
        "release_date"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'release_date': ['like', '2025-03-%']}, fields=['supplier_name', 'release_date'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which internal suppliers have a release date defined?",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "release_date"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'release_date': ['!=', '']}, fields=['supplier_name', 'release_date'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the supplier names and their release dates.",
      "fields": [
        "supplier_name",
        "release_date"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'release_date'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who are the disabled suppliers with a release date scheduled?",
      "fields": [
        "supplier_name",
        "disabled",
        "release_date"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1, 'release_date': ['!=', '']}, fields=['supplier_name', 'release_date'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Can you list suppliers that are blocked from POS but have a release date?",
      "fields": [
        "supplier_name",
        "prevent_pos",
        "release_date"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_pos': 1, 'release_date': ['!=', '']}, fields=['supplier_name', 'release_date'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have no release date set?",
      "fields": [
        "supplier_name",
        "release_date"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'release_date': ['=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers with release dates and hold types together.",
      "fields": [
        "supplier_name",
        "release_date",
        "hold_type"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'release_date': ['!=', '']}, fields=['supplier_name', 'release_date', 'hold_type'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have associated portal users?",
      "fields": [
        "supplier_name",
        "portal_users"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'portal_users': ['!=', []]}, fields=['supplier_name', 'portal_users'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers that don't have any portal users assigned.",
      "fields": [
        "supplier_name",
        "portal_users"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'portal_users': []}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get names and portal user details for each supplier.",
      "fields": [
        "supplier_name",
        "portal_users"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'portal_users'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers with more than one portal user configured.",
      "fields": [
        "supplier_name",
        "portal_users"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={ 'portal_users': ['!=', []]}, fields=['supplier_name', 'portal_users'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which internal suppliers have portal users added?",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "portal_users"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'portal_users': ['!=', []]}, fields=['supplier_name', 'portal_users'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the list of all suppliers who are not disabled and have portal users.",
      "fields": [
        "supplier_name",
        "disabled",
        "portal_users"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 0, 'portal_users': ['!=', []]}, fields=['supplier_name', 'portal_users'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show portal users for Indian suppliers.",
      "fields": [
        "supplier_name",
        "country",
        "portal_users"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India'}, fields=['supplier_name', 'portal_users'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do any suppliers from the USA have portal users configured?",
      "fields": [
        "supplier_name",
        "country",
        "portal_users"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'USA', 'portal_users': ['!=', []]}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers with warning flags have portal users?",
      "fields": [
        "supplier_name",
        "warn_pos",
        "portal_users"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_pos': 1, 'portal_users': ['!=', []]}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show the list of supplier portal users along with their names and emails.",
      "fields": [
        "supplier_name",
        "portal_users",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'portal_users', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Can you show me the sales invoice for order SO-12345?",
      "fields": [
        "po_no",
        "customer",
        "items",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'po_no': 'SO-12345'}, fields=['name', 'customer', 'items', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What is the amount on the sales invoice SI-45678?",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.get_value('Sales Invoice', 'SI-45678', 'grand_total')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Has the customer paid for invoice SI-22334?",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_value('Sales Invoice', 'SI-22334', 'outstanding_amount')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How much is left to pay on sales invoice SI-33445?",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_value('Sales Invoice', 'SI-33445', 'outstanding_amount')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "When is the payment due for sales invoice SI-33456?",
      "fields": [
        "due_date"
      ]
    },
    "output": "frappe.get_value('Sales Invoice', 'SI-33456', 'due_date')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Is sales invoice SI-44556 overdue?",
      "fields": [
        "due_date"
      ]
    },
    "output": "frappe.get_value('Sales Invoice', 'SI-44556', 'due_date')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What products were billed on sales invoice SI-12312?",
      "fields": [
        "items"
      ]
    },
    "output": "frappe.get_value('Sales Invoice', 'SI-12312', 'items')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What discount was applied to sales invoice SI-33445?",
      "fields": [
        "discount_amount",
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.get_value('Sales Invoice', 'SI-33445', ['discount_amount', 'additional_discount_percentage'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Can you send me a copy of sales invoice SI-22334? (retrieval part only)",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.get_value('Sales Invoice', 'SI-22334', 'name')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "When was sales invoice SI-76565 created?",
      "fields": [
        "creation"
      ]
    },
    "output": "frappe.get_value('Sales Invoice', 'SI-76565', 'creation')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Has sales invoice SI-55667 been approved?",
      "fields": [
        "docstatus"
      ]
    },
    "output": "frappe.get_value('Sales Invoice', 'SI-55667', 'docstatus')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Who approved sales invoice SI-33445?",
      "fields": [
        "owner"
      ]
    },
    "output": "frappe.get_value('Sales Invoice', 'SI-33445', 'owner')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Can you show the sales invoice for customer John Doe?",
      "fields": [
        "name",
        "grand_total",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'John Doe'}, fields=['name', 'grand_total', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How much did we charge customer Crater & Clove Corp in their last invoice?",
      "fields": [
        "name",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Crater & Clove Corp'}, fields=['name', 'grand_total'], order_by='posting_date desc', limit=1)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Has sales invoice SI-55667 been refunded yet?",
      "fields": [
        "is_return"
      ]
    },
    "output": "frappe.get_value('Sales Invoice', 'SI-55667', 'is_return')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Was there a late fee added to sales invoice SI-33445?",
      "fields": [
        "other_charges_calculation"
      ]
    },
    "output": "frappe.get_value('Sales Invoice', 'SI-33445', 'other_charges_calculation')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How much was the late fee on sales invoice SI-55667?",
      "fields": [
        "other_charges_calculation"
      ]
    },
    "output": "frappe.get_value('Sales Invoice', 'SI-55667', 'other_charges_calculation')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What's the total value of sales orders generated this month?",
      "fields": [
        "posting_date",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['between', [frappe.utils.get_first_day(frappe.utils.nowdate()), frappe.utils.get_last_day(frappe.utils.nowdate())]]}, fields=['grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What is the quantity of backordered items for customer 'Delta Electronics'?",
      "fields": [
        "customer",
        "item_name",
        "qty",
        "delivered_qty"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Item', filters={'parenttype': 'Sales Invoice', 'customer': 'Delta Electronics', 'delivered_qty': ['<', 'qty']}, fields=['item_name', 'qty', 'delivered_qty'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What is the total value of sales orders placed by 'ByteWorks Ltd' this month?",
      "fields": [
        "customer",
        "posting_date",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'ByteWorks Ltd', 'posting_date': ['between', [frappe.utils.get_first_day(frappe.utils.nowdate()), frappe.utils.get_last_day(frappe.utils.nowdate())]]}, fields=['grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What's the total value of pending orders?",
      "fields": [
        "status",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': 'Unpaid'}, fields=['grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many items are currently backordered?",
      "fields": [
        "item_name",
        "delivered_qty",
        "qty"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Item', filters={'delivered_qty': ['<', 'qty']}, fields=['item_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Did we meet our sales targets for the previous quarter?",
      "fields": [
        "posting_date",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['between', [frappe.utils.add_months(frappe.utils.get_first_day(frappe.utils.nowdate()), -3), frappe.utils.get_first_day(frappe.utils.nowdate())]]}, fields=['grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many sales orders were created during February?",
      "fields": [
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['between', ['2025-02-01', '2025-02-28']]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many sales orders were placed with status 'Delivered' this quarter?",
      "fields": [
        "name",
        "status",
        "posting_date"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'status': 'Delivered', 'posting_date': ['between', [frappe.utils.get_quarter_start(frappe.utils.today()), frappe.utils.today()]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Please show all sales orders placed by customers from 'East Coast' this week.",
      "fields": [
        "name",
        "customer",
        "territory",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'territory': 'East Coast', 'posting_date': ['between', [frappe.utils.add_days(frappe.utils.today(), -7), frappe.utils.today()]]}, fields=['name', 'customer', 'territory'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What is the status of the sales orders placed by top-tier customer 'TechGlobal Inc' this week?",
      "fields": [
        "name",
        "customer",
        "status",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'TechGlobal Inc', 'posting_date': ['between', [frappe.utils.add_days(frappe.utils.today(), -7), frappe.utils.today()]]}, fields=['name', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Can you display the sales orders created by customers from Chicago this week?",
      "fields": [
        "name",
        "customer",
        "customer_address",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer_address': ['like', '%Chicago%'], 'posting_date': ['between', [frappe.utils.add_days(frappe.utils.today(), -7), frappe.utils.today()]]}, fields=['name', 'customer', 'customer_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all the sales orders created this month for product 'Apple MacBook Pro'.",
      "fields": [
        "name",
        "items",
        "item_name",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice Item', filters={'item_name': 'Apple MacBook Pro', 'parenttype': 'Sales Invoice', 'posting_date': ['between', [frappe.utils.get_first_day(frappe.utils.today()), frappe.utils.today()]]}, fields=['parent as sales_invoice', 'item_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many sales orders were generated in the last 7 days?",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'posting_date': ['between', [frappe.utils.add_days(frappe.utils.today(), -7), frappe.utils.today()]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How much value in sales orders was processed by the 'Marketing Division' this quarter?",
      "fields": [
        "name",
        "department",
        "base_grand_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', {'department': 'Marketing Division', 'posting_date': ['between', [frappe.utils.get_quarter_start(frappe.utils.today()), frappe.utils.today()]]}, ['sum(base_grand_total)'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What was the total sales order value for the second quarter?",
      "fields": [
        "name",
        "grand_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', {'posting_date': ['between', ['2025-04-01', '2025-06-30']]}, ['sum(grand_total)'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What is the total value of open sales orders worth over $20,000?",
      "fields": [
        "name",
        "grand_total",
        "status"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', {'status': 'Unpaid', 'grand_total': ['>', 20000]}, ['sum(grand_total)'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all sales orders created with a  value greater than $15,000 for 'Fusion Enterprises'.",
      "fields": [
        "name",
        "grand_total",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Fusion Enterprises', 'grand_total': ['>', 15000]}, fields=['name', 'grand_total', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "show me all sales orders created by 'NorthStar Technologies' this month?",
      "fields": [
        "name",
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'NorthStar Technologies', 'posting_date': ['between', [frappe.utils.get_first_day(frappe.utils.today()), frappe.utils.today()]]}, fields=['name', 'customer', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many sales orders were made for the 'MountainPeak Development' project?",
      "fields": [
        "name",
        "project"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'project': 'MountainPeak Development'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Can you show me the details of open sales orders from last month for 'CloudServe Solutions'?",
      "fields": [
        "name",
        "customer",
        "status",
        "posting_date",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'CloudServe Solutions', 'status': 'Unpaid', 'posting_date': ['between', [frappe.utils.add_months(frappe.utils.get_first_day(frappe.utils.today()), -1), frappe.utils.add_days(frappe.utils.get_first_day(frappe.utils.today()), -1)] ]}, fields=['name', 'customer', 'grand_total', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What's the total value of sales orders with a payment status 'Pending' for 'BrightTech Innovations'?",
      "fields": [
        "customer",
        "status",
        "outstanding_amount",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'BrightTech Innovations', 'status': 'Unpaid'}, fields=['name', 'grand_total', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Please list all the sales orders that were created last week for product 'Ultra Wireless Router'.",
      "fields": [
        "posting_date",
        "items",
        "item_name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['between', ['last_week_start', 'last_week_end']], 'items.item_name': 'Ultra Wireless Router'}, fields=['name', 'posting_date', 'items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many sales orders were confirmed in the past 30 days for 'SmartTech Enterprises'?",
      "fields": [
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'customer': 'SmartTech Enterprises', 'posting_date': ['>', '30_days_ago']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What\u2019s the total sales order value for 'iPhone 14' in the past quarter?",
      "fields": [
        "items",
        "item_name",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['between', ['last_quarter_start', 'last_quarter_end']], 'items.item_name': 'iPhone 14'}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any Sales Invoices linked to the 'Crescent Towers' project?",
      "fields": [
        "project"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'project': 'Crescent Towers'}, fields=['name', 'project'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any sales invoices linked to 'Oceanic Ventures'?",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Oceanic Ventures'}, fields=['name', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What\u2019s the total sales value of invoices that are still unpaid for customer 'Global Enterprises'?",
      "fields": [
        "customer",
        "outstanding_amount",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Global Enterprises', 'outstanding_amount': ['>', 0]}, fields=['grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all sales invoices with outstanding amount greater than 1000.",
      "fields": [
        "name",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={ 'outstanding_amount': ['>', 1000] }, fields=['name', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How can I find out the total amount of all paid invoices for the last month?",
      "fields": [
        "total_amount",
        "status",
        "date"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', {'status': 'Paid', 'date': ['>=', '2023-03-01'], 'date': ['<=', '2023-03-31']}, ['total_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How much revenue was generated from 'Product Y' sold to 'Customer Z' last week?",
      "fields": [
        "total_amount",
        "item_code",
        "customer"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', {'item_code': 'Product Y', 'customer': 'Customer Z', 'date': ['>=', '2023-04-01'], 'date': ['<=', '2023-04-07']}, ['total_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What is the total amount generated from all paid invoices of 'Customer X' this year?",
      "fields": [
        "total_amount",
        "customer",
        "status"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', {'customer': 'Customer X', 'status': 'Paid', 'date': ['>=', '2023-01-01'], 'date': ['<=', '2023-12-31']}, ['total_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many units of 'Product X' have been sold in the last 6 months?",
      "fields": [
        "item_code",
        "quantity_sold"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', {'item_code': 'Product X', 'date': ['>=', '2022-10-01'], 'date': ['<=', '2023-03-31']}, ['quantity_sold'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How do I retrieve the total amount of all paid invoices issued last month?",
      "fields": [
        "total_amount",
        "status",
        "date"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', {'status': 'Paid', 'date': ['>=', '2023-03-01'], 'date': ['<=', '2023-03-31']}, ['total_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What is the total amount generated from all invoices in the last quarter?",
      "fields": [
        "total_amount",
        "status",
        "date"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', {'status': 'Paid', 'date': ['>=', '2023-01-01'], 'date': ['<=', '2023-03-31']}, ['total_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me all sales invoices with a title assigned.",
      "fields": [
        "name",
        "title"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'title': ['!=', '']}, fields=['name', 'title'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoice numbers and their titles.",
      "fields": [
        "name",
        "title"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'title'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which sales invoices are missing the title?",
      "fields": [
        "title",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'title': ['=', '']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all invoices for the customer John Enterprises along with their titles.",
      "fields": [
        "name",
        "customer",
        "title"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'John Enterprises'}, fields=['name', 'customer', 'title'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices titled 'March Sales' were posted after March 1st, 2025?",
      "fields": [
        "name",
        "title",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'title': 'March Sales', 'posting_date': ['>', '2025-03-01']}, fields=['name', 'title', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do we have any consolidated sales invoices with a title?",
      "fields": [
        "name",
        "title",
        "is_consolidated"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_consolidated': 1, 'title': ['!=', '']}, fields=['name', 'title', 'is_consolidated'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List the titles of all POS sales invoices.",
      "fields": [
        "name",
        "title",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1}, fields=['name', 'title'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me sales invoice titles, customer names, and their posting dates.",
      "fields": [
        "name",
        "title",
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'title', 'customer', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have the same value in both title and customer_name fields?",
      "fields": [
        "name",
        "title",
        "customer_name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'title': ['=', 'customer_name']}, fields=['name', 'title', 'customer_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get titles of sales invoices created for customers in Qatar.",
      "fields": [
        "name",
        "title",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': ['like', '%Qatar%']}, fields=['name', 'title', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which sales invoices use a naming series starting with INV-?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'naming_series': ['like', 'INV-%']}, fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoice numbers and their naming series values.",
      "fields": [
        "name",
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'naming_series'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices that don't have any naming series set.",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'naming_series': ['=', '']}, fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which sales invoices from March 2025 used the naming series INV-2025?",
      "fields": [
        "naming_series",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['like', '2025-03-%'], 'naming_series': 'INV-2025'}, fields=['naming_series', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices with a naming series that starts with POS-2025.",
      "fields": [
        "naming_series",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'naming_series': ['like', 'POS-2025%']}, fields=['naming_series', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoice titles, customers, and their naming series.",
      "fields": [
        "title",
        "customer",
        "naming_series"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['title', 'customer', 'naming_series'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with naming series 'INV-2024' for the company Alpha Corp.",
      "fields": [
        "naming_series",
        "company"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'naming_series': 'INV-2024', 'company': 'Alpha Corp'}, fields=['naming_series', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the naming series of return invoices.",
      "fields": [
        "naming_series",
        "return_against",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1}, fields=['naming_series', 'return_against'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have the naming series same as their title?",
      "fields": [
        "naming_series",
        "title"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'naming_series': ['=', 'title']}, fields=['naming_series', 'title'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me the naming series and customer names for invoices from India.",
      "fields": [
        "naming_series",
        "customer",
        "territory"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'territory': 'India'}, fields=['naming_series', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all sales invoices along with their customer names.",
      "fields": [
        "name",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices are made for the customer Gulf Tech Solutions?",
      "fields": [
        "name",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Gulf Tech Solutions'}, fields=['name', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all invoices where the customer field is empty.",
      "fields": [
        "name",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': ['=', '']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices with grand total above 10,000?",
      "fields": [
        "name",
        "customer",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'grand_total': ['>', 10000]}, fields=['name', 'customer', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all POS invoices with customer details.",
      "fields": [
        "name",
        "customer",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1}, fields=['name', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List customers with invoices dated after April 1st, 2025.",
      "fields": [
        "name",
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['>', '2025-04-01']}, fields=['name', 'customer', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do any customers have more than one invoice posted today?",
      "fields": [
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': frappe.utils.today()}, fields=['customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the customer and company for each sales invoice.",
      "fields": [
        "name",
        "customer",
        "company"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'customer', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have customers from the Qatar region?",
      "fields": [
        "name",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': ['like', '%Qatar%']}, fields=['name', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the customer and customer_name are different.",
      "fields": [
        "name",
        "customer",
        "customer_name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': ['!=', 'customer_name']}, fields=['name', 'customer', 'customer_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all sales invoices that have a tax ID assigned.",
      "fields": [
        "name",
        "tax_id"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tax_id': ['!=', '']}, fields=['name', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which sales invoices are missing a tax ID?",
      "fields": [
        "name",
        "tax_id"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tax_id': ['=', '']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get tax IDs and customer names from all invoices.",
      "fields": [
        "tax_id",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['tax_id', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices for Gulf Contracting that include a tax ID.",
      "fields": [
        "name",
        "tax_id",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Gulf Contracting', 'tax_id': ['!=', '']}, fields=['name', 'tax_id', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where the tax ID matches 'QA-4567'.",
      "fields": [
        "name",
        "tax_id"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tax_id': 'QA-4567'}, fields=['name', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have the same value in both tax ID and company tax ID?",
      "fields": [
        "name",
        "tax_id",
        "company_tax_id"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tax_id': ['=', 'company_tax_id']}, fields=['name', 'tax_id', 'company_tax_id'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show tax IDs for invoices posted after May 1st, 2025.",
      "fields": [
        "name",
        "tax_id",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['>', '2025-05-01']}, fields=['name', 'tax_id', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List tax IDs for all POS sales invoices.",
      "fields": [
        "name",
        "tax_id",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1}, fields=['name', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get tax ID and tax category for all sales invoices.",
      "fields": [
        "name",
        "tax_id",
        "tax_category"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'tax_id', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with tax ID starting with 'QA' and issued by 'Qatar Trading Co'.",
      "fields": [
        "name",
        "tax_id",
        "company"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tax_id': ['like', 'QA%'], 'company': 'Qatar Trading Co'}, fields=['name', 'tax_id', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all sales invoices created by Gulf Engineering Company.",
      "fields": [
        "name",
        "company"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company': 'Gulf Engineering Company'}, fields=['name', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which companies issued sales invoices in 2025?",
      "fields": [
        "name",
        "company",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['like', '2025%']}, fields=['name', 'company', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices where the company is not 'Violet Spanner Corporation'.",
      "fields": [
        "name",
        "company"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company': ['!=', 'Violet Spanner Corporation']}, fields=['name', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices for the company 'Global Tech' with status 'Unpaid'.",
      "fields": [
        "name",
        "company",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company': 'Global Tech', 'status': 'Unpaid'}, fields=['name', 'company', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all invoices from companies whose name contains 'Qatar'.",
      "fields": [
        "name",
        "company"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company': ['like', '%Qatar%']}, fields=['name', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which companies issued invoices to customer 'Universal Steel'?",
      "fields": [
        "name",
        "company",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Universal Steel'}, fields=['name', 'company', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give the posting dates and companies for all sales invoices.",
      "fields": [
        "name",
        "company",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'company', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices where the company tax ID matches the company name.",
      "fields": [
        "name",
        "company",
        "company_tax_id"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_tax_id': ['=', 'company']}, fields=['name', 'company', 'company_tax_id'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which internal customers were invoiced by Gulf Enterprises?",
      "fields": [
        "name",
        "company",
        "is_internal_customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company': 'Gulf Enterprises', 'is_internal_customer': 1}, fields=['name', 'company', 'is_internal_customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices posted by each company along with the currency used.",
      "fields": [
        "name",
        "company",
        "currency"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'company', 'currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all sales invoices where the company's tax ID is filled.",
      "fields": [
        "name",
        "company_tax_id"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_tax_id': ['!=', '']}, fields=['name', 'company_tax_id'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoice numbers and company tax IDs.",
      "fields": [
        "name",
        "company_tax_id"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'company_tax_id'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices are missing the company tax ID?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_tax_id': ['=', '']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices for company 'SmartTech Ltd' that have a tax ID on record.",
      "fields": [
        "name",
        "company",
        "company_tax_id"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company': 'SmartTech Ltd', 'company_tax_id': ['!=', '']}, fields=['name', 'company', 'company_tax_id'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show company tax ID details for invoices posted after Jan 1, 2025.",
      "fields": [
        "name",
        "company_tax_id",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['>', '2025-01-01']}, fields=['name', 'company_tax_id', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find sales invoices where company and tax ID are both defined.",
      "fields": [
        "name",
        "company",
        "company_tax_id"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company': ['!=', ''], 'company_tax_id': ['!=', '']}, fields=['name', 'company', 'company_tax_id'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which internal customer invoices also have company tax IDs?",
      "fields": [
        "name",
        "company_tax_id",
        "is_internal_customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_internal_customer': 1, 'company_tax_id': ['!=', '']}, fields=['name', 'company_tax_id', 'is_internal_customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get company tax IDs for invoices with grand total over 10,000.",
      "fields": [
        "name",
        "company_tax_id",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'grand_total': ['>', 10000]}, fields=['name', 'company_tax_id', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where company tax ID matches the customer’s tax ID.",
      "fields": [
        "name",
        "company_tax_id",
        "tax_id"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_tax_id': ['=', 'tax_id']}, fields=['name', 'company_tax_id', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me company tax ID and status for each invoice created this year.",
      "fields": [
        "name",
        "company_tax_id",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['like', '2025%']}, fields=['name', 'company_tax_id', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all sales invoices created after January 1, 2025.",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['>', '2025-01-01']}, fields=['name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List sales invoices with their posting dates.",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices posted before December 2024.",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['<', '2024-12-01']}, fields=['name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were posted on March 15, 2025?",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': '2025-03-15'}, fields=['name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices with posting date in April 2025.",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['like', '2025-04-%']}, fields=['name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all POS invoices posted this year.",
      "fields": [
        "name",
        "posting_date",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'posting_date': ['like', '2025%']}, fields=['name', 'posting_date', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which sales invoices for Smart Electronics were posted in Q1 of 2025?",
      "fields": [
        "name",
        "posting_date",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Smart Electronics', 'posting_date': ['between', ['2025-01-01', '2025-03-31']]}, fields=['name', 'customer', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the posting date and status of invoices posted after June 1st, 2025.",
      "fields": [
        "name",
        "posting_date",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['>', '2025-06-01']}, fields=['name', 'posting_date', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which internal customer invoices were posted in February 2025?",
      "fields": [
        "name",
        "posting_date",
        "is_internal_customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_internal_customer': 1, 'posting_date': ['like', '2025-02-%']}, fields=['name', 'posting_date', 'is_internal_customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices posted today.",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': frappe.utils.today()}, fields=['name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices had manually set posting times?",
      "fields": [
        "name",
        "set_posting_time"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'set_posting_time': 1}, fields=['name', 'set_posting_time'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the posting time was not manually set.",
      "fields": [
        "name",
        "set_posting_time"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'set_posting_time': 0}, fields=['name', 'set_posting_time'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoice numbers and whether their posting time was manually configured.",
      "fields": [
        "name",
        "set_posting_time"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'set_posting_time'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me manually set posting times for invoices from Qatar Industries.",
      "fields": [
        "name",
        "customer",
        "set_posting_time"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Qatar Industries', 'set_posting_time': 1}, fields=['name', 'customer', 'set_posting_time'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which POS invoices had custom posting times?",
      "fields": [
        "name",
        "is_pos",
        "set_posting_time"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'set_posting_time': 1}, fields=['name', 'is_pos', 'set_posting_time'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all consolidated invoices with a manually set posting time.",
      "fields": [
        "name",
        "is_consolidated",
        "set_posting_time"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_consolidated': 1, 'set_posting_time': 1}, fields=['name', 'is_consolidated', 'set_posting_time'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices created after April 1st have manual posting times?",
      "fields": [
        "name",
        "set_posting_time",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['>', '2025-04-01'], 'set_posting_time': 1}, fields=['name', 'set_posting_time', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do any invoices for internal customers have set posting times?",
      "fields": [
        "name",
        "is_internal_customer",
        "set_posting_time"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_internal_customer': 1, 'set_posting_time': 1}, fields=['name', 'is_internal_customer', 'set_posting_time'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with both custom posting time and debit note enabled.",
      "fields": [
        "name",
        "set_posting_time",
        "is_debit_note"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'set_posting_time': 1, 'is_debit_note': 1}, fields=['name', 'set_posting_time', 'is_debit_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the posting time setting and company for all unpaid invoices.",
      "fields": [
        "name",
        "set_posting_time",
        "company"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': 'Unpaid'}, fields=['name', 'set_posting_time', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that are due tomorrow.",
      "fields": [
        "name",
        "due_date",
        "customer",
        "posting_date",
        "grand_total",
        "status"
      ]
    },
    "output": "import datetime\n\ntomorrow = datetime.date.today() + datetime.timedelta(days=1)\n\nfrappe.get_all('Sales Invoice',filters={'due_date': tomorrow},fields=['name', 'due_date', 'customer', 'posting_date', 'grand_total', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices which have a due date set for this week.",
      "fields": [
        "name",
        "due_date",
        "customer",
        "company",
        "posting_date",
        "status"
      ]
    },
    "output": "import datetime\n\nstart_of_week = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend_of_week = start_of_week + datetime.timedelta(days=6)\n\nfrappe.get_all('Sales Invoice',filters={'due_date': ['between', [start_of_week, end_of_week]]},fields=['name', 'due_date', 'customer', 'company', 'posting_date', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me all pending invoices due on 2025-06-30.",
      "fields": [
        "name",
        "due_date",
        "status",
        "posting_date",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice',filters={'due_date': datetime.date(2025, 6, 30),'status': 'Unpaid'},fields=['name', 'due_date', 'status', 'posting_date', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the due dates and companies for all invoices created today.",
      "fields": [
        "name",
        "due_date",
        "company",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice',filters={'posting_date': datetime.date.today()},fields=['name', 'due_date', 'company', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices are due after June 15, 2025?",
      "fields": [
        "name",
        "due_date",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'due_date': ['>', datetime.date(2025, 6, 15)]}, fields=['name', 'due_date', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me invoices from Niyon Corp that are due next month.",
      "fields": [
        "name",
        "due_date",
        "customer",
        "posting_date"
      ]
    },
    "output": "from frappe.utils import get_first_day, get_last_day, add_months\nimport datetime\n\nstart_date = get_first_day(add_months(datetime.date.today(), 1))\nend_date = get_last_day(add_months(datetime.date.today(), 1))\n\nfrappe.get_all('Sales Invoice', filters={'customer': 'Niyon Corp', 'due_date': ['between', [start_date, end_date]]}, fields=['name', 'due_date', 'customer', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show overdue invoices as of today.",
      "fields": [
        "name",
        "due_date",
        "status"
      ]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'due_date': ['<', datetime.date.today()], 'status': 'Unpaid'}, fields=['name', 'due_date', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find the invoices that were due yesterday but are still unpaid.",
      "fields": [
        "name",
        "due_date",
        "status"
      ]
    },
    "output": "import datetime\n\nyesterday = datetime.date.today() - datetime.timedelta(days=1)\n\nfrappe.get_all('Sales Invoice', filters={'due_date': yesterday, 'status': 'Unpaid'}, fields=['name', 'due_date', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the list of invoices with due date in the past 7 days.",
      "fields": [
        "name",
        "due_date"
      ]
    },
    "output": "import datetime\n\nend_date = datetime.date.today()\nstart_date = end_date - datetime.timedelta(days=7)\n\nfrappe.get_all('Sales Invoice', filters={'due_date': ['between', [start_date, end_date]]}, fields=['name', 'due_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices are due after today and belong to Goochi Ltd?",
      "fields": [
        "name",
        "due_date",
        "customer"
      ]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'customer': 'Goochi Ltd', 'due_date': ['>', datetime.date.today()]}, fields=['name', 'due_date', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were done through Point of Sale?",
      "fields": [
        "name",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1}, fields=['name', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were made using POS?",
      "fields": [
        "is_pos"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_pos': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices for the customer named 'Retail World'.",
      "fields": [
        "name",
        "customer",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'customer': 'Retail World'}, fields=['name', 'customer', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get non-POS invoices generated before today.",
      "fields": [
        "name",
        "posting_date",
        "is_pos"
      ]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'is_pos': 0, 'posting_date': ['<', datetime.date.today()]}, fields=['name', 'posting_date', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices created this week.",
      "fields": [
        "name",
        "posting_date",
        "is_pos"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\n\nfrappe.get_all('Sales Invoice', filters={'is_pos': 1, 'posting_date': ['between', [start, end]]}, fields=['name', 'posting_date', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any POS invoices created today?",
      "fields": [
        "is_pos",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'is_pos': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch the total number of invoices that are not POS-based.",
      "fields": [
        "is_pos"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_pos': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which POS invoices are also returns?",
      "fields": [
        "name",
        "is_pos",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'is_return': 1}, fields=['name', 'is_pos', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices made via POS with totals above 3000.",
      "fields": [
        "name",
        "is_pos",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'grand_total': ['>', 3000]}, fields=['name', 'is_pos', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me a list of customers who have POS invoices.",
      "fields": [
        "customer",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were created using the POS profile 'Counter A'?",
      "fields": [
        "pos_profile",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pos_profile': 'Counter A'}, fields=['name', 'pos_profile'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all POS profiles used in today's invoices.",
      "fields": [
        "pos_profile",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today()}, fields=['pos_profile'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were linked to the 'Main Hall POS' profile?",
      "fields": [
        "pos_profile"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'pos_profile': 'Main Hall POS'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices where POS profile was set but the invoice was not submitted.",
      "fields": [
        "pos_profile",
        "docstatus"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pos_profile': ['!=', ''], 'docstatus': 0}, fields=['name', 'pos_profile'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS profile and grand total for all POS invoices above 5000.",
      "fields": [
        "pos_profile",
        "grand_total",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'grand_total': ['>', 5000]}, fields=['pos_profile', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with missing POS profile but marked as POS transactions.",
      "fields": [
        "pos_profile",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pos_profile': ['in', [None, '']], 'is_pos': 1}, fields=['name', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers used the POS profile 'Retail POS' this week?",
      "fields": [
        "pos_profile",
        "customer",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\n\nfrappe.get_all('Sales Invoice', filters={'pos_profile': 'Retail POS', 'posting_date': ['between', [start, end]]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count the number of invoices without any POS profile assigned.",
      "fields": [
        "pos_profile"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'pos_profile': ['in', [None, '']]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get a list of invoices made using different POS profiles and their amounts.",
      "fields": [
        "pos_profile",
        "name",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pos_profile': ['!=', '']}, fields=['name', 'pos_profile', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which POS profiles were used for return invoices?",
      "fields": [
        "pos_profile",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1}, fields=['pos_profile'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any consolidated invoices?",
      "fields": [
        "is_consolidated"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'is_consolidated': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that were not consolidated.",
      "fields": [
        "name",
        "is_consolidated"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_consolidated': 0}, fields=['name', 'is_consolidated'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many consolidated invoices were issued this year?",
      "fields": [
        "is_consolidated",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\n\nfrappe.db.count('Sales Invoice', filters={'is_consolidated': 1, 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received consolidated invoices last month?",
      "fields": [
        "customer",
        "is_consolidated",
        "posting_date"
      ]
    },
    "output": "from frappe.utils import get_first_day, get_last_day, add_months\nimport datetime\n\nstart = get_first_day(add_months(datetime.date.today(), -1))\nend = get_last_day(add_months(datetime.date.today(), -1))\n\nfrappe.get_all('Sales Invoice', filters={'is_consolidated': 1, 'posting_date': ['between', [start, end]]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me consolidated invoices from Tech World Ltd.",
      "fields": [
        "customer",
        "is_consolidated",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Tech World Ltd.', 'is_consolidated': 1}, fields=['name', 'customer', 'is_consolidated'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List consolidated invoices with grand total above 25,000.",
      "fields": [
        "is_consolidated",
        "grand_total",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_consolidated': 1, 'grand_total': ['>', 25000]}, fields=['name', 'grand_total', 'is_consolidated'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which consolidated invoices are still unpaid?",
      "fields": [
        "is_consolidated",
        "status",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_consolidated': 1, 'status': 'Unpaid'}, fields=['name', 'is_consolidated', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get a list of consolidated invoices created today.",
      "fields": [
        "is_consolidated",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'is_consolidated': 1, 'posting_date': datetime.date.today()}, fields=['name', 'is_consolidated', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which consolidated invoices are marked as returns?",
      "fields": [
        "is_consolidated",
        "is_return",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_consolidated': 1, 'is_return': 1}, fields=['name', 'is_consolidated', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many consolidated invoices were submitted this week?",
      "fields": [
        "is_consolidated",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\n\nfrappe.db.count('Sales Invoice', filters={'is_consolidated': 1, 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices are returns?",
      "fields": [
        "name",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1}, fields=['name', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were marked as returns?",
      "fields": [
        "is_return"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all non-return invoices posted today.",
      "fields": [
        "name",
        "is_return",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'is_return': 0, 'posting_date': datetime.date.today()}, fields=['name', 'is_return', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch return invoices submitted by 'Ocean Traders'.",
      "fields": [
        "name",
        "is_return",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'customer': 'Ocean Traders'}, fields=['name', 'customer', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the list of return invoices with a grand total above 5000.",
      "fields": [
        "name",
        "is_return",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'grand_total': ['>', 5000]}, fields=['name', 'grand_total', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many returns were created last month?",
      "fields": [
        "is_return",
        "posting_date"
      ]
    },
    "output": "from frappe.utils import get_first_day, get_last_day, add_months\nimport datetime\n\nstart = get_first_day(add_months(datetime.date.today(), -1))\nend = get_last_day(add_months(datetime.date.today(), -1))\n\nfrappe.db.count('Sales Invoice', filters={'is_return': 1, 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all return invoices along with their return reference.",
      "fields": [
        "name",
        "is_return",
        "return_against"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1}, fields=['name', 'is_return', 'return_against'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which return invoices were created this week?",
      "fields": [
        "name",
        "is_return",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\n\nfrappe.get_all('Sales Invoice', filters={'is_return': 1, 'posting_date': ['between', [start, end]]}, fields=['name', 'posting_date', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices from 'Global Supplies' with outstanding amounts?",
      "fields": [
        "name",
        "customer",
        "is_return",
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'customer': 'Global Supplies', 'outstanding_amount': ['>', 0]}, fields=['name', 'customer', 'outstanding_amount', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices created after June 1, 2025.",
      "fields": [
        "name",
        "is_return",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'posting_date': ['>', datetime.date(2025, 6, 1)]}, fields=['name', 'posting_date', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that are returns and mention their original invoice reference.",
      "fields": [
        "name",
        "return_against"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1}, fields=['name', 'return_against'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which return invoice refers to INV-2025-0012?",
      "fields": [
        "name",
        "return_against"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'return_against': 'INV-2025-0012'}, fields=['name', 'return_against'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give all returns linked to any original invoice.",
      "fields": [
        "name",
        "return_against"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'return_against': ['!=', '']}, fields=['name', 'return_against'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices are linked to original invoices?",
      "fields": [
        "return_against"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'return_against': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices that reference original invoice INV-3056 as returns.",
      "fields": [
        "name",
        "return_against"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'return_against': 'INV-3056'}, fields=['name', 'return_against', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices and the corresponding invoice they are linked to.",
      "fields": [
        "name",
        "return_against"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1}, fields=['name', 'is_return', 'return_against'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices linked to 'Retail Hub' with original invoice numbers.",
      "fields": [
        "name",
        "customer",
        "return_against"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'customer': 'Retail Hub'}, fields=['name', 'return_against', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any returns not linked to any invoice?",
      "fields": [
        "return_against"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'return_against': ['=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What is the original invoice for return INV-2025-089?",
      "fields": [
        "return_against"
      ]
    },
    "output": "frappe.get_value('Sales Invoice', 'INV-2025-089', 'return_against')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all returns issued last month along with their original invoice references.",
      "fields": [
        "name",
        "posting_date",
        "return_against"
      ]
    },
    "output": "from frappe.utils import get_first_day, get_last_day, add_months\nimport datetime\n\nstart = get_first_day(add_months(datetime.date.today(), -1))\nend = get_last_day(add_months(datetime.date.today(), -1))\n\nfrappe.get_all('Sales Invoice', filters={'is_return': 1, 'posting_date': ['between', [start, end]]}, fields=['name', 'return_against'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have the 'update outstanding for self' option enabled?",
      "fields": [
        "name",
        "update_outstanding_for_self"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_outstanding_for_self': 1}, fields=['name', 'update_outstanding_for_self'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices where the update outstanding flag is turned off.",
      "fields": [
        "update_outstanding_for_self"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'update_outstanding_for_self': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoice names with update outstanding set to true.",
      "fields": [
        "name",
        "update_outstanding_for_self"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_outstanding_for_self': 1}, fields=['name', 'update_outstanding_for_self'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices for 'Krypton LLC' that have update outstanding enabled.",
      "fields": [
        "name",
        "customer",
        "update_outstanding_for_self"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Krypton LLC', 'update_outstanding_for_self': 1}, fields=['name', 'customer', 'update_outstanding_for_self'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any invoices with update outstanding disabled created this month?",
      "fields": [
        "posting_date",
        "update_outstanding_for_self"
      ]
    },
    "output": "from frappe.utils import get_first_day, get_last_day\nimport datetime\n\nstart = get_first_day(datetime.date.today())\nend = get_last_day(datetime.date.today())\n\nfrappe.db.exists('Sales Invoice', {'update_outstanding_for_self': 0, 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get recent POS invoices where update outstanding is active.",
      "fields": [
        "name",
        "is_pos",
        "update_outstanding_for_self"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'update_outstanding_for_self': 1}, fields=['name', 'is_pos', 'update_outstanding_for_self'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which sales partner’s invoices have update outstanding for self set?",
      "fields": [
        "name",
        "sales_partner",
        "update_outstanding_for_self"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_outstanding_for_self': 1}, fields=['name', 'sales_partner', 'update_outstanding_for_self'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with high grand total and update outstanding enabled.",
      "fields": [
        "name",
        "grand_total",
        "update_outstanding_for_self"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'grand_total': ['>', 5000], 'update_outstanding_for_self': 1}, fields=['name', 'grand_total', 'update_outstanding_for_self'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where both update stock and update outstanding are enabled.",
      "fields": [
        "name",
        "update_stock",
        "update_outstanding_for_self"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_stock': 1, 'update_outstanding_for_self': 1}, fields=['name', 'update_stock', 'update_outstanding_for_self'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices in June 2025 had update outstanding for self turned on?",
      "fields": [
        "posting_date",
        "update_outstanding_for_self"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'update_outstanding_for_self': 1, 'posting_date': ['between', [datetime.date(2025, 6, 1), datetime.date(2025, 6, 30)]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have updated the billed amount in the linked Sales Order?",
      "fields": [
        "name",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_sales_order': 1}, fields=['name', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have not updated the billed amount in Sales Orders?",
      "fields": [
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'update_billed_amount_in_sales_order': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices from 'Acme Inc.' that updated billed amount in the Sales Order.",
      "fields": [
        "name",
        "customer",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Acme Inc.', 'update_billed_amount_in_sales_order': 1}, fields=['name', 'customer', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the invoices created this month that didn't affect the billed amount in Sales Orders.",
      "fields": [
        "name",
        "posting_date",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "from frappe.utils import get_first_day, get_last_day\nimport datetime\nstart = get_first_day(datetime.date.today())\nend = get_last_day(datetime.date.today())\nfrappe.get_all('Sales Invoice', filters={'update_billed_amount_in_sales_order': 0, 'posting_date': ['between', [start, end]]}, fields=['name', 'posting_date', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there POS invoices that also update billed amount in Sales Orders?",
      "fields": [
        "name",
        "is_pos",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'update_billed_amount_in_sales_order': 1}, fields=['name', 'is_pos', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all returned invoices that update billed amount in Sales Orders.",
      "fields": [
        "name",
        "is_return",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'update_billed_amount_in_sales_order': 1}, fields=['name', 'is_return', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me the invoices that updated Sales Order billing in June 2025.",
      "fields": [
        "name",
        "update_billed_amount_in_sales_order",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_sales_order': 1, 'posting_date': ['between', [datetime.date(2025, 6, 1), datetime.date(2025, 6, 30)]]}, fields=['name', 'update_billed_amount_in_sales_order', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices for 'Gadget Co.' that did not update billed amount in SO.",
      "fields": [
        "name",
        "customer",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Gadget Co.', 'update_billed_amount_in_sales_order': 0}, fields=['name', 'customer', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices with total above 10,000 updated Sales Order billing?",
      "fields": [
        "name",
        "grand_total",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'grand_total': ['>', 10000], 'update_billed_amount_in_sales_order': 1}, fields=['name', 'grand_total', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do we have invoices with both stock update and billed amount update in SO?",
      "fields": [
        "name",
        "update_stock",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_stock': 1, 'update_billed_amount_in_sales_order': 1}, fields=['name', 'update_stock', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have updated the billed amount in the linked Delivery Note?",
      "fields": [
        "name",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_delivery_note': 1}, fields=['name', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count the invoices that did not update billed amount in Delivery Notes.",
      "fields": [
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'update_billed_amount_in_delivery_note': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices from 'SpeedyMart' that updated billed amount in Delivery Notes.",
      "fields": [
        "name",
        "customer",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'SpeedyMart', 'update_billed_amount_in_delivery_note': 1}, fields=['name', 'customer', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get non-updated Delivery Note invoices created last month.",
      "fields": [
        "name",
        "posting_date",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "from frappe.utils import add_months, get_first_day, get_last_day\nimport datetime\nstart = get_first_day(add_months(datetime.date.today(), -1))\nend = get_last_day(add_months(datetime.date.today(), -1))\nfrappe.get_all('Sales Invoice', filters={'update_billed_amount_in_delivery_note': 0, 'posting_date': ['between', [start, end]]}, fields=['name', 'posting_date', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do any POS invoices also update the Delivery Note billing?",
      "fields": [
        "name",
        "is_pos",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'update_billed_amount_in_delivery_note': 1}, fields=['name', 'is_pos', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with both stock and delivery note billing updates.",
      "fields": [
        "name",
        "update_stock",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_stock': 1, 'update_billed_amount_in_delivery_note': 1}, fields=['name', 'update_stock', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices with return status updated Delivery Note billing?",
      "fields": [
        "name",
        "is_return",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'update_billed_amount_in_delivery_note': 1}, fields=['name', 'is_return', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where billed amount wasn't updated in DN but grand total exceeded 5000.",
      "fields": [
        "name",
        "update_billed_amount_in_delivery_note",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_delivery_note': 0, 'grand_total': ['>', 5000]}, fields=['name', 'update_billed_amount_in_delivery_note', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoices for 'TechNova' with DN billing updated in June 2025.",
      "fields": [
        "name",
        "customer",
        "update_billed_amount_in_delivery_note",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'TechNova', 'update_billed_amount_in_delivery_note': 1, 'posting_date': ['between', [datetime.date(2025, 6, 1), datetime.date(2025, 6, 30)]]}, fields=['name', 'customer', 'update_billed_amount_in_delivery_note', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if there's any Delivery Note billing update in today's invoices.",
      "fields": [
        "update_billed_amount_in_delivery_note",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'update_billed_amount_in_delivery_note': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices updated the billed amount in their sales orders?",
      "fields": [
        "name",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_sales_order': 1}, fields=['name', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me invoices that didn’t update billed amount in sales orders.",
      "fields": [
        "name",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_sales_order': 0}, fields=['name', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have their sales order billing status updated?",
      "fields": [
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'update_billed_amount_in_sales_order': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List customer names for invoices where sales order billing was updated.",
      "fields": [
        "customer",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_sales_order': 1}, fields=['customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices from 'Sun Traders' have billing updates in their sales orders?",
      "fields": [
        "name",
        "customer",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Sun Traders', 'update_billed_amount_in_sales_order': 1}, fields=['name', 'customer', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch POS invoices that also update the billed amount in the sales order.",
      "fields": [
        "name",
        "is_pos",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'update_billed_amount_in_sales_order': 1}, fields=['name', 'is_pos', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Did any invoices created this month update the billed amount in sales orders?",
      "fields": [
        "name",
        "posting_date",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nend = datetime.date.today()\nfrappe.get_all('Sales Invoice', filters={'update_billed_amount_in_sales_order': 1, 'posting_date': ['between', [start, end]]}, fields=['name', 'posting_date', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where billed amounts weren’t synced back to sales orders.",
      "fields": [
        "name",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_sales_order': 0}, fields=['name', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices that both return items and update sales order billing.",
      "fields": [
        "name",
        "is_return",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'update_billed_amount_in_sales_order': 1}, fields=['name', 'is_return', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show the posting dates of invoices that have updated their sales order billing.",
      "fields": [
        "name",
        "posting_date",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_sales_order': 1}, fields=['name', 'posting_date', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices updated the billed amount in their delivery notes?",
      "fields": [
        "name",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_delivery_note': 1}, fields=['name', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices that did not sync billed amounts back to delivery notes.",
      "fields": [
        "name",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_delivery_note': 0}, fields=['name', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices with delivery note billing update enabled.",
      "fields": [
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'update_billed_amount_in_delivery_note': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices where 'Gadget House' has updated billing in delivery notes.",
      "fields": [
        "name",
        "customer",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Gadget House', 'update_billed_amount_in_delivery_note': 1}, fields=['name', 'customer', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List the posting dates of invoices with delivery note billing updates.",
      "fields": [
        "name",
        "posting_date",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_delivery_note': 1}, fields=['name', 'posting_date', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Did any POS invoices update their delivery note billing?",
      "fields": [
        "name",
        "is_pos",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'update_billed_amount_in_delivery_note': 1}, fields=['name', 'is_pos', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with both delivery note billing updates and returns.",
      "fields": [
        "name",
        "is_return",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'update_billed_amount_in_delivery_note': 1}, fields=['name', 'is_return', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many non-return invoices update delivery note billing?",
      "fields": [
        "update_billed_amount_in_delivery_note",
        "is_return"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 0, 'update_billed_amount_in_delivery_note': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices with delivery billing update and amount over 5000.",
      "fields": [
        "name",
        "update_billed_amount_in_delivery_note",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_delivery_note': 1, 'grand_total': ['>', 5000]}, fields=['name', 'update_billed_amount_in_delivery_note', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers updated billing info in delivery notes this week?",
      "fields": [
        "customer",
        "update_billed_amount_in_delivery_note",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\nfrappe.get_all('Sales Invoice', filters={'update_billed_amount_in_delivery_note': 1, 'posting_date': ['between', [start, end]]}, fields=['customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices are marked as debit notes?",
      "fields": [
        "name",
        "is_debit_note"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_debit_note': 1}, fields=['name', 'is_debit_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many debit notes were issued to customers?",
      "fields": [
        "is_debit_note"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_debit_note': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all debit notes created last month.",
      "fields": [
        "name",
        "posting_date",
        "is_debit_note"
      ]
    },
    "output": "from frappe.utils import add_months, get_first_day, get_last_day\nimport datetime\nstart_date = get_first_day(add_months(datetime.date.today(), -1))\nend_date = get_last_day(add_months(datetime.date.today(), -1))\nfrappe.get_all('Sales Invoice', filters={'is_debit_note': 1, 'posting_date': ['between', [start_date, end_date]]}, fields=['name', 'posting_date', 'is_debit_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find debit notes issued by the company 'RetailX Corp'.",
      "fields": [
        "name",
        "company",
        "is_debit_note"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_debit_note': 1, 'company': 'RetailX Corp'}, fields=['name', 'company', 'is_debit_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any debit notes with a grand total exceeding 10,000?",
      "fields": [
        "name",
        "grand_total",
        "is_debit_note"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_debit_note': 1, 'grand_total': ['>', 10000]}, fields=['name', 'grand_total', 'is_debit_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received debit notes this week?",
      "fields": [
        "customer",
        "is_debit_note"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\nfrappe.get_all('Sales Invoice', filters={'is_debit_note': 1, 'posting_date': ['between', [start, end]]}, fields=['customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me debit notes that are still unpaid.",
      "fields": [
        "name",
        "status",
        "is_debit_note"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_debit_note': 1, 'status': 'Unpaid'}, fields=['name', 'status', 'is_debit_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List debit notes for 'Acme Ltd' with posting date after June 1, 2025.",
      "fields": [
        "name",
        "customer",
        "posting_date",
        "is_debit_note"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_debit_note': 1, 'customer': 'Acme Ltd', 'posting_date': ['>', datetime.date(2025, 6, 1)]}, fields=['name', 'customer', 'posting_date', 'is_debit_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which debit notes were created today?",
      "fields": [
        "name",
        "posting_date",
        "is_debit_note"
      ]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'is_debit_note': 1, 'posting_date': datetime.date.today()}, fields=['name', 'posting_date', 'is_debit_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find debit notes that are returns as well.",
      "fields": [
        "name",
        "is_debit_note",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_debit_note': 1, 'is_return': 1}, fields=['name', 'is_debit_note', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were amended from a previous one?",
      "fields": [
        "name",
        "amended_from"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'amended_from': ['!=', '']}, fields=['name', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that are modifications of others.",
      "fields": [
        "name",
        "amended_from"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'amended_from': ['!=', '']}, fields=['name', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices that have been amended more than once.",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'amended_from': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give all invoices that were amended from invoice SI-0001.",
      "fields": [
        "name",
        "amended_from"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'amended_from': 'SI-0001'}, fields=['name', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all revised invoices for 'Retail Corp'.",
      "fields": [
        "name",
        "customer",
        "amended_from"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Retail Corp', 'amended_from': ['!=', '']}, fields=['name', 'customer', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices amended today?",
      "fields": [
        "amended_from",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'posting_date': datetime.date.today(), 'amended_from': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show amended invoices that are also debit notes.",
      "fields": [
        "name",
        "is_debit_note",
        "amended_from"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_debit_note': 1, 'amended_from': ['!=', '']}, fields=['name', 'is_debit_note', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have not been amended?",
      "fields": [
        "name",
        "amended_from"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'amended_from': ['=', '']}, fields=['name', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices amended from another invoice this week.",
      "fields": [
        "name",
        "amended_from",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\nfrappe.get_all('Sales Invoice', filters={'amended_from': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['name', 'amended_from', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many amended invoices were created for company 'Tradelink Ltd'?",
      "fields": [
        "amended_from",
        "company"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'amended_from': ['!=', ''], 'company': 'Tradelink Ltd'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were booked under the Main Cost Center?",
      "fields": [
        "name",
        "cost_center"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'cost_center': 'Main Cost Center'}, fields=['name', 'cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices associated with cost center East Zone.",
      "fields": [
        "name",
        "cost_center"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'cost_center': 'East Zone'}, fields=['name', 'cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were tagged to the North Division cost center?",
      "fields": [
        "cost_center"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'cost_center': 'North Division'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with a blank cost center field.",
      "fields": [
        "name",
        "cost_center"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'cost_center': ''}, fields=['name', 'cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with cost centers starting with 'HO'.",
      "fields": [
        "name",
        "cost_center"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'cost_center': ['like', 'HO%']}, fields=['name', 'cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all POS invoices booked under Retail Cost Center.",
      "fields": [
        "name",
        "cost_center",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'cost_center': 'Retail Cost Center', 'is_pos': 1}, fields=['name', 'cost_center', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with cost center 'Warehouse-001' and company 'Gulf Ltd'.",
      "fields": [
        "name",
        "cost_center",
        "company"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'cost_center': 'Warehouse-001', 'company': 'Gulf Ltd'}, fields=['name', 'cost_center', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with cost center defined and net total greater than 5000.",
      "fields": [
        "name",
        "cost_center",
        "net_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'cost_center': ['!=', ''], 'net_total': ['>', 5000]}, fields=['name', 'cost_center', 'net_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many sales returns were recorded under Regional Cost Center?",
      "fields": [
        "cost_center",
        "is_return"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'cost_center': 'Regional Cost Center', 'is_return': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices by cost center 'Admin' posted this month.",
      "fields": [
        "name",
        "cost_center",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'cost_center': 'Admin', 'posting_date': ['>=', start]}, fields=['name', 'cost_center', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices associated with project code 'PRJ-2025-001'.",
      "fields": [
        "name",
        "project"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'project': 'PRJ-2025-001'}, fields=['name', 'project'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices are linked to the project 'Alpha Expansion'?",
      "fields": [
        "project"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'project': 'Alpha Expansion'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices that are not linked to any project.",
      "fields": [
        "name",
        "project"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'project': ''}, fields=['name', 'project'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices for 'Apollo Infra' project posted after 2025-05-01.",
      "fields": [
        "name",
        "project",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'project': 'Apollo Infra', 'posting_date': ['>', datetime.date(2025, 5, 1)]}, fields=['name', 'project', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices linked to project 'Green Energy'?",
      "fields": [
        "customer",
        "project"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'project': 'Green Energy'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices under the project 'Legacy Tower'.",
      "fields": [
        "name",
        "is_return",
        "project"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'project': 'Legacy Tower', 'is_return': 1}, fields=['name', 'project', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get POS invoices linked to project 'Retail 360'.",
      "fields": [
        "name",
        "project",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'project': 'Retail 360', 'is_pos': 1}, fields=['name', 'project', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices for the 'Urban Smart Homes' project with total exceeding 50000.",
      "fields": [
        "name",
        "project",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'project': 'Urban Smart Homes', 'grand_total': ['>', 50000]}, fields=['name', 'project', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which projects were billed in June 2025?",
      "fields": [
        "project",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['between', [datetime.date(2025, 6, 1), datetime.date(2025, 6, 30)] ]}, fields=['project'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any invoices for project 'Skyline Mega Mall' billed today?",
      "fields": [
        "project",
        "posting_date"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'project': 'Skyline Mega Mall', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where currency and price list settings were changed manually.",
      "fields": [
        "currency_and_price_list",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'currency_and_price_list': 1}, fields=['name', 'currency_and_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that have custom currency and price list configurations.",
      "fields": [
        "name",
        "currency_and_price_list",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'currency_and_price_list': 1}, fields=['name', 'currency_and_price_list', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices did not use the default price list setting?",
      "fields": [
        "currency_and_price_list"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'currency_and_price_list': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get a list of invoices where price list selection was overridden.",
      "fields": [
        "name",
        "currency_and_price_list"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'currency_and_price_list': 1}, fields=['name', 'currency_and_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices with modified price list settings?",
      "fields": [
        "customer",
        "currency_and_price_list"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'currency_and_price_list': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all POS invoices that used a non-standard currency and price list setup.",
      "fields": [
        "name",
        "currency_and_price_list",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'currency_and_price_list': 1, 'is_pos': 1}, fields=['name', 'currency_and_price_list', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices with custom currency and price list settings.",
      "fields": [
        "name",
        "currency_and_price_list",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'currency_and_price_list': 1, 'is_return': 1}, fields=['name', 'currency_and_price_list', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with updated currency and price list made this month.",
      "fields": [
        "name",
        "posting_date",
        "currency_and_price_list"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'currency_and_price_list': 1, 'posting_date': ['>=', start]}, fields=['name', 'currency_and_price_list', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any invoices with overridden currency settings created today?",
      "fields": [
        "currency_and_price_list",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'currency_and_price_list': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices this year have changed currency and price list?",
      "fields": [
        "currency_and_price_list",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\nfrappe.db.count('Sales Invoice', filters={'currency_and_price_list': 1, 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices where the currency conversion rate is greater than 1.5.",
      "fields": [
        "name",
        "conversion_rate"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'conversion_rate': ['>', 1.5]}, fields=['name', 'conversion_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have a conversion rate less than the base rate of 1?",
      "fields": [
        "name",
        "conversion_rate"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'conversion_rate': ['<', 1]}, fields=['name', 'conversion_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were posted with a currency conversion rate exactly equal to 1?",
      "fields": [
        "conversion_rate"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'conversion_rate': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices with conversion rates modified manually by users.",
      "fields": [
        "name",
        "conversion_rate",
        "currency_and_price_list"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'currency_and_price_list': 1, 'conversion_rate': ['!=', 1]}, fields=['name', 'conversion_rate', 'currency_and_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with conversion rates higher than 2.0.",
      "fields": [
        "name",
        "conversion_rate",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'conversion_rate': ['>', 2.0], 'is_return': 1}, fields=['name', 'conversion_rate', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there invoices created today with a different conversion rate than the default?",
      "fields": [
        "conversion_rate",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'conversion_rate': ['!=', 1], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices with conversion rate below 0.9.",
      "fields": [
        "name",
        "is_pos",
        "conversion_rate"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'conversion_rate': ['<', 0.9]}, fields=['name', 'is_pos', 'conversion_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices in April 2025 with conversion rates above 1.2.",
      "fields": [
        "name",
        "conversion_rate",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(2025, 4, 1)\nend = datetime.date(2025, 4, 30)\nfrappe.get_all('Sales Invoice', filters={'conversion_rate': ['>', 1.2], 'posting_date': ['between', [start, end]]}, fields=['name', 'conversion_rate', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many customer invoices were billed with a conversion rate above 1?",
      "fields": [
        "customer",
        "conversion_rate"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'conversion_rate': ['>', 1]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me invoices from 'Acme Corp' where conversion rate was not 1.",
      "fields": [
        "name",
        "conversion_rate",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Acme Corp', 'conversion_rate': ['!=', 1]}, fields=['name', 'conversion_rate', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the selling price list used was 'Standard Selling'.",
      "fields": [
        "name",
        "selling_price_list"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'selling_price_list': 'Standard Selling'}, fields=['name', 'selling_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were made using the 'Retail Selling' price list?",
      "fields": [
        "selling_price_list"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'selling_price_list': 'Retail Selling'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices that used 'POS Price List'.",
      "fields": [
        "name",
        "is_pos",
        "selling_price_list"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'selling_price_list': 'POS Price List'}, fields=['name', 'is_pos', 'selling_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices from 'Tech Supplies' where 'Premium Pricing' was applied.",
      "fields": [
        "name",
        "customer",
        "selling_price_list"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Tech Supplies', 'selling_price_list': 'Premium Pricing'}, fields=['name', 'customer', 'selling_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all return invoices that used the 'Wholesale Selling' price list.",
      "fields": [
        "name",
        "is_return",
        "selling_price_list"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'selling_price_list': 'Wholesale Selling'}, fields=['name', 'is_return', 'selling_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices created today using 'Special Rates' price list?",
      "fields": [
        "selling_price_list",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'selling_price_list': 'Special Rates', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me invoices using any price list other than 'Standard Selling'.",
      "fields": [
        "name",
        "selling_price_list"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'selling_price_list': ['!=', 'Standard Selling']}, fields=['name', 'selling_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices this quarter with the price list set as 'Seasonal Offer'.",
      "fields": [
        "name",
        "selling_price_list",
        "posting_date"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\nfrappe.get_all('Sales Invoice', filters={'selling_price_list': 'Seasonal Offer', 'posting_date': ['>=', start]}, fields=['name', 'selling_price_list', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List distinct price lists used by 'Global Traders' in their invoices.",
      "fields": [
        "customer",
        "selling_price_list"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Global Traders'}, fields=['selling_price_list'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with 'Holiday Deal' selling price list?",
      "fields": [
        "customer",
        "selling_price_list"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'selling_price_list': 'Holiday Deal'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the price list currency is USD.",
      "fields": [
        "name",
        "price_list_currency"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'price_list_currency': 'USD'}, fields=['name', 'price_list_currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have price list currency as EUR?",
      "fields": [
        "price_list_currency"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'price_list_currency': 'EUR'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices where the price list currency was INR.",
      "fields": [
        "name",
        "is_return",
        "price_list_currency"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'price_list_currency': 'INR'}, fields=['name', 'is_return', 'price_list_currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices from 'Acme Corp' where the price list currency is GBP.",
      "fields": [
        "name",
        "customer",
        "price_list_currency"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Acme Corp', 'price_list_currency': 'GBP'}, fields=['name', 'customer', 'price_list_currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices using AED as the price list currency.",
      "fields": [
        "name",
        "is_pos",
        "price_list_currency"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'price_list_currency': 'AED'}, fields=['name', 'is_pos', 'price_list_currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices posted today in CAD as price list currency?",
      "fields": [
        "price_list_currency",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'price_list_currency': 'CAD', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with price list currency other than USD.",
      "fields": [
        "name",
        "price_list_currency"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'price_list_currency': ['!=', 'USD']}, fields=['name', 'price_list_currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me invoices this year with price list currency as QAR.",
      "fields": [
        "name",
        "price_list_currency",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\nfrappe.get_all('Sales Invoice', filters={'price_list_currency': 'QAR', 'posting_date': ['between', [start, end]]}, fields=['name', 'price_list_currency', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices in SGD as the price list currency?",
      "fields": [
        "customer",
        "price_list_currency"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'price_list_currency': 'SGD'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with 'Holiday Promo' price list and currency set to JPY.",
      "fields": [
        "name",
        "selling_price_list",
        "price_list_currency"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'selling_price_list': 'Holiday Promo', 'price_list_currency': 'JPY'}, fields=['name', 'selling_price_list', 'price_list_currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where the price list currency conversion rate is greater than 1.5.",
      "fields": [
        "name",
        "plc_conversion_rate"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'plc_conversion_rate': ['>', 1.5]}, fields=['name', 'plc_conversion_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have a plc conversion rate less than 1?",
      "fields": [
        "plc_conversion_rate"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'plc_conversion_rate': ['<', 1]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices with plc conversion rate over 2.0.",
      "fields": [
        "name",
        "is_return",
        "plc_conversion_rate"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'plc_conversion_rate': ['>', 2.0]}, fields=['name', 'is_return', 'plc_conversion_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices where the plc conversion rate is exactly 1.0.",
      "fields": [
        "name",
        "is_pos",
        "plc_conversion_rate"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'plc_conversion_rate': 1.0}, fields=['name', 'is_pos', 'plc_conversion_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices created today with plc conversion rate between 1 and 2.",
      "fields": [
        "name",
        "plc_conversion_rate",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'plc_conversion_rate': ['between', [1, 2]]}, fields=['name', 'plc_conversion_rate', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with a conversion rate under 0.9?",
      "fields": [
        "customer",
        "plc_conversion_rate"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'plc_conversion_rate': ['<', 0.9]}, fields=['customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show distinct conversion rates used in return invoices.",
      "fields": [
        "is_return",
        "plc_conversion_rate"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1}, fields=['plc_conversion_rate'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices this month where plc conversion rate is not 1.",
      "fields": [
        "name",
        "plc_conversion_rate",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'plc_conversion_rate': ['!=', 1]}, fields=['name', 'plc_conversion_rate', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if there are any invoices with plc conversion rate above 3 today.",
      "fields": [
        "plc_conversion_rate",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'posting_date': datetime.date.today(), 'plc_conversion_rate': ['>', 3]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices this year had a plc conversion rate below 0.5?",
      "fields": [
        "plc_conversion_rate",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\nfrappe.db.count('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'plc_conversion_rate': ['<', 0.5]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where pricing rules were explicitly ignored.",
      "fields": [
        "name",
        "ignore_pricing_rule"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'ignore_pricing_rule': 1}, fields=['name', 'ignore_pricing_rule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices do not follow any pricing rules?",
      "fields": [
        "ignore_pricing_rule"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'ignore_pricing_rule': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices that skipped pricing rules.",
      "fields": [
        "name",
        "is_return",
        "ignore_pricing_rule"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'ignore_pricing_rule': 1}, fields=['name', 'is_return', 'ignore_pricing_rule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where pricing rules were ignored.",
      "fields": [
        "name",
        "is_pos",
        "ignore_pricing_rule"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'ignore_pricing_rule': 1}, fields=['name', 'is_pos', 'ignore_pricing_rule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices created today that did not apply pricing rules.",
      "fields": [
        "name",
        "ignore_pricing_rule",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'ignore_pricing_rule': 1, 'posting_date': datetime.date.today()}, fields=['name', 'ignore_pricing_rule', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices that skipped pricing rules?",
      "fields": [
        "customer",
        "ignore_pricing_rule"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'ignore_pricing_rule': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices this quarter where pricing rules were not used.",
      "fields": [
        "name",
        "ignore_pricing_rule",
        "posting_date"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\nfrappe.get_all('Sales Invoice', filters={'ignore_pricing_rule': 1, 'posting_date': ['>=', start]}, fields=['name', 'ignore_pricing_rule', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices where pricing rules were applied.",
      "fields": [
        "name",
        "ignore_pricing_rule"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'ignore_pricing_rule': 0}, fields=['name', 'ignore_pricing_rule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoices today ignored pricing rules.",
      "fields": [
        "ignore_pricing_rule",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'ignore_pricing_rule': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices this year that were created without pricing rules.",
      "fields": [
        "ignore_pricing_rule",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\nfrappe.db.count('Sales Invoice', filters={'ignore_pricing_rule': 1, 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where barcode scanning was enabled.",
      "fields": [
        "name",
        "scan_barcode"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'scan_barcode': 1}, fields=['name', 'scan_barcode'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices used barcode scanning?",
      "fields": [
        "scan_barcode"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'scan_barcode': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices where barcode scanning was active.",
      "fields": [
        "name",
        "is_return",
        "scan_barcode"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'scan_barcode': 1}, fields=['name', 'is_return', 'scan_barcode'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which POS invoices had barcode scanning enabled?",
      "fields": [
        "name",
        "is_pos",
        "scan_barcode"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'scan_barcode': 1}, fields=['name', 'is_pos', 'scan_barcode'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show today's invoices that involved barcode scanning.",
      "fields": [
        "name",
        "scan_barcode",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'scan_barcode': 1, 'posting_date': datetime.date.today()}, fields=['name', 'scan_barcode', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers used barcode scanning in their invoices?",
      "fields": [
        "customer",
        "scan_barcode"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'scan_barcode': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give all invoices from this quarter with barcode scanning turned on.",
      "fields": [
        "name",
        "scan_barcode",
        "posting_date"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\nfrappe.get_all('Sales Invoice', filters={'scan_barcode': 1, 'posting_date': ['>=', start]}, fields=['name', 'scan_barcode', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where barcode scanning was not used.",
      "fields": [
        "name",
        "scan_barcode"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'scan_barcode': 0}, fields=['name', 'scan_barcode'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices created today that used barcode scanning?",
      "fields": [
        "scan_barcode",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'scan_barcode': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices this year had barcode scanning enabled?",
      "fields": [
        "scan_barcode",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\nfrappe.db.count('Sales Invoice', filters={'scan_barcode': 1, 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where stock was updated.",
      "fields": [
        "name",
        "update_stock"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_stock': 1}, fields=['name', 'update_stock'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices involved stock updates?",
      "fields": [
        "update_stock"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'update_stock': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices that updated stock.",
      "fields": [
        "name",
        "is_return",
        "update_stock"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'update_stock': 1}, fields=['name', 'is_return', 'update_stock'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where stock was also updated.",
      "fields": [
        "name",
        "is_pos",
        "update_stock"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'update_stock': 1}, fields=['name', 'is_pos', 'update_stock'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices from this week that included stock updates.",
      "fields": [
        "name",
        "update_stock",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\nfrappe.get_all('Sales Invoice', filters={'update_stock': 1, 'posting_date': ['between', [start, end]]}, fields=['name', 'update_stock', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices that updated stock?",
      "fields": [
        "customer",
        "update_stock"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_stock': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoices from 'SuperMart' that updated stock.",
      "fields": [
        "name",
        "customer",
        "update_stock"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'SuperMart', 'update_stock': 1}, fields=['name', 'customer', 'update_stock'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with no stock update applied.",
      "fields": [
        "name",
        "update_stock"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_stock': 0}, fields=['name', 'update_stock'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Did any invoices update stock today?",
      "fields": [
        "update_stock",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'update_stock': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices this year triggered stock updates?",
      "fields": [
        "update_stock",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\nfrappe.db.count('Sales Invoice', filters={'update_stock': 1, 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Did any invoices use 'Warehouse A' today?",
      "fields": [
        "set_warehouse",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'set_warehouse': 'Warehouse A', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices from this quarter that used 'Seasonal Warehouse'.",
      "fields": [
        "name",
        "set_warehouse",
        "posting_date"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\nfrappe.get_all('Sales Invoice', filters={'set_warehouse': 'Seasonal Warehouse', 'posting_date': ['>=', start]}, fields=['name', 'set_warehouse', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List distinct warehouses used in Sales Invoices.",
      "fields": [
        "set_warehouse"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['set_warehouse'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all invoices that did not use the default warehouse.",
      "fields": [
        "name",
        "set_warehouse"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'set_warehouse': ['!=', 'Main Warehouse']}, fields=['name', 'set_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers used 'Express Warehouse' for fulfillment?",
      "fields": [
        "customer",
        "set_warehouse"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'set_warehouse': 'Express Warehouse'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that used 'Main Warehouse' as the default warehouse.",
      "fields": [
        "name",
        "set_warehouse"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'set_warehouse': 'Main Warehouse'}, fields=['name', 'set_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were assigned to 'Retail Warehouse'?",
      "fields": [
        "set_warehouse"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'set_warehouse': 'Retail Warehouse'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which POS invoices were fulfilled from 'Outlet Warehouse'?",
      "fields": [
        "name",
        "is_pos",
        "set_warehouse"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'set_warehouse': 'Outlet Warehouse'}, fields=['name', 'is_pos', 'set_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices from customer 'SuperMart' using 'Store Warehouse'.",
      "fields": [
        "name",
        "customer",
        "set_warehouse"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'SuperMart', 'set_warehouse': 'Store Warehouse'}, fields=['name', 'customer', 'set_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices assigned to 'Returns Warehouse'.",
      "fields": [
        "name",
        "is_return",
        "set_warehouse"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'set_warehouse': 'Returns Warehouse'}, fields=['name', 'is_return', 'set_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Did any invoices use 'Warehouse A' today?",
      "fields": [
        "set_warehouse",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'set_warehouse': 'Warehouse A', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices from this quarter that used 'Seasonal Warehouse'.",
      "fields": [
        "name",
        "set_warehouse",
        "posting_date"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\nfrappe.get_all('Sales Invoice', filters={'set_warehouse': 'Seasonal Warehouse', 'posting_date': ['>=', start]}, fields=['name', 'set_warehouse', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List distinct warehouses used in Sales Invoices.",
      "fields": [
        "set_warehouse"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['set_warehouse'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all invoices that did not use the default warehouse.",
      "fields": [
        "name",
        "set_warehouse"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'set_warehouse': ['!=', 'Main Warehouse']}, fields=['name', 'set_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers used 'Express Warehouse' for fulfillment?",
      "fields": [
        "customer",
        "set_warehouse"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'set_warehouse': 'Express Warehouse'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that had 'Target Warehouse 1' selected as their target warehouse.",
      "fields": [
        "name",
        "set_target_warehouse"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'set_target_warehouse': 'Target Warehouse 1'}, fields=['name', 'set_target_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were assigned to 'Outlet Target Warehouse'?",
      "fields": [
        "set_target_warehouse"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'set_target_warehouse': 'Outlet Target Warehouse'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which POS invoices used 'Retail Target Warehouse'?",
      "fields": [
        "name",
        "is_pos",
        "set_target_warehouse"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'set_target_warehouse': 'Retail Target Warehouse'}, fields=['name', 'is_pos', 'set_target_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices for customer 'ElectroMart' with 'Main Target Warehouse'.",
      "fields": [
        "name",
        "customer",
        "set_target_warehouse"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'ElectroMart', 'set_target_warehouse': 'Main Target Warehouse'}, fields=['name', 'customer', 'set_target_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices that used 'Returns Target Warehouse'.",
      "fields": [
        "name",
        "is_return",
        "set_target_warehouse"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'set_target_warehouse': 'Returns Target Warehouse'}, fields=['name', 'is_return', 'set_target_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices created today with 'Express Target Warehouse'?",
      "fields": [
        "set_target_warehouse",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'set_target_warehouse': 'Express Target Warehouse', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices from this quarter with 'Seasonal Target Warehouse' assigned.",
      "fields": [
        "name",
        "set_target_warehouse",
        "posting_date"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\nfrappe.get_all('Sales Invoice', filters={'set_target_warehouse': 'Seasonal Target Warehouse', 'posting_date': ['>=', start]}, fields=['name', 'set_target_warehouse', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List distinct target warehouses used in invoices.",
      "fields": [
        "set_target_warehouse"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['set_target_warehouse'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices that did not use 'Central Target Warehouse'.",
      "fields": [
        "name",
        "set_target_warehouse"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'set_target_warehouse': ['!=', 'Central Target Warehouse']}, fields=['name', 'set_target_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers used 'City Target Warehouse' in their invoices?",
      "fields": [
        "customer",
        "set_target_warehouse"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'set_target_warehouse': 'City Target Warehouse'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices that include items in the invoice lines.",
      "fields": [
        "items",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'items': ['!=', '']}, fields=['name', 'items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where 'Laptop Pro 15' is one of the items.",
      "fields": [
        "items",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'items.item_code': 'Laptop Pro 15'}, fields=['name', 'items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices include the item 'USB Cable'?",
      "fields": [
        "items"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'items.item_code': 'USB Cable'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices where any of the items have quantity more than 10.",
      "fields": [
        "items",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'items.qty': ['>', 10]}, fields=['name', 'items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that include both 'Mouse' and 'Keyboard' in the items.",
      "fields": [
        "items",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'items.item_code': ['in', ['Mouse', 'Keyboard']]}, fields=['name', 'items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices with at least one item quantity above 5.",
      "fields": [
        "is_pos",
        "items",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'items.qty': ['>', 5]}, fields=['name', 'is_pos', 'items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers bought the item 'HDMI Cable'?",
      "fields": [
        "customer",
        "items"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'items.item_code': 'HDMI Cable'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices that included 'SSD Drive' as an item.",
      "fields": [
        "is_return",
        "items",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'items.item_code': 'SSD Drive'}, fields=['name', 'is_return', 'items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any invoices today that include 'Monitor 27 inch'?",
      "fields": [
        "items",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'items.item_code': 'Monitor 27 inch', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices this year included 'Bluetooth Speaker'?",
      "fields": [
        "items",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\nfrappe.db.count('Sales Invoice', filters={'items.item_code': 'Bluetooth Speaker', 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices where the total quantity exceeds 100.",
      "fields": [
        "name",
        "total_qty"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_qty': ['>', 100]}, fields=['name', 'total_qty'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had a total quantity of zero?",
      "fields": [
        "total_qty"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'total_qty': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices where the total quantity is more than 20.",
      "fields": [
        "name",
        "is_pos",
        "total_qty"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'total_qty': ['>', 20]}, fields=['name', 'is_pos', 'total_qty'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get return invoices with total quantity less than 10.",
      "fields": [
        "name",
        "is_return",
        "total_qty"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'total_qty': ['<', 10]}, fields=['name', 'is_return', 'total_qty'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices this month with total quantity above 50.",
      "fields": [
        "name",
        "total_qty",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'total_qty': ['>', 50], 'posting_date': ['>=', start]}, fields=['name', 'total_qty', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices today with total quantity exactly 1?",
      "fields": [
        "total_qty",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'total_qty': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices where total quantity is not equal to 0.",
      "fields": [
        "name",
        "total_qty"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_qty': ['!=', 0]}, fields=['name', 'total_qty'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices with total quantity above 200?",
      "fields": [
        "customer",
        "total_qty"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_qty': ['>', 200]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the average total quantity of all invoices created this year.",
      "fields": [
        "total_qty"
      ]
    },
    "output": "import datetime\n\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\ninvoices = frappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['total_qty'])\navg_qty = sum(flt(inv.total_qty) for inv in invoices) / len(invoices) if invoices else 0\nprint('Average Total Qty:', avg_qty)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices were made with zero total quantity?",
      "fields": [
        "is_return",
        "total_qty"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'total_qty': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the total net weight exceeds 500 kg.",
      "fields": [
        "name",
        "total_net_weight"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_net_weight': ['>', 500]}, fields=['name', 'total_net_weight'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have zero total net weight?",
      "fields": [
        "total_net_weight"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'total_net_weight': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with a total net weight below 100 kg.",
      "fields": [
        "name",
        "is_pos",
        "total_net_weight"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'total_net_weight': ['<', 100]}, fields=['name', 'is_pos', 'total_net_weight'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where the total net weight is over 250 kg.",
      "fields": [
        "name",
        "is_return",
        "total_net_weight"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'total_net_weight': ['>', 250]}, fields=['name', 'is_return', 'total_net_weight'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices this week with a total net weight over 1000 kg?",
      "fields": [
        "name",
        "total_net_weight",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\nfrappe.get_all('Sales Invoice', filters={'total_net_weight': ['>', 1000], 'posting_date': ['between', [start, end]]}, fields=['name', 'total_net_weight', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if there are any invoices with net weight exactly 300 kg created today.",
      "fields": [
        "total_net_weight",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'total_net_weight': 300, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give a list of invoices with non-zero net weight.",
      "fields": [
        "name",
        "total_net_weight"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_net_weight': ['!=', 0]}, fields=['name', 'total_net_weight'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with a total net weight greater than 800 kg?",
      "fields": [
        "customer",
        "total_net_weight"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_net_weight': ['>', 800]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the average total net weight of invoices from this year.",
      "fields": [
        "total_net_weight"
      ]
    },
    "output": "import datetime\n\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['total_net_weight'])\navg = sum(flt(d.total_net_weight) for d in data) / len(data) if data else 0\nprint('Average Total Net Weight:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices had no net weight?",
      "fields": [
        "is_return",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'total_net_weight': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the total net weight exceeds 500 kg.",
      "fields": [
        "name",
        "total_net_weight"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_net_weight': ['>', 500]}, fields=['name', 'total_net_weight'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have zero total net weight?",
      "fields": [
        "total_net_weight"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'total_net_weight': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with a total net weight below 100 kg.",
      "fields": [
        "name",
        "is_pos",
        "total_net_weight"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'total_net_weight': ['<', 100]}, fields=['name', 'is_pos', 'total_net_weight'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where the total net weight is over 250 kg.",
      "fields": [
        "name",
        "is_return",
        "total_net_weight"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'total_net_weight': ['>', 250]}, fields=['name', 'is_return', 'total_net_weight'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices this week with a total net weight over 1000 kg?",
      "fields": [
        "name",
        "total_net_weight",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\nfrappe.get_all('Sales Invoice', filters={'total_net_weight': ['>', 1000], 'posting_date': ['between', [start, end]]}, fields=['name', 'total_net_weight', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if there are any invoices with net weight exactly 300 kg created today.",
      "fields": [
        "total_net_weight",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'total_net_weight': 300, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give a list of invoices with non-zero net weight.",
      "fields": [
        "name",
        "total_net_weight"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_net_weight': ['!=', 0]}, fields=['name', 'total_net_weight'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with a total net weight greater than 800 kg?",
      "fields": [
        "customer",
        "total_net_weight"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_net_weight': ['>', 800]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the average total net weight of invoices from this year.",
      "fields": [
        "total_net_weight"
      ]
    },
    "output": "import datetime\n\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['total_net_weight'])\navg = sum(flt(d.total_net_weight) for d in data) / len(data) if data else 0\nprint('Average Total Net Weight:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices had no net weight?",
      "fields": [
        "is_return",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'total_net_weight': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the total net weight exceeds 500 kg.",
      "fields": [
        "name",
        "total_net_weight"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_net_weight': ['>', 500]}, fields=['name', 'total_net_weight'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have zero total net weight?",
      "fields": [
        "total_net_weight"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'total_net_weight': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with a total net weight below 100 kg.",
      "fields": [
        "name",
        "is_pos",
        "total_net_weight"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'total_net_weight': ['<', 100]}, fields=['name', 'is_pos', 'total_net_weight'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where the total net weight is over 250 kg.",
      "fields": [
        "name",
        "is_return",
        "total_net_weight"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'total_net_weight': ['>', 250]}, fields=['name', 'is_return', 'total_net_weight'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices this week with a total net weight over 1000 kg?",
      "fields": [
        "name",
        "total_net_weight",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\nfrappe.get_all('Sales Invoice', filters={'total_net_weight': ['>', 1000], 'posting_date': ['between', [start, end]]}, fields=['name', 'total_net_weight', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if there are any invoices with net weight exactly 300 kg created today.",
      "fields": [
        "total_net_weight",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'total_net_weight': 300, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give a list of invoices with non-zero net weight.",
      "fields": [
        "name",
        "total_net_weight"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_net_weight': ['!=', 0]}, fields=['name', 'total_net_weight'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with a total net weight greater than 800 kg?",
      "fields": [
        "customer",
        "total_net_weight"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_net_weight': ['>', 800]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the average total net weight of invoices from this year.",
      "fields": [
        "total_net_weight",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['total_net_weight'])\navg = sum(flt(d.total_net_weight) for d in data) / len(data) if data else 0\nprint('Average Total Net Weight:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices had no net weight?",
      "fields": [
        "is_return",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'total_net_weight': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the base total exceeds 10,000.",
      "fields": [
        "name",
        "base_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_total': ['>', 10000]}, fields=['name', 'base_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have a base total exactly 0?",
      "fields": [
        "base_total"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'base_total': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get return invoices with base total greater than 5000.",
      "fields": [
        "name",
        "is_return",
        "base_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'base_total': ['>', 5000]}, fields=['name', 'is_return', 'base_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices with base total below 1000.",
      "fields": [
        "name",
        "is_pos",
        "base_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'base_total': ['<', 1000]}, fields=['name', 'is_pos', 'base_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices with a base total over 20,000?",
      "fields": [
        "customer",
        "base_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_total': ['>', 20000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices created today with a base total less than 500.",
      "fields": [
        "base_total",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'base_total': ['<', 500]}, fields=['base_total', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give a list of all invoices with non-zero base total values.",
      "fields": [
        "name",
        "base_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_total': ['!=', 0]}, fields=['name', 'base_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the average base total of invoices from this month.",
      "fields": [
        "base_total",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrom frappe.utils import flt\nstart = datetime.date.today().replace(day=1)\nend = datetime.date.today()\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['base_total'])\navg = sum(flt(d.base_total) for d in data) / len(data) if data else 0\nprint('Average Base Total:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice from 'Tech Solutions' has base total under 300.",
      "fields": [
        "base_total",
        "customer"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'customer': 'Tech Solutions', 'base_total': ['<', 300]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices had a base total over 15,000?",
      "fields": [
        "is_return",
        "base_total"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'base_total': ['>', 15000]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the base net total is more than 12,000.",
      "fields": [
        "name",
        "base_net_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_net_total': ['>', 12000]}, fields=['name', 'base_net_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have zero base net total?",
      "fields": [
        "base_net_total"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'base_net_total': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices with a base net total below 1,000.",
      "fields": [
        "name",
        "is_return",
        "base_net_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'base_net_total': ['<', 1000]}, fields=['name', 'is_return', 'base_net_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices having base net total less than 500.",
      "fields": [
        "name",
        "is_pos",
        "base_net_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'base_net_total': ['<', 500]}, fields=['name', 'is_pos', 'base_net_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with base net total over 25,000?",
      "fields": [
        "customer",
        "base_net_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_net_total': ['>', 25000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with base net total below 300 created today.",
      "fields": [
        "base_net_total",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'base_net_total': ['<', 300]}, fields=['base_net_total', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the base net total is not zero.",
      "fields": [
        "name",
        "base_net_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_net_total': ['!=', 0]}, fields=['name', 'base_net_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What is the average base net total for invoices this quarter?",
      "fields": [
        "base_net_total",
        "posting_date"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['base_net_total'])\navg = sum(d.base_net_total for d in data) / len(data) if data else 0\nprint('Average Base Net Total:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if 'Global Retail' has any invoice with base net total under 1000.",
      "fields": [
        "base_net_total",
        "customer"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'customer': 'Global Retail', 'base_net_total': ['<', 1000]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices have base net total above 10,000?",
      "fields": [
        "is_return",
        "base_net_total"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'base_net_total': ['>', 10000]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with total amount greater than 10,000.",
      "fields": [
        "name",
        "total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total': ['>', 10000]}, fields=['name', 'total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have a total value of exactly 0?",
      "fields": [
        "total"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'total': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices where the total is below 500.",
      "fields": [
        "name",
        "total",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'total': ['<', 500]}, fields=['name', 'total', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices totaling over 20,000?",
      "fields": [
        "customer",
        "total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total': ['>', 20000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices with total value less than 2,000.",
      "fields": [
        "name",
        "is_return",
        "total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'total': ['<', 2000]}, fields=['name', 'is_return', 'total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with total value over 15,000 created today.",
      "fields": [
        "name",
        "posting_date",
        "total"
      ]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'total': ['>', 15000], 'posting_date': datetime.date.today()}, fields=['name', 'total', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices with non-zero total values.",
      "fields": [
        "name",
        "total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total': ['!=', 0]}, fields=['name', 'total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Average total value of invoices created this quarter?",
      "fields": [
        "total",
        "posting_date"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['total'])\navg = sum(d.total for d in data) / len(data) if data else 0\nprint('Average Total:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if 'TechCorp' has any invoice with total over 30,000.",
      "fields": [
        "customer",
        "total"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'customer': 'TechCorp', 'total': ['>', 30000]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices this year had a total below 1,000?",
      "fields": [
        "total",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\nfrappe.db.count('Sales Invoice', filters={'total': ['<', 1000], 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the net total is more than 25,000.",
      "fields": [
        "name",
        "net_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'net_total': ['>', 25000]}, fields=['name', 'net_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have a net total exactly equal to zero?",
      "fields": [
        "net_total"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'net_total': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices where the net total is less than 1,000.",
      "fields": [
        "name",
        "net_total",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'net_total': ['<', 1000]}, fields=['name', 'net_total', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with a net total greater than 50,000?",
      "fields": [
        "customer",
        "net_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'net_total': ['>', 50000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices with a net total less than 5,000.",
      "fields": [
        "name",
        "net_total",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'net_total': ['<', 5000]}, fields=['name', 'is_return', 'net_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with net total over 10,000 created today?",
      "fields": [
        "net_total",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'net_total': ['>', 10000], 'posting_date': datetime.date.today()}, fields=['name', 'net_total', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices where net total is not zero.",
      "fields": [
        "name",
        "net_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'net_total': ['!=', 0]}, fields=['name', 'net_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Average net total of invoices created this year?",
      "fields": [
        "net_total",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['net_total'])\navg = sum(flt(d.net_total) for d in data) / len(data) if data else 0\nprint('Average Net Total:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice from 'Acme Corp' has net total above 40,000.",
      "fields": [
        "customer",
        "net_total"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'customer': 'Acme Corp', 'net_total': ['>', 40000]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count of invoices in Q2 where net total is below 3,000.",
      "fields": [
        "net_total",
        "posting_date"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 4, 1)\nend = datetime.date(today.year, 6, 30)\nfrappe.db.count('Sales Invoice', filters={'net_total': ['<', 3000], 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with 'Export' as their tax category.",
      "fields": [
        "tax_category",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tax_category': 'Export'}, fields=['name', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices used the 'Domestic' tax category?",
      "fields": [
        "tax_category"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'tax_category': 'Domestic'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with tax category not equal to 'Zero Rated'.",
      "fields": [
        "tax_category",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tax_category': ['!=', 'Zero Rated']}, fields=['name', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with 'Deemed Export' tax category?",
      "fields": [
        "tax_category",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tax_category': 'Deemed Export'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices categorized as 'SEZ'.",
      "fields": [
        "tax_category",
        "is_return",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'tax_category': 'SEZ'}, fields=['name', 'tax_category', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices marked as POS and having tax category as 'Special Rate'.",
      "fields": [
        "tax_category",
        "is_pos",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'tax_category': 'Special Rate'}, fields=['name', 'is_pos', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices this month marked under the 'Nil Rated' tax category?",
      "fields": [
        "tax_category",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'tax_category': 'Nil Rated', 'posting_date': ['>=', start]}, fields=['name', 'tax_category', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check for invoices created today using the 'Exempt' tax category.",
      "fields": [
        "tax_category",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'tax_category': 'Exempt', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices this year with any tax category specified.",
      "fields": [
        "tax_category",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'tax_category': ['!=', '']}, fields=['name', 'tax_category', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get a distinct list of tax categories used in sales invoices.",
      "fields": [
        "tax_category"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['tax_category'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that used 'Standard GST' in taxes and charges.",
      "fields": [
        "taxes_and_charges",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'taxes_and_charges': 'Standard GST'}, fields=['taxes_and_charges', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices applied 'Export Tax Template' as taxes and charges?",
      "fields": [
        "taxes_and_charges"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'taxes_and_charges': 'Export Tax Template'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with taxes and charges set to 'Retail Scheme Tax'.",
      "fields": [
        "is_pos",
        "taxes_and_charges",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'taxes_and_charges': 'Retail Scheme Tax'}, fields=['is_pos', 'taxes_and_charges', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where the taxes and charges template was 'Return Tax'.",
      "fields": [
        "is_return",
        "taxes_and_charges",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'taxes_and_charges': 'Return Tax'}, fields=['is_return', 'taxes_and_charges', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices created today with 'Holiday Tax Plan' as taxes and charges?",
      "fields": [
        "taxes_and_charges",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'taxes_and_charges': 'Holiday Tax Plan', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices using any tax template other than 'Zero Tax'.",
      "fields": [
        "taxes_and_charges",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'taxes_and_charges': ['!=', 'Zero Tax']}, fields=['taxes_and_charges', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers used the 'State GST Plan' tax template?",
      "fields": [
        "taxes_and_charges",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'taxes_and_charges': 'State GST Plan'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me invoices from Q1 where 'VAT Template' was used.",
      "fields": [
        "taxes_and_charges",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 1, 1)\nend = datetime.date(today.year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'taxes_and_charges': 'VAT Template', 'posting_date': ['between', [start, end]]}, fields=['taxes_and_charges', 'posting_date', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices this year that used any taxes and charges template.",
      "fields": [
        "taxes_and_charges",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'taxes_and_charges': ['!=', '']}, fields=['taxes_and_charges', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List distinct taxes and charges templates applied in sales invoices.",
      "fields": [
        "taxes_and_charges"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['taxes_and_charges'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that used the 'Standard Shipping' rule.",
      "fields": [
        "shipping_rule",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_rule': 'Standard Shipping'}, fields=['shipping_rule', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices applied the 'Express Delivery' shipping rule?",
      "fields": [
        "shipping_rule"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'shipping_rule': 'Express Delivery'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where the shipping rule was set to 'POS Free Shipping'.",
      "fields": [
        "is_pos",
        "shipping_rule",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'shipping_rule': 'POS Free Shipping'}, fields=['is_pos', 'shipping_rule', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where 'Return Shipping Rule' was used.",
      "fields": [
        "is_return",
        "shipping_rule",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'shipping_rule': 'Return Shipping Rule'}, fields=['is_return', 'shipping_rule', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices today created using the 'Holiday Delivery' shipping rule?",
      "fields": [
        "shipping_rule",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'shipping_rule': 'Holiday Delivery', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices using any shipping rule other than 'No Shipping'.",
      "fields": [
        "shipping_rule",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_rule': ['!=', 'No Shipping']}, fields=['shipping_rule', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received shipments under 'Premium Shipping' rule?",
      "fields": [
        "shipping_rule",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_rule': 'Premium Shipping'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices from last quarter using the 'Seasonal Shipping' rule.",
      "fields": [
        "shipping_rule",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nq = (today.month - 1) // 3 + 1\nstart = datetime.date(today.year, 3 * (q - 2) + 1, 1)\nend = datetime.date(today.year, 3 * (q - 1), 1) - datetime.timedelta(days=1)\nfrappe.get_all('Sales Invoice', filters={'shipping_rule': 'Seasonal Shipping', 'posting_date': ['between', [start, end]]}, fields=['shipping_rule', 'posting_date', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices this year where shipping rule was defined.",
      "fields": [
        "shipping_rule",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'shipping_rule': ['!=', '']}, fields=['shipping_rule', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List distinct shipping rules used in all sales invoices.",
      "fields": [
        "shipping_rule"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['shipping_rule'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the Incoterm was set to 'FOB'.",
      "fields": [
        "incoterm"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'incoterm': 'FOB'}, fields=['incoterm'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices used 'CIF' as their incoterm?",
      "fields": [
        "incoterm"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'incoterm': 'CIF'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with 'DAP' incoterm.",
      "fields": [
        "incoterm",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'incoterm': 'DAP'}, fields=['is_pos', 'incoterm'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where incoterm used was 'DDP'.",
      "fields": [
        "incoterm",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'incoterm': 'DDP'}, fields=['is_return', 'incoterm'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices created today using 'EXW' incoterm?",
      "fields": [
        "incoterm",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'incoterm': 'EXW', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices using any incoterm other than 'FOB'.",
      "fields": [
        "incoterm"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'incoterm': ['!=', 'FOB']}, fields=['incoterm'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with 'CFR' incoterm?",
      "fields": [
        "incoterm",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'incoterm': 'CFR'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices from Q2 using 'DDU' incoterm.",
      "fields": [
        "incoterm",
        "posting_date"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 4, 1)\nend = datetime.date(today.year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'incoterm': 'DDU', 'posting_date': ['between', [start, end]]}, fields=['incoterm', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices this year with any incoterm value set.",
      "fields": [
        "incoterm",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'incoterm': ['!=', '']}, fields=['incoterm'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all unique incoterms used in invoices.",
      "fields": [
        "incoterm"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['incoterm'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the named place is set to 'Doha Port'.",
      "fields": [
        "name",
        "named_place"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'named_place': 'Doha Port'}, fields=['name', 'named_place'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were shipped from 'Jebel Ali Free Zone'?",
      "fields": [
        "named_place"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'named_place': 'Jebel Ali Free Zone'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices delivered from 'Dubai Airport'.",
      "fields": [
        "name",
        "is_pos",
        "named_place"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'named_place': 'Dubai Airport'}, fields=['name', 'is_pos', 'named_place'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices where goods were delivered to 'Salwa Road Warehouse'.",
      "fields": [
        "name",
        "is_return",
        "named_place"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'named_place': 'Salwa Road Warehouse'}, fields=['name', 'is_return', 'named_place'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices issued today from 'Qatar Industrial Area'?",
      "fields": [
        "named_place",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'named_place': 'Qatar Industrial Area', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me all invoices shipped from places other than 'Hamad Port'.",
      "fields": [
        "name",
        "named_place"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'named_place': ['!=', 'Hamad Port']}, fields=['name', 'named_place'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received shipments from 'Al Wakrah Facility'?",
      "fields": [
        "customer",
        "named_place"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'named_place': 'Al Wakrah Facility'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all invoices from Q2 where goods were dispatched from 'Ras Laffan Hub'.",
      "fields": [
        "name",
        "named_place",
        "posting_date"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 4, 1)\nend = datetime.date(today.year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'named_place': 'Ras Laffan Hub', 'posting_date': ['between', [start, end]]}, fields=['name', 'named_place', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices used a named place this year?",
      "fields": [
        "named_place",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.db.count('Sales Invoice', filters={'posting_date': ['>=', start], 'named_place': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all unique named places used in sales invoices.",
      "fields": [
        "named_place"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['named_place'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that include tax records.",
      "fields": [
        "name",
        "taxes"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'taxes': ['!=', '']}, fields=['name', 'taxes'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have no tax information?",
      "fields": [
        "taxes"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'taxes': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with non-empty taxes field created today.",
      "fields": [
        "name",
        "taxes",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'taxes': ['!=', ''], 'posting_date': datetime.date.today()}, fields=['name', 'taxes'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many POS invoices have tax records?",
      "fields": [
        "taxes",
        "is_pos"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_pos': 1, 'taxes': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices that have tax entries.",
      "fields": [
        "name",
        "taxes",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'taxes': ['!=', '']}, fields=['name', 'taxes'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show distinct customers from invoices that include tax details.",
      "fields": [
        "customer",
        "taxes"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'taxes': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with tax data from this fiscal year.",
      "fields": [
        "name",
        "taxes",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'taxes': ['!=', ''], 'posting_date': ['>=', start]}, fields=['name', 'taxes'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices posted this week contain tax entries?",
      "fields": [
        "name",
        "posting_date",
        "taxes"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\nfrappe.get_all('Sales Invoice', filters={'taxes': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['name', 'taxes'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice created today has a taxes field filled.",
      "fields": [
        "taxes",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'taxes': ['!=', ''], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where tax information was updated from default.",
      "fields": [
        "name",
        "taxes"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'taxes': ['!=', '']}, fields=['name', 'taxes'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the base total taxes and charges exceed 500.",
      "fields": [
        "name",
        "base_total_taxes_and_charges"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_total_taxes_and_charges': ['>', 500]}, fields=['name', 'base_total_taxes_and_charges'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have zero base total taxes and charges?",
      "fields": [
        "base_total_taxes_and_charges"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'base_total_taxes_and_charges': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with base total taxes and charges greater than 300.",
      "fields": [
        "name",
        "is_pos",
        "base_total_taxes_and_charges"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'base_total_taxes_and_charges': ['>', 300]}, fields=['name', 'is_pos', 'base_total_taxes_and_charges'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where the base total taxes and charges is under 200.",
      "fields": [
        "name",
        "is_return",
        "base_total_taxes_and_charges"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'base_total_taxes_and_charges': ['<', 200]}, fields=['name', 'is_return', 'base_total_taxes_and_charges'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices created today with base total taxes and charges above 100?",
      "fields": [
        "base_total_taxes_and_charges",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'base_total_taxes_and_charges': ['>', 100], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices where base total taxes and charges exceeded 750?",
      "fields": [
        "customer",
        "base_total_taxes_and_charges"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_total_taxes_and_charges': ['>', 750]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices this year with non-zero base total taxes and charges.",
      "fields": [
        "name",
        "base_total_taxes_and_charges",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'base_total_taxes_and_charges': ['!=', 0], 'posting_date': ['>=', start]}, fields=['name', 'base_total_taxes_and_charges'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice created this week has base total taxes and charges below 250.",
      "fields": [
        "base_total_taxes_and_charges",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\nfrappe.db.exists('Sales Invoice', {'base_total_taxes_and_charges': ['<', 250], 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with base total taxes and charges not equal to zero.",
      "fields": [
        "name",
        "base_total_taxes_and_charges"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_total_taxes_and_charges': ['!=', 0]}, fields=['name', 'base_total_taxes_and_charges'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices had base total taxes and charges equal to 150?",
      "fields": [
        "is_return",
        "base_total_taxes_and_charges"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'base_total_taxes_and_charges': 150})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the totals field is not empty.",
      "fields": [
        "name",
        "totals"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'totals': ['!=', '']}, fields=['name', 'totals'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have totals mentioned?",
      "fields": [
        "totals"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'totals': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where the totals section is filled in.",
      "fields": [
        "name",
        "is_pos",
        "totals"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'totals': ['!=', '']}, fields=['name', 'is_pos', 'totals'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with total information present.",
      "fields": [
        "name",
        "is_return",
        "totals"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'totals': ['!=', '']}, fields=['name', 'is_return', 'totals'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice created today contains totals.",
      "fields": [
        "totals",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'totals': ['!=', ''], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with filled totals field?",
      "fields": [
        "customer",
        "totals"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'totals': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct totals values used in all sales invoices.",
      "fields": [
        "totals"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['totals'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices this quarter where totals are recorded.",
      "fields": [
        "name",
        "posting_date",
        "totals"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\nfrappe.get_all('Sales Invoice', filters={'totals': ['!=', ''], 'posting_date': ['>=', start]}, fields=['name', 'totals', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me invoices where the totals match 'Subtotal + Tax'.",
      "fields": [
        "name",
        "totals"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'totals': 'Subtotal + Tax'}, fields=['name', 'totals'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices with totals set to 'Final Amount'?",
      "fields": [
        "is_return",
        "totals"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'totals': 'Final Amount'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the base grand total is more than 10,000.",
      "fields": [
        "name",
        "base_grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_grand_total': ['>', 10000]}, fields=['name', 'base_grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices had a base grand total under 5,000?",
      "fields": [
        "is_return",
        "base_grand_total"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'base_grand_total': ['<', 5000]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with a base grand total exactly 7500.",
      "fields": [
        "is_pos",
        "base_grand_total",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'base_grand_total': 7500}, fields=['name', 'is_pos', 'base_grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoices created today where base grand total is recorded.",
      "fields": [
        "base_grand_total",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'base_grand_total': ['!=', 0], 'posting_date': datetime.date.today()}, fields=['name', 'base_grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with a base grand total above 50,000?",
      "fields": [
        "customer",
        "base_grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_grand_total': ['>', 50000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices this quarter with high base grand totals.",
      "fields": [
        "name",
        "posting_date",
        "base_grand_total"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\nfrappe.get_all('Sales Invoice', filters={'base_grand_total': ['>', 0], 'posting_date': ['>=', start]}, fields=['name', 'base_grand_total', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any invoices where base grand total is not zero?",
      "fields": [
        "base_grand_total"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'base_grand_total': ['!=', 0]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get average base grand total for invoices in 2025.",
      "fields": [
        "base_grand_total",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date(2025, 1, 1)\nend = datetime.date(2025, 12, 31)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['base_grand_total'])\navg = sum(flt(d.base_grand_total) for d in data) / len(data) if data else 0\nprint('Average Base Grand Total:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show distinct base grand total values used in sales invoices.",
      "fields": [
        "base_grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['base_grand_total'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices had a base grand total of exactly 9999.99?",
      "fields": [
        "base_grand_total",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_grand_total': 9999.99}, fields=['name', 'base_grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where base_rounding_adjustment was applied.",
      "fields": [
        "name",
        "base_rounding_adjustment"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_rounding_adjustment': ['!=', 0]}, fields=['name', 'base_rounding_adjustment'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have base_rounding_adjustment as 0?",
      "fields": [
        "base_rounding_adjustment"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'base_rounding_adjustment': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with non-zero base_rounding_adjustment.",
      "fields": [
        "is_return",
        "base_rounding_adjustment",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'base_rounding_adjustment': ['!=', 0]}, fields=['name', 'is_return', 'base_rounding_adjustment'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoices today have a base_rounding_adjustment value.",
      "fields": [
        "base_rounding_adjustment",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'base_rounding_adjustment': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the total base_rounding_adjustment across invoices for this month.",
      "fields": [
        "base_rounding_adjustment",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date.today().replace(day=1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['base_rounding_adjustment'])\ntotal = sum(d.base_rounding_adjustment for d in data)\nprint('Total base_rounding_adjustment:', total)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with base_rounding_adjustment greater than 2?",
      "fields": [
        "customer",
        "base_rounding_adjustment"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_rounding_adjustment': ['>', 2]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the base rounded total is greater than 1000.",
      "fields": [
        "name",
        "base_rounded_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_rounded_total': ['>', 1000]}, fields=['name', 'base_rounded_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have base_rounded_total equal to zero?",
      "fields": [
        "base_rounded_total"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'base_rounded_total': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where the base_rounded_total exceeds 5000.",
      "fields": [
        "is_return",
        "base_rounded_total",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'base_rounded_total': ['>', 5000]}, fields=['name', 'is_return', 'base_rounded_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices created today with base_rounded_total over 2000?",
      "fields": [
        "base_rounded_total",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'base_rounded_total': ['>', 2000], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the sum of base_rounded_total for invoices posted this month.",
      "fields": [
        "base_rounded_total",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date.today().replace(day=1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['base_rounded_total'])\ntotal = sum(d.base_rounded_total for d in data)\nprint('Total base_rounded_total:', total)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with base_rounded_total less than 300?",
      "fields": [
        "customer",
        "base_rounded_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_rounded_total': ['<', 300]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct values of base_rounded_total used in sales invoices.",
      "fields": [
        "base_rounded_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['base_rounded_total'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices from Q1 where base_rounded_total was below 800.",
      "fields": [
        "base_rounded_total",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 1, 1)\nend = datetime.date(today.year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'base_rounded_total': ['<', 800], 'posting_date': ['between', [start, end]]}, fields=['name', 'base_rounded_total', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the grand total is greater than 10,000.",
      "fields": [
        "name",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'grand_total': ['>', 10000]}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have grand total exactly 0?",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'grand_total': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices with grand total less than 500.",
      "fields": [
        "name",
        "is_return",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'grand_total': ['<', 500]}, fields=['name', 'is_return', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoices were made today with grand total over 20,000.",
      "fields": [
        "grand_total",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'posting_date': datetime.date.today(), 'grand_total': ['>', 20000]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices where the grand total is not equal to 0.",
      "fields": [
        "is_pos",
        "grand_total",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'grand_total': ['!=', 0]}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with grand total between 1000 and 5000.",
      "fields": [
        "name",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'grand_total': ['between', [1000, 5000]]}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What is the average grand total of all invoices from last month?",
      "fields": [
        "grand_total",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrom frappe.utils import flt\n\nfirst_day = datetime.date.today().replace(day=1) - datetime.timedelta(days=1)\nstart = first_day.replace(day=1)\nend = first_day\ninvoices = frappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['grand_total'])\navg = sum(flt(i.grand_total) for i in invoices) / len(invoices) if invoices else 0\nprint('Average Grand Total:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with a grand total above 25,000?",
      "fields": [
        "customer",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'grand_total': ['>', 25000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoices for 'Tech Distributors' where the grand total exceeds 40,000.",
      "fields": [
        "name",
        "customer",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Tech Distributors', 'grand_total': ['>', 40000]}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct grand total values used in invoices.",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['grand_total'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where rounding adjustment is greater than 1.",
      "fields": [
        "name",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'rounding_adjustment': ['>', 1]}, fields=['name', 'rounding_adjustment'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had no rounding adjustment applied?",
      "fields": [
        "rounding_adjustment"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'rounding_adjustment': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices where rounding adjustment was negative.",
      "fields": [
        "name",
        "is_return",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'rounding_adjustment': ['<', 0]}, fields=['name', 'is_return', 'rounding_adjustment'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice today has a rounding adjustment.",
      "fields": [
        "rounding_adjustment",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'rounding_adjustment': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me POS invoices with a rounding adjustment less than 0.5.",
      "fields": [
        "name",
        "is_pos",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'rounding_adjustment': ['<', 0.5]}, fields=['name', 'is_pos', 'rounding_adjustment'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with a rounding adjustment above 2?",
      "fields": [
        "customer",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'rounding_adjustment': ['>', 2]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices this year with rounding adjustment of at least 1.",
      "fields": [
        "name",
        "posting_date",
        "rounding_adjustment"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'rounding_adjustment': ['>=', 1]}, fields=['name', 'rounding_adjustment', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find distinct rounding adjustment values used in invoices.",
      "fields": [
        "rounding_adjustment"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['rounding_adjustment'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with a rounding adjustment between -1 and 1.",
      "fields": [
        "name",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'rounding_adjustment': ['between', [-1, 1]]}, fields=['name', 'rounding_adjustment'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any return invoices with rounding adjustment over 3.5?",
      "fields": [
        "is_return",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'rounding_adjustment': ['>', 3.5]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the company roundoff cost center was used.",
      "fields": [
        "name",
        "use_company_roundoff_cost_center"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'use_company_roundoff_cost_center': 1}, fields=['name', 'use_company_roundoff_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices did not apply the company roundoff cost center?",
      "fields": [
        "name",
        "use_company_roundoff_cost_center",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'use_company_roundoff_cost_center': 0}, fields=['name', 'use_company_roundoff_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices enabled the use of the company roundoff cost center?",
      "fields": [
        "use_company_roundoff_cost_center"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'use_company_roundoff_cost_center': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices that used the company roundoff cost center.",
      "fields": [
        "name",
        "is_pos",
        "use_company_roundoff_cost_center"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'use_company_roundoff_cost_center': 1}, fields=['name', 'is_pos', 'use_company_roundoff_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were there any return invoices where the roundoff cost center was not used?",
      "fields": [
        "is_return",
        "use_company_roundoff_cost_center"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'is_return': 1, 'use_company_roundoff_cost_center': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List today's invoices with the company roundoff cost center enabled.",
      "fields": [
        "posting_date",
        "use_company_roundoff_cost_center",
        "name"
      ]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'use_company_roundoff_cost_center': 1}, fields=['name', 'use_company_roundoff_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with the roundoff cost center enabled?",
      "fields": [
        "customer",
        "use_company_roundoff_cost_center"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'use_company_roundoff_cost_center': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices this year that disabled the company roundoff cost center?",
      "fields": [
        "use_company_roundoff_cost_center",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'use_company_roundoff_cost_center': 0, 'posting_date': ['>=', start]}, fields=['name', 'use_company_roundoff_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all invoices grouped by whether they used the company roundoff cost center.",
      "fields": [
        "use_company_roundoff_cost_center"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['use_company_roundoff_cost_center'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices did not use the roundoff cost center?",
      "fields": [
        "is_return",
        "use_company_roundoff_cost_center"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'use_company_roundoff_cost_center': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the rounded total is greater than 10,000.",
      "fields": [
        "name",
        "rounded_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'rounded_total': ['>', 10000]}, fields=['name', 'rounded_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have a rounded total of zero?",
      "fields": [
        "rounded_total"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'rounded_total': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with a rounded total below 500.",
      "fields": [
        "is_pos",
        "rounded_total",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'rounded_total': ['<', 500]}, fields=['name', 'is_pos', 'rounded_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where the rounded total is over 2500.",
      "fields": [
        "is_return",
        "rounded_total",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'rounded_total': ['>', 2500]}, fields=['name', 'is_return', 'rounded_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices created today with a rounded total of 1500?",
      "fields": [
        "rounded_total",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'rounded_total': 1500, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with a rounded total more than 5,000?",
      "fields": [
        "customer",
        "rounded_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'rounded_total': ['>', 5000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct rounded total values from invoices.",
      "fields": [
        "rounded_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['rounded_total'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices from this month where rounded total is not zero.",
      "fields": [
        "rounded_total",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = today.replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'rounded_total': ['!=', 0], 'posting_date': ['>=', start]}, fields=['name', 'rounded_total', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices had no rounding applied?",
      "fields": [
        "is_return",
        "rounded_total"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'rounded_total': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where rounded total equals grand total.",
      "fields": [
        "rounded_total",
        "grand_total",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'rounded_total': ['=', 'grand_total']}, fields=['name', 'rounded_total', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the amount in words is not empty.",
      "fields": [
        "name",
        "in_words"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'in_words': ['!=', '']}, fields=['name', 'in_words'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have 'Rupees One Thousand Only' written as the amount in words?",
      "fields": [
        "in_words"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'in_words': 'Rupees One Thousand Only'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where the in_words field is filled.",
      "fields": [
        "is_pos",
        "in_words",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'in_words': ['!=', '']}, fields=['name', 'is_pos', 'in_words'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with amount in words stating 'Rupees Five Hundred Only'.",
      "fields": [
        "is_return",
        "in_words",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'in_words': 'Rupees Five Hundred Only'}, fields=['name', 'is_return', 'in_words'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice created today has a non-empty in_words field.",
      "fields": [
        "in_words",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'in_words': ['!=', ''], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct amount descriptions used in words for all sales invoices.",
      "fields": [
        "in_words"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['in_words'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices in the last 30 days included amounts in words?",
      "fields": [
        "in_words",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=30)\nfrappe.db.count('Sales Invoice', filters={'posting_date': ['>=', start], 'in_words': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where in_words contains the word 'Thousand'.",
      "fields": [
        "name",
        "in_words"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'in_words': ['like', '%Thousand%']}, fields=['name', 'in_words'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any return invoices where the in_words field is left empty?",
      "fields": [
        "is_return",
        "in_words"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'is_return': 1, 'in_words': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with the amount written as 'Zero Rupees Only'.",
      "fields": [
        "name",
        "in_words"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'in_words': 'Zero Rupees Only'}, fields=['name', 'in_words'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the total advance paid is more than 1000.",
      "fields": [
        "name",
        "total_advance"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_advance': ['>', 1000]}, fields=['name', 'total_advance'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have total advance equal to zero?",
      "fields": [
        "total_advance"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'total_advance': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with a total advance below 500.",
      "fields": [
        "is_pos",
        "total_advance",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'total_advance': ['<', 500]}, fields=['name', 'total_advance'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where total advance was more than 200.",
      "fields": [
        "is_return",
        "total_advance",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'total_advance': ['>', 200]}, fields=['name', 'is_return', 'total_advance'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice created today has a total advance greater than 100.",
      "fields": [
        "total_advance",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'total_advance': ['>', 100], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers made an advance of over 3000 in their invoices?",
      "fields": [
        "customer",
        "total_advance"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_advance': ['>', 3000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with any non-zero total advance in the past 15 days.",
      "fields": [
        "total_advance",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=15)\nfrappe.get_all('Sales Invoice', filters={'total_advance': ['!=', 0], 'posting_date': ['>=', start]}, fields=['name', 'total_advance'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me invoices where the advance amount was exactly 750.",
      "fields": [
        "total_advance",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_advance': 750}, fields=['name', 'total_advance'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any return invoices with zero advance payment?",
      "fields": [
        "is_return",
        "total_advance",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'total_advance': 0}, fields=['name', 'is_return', 'total_advance'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show distinct total advance values used in sales invoices.",
      "fields": [
        "total_advance"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['total_advance'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with an outstanding amount greater than 5000.",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'outstanding_amount': ['>', 5000]}, fields=['name', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have zero outstanding balance?",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'outstanding_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where the outstanding amount is under 100.",
      "fields": [
        "outstanding_amount",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'outstanding_amount': ['<', 100]}, fields=['name', 'is_pos', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with unpaid amounts more than 2000.",
      "fields": [
        "outstanding_amount",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'outstanding_amount': ['>', 2000]}, fields=['name', 'is_return', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any invoices created today with outstanding dues?",
      "fields": [
        "outstanding_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'outstanding_amount': ['>', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers still owe more than 10,000?",
      "fields": [
        "outstanding_amount",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'outstanding_amount': ['>', 10000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with non-zero outstanding amount in the last 7 days?",
      "fields": [
        "outstanding_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=7)\nfrappe.get_all('Sales Invoice', filters={'outstanding_amount': ['!=', 0], 'posting_date': ['>=', start]}, fields=['name', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me invoices where outstanding is exactly 2750.",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'outstanding_amount': 2750}, fields=['name', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all return invoices with no outstanding balance.",
      "fields": [
        "outstanding_amount",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'outstanding_amount': 0}, fields=['name', 'is_return', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List distinct outstanding amounts from invoices.",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['outstanding_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where rounding total is disabled.",
      "fields": [
        "name",
        "disable_rounded_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'disable_rounded_total': 1}, fields=['name', 'disable_rounded_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have disabled the rounded total option?",
      "fields": [
        "disable_rounded_total"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'disable_rounded_total': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all POS invoices where rounded total was not applied.",
      "fields": [
        "is_pos",
        "disable_rounded_total",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'disable_rounded_total': 1}, fields=['name', 'is_pos', 'disable_rounded_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which return invoices had the rounding disabled?",
      "fields": [
        "is_return",
        "disable_rounded_total",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'disable_rounded_total': 1}, fields=['name', 'is_return', 'disable_rounded_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices created today with rounding disabled?",
      "fields": [
        "posting_date",
        "disable_rounded_total"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'disable_rounded_total': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List distinct customers who have invoices with rounding off turned off.",
      "fields": [
        "customer",
        "disable_rounded_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'disable_rounded_total': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where discount was applied on net total.",
      "fields": [
        "name",
        "apply_discount_on"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'apply_discount_on': 'Net Total'}, fields=['name', 'apply_discount_on'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices apply discount on the grand total?",
      "fields": [
        "apply_discount_on"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'apply_discount_on': 'Grand Total'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where discount was set on net total.",
      "fields": [
        "name",
        "is_pos",
        "apply_discount_on"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'apply_discount_on': 'Net Total'}, fields=['name', 'is_pos', 'apply_discount_on'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which return invoices apply discounts on grand total?",
      "fields": [
        "name",
        "is_return",
        "apply_discount_on"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'apply_discount_on': 'Grand Total'}, fields=['name', 'is_return', 'apply_discount_on'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices created today with discount applied on net total?",
      "fields": [
        "apply_discount_on",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'apply_discount_on': 'Net Total', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct values of how discounts are applied in invoices.",
      "fields": [
        "apply_discount_on"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['apply_discount_on'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where discounts were applied on Net Total.",
      "fields": [
        "apply_discount_on"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'apply_discount_on': 'Net Total'}, fields=['apply_discount_on'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have discount applied on Grand Total?",
      "fields": [
        "apply_discount_on"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'apply_discount_on': 'Grand Total'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where discount was applied on Net Total.",
      "fields": [
        "is_pos",
        "apply_discount_on"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'apply_discount_on': 'Net Total'}, fields=['is_pos', 'apply_discount_on'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with discount applied on Grand Total.",
      "fields": [
        "is_return",
        "apply_discount_on"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'apply_discount_on': 'Grand Total'}, fields=['is_return', 'apply_discount_on'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices today where discount was on Net Total?",
      "fields": [
        "apply_discount_on",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'apply_discount_on': 'Net Total', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices not using Net Total for discount application.",
      "fields": [
        "apply_discount_on"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'apply_discount_on': ['!=', 'Net Total']}, fields=['apply_discount_on'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had discounts applied on Grand Total?",
      "fields": [
        "customer",
        "apply_discount_on"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'apply_discount_on': 'Grand Total'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices from Q2 where discount was on Net Total.",
      "fields": [
        "apply_discount_on",
        "posting_date"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 4, 1)\nend = datetime.date(today.year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'apply_discount_on': 'Net Total', 'posting_date': ['between', [start, end]]}, fields=['apply_discount_on', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices didn’t apply discount on Net Total?",
      "fields": [
        "is_return",
        "apply_discount_on"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'apply_discount_on': ['!=', 'Net Total']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all distinct values for the apply discount on field.",
      "fields": [
        "apply_discount_on"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['apply_discount_on'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with a base discount amount above 500.",
      "fields": [
        "base_discount_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_discount_amount': ['>', 500]}, fields=['base_discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have zero base discount amount?",
      "fields": [
        "base_discount_amount"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'base_discount_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with base discount amount less than 100.",
      "fields": [
        "is_pos",
        "base_discount_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'base_discount_amount': ['<', 100]}, fields=['is_pos', 'base_discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with base discount over 250.",
      "fields": [
        "is_return",
        "base_discount_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'base_discount_amount': ['>', 250]}, fields=['is_return', 'base_discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices today with a base discount amount?",
      "fields": [
        "base_discount_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'base_discount_amount': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where base discount was not applied.",
      "fields": [
        "base_discount_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_discount_amount': 0}, fields=['base_discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received base discounts over 1,000?",
      "fields": [
        "customer",
        "base_discount_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_discount_amount': ['>', 1000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices in Q1 with base discount amounts above 200?",
      "fields": [
        "base_discount_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'base_discount_amount': ['>', 200], 'posting_date': ['between', [start, end]]}, fields=['base_discount_amount', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Average base discount amount in this year's invoices?",
      "fields": [
        "base_discount_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['base_discount_amount'])\navg = sum(flt(d.base_discount_amount) for d in data) / len(data) if data else 0\nprint('Average Base Discount Amount:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct base discount amounts applied.",
      "fields": [
        "base_discount_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['base_discount_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with a base discount amount greater than 500.",
      "fields": [
        "base_discount_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_discount_amount': ['>', 500]}, fields=['base_discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had no base discount amount applied?",
      "fields": [
        "base_discount_amount"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'base_discount_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with low base discount amount under 100.",
      "fields": [
        "is_pos",
        "base_discount_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'base_discount_amount': ['<', 100]}, fields=['is_pos', 'base_discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with base discount more than 250.",
      "fields": [
        "is_return",
        "base_discount_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'base_discount_amount': ['>', 250]}, fields=['is_return', 'base_discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoices created today include a base discount.",
      "fields": [
        "base_discount_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'base_discount_amount': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received large base discounts over 1000?",
      "fields": [
        "base_discount_amount",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_discount_amount': ['>', 1000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me invoices in Q1 with base discount more than 200.",
      "fields": [
        "base_discount_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'base_discount_amount': ['>', 200], 'posting_date': ['between', [start, end]]}, fields=['base_discount_amount', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct base discount amounts used in invoices.",
      "fields": [
        "base_discount_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['base_discount_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Average base discount amount in all invoices this year?",
      "fields": [
        "base_discount_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['base_discount_amount'])\navg = sum(flt(d.base_discount_amount) for d in data) / len(data) if data else 0\nprint('Average Base Discount Amount:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with a base discount over 300 and grand total above 10000 created this week.",
      "fields": [
        "base_discount_amount",
        "grand_total",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\nfrappe.get_all('Sales Invoice', filters={'base_discount_amount': ['>', 300], 'grand_total': ['>', 10000], 'posting_date': ['between', [start, end]]}, fields=['base_discount_amount', 'grand_total', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where cash or non-trade discount is applied.",
      "fields": [
        "is_cash_or_non_trade_discount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_cash_or_non_trade_discount': 1}, fields=['is_cash_or_non_trade_discount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices do not have a non-trade or cash discount?",
      "fields": [
        "is_cash_or_non_trade_discount"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_cash_or_non_trade_discount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where cash or non-trade discount was applied.",
      "fields": [
        "is_pos",
        "is_cash_or_non_trade_discount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'is_cash_or_non_trade_discount': 1}, fields=['is_pos', 'is_cash_or_non_trade_discount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with non-trade discount enabled.",
      "fields": [
        "is_return",
        "is_cash_or_non_trade_discount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'is_cash_or_non_trade_discount': 1}, fields=['is_return', 'is_cash_or_non_trade_discount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any invoices from today with a cash or non-trade discount?",
      "fields": [
        "is_cash_or_non_trade_discount",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'is_cash_or_non_trade_discount': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received invoices with cash/non-trade discount?",
      "fields": [
        "is_cash_or_non_trade_discount",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_cash_or_non_trade_discount': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices created this year with non-trade discount applied.",
      "fields": [
        "is_cash_or_non_trade_discount",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'is_cash_or_non_trade_discount': 1, 'posting_date': ['>=', start]}, fields=['is_cash_or_non_trade_discount', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that applied both cash/non-trade discount and have a status of Paid.",
      "fields": [
        "is_cash_or_non_trade_discount",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_cash_or_non_trade_discount': 1, 'status': 'Paid'}, fields=['is_cash_or_non_trade_discount', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return POS invoices from this quarter where cash/non-trade discount was used.",
      "fields": [
        "is_cash_or_non_trade_discount",
        "is_pos",
        "is_return",
        "posting_date"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\nfrappe.get_all('Sales Invoice', filters={'is_cash_or_non_trade_discount': 1, 'is_pos': 1, 'is_return': 1, 'posting_date': ['>=', start]}, fields=['is_cash_or_non_trade_discount', 'is_pos', 'is_return', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct combinations of customer and non-trade discount usage.",
      "fields": [
        "customer",
        "is_cash_or_non_trade_discount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['customer', 'is_cash_or_non_trade_discount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the additional discount account is 'Sales Discount'.",
      "fields": [
        "additional_discount_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'additional_discount_account': 'Sales Discount'}, fields=['additional_discount_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices applied the 'Promotional Discount Account'?",
      "fields": [
        "additional_discount_account"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'additional_discount_account': 'Promotional Discount Account'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where the additional discount account is not empty.",
      "fields": [
        "additional_discount_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'additional_discount_account': ['!=', '']}, fields=['additional_discount_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices using the 'Return Discount' account.",
      "fields": [
        "additional_discount_account",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'additional_discount_account': 'Return Discount'}, fields=['is_return', 'additional_discount_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any POS invoices using additional discount account named 'Seasonal Discount'?",
      "fields": [
        "is_pos",
        "additional_discount_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'additional_discount_account': 'Seasonal Discount'}, fields=['is_pos', 'additional_discount_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice today used the 'Clearance Discount' account.",
      "fields": [
        "posting_date",
        "additional_discount_account"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'posting_date': datetime.date.today(), 'additional_discount_account': 'Clearance Discount'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers used the 'Loyalty Discount Account'?",
      "fields": [
        "customer",
        "additional_discount_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'additional_discount_account': 'Loyalty Discount Account'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices in Q1 using the 'New Year Discount' account.",
      "fields": [
        "additional_discount_account",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'additional_discount_account': 'New Year Discount', 'posting_date': ['between', [start, end]]}, fields=['additional_discount_account', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show distinct additional discount accounts used in invoices.",
      "fields": [
        "additional_discount_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['additional_discount_account'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices this year where any additional discount account was set.",
      "fields": [
        "posting_date",
        "additional_discount_account"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'additional_discount_account': ['!=', '']}, fields=['additional_discount_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the additional discount percentage exceeds 15%.",
      "fields": [
        "additional_discount_percentage",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'additional_discount_percentage': ['>', 15]}, fields=['additional_discount_percentage', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices had no additional discount percentage?",
      "fields": [
        "is_return",
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'additional_discount_percentage': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with an additional discount percentage under 5%.",
      "fields": [
        "is_pos",
        "additional_discount_percentage",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'additional_discount_percentage': ['<', 5]}, fields=['is_pos', 'additional_discount_percentage', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices created today with any additional discount percentage applied.",
      "fields": [
        "posting_date",
        "additional_discount_percentage"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'additional_discount_percentage': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received an additional discount percentage of 20% or more?",
      "fields": [
        "additional_discount_percentage",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'additional_discount_percentage': ['>=', 20]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where additional discount percentage was set.",
      "fields": [
        "additional_discount_percentage",
        "name",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'additional_discount_percentage': ['!=', 0]}, fields=['additional_discount_percentage', 'name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get average additional discount percentage for invoices this year.",
      "fields": [
        "posting_date",
        "additional_discount_percentage"
      ]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['additional_discount_percentage'])\navg = sum(flt(d.additional_discount_percentage) for d in data) / len(data) if data else 0\nprint('Average Additional Discount %:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with additional discount percentage above 10%.",
      "fields": [
        "is_return",
        "additional_discount_percentage",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'additional_discount_percentage': ['>', 10]}, fields=['is_return', 'additional_discount_percentage', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me invoices from Q2 with additional discount applied.",
      "fields": [
        "posting_date",
        "additional_discount_percentage",
        "name"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 4, 1)\nend = datetime.date(today.year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'additional_discount_percentage': ['!=', 0]}, fields=['additional_discount_percentage', 'posting_date', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List distinct additional discount percentages used across invoices.",
      "fields": [
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['additional_discount_percentage'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with discount amount greater than 500.",
      "fields": [
        "discount_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'discount_amount': ['>', 500]}, fields=['discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had zero discount amount?",
      "fields": [
        "discount_amount"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'discount_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with a discount amount under 100.",
      "fields": [
        "is_pos",
        "discount_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'discount_amount': ['<', 100]}, fields=['is_pos', 'discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with discount amount more than 250.",
      "fields": [
        "is_return",
        "discount_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'discount_amount': ['>', 250]}, fields=['is_return', 'discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoices created today include discount amount.",
      "fields": [
        "discount_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'discount_amount': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received invoices with discount amount over 1000?",
      "fields": [
        "discount_amount",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'discount_amount': ['>', 1000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me invoices in Q3 with discount amount more than 200.",
      "fields": [
        "discount_amount",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 7, 1)\nend = datetime.date(today.year, 9, 30)\nfrappe.get_all('Sales Invoice', filters={'discount_amount': ['>', 200], 'posting_date': ['between', [start, end]]}, fields=['discount_amount', 'name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct discount amounts used in invoices.",
      "fields": [
        "discount_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['discount_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What is the average discount amount in invoices this year?",
      "fields": [
        "discount_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['discount_amount'])\navg = sum(flt(d.discount_amount) for d in data) / len(data) if data else 0\nprint('Average Discount Amount:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where discount amount was not zero.",
      "fields": [
        "discount_amount",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'discount_amount': ['!=', 0]}, fields=['discount_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show the secondary tax breakup values in all invoices.",
      "fields": [
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['sec_tax_breakup'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where secondary tax breakup is not empty.",
      "fields": [
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sec_tax_breakup': ['!=', '']}, fields=['sec_tax_breakup'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices include any secondary tax breakup details?",
      "fields": [
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'sec_tax_breakup': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices with non-empty secondary tax breakup.",
      "fields": [
        "is_pos",
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'sec_tax_breakup': ['!=', '']}, fields=['is_pos', 'sec_tax_breakup'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices have a secondary tax breakup?",
      "fields": [
        "is_return",
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'sec_tax_breakup': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with both tax and secondary tax breakup details.",
      "fields": [
        "taxes_and_charges",
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'taxes_and_charges': ['!=', ''], 'sec_tax_breakup': ['!=', '']}, fields=['taxes_and_charges', 'sec_tax_breakup'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get recent invoices with secondary tax breakup present.",
      "fields": [
        "sec_tax_breakup",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sec_tax_breakup': ['!=', '']}, fields=['sec_tax_breakup', 'posting_date'], order_by='posting_date desc')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with secondary tax details?",
      "fields": [
        "sec_tax_breakup",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sec_tax_breakup': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoice IDs and dates with secondary tax breakup filled.",
      "fields": [
        "sec_tax_breakup",
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sec_tax_breakup': ['!=', '']}, fields=['name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any invoices today with a secondary tax breakup?",
      "fields": [
        "sec_tax_breakup",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'sec_tax_breakup': ['!=', ''], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show the secondary tax breakup values in all invoices.",
      "fields": [
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['sec_tax_breakup'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where secondary tax breakup is not empty.",
      "fields": [
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sec_tax_breakup': ['!=', '']}, fields=['sec_tax_breakup'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices include any secondary tax breakup details?",
      "fields": [
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'sec_tax_breakup': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices with non-empty secondary tax breakup.",
      "fields": [
        "is_pos",
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'sec_tax_breakup': ['!=', '']}, fields=['is_pos', 'sec_tax_breakup'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices have a secondary tax breakup?",
      "fields": [
        "is_return",
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'sec_tax_breakup': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with both tax and secondary tax breakup details.",
      "fields": [
        "taxes_and_charges",
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'taxes_and_charges': ['!=', ''], 'sec_tax_breakup': ['!=', '']}, fields=['taxes_and_charges', 'sec_tax_breakup'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get recent invoices with secondary tax breakup present.",
      "fields": [
        "sec_tax_breakup",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sec_tax_breakup': ['!=', '']}, fields=['sec_tax_breakup', 'posting_date'], order_by='posting_date desc')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with secondary tax details?",
      "fields": [
        "sec_tax_breakup",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sec_tax_breakup': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoice IDs and dates with secondary tax breakup filled.",
      "fields": [
        "sec_tax_breakup",
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sec_tax_breakup': ['!=', '']}, fields=['name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any invoices today with a secondary tax breakup?",
      "fields": [
        "sec_tax_breakup",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'sec_tax_breakup': ['!=', ''], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that contain pricing rule details.",
      "fields": [
        "pricing_rule_details"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rule_details': ['!=', '']}, fields=['pricing_rule_details'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices do not have any pricing rule details set?",
      "fields": [
        "pricing_rule_details"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rule_details': ''}, fields=['pricing_rule_details'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices contain pricing rule detail entries?",
      "fields": [
        "pricing_rule_details"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'pricing_rule_details': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices that used pricing rule details.",
      "fields": [
        "is_pos",
        "pricing_rule_details"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'pricing_rule_details': ['!=', '']}, fields=['is_pos', 'pricing_rule_details'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any return invoices have pricing rule details.",
      "fields": [
        "is_return",
        "pricing_rule_details"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'is_return': 1, 'pricing_rule_details': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give recent invoices with pricing rule detail values filled.",
      "fields": [
        "pricing_rule_details",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rule_details': ['!=', '']}, fields=['pricing_rule_details', 'posting_date'], order_by='posting_date desc')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received pricing rule benefits?",
      "fields": [
        "customer",
        "pricing_rule_details"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rule_details': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoice names and their pricing rule info.",
      "fields": [
        "pricing_rule_details",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rule_details': ['!=', '']}, fields=['name', 'pricing_rule_details'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices today that used pricing rules?",
      "fields": [
        "pricing_rule_details",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'pricing_rule_details': ['!=', ''], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where pricing rule details and taxes were both present.",
      "fields": [
        "pricing_rule_details",
        "taxes"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rule_details': ['!=', ''], 'taxes': ['!=', '']}, fields=['pricing_rule_details', 'taxes'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that applied any pricing rules.",
      "fields": [
        "pricing_rules"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rules': ['!=', '']}, fields=['pricing_rules'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were submitted without any pricing rules?",
      "fields": [
        "pricing_rules"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'pricing_rules': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me invoices where pricing rules were defined and status is Paid.",
      "fields": [
        "pricing_rules",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rules': ['!=', ''], 'status': 'Paid'}, fields=['pricing_rules', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with pricing rules used in Q2.",
      "fields": [
        "pricing_rules",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'pricing_rules': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['pricing_rules', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do any invoices from today include pricing rules?",
      "fields": [
        "pricing_rules",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'pricing_rules': ['!=', ''], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices that used pricing rules over 1000 grand total?",
      "fields": [
        "pricing_rules",
        "customer",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rules': ['!=', ''], 'grand_total': ['>', 1000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoice entries where pricing rules were present.",
      "fields": [
        "pricing_rules",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'pricing_rules': ['!=', '']}, fields=['pricing_rules', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show names and applied pricing rules for each invoice.",
      "fields": [
        "pricing_rules",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rules': ['!=', '']}, fields=['name', 'pricing_rules'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which pricing rules have been most frequently applied?",
      "fields": [
        "pricing_rules"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['pricing_rules'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with both pricing rules and taxes defined?",
      "fields": [
        "pricing_rules",
        "taxes"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rules': ['!=', ''], 'taxes': ['!=', '']}, fields=['pricing_rules', 'taxes'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that have a packing list attached.",
      "fields": [
        "packing_list"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packing_list': ['!=', '']}, fields=['packing_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices do not have any packing list?",
      "fields": [
        "packing_list"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'packing_list': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices created today that have packing lists.",
      "fields": [
        "packing_list",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'packing_list': ['!=', '']}, fields=['packing_list', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where packing list is available.",
      "fields": [
        "packing_list",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'packing_list': ['!=', '']}, fields=['packing_list', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received invoices with packing lists?",
      "fields": [
        "packing_list",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packing_list': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me invoices with packing list and discount applied.",
      "fields": [
        "packing_list",
        "discount_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packing_list': ['!=', ''], 'discount_amount': ['>', 0]}, fields=['packing_list', 'discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices where both packing list and pricing rules exist.",
      "fields": [
        "packing_list",
        "pricing_rules"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packing_list': ['!=', ''], 'pricing_rules': ['!=', '']}, fields=['packing_list', 'pricing_rules'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices from July with a packing list included?",
      "fields": [
        "packing_list",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 7, 1)\nend = datetime.date(datetime.date.today().year, 7, 31)\nfrappe.get_all('Sales Invoice', filters={'packing_list': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['packing_list', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Is there any invoice with packing list and total above 5000?",
      "fields": [
        "packing_list",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packing_list': ['!=', ''], 'grand_total': ['>', 5000]}, fields=['packing_list', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show names and packing lists of all such invoices.",
      "fields": [
        "packing_list",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packing_list': ['!=', '']}, fields=['name', 'packing_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that have packed items included.",
      "fields": [
        "packed_items"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packed_items': ['!=', '']}, fields=['packed_items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices do not include any packed items?",
      "fields": [
        "packed_items"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'packed_items': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices where packed items were recorded.",
      "fields": [
        "is_return",
        "packed_items"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'packed_items': ['!=', '']}, fields=['is_return', 'packed_items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices with any packed items.",
      "fields": [
        "is_pos",
        "packed_items"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'packed_items': ['!=', '']}, fields=['is_pos', 'packed_items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices issued today with packed items?",
      "fields": [
        "packed_items",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'packed_items': ['!=', '']}, fields=['packed_items', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give customer names for invoices with packed items above ₹10,000.",
      "fields": [
        "packed_items",
        "grand_total",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packed_items': ['!=', ''], 'grand_total': ['>', 10000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices in Q2 contain packed items?",
      "fields": [
        "packed_items",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'packed_items': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['packed_items', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with packed items and additional discounts?",
      "fields": [
        "packed_items",
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packed_items': ['!=', ''], 'additional_discount_percentage': ['>', 0]}, fields=['packed_items', 'additional_discount_percentage'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices having both packed items and delivery note?",
      "fields": [
        "packed_items",
        "delivery_note"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packed_items': ['!=', ''], 'delivery_note': ['!=', '']}, fields=['packed_items', 'delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Just show the packed items of all valid invoices.",
      "fields": [
        "packed_items"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packed_items': ['!=', '']}, fields=['packed_items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that have packed items included.",
      "fields": [
        "packed_items"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packed_items': ['!=', '']}, fields=['packed_items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices do not include any packed items?",
      "fields": [
        "packed_items"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'packed_items': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices where packed items were recorded.",
      "fields": [
        "packed_items",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'packed_items': ['!=', '']}, fields=['packed_items', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices with any packed items.",
      "fields": [
        "packed_items",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'packed_items': ['!=', '']}, fields=['packed_items', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices issued today with packed items?",
      "fields": [
        "packed_items",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'packed_items': ['!=', '']}, fields=['packed_items', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give customer names for invoices with packed items above ₹10,000.",
      "fields": [
        "packed_items",
        "grand_total",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packed_items': ['!=', ''], 'grand_total': ['>', 10000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices in Q2 contain packed items?",
      "fields": [
        "packed_items",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'packed_items': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['packed_items', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with packed items and additional discounts?",
      "fields": [
        "packed_items",
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packed_items': ['!=', ''], 'additional_discount_percentage': ['>', 0]}, fields=['packed_items', 'additional_discount_percentage'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices having both packed items and delivery note?",
      "fields": [
        "packed_items",
        "delivery_note"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packed_items': ['!=', ''], 'delivery_note': ['!=', '']}, fields=['packed_items', 'delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Just show the packed items of all valid invoices.",
      "fields": [
        "packed_items"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packed_items': ['!=', '']}, fields=['packed_items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that contain product bundle help notes.",
      "fields": [
        "product_bundle_help"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'product_bundle_help': ['!=', '']}, fields=['product_bundle_help'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices lack any product bundle help?",
      "fields": [
        "product_bundle_help"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'product_bundle_help': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with filled product bundle help info.",
      "fields": [
        "product_bundle_help",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'product_bundle_help': ['!=', '']}, fields=['product_bundle_help', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which return invoices include product bundle help descriptions?",
      "fields": [
        "product_bundle_help",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'product_bundle_help': ['!=', '']}, fields=['product_bundle_help', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices from today that have product bundle help filled?",
      "fields": [
        "product_bundle_help",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'product_bundle_help': ['!=', '']}, fields=['product_bundle_help', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices from Q4 include product bundle help comments?",
      "fields": [
        "product_bundle_help",
        "posting_date",
        "customer"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 10, 1)\nend = datetime.date(datetime.date.today().year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'product_bundle_help': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['product_bundle_help', 'customer', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get product bundle help content along with customer name.",
      "fields": [
        "product_bundle_help",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'product_bundle_help': ['!=', '']}, fields=['product_bundle_help', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with product bundle help and discount applied?",
      "fields": [
        "product_bundle_help",
        "discount_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'product_bundle_help': ['!=', ''], 'discount_amount': ['>', 0]}, fields=['product_bundle_help', 'discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where product bundle help was recorded and paid online.",
      "fields": [
        "product_bundle_help",
        "is_online"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'product_bundle_help': ['!=', ''], 'is_online': 1}, fields=['product_bundle_help', 'is_online'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that contain product bundle help notes.",
      "fields": [
        "product_bundle_help"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'product_bundle_help': ['!=', '']}, fields=['product_bundle_help'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices lack any product bundle help?",
      "fields": [
        "product_bundle_help"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'product_bundle_help': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with filled product bundle help info.",
      "fields": [
        "product_bundle_help",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'product_bundle_help': ['!=', '']}, fields=['product_bundle_help', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which return invoices include product bundle help descriptions?",
      "fields": [
        "product_bundle_help",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'product_bundle_help': ['!=', '']}, fields=['product_bundle_help', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices from today that have product bundle help filled?",
      "fields": [
        "product_bundle_help",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'product_bundle_help': ['!=', '']}, fields=['product_bundle_help', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices from Q4 include product bundle help comments?",
      "fields": [
        "product_bundle_help",
        "posting_date",
        "customer"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 10, 1)\nend = datetime.date(datetime.date.today().year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'product_bundle_help': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['product_bundle_help', 'customer', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get product bundle help content along with customer name.",
      "fields": [
        "product_bundle_help",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'product_bundle_help': ['!=', '']}, fields=['product_bundle_help', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with product bundle help and discount applied?",
      "fields": [
        "product_bundle_help",
        "discount_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'product_bundle_help': ['!=', ''], 'discount_amount': ['>', 0]}, fields=['product_bundle_help', 'discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where product bundle help was recorded and paid online.",
      "fields": [
        "product_bundle_help",
        "is_online"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'product_bundle_help': ['!=', ''], 'is_online': 1}, fields=['product_bundle_help', 'is_online'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Only show product bundle help text if available.",
      "fields": [
        "product_bundle_help"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'product_bundle_help': ['!=', '']}, fields=['product_bundle_help'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that have associated timesheet entries.",
      "fields": [
        "time_sheet_list"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'time_sheet_list': ['!=', '']}, fields=['time_sheet_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were linked with timesheet list?",
      "fields": [
        "time_sheet_list"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'time_sheet_list': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices that include time sheet list.",
      "fields": [
        "is_pos",
        "time_sheet_list"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'time_sheet_list': ['!=', '']}, fields=['is_pos', 'time_sheet_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices in Q2 that used time sheet list data?",
      "fields": [
        "time_sheet_list",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'time_sheet_list': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['time_sheet_list', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where time sheet list was updated.",
      "fields": [
        "time_sheet_list",
        "modified_by"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'time_sheet_list': ['!=', '']}, fields=['time_sheet_list', 'modified_by'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with time sheet entries and discounts.",
      "fields": [
        "time_sheet_list",
        "discount_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'time_sheet_list': ['!=', ''], 'discount_amount': ['>', 0]}, fields=['time_sheet_list', 'discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices from today that include time sheet list.",
      "fields": [
        "time_sheet_list",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'time_sheet_list': ['!=', '']}, fields=['time_sheet_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with time sheet list and grand total over 10,000.",
      "fields": [
        "time_sheet_list",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'time_sheet_list': ['!=', ''], 'grand_total': ['>', 10000]}, fields=['time_sheet_list', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Customers who submitted invoices with timesheet entries?",
      "fields": [
        "time_sheet_list",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'time_sheet_list': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Only show the timesheet list values if present.",
      "fields": [
        "time_sheet_list"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'time_sheet_list': ['!=', '']}, fields=['time_sheet_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that contain timesheet entries.",
      "fields": [
        "timesheets"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'timesheets': ['!=', '']}, fields=['timesheets'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many sales invoices include timesheets?",
      "fields": [
        "timesheets"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'timesheets': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices from July that include timesheets.",
      "fields": [
        "posting_date",
        "timesheets"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 7, 1)\nend = datetime.date(datetime.date.today().year, 7, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'timesheets': ['!=', '']}, fields=['posting_date', 'timesheets'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices where timesheets are used.",
      "fields": [
        "is_return",
        "timesheets"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'timesheets': ['!=', '']}, fields=['is_return', 'timesheets'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any timesheet-based invoices created today?",
      "fields": [
        "timesheets",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'timesheets': ['!=', ''], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List customers linked to invoices using timesheets.",
      "fields": [
        "customer",
        "timesheets"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'timesheets': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with timesheets and total above 5000.",
      "fields": [
        "timesheets",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'timesheets': ['!=', ''], 'grand_total': ['>', 5000]}, fields=['timesheets', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the full list of timesheet values in invoices.",
      "fields": [
        "timesheets"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'timesheets': ['!=', '']}, fields=['timesheets'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices that include timesheets.",
      "fields": [
        "is_pos",
        "timesheets"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'timesheets': ['!=', '']}, fields=['is_pos', 'timesheets'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices where timesheets were manually added and discount exists.",
      "fields": [
        "timesheets",
        "discount_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'timesheets': ['!=', ''], 'discount_amount': ['>', 0]}, fields=['timesheets', 'discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with total billing hours greater than 20.",
      "fields": [
        "total_billing_hours"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_billing_hours': ['>', 20]}, fields=['total_billing_hours'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had no total billing hours?",
      "fields": [
        "total_billing_hours"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'total_billing_hours': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where total billing hours is under 10.",
      "fields": [
        "is_pos",
        "total_billing_hours"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'total_billing_hours': ['<', 10]}, fields=['is_pos', 'total_billing_hours'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with more than 15 billing hours.",
      "fields": [
        "is_return",
        "total_billing_hours"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'total_billing_hours': ['>', 15]}, fields=['is_return', 'total_billing_hours'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice today includes total billing hours.",
      "fields": [
        "total_billing_hours",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'total_billing_hours': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with total billing hours above 30?",
      "fields": [
        "customer",
        "total_billing_hours"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_billing_hours': ['>', 30]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices from last month with over 10 billing hours.",
      "fields": [
        "total_billing_hours",
        "posting_date"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nfirst = today.replace(day=1)\nlast_month_end = first - datetime.timedelta(days=1)\nlast_month_start = last_month_end.replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'total_billing_hours': ['>', 10], 'posting_date': ['between', [last_month_start, last_month_end]]}, fields=['total_billing_hours', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What are the distinct total billing hour values recorded?",
      "fields": [
        "total_billing_hours"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['total_billing_hours'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give average total billing hours this year.",
      "fields": [
        "total_billing_hours",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['total_billing_hours'])\navg = sum(flt(d.total_billing_hours) for d in data) / len(data) if data else 0\nprint('Average Total Billing Hours:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where total billing hours is not zero.",
      "fields": [
        "total_billing_hours"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_billing_hours': ['!=', 0]}, fields=['total_billing_hours'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with total billing amount greater than 1000.",
      "fields": [
        "total_billing_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_billing_amount': ['>', 1000]}, fields=['total_billing_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had zero total billing amount?",
      "fields": [
        "total_billing_amount"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'total_billing_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where the total billing amount is under 300.",
      "fields": [
        "is_pos",
        "total_billing_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'total_billing_amount': ['<', 300]}, fields=['is_pos', 'total_billing_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with total billing amount more than 1500.",
      "fields": [
        "is_return",
        "total_billing_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'total_billing_amount': ['>', 1500]}, fields=['is_return', 'total_billing_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice today includes total billing amount.",
      "fields": [
        "total_billing_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'total_billing_amount': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with total billing amount above 2000?",
      "fields": [
        "total_billing_amount",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_billing_amount': ['>', 2000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices from this quarter with total billing amount over 800.",
      "fields": [
        "total_billing_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nquarter = (today.month - 1) // 3 + 1\nstart = datetime.date(today.year, 3 * quarter - 2, 1)\nend = datetime.date(today.year, 3 * quarter + 1, 1) - datetime.timedelta(days=1)\nfrappe.get_all('Sales Invoice', filters={'total_billing_amount': ['>', 800], 'posting_date': ['between', [start, end]]}, fields=['total_billing_amount', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What are the distinct total billing amounts recorded?",
      "fields": [
        "total_billing_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['total_billing_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give average total billing amount in invoices this year.",
      "fields": [
        "total_billing_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['total_billing_amount'])\navg = sum(flt(d.total_billing_amount) for d in data) / len(data) if data else 0\nprint('Average Total Billing Amount:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where total billing amount was not zero.",
      "fields": [
        "total_billing_amount",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_billing_amount': ['!=', 0]}, fields=['total_billing_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that used the cash bank account 'HDFC Bank - ERPGulf'.",
      "fields": [
        "cash_bank_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'cash_bank_account': 'HDFC Bank - ERPGulf'}, fields=['cash_bank_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices do not specify any cash bank account?",
      "fields": [
        "cash_bank_account"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'cash_bank_account': ['=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices linked to the cash bank account 'Cash - Main'.",
      "fields": [
        "is_pos",
        "cash_bank_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'cash_bank_account': 'Cash - Main'}, fields=['is_pos', 'cash_bank_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices where the cash bank account was 'Petty Cash - HO'.",
      "fields": [
        "is_return",
        "cash_bank_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'cash_bank_account': 'Petty Cash - HO'}, fields=['is_return', 'cash_bank_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Did any invoice today use the cash bank account 'ICICI Bank - HO'?",
      "fields": [
        "cash_bank_account",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'cash_bank_account': 'ICICI Bank - HO', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers paid via 'SBI - Corporate' cash bank account?",
      "fields": [
        "cash_bank_account",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'cash_bank_account': 'SBI - Corporate'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices from last quarter that used 'Cash - HO'.",
      "fields": [
        "cash_bank_account",
        "posting_date"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nquarter = (today.month - 1) // 3\nstart = datetime.date(today.year, quarter * 3 + 1, 1)\nend = datetime.date(today.year, quarter * 3 + 3, 1) - datetime.timedelta(days=1)\nfrappe.get_all('Sales Invoice', filters={'cash_bank_account': 'Cash - HO', 'posting_date': ['between', [start, end]]}, fields=['cash_bank_account', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What are the unique cash bank accounts used in invoices?",
      "fields": [
        "cash_bank_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['cash_bank_account'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoices where cash bank account was not empty.",
      "fields": [
        "cash_bank_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'cash_bank_account': ['!=', '']}, fields=['cash_bank_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices this year used 'Axis Bank - ERPGulf'?",
      "fields": [
        "cash_bank_account",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.db.count('Sales Invoice', filters={'cash_bank_account': 'Axis Bank - ERPGulf', 'posting_date': ['>=', start]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that have any payments recorded.",
      "fields": [
        "payments"
      ]
    },
    "output": "invoices = frappe.get_all('Sales Invoice', fields=['name'])\nresults = []\nfor inv in invoices:\n  doc = frappe.get_doc('Sales Invoice', inv.name)\n  if doc.payments:\n    results.append({'invoice': inv.name, 'payments': doc.payments})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices used cash for payment?",
      "fields": [
        "payments",
        "name"
      ]
    },
    "output": "invoices = frappe.get_all('Sales Invoice', fields=['name'])\ncash_invoices = []\nfor inv in invoices:\n  doc = frappe.get_doc('Sales Invoice', inv.name)\n  for pay in doc.payments:\n    if pay.mode_of_payment == 'Cash':\n      cash_invoices.append(inv.name)\n      break"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check the payment breakdown for INV-0020.",
      "fields": [
        "payments"
      ]
    },
    "output": "frappe.get_doc('Sales Invoice', 'INV-0020').payments"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices where total payments include any mode with amount over 5000.",
      "fields": [
        "payments",
        "name"
      ]
    },
    "output": "matches = []\ninvoices = frappe.get_all('Sales Invoice', fields=['name'])\nfor inv in invoices:\n  doc = frappe.get_doc('Sales Invoice', inv.name)\n  for pay in doc.payments:\n    if pay.amount > 5000:\n      matches.append(inv.name)\n      break"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices include at least one payment entry?",
      "fields": [
        "payments"
      ]
    },
    "output": "count = 0\ninvoices = frappe.get_all('Sales Invoice', fields=['name'])\nfor inv in invoices:\n  doc = frappe.get_doc('Sales Invoice', inv.name)\n  if doc.payments:\n    count += 1\nprint('Count with payments:', count)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with more than one payment method used.",
      "fields": [
        "payments",
        "name",
        "customer"
      ]
    },
    "output": "multi_method = []\ninvoices = frappe.get_all('Sales Invoice', fields=['name'])\nfor inv in invoices:\n  doc = frappe.get_doc('Sales Invoice', inv.name)\n  if len(set(p.mode_of_payment for p in doc.payments)) > 1:\n    multi_method.append(inv.name)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with payment remarks containing the word 'advance'.",
      "fields": [
        "payments",
        "name"
      ]
    },
    "output": "matches = []\ninvoices = frappe.get_all('Sales Invoice', fields=['name'])\nfor inv in invoices:\n  doc = frappe.get_doc('Sales Invoice', inv.name)\n  for pay in doc.payments:\n    if 'advance' in (pay.remarks or '').lower():\n      matches.append({'invoice': inv.name, 'remark': pay.remarks})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices received any card payment?",
      "fields": [
        "payments"
      ]
    },
    "output": "count = 0\ninvoices = frappe.get_all('Sales Invoice', fields=['name'])\nfor inv in invoices:\n  doc = frappe.get_doc('Sales Invoice', inv.name)\n  if any(p.mode_of_payment == 'Card' for p in doc.payments):\n    count += 1\nprint('Invoices with card payment:', count)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve all payment entries from invoice INV-1001.",
      "fields": [
        "payments"
      ]
    },
    "output": "frappe.get_doc('Sales Invoice', 'INV-1001').payments"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get names of invoices that include both cash and credit card payments.",
      "fields": [
        "payments",
        "name",
        "posting_date"
      ]
    },
    "output": "invoices = frappe.get_all('Sales Invoice', fields=['name'])\nmatches = []\nfor inv in invoices:\n  doc = frappe.get_doc('Sales Invoice', inv.name)\n  methods = set(p.mode_of_payment for p in doc.payments)\n  if 'Cash' in methods and 'Credit Card' in methods:\n    matches.append(inv.name)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with base paid amount greater than 2000.",
      "fields": [
        "base_paid_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_paid_amount': ['>', 2000]}, fields=['base_paid_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have base paid amount equal to zero?",
      "fields": [
        "base_paid_amount"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'base_paid_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with any base paid amount.",
      "fields": [
        "is_pos",
        "base_paid_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'base_paid_amount': ['>', 0]}, fields=['is_pos', 'base_paid_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with base paid amount below 500.",
      "fields": [
        "is_return",
        "base_paid_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'base_paid_amount': ['<', 500]}, fields=['is_return', 'base_paid_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices posted today with base paid amount recorded.",
      "fields": [
        "base_paid_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'base_paid_amount': ['>', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers made large payments over 10,000 base amount?",
      "fields": [
        "base_paid_amount",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_paid_amount': ['>', 10000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices from Q4 with base paid amount over 1000?",
      "fields": [
        "base_paid_amount",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 10, 1)\nend = datetime.date(today.year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'base_paid_amount': ['>', 1000], 'posting_date': ['between', [start, end]]}, fields=['base_paid_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct base paid amounts used across invoices.",
      "fields": [
        "base_paid_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['base_paid_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Average base paid amount in current fiscal year invoices?",
      "fields": [
        "base_paid_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['base_paid_amount'])\navg = sum(flt(d.base_paid_amount) for d in data) / len(data) if data else 0\nprint('Average Base Paid Amount:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with non-zero base paid amount.",
      "fields": [
        "base_paid_amount",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_paid_amount': ['!=', 0]}, fields=['base_paid_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with paid amount greater than 3000.",
      "fields": [
        "paid_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'paid_amount': ['>', 3000]}, fields=['paid_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were paid zero?",
      "fields": [
        "paid_amount"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'paid_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices with any paid amount recorded.",
      "fields": [
        "is_pos",
        "paid_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'paid_amount': ['>', 0]}, fields=['is_pos', 'paid_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices with paid amount less than 1000.",
      "fields": [
        "is_return",
        "paid_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'paid_amount': ['<', 1000]}, fields=['is_return', 'paid_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices posted today with paid amount?",
      "fields": [
        "paid_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'paid_amount': ['>', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers paid more than 8000?",
      "fields": [
        "paid_amount",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'paid_amount': ['>', 8000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices from Q2 with paid amount over 1500?",
      "fields": [
        "paid_amount",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 4, 1)\nend = datetime.date(today.year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'paid_amount': ['>', 1500], 'posting_date': ['between', [start, end]]}, fields=['paid_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all distinct paid amounts.",
      "fields": [
        "paid_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['paid_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What is the average paid amount this year?",
      "fields": [
        "paid_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['paid_amount'])\navg = sum(flt(d.paid_amount) for d in data) / len(data) if data else 0\nprint('Average Paid Amount:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with non-zero paid amount.",
      "fields": [
        "paid_amount",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'paid_amount': ['!=', 0]}, fields=['paid_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where the base change amount exceeds 200.",
      "fields": [
        "base_change_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_change_amount': ['>', 200]}, fields=['base_change_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had zero base change amount?",
      "fields": [
        "base_change_amount"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'base_change_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices that had some base change amount.",
      "fields": [
        "is_pos",
        "base_change_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'base_change_amount': ['!=', 0]}, fields=['is_pos', 'base_change_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices created today with any base change amount.",
      "fields": [
        "base_change_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'base_change_amount': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with base change amount less than 100 and customer is Nocturne Pine Corp.",
      "fields": [
        "base_change_amount",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_change_amount': ['<', 100], 'customer': 'Nocturne Pine Corp'}, fields=['base_change_amount', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct base change amounts used this year.",
      "fields": [
        "base_change_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['base_change_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What is the average base change amount across all invoices?",
      "fields": [
        "base_change_amount"
      ]
    },
    "output": "data = frappe.get_all('Sales Invoice', fields=['base_change_amount'])\ntotal = sum(f.base_change_amount for f in data)\navg = total / len(data) if data else 0\nprint('Average Base Change Amount:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices in Q4 with base change amount above 500?",
      "fields": [
        "base_change_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 10, 1)\nend = datetime.date(datetime.date.today().year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'base_change_amount': ['>', 500], 'posting_date': ['between', [start, end]]}, fields=['base_change_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which return invoices had any base change amount?",
      "fields": [
        "is_return",
        "base_change_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'base_change_amount': ['!=', 0]}, fields=['is_return', 'base_change_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with non-zero base change amount and customer name.",
      "fields": [
        "base_change_amount",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_change_amount': ['!=', 0]}, fields=['base_change_amount', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the change amount is more than 100.",
      "fields": [
        "change_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'change_amount': ['>', 100]}, fields=['change_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had no change amount?",
      "fields": [
        "change_amount"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'change_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with change amount not equal to zero.",
      "fields": [
        "is_return",
        "change_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'change_amount': ['!=', 0]}, fields=['is_return', 'change_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices with any change amount.",
      "fields": [
        "is_pos",
        "change_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'change_amount': ['!=', 0]}, fields=['is_pos', 'change_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices created today with change amount present?",
      "fields": [
        "change_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'change_amount': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give distinct change amounts from sales invoices.",
      "fields": [
        "change_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['change_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices with change amount under 50 for company Acme Ltd.",
      "fields": [
        "change_amount",
        "company"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'change_amount': ['<', 50], 'company': 'Acme Ltd.'}, fields=['change_amount', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What’s the average change amount for the current month?",
      "fields": [
        "change_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['change_amount'])\nfrom frappe.utils import flt\navg = sum(flt(d.change_amount) for d in data) / len(data) if data else 0\nprint('Average Change Amount:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check invoices with customer and change amount not zero.",
      "fields": [
        "change_amount",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'change_amount': ['!=', 0]}, fields=['change_amount', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices in Q1 with a change amount greater than 75.",
      "fields": [
        "change_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'change_amount': ['>', 75], 'posting_date': ['between', [start, end]]}, fields=['change_amount', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices where change amount was recorded in a specific account.",
      "fields": [
        "account_for_change_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'account_for_change_amount': ['!=', '']}, fields=['account_for_change_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have a change amount account specified?",
      "fields": [
        "account_for_change_amount"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'account_for_change_amount': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that use 'Cash - TEST' for change amount accounting.",
      "fields": [
        "account_for_change_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'account_for_change_amount': 'Cash - TEST'}, fields=['account_for_change_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with a change amount account used.",
      "fields": [
        "is_pos",
        "account_for_change_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'account_for_change_amount': ['!=', '']}, fields=['is_pos', 'account_for_change_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices from today where change amount was tracked to an account?",
      "fields": [
        "posting_date",
        "account_for_change_amount"
      ]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'account_for_change_amount': ['!=', ''], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all return invoices that recorded a change amount account.",
      "fields": [
        "is_return",
        "account_for_change_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'account_for_change_amount': ['!=', '']}, fields=['is_return', 'account_for_change_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find distinct accounts used to record change amounts.",
      "fields": [
        "account_for_change_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['account_for_change_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices with a change amount account?",
      "fields": [
        "customer",
        "account_for_change_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'account_for_change_amount': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices using a specific account for change amount in Q2.",
      "fields": [
        "account_for_change_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'account_for_change_amount': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['account_for_change_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do any draft invoices include an account for change amount?",
      "fields": [
        "status",
        "account_for_change_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': 'Draft', 'account_for_change_amount': ['!=', '']}, fields=['account_for_change_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices that have automatic advance allocation enabled.",
      "fields": [
        "allocate_advances_automatically"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'allocate_advances_automatically': 1}, fields=['allocate_advances_automatically'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where advances were not allocated automatically.",
      "fields": [
        "allocate_advances_automatically"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'allocate_advances_automatically': 0}, fields=['allocate_advances_automatically'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices used automatic allocation of advances?",
      "fields": [
        "allocate_advances_automatically"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'allocate_advances_automatically': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any POS invoices with automatic advance allocation enabled?",
      "fields": [
        "is_pos",
        "allocate_advances_automatically"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'allocate_advances_automatically': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with advance allocation turned on and payment already made.",
      "fields": [
        "allocate_advances_automatically",
        "paid_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'allocate_advances_automatically': 1, 'paid_amount': ['>', 0]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices created this month auto allocated advances?",
      "fields": [
        "allocate_advances_automatically",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'allocate_advances_automatically': 1, 'posting_date': ['>=', start]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoices from last week used automatic advance allocation.",
      "fields": [
        "allocate_advances_automatically",
        "posting_date"
      ]
    },
    "output": "import datetime\ntoday = datetime.date.today()\nstart = today - datetime.timedelta(days=7)\nfrappe.db.exists('Sales Invoice', {'allocate_advances_automatically': 1, 'posting_date': ['between', [start, today]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give total count of invoices with advance allocation off.",
      "fields": [
        "allocate_advances_automatically"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'allocate_advances_automatically': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export names of invoices with advance allocation turned on.",
      "fields": [
        "allocate_advances_automatically",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'allocate_advances_automatically': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get a list of invoices with auto allocation and company is Qatcom.",
      "fields": [
        "allocate_advances_automatically",
        "company"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'allocate_advances_automatically': 1, 'company': 'Qatcom'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where only allocated payments were included.",
      "fields": [
        "only_include_allocated_payments"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'only_include_allocated_payments': 1}, fields=['only_include_allocated_payments'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices that excluded unallocated payments.",
      "fields": [
        "only_include_allocated_payments"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'only_include_allocated_payments': 1}, fields=['only_include_allocated_payments'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices don't include only allocated payments?",
      "fields": [
        "only_include_allocated_payments"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'only_include_allocated_payments': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices from last month with only allocated payments.",
      "fields": [
        "only_include_allocated_payments",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrom frappe.utils import add_months\nstart = add_months(datetime.date.today().replace(day=1), -1)\nend = datetime.date.today().replace(day=1) - datetime.timedelta(days=1)\nfrappe.get_all('Sales Invoice', filters={'only_include_allocated_payments': 1, 'posting_date': ['between', [start, end]]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoices created today use only allocated payments.",
      "fields": [
        "only_include_allocated_payments",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'only_include_allocated_payments': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get names of invoices that included only allocated payments.",
      "fields": [
        "only_include_allocated_payments",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'only_include_allocated_payments': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices that included only allocated payments?",
      "fields": [
        "only_include_allocated_payments",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'only_include_allocated_payments': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices using only allocated payments.",
      "fields": [
        "only_include_allocated_payments",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'only_include_allocated_payments': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give return invoices that don’t use only allocated payments.",
      "fields": [
        "only_include_allocated_payments",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'only_include_allocated_payments': 0}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices that did not include only allocated payments.",
      "fields": [
        "only_include_allocated_payments"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'only_include_allocated_payments': 0}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where advances were fetched.",
      "fields": [
        "get_advances"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'get_advances': 1}, fields=['get_advances'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have not fetched any advances?",
      "fields": [
        "get_advances"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'get_advances': 0}, fields=['get_advances'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have advances pulled in?",
      "fields": [
        "get_advances"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'get_advances': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices that fetched advances.",
      "fields": [
        "get_advances",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'get_advances': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any POS invoices fetched advances.",
      "fields": [
        "get_advances",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'get_advances': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices created today where advances were fetched.",
      "fields": [
        "get_advances",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'get_advances': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices with fetched advances and customer data.",
      "fields": [
        "get_advances",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'get_advances': 1}, fields=['name', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoices with fetched advances and grand total above 1000.",
      "fields": [
        "get_advances",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'get_advances': 1, 'grand_total': ['>', 1000]}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which companies had invoices with fetched advances?",
      "fields": [
        "get_advances",
        "company"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'get_advances': 1}, fields=['company'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with advances fetched and status as Paid.",
      "fields": [
        "get_advances",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'get_advances': 1, 'status': 'Paid'}, fields=['name', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices that have advance payments linked.",
      "fields": [
        "advances"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': ['!=', None]}, fields=['advances'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices don’t have any advances?",
      "fields": [
        "advances"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': None}, fields=['advances'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoice numbers and their advances if available.",
      "fields": [
        "advances",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': ['!=', None]}, fields=['name', 'advances'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all return invoices that had advances linked.",
      "fields": [
        "advances",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'advances': ['!=', None]}, fields=['name', 'advances'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have any advances attached?",
      "fields": [
        "advances"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'advances': ['!=', None]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices with advances and customer info.",
      "fields": [
        "advances",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': ['!=', None]}, fields=['name', 'customer', 'advances'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices with advances and status marked as Paid.",
      "fields": [
        "advances",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': ['!=', None], 'status': 'Paid'}, fields=['name', 'status', 'advances'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices that include advances?",
      "fields": [
        "advances",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': ['!=', None]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoices with more than 2 advance entries.",
      "fields": [
        "advances",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={}, fields=['name', 'advances'])  # Post-process: len(invoice.advances) > 2"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with advances and their grand total.",
      "fields": [
        "advances",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': ['!=', None]}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices with a write-off amount above 200.",
      "fields": [
        "write_off_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_amount': ['>', 200]}, fields=['write_off_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have zero write-off amount?",
      "fields": [
        "write_off_amount"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'write_off_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with non-zero write-off amounts for customer John Doe.",
      "fields": [
        "write_off_amount",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_amount': ['!=', 0], 'customer': 'John Doe'}, fields=['name', 'write_off_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where write-off amount was manually added.",
      "fields": [
        "write_off_amount",
        "write_off_outstanding_amount_automatically"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_outstanding_amount_automatically': 0, 'write_off_amount': ['>', 0]}, fields=['name', 'write_off_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check invoices that have both advances and write-offs.",
      "fields": [
        "advances",
        "write_off_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': ['!=', []], 'write_off_amount': ['>', 0]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any POS invoices with write-off amounts?",
      "fields": [
        "is_pos",
        "write_off_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'write_off_amount': ['>', 0]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with write-offs done this month.",
      "fields": [
        "write_off_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'write_off_amount': ['>', 0], 'posting_date': ['>=', start]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many companies applied write-offs last year?",
      "fields": [
        "write_off_amount",
        "posting_date",
        "company"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year - 1, 1, 1)\nend = datetime.date(datetime.date.today().year - 1, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'write_off_amount': ['>', 0], 'posting_date': ['between', [start, end]]}, fields=['company'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Average write-off amount for returned invoices?",
      "fields": [
        "write_off_amount",
        "is_return"
      ]
    },
    "output": "data = frappe.get_all('Sales Invoice', filters={'is_return': 1}, fields=['write_off_amount'])\navg = sum(d.write_off_amount for d in data) / len(data) if data else 0\nprint('Avg Write-Off:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with write-offs greater than 50 and less than 200.",
      "fields": [
        "write_off_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_amount': ['between', [50, 200]]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with base write-off amount above 100.",
      "fields": [
        "base_write_off_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_write_off_amount': ['>', 100]}, fields=['base_write_off_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices with no base write-off amount.",
      "fields": [
        "base_write_off_amount"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'base_write_off_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where base write-off amount is between 50 and 150.",
      "fields": [
        "base_write_off_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_write_off_amount': ['between', [50, 150]]}, fields=['base_write_off_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices with base write-off amount more than 200.",
      "fields": [
        "is_return",
        "base_write_off_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'base_write_off_amount': ['>', 200]}, fields=['name', 'base_write_off_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with both base and normal write-off amount over 50.",
      "fields": [
        "base_write_off_amount",
        "write_off_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_write_off_amount': ['>', 50], 'write_off_amount': ['>', 50]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices for company 'HTS Qatar' with base write-off above 75.",
      "fields": [
        "base_write_off_amount",
        "company"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company': 'HTS Qatar', 'base_write_off_amount': ['>', 75]}, fields=['name', 'base_write_off_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Is there any POS invoice with base write-off amount?",
      "fields": [
        "is_pos",
        "base_write_off_amount"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'is_pos': 1, 'base_write_off_amount': ['>', 0]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Average base write-off amount this quarter?",
      "fields": [
        "base_write_off_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\nnow = datetime.date.today()\nq_start = datetime.date(now.year, 4, 1) if now.month <= 6 else datetime.date(now.year, 7, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', q_start]}, fields=['base_write_off_amount'])\navg = sum(d.base_write_off_amount for d in data) / len(data) if data else 0\nprint('Avg Base Write-Off:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct base write-off values used in invoices.",
      "fields": [
        "base_write_off_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['base_write_off_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices created this year with non-zero base write-off.",
      "fields": [
        "base_write_off_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'base_write_off_amount': ['!=', 0], 'posting_date': ['>=', start]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where write off outstanding amount automatically is enabled.",
      "fields": [
        "write_off_outstanding_amount_automatically"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_outstanding_amount_automatically': 1}, fields=['write_off_outstanding_amount_automatically'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have automatic write off disabled?",
      "fields": [
        "write_off_outstanding_amount_automatically"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'write_off_outstanding_amount_automatically': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get names of invoices with auto write off enabled.",
      "fields": [
        "name",
        "write_off_outstanding_amount_automatically"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_outstanding_amount_automatically': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices where auto write off is applied.",
      "fields": [
        "is_return",
        "write_off_outstanding_amount_automatically"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'write_off_outstanding_amount_automatically': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoices auto write off is applied for a POS sale.",
      "fields": [
        "is_pos",
        "write_off_outstanding_amount_automatically"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'is_pos': 1, 'write_off_outstanding_amount_automatically': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find distinct values used in write off auto mode.",
      "fields": [
        "write_off_outstanding_amount_automatically"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['write_off_outstanding_amount_automatically'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices posted this month with automatic write off enabled?",
      "fields": [
        "posting_date",
        "write_off_outstanding_amount_automatically"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'write_off_outstanding_amount_automatically': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List customers where invoices had write off auto mode.",
      "fields": [
        "customer",
        "write_off_outstanding_amount_automatically"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_outstanding_amount_automatically': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where auto write off is not used.",
      "fields": [
        "write_off_outstanding_amount_automatically",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_outstanding_amount_automatically': 0}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Total invoices with write off auto mode set either way?",
      "fields": [
        "write_off_outstanding_amount_automatically"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were written off using the account 'Bad Debts'?",
      "fields": [
        "write_off_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_account': 'Bad Debts'}, fields=['write_off_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices use a write-off account named 'Adjustments'?",
      "fields": [
        "write_off_account"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'write_off_account': 'Adjustments'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with write-off account set as 'Write Off Charges'.",
      "fields": [
        "write_off_account",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_account': 'Write Off Charges'}, fields=['write_off_account', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all return invoices using 'Losses' as write-off account.",
      "fields": [
        "write_off_account",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'write_off_account': 'Losses'}, fields=['write_off_account', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do any invoices from this month include a write-off account?",
      "fields": [
        "write_off_account",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.db.exists('Sales Invoice', {'write_off_account': ['!=', ''], 'posting_date': ['>=', start]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where write-off account is not blank.",
      "fields": [
        "write_off_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_account': ['!=', '']}, fields=['write_off_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices that used 'Misc Adjustments' as write-off account.",
      "fields": [
        "write_off_account"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'write_off_account': 'Misc Adjustments'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return POS invoices using the write-off account 'Loss Reserve'.",
      "fields": [
        "is_return",
        "is_pos",
        "write_off_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'is_pos': 1, 'write_off_account': 'Loss Reserve'}, fields=['is_return', 'is_pos', 'write_off_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which write-off accounts were used in January invoices?",
      "fields": [
        "write_off_account",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 1, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['write_off_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with an auto repeat set.",
      "fields": [
        "name",
        "auto_repeat"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'auto_repeat': ['!=', '']}, fields=['name', 'auto_repeat'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices with auto repeat.",
      "fields": [
        "auto_repeat"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'auto_repeat': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice has a specific auto repeat, e.g., 'AUTOREP-0001'.",
      "fields": [
        "auto_repeat"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'auto_repeat': 'AUTOREP-0001'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the value of auto repeat for a specific invoice.",
      "fields": [
        "auto_repeat"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', 'SINV-0001', 'auto_repeat')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with their auto repeat and customer.",
      "fields": [
        "name",
        "auto_repeat",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'auto_repeat': ['!=', '']}, fields=['name', 'auto_repeat', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with a AUTOREP-0001 auto repeat and a Wanderflux customer.",
      "fields": [
        "name",
        "auto_repeat",
        "customer"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'auto_repeat': 'AUTOREP-0001', 'customer': 'Wanderflux Corp'}, fields=['name', 'auto_repeat', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with auto repeat and their to date.",
      "fields": [
        "name",
        "auto_repeat",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'auto_repeat': ['!=', '']}, fields=['name', 'auto_repeat', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if a specific invoice has a specific auto repeat.",
      "fields": [
        "auto_repeat"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', 'SINV-0001', 'auto_repeat') == 'AUTOREP-0001'"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with a specific auto repeat and their from date.",
      "fields": [
        "name",
        "auto_repeat",
        "from_date"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'auto_repeat': 'AUTOREP-0001'}, fields=['name', 'auto_repeat', 'from_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show a single invoice document with an auto repeat.",
      "fields": [
        "name",
        "auto_repeat"
      ]
    },
    "output": "frappe.get_doc('Sales Invoice', {'auto_repeat': ['!=', ''], 'name': ['like', '%SINV%']}, fields=['name', 'auto_repeat'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct write-off accounts used in paid invoices.",
      "fields": [
        "write_off_account",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': 'Paid'}, fields=['write_off_account'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices linked to the write-off cost center named 'Main Operations'.",
      "fields": [
        "write_off_cost_center"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_cost_center': 'Main Operations'}, fields=['write_off_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where the write-off cost center is missing.",
      "fields": [
        "write_off_cost_center"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_cost_center': ''}, fields=['write_off_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices used the Finance write-off cost center?",
      "fields": [
        "write_off_cost_center"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'write_off_cost_center': 'Finance'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with write-off cost center set to 'General'.",
      "fields": [
        "write_off_cost_center"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_cost_center': 'General'}, fields=['write_off_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct write-off cost centers from all invoices.",
      "fields": [
        "write_off_cost_center"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['write_off_cost_center'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have write-off cost center as 'Corporate Overhead'?",
      "fields": [
        "write_off_cost_center"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_cost_center': 'Corporate Overhead'}, fields=['write_off_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with write-off cost center not equal to 'Admin'.",
      "fields": [
        "write_off_cost_center"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_cost_center': ['!=', 'Admin']}, fields=['write_off_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What are the most used write-off cost centers this year?",
      "fields": [
        "write_off_cost_center",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['write_off_cost_center'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoices this month used the Operations cost center for write-offs.",
      "fields": [
        "write_off_cost_center",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.db.exists('Sales Invoice', {'write_off_cost_center': 'Operations', 'posting_date': ['>=', start]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices grouped by write-off cost center.",
      "fields": [
        "write_off_cost_center"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['write_off_cost_center'], group_by='write_off_cost_center')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where loyalty points were redeemed.",
      "fields": [
        "loyalty_points_redemption"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_points_redemption': 1}, fields=['loyalty_points_redemption'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices did not involve loyalty point redemption?",
      "fields": [
        "loyalty_points_redemption"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_points_redemption': 0}, fields=['loyalty_points_redemption'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices that applied loyalty point redemption.",
      "fields": [
        "is_pos",
        "loyalty_points_redemption"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'loyalty_points_redemption': 1}, fields=['is_pos', 'loyalty_points_redemption'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any customer used loyalty points on today's invoices?",
      "fields": [
        "loyalty_points_redemption",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'loyalty_points_redemption': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List customer names where loyalty points were redeemed.",
      "fields": [
        "loyalty_points_redemption",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_points_redemption': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices this year included loyalty redemptions?",
      "fields": [
        "loyalty_points_redemption",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.db.count('Sales Invoice', filters={'loyalty_points_redemption': 1, 'posting_date': ['>=', start]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoice IDs that applied loyalty redemption and have grand total over 1000.",
      "fields": [
        "loyalty_points_redemption",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_points_redemption': 1, 'grand_total': ['>', 1000]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which companies have used loyalty point redemption?",
      "fields": [
        "loyalty_points_redemption",
        "company"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_points_redemption': 1}, fields=['company'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do any draft invoices apply loyalty points?",
      "fields": [
        "loyalty_points_redemption",
        "status"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'loyalty_points_redemption': 1, 'status': 'Draft'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices with loyalty point redemptions.",
      "fields": [
        "loyalty_points_redemption",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'loyalty_points_redemption': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where loyalty points used were more than 50.",
      "fields": [
        "loyalty_points"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_points': ['>', 50]}, fields=['loyalty_points'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had zero loyalty points redeemed?",
      "fields": [
        "loyalty_points"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'loyalty_points': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all return invoices with loyalty points more than 100.",
      "fields": [
        "is_return",
        "loyalty_points"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'loyalty_points': ['>', 100]}, fields=['is_return', 'loyalty_points'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers redeemed over 200 loyalty points?",
      "fields": [
        "customer",
        "loyalty_points"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_points': ['>', 200]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Average loyalty points used in this month’s invoices?",
      "fields": [
        "loyalty_points",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date.today().replace(day=1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['loyalty_points'])\navg = sum(flt(d.loyalty_points) for d in data) / len(data) if data else 0\nprint('Average Loyalty Points:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices using loyalty points and paid via cash.",
      "fields": [
        "loyalty_points",
        "mode_of_payment"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_points': ['>', 0], 'mode_of_payment': 'Cash'}, fields=['loyalty_points', 'mode_of_payment'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any POS invoices with loyalty points used?",
      "fields": [
        "loyalty_points",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'loyalty_points': ['>', 0]}, fields=['loyalty_points'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices in Q2 that used loyalty points.",
      "fields": [
        "loyalty_points",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'loyalty_points': ['>', 0], 'posting_date': ['between', [start, end]]}, fields=['loyalty_points', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices had loyalty points but are not finalized yet?",
      "fields": [
        "loyalty_points",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_points': ['>', 0], 'status': ['!=', 'Paid']}, fields=['loyalty_points', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export all loyalty points transactions this year.",
      "fields": [
        "loyalty_points",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'loyalty_points': ['>', 0]}, fields=['name', 'loyalty_points', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with loyalty amount over 200.",
      "fields": [
        "loyalty_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_amount': ['>', 200]}, fields=['loyalty_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices used no loyalty amount?",
      "fields": [
        "loyalty_amount"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'loyalty_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where loyalty amount was less than 100.",
      "fields": [
        "is_pos",
        "loyalty_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'loyalty_amount': ['<', 100]}, fields=['is_pos', 'loyalty_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with loyalty amount above 300.",
      "fields": [
        "is_return",
        "loyalty_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'loyalty_amount': ['>', 300]}, fields=['is_return', 'loyalty_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices created today that include loyalty amount?",
      "fields": [
        "loyalty_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'loyalty_amount': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received loyalty amount more than 500?",
      "fields": [
        "customer",
        "loyalty_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_amount': ['>', 500]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices in Q4 that used loyalty amount above 100?",
      "fields": [
        "posting_date",
        "loyalty_amount",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 10, 1)\nend = datetime.date(datetime.date.today().year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'loyalty_amount': ['>', 100], 'posting_date': ['between', [start, end]]}, fields=['name', 'loyalty_amount', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all unique loyalty amount values used.",
      "fields": [
        "loyalty_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['loyalty_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What's the average loyalty amount for this year?",
      "fields": [
        "loyalty_amount",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['loyalty_amount'])\navg = sum(flt(d.loyalty_amount) for d in data) / len(data) if data else 0\nprint('Average Loyalty Amount:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoices where loyalty amount is not zero.",
      "fields": [
        "loyalty_amount"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_amount': ['!=', 0]}, fields=['loyalty_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices under the Silver loyalty program.",
      "fields": [
        "loyalty_program"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_program': 'Silver'}, fields=['loyalty_program'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where no loyalty program was assigned.",
      "fields": [
        "loyalty_program"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_program': ['=', '']}, fields=['loyalty_program'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices with Platinum loyalty program this month.",
      "fields": [
        "loyalty_program",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'loyalty_program': 'Platinum', 'posting_date': ['>=', start]}, fields=['loyalty_program', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers belong to the Gold loyalty program?",
      "fields": [
        "loyalty_program",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_program': 'Gold'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there return invoices with any loyalty program?",
      "fields": [
        "loyalty_program",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'loyalty_program': ['!=', '']}, fields=['loyalty_program', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices in Q4 under any loyalty program?",
      "fields": [
        "loyalty_program",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 10, 1)\nend = datetime.date(datetime.date.today().year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'loyalty_program': ['!=', '']}, fields=['loyalty_program', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices had loyalty program changed?",
      "fields": [
        "loyalty_program",
        "amended_from"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'amended_from': ['!=', ''], 'loyalty_program': ['!=', '']}, fields=['loyalty_program', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export loyalty program activity for this year.",
      "fields": [
        "loyalty_program",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'loyalty_program': ['!=', '']}, fields=['loyalty_program', 'posting_date', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices not linked to any loyalty program this quarter.",
      "fields": [
        "loyalty_program",
        "posting_date"
      ]
    },
    "output": "import datetime\ntoday = datetime.date.today()\nq_start = datetime.date(today.year, 1 + 3 * ((today.month - 1) // 3), 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', q_start], 'loyalty_program': ['=', '']}, fields=['loyalty_program', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List distinct loyalty programs used.",
      "fields": [
        "loyalty_program"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['loyalty_program'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices linked to the redemption account 'Loyalty Redemption - ERPG'.",
      "fields": [
        "loyalty_redemption_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_redemption_account': 'Loyalty Redemption - ERPG'}, fields=['loyalty_redemption_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all POS invoices with the loyalty redemption account set.",
      "fields": [
        "is_pos",
        "loyalty_redemption_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'loyalty_redemption_account': ['!=', '']}, fields=['is_pos', 'loyalty_redemption_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices used the loyalty redemption account 'Loyalty - GCC'?",
      "fields": [
        "loyalty_redemption_account"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'loyalty_redemption_account': 'Loyalty - GCC'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export loyalty redemption account details for invoices this year.",
      "fields": [
        "name",
        "loyalty_redemption_account",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['name', 'loyalty_redemption_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which accounts are being used for loyalty point redemptions?",
      "fields": [
        "loyalty_redemption_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['loyalty_redemption_account'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all return invoices that used the 'Loyalty Adjust - ERPG' account.",
      "fields": [
        "is_return",
        "loyalty_redemption_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'loyalty_redemption_account': 'Loyalty Adjust - ERPG'}, fields=['is_return', 'loyalty_redemption_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices from last month used a loyalty redemption account?",
      "fields": [
        "loyalty_redemption_account",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\nfrom dateutil.relativedelta import relativedelta\ntoday = datetime.date.today()\nstart = (today.replace(day=1) - relativedelta(months=1))\nend = today.replace(day=1) - datetime.timedelta(days=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'loyalty_redemption_account': ['!=', '']}, fields=['name', 'loyalty_redemption_account', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices where loyalty redemption account is blank.",
      "fields": [
        "loyalty_redemption_account",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_redemption_account': ''}, fields=['name', 'loyalty_redemption_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List loyalty redemption accounts used in Q4.",
      "fields": [
        "loyalty_redemption_account",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 10, 1)\nend = datetime.date(datetime.date.today().year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['loyalty_redemption_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all distinct loyalty redemption accounts applied on invoices with status 'Paid'.",
      "fields": [
        "status",
        "loyalty_redemption_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': 'Paid'}, fields=['loyalty_redemption_account'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that used the loyalty redemption cost center 'South Zone'.",
      "fields": [
        "loyalty_redemption_cost_center"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_redemption_cost_center': 'South Zone'}, fields=['loyalty_redemption_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count how many loyalty redemptions were tracked under cost center 'Retail Division'.",
      "fields": [
        "loyalty_redemption_cost_center"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'loyalty_redemption_cost_center': 'Retail Division'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct loyalty redemption cost centers in July.",
      "fields": [
        "loyalty_redemption_cost_center",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 7, 1)\nend = datetime.date(datetime.date.today().year, 7, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['loyalty_redemption_cost_center'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with loyalty redemptions allocated under any cost center this quarter.",
      "fields": [
        "loyalty_redemption_cost_center",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(month=4, day=1)\nend = datetime.date.today().replace(month=6, day=30)\nfrappe.get_all('Sales Invoice', filters={'loyalty_redemption_cost_center': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['loyalty_redemption_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with loyalty redemption cost center set as 'Main Branch'.",
      "fields": [
        "loyalty_redemption_cost_center"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_redemption_cost_center': 'Main Branch'}, fields=['loyalty_redemption_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which cost centers were used for loyalty redemption this year?",
      "fields": [
        "loyalty_redemption_cost_center",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['loyalty_redemption_cost_center'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices used 'Retail North' for loyalty redemption?",
      "fields": [
        "loyalty_redemption_cost_center"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'loyalty_redemption_cost_center': 'Retail North'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices where loyalty redemption was processed through any cost center.",
      "fields": [
        "loyalty_redemption_cost_center",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_redemption_cost_center': ['!=', '']}, fields=['loyalty_redemption_cost_center', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct loyalty redemption cost centers used in Q2.",
      "fields": [
        "loyalty_redemption_cost_center",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['loyalty_redemption_cost_center'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices using loyalty cost centers that are not equal to 'General'.",
      "fields": [
        "loyalty_redemption_cost_center"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_redemption_cost_center': ['!=', 'General']}, fields=['loyalty_redemption_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where address and contact details were updated.",
      "fields": [
        "address_and_contact"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'address_and_contact': 1}, fields=['address_and_contact'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices include address and contact section?",
      "fields": [
        "address_and_contact"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'address_and_contact': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch return invoices that have address and contact info.",
      "fields": [
        "is_return",
        "address_and_contact"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'address_and_contact': 1}, fields=['is_return', 'address_and_contact'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices with address and contact added?",
      "fields": [
        "customer",
        "address_and_contact"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'address_and_contact': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with address and contact attached.",
      "fields": [
        "is_pos",
        "address_and_contact"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'address_and_contact': 1}, fields=['is_pos', 'address_and_contact'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices created this year with address and contact info.",
      "fields": [
        "address_and_contact",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'address_and_contact': 1}, fields=['address_and_contact'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any invoices with contact section missing?",
      "fields": [
        "address_and_contact"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'address_and_contact': 0}, fields=['address_and_contact'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices including address and contact section.",
      "fields": [
        "address_and_contact"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'address_and_contact': 1}, fields=['address_and_contact'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with address and contact from Q4?",
      "fields": [
        "address_and_contact",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 10, 1)\nend = datetime.date(datetime.date.today().year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'address_and_contact': 1, 'posting_date': ['between', [start, end]]}, fields=['address_and_contact', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices where address and contact was added today?",
      "fields": [
        "address_and_contact",
        "posting_date"
      ]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'address_and_contact': 1, 'posting_date': datetime.date.today()}, fields=['address_and_contact'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were billed to the address 'Villa 23, Doha'?",
      "fields": [
        "customer_address"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer_address': 'Villa 23, Doha'}, fields=['customer_address', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have a registered customer address?",
      "fields": [
        "customer_address"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'customer_address': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices created this year where customer address was updated.",
      "fields": [
        "customer_address",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'customer_address': ['!=', '']}, fields=['name', 'customer_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices where a customer address was recorded.",
      "fields": [
        "is_pos",
        "customer_address"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'customer_address': ['!=', '']}, fields=['is_pos', 'customer_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with customer address that start with 'Street'.",
      "fields": [
        "customer_address"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer_address': ['like', 'Street%']}, fields=['name', 'customer_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices with a specific customer address mentioned.",
      "fields": [
        "is_return",
        "customer_address"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'customer_address': ['!=', '']}, fields=['is_return', 'customer_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices sent to 'Al Sadd, Doha'?",
      "fields": [
        "customer_address",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer_address': 'Al Sadd, Doha'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices this month with customer address filled?",
      "fields": [
        "customer_address",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'customer_address': ['!=', '']}, fields=['name', 'customer_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with no customer address recorded?",
      "fields": [
        "customer_address"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer_address': ['=', '']}, fields=['customer_address', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export customer addresses from all invoices this year.",
      "fields": [
        "customer_address",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['name', 'customer_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where contact person is mentioned.",
      "fields": [
        "contact_person",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_person': ['!=', '']}, fields=['contact_person', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices are linked to the contact person named 'Ahmed Saeed'?",
      "fields": [
        "contact_person"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'contact_person': 'Ahmed Saeed'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices with a contact person recorded.",
      "fields": [
        "is_pos",
        "contact_person"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'contact_person': ['!=', '']}, fields=['is_pos', 'contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have contact persons listed on their invoices?",
      "fields": [
        "customer",
        "contact_person"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_person': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices with contact person info from Q1.",
      "fields": [
        "contact_person",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'contact_person': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['name', 'contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get return invoices with contact person details.",
      "fields": [
        "is_return",
        "contact_person"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'contact_person': ['!=', '']}, fields=['is_return', 'contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices created this month that mention contact persons?",
      "fields": [
        "posting_date",
        "contact_person"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'contact_person': ['!=', '']}, fields=['contact_person', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me invoices where no contact person was filled.",
      "fields": [
        "contact_person"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_person': ''}, fields=['name', 'contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices are tied to contact persons starting with 'Mohamed'?",
      "fields": [
        "contact_person"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_person': ['like', 'Mohamed%']}, fields=['name', 'contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me all unique contact persons who appear in invoices.",
      "fields": [
        "contact_person"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['contact_person'], filters={'contact_person': ['!=', '']}, distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have address displays starting with 'P.O. Box'?",
      "fields": [
        "address_display"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'address_display': ['like', 'P.O. Box%']}, fields=['address_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with missing address display info.",
      "fields": [
        "address_display"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'address_display': ''}, fields=['address_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices created this year with valid address display.",
      "fields": [
        "address_display"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'address_display': ['!=', '']}, fields=['address_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many POS invoices contain address display data?",
      "fields": [
        "address_display"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_pos': 1, 'address_display': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices sent to addresses in Al Wakrah?",
      "fields": [
        "address_display"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'address_display': ['like', '%Al Wakrah%']}, fields=['address_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices that include address display text.",
      "fields": [
        "address_display"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'address_display': ['!=', '']}, fields=['address_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export address display details from Q2 invoices.",
      "fields": [
        "address_display"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['address_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What invoices had address displays modified today?",
      "fields": [
        "address_display"
      ]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'address_display': ['!=', '']}, fields=['address_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoices include 'Lusail' in their address display.",
      "fields": [
        "address_display"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'address_display': ['like', '%Lusail%']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List customers who received invoices with address displays starting with 'Block A'.",
      "fields": [
        "address_display"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'address_display': ['like', 'Block A%']}, fields=['address_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices show contact display info containing 'Ali Hussain'?",
      "fields": [
        "contact_display",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_display': ['like', '%Ali Hussain%']}, fields=['contact_display', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices created this month with valid contact displays?",
      "fields": [
        "posting_date",
        "contact_display",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'contact_display': ['!=', '']}, fields=['name', 'contact_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices where contact display was recorded.",
      "fields": [
        "is_return",
        "contact_display"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'contact_display': ['!=', '']}, fields=['is_return', 'contact_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch POS invoices with non-empty contact display.",
      "fields": [
        "is_pos",
        "contact_display",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'contact_display': ['!=', '']}, fields=['contact_display', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have no contact display?",
      "fields": [
        "contact_display"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'contact_display': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices sent with contact display starting 'Mr. Saad'?",
      "fields": [
        "contact_display",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_display': ['like', 'Mr. Saad%']}, fields=['name', 'contact_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices with contact display showing mobile numbers.",
      "fields": [
        "contact_display",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_display': ['like', '%+974%']}, fields=['name', 'contact_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check for invoices that included contact display and were unpaid.",
      "fields": [
        "contact_display",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_display': ['!=', ''], 'status': ['!=', 'Paid']}, fields=['contact_display', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with contact display updates?",
      "fields": [
        "contact_display",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_display': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List Q3 invoices that had contact display included.",
      "fields": [
        "posting_date",
        "contact_display",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 7, 1)\nend = datetime.date(datetime.date.today().year, 9, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'contact_display': ['!=', '']}, fields=['contact_display', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have contact emails ending with '@gmail.com'?",
      "fields": [
        "contact_email",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_email': ['like', '%@gmail.com']}, fields=['contact_email', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices created this month with valid contact email addresses?",
      "fields": [
        "posting_date",
        "contact_email",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'contact_email': ['!=', '']}, fields=['name', 'contact_email'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with a contact email provided.",
      "fields": [
        "is_pos",
        "contact_email"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'contact_email': ['!=', '']}, fields=['is_pos', 'contact_email'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have no contact email listed?",
      "fields": [
        "contact_email"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'contact_email': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices with non-empty contact email fields.",
      "fields": [
        "is_return",
        "contact_email"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'contact_email': ['!=', '']}, fields=['is_return', 'contact_email'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export contact email addresses from Q1 invoices.",
      "fields": [
        "posting_date",
        "contact_email",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['name', 'contact_email'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with contact emails including the domain 'htsqatar.com'?",
      "fields": [
        "contact_email",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_email': ['like', '%@htsqatar.com']}, fields=['name', 'contact_email'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check unpaid invoices that contain contact email details.",
      "fields": [
        "contact_email",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_email': ['!=', ''], 'status': ['!=', 'Paid']}, fields=['contact_email', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with contact email values updated?",
      "fields": [
        "contact_email",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_email': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do Q3 invoices include contact email addresses with '.qa' domain?",
      "fields": [
        "posting_date",
        "contact_email",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 7, 1)\nend = datetime.date(datetime.date.today().year, 9, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'contact_email': ['like', '%.qa']}, fields=['contact_email', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices associated with the Qatar territory.",
      "fields": [
        "territory",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'territory': 'Qatar'}, fields=['territory', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices are from the 'Doha' territory?",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'territory': 'Doha'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where the territory name starts with 'West'.",
      "fields": [
        "territory",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'territory': ['like', 'West%']}, fields=['territory', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices with territory information this year.",
      "fields": [
        "posting_date",
        "territory",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'territory': ['!=', '']}, fields=['territory', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices that mention the territory.",
      "fields": [
        "is_pos",
        "territory"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'territory': ['!=', '']}, fields=['is_pos', 'territory'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices from territories that include 'Industrial' in their name?",
      "fields": [
        "territory",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'territory': ['like', '%Industrial%']}, fields=['territory', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export all distinct territories used in invoices.",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'territory': ['!=', '']}, fields=['territory'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices created in Q2 are linked to any territory?",
      "fields": [
        "posting_date",
        "territory",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'territory': ['!=', '']}, fields=['territory', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do any return invoices have territory data?",
      "fields": [
        "is_return",
        "territory"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'territory': ['!=', '']}, fields=['is_return', 'territory'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices are missing a territory?",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'territory': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were shipped to 'ADN Shipping Center'?",
      "fields": [
        "shipping_address_name",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_address_name': 'ADN Shipping Center'}, fields=['shipping_address_name', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with shipping address names that start with 'Ship-'",
      "fields": [
        "name",
        "shipping_address_name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_address_name': ['like', 'Ship-%']}, fields=['name', 'shipping_address_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were shipped to any address?",
      "fields": [
        "shipping_address_name"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'shipping_address_name': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get Q1 invoices with a shipping address name recorded.",
      "fields": [
        "shipping_address_name",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'shipping_address_name': ['!=', '']}, fields=['shipping_address_name', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices with shipping address provided.",
      "fields": [
        "is_pos",
        "shipping_address_name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'shipping_address_name': ['!=', '']}, fields=['is_pos', 'shipping_address_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices are missing the shipping address name?",
      "fields": [
        "shipping_address_name",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_address_name': ''}, fields=['shipping_address_name', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with shipping address containing 'Doha' in name.",
      "fields": [
        "name",
        "shipping_address_name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_address_name': ['like', '%Doha%']}, fields=['name', 'shipping_address_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export all unique shipping address names used this year.",
      "fields": [
        "shipping_address_name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['shipping_address_name'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any return invoices shipped to a named address?",
      "fields": [
        "is_return",
        "shipping_address_name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'shipping_address_name': ['!=', '']}, fields=['is_return', 'shipping_address_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Q4 invoices with specific shipping address names?",
      "fields": [
        "shipping_address_name",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 10, 1)\nend = datetime.date(datetime.date.today().year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'shipping_address_name': ['!=', '']}, fields=['shipping_address_name', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices shipped to address ID SHIP-0001.",
      "fields": [
        "shipping_address",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_address': 'SHIP-0001'}, fields=['shipping_address', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices where shipping address starts with 'SHIP-'?",
      "fields": [
        "name",
        "shipping_address"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_address': ['like', 'SHIP-%']}, fields=['name', 'shipping_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have no shipping address set?",
      "fields": [
        "shipping_address"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'shipping_address': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with valid shipping addresses posted in June.",
      "fields": [
        "posting_date",
        "shipping_address",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 6, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'shipping_address': ['!=', '']}, fields=['shipping_address', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "POS invoices with shipping addresses filled?",
      "fields": [
        "is_pos",
        "shipping_address"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'shipping_address': ['!=', '']}, fields=['is_pos', 'shipping_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices that include shipping address?",
      "fields": [
        "is_return",
        "shipping_address"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'shipping_address': ['!=', '']}, fields=['is_return', 'shipping_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received shipments to SHIP-3002?",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_address': 'SHIP-3002'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices with shipping address containing 'Doha'.",
      "fields": [
        "name",
        "shipping_address"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_address': ['like', '%Doha%']}, fields=['name', 'shipping_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List unique shipping addresses used in Q2.",
      "fields": [
        "shipping_address"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['shipping_address'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any unpaid invoices shipped?",
      "fields": [
        "shipping_address",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': ['!=', 'Paid'], 'shipping_address': ['!=', '']}, fields=['shipping_address', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices used dispatch address name DIS-ADDR-0003?",
      "fields": [
        "dispatch_address_name",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'dispatch_address_name': 'DIS-ADDR-0003'}, fields=['dispatch_address_name', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with dispatch address names starting with 'DIS-'?",
      "fields": [
        "name",
        "dispatch_address_name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'dispatch_address_name': ['like', 'DIS-%']}, fields=['name', 'dispatch_address_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices lack dispatch address names?",
      "fields": []
    },
    "output": "frappe.db.count('Sales Invoice', filters={'dispatch_address_name': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which Q1 invoices had dispatch addresses filled?",
      "fields": [
        "dispatch_address_name",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'dispatch_address_name': ['!=', '']}, fields=['dispatch_address_name', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there return invoices with dispatch address info?",
      "fields": [
        "is_return",
        "dispatch_address_name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'dispatch_address_name': ['!=', '']}, fields=['is_return', 'dispatch_address_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Dispatch address names used in POS invoices?",
      "fields": [
        "dispatch_address_name",
        "is_pos",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'dispatch_address_name': ['!=', '']}, fields=['dispatch_address_name', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with dispatch to DIS-ADDR-0025?",
      "fields": [
        "customer",
        "dispatch_address_name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'dispatch_address_name': 'DIS-ADDR-0025'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with dispatch address name containing 'Store-1'?",
      "fields": [
        "name",
        "dispatch_address_name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'dispatch_address_name': ['like', '%Store-1%']}, fields=['name', 'dispatch_address_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Unpaid invoices that include dispatch address?",
      "fields": [
        "dispatch_address_name",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': ['!=', 'Paid'], 'dispatch_address_name': ['!=', '']}, fields=['dispatch_address_name', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List unique dispatch address names from invoices posted in May.",
      "fields": [
        "dispatch_address_name",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 5, 1)\nend = datetime.date(datetime.date.today().year, 5, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['dispatch_address_name'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were sent to the dispatch address 'Building 45, Doha'?",
      "fields": [
        "dispatch_address",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'dispatch_address': 'Building 45, Doha'}, fields=['dispatch_address', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with dispatch addresses containing the word 'Street'?",
      "fields": [
        "dispatch_address",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'dispatch_address': ['like', '%Street%']}, fields=['dispatch_address', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices do not have dispatch addresses filled?",
      "fields": [
        "dispatch_address"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'dispatch_address': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices in Q4 with dispatch addresses recorded?",
      "fields": [
        "dispatch_address",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 10, 1)\nend = datetime.date(datetime.date.today().year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'dispatch_address': ['!=', '']}, fields=['dispatch_address', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which POS invoices used dispatch addresses?",
      "fields": [
        "dispatch_address",
        "is_pos",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'dispatch_address': ['!=', '']}, fields=['dispatch_address', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Customers who received invoices at dispatch address containing 'Mall'?",
      "fields": [
        "customer",
        "dispatch_address"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'dispatch_address': ['like', '%Mall%']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any return invoices that had dispatch addresses?",
      "fields": [
        "is_return",
        "dispatch_address"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'dispatch_address': ['!=', '']}, fields=['is_return', 'dispatch_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices where dispatch address starts with 'Industrial Area'?",
      "fields": [
        "name",
        "dispatch_address"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'dispatch_address': ['like', 'Industrial Area%']}, fields=['name', 'dispatch_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with dispatch addresses recorded this week.",
      "fields": [
        "dispatch_address",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'dispatch_address': ['!=', '']}, fields=['dispatch_address', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices had dispatch addresses containing P.O. Box?",
      "fields": [
        "name",
        "dispatch_address"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'dispatch_address': ['like', '%P.O. Box%']}, fields=['name', 'dispatch_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices list the company address as 'Main Office - Doha'?",
      "fields": [
        "name",
        "company_address"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_address': 'Main Office - Doha'}, fields=['name', 'company_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with company addresses beginning with 'Block A'?",
      "fields": [
        "name",
        "company_address"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_address': ['like', 'Block A%']}, fields=['name', 'company_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices that don't have a company address listed.",
      "fields": [
        "name",
        "company_address"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_address': ''}, fields=['name', 'company_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all POS invoices with valid company addresses.",
      "fields": [
        "name",
        "company_address"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'company_address': ['!=', '']}, fields=['name', 'company_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices in Q1 used company addresses with 'Doha'?",
      "fields": [
        "name",
        "posting_date",
        "company_address"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'company_address': ['like', '%Doha%']}, fields=['name', 'company_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices with filled company address field?",
      "fields": [
        "name",
        "company_address"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'company_address': ['!=', '']}, fields=['name', 'company_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices from last month that include company addresses.",
      "fields": [
        "name",
        "company_address"
      ]
    },
    "output": "import datetime\nstart = (datetime.date.today().replace(day=1) - datetime.timedelta(days=1)).replace(day=1)\nend = datetime.date.today().replace(day=1) - datetime.timedelta(days=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'company_address': ['!=', '']}, fields=['name', 'company_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices using company addresses that contain 'Industrial Area'.",
      "fields": [
        "name",
        "company_address"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_address': ['like', '%Industrial Area%']}, fields=['name', 'company_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Customers billed from company address containing 'HQ Block C'?",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_address': ['like', '%HQ Block C%']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices issued in Q2 that mention any company address.",
      "fields": [
        "name",
        "company_address"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'company_address': ['!=', '']}, fields=['name', 'company_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have the company contact person listed as 'Sarah Al-Mansoori'?",
      "fields": [
        "company_contact_person",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_contact_person': 'Sarah Al-Mansoori'}, fields=['name', 'company_contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have the company contact person listed as 'Sarah Al-Mansoori'?",
      "fields": [
        "company_contact_person",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_contact_person': 'Sarah Al-Mansoori'}, fields=['name', 'company_contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with company contact persons starting with 'Mr.'",
      "fields": [
        "company_contact_person",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_contact_person': ['like', 'Mr.%']}, fields=['name', 'company_contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices where company contact person is not recorded.",
      "fields": [
        "company_contact_person",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_contact_person': ''}, fields=['name', 'company_contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices that contain a valid company contact person.",
      "fields": [
        "company_contact_person",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_contact_person': ['!=', '']}, fields=['name', 'company_contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices in Q1 included a company contact person?",
      "fields": [
        "posting_date",
        "company_contact_person"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.db.count('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'company_contact_person': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return all POS invoices with a company contact person set.",
      "fields": [
        "is_pos",
        "company_contact_person",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'company_contact_person': ['!=', '']}, fields=['name', 'company_contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with contact person 'Mohammed Ameen' from the company?",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_contact_person': 'Mohammed Ameen'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices from Q2 where company contact person contains 'Khalid'",
      "fields": [
        "posting_date",
        "company_contact_person",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'company_contact_person': ['like', '%Khalid%']}, fields=['name', 'company_contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any return invoices with a company contact person listed?",
      "fields": [
        "is_return",
        "company_contact_person",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'company_contact_person': ['!=', '']}, fields=['name', 'company_contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export all invoices this year with a filled company contact person field.",
      "fields": [
        "posting_date",
        "company_contact_person",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'company_contact_person': ['!=', '']}, fields=['name', 'company_contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices that ignored the default payment terms template.",
      "fields": [
        "ignore_default_payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'ignore_default_payment_terms_template': 1}, fields=['name', 'ignore_default_payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices followed default payment terms?",
      "fields": [
        "ignore_default_payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'ignore_default_payment_terms_template': 0}, fields=['name', 'ignore_default_payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices bypassed default payment terms this month?",
      "fields": [
        "posting_date",
        "ignore_default_payment_terms_template"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.db.count('Sales Invoice', filters={'posting_date': ['>=', start], 'ignore_default_payment_terms_template': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch POS invoices where default payment terms were ignored.",
      "fields": [
        "is_pos",
        "ignore_default_payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'ignore_default_payment_terms_template': 1}, fields=['name', 'ignore_default_payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which return invoices applied custom payment terms?",
      "fields": [
        "is_return",
        "ignore_default_payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'ignore_default_payment_terms_template': 1}, fields=['name', 'ignore_default_payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices from Q2 that ignored default payment terms.",
      "fields": [
        "posting_date",
        "ignore_default_payment_terms_template",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'ignore_default_payment_terms_template': 1}, fields=['name', 'ignore_default_payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all invoices with default payment terms applied.",
      "fields": [
        "ignore_default_payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'ignore_default_payment_terms_template': 0}, fields=['name', 'ignore_default_payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices issued today with custom payment terms.",
      "fields": [
        "posting_date",
        "ignore_default_payment_terms_template",
        "name"
      ]
    },
    "output": "import datetime\ntoday = datetime.date.today()\nfrappe.get_all('Sales Invoice', filters={'posting_date': today, 'ignore_default_payment_terms_template': 1}, fields=['name', 'ignore_default_payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all unpaid invoices where default terms were ignored.",
      "fields": [
        "status",
        "ignore_default_payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': ['!=', 'Paid'], 'ignore_default_payment_terms_template': 1}, fields=['name', 'ignore_default_payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with overridden payment terms?",
      "fields": [
        "customer",
        "ignore_default_payment_terms_template"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'ignore_default_payment_terms_template': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices are linked to the 'Net 30' payment terms template?",
      "fields": [
        "payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'payment_terms_template': 'Net 30'}, fields=['name', 'payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices created this month that used a payment terms template.",
      "fields": [
        "posting_date",
        "payment_terms_template",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'payment_terms_template': ['!=', '']}, fields=['name', 'payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices with specific payment terms applied.",
      "fields": [
        "is_return",
        "payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'payment_terms_template': ['!=', '']}, fields=['name', 'payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch POS invoices that used any payment terms template.",
      "fields": [
        "is_pos",
        "payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'payment_terms_template': ['!=', '']}, fields=['name', 'payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices don't have any payment terms assigned?",
      "fields": [
        "payment_terms_template"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'payment_terms_template': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices from Q1 with a valid payment terms template.",
      "fields": [
        "posting_date",
        "payment_terms_template",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'payment_terms_template': ['!=', '']}, fields=['name', 'payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices linked to the 'Advance Only' payment template?",
      "fields": [
        "payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'payment_terms_template': 'Advance Only'}, fields=['name', 'payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received invoices with the 'Partial 50%' terms?",
      "fields": [
        "customer",
        "payment_terms_template"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'payment_terms_template': 'Partial 50%'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Today’s invoices that used any payment terms?",
      "fields": [
        "posting_date",
        "payment_terms_template",
        "name"
      ]
    },
    "output": "import datetime\ntoday = datetime.date.today()\nfrappe.get_all('Sales Invoice', filters={'posting_date': today, 'payment_terms_template': ['!=', '']}, fields=['name', 'payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices with 'Net 60' payment terms this quarter.",
      "fields": [
        "posting_date",
        "payment_terms_template",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'payment_terms_template': 'Net 60'}, fields=['name', 'payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices include a payment schedule?",
      "fields": [
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'payment_schedule': ['!=', None]}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices that have payment schedules defined.",
      "fields": [
        "is_pos",
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'payment_schedule': ['!=', None]}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices from April with active payment schedules.",
      "fields": [
        "posting_date",
        "payment_schedule",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 4, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'payment_schedule': ['!=', None]}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices without any payment schedule.",
      "fields": [
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'payment_schedule': None}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices included payment schedules?",
      "fields": [
        "is_return",
        "payment_schedule"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'payment_schedule': ['!=', None]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List customers who had invoices with payment schedules.",
      "fields": [
        "customer",
        "payment_schedule"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'payment_schedule': ['!=', None]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with payment schedules and status Overdue?",
      "fields": [
        "status",
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': 'Overdue', 'payment_schedule': ['!=', None]}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices using payment schedules for Q2.",
      "fields": [
        "posting_date",
        "payment_schedule",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'payment_schedule': ['!=', None]}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Today’s invoices with defined payment schedules?",
      "fields": [
        "posting_date",
        "payment_schedule",
        "name"
      ]
    },
    "output": "import datetime\ntoday = datetime.date.today()\nfrappe.get_all('Sales Invoice', filters={'posting_date': today, 'payment_schedule': ['!=', None]}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which companies used payment schedules in May?",
      "fields": [
        "company",
        "payment_schedule",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 5, 1)\nend = datetime.date(datetime.date.today().year, 5, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'payment_schedule': ['!=', None]}, fields=['company'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices include a payment schedule?",
      "fields": [
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'payment_schedule': ['!=', None]}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices that have payment schedules defined.",
      "fields": [
        "is_pos",
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'payment_schedule': ['!=', None]}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices from April with active payment schedules.",
      "fields": [
        "posting_date",
        "payment_schedule",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 4, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'payment_schedule': ['!=', None]}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices without any payment schedule.",
      "fields": [
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'payment_schedule': None}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices included payment schedules?",
      "fields": [
        "is_return",
        "payment_schedule"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'payment_schedule': ['!=', None]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List customers who had invoices with payment schedules.",
      "fields": [
        "customer",
        "payment_schedule"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'payment_schedule': ['!=', None]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with payment schedules and status Overdue?",
      "fields": [
        "status",
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': 'Overdue', 'payment_schedule': ['!=', None]}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices using payment schedules for Q2.",
      "fields": [
        "posting_date",
        "payment_schedule",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'payment_schedule': ['!=', None]}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Today’s invoices with defined payment schedules?",
      "fields": [
        "posting_date",
        "payment_schedule",
        "name"
      ]
    },
    "output": "import datetime\ntoday = datetime.date.today()\nfrappe.get_all('Sales Invoice', filters={'posting_date': today, 'payment_schedule': ['!=', None]}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which companies used payment schedules in May?",
      "fields": [
        "company",
        "payment_schedule",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 5, 1)\nend = datetime.date(datetime.date.today().year, 5, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'payment_schedule': ['!=', None]}, fields=['company'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me all invoices that contain terms mentioning 'advance payment'.",
      "fields": [
        "terms",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'terms': ['like', '%advance payment%']}, fields=['terms', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have blank terms field?",
      "fields": [
        "terms",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'terms': ''}, fields=['name', 'terms'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List Q1 invoices that included custom terms and conditions.",
      "fields": [
        "terms",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'terms': ['!=', '']}, fields=['name', 'terms'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices with terms that reference 'net 30'.",
      "fields": [
        "terms",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'terms': ['like', '%net 30%']}, fields=['terms', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices do not have any terms specified?",
      "fields": [
        "terms"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'terms': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get return invoices with some terms content included.",
      "fields": [
        "is_return",
        "terms"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'terms': ['!=', '']}, fields=['is_return', 'terms'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices that included terms this month?",
      "fields": [
        "customer"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'terms': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where terms field contains Arabic text.",
      "fields": [
        "terms",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'terms': ['like', '%مرحبا%']}, fields=['name', 'terms'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices that had terms mentioned.",
      "fields": [
        "is_pos",
        "terms",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'terms': ['!=', '']}, fields=['name', 'terms'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices created today include any terms?",
      "fields": [
        "posting_date",
        "terms",
        "name"
      ]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'terms': ['!=', '']}, fields=['name', 'terms'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that include customer PO details mentioning 'PO-456'.",
      "fields": [
        "customer_po_details",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer_po_details': ['like', '%PO-456%']}, fields=['name', 'customer_po_details'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were submitted without any customer PO details?",
      "fields": [
        "customer_po_details",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer_po_details': ''}, fields=['name', 'customer_po_details'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show Q2 invoices where customer PO info is present.",
      "fields": [
        "customer_po_details",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'customer_po_details': ['!=', '']}, fields=['name', 'customer_po_details'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get return invoices with filled-in customer PO details.",
      "fields": [
        "is_return",
        "customer_po_details"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'customer_po_details': ['!=', '']}, fields=['is_return', 'customer_po_details'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many POS invoices had customer PO data?",
      "fields": [
        "customer_po_details"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_pos': 1, 'customer_po_details': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where customer PO info includes 'QTR2025'.",
      "fields": [
        "customer_po_details",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer_po_details': ['like', '%QTR2025%']}, fields=['name', 'customer_po_details'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices created this week with PO references.",
      "fields": [
        "customer_po_details",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\ntoday = datetime.date.today()\nstart = today - datetime.timedelta(days=today.weekday())\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'customer_po_details': ['!=', '']}, fields=['name', 'customer_po_details'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with customer PO info this month?",
      "fields": [
        "customer"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'customer_po_details': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do any invoices have PO details referencing 'Urgent'?",
      "fields": [
        "customer_po_details"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'customer_po_details': ['like', '%Urgent%']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices today with customer PO details not empty.",
      "fields": [
        "customer_po_details",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'customer_po_details': ['!=', '']}, fields=['name', 'customer_po_details'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with PO numbers starting with 'PO-100'.",
      "fields": [
        "po_no",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'po_no': ['like', 'PO-100%']}, fields=['name', 'po_no'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were submitted without a PO number?",
      "fields": [
        "po_no",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'po_no': ''}, fields=['name', 'po_no'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices from this year with valid PO numbers?",
      "fields": [
        "po_no",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'po_no': ['!=', '']}, fields=['name', 'po_no'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "POS invoices with PO number available?",
      "fields": [
        "is_pos",
        "po_no",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'po_no': ['!=', '']}, fields=['name', 'po_no'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices contain a PO number?",
      "fields": [
        "is_return",
        "po_no"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'po_no': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices where PO number includes 'ORDER-5000'.",
      "fields": [
        "po_no",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'po_no': ['like', '%ORDER-5000%']}, fields=['name', 'po_no'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with missing or empty PO numbers.",
      "fields": [
        "po_no",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'po_no': ''}, fields=['name', 'po_no'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with any PO number this month?",
      "fields": [
        "customer"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'po_no': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices sent with PO numbers containing 'Urgent' label?",
      "fields": [
        "po_no",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'po_no': ['like', '%Urgent%']}, fields=['name', 'po_no'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices created today with PO number filled in.",
      "fields": [
        "po_no",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'po_no': ['!=', '']}, fields=['name', 'po_no'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices include additional details mentioning 'urgent delivery'?",
      "fields": [
        "more_info",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'more_info': ['like', '%urgent delivery%']}, fields=['name', 'more_info'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices created this month with non-empty more info fields.",
      "fields": [
        "more_info",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'more_info': ['!=', '']}, fields=['name', 'more_info'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return POS invoices with extra information recorded.",
      "fields": [
        "is_pos",
        "more_info",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'more_info': ['!=', '']}, fields=['name', 'more_info'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices containing 'VAT exempt' in their more info section.",
      "fields": [
        "more_info",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'more_info': ['like', '%VAT exempt%']}, fields=['name', 'more_info'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices that included any more info notes.",
      "fields": [
        "is_return",
        "more_info"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'more_info': ['!=', '']}, fields=['is_return', 'more_info'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have no additional information mentioned?",
      "fields": [
        "more_info"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'more_info': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which Q4 invoices contained any note in more_info?",
      "fields": [
        "more_info",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 10, 1)\nend = datetime.date(datetime.date.today().year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'more_info': ['!=', '']}, fields=['name', 'more_info'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices with 'Delivered by hand' mentioned in the more_info field.",
      "fields": [
        "more_info",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'more_info': ['like', '%Delivered by hand%']}, fields=['name', 'more_info'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices this week with notes in more_info?",
      "fields": [
        "more_info",
        "posting_date",
        "name"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'more_info': ['!=', '']}, fields=['name', 'more_info'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List customers who had invoices with anything mentioned in the more_info field.",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'more_info': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices posted to the 'Debtors - HTS' account.",
      "fields": [
        "name",
        "debit_to"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'debit_to': 'Debtors - HTS'}, fields=['name', 'debit_to'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were posted to any account starting with 'Debtors'?",
      "fields": [
        "name",
        "debit_to"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'debit_to': ['like', 'Debtors%']}, fields=['name', 'debit_to'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where the debit_to account is set.",
      "fields": [
        "name",
        "debit_to"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'debit_to': ['!=', '']}, fields=['debit_to', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where the debit account is not set.",
      "fields": [
        "name",
        "debit_to"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'debit_to': ''}, fields=['name', 'debit_to'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch all invoices created this quarter with debit_to value filled.",
      "fields": [
        "name",
        "debit_to"
      ]
    },
    "output": "import datetime\nfrom datetime import date\nmonth = date.today().month\nquarter = ((month - 1) // 3 + 1)\nstart = datetime.date(date.today().year, 3 * quarter - 2, 1)\nend = datetime.date(date.today().year, 3 * quarter + 1, 0)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'debit_to': ['!=', '']}, fields=['name', 'debit_to'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices where debit_to account is 'Accounts Receivable - HTS'?",
      "fields": [
        "debit_to"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'debit_to': 'Accounts Receivable - HTS'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices with non-empty debit_to account.",
      "fields": [
        "is_return",
        "debit_to"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'debit_to': ['!=', '']}, fields=['is_return', 'debit_to'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices this month use any debit_to account?",
      "fields": [
        "debit_to"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.db.count('Sales Invoice', filters={'posting_date': ['>=', start], 'debit_to': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which companies posted invoices to 'Receivables - HTS'?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'debit_to': 'Receivables - HTS'}, fields=['company'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices today with valid debit_to accounts?",
      "fields": [
        "name",
        "debit_to"
      ]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'debit_to': ['!=', '']}, fields=['name', 'debit_to'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices made in QAR currency.",
      "fields": [
        "name",
        "party_account_currency"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'party_account_currency': 'QAR'}, fields=['name', 'party_account_currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have party account currency set to USD?",
      "fields": [
        "name",
        "party_account_currency"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'party_account_currency': 'USD'}, fields=['name', 'party_account_currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with non-empty party account currency field.",
      "fields": [
        "name",
        "party_account_currency"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'party_account_currency': ['!=', '']}, fields=['name', 'party_account_currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which POS invoices were recorded in foreign currency?",
      "fields": [
        "name",
        "party_account_currency"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'party_account_currency': ['!=', 'QAR']}, fields=['name', 'party_account_currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices created this month with party currency set.",
      "fields": [
        "name",
        "party_account_currency"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'party_account_currency': ['!=', '']}, fields=['name', 'party_account_currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices using USD as party currency.",
      "fields": [
        "name",
        "party_account_currency"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'party_account_currency': 'USD'}, fields=['name', 'party_account_currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoice using currency code like 'EUR%'?",
      "fields": [
        "party_account_currency"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'party_account_currency': ['like', 'EUR%']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get list of companies who issued invoices in USD.",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'party_account_currency': 'USD'}, fields=['company'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count how many invoices were issued with no party currency.",
      "fields": [
        "party_account_currency"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'party_account_currency': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices today in QAR currency?",
      "fields": [
        "name",
        "party_account_currency"
      ]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'party_account_currency': 'QAR'}, fields=['name', 'party_account_currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices that are marked as opening balances.",
      "fields": [
        "name",
        "is_opening"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_opening': 'Yes'}, fields=['name', 'is_opening'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices flagged as opening?",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_opening': 'Yes'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices that are not marked as opening.",
      "fields": [
        "name",
        "is_opening"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_opening': 'No'}, fields=['name', 'is_opening'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any opening invoices created this month?",
      "fields": [
        "name",
        "is_opening"
      ]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'is_opening': 'Yes', 'posting_date': ['>=', start]}, fields=['name', 'is_opening'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all POS invoices that are opening invoices.",
      "fields": [
        "name",
        "is_opening"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_opening': 'Yes', 'is_pos': 1}, fields=['name', 'is_opening'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count opening invoices for customer 'Al Rawabi'.",
      "fields": [
        "is_opening",
        "customer"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_opening': 'Yes', 'customer': 'Al Rawabi'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any opening invoices posted today?",
      "fields": [
        "name",
        "is_opening"
      ]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'is_opening': 'Yes', 'posting_date': datetime.date.today()}, fields=['name', 'is_opening'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which companies generated opening invoices in Q1?",
      "fields": [
        "company"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'is_opening': 'Yes', 'posting_date': ['between', [start, end]]}, fields=['company'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do any return invoices have is_opening marked?",
      "fields": [
        "name",
        "is_opening"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'is_opening': 'Yes'}, fields=['name', 'is_opening'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export names of invoices not marked as opening.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_opening': 'No'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices specify an unrealized profit/loss account?",
      "fields": [
        "name",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'unrealized_profit_loss_account': ['!=', '']}, fields=['name', 'unrealized_profit_loss_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where unrealized profit/loss account is not set.",
      "fields": [
        "name",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'unrealized_profit_loss_account': ''}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices posted this year with a specified unrealized P/L account?",
      "fields": [
        "name",
        "unrealized_profit_loss_account",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'unrealized_profit_loss_account': ['!=', '']}, fields=['name', 'unrealized_profit_loss_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices linked to 'Exchange Diff Account - UAE'.",
      "fields": [
        "name",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'unrealized_profit_loss_account': 'Exchange Diff Account - UAE'}, fields=['name', 'unrealized_profit_loss_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "POS invoices with unrealized profit/loss account recorded?",
      "fields": [
        "name",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'unrealized_profit_loss_account': ['!=', '']}, fields=['name', 'unrealized_profit_loss_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices have non-empty unrealized P/L account?",
      "fields": [
        "is_return",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'unrealized_profit_loss_account': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoice numbers for Q2 with unrealized profit/loss account set.",
      "fields": [
        "name",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'unrealized_profit_loss_account': ['!=', '']}, fields=['name', 'unrealized_profit_loss_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List companies with invoices referencing unrealized profit/loss accounts.",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'unrealized_profit_loss_account': ['!=', '']}, fields=['company'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices tagged with any unrealized P/L account from last month.",
      "fields": [
        "name",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "import datetime\nfrom dateutil.relativedelta import relativedelta\ntoday = datetime.date.today()\nstart = (today.replace(day=1) - relativedelta(months=1))\nend = today.replace(day=1) - datetime.timedelta(days=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'unrealized_profit_loss_account': ['!=', '']}, fields=['name', 'unrealized_profit_loss_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do invoices from Al Maktoum Ltd. include unrealized profit/loss accounts?",
      "fields": [
        "name",
        "unrealized_profit_loss_account",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Al Maktoum Ltd.', 'unrealized_profit_loss_account': ['!=', '']}, fields=['name', 'unrealized_profit_loss_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices mention an against income account?",
      "fields": [
        "name",
        "against_income_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'against_income_account': ['!=', '']}, fields=['name', 'against_income_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with no against income account linked.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'against_income_account': ''}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all Q2 invoices using an against income account.",
      "fields": [
        "name",
        "against_income_account",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'against_income_account': ['!=', '']}, fields=['name', 'against_income_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices are tagged with 'Sales - UAE' as the against income account?",
      "fields": [
        "name",
        "against_income_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'against_income_account': 'Sales - UAE'}, fields=['name', 'against_income_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any return invoices having an against income account?",
      "fields": [
        "name",
        "against_income_account",
        "is_return"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'against_income_account': ['!=', '']}, fields=['name', 'against_income_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices where against income account was assigned.",
      "fields": [
        "name",
        "against_income_account",
        "is_pos"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'against_income_account': ['!=', '']}, fields=['name', 'against_income_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices from March had against income accounts?",
      "fields": [
        "against_income_account",
        "posting_date"
      ]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 3, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.db.count('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'against_income_account': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export customer list who had invoices with against income account set.",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'against_income_account': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices using any income account starting with 'Sales%'?",
      "fields": [
        "name",
        "against_income_account"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'against_income_account': ['like', 'Sales%']}, fields=['name', 'against_income_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which companies posted invoices with against income accounts last month?",
      "fields": [
        "company"
      ]
    },
    "output": "import datetime\nfrom dateutil.relativedelta import relativedelta\ntoday = datetime.date.today()\nstart = today.replace(day=1) - relativedelta(months=1)\nend = today.replace(day=1) - datetime.timedelta(days=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'against_income_account': ['!=', '']}, fields=['company'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with sales partner assigned.",
      "fields": [
        "name",
        "sales_partner"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sales_partner': ['!=', '']}, fields=['name', 'sales_partner'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where the sales partner is not specified.",
      "fields": [
        "name",
        "sales_partner"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sales_partner': ['=', '']}, fields=['name', 'sales_partner'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have a specific sales partner 'Dapple & Ore Corp'?",
      "fields": [
        "name",
        "sales_partner"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sales_partner': 'Dapple & Ore Corp'}, fields=['name', 'sales_partner'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with sales partner and their posting dates.",
      "fields": [
        "name",
        "sales_partner",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sales_partner': ['!=', '']}, fields=['name', 'sales_partner', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Display invoices by sales partner for a particular company.",
      "fields": [
        "name",
        "sales_partner",
        "company"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sales_partner': ['!=', ''], 'company': 'XYZ Ltd'}, fields=['name', 'sales_partner', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices that have any sales partner assigned.",
      "fields": [
        "sales_partner"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'sales_partner': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices and their customers for a Tin Lantern Syndicate.",
      "fields": [
        "name",
        "customer",
        "sales_partner"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sales_partner': 'Tin Lantern Syndicate Corp'}, fields=['name', 'customer', 'sales_partner'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with sales partner, sorted by posting date.",
      "fields": [
        "name",
        "sales_partner",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sales_partner': ['!=', '']}, fields=['name', 'sales_partner', 'posting_date'], order_by='posting_date')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which warehouses are active and associated with 'ERPGulf LLC'?",
      "fields": [
        "warehouse_name",
        "disabled",
        "company"
      ]
    },
    "output": "frappe.db.get_all('Warehouse', filters={'disabled': 0, 'company': 'ERPGulf LLC'}, fields=['warehouse_name', 'disabled', 'company'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Give me all warehouses that store rejected goods.",
      "fields": [
        "warehouse_name",
        "is_rejected_warehouse"
      ]
    },
    "output": "frappe.db.get_all('Warehouse', filters={'is_rejected_warehouse': 1}, fields=['warehouse_name', 'is_rejected_warehouse'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Hey, can you show me the list of our main warehouses under Nimbus & Co Corp?",
      "fields": [
        "warehouse_name",
        "company"
      ]
    },
    "output": "frappe.db.get_all('Warehouse', filters={'company': 'Nimbus & Co Corp'}, fields=['warehouse_name', 'company'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "List all non-group warehouses in Qatar with an email assigned.",
      "fields": [
        "warehouse_name",
        "is_group",
        "email_id"
      ]
    },
    "output": "frappe.db.get_all('Warehouse', filters={'is_group': 0, 'email_id': ['!=', '']}, fields=['warehouse_name', 'is_group', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which company has the most number of warehouses?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql('SELECT company, COUNT(*) as total FROM `tabWarehouse` GROUP BY company ORDER BY total DESC LIMIT 1')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which warehouses were added this year?",
      "fields": [
        "warehouse_name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('SELECT warehouse_name, creation FROM `tabWarehouse` WHERE YEAR(creation) = YEAR(CURDATE())')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "List all warehouses with email and phone number details included.",
      "fields": [
        "warehouse_name",
        "email_id",
        "phone_no"
      ]
    },
    "output": "frappe.db.get_all('Warehouse', fields=['warehouse_name', 'email_id', 'phone_no'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which warehouses in Qatar have both mobile and landline numbers?",
      "fields": [
        "warehouse_name",
        "country",
        "mobile_no",
        "phone_no"
      ]
    },
    "output": "frappe.db.get_all('arehouse', filters={'mobile_no': ['!=', ''], 'phone_no': ['!=', ''], 'address_line_1': ['like', '%Qatar%']}, fields=['warehouse_name', 'mobile_no', 'phone_no'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "What are the names and cities of all transit warehouses?",
      "fields": [
        "warehouse_name",
        "city",
        "default_in_transit_warehouse"
      ]
    },
    "output": "frappe.db.get_all('Warehouse', filters={'default_in_transit_warehouse': ['!=', '']}, fields=['warehouse_name', 'city'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Find disabled group warehouses that belong to the company 'TechPro Inc.'",
      "fields": [
        "warehouse_name",
        "is_group",
        "disabled",
        "company"
      ]
    },
    "output": "frappe.db.get_all('Warehouse', filters={'disabled': 1, 'is_group': 1, 'company': 'TechPro Inc.'}, fields=['warehouse_name', 'company'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which warehouses have no contact details and are marked as rejected warehouses?",
      "fields": [
        "warehouse_name",
        "is_rejected_warehouse",
        "email_id",
        "phone_no",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''\n            SELECT warehouse_name FROM `tabWarehouse`\n            WHERE is_rejected_warehouse = 1\n              AND (email_id IS NULL OR email_id = '')\n              AND (phone_no IS NULL OR phone_no = '')\n              AND (mobile_no IS NULL OR mobile_no = '')\n        ''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Show me all warehouses created this year for 'FutureTech Ltd.'",
      "fields": [
        "warehouse_name",
        "creation",
        "company"
      ]
    },
    "output": "frappe.db.sql('''\n            SELECT warehouse_name, creation FROM `tabWarehouse`\n            WHERE company = 'FutureTech Ltd.' AND YEAR(creation) = YEAR(CURDATE())\n        ''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which company operates the largest number of active warehouses?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql('''\n            SELECT company, COUNT(*) as total FROM `tabWarehouse`\n            WHERE disabled = 0 GROUP BY company ORDER BY total DESC LIMIT 1\n        ''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "List all warehouse addresses in Doha.",
      "fields": [
        "warehouse_name",
        "address_line_1",
        "address_line_2",
        "city"
      ]
    },
    "output": "frappe.db.get_all('Warehouse', filters={'city': 'Doha'}, fields=['warehouse_name', 'address_line_1', 'address_line_2', 'city'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which warehouses in Doha are currently disabled and linked to 'ZahraGate'?",
      "fields": [
        "city",
        "disabled",
        "company"
      ]
    },
    "output": "frappe.db.get_all('Warehouse', filters={'city': 'Doha', 'disabled': 1, 'company': 'ZahraGate'}, fields=['name', 'city', 'company', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "List all rejected warehouses and their parent warehouse details.",
      "fields": [
        "is_rejected_warehouse",
        "parent_warehouse"
      ]
    },
    "output": "frappe.db.get_all('Warehouse', filters={'is_rejected_warehouse': 1}, fields=['name', 'is_rejected_warehouse', 'parent_warehouse'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Give me the phone numbers of all warehouses that are not disabled.",
      "fields": [
        "disabled",
        "phone_no"
      ]
    },
    "output": "frappe.db.get_all('Warehouse', filters={'disabled': 0}, fields=['name', 'phone_no'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which warehouse types have the highest number of active warehouses?",
      "fields": [
        "warehouse_type",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT warehouse_type, COUNT(*) as total \nFROM `tabWarehouse`\nWHERE disabled = 0\nGROUP BY warehouse_type\nORDER BY total DESC\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Compare the count of group vs non-group warehouses for Company X.",
      "fields": [
        "is_group",
        "company"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT is_group, COUNT(*) as count\nFROM `tabWarehouse`\nWHERE company = 'Company X'\nGROUP BY is_group\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Show me all warehouses added in the last 90 days.",
      "fields": [
        "creation"
      ]
    },
    "output": "frappe.db.get_all('Warehouse', filters={'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -90)]}, fields=['name', 'creation'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "List all warehouses along with their city and pin code.",
      "fields": [
        "city",
        "pin"
      ]
    },
    "output": "frappe.db.get_all('Warehouse', fields=['name', 'city', 'pin'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "What is the email and phone contact of 'Central Spare Warehouse'?",
      "fields": [
        "email_id",
        "phone_no"
      ]
    },
    "output": "frappe.db.get_value('Warehouse', {'warehouse_name': 'Central Spare Warehouse'}, ['email_id', 'phone_no'], as_dict=True)"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which warehouse had the highest number of stock movements in the last quarter?",
      "fields": [
        "warehouse_name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''\nSELECT warehouse, COUNT(*) as movement_count\nFROM `tabStock Ledger Entry`\nWHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\nGROUP BY warehouse\nORDER BY movement_count DESC\nLIMIT 1\n''')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "List all active warehouses that are not marked as groups and belong to 'RetailCo'.",
      "fields": [
        "warehouse_name",
        "disabled",
        "is_group",
        "company"
      ]
    },
    "output": "frappe.db.get_all('Warehouse', filters={'disabled': 0, 'is_group': 0, 'company': 'RetailCo'}, fields=['warehouse_name', 'company'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "What are the parent-child relationships among warehouses under 'Main Warehouse'?",
      "fields": [
        "warehouse_name",
        "parent_warehouse"
      ]
    },
    "output": "frappe.db.get_all('Warehouse', filters={'parent_warehouse': 'Main Warehouse'}, fields=['warehouse_name', 'parent_warehouse'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which warehouses were created in the last 60 days?",
      "fields": [
        "warehouse_name",
        "creation"
      ]
    },
    "output": "frappe.db.get_all('Warehouse', filters={'creation': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -60)]}, fields=['warehouse_name', 'creation'])"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Compare the number of disabled vs enabled warehouses.",
      "fields": [
        "disabled"
      ]
    },
    "output": "frappe.db.sql('SELECT disabled, COUNT(*) as total FROM `tabWarehouse` GROUP BY disabled')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Show me warehouses grouped by type for company 'XYZ Ltd'.",
      "fields": [
        "warehouse_type",
        "company"
      ]
    },
    "output": "frappe.db.sql('SELECT warehouse_type, COUNT(*) as count FROM `tabWarehouse` WHERE company = 'XYZ Ltd' GROUP BY warehouse_type')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "List all warehouses that are not in transit or rejected warehouses.",
      "fields": [
        "warehouse_name",
        "default_in_transit_warehouse",
        "is_rejected_warehouse"
      ]
    },
    "output": "frappe.db.sql('SELECT warehouse_name FROM `tabWarehouse` WHERE (is_rejected_warehouse = 0 OR is_rejected_warehouse IS NULL) AND (default_in_transit_warehouse IS NULL OR default_in_transit_warehouse = '')')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Which cities have the most warehouse branches?",
      "fields": [
        "city"
      ]
    },
    "output": "frappe.db.sql('SELECT city, COUNT(*) as count FROM `tabWarehouse` WHERE city IS NOT NULL AND city != '' GROUP BY city ORDER BY count DESC')"
  },
  {
    "input": {
      "doctype": "Warehouse",
      "question": "Show all warehouse names and their parent warehouses.",
      "fields": [
        "warehouse_name",
        "parent_warehouse"
      ]
    },
    "output": "frappe.db.get_all('Warehouse', fields=['warehouse_name', 'parent_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where sales partner is not set and company is 'XYZ Ltd'.",
      "fields": [
        "name",
        "sales_partner",
        "company"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sales_partner': ['=', ''], 'company': 'XYZ Ltd'}, fields=['name', 'sales_partner', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices with sales partner and their status.",
      "fields": [
        "name",
        "sales_partner",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sales_partner': ['!=', '']}, fields=['name', 'sales_partner', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with non-zero amount eligible for commission.",
      "fields": [
        "name",
        "amount_eligible_for_commission"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'amount_eligible_for_commission': ['>', 0]}, fields=['name', 'amount_eligible_for_commission'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where amount eligible for commission is greater than $1000.",
      "fields": [
        "name",
        "amount_eligible_for_commission"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'amount_eligible_for_commission': ['>', 1000]}, fields=['name', 'amount_eligible_for_commission'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have a specific amount eligible for commission, e.g., $500?",
      "fields": [
        "name",
        "amount_eligible_for_commission"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'amount_eligible_for_commission': 500}, fields=['name', 'amount_eligible_for_commission'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with their amount eligible for commission and posting date.",
      "fields": [
        "name",
        "amount_eligible_for_commission",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'amount_eligible_for_commission': ['>', 0]}, fields=['name', 'amount_eligible_for_commission', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Display invoices by sales partner and their amount eligible for commission.",
      "fields": [
        "name",
        "sales_partner",
        "amount_eligible_for_commission"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'amount_eligible_for_commission': ['>', 0]}, fields=['name', 'sales_partner', 'amount_eligible_for_commission'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices with amount eligible for commission above $1500.",
      "fields": [
        "amount_eligible_for_commission"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'amount_eligible_for_commission': ['>', 1500]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices and their customer for invoices with amount eligible for commission between $200 and $1000.",
      "fields": [
        "name",
        "customer",
        "amount_eligible_for_commission"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'amount_eligible_for_commission': ['between', [200, 1000]]}, fields=['name', 'customer', 'amount_eligible_for_commission'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with amount eligible for commission and their commission rate.",
      "fields": [
        "name",
        "amount_eligible_for_commission",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'amount_eligible_for_commission': ['>', 0]}, fields=['name', 'amount_eligible_for_commission', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where amount eligible for commission is non-zero and sales partner is 'ABC Corp'.",
      "fields": [
        "name",
        "sales_partner",
        "amount_eligible_for_commission"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'amount_eligible_for_commission': ['>', 0], 'sales_partner': 'ABC Corp'}, fields=['name', 'sales_partner', 'amount_eligible_for_commission'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices with amount eligible for commission and their customer name.",
      "fields": [
        "name",
        "customer",
        "amount_eligible_for_commission"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'amount_eligible_for_commission': ['>', 0]}, fields=['name', 'customer', 'amount_eligible_for_commission'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with a commission rate set.",
      "fields": [
        "name",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'commission_rate': ['!=', 0]}, fields=['name', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with commission rate greater than 5%.",
      "fields": [
        "name",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'commission_rate': ['>', 5]}, fields=['name', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have a specific commission rate, e.g., 7%?",
      "fields": [
        "name",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'commission_rate': 7}, fields=['name', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with their commission rate and posting date.",
      "fields": [
        "name",
        "commission_rate",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'commission_rate': ['!=', 0]}, fields=['name', 'commission_rate', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Display invoices by sales partner and their commission rate.",
      "fields": [
        "name",
        "sales_partner",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'commission_rate': ['!=', 0]}, fields=['name', 'sales_partner', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices with commission rate above 10%.",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'commission_rate': ['>', 10]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices and their customer for invoices with commission rate between 3% and 8%.",
      "fields": [
        "name",
        "customer",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'commission_rate': ['between', [3, 8]]}, fields=['name', 'customer', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with commission rate and their amount eligible for commission.",
      "fields": [
        "name",
        "commission_rate",
        "amount_eligible_for_commission"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'commission_rate': ['!=', 0]}, fields=['name', 'commission_rate', 'amount_eligible_for_commission'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where commission rate is non-zero and sales partner is 'ABC Corp'.",
      "fields": [
        "name",
        "sales_partner",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'commission_rate': ['!=', 0], 'sales_partner': 'ABC Corp'}, fields=['name', 'sales_partner', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices with commission rate and their customer name.",
      "fields": [
        "name",
        "customer",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'commission_rate': ['!=', 0]}, fields=['name', 'customer', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with a total commission set.",
      "fields": [
        "name",
        "total_commission"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_commission': ['!=', 0]}, fields=['name', 'total_commission'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with total commission greater than $200.",
      "fields": [
        "name",
        "total_commission"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_commission': ['>', 200]}, fields=['name', 'total_commission'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have a specific total commission, e.g., $500?",
      "fields": [
        "name",
        "total_commission"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_commission': 500}, fields=['name', 'total_commission'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with their total commission and sales partner.",
      "fields": [
        "name",
        "total_commission",
        "sales_partner"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_commission': ['!=', 0]}, fields=['name', 'total_commission', 'sales_partner'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Display invoices by sales partner and their total commission.",
      "fields": [
        "name",
        "sales_partner",
        "total_commission"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_commission': ['!=', 0]}, fields=['name', 'sales_partner', 'total_commission'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices with total commission above $300.",
      "fields": [
        "total_commission"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'total_commission': ['>', 300]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices and their customer for invoices with total commission between $100 and $500.",
      "fields": [
        "name",
        "customer",
        "total_commission"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_commission': ['between', [100, 500]]}, fields=['name', 'customer', 'total_commission'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with total commission and their amount eligible for commission.",
      "fields": [
        "name",
        "total_commission",
        "amount_commission"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_commission': ['!=', 0]}, fields=['name', 'total_commission', 'amount_eligible_for_commission'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where total commission is non-zero and sales partner is 'ABC Corp'.",
      "fields": [
        "name",
        "sales_partner",
        "total_commission"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_commission': ['!=', 0], 'sales_partner': 'ABC Corp'}, fields=['name', 'sales_partner', 'total_commission'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices with total commission and their customer name.",
      "fields": [
        "name",
        "customer",
        "total_commission"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_commission': ['!=', 0]}, fields=['name', 'customer', 'total_commission'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices assigned to any sales team.",
      "fields": [
        "name",
        "sales_team"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sales_team': ['!=', '']}, fields=['name', 'sales_team'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices not assigned to any sales team.",
      "fields": [
        "name",
        "sales_team"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sales_team': ['=', '']}, fields=['name', 'sales_team'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices are assigned to a specific sales team, e.g., 'West Region'?",
      "fields": [
        "name",
        "sales_team"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sales_team': 'West Region'}, fields=['name', 'sales_team'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with their sales team and customer.",
      "fields": [
        "name",
        "sales_team",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sales_team': ['!=', '']}, fields=['name', 'sales_team', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Display invoices by sales team and their posting date.",
      "fields": [
        "name",
        "sales_team",
        "posting_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sales_team': ['!=', '']}, fields=['name', 'sales_team', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices assigned to any sales team.",
      "fields": [
        "sales_team"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'sales_team': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices and their status for a specific sales team.",
      "fields": [
        "name",
        "sales_team",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sales_team': 'West Region'}, fields=['name', 'sales_team', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with sales team and sales partner.",
      "top_fields": [
        "sales_team",
        "name",
        "sales_partner"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sales_team': ['!=', '']}, fields=['name', 'sales_team', 'sales_partner'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices assigned to a specific sales team and customer.",
      "top_fields": [
        "sales_team",
        "name",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sales_team': 'West Region', 'customer': 'ABC Corp'}, fields=['name', 'sales_team', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices with sales team and their posting date and status.",
      "top_fields": [
        "sales_team",
        "name",
        "posting_date",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sales_team': ['!=', '']}, fields=['name', 'sales_team', 'posting_date', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where edit printing settings is enabled.",
      "fields": [
        "name",
        "edit_printing_settings"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'edit_printing_settings': 1}, fields=['name', 'edit_printing_settings'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices with edit printing settings enabled.",
      "fields": [
        "edit_printing_settings"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'edit_printing_settings': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice has edit printing settings enabled.",
      "fields": [
        "edit_printing_settings"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'edit_printing_settings': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the value of edit printing settings for a specific invoice.",
      "fields": [
        "edit_printing_settings"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', 'SINV-0001', 'edit_printing_settings')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with edit printing settings enabled and their letter head.",
      "fields": [
        "name",
        "letter_head"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'edit_printing_settings': 1}, fields=['name', 'letter_head'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with edit printing settings enabled and their print heading.",
      "fields": [
        "name",
        "select_print_heading"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'edit_printing_settings': 1}, fields=['name', 'select_print_heading'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show a single invoice document with edit printing settings enabled.",
      "fields": [
        "name",
        "edit_printing_settings"
      ]
    },
    "output": "frappe.get_doc('Sales Invoice', {'edit_printing_settings': 1, 'name': ['like', '%SINV%']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with edit printing settings enabled and a specific status.",
      "fields": [
        "name",
        "status",
        "edit_printing_settings"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'edit_printing_settings': 1, 'status': 'Submitted'}, fields=['name', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if a specific invoice has edit printing settings enabled.",
      "fields": [
        "edit_printing_settings"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', 'SINV-0001', 'edit_printing_settings')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with edit printing settings enabled and their customer.",
      "fields": [
        "name",
        "customer",
        "edit_printing_settings"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'edit_printing_settings': 1}, fields=['name', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices using a specific letter head, e.g., 'Standard'.",
      "fields": [
        "name",
        "letter_head"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'letter_head': 'Standard'}, fields=['name', 'letter_head'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices using any letter head.",
      "fields": [
        "letter_head"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'letter_head': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice uses a specific letter head, e.g., 'Company'.",
      "fields": [
        "letter_head"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'letter_head': 'Company'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the value of letter head for a specific invoice.",
      "fields": [
        "letter_head"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', 'SINV-0001', 'letter_head')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with their letter head and customer.",
      "fields": [
        "name",
        "letter_head",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'letter_head': ['!=', '']}, fields=['name', 'letter_head', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with a specific letter head and their status.",
      "fields": [
        "name",
        "letter_head",
        "status"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'letter_head': 'Standard'}, fields=['name', 'letter_head', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show a single invoice document using a specific letter head.",
      "fields": [
        "name",
        "letter_head"
      ]
    },
    "output": "frappe.get_doc('Sales Invoice', {'letter_head': 'Standard', 'name': ['like', '%SINV%']}, fields=['name', 'letter_head'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with a specific letter head and a specific customer.",
      "fields": [
        "name",
        "letter_head",
        "customer"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'letter_head': 'Standard', 'customer': 'ABC Corp'}, fields=['name', 'letter_head', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with letter head and edit printing settings.",
      "fields": [
        "name",
        "letter_head",
        "edit_printing_settings"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'letter_head': ['!=', '']}, fields=['name', 'letter_head', 'edit_printing_settings'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if a specific invoice uses a specific letter head.",
      "fields": [
        "letter_head"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'letter_head': 'Standard'}, fields=['name', 'letter_head'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where group same items is enabled.",
      "fields": [
        "name",
        "group_same_items"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'group_same_items': 1}, fields=['name', 'group_same_items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices with group same items enabled.",
      "fields": [
        "group_same_items"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'group_same_items': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice has group same items enabled.",
      "fields": [
        "group_same_items"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'group_same_items': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the value of group same items for a specific invoice.",
      "fields": [
        "group_same_items"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', 'SINV-0001', 'group_same_items')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with group same items enabled and their customer.",
      "fields": [
        "name",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'group_same_items': 1}, fields=['name', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with group same items enabled and their letter head.",
      "fields": [
        "name",
        "letter_head"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'group_same_items': 1}, fields=['name', 'letter_head'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show a single invoice document with group same items enabled.",
      "fields": [
        "name",
        "group_same_items"
      ]
    },
    "output": "frappe.get_doc('Sales Invoice', {'group_same_items': 1, 'name': ['like', '%SINV%']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with group same items enabled and a specific customer.",
      "fields": [
        "name",
        "customer",
        "group_same_items"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'group_same_items': 1, 'customer': 'ABC Corp'}, fields=['name', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with group same items enabled and their edit printing settings.",
      "fields": [
        "name",
        "edit_printing_settings"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'group_same_items': 1}, fields=['name', 'edit_printing_settings'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if a specific invoice has group same items enabled.",
      "fields": [
        "name",
        "group_same_items"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'group_same_items': 1}, fields=['name', 'group_same_items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices using a specific print heading, e.g., 'Invoice'.",
      "fields": [
        "name",
        "select_print_heading"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'select_print_heading': 'Invoice'}, fields=['name', 'select_print_heading'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices using any print heading.",
      "fields": [
        "select_print_heading"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'select_print_heading': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice uses a specific print heading, e.g., 'Proforma'.",
      "fields": [
        "select_print_heading"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'select_print_heading': 'Proforma'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the value of select print heading for a specific invoice.",
      "fields": [
        "select_print_heading"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', 'SINV-0001', 'select_print_heading')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with their select print heading and customer.",
      "fields": [
        "name",
        "select_print_heading",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'select_print_heading': ['!=', '']}, fields=['name', 'select_print_heading', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with a specific print heading and their group same items setting.",
      "fields": [
        "name",
        "select_print_heading",
        "group_same_items"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'select_print_heading': 'Invoice'}, fields=['name', 'select_print_heading', 'group_same_items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show a single invoice document using a specific print heading.",
      "fields": [
        "name",
        "select_print_heading"
      ]
    },
    "output": "frappe.get_doc('Sales Invoice', {'select_print_heading': 'Invoice', 'name': ['like', '%SINV%']}, fields=['name', 'select_print_heading'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with a specific print heading and a specific customer.",
      "fields": [
        "name",
        "select_print_heading",
        "customer"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'select_print_heading': 'Invoice', 'customer': 'ABC Corp'}, fields=['name', 'select_print_heading', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with select print heading and edit printing settings.",
      "fields": [
        "name",
        "select_print_heading",
        "edit_printing_settings"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'select_print_heading': ['!=', '']}, fields=['name', 'select_print_heading', 'edit_printing_settings'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if a specific invoice uses a specific print heading.",
      "fields": [
        "select_print_heading",
        "name"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'select_print_heading': 'Invoice'}, fields=['name', 'select_print_heading'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices using a specific language, e.g., 'English'.",
      "fields": [
        "name",
        "language"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'language': 'English'}, fields=['name', 'language'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices using any language.",
      "fields": [
        "language"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'language': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice uses a specific language, e.g., 'French'.",
      "fields": [
        "language"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'language': 'French'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the value of language for a specific invoice.",
      "fields": [
        "language"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', 'SINV-0001', 'language')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with their language and customer.",
      "fields": [
        "name",
        "language",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'language': ['!=', '']}, fields=['name', 'language', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with a specific language and their status.",
      "fields": [
        "name",
        "language",
        "status"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'language': 'English'}, fields=['name', 'language', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show a single invoice document using a specific language.",
      "fields": [
        "name",
        "language"
      ]
    },
    "output": "frappe.get_doc('Sales Invoice', {'language': 'English', 'name': ['like', '%SINV%']}, fields=['name', 'language'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with a specific language and a specific customer.",
      "fields": [
        "name",
        "language",
        "customer"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'language': 'English', 'customer': 'ABC Corp'}, fields=['name', 'language', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with language and select print heading.",
      "fields": [
        "name",
        "language",
        "select_print_heading"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'language': ['!=', '']}, fields=['name', 'language', 'select_print_heading'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if a specific invoice uses a specific language.",
      "fields": [
        "language",
        "name"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'language': 'English'}, fields=['name', 'language'])'"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with a subscription set.",
      "fields": [
        "name",
        "subscription"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'subscription': ['!=', '']}, fields=['name', 'subscription'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices with a subscription.",
      "fields": [
        "subscription"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'subscription': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice has a specific subscription, e.g., 'SUB-0001'.",
      "fields": [
        "subscription"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'subscription': 'SUB-0001'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the value of subscription for a specific invoice.",
      "fields": [
        "subscription"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', 'SINV-0001', 'subscription')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with their subscription and customer.",
      "fields": [
        "name",
        "subscription",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'subscription': ['!=', '']}, fields=['name', 'subscription', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with a specific subscription and their status.",
      "fields": [
        "name",
        "subscription",
        "status"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'subscription': 'SUB-0001'}, fields=['name', 'subscription', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show a single invoice document with a subscription.",
      "fields": [
        "name",
        "subscription"
      ]
    },
    "output": "frappe.get_doc('Sales Invoice', {'subscription': ['!=', ''], 'name': ['like', '%SINV%']}, fields=['name', 'subscription'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with a specific subscription and a specific customer.",
      "fields": [
        "name",
        "subscription",
        "customer"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'subscription': 'SUB-0001', 'customer': 'ABC Corp'}, fields=['name', 'subscription', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with subscription and their language.",
      "fields": [
        "name",
        "subscription",
        "language"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'subscription': ['!=', '']}, fields=['name', 'subscription', 'language'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if a specific invoice has a specific subscription.",
      "fields": [
        "subscription"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'subscription': 'SUB-0001'}, fields=['name', 'subscription'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with a from date set.",
      "fields": [
        "name",
        "from_date"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'from_date': ['!=', None]}, fields=['name', 'from_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices with a from date after 2023-01-01.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'from_date': ['>', '2023-01-01']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice has a specific from date, e.g., '2024-01-01'.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'from_date': '2024-01-01')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the value of from date for a specific invoice.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', 'SINV-0001', 'from_date')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with their from date and customer.",
      "fields": [
        "name",
        "from_date",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'from_date': ['!=', None]}, fields=['name', 'from_date', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with a from date within a specific range, e.g., between 2023-01-01 and 2023-12-31.",
      "fields": [
        "name",
        "from_date"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'from_date': ['between', ['2023-01-01', '2023-12-31']]}, fields=['name', 'from_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show a single invoice document with a from date.",
      "fields": [
        "name",
        "from_date"
      ]
    },
    "output": "frappe.get_doc('Sales Invoice', {'from_date': ['!=', None], 'name': ['like', '%SINV%']}, fields=['name', 'from_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with a specific from date and a specific customer.",
      "fields": [
        "name",
        "from_date",
        "customer"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'from_date': '2024-01-01', 'customer': 'ABC Corp'}, fields=['name', 'from_date', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with from date and subscription.",
      "fields": [
        "name",
        "from_date",
        "subscription"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'from_date': ['!=', None]}, fields=['name', 'from_date', 'subscription'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if a specific invoice has a from date after 2023-01-01.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'from_date': ['>', '2023-01-01']}, fields=['name', 'from_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with a to date set.",
      "fields": [
        "name",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'to_date': ['!=', None]}, fields=['name', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices with a to date before 2024-12-31.",
      "fields": [
        "to_date"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'to_date': ['<', '2024-12-31']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice has a specific to date, e.g., '2024-06-30'.",
      "fields": [
        "to_date"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'to_date': '2024-06-30'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the value of to date for a specific invoice.",
      "fields": [
        "to_date"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', 'SINV-0001', 'to_date')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with their to date and customer.",
      "fields": [
        "name",
        "to_date",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'to_date': ['!=', None]}, fields=['name', 'to_date', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with a to date within a specific range, e.g., between 2023-01-01 and 2023-12-31.",
      "fields": [
        "name",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'to_date': ['between', ['2023-01-01', '2023-12-31']]}, fields=['name', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show a single invoice document with a to date.",
      "fields": [
        "name",
        "to_date"
      ]
    },
    "output": "frappe.get_doc('Sales Invoice', {'to_date': ['!=', None], 'name': ['like', '%SINV%']}, fields=['name', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with a specific to date and a specific customer.",
      "fields": [
        "name",
        "to_date",
        "customer"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'to_date': '2024-06-30', 'customer': 'ABC Corp'}, fields=['name', 'to_date', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with to date and auto repeat.",
      "fields": [
        "name",
        "to_date",
        "auto_repeat"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'to_date': ['!=', None], 'fields': ['name', 'to_date', 'auto_repeat']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if a specific invoice has a to date before 2024-12-31.",
      "fields": [
        "to_date"
      ]
    },
    "output": "frappe.db.get_list('Sales Invoice', filters={'to_date': ['<', '2024-12-31']}, fields=['name', 'to_date'])'"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with more information set.",
      "fields": [
        "name",
        "more_information"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'more_information': ['!=', '']}, fields=['name', 'more_information'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices with more information.",
      "fields": [
        "more_information"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'more_information': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice has more information set.",
      "fields": [
        "more_information"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'more_information': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the value of more information for a specific invoice.",
      "fields": [
        "more_information"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', 'SINV-0001', 'more_information')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with more information and update auto repeat reference.",
      "fields": [
        "name",
        "more_information",
        "update_auto_repeat_reference"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'more_information': ['!=', '']}, fields=['name', 'more_information', 'update_auto_repeat_reference'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with more information and their auto repeat.",
      "fields": [
        "name",
        "more_information",
        "auto_repeat"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'more_information': ['!=', '']}, fields=['name', 'more_information', 'auto_repeat'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show a single invoice document with more information.",
      "fields": [
        "name",
        "more_information"
      ]
    },
    "output": "frappe.get_doc('Sales Invoice', {'more_information': ['!=', ''], 'name': ['like', '%SINV%']}, fields=['name', 'more_information'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with more information and a specific auto repeat.",
      "fields": [
        "name",
        "more_information",
        "auto_repeat"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'more_information': ['!=', ''], 'auto_repeat': 'AUTOREP-0001'}, fields=['name', 'more_information', 'auto_repeat'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with more information and their to date.",
      "fields": [
        "name",
        "more_information",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'more_information': ['!=', '']}, fields=['name', 'more_information', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if a specific invoice has more information set.",
      "fields": [
        "more_information"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'more_information': ['!=', '']}, fields=['name', 'more_information'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with a specific status, e.g., 'Submitted'.",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'status': 'Submitted'}, fields=['name', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices with status 'Draft'.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'status': 'Draft'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice has status 'Cancelled'.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'status': 'Cancelled'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the value of status for a specific invoice.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', 'SINV-0001', 'status')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with status 'Submitted' and customer.",
      "fields": [
        "name",
        "status",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': 'Submitted'}, fields=['name', 'status', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with status 'Paid' and their to date.",
      "fields": [
        "name",
        "status",
        "to_date"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'status': 'Paid'}, fields=['name', 'status', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show a single invoice document with status 'Submitted'.",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.get_doc('Sales Invoice', {'status': 'Submitted', 'name': ['like', '%SINV%']}, fields=['name', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with status 'Submitted' and a specific auto repeat.",
      "fields": [
        "name",
        "status",
        "auto_repeat"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'status': 'Submitted', 'auto_repeat': 'AUTOREP-0001'}, fields=['name', 'status', 'auto_repeat'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with status 'Paid' and more information.",
      "fields": [
        "name",
        "status",
        "more_information"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': 'Paid'}, fields=['name', 'status', 'more_information'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if a specific invoice has status 'Submitted'.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'status': 'Submitted'}, fields=['name', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with an inter company invoice reference set.",
      "fields": [
        "name",
        "inter_company_invoice_reference"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'inter_company_invoice_reference': ['!=', '']}, fields=['name', 'inter_company_invoice_reference'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices with an inter company invoice reference.",
      "fields": [
        "inter_company_invoice_reference"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'inter_company_invoice_reference': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice has a specific inter company invoice reference, e.g., 'PUR-0001'.",
      "fields": [
        "inter_company_invoice_reference"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'inter_company_invoice_reference': 'PUR-0001'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the value of inter company invoice reference for a specific invoice.",
      "fields": [
        "inter_company_invoice_reference"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', 'SINV-0001', 'inter_company_invoice_reference')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with inter company invoice reference and status.",
      "fields": [
        "name",
        "inter_company_invoice_reference",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'inter_company_invoice_reference': ['!=', '']}, fields=['name', 'inter_company_invoice_reference', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with inter company invoice reference and more information.",
      "fields": [
        "name",
        "inter_company_invoice_reference",
        "more_information"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'inter_company_invoice_reference': ['!=', '']}, fields=['name', 'inter_company_invoice_reference', 'more_information'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show a single invoice document with inter company invoice reference.",
      "fields": [
        "name",
        "inter_company_invoice_reference"
      ]
    },
    "output": "frappe.get_doc('Sales Invoice', {'inter_company_invoice_reference': ['!=', ''], 'name': ['like', '%SINV%']}, fields=['name', 'inter_company_invoice_reference'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with inter company invoice reference and a specific status.",
      "fields": [
        "name",
        "inter_company_invoice_reference",
        "status"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'inter_company_invoice_reference': ['!=', ''], 'status': 'Submitted'}, fields=['name', 'inter_company_invoice_reference', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with inter company invoice reference and their update auto repeat reference.",
      "fields": [
        "name",
        "inter_company_invoice_reference",
        "update_auto_repeat_reference"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'inter_company_invoice_reference': ['!=', '']}, fields=['name', 'inter_company_invoice_reference', 'update_auto_repeat_reference'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if a specific invoice has an inter company invoice reference.",
      "fields": [
        "inter_company_invoice_reference"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'inter_company_invoice_reference': ['!=', '']}, fields=['name', 'inter_company_invoice_reference'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices linked to a specific campaign, e.g., 'CAM-0001'.",
      "fields": [
        "name",
        "campaign"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'campaign': 'CAM-0001'}, fields=['name', 'campaign'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices associated with any campaign.",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'campaign': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice is linked to a specific campaign, e.g., 'CAM-0001'.",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'campaign': 'CAM-0001'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the value of campaign for a specific invoice.",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', 'SINV-0001', 'campaign')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with campaign and status.",
      "fields": [
        "name",
        "campaign",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'campaign': ['!=', '']}, fields=['name', 'campaign', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with campaign and inter company invoice reference.",
      "fields": [
        "name",
        "campaign",
        "inter_company_invoice_reference"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'campaign': ['!=', '']}, fields=['name', 'campaign', 'inter_company_invoice_reference'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show a single invoice document linked to a campaign.",
      "fields": [
        "name",
        "campaign"
      ]
    },
    "output": "frappe.get_doc('Sales Invoice', {'campaign': ['!=', ''], 'name': ['like', '%SINV%']}, fields=['name', 'campaign'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with campaign and a specific status.",
      "fields": [
        "name",
        "campaign",
        "status"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'campaign': ['!=', ''], 'status': 'Submitted'}, fields=['name', 'campaign', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with campaign and more information.",
      "fields": [
        "name",
        "campaign",
        "more_information"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'campaign': ['!=', '']}, fields=['name', 'campaign', 'more_information'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if a specific invoice is linked to a campaign.",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'campaign': ['!=', '']}, fields=['name', 'campaign'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices representing a specific company, e.g., 'ABC Corp'.",
      "fields": [
        "name",
        "represents_company"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'represents_company': 'ABC Corp'}, fields=['name', 'represents_company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices representing any company.",
      "fields": [
        "represents_company"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'represents_company': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice represents a specific company, e.g., 'ABC Corp'.",
      "fields": [
        "represents_company"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'represents_company': 'ABC Corp'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the value of represents company for a specific invoice.",
      "fields": [
        "represents_company"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', 'SINV-0001', 'represents_company')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices representing a company and their status.",
      "fields": [
        "name",
        "represents_company",
        "status"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'represents_company': ['!=', '']}, fields=['name', 'represents_company', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices representing a company and their campaign.",
      "fields": [
        "name",
        "represents_company",
        "campaign"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'represents_company': ['!=', '']}, fields=['name', 'represents_company', 'campaign'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show a single invoice document representing a company.",
      "fields": [
        "name",
        "represents_company"
      ]
    },
    "output": "frappe.get_doc('Sales Invoice', {'represents_company': ['!=', ''], 'name': ['like', '%SINV%']}, fields=['name', 'represents_company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices representing a company and a specific status.",
      "fields": [
        "name",
        "represents_company",
        "status"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'represents_company': ['!=', ''], 'status': 'Submitted'}, fields=['name', 'represents_company', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices representing a company and their inter company invoice reference.",
      "fields": [
        "name",
        "represents_company",
        "inter_company_invoice_reference"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'represents_company': ['!=', '']}, fields=['name', 'represents_company', 'inter_company_invoice_reference'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if a specific invoice represents a company.",
      "fields": [
        "represents_company"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'represents_company': ['!=', '']}, fields=['name', 'represents_company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices created from a specific source, e.g., 'Sales Order'.",
      "fields": [
        "name",
        "source"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'source': 'Sales Order'}, fields=['name', 'source'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices created from any source.",
      "fields": [
        "source"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'source': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice is created from a specific source, e.g., 'Delivery Note'.",
      "fields": [
        "source"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'source': 'Delivery Note'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the value of source for a specific invoice.",
      "fields": [
        "source"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', 'SINV-0001', 'source')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with source and represents company.",
      "fields": [
        "name",
        "source",
        "represents_company"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'source': ['!=', '']}, fields=['name', 'source', 'represents_company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with source and campaign.",
      "fields": [
        "name",
        "source",
        "campaign"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'source': ['!=', '']}, fields=['name', 'source', 'campaign'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show a single invoice document created from a specific source.",
      "fields": [
        "name",
        "source"
      ]
    },
    "output": "frappe.get_doc('Sales Invoice', {'source': ['!=', ''], 'name': ['like', '%SINV%']}, fields=['name', 'source'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with source and a specific status.",
      "fields": [
        "name",
        "source",
        "status"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'source': ['!=', ''], 'status': 'Submitted'}, fields=['name', 'source', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with source and inter company invoice reference.",
      "fields": [
        "name",
        "source",
        "inter_company_invoice_reference"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'source': ['!=', '']}, fields=['name', 'source', 'inter_company_invoice_reference'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if a specific invoice is created from a source.",
      "fields": [
        "source"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'source': ['!=', '']}, fields=['name', 'source'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices for a specific customer group, e.g., 'Individual'.",
      "fields": [
        "name",
        "customer_group"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'customer_group': 'Individual'}, fields=['name', 'customer_group'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices for any customer group.",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'customer_group': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice belongs to a specific customer group, e.g., 'Individual'.",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'customer_group': 'Individual'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices for a customer group and campaign.",
      "fields": [
        "name",
        "customer_group",
        "campaign"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer_group': ['!=', '']}, fields=['name', 'customer_group', 'campaign'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices for a customer group and source.",
      "fields": [
        "name",
        "customer_group",
        "source"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'customer_group': ['!=', '']}, fields=['name', 'customer_group', 'source'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show a single invoice document for a customer group.",
      "fields": [
        "name",
        "customer_group"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer_group': ['!=', ''], 'name': ['like', '%SINV%']}, fields=['name', 'customer_group'], limit=1)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices for a customer group and a specific represents_company.",
      "fields": [
        "name",
        "customer_group",
        "represents_company"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'customer_group': ['!=', ''], 'represents_company': 'ABC Corp'}, fields=['name', 'customer_group', 'represents_company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices for a customer group and their inter company invoice reference.",
      "fields": [
        "name",
        "customer_group",
        "inter_company_invoice_reference"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer_group': ['!=', '']}, fields=['name', 'customer_group', 'inter_company_invoice_reference'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where is_internal_customer is set to 1 (True).",
      "fields": [
        "name",
        "is_internal_customer"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'is_internal_customer': 1}, fields=['name', 'is_internal_customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices where is_internal_customer is set to 1 (True).",
      "fields": [
        "is_internal_customer"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_internal_customer': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice has is_internal_customer set to 1 (True).",
      "fields": [
        "is_internal_customer"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'is_internal_customer': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices where is_internal_customer is set and customer is specified.",
      "fields": [
        "name",
        "is_internal_customer",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_internal_customer': 1, 'customer': ['!=', '']}, fields=['name', 'is_internal_customer', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where is_internal_customer is set and customer_group is specified.",
      "fields": [
        "name",
        "is_internal_customer",
        "customer_group"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'is_internal_customer': 1, 'customer_group': ['!=', '']}, fields=['name', 'is_internal_customer', 'customer_group'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show a single invoice document where is_internal_customer is set.",
      "fields": [
        "name",
        "is_internal_customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_internal_customer': 1}, fields=['name', 'is_internal_customer'], limit=1)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where is_internal_customer is set and company is specified.",
      "fields": [
        "name",
        "is_internal_customer",
        "company"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'is_internal_customer': 1, 'company': ['!=', '']}, fields=['name', 'is_internal_customer', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where is_internal_customer is set and source is specified.",
      "fields": [
        "name",
        "is_internal_customer",
        "source"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_internal_customer': 1, 'source': ['!=', '']}, fields=['name', 'is_internal_customer', 'source'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where is_discounted is set to 1 (True).",
      "fields": [
        "name",
        "is_discounted"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'is_discounted': 1}, fields=['name', 'is_discounted'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices where is_discounted is set to 1 (True).",
      "fields": [
        "is_discounted"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_discounted': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice has is_discounted set to 1 (True).",
      "fields": [
        "is_discounted"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'is_discounted': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices where is_discounted is set and customer is specified.",
      "fields": [
        "name",
        "is_discounted",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_discounted': 1, 'customer': ['!=', '']}, fields=['name', 'is_discounted', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where is_discounted is set and discount_amount is greater than 0.",
      "fields": [
        "name",
        "is_discounted",
        "discount_amount"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'is_discounted': 1, 'discount_amount': ['>', 0]}, fields=['name', 'is_discounted', 'discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show a single invoice document where is_discounted is set.",
      "fields": [
        "name",
        "is_discounted"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_discounted': 1}, fields=['name', 'is_discounted'], limit=1)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where is_discounted is set and grand_total is above a certain value, e.g., 1000.",
      "fields": [
        "name",
        "is_discounted",
        "grand_total"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'is_discounted': 1, 'grand_total': ['>', 1000]}, fields=['name', 'is_discounted', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where is_discounted is set and source is specified.",
      "fields": [
        "name",
        "is_discounted",
        "source"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_discounted': 1, 'source': ['!=', '']}, fields=['name', 'is_discounted', 'source'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with update auto repeat reference set.",
      "fields": [
        "name",
        "update_auto_repeat_reference"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'update_auto_repeat_reference': 1}, fields=['name', 'update_auto_repeat_reference'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices with update auto repeat reference enabled.",
      "fields": [
        "update_auto_repeat_reference"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'update_auto_repeat_reference': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice has update auto repeat reference enabled.",
      "fields": [
        "update_auto_repeat_reference"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'update_auto_repeat_reference': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the value of update auto repeat reference for a specific invoice.",
      "fields": [
        "update_auto_repeat_reference"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', 'SINV-0001', 'update_auto_repeat_reference')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with update auto repeat reference and auto repeat.",
      "fields": [
        "name",
        "update_auto_repeat_reference",
        "auto_repeat"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_auto_repeat_reference': 1}, fields=['name', 'update_auto_repeat_reference', 'auto_repeat'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with update auto repeat reference and their from date.",
      "fields": [
        "name",
        "update_auto_repeat_reference",
        "from_date"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'update_auto_repeat_reference': 1}, fields=['name', 'update_auto_repeat_reference', 'from_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show a single invoice document with update auto repeat reference enabled.",
      "fields": [
        "name",
        "update_auto_repeat_reference"
      ]
    },
    "output": "frappe.get_doc('Sales Invoice', {'update_auto_repeat_reference': 1, 'name': ['like', '%SINV%']}, fields=['name', 'update_auto_repeat_reference'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with update auto repeat reference and a specific auto repeat.",
      "fields": [
        "name",
        "update_auto_repeat_reference",
        "auto_repeat"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'update_auto_repeat_reference': 1, 'auto_repeat': 'AUTOREP-0001'}, fields=['name', 'update_auto_repeat_reference', 'auto_repeat'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with update auto repeat reference and their to date.",
      "fields": [
        "name",
        "update_auto_repeat_reference",
        "to_date"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_auto_repeat_reference': 1}, fields=['name', 'update_auto_repeat_reference', 'to_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if a specific invoice has update auto repeat reference enabled.",
      "fields": [
        "update_auto_repeat_reference"
      ]
    },
    "output": "frappe.db.get_value('Sales Invoice', 'SINV-0001', 'update_auto_repeat_reference') == 1"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where remarks is not empty.",
      "fields": [
        "name",
        "remarks"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'remarks': ['!=', '']}, fields=['name', 'remarks'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices where remarks is not empty.",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'remarks': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice has remarks set.",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.exists('Sales Invoice', {'remarks': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices where remarks is not empty and customer is specified.",
      "fields": [
        "name",
        "remarks",
        "customer"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'remarks': ['!=', ''], 'customer': ['!=', '']}, fields=['name', 'remarks', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where remarks is not empty and customer_name is specified.",
      "fields": [
        "name",
        "remarks",
        "customer_name"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'remarks': ['!=', ''], 'customer_name': ['!=', '']}, fields=['name', 'remarks', 'customer_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show a single invoice document where remarks is not empty.",
      "fields": [
        "name",
        "remarks"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'remarks': ['!=', '']}, fields=['name', 'remarks'], limit=1)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where remarks is not empty and posting_date is after a certain date, e.g., '2023-01-01'.",
      "fields": [
        "name",
        "remarks",
        "posting_date"
      ]
    },
    "output": "frappe.get_list('Sales Invoice', filters={'remarks': ['!=', ''], 'posting_date': ['>', '2023-01-01']}, fields=['name', 'remarks', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where remarks is not empty and source is specified.",
      "fields": [
        "name",
        "remarks",
        "source"
      ]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'remarks': ['!=', ''], 'source': ['!=', '']}, fields=['name', 'remarks', 'source'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices with email notifications sent.",
      "fields": [
        "customer",
        "posting_date"
      ]
    },
    "output": "Error: 'email_notification' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where GST calculation failed.",
      "fields": [
        "posting_date",
        "grand_total"
      ]
    },
    "output": "Error: 'gst_calculation_status' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices linked with internal project codes.",
      "fields": [
        "customer",
        "project_name"
      ]
    },
    "output": "Error: 'internal_project_code' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices that were flagged for fraud checks.",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "Error: 'fraud_flag' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have biometric confirmation?",
      "fields": [
        "customer",
        "due_date"
      ]
    },
    "output": "Error: 'biometric_confirmation' is not in the provided fields."
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices with customer sentiment marked as positive.",
      "fields": [
        "customer",
        "remarks"
      ]
    },
    "output": "Error: Sentiment is not a field in Sales Invoice."
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the logo of the company is visible.",
      "fields": [
        "company",
        "name"
      ]
    },
    "output": "Error: Visual elements like 'logo' are not stored in Sales Invoice."
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices that were printed in color.",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "Error: Print color is not a stored field in Sales Invoice."
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with handwritten notes added to the print preview.",
      "fields": [
        "remarks"
      ]
    },
    "output": "Error: Handwritten notes or print annotations are not stored as data fields."
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices had the PDF exported by the user?",
      "fields": [
        "name"
      ]
    },
    "output": "Error: PDF export actions are not stored in Sales Invoice metadata."
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices highlighted with yellow label in UI.",
      "fields": [
        "status"
      ]
    },
    "output": "Error: UI labels or highlights are not part of Sales Invoice fields."
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices having customer profile pictures.",
      "fields": [
        "customer"
      ]
    },
    "output": "Error: Profile pictures are stored in the linked Customer doctype, not Sales Invoice."
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where items are physically damaged.",
      "fields": [
        "items"
      ]
    },
    "output": "Error: Physical condition of items is not recorded in Sales Invoice."
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with customer reviews or ratings.",
      "fields": [
        "customer",
        "remarks"
      ]
    },
    "output": "Error: Reviews or ratings are not part of the Sales Invoice schema."
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices filtered by sound of scanned documents.",
      "fields": [
        "attachments"
      ]
    },
    "output": "Error: Audio or scanned content is not searchable via filters."
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were viewed by the CEO last month?",
      "fields": [
        "owner",
        "status"
      ]
    },
    "output": "Error: View actions by specific users are not logged in Sales Invoice."
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the footer said 'Thanks for shopping'.",
      "fields": [
        "remarks"
      ]
    },
    "output": "Error: Print footer content is not stored as a data field."
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices generated during the blackout period.",
      "fields": [
        "posting_date"
      ]
    },
    "output": "Error: 'blackout period' is not a standard field or recognized range."
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where signature is in blue ink.",
      "fields": [
        "name"
      ]
    },
    "output": "Error: Ink color or signature medium is not stored in system fields."
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices marked with emotional tone like 'apology' or 'thank you'.",
      "fields": [
        "remarks"
      ]
    },
    "output": "Error: Emotional tone detection is not available in basic text filters."
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "List all quotations associated with project PROJ-001.",
      "fields": [
        "name",
        "supplier",
        "project",
        "transaction_date"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'project': 'PROJ-001' }, fields=['name', 'supplier', 'project', 'transaction_date'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Show all quotations with discount amount greater than 1000.",
      "fields": [
        "name",
        "discount_amount",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'discount_amount': ['>', 1000] }, fields=['name', 'discount_amount', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Get the buying price list and price list currency for quotation SQ-2025-0012.",
      "fields": [
        "buying_price_list",
        "price_list_currency"
      ]
    },
    "output": "frappe.db.get_value('Supplier Quotation', 'SQ-2025-0012', ['buying_price_list', 'price_list_currency'], as_dict=True)"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which quotations are using the letter head 'Main Company Header'?",
      "fields": [
        "name",
        "letter_head"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'letter_head': 'Main Company Header' }, fields=['name', 'letter_head'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "List all quotations with status 'Submitted' and grand total above 50,000.",
      "fields": [
        "name",
        "status",
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'status': 'Submitted', 'grand_total': ['>', 50000] }, fields=['name', 'status', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which quotations were sent to address 'SUP-ADDR-002'?",
      "fields": [
        "name",
        "supplier_address"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'supplier_address': 'SUP-ADDR-002' }, fields=['name', 'supplier_address'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Get total quantity and total net weight of quotation SQ-2025-0067.",
      "fields": [
        "total_qty",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.get_value('Supplier Quotation', 'SQ-2025-0067', ['total_qty', 'total_net_weight'], as_dict=True)"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "List quotations where PLC conversion rate is less than 1.",
      "fields": [
        "name",
        "plc_conversion_rate"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'plc_conversion_rate': ['<', 1] }, fields=['name', 'plc_conversion_rate'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which quotations follow payment terms 'Net 30'?",
      "fields": [
        "name",
        "tc_name"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'tc_name': 'Net 30' }, fields=['name', 'tc_name'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Show me all quotations submitted by FreshMart in the last 30 days.",
      "fields": [
        "name",
        "supplier",
        "transaction_date",
        "status"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'supplier': 'FreshMart', 'transaction_date': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -30)] }, fields=['name', 'supplier', 'transaction_date', 'status'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Show quotations submitted by 'Zedex Supplies' in USD that are still valid today.",
      "fields": [
        "name",
        "supplier",
        "currency",
        "valid_till"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'supplier': 'Zedex Supplies', 'currency': 'USD', 'valid_till': ['>=', frappe.utils.nowdate()] }, fields=['name', 'supplier', 'currency', 'valid_till'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice Item",
      "question": "Which customer purchased the most pens last month?",
      "fields": [
        "parent",
        "item_name",
        "qty",
        "customer"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT si.customer, sii.item_name, SUM(sii.qty) AS total_qty FROM `tabSales Invoice Item` sii JOIN `tabSales Invoice` si ON sii.parent = si.name WHERE sii.item_name = 'Pen' AND si.posting_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() GROUP BY si.customer ORDER BY total_qty DESC LIMIT 1\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which suppliers have submitted quotations where the net total exceeds 1 million?",
      "fields": [
        "supplier",
        "net_total"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'net_total': ['>', 1000000] }, fields=['name', 'supplier', 'net_total'])"
  },
  {
    "input": {
      "doctype": "Contact",
      "question": "Find all contacts with both phone and mobile numbers.",
      "fields": [
        "name",
        "phone",
        "mobile_no"
      ]
    },
    "output": "frappe.get_all('Contact', filters={ 'phone': ['!=', ''], 'mobile_no': ['!=', ''] }, fields=['phone', 'mobile_no'])"
  },
  {
    "input": {
      "doctype": "Contact",
      "question": "Find all contacts with middle name 'Hassan' and last name starting with 'Ali'.",
      "fields": [
        "name",
        "middle_name",
        "last_name"
      ]
    },
    "output": "frappe.get_all('Contact', filters={ 'middle_name': ['like', '%Hassan%'], 'last_name': ['like', 'Ali%'] }, fields=['name', 'middle_name', 'last_name'])"
  },
  {
    "input": {
      "doctype": "Contact",
      "question": "List all contacts that have both email and phone details filled in.",
      "fields": [
        "name",
        "email_id",
        "phone"
      ]
    },
    "output": "frappe.get_all('Contact', filters={ 'email_id': ['!=', ''], 'phone': ['!=', ''] }, fields=['name', 'email_id', 'phone'])"
  },
  {
    "input": {
      "doctype": "Employee",
      "question": "Show employees whose first name starts with 'Mohd' and are part of the Sales department.",
      "fields": [
        "name",
        "first_name",
        "department"
      ]
    },
    "output": "frappe.get_all('Employee', filters={ 'first_name': ['like', 'Mohd%'], 'department': ['like', '%Sales%'] }, fields=['name', 'first_name', 'department'])"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "Which purchase orders have a grand total greater than 50,000?",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.get_all('Purchase Order', filters={ 'grand_total': ['>', 50000] }, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "List quotations where the PLC conversion rate is more than 1.2.",
      "fields": [
        "name",
        "plc_conversion_rate"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'plc_conversion_rate': ['>', 1.2] }, fields=['name', 'plc_conversion_rate'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which quotations have additional discount percentages above 15%?",
      "fields": [
        "name",
        "additional_discount_percentage",
        "supplier"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'additional_discount_percentage': ['>', 15] }, fields=['name', 'additional_discount_percentage', 'supplier'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Get quotations with shipping rules applied as 'Express Delivery'.",
      "fields": [
        "name",
        "shipping_rule"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'shipping_rule': 'Express Delivery' }, fields=['name', 'shipping_rule'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Show supplier quotations where language is set to French.",
      "fields": [
        "name",
        "language",
        "supplier"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'language': 'fr' }, fields=['name', 'language', 'supplier'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which quotations were amended from a previous one?",
      "fields": [
        "name",
        "amended_from"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'amended_from': ['!=', ''] }, fields=['name', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "List quotations with incoterm specified as FOB.",
      "fields": [
        "name",
        "incoterm"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'incoterm': 'FOB' }, fields=['name', 'incoterm'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "How many quotations are grouped by items?",
      "fields": [
        "name",
        "group_same_items"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'group_same_items': 1 }, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which quotations have tax category 'Import Duty'?",
      "fields": [
        "name",
        "tax_category"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'tax_category': 'Import Duty' }, fields=['name', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Find quotations where supplier email was provided as contact@example.com.",
      "fields": [
        "name",
        "contact_email"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'contact_email': 'contact@example.com' }, fields=['name', 'contact_email'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which supplier gave the highest quotation for mangoes this year?",
      "fields": [
        "supplier",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT supplier, grand_total FROM `tabSupplier Quotation` WHERE YEAR(transaction_date) = YEAR(CURDATE()) AND name IN (SELECT parent FROM `tabSupplier Quotation Item` WHERE item_name = 'Mango') ORDER BY grand_total DESC LIMIT 1\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "How many quotations were submitted per supplier in the last quarter?",
      "fields": [
        "supplier",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT supplier, COUNT(name) AS quotation_count FROM `tabSupplier Quotation` WHERE QUARTER(transaction_date) = QUARTER(CURDATE() - INTERVAL 1 QUARTER) AND YEAR(transaction_date) = YEAR(CURDATE()) GROUP BY supplier ORDER BY quotation_count DESC\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "List suppliers who gave quotations with discounts above 10% last month.",
      "fields": [
        "supplier",
        "discount_amount",
        "additional_discount_percentage",
        "transaction_date"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'additional_discount_percentage': ['>', 10], 'transaction_date': ['between', [frappe.utils.add_days(frappe.utils.nowdate(), -30), frappe.utils.nowdate()]] }, fields=['supplier', 'additional_discount_percentage', 'discount_amount'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "What is the average conversion rate for USD quotations this year?",
      "fields": [
        "conversion_rate",
        "currency",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT AVG(conversion_rate) AS avg_rate FROM `tabSupplier Quotation` WHERE currency = 'USD' AND YEAR(transaction_date) = YEAR(CURDATE())\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which project received the most supplier quotations this year?",
      "fields": [
        "project",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT project, COUNT(name) AS quote_count FROM `tabSupplier Quotation` WHERE YEAR(transaction_date) = YEAR(CURDATE()) AND project IS NOT NULL GROUP BY project ORDER BY quote_count DESC LIMIT 1\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Compare grand total vs net total differences across all quotations this month.",
      "fields": [
        "name",
        "grand_total",
        "net_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT name, grand_total, net_total, (grand_total - net_total) AS difference FROM `tabSupplier Quotation` WHERE MONTH(transaction_date) = MONTH(CURDATE()) AND YEAR(transaction_date) = YEAR(CURDATE())\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Find suppliers whose quotations exceeded 500,000 in total taxes and charges.",
      "fields": [
        "supplier",
        "total_taxes_and_charges"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'total_taxes_and_charges': ['>', 500000] }, fields=['name', 'supplier', 'total_taxes_and_charges'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which quotations are going to expire within the next 10 days?",
      "fields": [
        "name",
        "valid_till",
        "supplier"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'valid_till': ['<=', frappe.utils.add_days(frappe.utils.nowdate(), 10)] }, fields=['name', 'supplier', 'valid_till'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "List supplier quotations linked to Opportunity-2024-009 that are still open.",
      "fields": [
        "opportunity",
        "status",
        "supplier"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'opportunity': 'Opportunity-2024-009', 'status': 'Draft' }, fields=['name', 'supplier', 'status'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "How many suppliers used a custom terms and conditions template?",
      "fields": [
        "tc_name",
        "supplier"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT COUNT(DISTINCT supplier) FROM `tabSupplier Quotation` WHERE tc_name IS NOT NULL AND tc_name != ''\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Can you compare the gross profit for the last 8 quarters?",
      "fields": [
        "posting_date",
        "gross_profit"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT CONCAT(YEAR(posting_date), '-Q', QUARTER(posting_date)) AS quarter, SUM(gross_profit) AS total_gp FROM `tabSales Invoice` WHERE docstatus = 1 GROUP BY quarter ORDER BY quarter DESC LIMIT 8\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": "Journal Entry Account",
      "question": "How much we lost due to exchange rate variation last year?",
      "fields": [
        "account",
        "debit",
        "credit",
        "reference_type",
        "reference_name"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT SUM(debit - credit) AS fx_loss FROM `tabJournal Entry Account` WHERE account LIKE '%Exchange Loss%' AND YEAR(posting_date) = YEAR(CURDATE()) - 1\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": "Item Price",
      "question": "How much price increase happened for Mangos in the last 5 years?",
      "fields": [
        "item_code",
        "price_list_rate",
        "valid_from"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT item_code, MIN(price_list_rate) AS min_price, MAX(price_list_rate) AS max_price, (MAX(price_list_rate) - MIN(price_list_rate)) AS difference FROM `tabItem Price` WHERE item_code = 'Mango' AND valid_from >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR)\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": "Sales Order Item",
      "question": "Which product had the highest return rate last quarter?",
      "fields": [
        "item_code",
        "qty",
        "returned_qty"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT item_code, SUM(returned_qty)/SUM(qty) AS return_rate FROM `tabSales Order Item` WHERE posting_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() GROUP BY item_code ORDER BY return_rate DESC LIMIT 1\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": "Purchase Invoice",
      "question": "Compare monthly spending on imported raw materials over the last year.",
      "fields": [
        "supplier",
        "posting_date",
        "total",
        "supplier_type"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT DATE_FORMAT(posting_date, '%Y-%m') AS month, SUM(grand_total) AS total_spend FROM `tabPurchase Invoice` pi JOIN `tabSupplier` s ON pi.supplier = s.name WHERE s.supplier_type = 'Raw Material' AND s.country != 'India' AND posting_date >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH) GROUP BY month ORDER BY month\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": "Payment Entry",
      "question": "How much did we spend in cash vs bank in the last 6 months?",
      "fields": [
        "paid_from",
        "paid_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT paid_from, SUM(paid_amount) AS total FROM `tabPayment Entry` WHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY paid_from\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": "Purchase Order",
      "question": "What was the average delivery time for each supplier this year?",
      "fields": [
        "supplier",
        "transaction_date",
        "schedule_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT supplier, AVG(DATEDIFF(schedule_date, transaction_date)) AS avg_days FROM `tabPurchase Order` WHERE YEAR(transaction_date) = YEAR(CURDATE()) GROUP BY supplier\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": "Sales Order",
      "question": "Which customer placed the highest number of orders in Q2 this year?",
      "fields": [
        "customer",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT customer, COUNT(name) AS order_count FROM `tabSales Order` WHERE QUARTER(transaction_date) = 2 AND YEAR(transaction_date) = YEAR(CURDATE()) GROUP BY customer ORDER BY order_count DESC LIMIT 1\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": "Stock Ledger Entry",
      "question": "How much stock value was written off in the past 3 years?",
      "fields": [
        "item_code",
        "valuation_rate",
        "qty",
        "voucher_type"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT SUM(valuation_rate * qty) AS writeoff_value FROM `tabStock Ledger Entry` WHERE voucher_type = 'Stock Reconciliation' AND qty < 0 AND posting_date >= DATE_SUB(CURDATE(), INTERVAL 3 YEAR)\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which quotations have a discount above 5% and a total greater than 5000?",
      "fields": [
        "name",
        "additional_discount_percentage",
        "total"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'additional_discount_percentage': ['>', 5], 'total': ['>', 5000] }, fields=['name', 'additional_discount_percentage', 'total'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "List quotations where incoterm is 'FOB' and taxes and charges are defined.",
      "fields": [
        "name",
        "incoterm",
        "taxes_and_charges"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'incoterm': 'FOB', 'taxes_and_charges': ['!=', ''] }, fields=['name', 'incoterm', 'taxes_and_charges'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Get quotations from the last 60 days where the total quantity is above 100.",
      "fields": [
        "name",
        "transaction_date",
        "total_qty"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'transaction_date': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), -60)], 'total_qty': ['>', 100] }, fields=['name', 'transaction_date', 'total_qty'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Fetch all quotations by supplier 'Alfa Traders' with cost center 'Main - C' and project 'Infra 2025'.",
      "fields": [
        "name",
        "supplier",
        "cost_center",
        "project"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'supplier': 'Alfa Traders', 'cost_center': 'Main - C', 'project': 'Infra 2025' }, fields=['name', 'supplier', 'cost_center', 'project'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Show quotations that were modified after creation and have a rounding adjustment.",
      "fields": [
        "name",
        "creation",
        "modified",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT name, creation, modified, rounding_adjustment FROM `tabSupplier Quotation` WHERE modified > creation AND rounding_adjustment IS NOT NULL\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Find quotations where currency is EUR but price list currency is USD.",
      "fields": [
        "name",
        "currency",
        "price_list_currency"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'currency': 'EUR', 'price_list_currency': 'USD' }, fields=['name', 'currency', 'price_list_currency'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which quotations have address 'SUP-ADDR-001' and contact email provided?",
      "fields": [
        "name",
        "supplier_address",
        "contact_email"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'supplier_address': 'SUP-ADDR-001', 'contact_email': ['!=', ''] }, fields=['name', 'supplier_address', 'contact_email'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "List all quotations with status not equal to 'Expired' and valid till at least next week.",
      "fields": [
        "name",
        "status",
        "valid_till"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'status': ['!=', 'Expired'], 'valid_till': ['>=', frappe.utils.add_days(frappe.utils.nowdate(), 7)] }, fields=['name', 'status', 'valid_till'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which quotations are linked to opportunity 'OPTY-0005' and have net total over 20000?",
      "fields": [
        "name",
        "opportunity",
        "net_total"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'opportunity': 'OPTY-0005', 'net_total': ['>', 20000] }, fields=['name', 'opportunity', 'net_total'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "List all quotations submitted in EUR currency last quarter.",
      "fields": [
        "name",
        "supplier",
        "transaction_date",
        "currency"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'currency': 'EUR', 'transaction_date': ['between', [frappe.utils.add_months(frappe.utils.nowdate(), -3), frappe.utils.nowdate()]] }, fields=['name', 'supplier', 'transaction_date', 'currency'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Get contact email and phone number for quotation SQ-2025-0045.",
      "fields": [
        "contact_email",
        "contact_mobile"
      ]
    },
    "output": "frappe.db.get_value('Supplier Quotation', 'SQ-2025-0045', ['contact_email', 'contact_mobile'], as_dict=True)"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Find all quotations where the Incoterm is 'FOB' and named place is 'Dubai Port'.",
      "fields": [
        "name",
        "incoterm",
        "named_place"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'incoterm': 'FOB', 'named_place': 'Dubai Port' }, fields=['name', 'incoterm', 'named_place'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Show quotations that include taxes above 5000.",
      "fields": [
        "name",
        "total_taxes_and_charges"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'total_taxes_and_charges': ['>', 5000] }, fields=['name', 'total_taxes_and_charges'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Retrieve address and shipping address for SQ-2025-0021.",
      "fields": [
        "address_display",
        "shipping_address_display"
      ]
    },
    "output": "frappe.db.get_value('Supplier Quotation', 'SQ-2025-0021', ['address_display', 'shipping_address_display'], as_dict=True)"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which quotations are set to expire within the next 10 days?",
      "fields": [
        "name",
        "valid_till"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'valid_till': ['between', [frappe.utils.nowdate(), frappe.utils.add_days(frappe.utils.nowdate(), 10)]] }, fields=['name', 'valid_till'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Count how many quotations have the status 'Expired'.",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.count('Supplier Quotation', filters={ 'status': 'Expired' })"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "What was the grand total of the latest quotation from Acme Corp?",
      "fields": [
        "grand_total",
        "supplier",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT grand_total FROM `tabSupplier Quotation` WHERE supplier = %s ORDER BY transaction_date DESC LIMIT 1\"\"\", ('Acme Corp',))"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Get the total amount and discount applied on SQ-2025-0012.",
      "fields": [
        "name",
        "grand_total",
        "discount_amount"
      ]
    },
    "output": "frappe.db.get_value('Supplier Quotation', 'SQ-2025-0012', ['grand_total', 'discount_amount'], as_dict=True)"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "List quotations with grand total above 100000 and not yet approved.",
      "fields": [
        "name",
        "supplier",
        "grand_total",
        "status"
      ]
    },
    "output": "frappe.get_all('Supplier Quotation', filters={ 'grand_total': ['>', 100000], 'status': ['!=', 'Approved'] }, fields=['name', 'supplier', 'grand_total', 'status'])"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Which suppliers have submitted quotations for the Mango Supply Project?",
      "fields": [
        "supplier",
        "project"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT DISTINCT supplier FROM `tabSupplier Quotation` WHERE project = %s\"\"\", ('Mango Supply Project',))"
  },
  {
    "input": {
      "doctype": "Supplier Quotation",
      "question": "Count all quotations that are still valid as of today.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.count('Supplier Quotation', filters={ 'valid_till': ['>=', frappe.utils.nowdate()] })"
  },
  {
    "input": {
      "question": "List all active BOMs for item 'WIDGET-001'.",
      "doctype": "BOM",
      "fields": [
        "name",
        "item",
        "item_name",
        "creation"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT name, item, item_name, creation\nFROM `tabBOM`\nWHERE item = 'WIDGET-001' AND is_active = 1\nORDER BY creation DESC\n\"\"\")"
  },
  {
    "input": {
      "question": "What is the total raw material cost for each item with an active BOM?",
      "doctype": "BOM",
      "fields": [
        "item",
        "item_name",
        "base_raw_material_cost"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT item, item_name, SUM(base_raw_material_cost) AS total_raw_material_cost\nFROM `tabBOM`\nWHERE is_active = 1\nGROUP BY item, item_name\nORDER BY total_raw_material_cost DESC\n\"\"\")"
  },
  {
    "input": {
      "question": "List all BOMs created in the last 30 days, including their creation date and total cost.",
      "doctype": "BOM",
      "fields": [
        "name",
        "item",
        "creation",
        "base_total_cost"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT name, item, creation, base_total_cost\nFROM `tabBOM`\nWHERE creation >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)\nORDER BY creation DESC\n\"\"\")"
  },
  {
    "input": {
      "question": "Which BOMs have more than 5 items in their items table?",
      "doctype": "BOM",
      "fields": [
        "name",
        "item"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT b.name, b.item\nFROM `tabBOM` b\nJOIN `tabBOM Item` bi ON bi.parent = b.name\nGROUP BY b.name, b.item\nHAVING COUNT(bi.name) > 5\nORDER BY COUNT(bi.name) DESC\n\"\"\")"
  },
  {
    "input": {
      "question": "Which BOMs have a process loss percentage greater than 2%?",
      "doctype": "BOM",
      "fields": [
        "name",
        "item",
        "process_loss_percentage"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT name, item, process_loss_percentage\nFROM `tabBOM`\nWHERE process_loss_percentage > 2\nORDER BY process_loss_percentage DESC\n\"\"\")"
  },
  {
    "input": {
      "question": "List all BOMs that are shown on the website along with their route.",
      "doctype": "BOM",
      "fields": [
        "name",
        "item",
        "route"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT name, item, route\nFROM `tabBOM`\nWHERE show_in_website = 1\nORDER BY item\n\"\"\")"
  },
  {
    "input": {
      "question": "Which BOMs require quality inspection and what are their inspection templates?",
      "doctype": "BOM",
      "fields": [
        "name",
        "item",
        "quality_inspection_template"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT name, item, quality_inspection_template\nFROM `tabBOM`\nWHERE inspection_required = 1 AND quality_inspection_template IS NOT NULL\n\"\"\")"
  },
  {
    "input": {
      "question": "What is the total operating cost for all BOMs created this year?",
      "doctype": "BOM",
      "fields": [
        "name",
        "operating_cost"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT SUM(operating_cost) AS total_operating_cost\nFROM `tabBOM`\nWHERE YEAR(creation) = YEAR(CURDATE())\n\"\"\")"
  },
  {
    "input": {
      "question": "Which BOMs are not active and what is their last modified date?",
      "doctype": "BOM",
      "fields": [
        "name",
        "item",
        "modified"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT name, item, modified\nFROM `tabBOM`\nWHERE is_active = 0\nORDER BY modified DESC\n\"\"\")"
  },
  {
    "input": {
      "question": "Which BOMs use a routing and what is the associated routing name?",
      "doctype": "BOM",
      "fields": [
        "name",
        "item",
        "routing"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT name, item, routing\nFROM `tabBOM`\nWHERE routing IS NOT NULL AND routing != ''\nORDER BY routing\n\"\"\")"
  },
  {
    "input": {
      "question": "List BOMs that have exploded items and show the count of exploded items per BOM.",
      "doctype": "BOM",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT parent AS bom_name, COUNT(*) AS exploded_item_count\nFROM `tabBOM Exploded Item`\nGROUP BY parent\nORDER BY exploded_item_count DESC\n\"\"\")"
  },
  {
    "input": {
      "question": "Which BOMs have a process loss quantity greater than zero?",
      "doctype": "BOM",
      "fields": [
        "name",
        "item",
        "process_loss_qty"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT name, item, process_loss_qty\nFROM `tabBOM`\nWHERE process_loss_qty > 0\nORDER BY process_loss_qty DESC\n\"\"\")"
  },
  {
    "input": {
      "question": "What is the total scrap material cost for all BOMs in the system?",
      "doctype": "BOM",
      "fields": [
        "scrap_material_cost"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT SUM(scrap_material_cost) AS total_scrap_cost\nFROM `tabBOM`\n\"\"\")"
  },
  {
    "input": {
      "question": "Which BOMs are set as default and marked active for each item?",
      "doctype": "BOM",
      "fields": [
        "name",
        "item",
        "is_default",
        "is_active"
      ]
    },
    "output": "frappe.db.sql(\"\"\"\nSELECT name, item, is_default, is_active\nFROM `tabBOM`\nWHERE is_default = 1 AND is_active = 1\nORDER BY item\n\"\"\")"
  }
]