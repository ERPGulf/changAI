[
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Did any invoice today use the cash bank account 'ICICI Bank - HO'?",
      "fields": [
        "cash_bank_account",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE cash_bank_account = 'ICICI Bank - HO' AND posting_date = CURDATE()''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices this year used 'Axis Bank - ERPGulf'?",
      "fields": [
        "cash_bank_account",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE cash_bank_account = 'Axis Bank - ERPGulf' AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Service Level Agreement"
      ],
      "question": "How many SLA statuses contain the term 'Pending'?",
      "fields": [
        "service_level"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabService Level Agreement[BT] WHERE service_level LIKE '%Pending%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item Tax Template"
      ],
      "question": "Show me item tax records where the minimum rate is below 10.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabItem Tax Template[BT] WHERE minimum_net_rate < 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item Tax Template"
      ],
      "question": "List all item taxes valid from January 1, 2024.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabItem Tax Template[BT] WHERE valid_from = '2024-01-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item Tax Template"
      ],
      "question": "Find item tax records with maximum net rate greater than 100.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabItem Tax Template[BT] WHERE maximum_net_rate > 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item Tax Template"
      ],
      "question": "Show item tax templates applicable before 2023.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabItem Tax Template[BT] WHERE valid_from < '2023-01-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item Tax Template"
      ],
      "question": "Return all fields of item taxes defined after March 2023.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabItem Tax Template[BT] WHERE creation > '2023-03-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item Tax Template"
      ],
      "question": "Get complete document for item tax template 'GST 18%'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabItem Tax Template[BT] WHERE name = 'GST 18%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item Tax Template"
      ],
      "question": "Pull the entire configuration of item tax with a template named 'Luxury_Tax'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabItem Tax Template[BT] WHERE name = 'Luxury_Tax' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item Tax Template"
      ],
      "question": "Show the minimum net rate for item tax template 'Eco_Tax'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabItem Tax Template[BT] WHERE name = 'Eco_Tax' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item Tax Template"
      ],
      "question": "Fetch the validity date for template 'Retail_Tax'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabItem Tax Template[BT] WHERE name = 'Retail_Tax' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item Tax Template"
      ],
      "question": "How many item taxes are valid from 2024 onwards?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabItem Tax Template[BT] WHERE creation >= '2024-01-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Assignment Rule"
      ],
      "question": "List all assignment rules that are currently disabled.",
      "fields": [
        "name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, disabled FROM [BT]tabAssignment Rule[BT] WHERE disabled = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Assignment Rule"
      ],
      "question": "Get all assignment rules for the Sales Invoice doctype.",
      "fields": [
        "name",
        "document_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, document_type FROM [BT]tabAssignment Rule[BT] WHERE document_type = 'Sales Invoice' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Assignment Rule"
      ],
      "question": "List all assignment rules that use priority-based logic.",
      "fields": [
        "name",
        "priority"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, priority FROM [BT]tabAssignment Rule[BT] WHERE priority = 'High' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Assignment Rule"
      ],
      "question": "Which assignment rules are using a custom assign condition?",
      "fields": [
        "name",
        "assign_condition"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, assign_condition FROM [BT]tabAssignment Rule[BT] WHERE assign_condition != ' ' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Assignment Rule"
      ],
      "question": "List assignment rules where the unassign condition is defined.",
      "fields": [
        "name",
        "unassign_condition"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, unassign_condition FROM [BT]tabAssignment Rule[BT] WHERE unassign_condition != ' ' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Assignment Rule"
      ],
      "question": "List all rules with custom due date logic configured.",
      "fields": [
        "name",
        "due_date_based_on"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, due_date_based_on FROM [BT]tabAssignment Rule[BT] WHERE due_date_based_on != ' ' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Assignment Rule"
      ],
      "question": "List rules with custom document type assignment settings.",
      "fields": [
        "name",
        "document_type",
        "description"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, document_type, description FROM [BT]tabAssignment Rule[BT] WHERE description != ' ' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Assignment Rule"
      ],
      "question": "Fetch all assignment rules regardless of filters.",
      "fields": [
        "name",
        "priority"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, priority FROM [BT]tabAssignment Rule[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Assignment Rule"
      ],
      "question": "Fetch every rule and its last assigned user.",
      "fields": [
        "name",
        "last_user"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, last_user FROM [BT]tabAssignment Rule[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Assignment Rule"
      ],
      "question": "Get complete details of the assignment rule named 'Support Ticket Routing'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAssignment Rule[BT] WHERE name = 'Support Ticket Routing' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Assignment Rule"
      ],
      "question": "Get the full configuration for 'Sales Order Round Robin Rule'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAssignment Rule[BT] WHERE name = 'Sales Order Round Robin Rule' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Assignment Rule"
      ],
      "question": "Fetch all configuration fields of 'High Priority Lead Assignment'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAssignment Rule[BT] WHERE name = 'High Priority Lead Assignment' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Assignment Rule"
      ],
      "question": "Which user was last assigned by the 'Task Priority Rule'?",
      "fields": [
        "name",
        "last_user"
      ]
    },
    "output": "frappe.db.sql('''SELECT last_user FROM [BT]tabAssignment Rule[BT] WHERE name = 'Task Priority Rule' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Assignment Rule"
      ],
      "question": "How many assignment rules are configured in total?",
      "fields": []
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabAssignment Rule[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Assignment Rule"
      ],
      "question": "How many rules are currently disabled?",
      "fields": [
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabAssignment Rule[BT] WHERE disabled = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "South Africa VAT Settings"
      ],
      "question": "List all VAT settings configured for companies in South Africa.",
      "fields": [
        "company",
        "vat_accounts"
      ]
    },
    "output": "frappe.db.sql('''SELECT company, vat_accounts FROM [BT]tabSouth Africa VAT Settings[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "South Africa VAT Settings"
      ],
      "question": "Which VAT settings are linked to the company 'Drizzle & Flint Corp SA'?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT company FROM [BT]tabSouth Africa VAT Settings[BT] WHERE company = 'Drizzle & Flint Corp SA' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "South Africa VAT Settings"
      ],
      "question": "List companies with multiple VAT accounts configured.",
      "fields": [
        "company",
        "vat_accounts"
      ]
    },
    "output": "frappe.db.sql('''SELECT company, vat_accounts FROM [BT]tabSouth Africa VAT Settings[BT] WHERE vat_accounts != ' ' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "South Africa VAT Settings"
      ],
      "question": "Find all companies with VAT settings configured in ERPNext.",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT company FROM [BT]tabSouth Africa VAT Settings[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "South Africa VAT Settings"
      ],
      "question": "List VAT configuration settings for all registered South African companies.",
      "fields": [
        "company",
        "vat_accounts"
      ]
    },
    "output": "frappe.db.sql('''SELECT company, vat_accounts FROM [BT]tabSouth Africa VAT Settings[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "South Africa VAT Settings"
      ],
      "question": "Which companies in South Africa have no VAT accounts set yet?",
      "fields": [
        "company",
        "vat_accounts"
      ]
    },
    "output": "frappe.db.sql('''SELECT company FROM [BT]tabSouth Africa VAT Settings[BT] WHERE vat_accounts = ' ' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "South Africa VAT Settings"
      ],
      "question": "Get companies with any VAT setup in place.",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT company FROM [BT]tabSouth Africa VAT Settings[BT] WHERE company != ' ' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "South Africa VAT Settings"
      ],
      "question": "Fetch all South African VAT settings including company and linked VAT accounts.",
      "fields": [
        "company",
        "vat_accounts"
      ]
    },
    "output": "frappe.db.sql('''SELECT company, vat_accounts FROM [BT]tabSouth Africa VAT Settings[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "South Africa VAT Settings"
      ],
      "question": "Retrieve the complete VAT mapping configuration across companies.",
      "fields": [
        "company",
        "vat_accounts"
      ]
    },
    "output": "frappe.db.sql('''SELECT company, vat_accounts FROM [BT]tabSouth Africa VAT Settings[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "South Africa VAT Settings"
      ],
      "question": "Get all configuration fields for VAT setup in South Africa.",
      "fields": []
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSouth Africa VAT Settings[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "South Africa VAT Settings"
      ],
      "question": "Get the full configuration for ARust PetalBC Corp SA’s VAT settings.",
      "fields": []
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSouth Africa VAT Settings[BT] WHERE name = 'Rust Petal Corp SA' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "South Africa VAT Settings"
      ],
      "question": "Retrieve all setup details for company 'Cape Traders (Pty) Ltd'.",
      "fields": []
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSouth Africa VAT Settings[BT] WHERE name = 'Cape Traders (Pty) Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "South Africa VAT Settings"
      ],
      "question": "Show VAT settings document for 'Durban Wholesale SA'.",
      "fields": []
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSouth Africa VAT Settings[BT] WHERE name = 'Durban Wholesale SA' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "South Africa VAT Settings"
      ],
      "question": "Which VAT accounts are linked to the company 'Cactus Loom Corp SA'?",
      "fields": [
        "vat_accounts"
      ]
    },
    "output": "frappe.db.sql('''SELECT vat_accounts FROM [BT]tabSouth Africa VAT Settings[BT] WHERE company = 'Cactus Loom Corp SA' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "South Africa VAT Settings"
      ],
      "question": "What company is configured in the VAT settings for 'Durban Wholesale SA'?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT company FROM [BT]tabSouth Africa VAT Settings[BT] WHERE name = 'Durban Wholesale SA' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "South Africa VAT Settings"
      ],
      "question": "How many VAT configurations are defined for South African companies?",
      "fields": []
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSouth Africa VAT Settings[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "South Africa VAT Settings"
      ],
      "question": "Count how many companies do not have VAT accounts set yet.",
      "fields": [
        "vat_accounts"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSouth Africa VAT Settings[BT] WHERE vat_accounts = ' ' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Service Level Agreement"
      ],
      "question": "List all service level priorities and their response times.",
      "fields": [
        "priority",
        "response_time"
      ]
    },
    "output": "frappe.db.sql('''SELECT priority, response_time FROM [BT]tabService Level Agreement[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Service Level Agreement"
      ],
      "question": "Get all service level priorities with a response time of 4 hours or less.",
      "fields": [
        "name",
        "priority",
        "response_time"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,priority, response_time FROM [BT]tabService Level Agreement[BT] WHERE response_time <= 4''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Service Level Agreement"
      ],
      "question": "Count how many service level priorities have a resolution time above 12 hours.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabService Level Agreement[BT] WHERE resolution_time > 12''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Service Level Agreement"
      ],
      "question": "Retrieve the response and resolution time for the 'High' priority level.",
      "fields": [
        "name",
        "response_time"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,response_time FROM [BT]tabService Level Agreement[BT] WHERE priority = 'High' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Service Level Agreement"
      ],
      "question": "Fetch the full configuration for the 'Urgent' service level.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabService Level Agreement[BT] WHERE name = 'Urgent' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Service Level Agreement"
      ],
      "question": "Get the resolution time for 'High' priority service level.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabService Level Agreement[BT] WHERE priority = 'High' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Service Level Agreement"
      ],
      "question": "Count how many service level priorities are defined.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabService Level Agreement[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Service Level Agreement"
      ],
      "question": "Get complete configuration for 'Urgent' service level priority.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabService Level Agreement[BT] WHERE name = 'Urgent' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Service Level Agreement"
      ],
      "question": "How many service level priorities are marked with a resolution time?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabService Level Agreement[BT] WHERE text_field != ' ' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Service Level Agreement"
      ],
      "question": "What is the first response time for 'Normal' priority?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabService Level Agreement[BT] WHERE priority = 'Normal' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Service Level Agreement"
      ],
      "question": "Get details of the service level priority called 'Critical'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabService Level Agreement[BT] WHERE name = 'Critical' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Service Level Agreement"
      ],
      "question": "Retrieve the first response and resolution times for 'Low' priority.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabService Level Agreement[BT] WHERE priority = 'Low' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Operation"
      ],
      "question": "Get the time in minutes for the sub-operation 'Drilling'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabOperation[BT] WHERE operation = 'Drilling' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Operation"
      ],
      "question": "How many sub-operations are defined in the system?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabOperation[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Operation"
      ],
      "question": "Get the complete document for the sub-operation 'Cutting'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabOperation[BT] WHERE name = 'Cutting' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Operation"
      ],
      "question": "Fetch all fields for the sub-operation 'Grinding'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabOperation[BT] WHERE name = 'Grinding' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "System Settings"
      ],
      "question": "How do I check the current S3 bucket name used for backups?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSystem Settings[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "System Settings"
      ],
      "question": "Where can I find the email address used for backup notifications?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSystem Settings[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "System Settings"
      ],
      "question": "List all S3 backup settings where email alerts are enabled.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSystem Settings[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "System Settings"
      ],
      "question": "Show me all configurations that use weekly backups.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSystem Settings[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "System Settings"
      ],
      "question": "Can I count how many setups are scheduled for monthly backups?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSystem Settings[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "System Settings"
      ],
      "question": "How many S3 backup configurations are skipping file backups?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSystem Settings[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "System Settings"
      ],
      "question": "Give me the access key for my current backup setup.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSystem Settings[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "System Settings"
      ],
      "question": "Get all S3 configurations that point to my custom endpoint.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSystem Settings[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "System Settings"
      ],
      "question": "List all entries that use the Daily backup schedule.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSystem Settings[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "System Settings"
      ],
      "question": "How many configurations have the notification email blank?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSystem Settings[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "System Settings"
      ],
      "question": "Which settings have notifications disabled for successful backups?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSystem Settings[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "System Settings"
      ],
      "question": "Fetch all configurations where file backups are included.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSystem Settings[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "System Settings"
      ],
      "question": "Get the endpoint URL used for the current S3 backup.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSystem Settings[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "System Settings"
      ],
      "question": "Show me all entries that use 'weekly' as backup frequency and have file backups enabled.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSystem Settings[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "System Settings"
      ],
      "question": "Give me the secret access key used for the current S3 connection.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSystem Settings[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "System Settings"
      ],
      "question": "Retrieve all backup settings that include both email notifications and file backups.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSystem Settings[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Cost"
      ],
      "question": "What is the billing rate for each activity type in our system?",
      "fields": [
        "activity_type",
        "billing_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT activity_type, billing_rate FROM [BT]tabActivity Cost[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Cost"
      ],
      "question": "Can I check the costing rate for activities performed by employees in the marketing department?",
      "fields": [
        "employee",
        "costing_rate",
        "department"
      ]
    },
    "output": "frappe.db.sql('''SELECT employee, costing_rate FROM [BT]tabActivity Cost[BT] WHERE department = 'Marketing' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Cost"
      ],
      "question": "List all activity costs along with their activity type and billing rate.",
      "fields": [
        "activity_type",
        "billing_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT activity_type, billing_rate FROM [BT]tabActivity Cost[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Cost"
      ],
      "question": "Show me activity cost records assigned to employee John Doe.",
      "fields": [
        "employee",
        "activity_type",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT activity_type, billing_rate, costing_rate FROM [BT]tabActivity Cost[BT] WHERE employee = 'John Doe' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Cost"
      ],
      "question": "I need to know which department has the highest activity costing rate.",
      "fields": [
        "department",
        "costing_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT department, costing_rate FROM [BT]tabActivity Cost[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Cost"
      ],
      "question": "Can you pull up all activity costs with missing employee information?",
      "fields": [
        "activity_type",
        "billing_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT activity_type, billing_rate FROM [BT]tabActivity Cost[BT] WHERE employee = ' ' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Cost"
      ],
      "question": "Get the billing and costing rates for all activities involving the sales team.",
      "fields": [
        "department",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT billing_rate, costing_rate FROM [BT]tabActivity Cost[BT] WHERE department = 'Sales' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Cost"
      ],
      "question": "Do we have any activities without a defined billing rate?",
      "fields": [
        "activity_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT activity_type FROM [BT]tabActivity Cost[BT] WHERE billing_rate = ' ' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Cost"
      ],
      "question": "Fetch all records where activity type is 'Consulting' along with their rates.",
      "fields": [
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT billing_rate, costing_rate FROM [BT]tabActivity Cost[BT] WHERE activity_type = 'Consulting' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Cost"
      ],
      "question": "Which employees have activities listed with both billing and costing rates?",
      "fields": [
        "employee",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT employee FROM [BT]tabActivity Cost[BT] WHERE billing_rate != 0 AND costing_rate != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Cost"
      ],
      "question": "I'd like a summary of activity costs grouped by department.",
      "fields": [
        "department",
        "billing_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT department, SUM(billing_rate) as total_billing FROM [BT]tabActivity Cost[BT] GROUP BY department''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Cost"
      ],
      "question": "What are the titles used in activity cost entries and their associated employees?",
      "fields": [
        "title",
        "employee"
      ]
    },
    "output": "frappe.db.sql('''SELECT title, employee FROM [BT]tabActivity Cost[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Period"
      ],
      "question": "Can I see the scorecard data for all suppliers for the current quarter?",
      "fields": [
        "supplier",
        "total_score",
        "start_date",
        "end_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, total_score, start_date, end_date FROM [BT]tabSupplier Scorecard Period[BT] WHERE start_date >= DATE_SUB(DATE_SUB(CURDATE(), INTERVAL DAYOFYEAR(CURDATE()) - 1 DAY), INTERVAL (QUARTER(CURDATE())-1) * 3 MONTH) AND end_date <= LAST_DAY(DATE_ADD(DATE_SUB(CURDATE(), INTERVAL DAYOFYEAR(CURDATE()) - 1 DAY), INTERVAL (QUARTER(CURDATE()) * 3 - 1) MONTH), as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Period"
      ],
      "question": "Show me which suppliers have the highest period score this year.",
      "fields": [
        "supplier",
        "total_score",
        "start_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, total_score FROM [BT]tabSupplier Scorecard Period[BT] WHERE YEAR(start_date) = YEAR(CURDATE()) ORDER BY total_score DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Period"
      ],
      "question": "I want to track supplier performance from January to March.",
      "fields": [
        "supplier",
        "total_score",
        "start_date",
        "end_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, total_score, start_date, end_date FROM [BT]tabSupplier Scorecard Period[BT] WHERE start_date <= MAKEDATE(YEAR(CURDATE()), 90) AND end_date >= MAKEDATE(YEAR(CURDATE()), 1)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Period"
      ],
      "question": "What is the score of supplier Alpha Industries for last fiscal period?",
      "fields": [
        "supplier",
        "total_score",
        "start_date",
        "end_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, total_score, start_date, end_date FROM [BT]tabSupplier Scorecard Period[BT] WHERE supplier = 'Alpha Industries' ORDER BY end_date DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Period"
      ],
      "question": "List all suppliers who scored below 80% in the last evaluation period.",
      "fields": [
        "name",
        "supplier",
        "total_score"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, total_score FROM [BT]tabSupplier Scorecard Period[BT] WHERE total_score < 80 ORDER BY end_date DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Period"
      ],
      "question": "Give me the performance details of suppliers who were evaluated using scorecard SSP-2024.",
      "fields": [
        "name",
        "supplier",
        "total_score",
        "scorecard"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,supplier, total_score FROM [BT]tabSupplier Scorecard Period[BT] WHERE scorecard = 'SSP-2024' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Period"
      ],
      "question": "Which suppliers were evaluated using custom variables this quarter?",
      "fields": [
        "name",
        "supplier",
        "variables",
        "start_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, variables FROM [BT]tabSupplier Scorecard Period[BT] WHERE variables != '' AND QUARTER(start_date) = QUARTER(CURDATE()) AND YEAR(start_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Period"
      ],
      "question": "Show me all scorecard periods that were created using the PU-SSP series.",
      "fields": [
        "name",
        "supplier",
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,supplier, naming_series FROM [BT]tabSupplier Scorecard Period[BT] WHERE naming_series LIKE 'PU-SSP%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Period"
      ],
      "question": "What was the evaluation period for supplier Global Textiles in 2023?",
      "fields": [
        "supplier",
        "start_date",
        "end_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT start_date, end_date FROM [BT]tabSupplier Scorecard Period[BT] WHERE supplier = 'Global Textiles' AND start_date >= '2023-01-01' AND end_date <= '2023-12-31' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Period"
      ],
      "question": "Retrieve the supplier scorecard period that was amended recently.",
      "fields": [
        "supplier",
        "amended_from",
        "total_score"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, amended_from, total_score FROM [BT]tabSupplier Scorecard Period[BT] WHERE amended_from != ' ' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Period"
      ],
      "question": "List all suppliers along with their criteria and total scores for the latest period.",
      "fields": [
        "supplier",
        "criteria",
        "total_score"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, criteria, total_score FROM [BT]tabSupplier Scorecard Period[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Period"
      ],
      "question": "Can I see the scorecard data for all suppliers for the current quarter?",
      "fields": [
        "supplier",
        "total_score",
        "start_date",
        "end_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, total_score, start_date, end_date FROM [BT]tabSupplier Scorecard Period[BT] WHERE start_date >= DATE_SUB(DATE_SUB(CURDATE(), INTERVAL DAYOFYEAR(CURDATE()) - 1 DAY), INTERVAL (QUARTER(CURDATE())-1) * 3 MONTH) AND end_date <= LAST_DAY(DATE_ADD(DATE_SUB(CURDATE(), INTERVAL DAYOFYEAR(CURDATE()) - 1 DAY), INTERVAL (QUARTER(CURDATE()) * 3 - 1) MONTH), as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Period"
      ],
      "question": "Show me which suppliers have the highest period score this year.",
      "fields": [
        "supplier",
        "total_score",
        "start_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, total_score FROM [BT]tabSupplier Scorecard Period[BT] WHERE YEAR(start_date) = YEAR(CURDATE()) ORDER BY total_score DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Period"
      ],
      "question": "List all suppliers who scored below 80% in the last evaluation period.",
      "fields": [
        "supplier",
        "total_score",
        "period"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, total_score FROM [BT]tabSupplier Scorecard Period[BT] WHERE total_score < 80 AND period = (SELECT MAX(period) FROM [BT]tabSupplier Scorecard Period[BT])''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Period"
      ],
      "question": "Can I review the scorecard criteria used for supplier evaluations?",
      "fields": [
        "criteria"
      ]
    },
    "output": "frappe.db.sql('''SELECT criteria FROM [BT]tabSupplier Scorecard Period[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Criteria"
      ],
      "question": "Which scoring criteria have score exactly 0?",
      "fields": [
        "criteria_name",
        "max_score"
      ]
    },
    "output": "frappe.db.sql('''SELECT criteria_name, max_score FROM [BT]tabSupplier Scorecard Criteria[BT] WHERE max_score = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Criteria"
      ],
      "question": "Get all scorecard criteria with formula containing the word 'average'.",
      "fields": [
        "criteria_name",
        "formula"
      ]
    },
    "output": "frappe.db.sql('''SELECT criteria_name, formula FROM [BT]tabSupplier Scorecard Criteria[BT] WHERE formula LIKE '%average%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Criteria"
      ],
      "question": "How many scoring criteria have weight above 30?",
      "fields": [
        "weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSupplier Scorecard Criteria[BT] WHERE weight > 30''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Criteria"
      ],
      "question": "List all criteria with their scores and weights for evaluation this month.",
      "fields": [
        "criteria_name",
        "max_score",
        "weight",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT criteria_name, max_score, weight FROM [BT]tabSupplier Scorecard Criteria[BT] WHERE MONTH(creation) = MONTH(CURDATE()) AND YEAR(creation) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "List all variable names used in the supplier scorecard setup.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Get the value assigned to the 'on-time performance' scoring variable.",
      "fields": [
        "name",
        "value"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, value FROM [BT]tabSupplier Scorecard[BT] WHERE name = 'On-Time Performance' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "How many variables are defined for supplier performance scoring?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) as count FROM [BT]tabSupplier Scorecard[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "List all scoring variable labels along with their paths.",
      "fields": [
        "label",
        "path"
      ]
    },
    "output": "frappe.db.sql('''SELECT label, path FROM [BT]tabSupplier Scorecard[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Fetch the full record for the variable 'Delivery Delay'.",
      "fields": [
        "*"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier Scorecard[BT] WHERE name = 'Delivery Delay' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Show the parameter names and values used in the last supplier evaluation.",
      "fields": [
        "param_name",
        "param_value",
        "evaluation_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT param_name, param_value FROM [BT]tabSupplier Scorecard[BT] WHERE evaluation_date = (SELECT MAX(evaluation_date) FROM [BT]tabSupplier Scorecard[BT])''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "How many variables use 'variance' in their parameter name?",
      "fields": [
        "param_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSupplier Scorecard[BT] WHERE param_name LIKE '%variance%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Get the path for the scoring variable named 'Defect Rate'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT] WHERE name = 'Defect Rate' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "List all variable labels and descriptions.",
      "fields": [
        "name",
        "supplier_description"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_description FROM [BT]tabSupplier Scorecard[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Retrieve the full document for the variable 'Compliance Score'.",
      "fields": [
        "name",
        "supplier_description"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier Scorecard[BT] WHERE name = 'Compliance Score' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Give me variable labels where the description is empty.",
      "fields": [
        "name",
        "supplier_description"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_description FROM [BT]tabSupplier Scorecard[BT] WHERE supplier_description in '[null, '']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Get scoring variables where path contains 'timeliness'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT] WHERE path LIKE '%timeliness%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Fetch the latest scoring variables with values.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Find the variables used for evaluating supplier responsiveness.",
      "fields": [
        "name",
        "supplier_description"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_description FROM [BT]tabSupplier Scorecard[BT] WHERE supplier_description LIKE '%responsiveness%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Retrieve the complete details of the variable 'Return Rate'.",
      "fields": [
        "name",
        "supplier_description"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier Scorecard[BT] WHERE name = 'Return Rate' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Show variables whose value is between 20 and 60.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT] WHERE value between '[20, 60]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Which variables reference 'Sunrise Ltd' in their description?",
      "fields": [
        "name",
        "supplier_description"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_description FROM [BT]tabSupplier Scorecard[BT] WHERE supplier_description LIKE '%Sunrise Ltd%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "List scoring variables with parameter names and values.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Give me all scoring variables where value exceeds 80.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT] WHERE value > 80''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "List all variable labels used in supplier scorecards.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Get the parameter name for the variable 'Lead Time'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT] WHERE name = 'Lead Time' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Count how many scorecard variables are defined.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSupplier Scorecard[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Show me all custom variables in the supplier scorecard.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT] WHERE is_custom = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Retrieve the complete record for the 'On-Time Delivery' variable.",
      "fields": [
        "name",
        "supplier_description"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier Scorecard[BT] WHERE name = 'On-Time Delivery' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Get all variable labels and their paths.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Which variables don’t have any descriptions?",
      "fields": [
        "name",
        "supplier_description"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_description FROM [BT]tabSupplier Scorecard[BT] WHERE supplier_description in '[null, '']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Give me all standard variables that are not marked as custom.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT] WHERE is_custom = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Find the variable used to calculate supplier quality score.",
      "fields": [
        "name",
        "supplier_description"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_description FROM [BT]tabSupplier Scorecard[BT] WHERE supplier_description LIKE '%quality score%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Retrieve all variables along with path and parameter name.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Get the full details of the variable 'Defect Rate'.",
      "fields": [
        "name",
        "supplier_description"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier Scorecard[BT] WHERE name = 'Defect Rate' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Which variables include 'timeliness' in the path?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT] WHERE path LIKE '%timeliness%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "How many variables have 'supplier' in their description?",
      "fields": [
        "supplier_description"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSupplier Scorecard[BT] WHERE supplier_description LIKE '%supplier%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Give me all scorecard variables and their descriptions.",
      "fields": [
        "name",
        "supplier_description"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_description FROM [BT]tabSupplier Scorecard[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "List all parameter names used in scorecard variables.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Fetch all variable labels that relate to lead time.",
      "fields": [
        "name",
        "supplier_description"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_description FROM [BT]tabSupplier Scorecard[BT] WHERE supplier_description LIKE '%lead time%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Retrieve full document of the variable labeled 'Compliance'.",
      "fields": [
        "name",
        "supplier_description"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier Scorecard[BT] WHERE name = 'Compliance' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Which variables contain 'delivery' in their path?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT] WHERE path LIKE '%delivery%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Give me the parameter name for 'Cost Efficiency' variable.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT] WHERE name = 'Cost Efficiency' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "List all suppliers with their current status and scores.",
      "fields": [
        "supplier",
        "status",
        "supplier_score"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, status, supplier_score FROM [BT]tabSupplier Scorecard[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "How many suppliers have been evaluated this quarter?",
      "fields": [
        "supplier",
        "evaluation_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(DISTINCT supplier) as count FROM [BT]tabSupplier Scorecard[BT] WHERE QUARTER(evaluation_date) = QUARTER(CURDATE()) AND YEAR(evaluation_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Get the scoring setup used for supplier 'FreshMart Pvt Ltd'.",
      "fields": [
        "scoring_setup"
      ]
    },
    "output": "frappe.db.sql('''SELECT scoring_setup FROM [BT]tabSupplier Scorecard[BT] WHERE supplier = 'FreshMart Pvt Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Fetch the scorecard document for supplier 'Green Supplies Co'.",
      "fields": [
        "supplier",
        "supplier_score",
        "status",
        "period",
        "criteria"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier Scorecard[BT] WHERE name = 'Green Supplies Co' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Which suppliers are flagged to prevent both RFQs and POs?",
      "fields": [
        "supplier",
        "prevent_rfqs",
        "prevent_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, prevent_rfqs, prevent_pos FROM [BT]tabSupplier Scorecard[BT] WHERE prevent_rfqs = 1 AND prevent_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "List suppliers with monthly evaluation period.",
      "fields": [
        "supplier",
        "period"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, period FROM [BT]tabSupplier Scorecard[BT] WHERE period = 'Monthly' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Who are the employees notified when supplier scores drop?",
      "fields": [
        "supplier",
        "employee",
        "notify_employee"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, employee FROM [BT]tabSupplier Scorecard[BT] WHERE notify_employee = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Which suppliers have RFQs blocked based on scorecard?",
      "fields": [
        "supplier",
        "prevent_rfqs"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, prevent_rfqs FROM [BT]tabSupplier Scorecard[BT] WHERE prevent_rfqs = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Get full scorecard for 'Alpha Metals Ltd'.",
      "fields": [
        "supplier",
        "supplier_score",
        "criteria_setup",
        "standings"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier Scorecard[BT] WHERE name = 'Alpha Metals Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Find suppliers with custom weighting functions in use.",
      "fields": [
        "supplier",
        "weighting_function"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, weighting_function FROM [BT]tabSupplier Scorecard[BT] WHERE weighting_function != ' ' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Get a list of all active scorecards where vendors are notified.",
      "fields": [
        "supplier",
        "notify_supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, notify_supplier FROM [BT]tabSupplier Scorecard[BT] WHERE notify_supplier = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Count the number of suppliers currently blocked from POs.",
      "fields": [
        "prevent_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSupplier Scorecard[BT] WHERE prevent_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "What is the status of 'Delta Construction Supply'?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT status FROM [BT]tabSupplier Scorecard[BT] WHERE supplier = 'Delta Construction Supply' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "List all supplier scorecards evaluated annually.",
      "fields": [
        "supplier",
        "period"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, period FROM [BT]tabSupplier Scorecard[BT] WHERE period = 'Yearly' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Retrieve scorecards showing standings for performance evaluations.",
      "fields": [
        "supplier",
        "standings"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, standings FROM [BT]tabSupplier Scorecard[BT] WHERE standings != ' ' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "List suppliers and their scorecard status indicators.",
      "fields": [
        "supplier",
        "status",
        "indicator_color"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, status, indicator_color FROM [BT]tabSupplier Scorecard[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Which suppliers are warned before sending purchase orders?",
      "fields": [
        "supplier",
        "warn_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, warn_pos FROM [BT]tabSupplier Scorecard[BT] WHERE warn_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Retrieve the full scorecard for 'Industrial Tools Co'.",
      "fields": [
        "supplier",
        "supplier_score",
        "criteria",
        "scoring_setup"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier Scorecard[BT] WHERE name = 'Industrial Tools Co' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "List suppliers with status set as 'Under Review'.",
      "fields": [
        "supplier",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, status FROM [BT]tabSupplier Scorecard[BT] WHERE status = 'Under Review' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Which suppliers are prevented from both RFQs and warned on POs?",
      "fields": [
        "supplier",
        "prevent_rfqs",
        "warn_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, prevent_rfqs, warn_pos FROM [BT]tabSupplier Scorecard[BT] WHERE prevent_rfqs = 1 AND warn_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "List all supplier standings with their color codes.",
      "fields": [
        "standing_name",
        "standing_color"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, standing_color FROM [BT]tabSupplier Scorecard Standing[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Which standings have 'green' as their standing color?",
      "fields": [
        "standing_name",
        "standing_color"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, standing_color FROM [BT]tabSupplier Scorecard Standing[BT] WHERE standing_color = 'Green' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Count how many scorecard standings prevent both RFQs and POs.",
      "fields": []
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSupplier Scorecard Standing[BT] WHERE prevent_rfqs = 1 AND prevent_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Get full details of the standing named 'At Risk'.",
      "fields": [
        "standing_name",
        "standing_color",
        "min_grade",
        "max_grade"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier Scorecard Standing[BT] WHERE name = 'At Risk' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Which standings have notification for employees enabled?",
      "fields": [
        "standing_name",
        "notify_employee"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, notify_employee FROM [BT]tabSupplier Scorecard Standing[BT] WHERE notify_employee = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "List scorecard standings where min grade is above 80%.",
      "fields": [
        "standing_name",
        "min_grade"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, min_grade FROM [BT]tabSupplier Scorecard Standing[BT] WHERE min_grade > 80''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Get min and max grade ranges for each standing.",
      "fields": [
        "standing_name",
        "min_grade",
        "max_grade"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, min_grade, max_grade FROM [BT]tabSupplier Scorecard Standing[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Who is the employee linked to 'Low Priority' standing?",
      "fields": [
        "employee_link"
      ]
    },
    "output": "frappe.db.sql('''SELECT employee_link FROM [BT]tabSupplier Scorecard Standing[BT] WHERE standing_name = 'Low Priority' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Find standings where RFQs are only warned, not blocked.",
      "fields": [
        "standing_name",
        "warn_rfqs",
        "prevent_rfqs"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, warn_rfqs, prevent_rfqs FROM [BT]tabSupplier Scorecard Standing[BT] WHERE warn_rfqs = 1 AND prevent_rfqs = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Show all standings that have supplier notifications enabled.",
      "fields": [
        "standing_name",
        "notify_supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, notify_supplier FROM [BT]tabSupplier Scorecard Standing[BT] WHERE notify_supplier = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Get the full record of standing called 'Critical Risk'.",
      "fields": [
        "standing_name",
        "min_grade",
        "max_grade",
        "prevent_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier Scorecard Standing[BT] WHERE name = 'Critical Risk' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Which standings show red color and low grades?",
      "fields": [
        "standing_name",
        "standing_color",
        "min_grade"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, standing_color, min_grade FROM [BT]tabSupplier Scorecard Standing[BT] WHERE standing_color = 'Red' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Get all standings with both warn_pos and prevent_pos off.",
      "fields": [
        "standing_name",
        "warn_pos",
        "prevent_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, warn_pos, prevent_pos FROM [BT]tabSupplier Scorecard Standing[BT] WHERE warn_pos = 0 AND prevent_pos = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "How many total standings are currently defined?",
      "fields": []
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSupplier Scorecard Standing[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Get the employee notified for 'Yellow' standing level.",
      "fields": [
        "employee_link"
      ]
    },
    "output": "frappe.db.sql('''SELECT employee_link FROM [BT]tabSupplier Scorecard Standing[BT] WHERE standing_color = 'Yellow' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "List standings that prevent RFQs but not POs.",
      "fields": [
        "standing_name",
        "prevent_rfqs",
        "prevent_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, prevent_rfqs, prevent_pos FROM [BT]tabSupplier Scorecard Standing[BT] WHERE prevent_rfqs = 1 AND prevent_pos = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Get standings that trigger employee alerts.",
      "fields": [
        "standing_name",
        "notify_employee",
        "employee_link"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, employee_link FROM [BT]tabSupplier Scorecard Standing[BT] WHERE notify_employee = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Which standings show warning for POs but not prevention?",
      "fields": [
        "standing_name",
        "warn_pos",
        "prevent_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, warn_pos, prevent_pos FROM [BT]tabSupplier Scorecard Standing[BT] WHERE warn_pos = 1 AND prevent_pos = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Get the full details of the standing 'Preferred Supplier'.",
      "fields": [
        "standing_name",
        "standing_color",
        "min_grade",
        "notify_supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier Scorecard Standing[BT] WHERE name = 'Preferred Supplier' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "List all scorecard standings with their min and max grades.",
      "fields": [
        "name",
        "standing_name",
        "min_grade",
        "max_grade"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,standing_name, min_grade, max_grade FROM [BT]tabSupplier Scorecard Standing[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Get the employee linked to 'Critical Risk' standing.",
      "fields": [
        "employee_link"
      ]
    },
    "output": "frappe.db.sql('''SELECT employee_link FROM [BT]tabSupplier Scorecard Standing[BT] WHERE standing_name = 'Critical Risk' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Show me standings where RFQs are warned but not blocked.",
      "fields": [
        "name",
        "standing_name",
        "warn_rfqs",
        "prevent_rfqs"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, warn_rfqs, prevent_rfqs FROM [BT]tabSupplier Scorecard Standing[BT] WHERE warn_rfqs = 1 AND prevent_rfqs = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Fetch all standings with green color and max grade ≤ 90%.",
      "fields": [
        "name",
        "standing_name",
        "standing_color",
        "max_grade"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,standing_name, standing_color, max_grade FROM [BT]tabSupplier Scorecard Standing[BT] WHERE standing_color = 'Green' AND max_grade <= 90''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Retrieve full record for 'At Risk' standing.",
      "fields": [
        "standing_name",
        "min_grade",
        "max_grade",
        "standing_color",
        "prevent_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier Scorecard Standing[BT] WHERE name = 'At Risk' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Which standings have notifications enabled for employees?",
      "fields": [
        "standing_name",
        "notify_employee"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, notify_employee FROM [BT]tabSupplier Scorecard Standing[BT] WHERE notify_employee = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "List all standings that trigger supplier notifications.",
      "fields": [
        "standing_name",
        "notify_supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, notify_supplier FROM [BT]tabSupplier Scorecard Standing[BT] WHERE notify_supplier = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Which standings have a minimum grade above 85%?",
      "fields": [
        "standing_name",
        "min_grade"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, min_grade FROM [BT]tabSupplier Scorecard Standing[BT] WHERE min_grade > 85''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "List standings with yellow, orange, or red colors.",
      "fields": [
        "standing_name",
        "standing_color"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, standing_color FROM [BT]tabSupplier Scorecard Standing[BT] WHERE standing_color in '['Yellow', 'Orange', 'Red']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Get scorecard standings that prevent RFQs.",
      "fields": [
        "standing_name",
        "prevent_rfqs"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, prevent_rfqs FROM [BT]tabSupplier Scorecard Standing[BT] WHERE prevent_rfqs = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Fetch all standings with no warnings or blocks on RFQs/POs.",
      "fields": [
        "standing_name",
        "warn_rfqs",
        "warn_pos",
        "prevent_rfqs",
        "prevent_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, warn_rfqs, warn_pos, prevent_rfqs, prevent_pos FROM [BT]tabSupplier Scorecard Standing[BT] WHERE warn_rfqs = 0 AND warn_pos = 0 AND prevent_rfqs = 0 AND prevent_pos = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "How many total supplier scorecard standings are configured?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSupplier Scorecard Standing[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Show me standings where blue color is assigned and there are no restrictions.",
      "fields": [
        "standing_name",
        "standing_color",
        "warn_rfqs",
        "prevent_rfqs",
        "warn_pos",
        "prevent_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, standing_color FROM [BT]tabSupplier Scorecard Standing[BT] WHERE standing_color = 'Blue' AND warn_rfqs = 0 AND prevent_rfqs = 0 AND warn_pos = 0 AND prevent_pos = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Retrieve standings that block purchase orders and have red color.",
      "fields": [
        "standing_name",
        "prevent_pos",
        "standing_color"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, prevent_pos, standing_color FROM [BT]tabSupplier Scorecard Standing[BT] WHERE prevent_pos = 1 AND standing_color = 'Red' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Get complete record for the standing 'Preferred Partner'.",
      "fields": [
        "standing_name",
        "min_grade",
        "max_grade",
        "notify_employee",
        "notify_supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier Scorecard Standing[BT] WHERE name = 'Preferred Partner' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "List scorecard standings with employee notification set.",
      "fields": [
        "standing_name",
        "employee_link"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, employee_link FROM [BT]tabSupplier Scorecard Standing[BT] WHERE notify_employee = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Which standings use a red indicator and warn on POs?",
      "fields": [
        "standing_name",
        "standing_color",
        "warn_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT standing_name, standing_color, warn_pos FROM [BT]tabSupplier Scorecard Standing[BT] WHERE standing_color = 'Red' AND warn_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard Standing"
      ],
      "question": "Give me all standings that prevent both RFQs and POs.",
      "fields": [
        "name",
        "standing_name",
        "prevent_rfqs",
        "prevent_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,standing_name, prevent_rfqs, prevent_pos FROM [BT]tabSupplier Scorecard Standing[BT] WHERE prevent_rfqs = 1 AND prevent_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "List all variable labels and parameter names used for supplier evaluation.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Count the number of scoring variables currently in the system.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSupplier Scorecard[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "What is the value for the variable labeled 'On-Time Delivery Rate'?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT] WHERE name = 'On-Time Delivery Rate' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Fetch all scoring variables associated with the supplier 'Sunrise Ltd'.",
      "fields": [
        "name",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT] WHERE supplier = 'Sunrise Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "List the parameter names and paths of all scoring variables.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Get scoring variables where value is greater than 80.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT] WHERE value > 80''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Show all supplier scoring variables and their values.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "What path is set for the variable 'Defect Ratio'?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT] WHERE name = 'Defect Ratio' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Get all variables used to track supplier lead time.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT] WHERE path LIKE '%lead_time%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Scorecard"
      ],
      "question": "Which scoring variables include 'compliance' in their label?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Scorecard[BT] WHERE name LIKE '%compliance%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List all scrap item codes along with their stock quantity.",
      "fields": [
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM [BT]tabItem[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "What is the rate of 'Aluminum Scrap' in the BOM?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabItem[BT] WHERE item_name = 'Aluminum Scrap' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Count how many scrap items are listed in total.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabItem[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Fetch the full record for scrap item 'Iron Chips'.",
      "fields": [
        "item_code",
        "item_name",
        "stock_uom"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabItem[BT] WHERE name = 'Iron Chips' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List all BOM scrap items where base rate is greater than 5.",
      "fields": [
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM [BT]tabItem[BT] WHERE base_rate > 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Get scrap items with base amount above 100.",
      "fields": [
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM [BT]tabItem[BT] WHERE base_amount > 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Fetch scrap item names that contain the word 'scrap'.",
      "fields": [
        "item_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_name FROM [BT]tabItem[BT] WHERE item_name LIKE '%scrap%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "How many scrap items have a quantity over 10 units?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabItem[BT] WHERE stock_qty > 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Get the base rate for scrap item code 'SCRP-0003'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabItem[BT] WHERE item_code = 'SCRP-0003' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Fetch full document for item code 'SCRP-0021'.",
      "fields": [
        "item_code",
        "item_name",
        "stock_uom"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabItem[BT] WHERE name = 'SCRP-0021' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List all scrap items with amount less than 50.",
      "fields": [
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM [BT]tabItem[BT] WHERE amount < 50''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Get all scrap items in 'kg' unit of measure.",
      "fields": [
        "item_code",
        "stock_uom"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code, stock_uom FROM [BT]tabItem[BT] WHERE stock_uom = 'kg' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show me the scrap quantities for item code 'SCRP-0090'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabItem[BT] WHERE item_code = 'SCRP-0090' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Retrieve base amount and rate for all scrap items.",
      "fields": [
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM [BT]tabItem[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Fetch all items categorized under 'non-reusable materials'.",
      "fields": [
        "item_code",
        "item_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code, item_name FROM [BT]tabItem[BT] WHERE item_name LIKE '%non-reusable%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Give me the list of scrap items for BOM-0043.",
      "fields": [
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM [BT]tabItem[BT] WHERE parent = 'BOM-0043' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Fetch items from BOMs configured to send scrap to Warehouse-S1.",
      "fields": [
        "item_code",
        "item_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code, item_name FROM [BT]tabItem[BT] WHERE item_name LIKE '%Warehouse-S1%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "What scrap items were generated during the last BOM update?",
      "fields": [
        "item_code",
        "item_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code, item_name FROM [BT]tabItem[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Retrieve the full document for scrap item code 'SCRP-0010'.",
      "fields": [
        "item_code",
        "item_name",
        "stock_uom"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabItem[BT] WHERE name = 'SCRP-0010' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Get the rate and quantity of 'Steel Scrap' in the BOM.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabItem[BT] WHERE item_name = 'Steel Scrap' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tax Withholding Category"
      ],
      "question": "List all vouchers that had tax withheld last month.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT 'Tax Withholding', name FROM [BT]tabTax Withholding Category[BT] WHERE posting_date between '['2024-04-01', '2024-04-30']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Journal Entry"
      ],
      "question": "Count the number of withheld tax vouchers in this quarter.",
      "fields": [
        "name",
        "posting_date",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabJournal Entry[BT] WHERE tax_withholding_category IS NOT NULL AND QUARTER(posting_date) = QUARTER(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tax Withholding Category"
      ],
      "question": "Fetch all vouchers with taxable amount greater than 5000.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabTax Withholding Category[BT] WHERE taxable_amount > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tax Withholding Category"
      ],
      "question": "Get the taxable amount for voucher INV-0456.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabTax Withholding Category[BT] WHERE name = 'INV-0456' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tax Withholding Category"
      ],
      "question": "Was any tax withheld on Purchase Invoice PI-1005?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabTax Withholding Category[BT] WHERE name = 'PI-1005' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Get all vouchers for supplier payments this week.",
      "fields": [
        "name",
        "party_type",
        "party",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, party_type, party, posting_date FROM [BT]tabPayment Entry[BT] WHERE party_type = 'Supplier' AND YEARWEEK(posting_date, 1) = YEARWEEK(CURDATE(), 1)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tax Withholding Category"
      ],
      "question": "Retrieve taxable amount for voucher PV-2023-88.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabTax Withholding Category[BT] WHERE name = 'PV-2023-88' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tax Withholding Category"
      ],
      "question": "Get full document for withheld tax voucher INV-0456.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabTax Withholding Category[BT] WHERE name = 'INV-0456' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Territory"
      ],
      "question": "What's the name of the territory managed by Arun?",
      "fields": [
        "territory_name",
        "territory_manager"
      ]
    },
    "output": "frappe.db.sql('''SELECT territory_name FROM [BT]tabTerritory[BT] WHERE territory_manager = 'Arun' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Territory"
      ],
      "question": "Which territory reports to West Zone?",
      "fields": [
        "name",
        "territory_name",
        "parent_territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,territory_name, parent_territory FROM [BT]tabTerritory[BT] WHERE parent_territory = 'West Zone' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Territory"
      ],
      "question": "List all territories that are marked as groups.",
      "fields": [
        "name",
        "territory_name",
        "is_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,territory_name, is_group FROM [BT]tabTerritory[BT] WHERE is_group = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Territory"
      ],
      "question": "Show me the left and right values for the Central region territory.",
      "fields": [
        "lft",
        "rgt"
      ]
    },
    "output": "frappe.db.sql('''SELECT lft, rgt FROM [BT]tabTerritory[BT] WHERE territory_name = 'Central' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Territory"
      ],
      "question": "Can you find the previous parent of the 'Southwest India' territory?",
      "fields": [
        "old_parent"
      ]
    },
    "output": "frappe.db.sql('''SELECT old_parent FROM [BT]tabTerritory[BT] WHERE territory_name = 'Southwest India' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Territory"
      ],
      "question": "Is East India a parent territory or part of another territory?",
      "fields": [
        "parent_territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT parent_territory FROM [BT]tabTerritory[BT] WHERE territory_name = 'East India' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Territory"
      ],
      "question": "Which territories have assigned managers?",
      "fields": [
        "name",
        "territory_name",
        "territory_manager"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,territory_name, territory_manager FROM [BT]tabTerritory[BT] WHERE territory_manager not '=' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Territory"
      ],
      "question": "Find all territories under 'India' that are not groups.",
      "fields": [
        "name",
        "territory_name",
        "parent_territory",
        "is_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,territory_name FROM [BT]tabTerritory[BT] WHERE parent_territory = 'India' AND is_group = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Territory"
      ],
      "question": "I want to see all target details linked to the territory 'North Zone'.",
      "fields": [
        "targets"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabTerritory[BT] WHERE name = 'North Zone' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Territory"
      ],
      "question": "Get the hierarchy position (lft and rgt) for the territory named 'Asia'.",
      "fields": [
        "lft",
        "rgt"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabTerritory[BT] WHERE name = 'Asia' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Territory"
      ],
      "question": "Does 'Uttar Pradesh' territory belong to any parent group?",
      "fields": [
        "parent_territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabTerritory[BT] WHERE name = 'Uttar Pradesh' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Territory"
      ],
      "question": "Which territory is managed by the sales person Rajeev?",
      "fields": [
        "territory_name",
        "territory_manager"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabTerritory[BT] WHERE territory_manager = 'Rajeev' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Territory"
      ],
      "question": "List all territories that belong to the Asia group.",
      "fields": [
        "name",
        "territory_name",
        "parent_territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,territory_name FROM [BT]tabTerritory[BT] WHERE parent_territory = 'Asia' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Territory"
      ],
      "question": "Count the total number of territory groups defined.",
      "fields": []
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabTerritory[BT] WHERE is_group = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Territory"
      ],
      "question": "Count how many territories do not belong to any parent.",
      "fields": []
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabTerritory[BT] WHERE parent_territory is 'not set' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Territory"
      ],
      "question": "Show me all territories that are leaf nodes (not groups).",
      "fields": [
        "name",
        "territory_name",
        "is_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,territory_name FROM [BT]tabTerritory[BT] WHERE is_group = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Territory"
      ],
      "question": "Get all fields for the territory record 'South India'.",
      "fields": [
        "territory_name",
        "parent_territory",
        "is_group",
        "territory_manager",
        "lft",
        "rgt",
        "old_parent",
        "targets"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabTerritory[BT] WHERE name = 'South India' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Territory"
      ],
      "question": "Find all territories that changed their parent in the last update.",
      "fields": [
        "name",
        "territory_name",
        "old_parent"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,territory_name, old_parent FROM [BT]tabTerritory[BT] WHERE old_parent not '=' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Territory"
      ],
      "question": "Get all parent-child mappings of territories.",
      "fields": [
        "name",
        "territory_name",
        "parent_territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,territory_name, parent_territory FROM [BT]tabTerritory[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Territory"
      ],
      "question": "List all territories where no manager is assigned.",
      "fields": [
        "name",
        "territory_name",
        "territory_manager"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,territory_name FROM [BT]tabTerritory[BT] WHERE territory_manager is 'not set' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What is the document type linked to advance entry ADV-9668?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT 'Purchase Invoice' FROM [BT]tabPurchase Invoice[BT] WHERE name = 'ADV-9668' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show all purchase invoices created in the current month.",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date FROM [BT]tabPurchase Invoice[BT] WHERE posting_date BETWEEN DATE_FORMAT(CURDATE(), '%Y-%m-01') AND LAST_DAY(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM"
      ],
      "question": "Is the unit 'Box' enabled in the system?",
      "fields": [
        "name",
        "enabled",
        "uom_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, enabled, uom_name FROM [BT]tabUOM[BT] WHERE uom_name = \"Box\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Serial No"
      ],
      "question": "Where is serial number 'SN-X1005' stored and what is its status?",
      "fields": [
        "name",
        "warehouse",
        "status",
        "serial_no"
      ]
    },
    "output": "frappe.db.sql('SELECT name, warehouse, status, serial_no FROM [BT]tabSerial No[BT] WHERE serial_no = \"SN-X1005\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Reconciliation"
      ],
      "question": "Which account was used for the last stock reconciliation?",
      "fields": [
        "name",
        "expense_account"
      ]
    },
    "output": "frappe.db.sql('SELECT name, expense_account FROM [BT]tabStock Reconciliation[BT] ORDER BY posting_date DESC LIMIT 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "List all active warehouses for the company 'HTS Pvt Ltd'.",
      "fields": [
        "name",
        "warehouse_name",
        "company"
      ]
    },
    "output": "frappe.db.sql('SELECT name, warehouse_name, company FROM [BT]tabWarehouse[BT] WHERE company = \"HTS Pvt Ltd\" AND disabled = 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM"
      ],
      "question": "List all enabled units of measurement used in transactions.",
      "fields": [
        "name",
        "uom_name",
        "enabled"
      ]
    },
    "output": "frappe.db.sql('SELECT name, uom_name, enabled FROM [BT]tabUOM[BT] WHERE enabled = 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "How can I list all payment entries made by customers this month?",
      "fields": [
        "name",
        "party",
        "payment_type",
        "party_type",
        "posting_date",
        "paid_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, party, payment_type, party_type, posting_date, paid_amount FROM [BT]tabPayment Entry[BT] WHERE payment_type = \"Receive\" AND party_type = \"Customer\" AND posting_date BETWEEN DATE_FORMAT(CURDATE(), \"%Y-%m-01\") AND LAST_DAY(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Journal Entry"
      ],
      "question": "Can you show me journal entries made for tax adjustments?",
      "fields": [
        "name",
        "company",
        "voucher_type",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, posting_date, company FROM [BT]tabJournal Entry[BT] WHERE voucher_type = \"Tax Adjustment\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Journal Entry"
      ],
      "question": "What types of information are stored in the Journal Entry doctype?",
      "fields": [
        "name",
        "voucher_type",
        "posting_date",
        "total_debit",
        "total_credit"
      ]
    },
    "output": "frappe.db.sql('SELECT name, voucher_type, posting_date, total_debit, total_credit FROM [BT]tabJournal Entry[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What details are maintained in the Purchase Invoice doctype?",
      "fields": [
        "name",
        "supplier",
        "posting_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT name, supplier, posting_date, grand_total FROM [BT]tabPurchase Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Where can I check system settings related to Purchase Invoices?",
      "fields": [
        "name",
        "company",
        "naming_series",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, naming_series, posting_date, company FROM [BT]tabPurchase Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Taxes and Charges"
      ],
      "question": "What kind of data is stored in the Sales Taxes and Charges doctype?",
      "fields": [
        "name",
        "charge_type",
        "account_head",
        "rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, charge_type, account_head, rate FROM [BT]tabSales Taxes and Charges[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Taxes and Charges"
      ],
      "question": "Where do I configure default settings for sales tax templates?",
      "fields": [
        "name",
        "charge_type",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT name, charge_type, description FROM [BT]tabSales Taxes and Charges[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Journal Entry"
      ],
      "question": "List all journal entries posted this month.",
      "fields": [
        "name",
        "posting_date",
        "company",
        "voucher_type",
        "total_debit",
        "total_credit"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, company, voucher_type, total_debit, total_credit FROM [BT]tabJournal Entry[BT] WHERE MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Pricing Rule"
      ],
      "question": "What data can I retrieve from Pricing Rule records?",
      "fields": [
        "name",
        "title",
        "apply_on",
        "rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, title, apply_on, rate FROM [BT]tabPricing Rule[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Pricing Rule"
      ],
      "question": "Where do I find configuration for discount logic in Pricing Rules?",
      "fields": [
        "name",
        "discount_amount",
        "apply_discount_on"
      ]
    },
    "output": "frappe.db.sql('SELECT name, apply_discount_on, discount_amount FROM [BT]tabPricing Rule[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tax Rule"
      ],
      "question": "What kind of filters are defined in Tax Rule records?",
      "fields": [
        "name",
        "billing_state",
        "shipping_state",
        "tax_category"
      ]
    },
    "output": "frappe.db.sql('SELECT name, tax_category, billing_state, shipping_state FROM [BT]tabTax Rule[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tax Rule"
      ],
      "question": "Where can I view rules applying to tax categories by state?",
      "fields": [
        "name",
        "tax_category",
        "billing_state"
      ]
    },
    "output": "frappe.db.sql('SELECT name, tax_category, billing_state FROM [BT]tabTax Rule[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Mode of Payment"
      ],
      "question": "Can you list all active payment modes used in transactions?",
      "fields": [
        "name",
        "mode_of_payment",
        "enabled"
      ]
    },
    "output": "frappe.db.sql('SELECT name, mode_of_payment, enabled FROM [BT]tabMode of Payment[BT] WHERE enabled = 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Mode of Payment"
      ],
      "question": "Where can I find all payment types like Cash or Bank?",
      "fields": [
        "name",
        "mode_of_payment",
        "type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, mode_of_payment, type FROM [BT]tabMode of Payment[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Account"
      ],
      "question": "Show me all group accounts used in the Chart of Accounts.",
      "fields": [
        "name",
        "account_name",
        "is_group"
      ]
    },
    "output": "frappe.db.sql('SELECT name, account_name, is_group FROM [BT]tabAccount[BT] WHERE is_group = 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Account"
      ],
      "question": "Where can I check account types and currency settings?",
      "fields": [
        "name",
        "account_type",
        "account_currency"
      ]
    },
    "output": "frappe.db.sql('SELECT name, account_type, account_currency FROM [BT]tabAccount[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Cost Center"
      ],
      "question": "List all active cost centers under a specific company.",
      "fields": [
        "name",
        "cost_center_name",
        "company"
      ]
    },
    "output": "frappe.db.sql('SELECT name, cost_center_name, company FROM [BT]tabCost Center[BT] WHERE disabled = 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Cost Center"
      ],
      "question": "How do I check if a cost center is a group node?",
      "fields": [
        "name",
        "cost_center_name",
        "is_group"
      ]
    },
    "output": "frappe.db.sql('SELECT name, cost_center_name, is_group FROM [BT]tabCost Center[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "What is the purpose of the Supplier doctype?",
      "fields": [
        "name",
        "supplier_name",
        "supplier_type",
        "supplier_group",
        "country"
      ]
    },
    "output": "frappe.db.sql('SELECT name, supplier_name, supplier_type, supplier_group, country FROM [BT]tabSupplier[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Where can I configure settings for Supplier?",
      "fields": [
        "name",
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_order",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.db.sql('SELECT name, supplier_name, allow_purchase_invoice_creation_without_purchase_order, allow_purchase_invoice_creation_without_purchase_receipt FROM [BT]tabSupplier[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "What is the purpose of the Purchase Order doctype?",
      "fields": [
        "name",
        "supplier",
        "company",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT name, supplier, company, grand_total FROM [BT]tabPurchase Order[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Where can I configure settings for Purchase Order?",
      "fields": [
        "name",
        "buying_price_list",
        "payment_terms_template"
      ]
    },
    "output": "frappe.db.sql('SELECT name, buying_price_list, payment_terms_template FROM [BT]tabPurchase Order[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Receipt"
      ],
      "question": "What is the purpose of the Purchase Receipt doctype?",
      "fields": [
        "name",
        "supplier",
        "company",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT name, supplier, company, grand_total FROM [BT]tabPurchase Receipt[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Receipt"
      ],
      "question": "Where can I configure settings for Purchase Receipt?",
      "fields": [
        "name",
        "buying_price_list",
        "payment_terms_template"
      ]
    },
    "output": "frappe.db.sql('SELECT name, buying_price_list, payment_terms_template FROM [BT]tabPurchase Receipt[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "What is the purpose of the Supplier Quotation doctype?",
      "fields": [
        "name",
        "supplier",
        "transaction_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT name, supplier, transaction_date, grand_total FROM [BT]tabSupplier Quotation[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Where can I configure settings for Supplier Quotation?",
      "fields": [
        "name",
        "buying_price_list",
        "payment_terms_template"
      ]
    },
    "output": "frappe.db.sql('SELECT name, buying_price_list, payment_terms_template FROM [BT]tabSupplier Quotation[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Request for Quotation"
      ],
      "question": "What is the purpose of the Request for Quotation doctype?",
      "fields": [
        "name",
        "transaction_date",
        "company",
        "suppliers"
      ]
    },
    "output": "frappe.db.sql('SELECT name, transaction_date, company, suppliers FROM [BT]tabRequest for Quotation[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Taxes and Charges"
      ],
      "question": "What kind of taxes are set in Purchase Taxes and Charges records?",
      "fields": [
        "name",
        "charge_type",
        "account_head",
        "rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, charge_type, account_head, rate FROM [BT]tabPurchase Taxes and Charges[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Taxes and Charges"
      ],
      "question": "Where can I configure settings for Purchase Taxes and Charges?",
      "fields": [
        "name",
        "category",
        "charge_type",
        "rate",
        "account_head"
      ]
    },
    "output": "frappe.db.sql('SELECT name, category, charge_type, rate, account_head FROM [BT]tabPurchase Taxes and Charges[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Project"
      ],
      "question": "Create a new project for client onboarding.",
      "fields": [
        "name",
        "project_name",
        "status",
        "priority"
      ]
    },
    "output": "frappe.db.sql('SELECT name, project_name, status, priority FROM [BT]tabProject[BT] WHERE project_name LIKE \"%client onboarding%\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Task"
      ],
      "question": "Assign a task to the development team.",
      "fields": [
        "name",
        "subject",
        "status",
        "department"
      ]
    },
    "output": "frappe.db.sql('SELECT name, subject, status, department FROM [BT]tabTask[BT] WHERE department = \"Development\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Task"
      ],
      "question": "What is the purpose of the Task doctype?",
      "fields": [
        "name",
        "subject",
        "status",
        "project"
      ]
    },
    "output": "frappe.db.sql('SELECT name, subject, status, project FROM [BT]tabTask[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Task"
      ],
      "question": "Where can I configure settings for Task?",
      "fields": [
        "name",
        "subject",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, subject, status FROM [BT]tabTask[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "BOM"
      ],
      "question": "What is the purpose of the BOM doctype?",
      "fields": [
        "name",
        "item",
        "quantity",
        "total_cost"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item, quantity, total_cost FROM [BT]tabBOM[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "BOM"
      ],
      "question": "Where can I configure settings for BOM?",
      "fields": [
        "name",
        "item",
        "is_default"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item, is_default FROM [BT]tabBOM[BT] WHERE is_default = 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "What is the purpose of the Work Order doctype?",
      "fields": [
        "name",
        "production_item",
        "bom_no",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, production_item, bom_no, status FROM [BT]tabWork Order[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "Where can I configure settings for Work Order?",
      "fields": [
        "name",
        "source_warehouse",
        "wip_warehouse",
        "fg_warehouse"
      ]
    },
    "output": "frappe.db.sql('SELECT name, source_warehouse, wip_warehouse, fg_warehouse FROM [BT]tabWork Order[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Production Plan"
      ],
      "question": "What is the purpose of the Production Plan doctype?",
      "fields": [
        "name",
        "company",
        "from_date",
        "to_date",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, company, from_date, to_date, status FROM [BT]tabProduction Plan[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Job Card"
      ],
      "question": "What is the purpose of the Job Card doctype?",
      "fields": [
        "name",
        "work_order",
        "employee",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, work_order, employee, status FROM [BT]tabJob Card[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Job Card"
      ],
      "question": "Show me all job cards with their associated work orders and start dates.",
      "fields": [
        "name",
        "work_order",
        "actual_start_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, work_order, actual_start_date FROM [BT]tabJob Card[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "List all employees with their email addresses and departments.",
      "fields": [
        "name",
        "employee_name",
        "company_email",
        "department"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, company_email, department FROM [BT]tabEmployee[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Get all active employees and their contact numbers.",
      "fields": [
        "name",
        "employee_name",
        "status",
        "cell_number"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, status, cell_number FROM [BT]tabEmployee[BT] WHERE status = \"Active\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Fetch email and phone details for each employee.",
      "fields": [
        "name",
        "employee_name",
        "company_email",
        "cell_number"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, company_email, cell_number FROM [BT]tabEmployee[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Department"
      ],
      "question": "List all departments in each company.",
      "fields": [
        "name",
        "department_name",
        "company"
      ]
    },
    "output": "frappe.db.sql('SELECT name, department_name, company FROM [BT]tabDepartment[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Department"
      ],
      "question": "Show me enabled and grouped departments.",
      "fields": [
        "name",
        "department_name",
        "company",
        "is_group"
      ]
    },
    "output": "frappe.db.sql('SELECT name, department_name, company, is_group FROM [BT]tabDepartment[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Designation"
      ],
      "question": "List all designations with their descriptions.",
      "fields": [
        "name",
        "designation_name",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT name, designation_name, description FROM [BT]tabDesignation[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Designation"
      ],
      "question": "Get names of all designations in the system.",
      "fields": [
        "name",
        "designation_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, designation_name FROM [BT]tabDesignation[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Fiscal Year"
      ],
      "question": "List all fiscal years with their start and end dates.",
      "fields": [
        "name",
        "year",
        "year_start_date",
        "year_end_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, year, year_start_date, year_end_date FROM [BT]tabFiscal Year[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Fiscal Year"
      ],
      "question": "Get fiscal years and their companies.",
      "fields": [
        "name",
        "year",
        "disabled",
        "companies"
      ]
    },
    "output": "frappe.db.sql('SELECT name, year, disabled, companies FROM [BT]tabFiscal Year[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Currency"
      ],
      "question": "List all currencies with their symbols and fractions.",
      "fields": [
        "name",
        "currency_name",
        "symbol",
        "fraction_units"
      ]
    },
    "output": "frappe.db.sql('SELECT name, currency_name, symbol, fraction_units FROM [BT]tabCurrency[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Currency"
      ],
      "question": "Show all enabled currencies and their formats.",
      "fields": [
        "name",
        "currency_name",
        "enabled",
        "number_format"
      ]
    },
    "output": "frappe.db.sql('SELECT name, currency_name, enabled, number_format FROM [BT]tabCurrency[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Buying Settings"
      ],
      "question": "Fetch the default price list and purchase order requirements.",
      "fields": [
        "buying_price_list",
        "po_required"
      ]
    },
    "output": "frappe.db.sql('SELECT buying_price_list, po_required FROM [BT]tabBuying Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Journal Entry"
      ],
      "question": "Fetch journal entries created recently for financial records.",
      "fields": [
        "name",
        "posting_date",
        "company",
        "voucher_type",
        "total_debit",
        "total_credit"
      ]
    },
    "output": "frappe.db.sql('SELECT name, posting_date, company, voucher_type, total_debit, total_credit FROM [BT]tabJournal Entry[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset Maintenance"
      ],
      "question": "Retrieve a list of assets that are currently under maintenance.",
      "fields": [
        "name",
        "asset_name",
        "maintenance_manager",
        "company"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, maintenance_manager, company FROM [BT]tabAsset Maintenance[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Get all payment entries related to customer invoices.",
      "fields": [
        "name",
        "party",
        "payment_type",
        "posting_date",
        "paid_amount",
        "mode_of_payment"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, payment_type, posting_date, paid_amount, mode_of_payment FROM [BT]tabPayment Entry[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Subscription"
      ],
      "question": "List all active subscriptions with their start dates.",
      "fields": [
        "name",
        "status",
        "party",
        "start_date",
        "end_date",
        "company"
      ]
    },
    "output": "frappe.db.sql('SELECT name, status, party, start_date, end_date, company FROM [BT]tabSubscription[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Production Plan"
      ],
      "question": "View all production plans scheduled for the next month.",
      "fields": [
        "name",
        "company",
        "from_date",
        "to_date",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, company, from_date, to_date, status FROM [BT]tabProduction Plan[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quotation"
      ],
      "question": "Can you show me quotations created for customers?",
      "fields": [
        "name",
        "party_name",
        "transaction_date",
        "company",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party_name, transaction_date, company, grand_total FROM [BT]tabQuotation[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "List all supplier quotations we\u2019ve received recently.",
      "fields": [
        "name",
        "supplier",
        "transaction_date",
        "company",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT name, supplier, transaction_date, company, grand_total FROM [BT]tabSupplier Quotation[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Where can I find or update employee contact details?",
      "fields": [
        "employee_name",
        "cell_number",
        "personal_email",
        "company_email"
      ]
    },
    "output": "frappe.db.sql('SELECT employee_name, cell_number, personal_email, company_email FROM [BT]tabEmployee[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "How do I check which orders have been delivered recently?",
      "fields": [
        "name",
        "customer",
        "posting_date",
        "status",
        "company"
      ]
    },
    "output": "frappe.db.sql('SELECT name, customer, posting_date, status, company FROM [BT]tabDelivery Note[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Where can I view or update a customer's delivery address?",
      "fields": [
        "name",
        "customer_name",
        "customer_address"
      ]
    },
    "output": "frappe.db.sql('SELECT name, customer_name, customer_address FROM [BT]tabCustomer[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Can I see all purchase invoices received from suppliers?",
      "fields": [
        "name",
        "supplier",
        "posting_date",
        "grand_total",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, supplier, posting_date, grand_total, status FROM [BT]tabPurchase Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "View all payment entries linked to customer invoices.",
      "fields": [
        "name",
        "party",
        "payment_type",
        "posting_date",
        "paid_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, payment_type, posting_date, paid_amount FROM [BT]tabPayment Entry[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Production Plan"
      ],
      "question": "Show me all production plans for March orders.",
      "fields": [
        "name",
        "from_date",
        "to_date",
        "status",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, from_date, to_date, status, company FROM [BT]tabProduction Plan[BT] WHERE MONTH(from_date) = 3 AND YEAR(from_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Reservation Entry"
      ],
      "question": "Which items are currently reserved in stock for production?",
      "fields": [
        "item_code",
        "reserved_qty",
        "warehouse",
        "voucher_type",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code, reserved_qty, warehouse, voucher_type, status FROM [BT]tabStock Reservation Entry[BT] WHERE status = 'Reserved' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "What purchase orders did we issue last month to suppliers?",
      "fields": [
        "name",
        "supplier",
        "transaction_date",
        "company",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, transaction_date, company, grand_total FROM [BT]tabPurchase Order[BT] WHERE MONTH(transaction_date) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(transaction_date) = YEAR(CURDATE() - INTERVAL 1 MONTH)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Which supplier has the highest total order value this quarter?",
      "fields": [
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, SUM(grand_total) as total_value FROM [BT]tabPurchase Order[BT] WHERE QUARTER(transaction_date) = QUARTER(CURDATE()) AND YEAR(transaction_date) = YEAR(CURDATE()) GROUP BY supplier ORDER BY total_value DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Pricing Rule Item Group"
      ],
      "question": "What discount rules are defined for the 'Electronics' item group?",
      "fields": [
        "item_group",
        "uom"
      ]
    },
    "output": "frappe.db.sql('SELECT item_group, uom FROM [BT]tabPricing Rule Item Group[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Pricing Rule Item Group"
      ],
      "question": "Are there pricing rules based on unit of measurement?",
      "fields": [
        "item_group",
        "uom"
      ]
    },
    "output": "frappe.db.sql('SELECT item_group, uom FROM [BT]tabPricing Rule Item Group[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which purchase invoices are overdue for payment?",
      "fields": [
        "name",
        "supplier",
        "posting_date",
        "due_date",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, supplier, posting_date, due_date, outstanding_amount FROM [BT]tabPurchase Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Can I get a list of invoices with outstanding amounts over $5000?",
      "fields": [
        "name",
        "supplier",
        "posting_date",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, supplier, posting_date, outstanding_amount FROM [BT]tabPurchase Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "How many invoices include both items and tax charges?",
      "fields": [
        "name",
        "items",
        "taxes"
      ]
    },
    "output": "frappe.db.sql('SELECT name, items, taxes FROM [BT]tabPurchase Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Help Article"
      ],
      "question": "Are there any help articles not yet published?",
      "fields": [
        "title",
        "published"
      ]
    },
    "output": "frappe.db.sql('SELECT title, published FROM [BT]tabHelp Article[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Show me purchase orders with a delivery schedule next week.",
      "fields": [
        "name",
        "supplier",
        "schedule_date",
        "company"
      ]
    },
    "output": "frappe.db.sql('SELECT name, supplier, schedule_date, company FROM [BT]tabPurchase Order[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Can I view all purchase orders that have not yet been billed?",
      "fields": [
        "name",
        "supplier",
        "per_billed"
      ]
    },
    "output": "frappe.db.sql('SELECT name, supplier, per_billed FROM [BT]tabPurchase Order[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Which purchase orders include taxes and shipping charges?",
      "fields": [
        "name",
        "taxes_and_charges",
        "shipping_rule"
      ]
    },
    "output": "frappe.db.sql('SELECT name, taxes_and_charges, shipping_rule FROM [BT]tabPurchase Order[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Help Article"
      ],
      "question": "Show me articles authored by \u201cJane Smith\u201d.",
      "fields": [
        "title",
        "author",
        "published"
      ]
    },
    "output": "frappe.db.sql('SELECT title, author, published FROM [BT]tabHelp Article[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show all purchase invoices billed by \u201cAcme Supplies\u201d last quarter.",
      "fields": [
        "name",
        "supplier",
        "posting_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT name, supplier, posting_date, grand_total FROM [BT]tabPurchase Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What is the total billed amount from each supplier this month?",
      "fields": [
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, SUM(grand_total) as grand_total FROM [BT]tabPurchase Invoice[BT] WHERE MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE()) GROUP BY supplier''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Subscription"
      ],
      "question": "Which customers have subscriptions ending this month?",
      "fields": [
        "party",
        "end_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT party, end_date FROM [BT]tabSubscription[BT] WHERE MONTH(end_date) = MONTH(CURDATE()) AND YEAR(end_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Subscription"
      ],
      "question": "Show me subscriptions that include additional discounts.",
      "fields": [
        "party",
        "additional_discount_percentage",
        "additional_discount_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT party, additional_discount_percentage, additional_discount_amount FROM [BT]tabSubscription[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Subscription"
      ],
      "question": "How many subscriptions are set to auto-submit invoices?",
      "fields": [
        "party",
        "submit_invoice"
      ]
    },
    "output": "frappe.db.sql('SELECT party, submit_invoice FROM [BT]tabSubscription[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List overdue purchase invoices posted on March 1, 2024.",
      "fields": [
        "name",
        "posting_date",
        "due_date",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, posting_date, due_date, outstanding_amount FROM [BT]tabPurchase Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Any overdue purchase invoices from 9th April 2001?",
      "fields": [
        "name",
        "posting_date",
        "due_date",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, posting_date, due_date, outstanding_amount FROM [BT]tabPurchase Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Does purchase invoice [BT]PINV-00712[BT] exist?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE name = \"PINV-00712\" LIMIT 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Can you check if invoice [BT]PINV-00123[BT] is in the system?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE name = \"PINV-00123\" LIMIT 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Fetch full details of purchase invoice [BT]PINV-00456[BT].",
      "fields": [
        "*"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabPurchase Invoice[BT] WHERE name = \"PINV-00456\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Has purchase invoice [BT]PINV-00021[BT] been fully paid off?",
      "fields": [
        "name",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT outstanding_amount,as_dict=True FROM [BT]tabPurchase Invoice[BT] WHERE name = \"PINV-00021\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Is there any balance left on invoice [BT]PINV-00456[BT]?",
      "fields": [
        "name",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT outstanding_amount,as_dict=True FROM [BT]tabPurchase Invoice[BT] WHERE name = \"PINV-00456\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Total number of purchase invoices created last week?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabPurchase Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Is purchase invoice [BT]PINV-00456[BT] a return or a normal one?",
      "fields": [
        "is_return"
      ]
    },
    "output": "frappe.db.sql('SELECT is_return,as_dict=True FROM [BT]tabPurchase Invoice[BT] WHERE name = \"PINV-00456\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which currency and exchange rate were used for transaction on invoice [BT]vctx4ujun8[BT]?",
      "fields": [
        "currency",
        "conversion_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT currency, conversion_rate FROM [BT]tabPurchase Invoice[BT] WHERE name = \"vctx4ujun8\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Can you tell me the cost center this invoice 'INV-00987' is booked against?",
      "fields": [
        "cost_center"
      ]
    },
    "output": "frappe.db.sql('SELECT cost_center,as_dict=True FROM [BT]tabPurchase Invoice[BT] WHERE name = \"INV-00987\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "What is the description of the landed cost component 'LCTC-0001'?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description,as_dict=True FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0001\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "Can you provide the details of the landed cost component 'LCTC-0002'?",
      "fields": [
        "*"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0002\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "Which expense account is used for the landed cost 'LCTC-0003'?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.db.sql('SELECT expense_account,as_dict=True FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0003\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "What expense account is associated with landed cost component 'LCTC-0004'?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.db.sql('SELECT expense_account,as_dict=True FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0004\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "Is there a corrective cost included for landed cost 'LCTC-0005'?",
      "fields": [
        "has_corrective_cost"
      ]
    },
    "output": "frappe.db.sql('SELECT has_corrective_cost,as_dict=True FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0005\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "Is there any correction cost included in the charge 'LCTC-0006'?",
      "fields": [
        "has_corrective_cost"
      ]
    },
    "output": "frappe.db.sql('SELECT has_corrective_cost,as_dict=True FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0006\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "What\u2019s the total amount for landed cost 'LCTC-0007' in company currency?",
      "fields": [
        "base_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT base_amount,as_dict=True FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0007\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "How much is the landed cost 'LCTC-0008' charge in the company\u2019s currency?",
      "fields": [
        "base_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT base_amount,as_dict=True FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0008\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "Which currency is used for landed cost 'LCTC-0009'?",
      "fields": [
        "account_currency"
      ]
    },
    "output": "frappe.db.sql('SELECT account_currency,as_dict=True FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0009\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "What currency is applied to landed cost 'LCTC-0010'?",
      "fields": [
        "account_currency"
      ]
    },
    "output": "frappe.db.sql('SELECT account_currency,as_dict=True FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0010\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "Was an exchange rate applied to the charge 'LCTC-0011'?",
      "fields": [
        "exchange_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT exchange_rate,as_dict=True FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0011\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "Is there an exchange rate applied for the charge 'LCTC-0012'?",
      "fields": [
        "exchange_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT exchange_rate,as_dict=True FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0012\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "Is tax or charge mandatory for landed cost 'LCTC-0013'?",
      "fields": [
        "amount"
      ]
    },
    "output": "frappe.db.sql('SELECT amount,as_dict=True FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0013\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "Do we need to fill in the tax or charge for the transaction 'LCTC-0014'?",
      "fields": [
        "amount"
      ]
    },
    "output": "frappe.db.sql('SELECT amount,as_dict=True FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0014\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "How is the base amount calculated for the landed cost 'LCTC-0015'?",
      "fields": [
        "amount",
        "exchange_rate",
        "base_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT amount, exchange_rate, base_amount FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0015\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "How is the base amount for landed cost 'LCTC-0016' determined?",
      "fields": [
        "amount",
        "exchange_rate",
        "base_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT amount, exchange_rate, base_amount FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0016\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "Does landed cost 'LCTC-0017' apply at the item level?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.db.sql('SELECT expense_account,as_dict=True FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0017\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "Is landed cost 'LCTC-0018' applied at the individual item level?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.db.sql('SELECT expense_account,as_dict=True FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0018\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "Is the row 'LCTC-0019' linked to any supplier invoice?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.db.sql('SELECT expense_account,as_dict=True FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0019\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "Is landed cost 'LCTC-0020' linked to a supplier invoice?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.db.sql('SELECT expense_account,as_dict=True FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0020\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "What\u2019s the difference between amount and base amount in landed cost 'LCTC-0021'?",
      "fields": [
        "amount",
        "base_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT amount, base_amount FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0021\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "What is the difference between the base amount and the amount in the entry 'LCTC-0022'?",
      "fields": [
        "amount",
        "base_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT amount, base_amount FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0022\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "Was landed cost 'LCTC-0023' meant for customs or freight?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.db.sql('SELECT expense_account,as_dict=True FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0023\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Taxes and Charges"
      ],
      "question": "Is landed cost 'LCTC-0024' intended for customs or freight purposes?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.db.sql('SELECT expense_account,as_dict=True FROM [BT]tabLanded Cost Taxes and Charges[BT] WHERE name = \"LCTC-0024\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Do we unlink payments automatically when invoices are cancelled?",
      "fields": [
        "unlink_payment_on_cancellation_of_invoice"
      ]
    },
    "output": "frappe.db.sql('SELECT unlink_payment_on_cancellation_of_invoice FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "When an invoice is cancelled, does the system unlink the payment right away?",
      "fields": [
        "unlink_payment_on_cancellation_of_invoice"
      ]
    },
    "output": "frappe.db.sql('SELECT unlink_payment_on_cancellation_of_invoice FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Can we cancel an order and unlink any advance payments related to it?",
      "fields": [
        "unlink_advance_payment_on_cancelation_of_order"
      ]
    },
    "output": "frappe.db.sql('SELECT unlink_advance_payment_on_cancelation_of_order FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Are advance payments automatically unlinked if the order is cancelled?",
      "fields": [
        "unlink_advance_payment_on_cancelation_of_order"
      ]
    },
    "output": "frappe.db.sql('SELECT unlink_advance_payment_on_cancelation_of_order FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Is the immutable ledger feature enabled for our accounting records?",
      "fields": [
        "enable_immutable_ledger"
      ]
    },
    "output": "frappe.db.sql('SELECT enable_immutable_ledger FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Does the system prevent any changes to the ledger once the immutable ledger feature is enabled?",
      "fields": [
        "enable_immutable_ledger"
      ]
    },
    "output": "frappe.db.sql('SELECT enable_immutable_ledger FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Are we able to exceed the billing limit set by the system?",
      "fields": [
        "over_billing_allowance"
      ]
    },
    "output": "frappe.db.sql('SELECT over_billing_allowance FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Can billing amounts exceed the set limits in the system?",
      "fields": [
        "over_billing_allowance"
      ]
    },
    "output": "frappe.db.sql('SELECT over_billing_allowance FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Is tax loss booked when early payment discounts are applied?",
      "fields": [
        "book_tax_discount_loss"
      ]
    },
    "output": "frappe.db.sql('SELECT book_tax_discount_loss FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Do we book tax loss when early payment discounts are given to customers?",
      "fields": [
        "book_tax_discount_loss"
      ]
    },
    "output": "frappe.db.sql('SELECT book_tax_discount_loss FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Can payment terms be fetched automatically when orders are placed?",
      "fields": [
        "automatically_fetch_payment_terms"
      ]
    },
    "output": "frappe.db.sql('SELECT automatically_fetch_payment_terms FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Are payment terms pulled in automatically when an order is created?",
      "fields": [
        "automatically_fetch_payment_terms"
      ]
    },
    "output": "frappe.db.sql('SELECT automatically_fetch_payment_terms FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Do we display taxes in a table format on printed invoices?",
      "fields": [
        "show_taxes_as_table_in_print"
      ]
    },
    "output": "frappe.db.sql('SELECT show_taxes_as_table_in_print FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Are taxes shown as a table in the invoice printouts?",
      "fields": [
        "show_taxes_as_table_in_print"
      ]
    },
    "output": "frappe.db.sql('SELECT show_taxes_as_table_in_print FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Can credit limits be overridden based on user roles?",
      "fields": [
        "role_allowed_to_over_bill"
      ]
    },
    "output": "frappe.db.sql('SELECT role_allowed_to_over_bill FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Are roles in the system assigned with the ability to override credit limits?",
      "fields": [
        "role_allowed_to_over_bill"
      ]
    },
    "output": "frappe.db.sql('SELECT role_allowed_to_over_bill FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Do we update ledger entries when payment amounts are changed?",
      "fields": [
        "post_change_gl_entries"
      ]
    },
    "output": "frappe.db.sql('SELECT post_change_gl_entries FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Are ledger entries adjusted when the payment amount is modified?",
      "fields": [
        "post_change_gl_entries"
      ]
    },
    "output": "frappe.db.sql('SELECT post_change_gl_entries FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Are depreciation entries automatically recorded in the system?",
      "fields": [
        "book_asset_depreciation_entry_automatically"
      ]
    },
    "output": "frappe.db.sql('SELECT book_asset_depreciation_entry_automatically FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Does the system automatically calculate and record depreciation entries?",
      "fields": [
        "book_asset_depreciation_entry_automatically"
      ]
    },
    "output": "frappe.db.sql('SELECT book_asset_depreciation_entry_automatically FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Have we frozen any accounts for a specific date range?",
      "fields": [
        "acc_frozen_upto"
      ]
    },
    "output": "frappe.db.sql('SELECT acc_frozen_upto FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Are there any accounts frozen until a certain date in the system?",
      "fields": [
        "acc_frozen_upto"
      ]
    },
    "output": "frappe.db.sql('SELECT acc_frozen_upto FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Is party matching enabled for bank reconciliation?",
      "fields": [
        "enable_party_matching"
      ]
    },
    "output": "frappe.db.sql('SELECT enable_party_matching FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Do we enable party matching for reconciliation purposes?",
      "fields": [
        "enable_party_matching"
      ]
    },
    "output": "frappe.db.sql('SELECT enable_party_matching FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Is fuzzy matching enabled to reconcile parties?",
      "fields": [
        "enable_fuzzy_matching"
      ]
    },
    "output": "frappe.db.sql('SELECT enable_fuzzy_matching FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Do we use fuzzy matching to reconcile parties in the system?",
      "fields": [
        "enable_fuzzy_matching"
      ]
    },
    "output": "frappe.db.sql('SELECT enable_fuzzy_matching FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Can we manually apply a discount to a customer's invoice?",
      "fields": [
        "book_tax_discount_loss"
      ]
    },
    "output": "frappe.db.sql('SELECT book_tax_discount_loss FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Is it possible to apply discounts manually on an invoice?",
      "fields": [
        "book_tax_discount_loss"
      ]
    },
    "output": "frappe.db.sql('SELECT book_tax_discount_loss FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Can I adjust the discount on a customer's invoice directly?",
      "fields": [
        "book_tax_discount_loss"
      ]
    },
    "output": "frappe.db.sql('SELECT book_tax_discount_loss FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "How can I adjust payment terms for a specific invoice after it's been created?",
      "fields": [
        "automatically_fetch_payment_terms"
      ]
    },
    "output": "frappe.db.sql('SELECT automatically_fetch_payment_terms FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Can payment terms be changed after an invoice is issued?",
      "fields": [
        "automatically_fetch_payment_terms"
      ]
    },
    "output": "frappe.db.sql('SELECT automatically_fetch_payment_terms FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Is there a way to update the payment terms once an invoice is created?",
      "fields": [
        "automatically_fetch_payment_terms"
      ]
    },
    "output": "frappe.db.sql('SELECT automatically_fetch_payment_terms FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Can we process a refund for a payment that was previously reconciled?",
      "fields": [
        "auto_reconcile_payments"
      ]
    },
    "output": "frappe.db.sql('SELECT auto_reconcile_payments FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Is it possible to issue a refund for a reconciled payment?",
      "fields": [
        "auto_reconcile_payments"
      ]
    },
    "output": "frappe.db.sql('SELECT auto_reconcile_payments FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Can a payment that\u2019s been reconciled be refunded?",
      "fields": [
        "auto_reconcile_payments"
      ]
    },
    "output": "frappe.db.sql('SELECT auto_reconcile_payments FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "How do we handle partial payments when an order is canceled?",
      "fields": [
        "unlink_advance_payment_on_cancelation_of_order"
      ]
    },
    "output": "frappe.db.sql('SELECT unlink_advance_payment_on_cancelation_of_order FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "What happens to partial payments when an order is canceled?",
      "fields": [
        "unlink_advance_payment_on_cancelation_of_order"
      ]
    },
    "output": "frappe.db.sql('SELECT unlink_advance_payment_on_cancelation_of_order FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Do we refund partial payments if an order is canceled?",
      "fields": [
        "unlink_advance_payment_on_cancelation_of_order"
      ]
    },
    "output": "frappe.db.sql('SELECT unlink_advance_payment_on_cancelation_of_order FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Can a user with a specific role approve billing over a preset limit?",
      "fields": [
        "role_allowed_to_over_bill"
      ]
    },
    "output": "frappe.db.sql('SELECT role_allowed_to_over_bill FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Are there any role-based permissions for approving over-limit billing?",
      "fields": [
        "role_allowed_to_over_bill"
      ]
    },
    "output": "frappe.db.sql('SELECT role_allowed_to_over_bill FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Can certain roles approve billing amounts that exceed the set limit?",
      "fields": [
        "role_allowed_to_over_bill"
      ]
    },
    "output": "frappe.db.sql('SELECT role_allowed_to_over_bill FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "How do we control who has access to view payment details in the system?",
      "fields": [
        "role_allowed_to_over_bill"
      ]
    },
    "output": "frappe.db.sql('SELECT role_allowed_to_over_bill FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Can we restrict access to payment details based on user roles?",
      "fields": [
        "role_allowed_to_over_bill"
      ]
    },
    "output": "frappe.db.sql('SELECT role_allowed_to_over_bill FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "How do we manage user permissions to view payment information?",
      "fields": [
        "role_allowed_to_over_bill"
      ]
    },
    "output": "frappe.db.sql('SELECT role_allowed_to_over_bill FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounts Settings"
      ],
      "question": "Do we allow multi-currency invoices for customers from different countries?",
      "fields": [
        "allow_multi_currency_invoices_against_single_party_account"
      ]
    },
    "output": "frappe.db.sql('SELECT allow_multi_currency_invoices_against_single_party_account FROM [BT]tabAccounts Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "Show all leads from this month related to marketing.",
      "fields": [
        "lead_name",
        "market_segment",
        "source",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT lead_name, market_segment, source, creation FROM [BT]tabLead[BT] WHERE market_segment = \"Marketing\" AND MONTH(creation) = MONTH(CURDATE()) AND YEAR(creation) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "How much money did we spend this month?",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(grand_total) AS total_spent FROM [BT]tabPurchase Invoice[BT] WHERE MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "Which leads came from 'Spring Promo' this month?",
      "fields": [
        "lead_name",
        "campaign_name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT lead_name, campaign_name, creation FROM [BT]tabLead[BT] WHERE campaign_name = \"Spring Promo\" AND MONTH(creation) = MONTH(CURDATE()) AND YEAR(creation) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "What leads are assigned to 'Ahmad bin Khalid'?",
      "fields": [
        "lead_name",
        "lead_owner"
      ]
    },
    "output": "frappe.db.sql('SELECT lead_name, lead_owner FROM [BT]tabLead[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "Which leads are assigned to 'David Clark'?",
      "fields": [
        "lead_name",
        "lead_owner"
      ]
    },
    "output": "frappe.db.sql('SELECT lead_name, lead_owner FROM [BT]tabLead[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "What\u2019s the status of lead 'L-2022-010'?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT status,as_dict=True FROM [BT]tabLead[BT] WHERE name = \"L-2022-010\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Find all QAR currency orders placed by 'MeadowByte Traders' using the 'Retail Price List'.",
      "fields": [
        "customer",
        "currency",
        "selling_price_list"
      ]
    },
    "output": "frappe.db.sql('SELECT customer, currency, selling_price_list FROM [BT]tabSales Order[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "List all sales orders for 'Alpha Tech' with territory 'Doha' and customer group 'Retail'.",
      "fields": [
        "customer",
        "territory",
        "customer_group"
      ]
    },
    "output": "frappe.db.sql('SELECT customer, territory, customer_group FROM [BT]tabSales Order[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quotation"
      ],
      "question": "Can you show me the sales quotation Q-12345 for March 10th 2024?",
      "fields": [
        "name",
        "customer",
        "items",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, customer, items, grand_total, transaction_date FROM [BT]tabQuotation[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quotation"
      ],
      "question": "What is the total amount on sales quotation Q-67890 for Global Tech?",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT as_dict=True FROM [BT]tabQuotation[BT] WHERE name = \"customer': 'Global Tech'[CB], 'grand_total\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quotation"
      ],
      "question": "What is the status of sales quotation Q-22334 for Yenmuim Corp?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT as_dict=True FROM [BT]tabQuotation[BT] WHERE name = \"customer': 'Yenmuim Corp'[CB], 'status\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quotation"
      ],
      "question": "Has sales quotation Q-33445 been approved for Kuywett Electronics?",
      "fields": [
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('SELECT as_dict=True FROM [BT]tabQuotation[BT] WHERE name = \"customer': 'Kuywett Electronics'[CB], 'docstatus\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quotation"
      ],
      "question": "What items are listed in sales quotation Q-11223 for Organic Goods?",
      "fields": [
        "items"
      ]
    },
    "output": "frappe.db.sql('SELECT as_dict=True FROM [BT]tabQuotation[BT] WHERE name = \"customer': 'Organic Goods'[CB], 'items\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quotation"
      ],
      "question": "Can you list the products in sales quotation Q-55667 for Eco Solutions?",
      "fields": [
        "items"
      ]
    },
    "output": "frappe.db.sql('SELECT as_dict=True FROM [BT]tabQuotation[BT] WHERE name = \"customer': 'Eco Solutions'[CB], 'items\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Get all orders from 'XYZ LLC' using campaign 'RamadanPromo' and project 'New Branch Launch'.",
      "fields": [
        "customer",
        "campaign",
        "project"
      ]
    },
    "output": "frappe.db.sql('SELECT customer, campaign, project FROM [BT]tabSales Order[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "List all sales orders placed in QAR with payment terms template 'Advance', and delivery scheduled before July 1, 2025.",
      "fields": [
        "currency",
        "payment_terms_template",
        "delivery_date"
      ]
    },
    "output": "frappe.db.sql('SELECT currency, payment_terms_template, delivery_date FROM [BT]tabSales Order[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Find all fully delivered orders from 'Velvet Circuit Textiles' with a grand total over 25000 QAR and using price list 'Bulk Pricing'.",
      "fields": [
        "customer",
        "delivery_status",
        "grand_total",
        "selling_price_list"
      ]
    },
    "output": "frappe.db.sql('SELECT customer, delivery_status, grand_total, selling_price_list FROM [BT]tabSales Order[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Get sales orders created after May 1, 2025, with campaign 'Summer2025' and source marked as 'Website'.",
      "fields": [
        "transaction_date",
        "campaign",
        "source"
      ]
    },
    "output": "frappe.db.sql('SELECT transaction_date, campaign, source FROM [BT]tabSales Order[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Show all orders billed over 80%, with delivery pending, and with a delivery date after June 25, 2025.",
      "fields": [
        "per_billed",
        "delivery_status",
        "delivery_date"
      ]
    },
    "output": "frappe.db.sql('SELECT per_billed, delivery_status, delivery_date FROM [BT]tabSales Order[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "What is the current status of my sales order with ID is_1989?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT status,as_dict=True FROM [BT]tabSales Order[BT] WHERE name = \"is_1989\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "How much do I owe for the sales order AS_190?",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT outstanding_amount,as_dict=True FROM [BT]tabSales Order[BT] WHERE name = \"AS_190\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "What items are included in the sales order SO156?",
      "fields": [
        "items"
      ]
    },
    "output": "frappe.db.sql('SELECT items,as_dict=True FROM [BT]tabSales Order[BT] WHERE name = \"SO156\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Can you tell me the expected delivery date for sales order Sales_101?",
      "fields": [
        "delivery_date"
      ]
    },
    "output": "frappe.db.sql('SELECT delivery_date,as_dict=True FROM [BT]tabSales Order[BT] WHERE name = \"Sales_101\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Who is the customer for sales order item_910, and what is their contact information?",
      "fields": [
        "customer",
        "contact_person",
        "contact_email",
        "contact_mobile"
      ]
    },
    "output": "frappe.db.sql('SELECT customer, contact_person, contact_email, contact_mobile FROM [BT]tabSales Order[BT] WHERE name = \"item_910\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Has the payment been received for sales order SO-45672?",
      "fields": [
        "per_billed",
        "per_delivered",
        "billing_status"
      ]
    },
    "output": "frappe.db.sql('SELECT per_billed, per_delivered, billing_status FROM [BT]tabSales Order[BT] WHERE name = \"SO-45672\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Can I modify the items in sales order s_001 before shipping?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT status,as_dict=True FROM [BT]tabSales Order[BT] WHERE name = \"s_001\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Can you cancel the sales order SO-87654?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT status,as_dict=True FROM [BT]tabSales Order[BT] WHERE name = \"SO-87654\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "What discount was applied to sales order ksjidusidjs for customer ThistleWorks Corp?",
      "fields": [
        "discount_amount",
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.db.sql('SELECT additional_discount_percentage],as_dict=True FROM [BT]tabSales Order[BT] WHERE name = \"discount_amount\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice Item"
      ],
      "question": "How many Mango Juice bottles did we sell last week?",
      "fields": [
        "item_name",
        "qty"
      ]
    },
    "output": "frappe.db.sql(\"SELECT SUM(qty) as total_qty FROM [BT]tabSales Invoice Item[BT] WHERE item_name = 'Mango Juice' AND posting_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE()\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice Item"
      ],
      "question": "What is the total sales amount for the last month?",
      "fields": [
        "base_net_amount"
      ]
    },
    "output": "frappe.db.sql(\"SELECT SUM(base_net_amount) as total_sales FROM [BT]tabSales Invoice Item[BT] WHERE posting_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE()\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice Item"
      ],
      "question": "List the top 5 selling products by quantity this month.",
      "fields": [
        "item_name",
        "qty"
      ]
    },
    "output": "frappe.db.sql(\"SELECT item_name, SUM(qty) as total_qty FROM [BT]tabSales Invoice Item[BT] WHERE posting_date BETWEEN DATE_FORMAT(CURDATE(), '%Y-%m-01') AND CURDATE() GROUP BY item_name ORDER BY total_qty DESC LIMIT 5\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice Item"
      ],
      "question": "Show me all sales records where the quantity sold is greater than 50.",
      "fields": [
        "item_name",
        "qty"
      ]
    },
    "output": "frappe.db.sql(\"SELECT item_name, qty FROM [BT]tabSales Invoice Item[BT] WHERE qty > 50\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice Item"
      ],
      "question": "What is the average quantity sold per invoice?",
      "fields": [
        "qty"
      ]
    },
    "output": "frappe.db.sql(\"SELECT AVG(qty) as avg_qty FROM [BT]tabSales Invoice Item[BT]\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice Item"
      ],
      "question": "Which customer bought the most items in the last 3 months?",
      "fields": [
        "parent",
        "qty"
      ]
    },
    "output": "frappe.db.sql(\"SELECT parent as customer, SUM(qty) as total_qty FROM [BT]tabSales Invoice Item[BT] WHERE posting_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() GROUP BY parent ORDER BY total_qty DESC LIMIT 1\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice Item"
      ],
      "question": "How many invoices contained Apple Juice?",
      "fields": [
        "item_name",
        "parent"
      ]
    },
    "output": "frappe.db.sql(\"SELECT COUNT(DISTINCT parent) as invoice_count FROM [BT]tabSales Invoice Item[BT] WHERE item_name = 'Apple Juice'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice Item"
      ],
      "question": "Get me the sales details of Orange Juice sold in January 2025.",
      "fields": [
        "item_name",
        "qty",
        "base_net_amount"
      ]
    },
    "output": "frappe.db.sql(\"SELECT item_name, qty, base_net_amount FROM [BT]tabSales Invoice Item[BT] WHERE item_name = 'Orange Juice' AND posting_date BETWEEN '2025-01-01' AND '2025-01-31'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice Item"
      ],
      "question": "What is the highest quantity sold in a single invoice line?",
      "fields": [
        "qty"
      ]
    },
    "output": "frappe.db.sql(\"SELECT MAX(qty) as max_qty FROM [BT]tabSales Invoice Item[BT]\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice Item"
      ],
      "question": "List customers who purchased more than 100 items in total.",
      "fields": [
        "parent",
        "qty"
      ]
    },
    "output": "frappe.db.sql(\"SELECT parent as customer, SUM(qty) as total_qty FROM [BT]tabSales Invoice Item[BT] GROUP BY parent HAVING total_qty > 100\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which sales partners have zero commission rate?",
      "fields": [
        "name",
        "partner_name",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, partner_name, commission_rate FROM [BT]tabSales Partner[BT] WHERE commission_rate = 0\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "How many partners have websites listed?",
      "fields": [
        "name",
        "website"
      ]
    },
    "output": "frappe.db.sql(\"SELECT COUNT(name) as total_partners FROM [BT]tabSales Partner[BT] WHERE website IS NOT NULL AND website != ''\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List top 5 partners by commission rate.",
      "fields": [
        "name",
        "partner_name",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, partner_name, commission_rate FROM [BT]tabSales Partner[BT] ORDER BY commission_rate DESC LIMIT 5\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "How many sales orders did we receive last month?",
      "fields": [
        "name",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT COUNT(name) as total_orders FROM [BT]tabSales Order[BT] WHERE MONTH(transaction_date) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(transaction_date) = YEAR(CURDATE() - INTERVAL 1 MONTH)\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "What is the total grand total of all sales orders placed this week?",
      "fields": [
        "name",
        "transaction_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql(\"SELECT SUM(grand_total) as total_value FROM [BT]tabSales Order[BT] WHERE YEARWEEK(transaction_date, 1) = YEARWEEK(CURDATE(), 1)\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Which customer placed the highest sales order last quarter?",
      "fields": [
        "name",
        "customer",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, customer, grand_total, transaction_date FROM [BT]tabSales Order[BT] WHERE QUARTER(transaction_date) = QUARTER(CURDATE() - INTERVAL 1 QUARTER) AND YEAR(transaction_date) = YEAR(CURDATE() - INTERVAL 1 QUARTER) ORDER BY grand_total DESC LIMIT 1\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "How many internal customer orders were created this year?",
      "fields": [
        "name",
        "transaction_date",
        "is_internal_customer"
      ]
    },
    "output": "frappe.db.sql(\"SELECT COUNT(name) as total_orders FROM [BT]tabSales Order[BT] WHERE is_internal_customer = 1 AND YEAR(transaction_date) = YEAR(CURDATE())\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "What’s the total discount amount offered this month?",
      "fields": [
        "name",
        "transaction_date",
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql(\"SELECT SUM(discount_amount) as total_discount FROM [BT]tabSales Order[BT] WHERE MONTH(transaction_date) = MONTH(CURDATE()) AND YEAR(transaction_date) = YEAR(CURDATE())\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Which campaign generated the most sales last quarter?",
      "fields": [
        "name",
        "campaign",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT campaign, SUM(grand_total) as total_sales FROM [BT]tabSales Order[BT] WHERE QUARTER(transaction_date) = QUARTER(CURDATE() - INTERVAL 1 QUARTER) AND YEAR(transaction_date) = YEAR(CURDATE() - INTERVAL 1 QUARTER) GROUP BY campaign ORDER BY total_sales DESC LIMIT 1\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Top 3 territories by sales volume this month?",
      "fields": [
        "territory",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT territory, SUM(grand_total) as total_sales FROM [BT]tabSales Order[BT] WHERE MONTH(transaction_date) = MONTH(CURDATE()) AND YEAR(transaction_date) = YEAR(CURDATE()) GROUP BY territory ORDER BY total_sales DESC LIMIT 3\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "What is the average order value for this week?",
      "fields": [
        "name",
        "transaction_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql(\"SELECT AVG(grand_total) as avg_order_value FROM [BT]tabSales Order[BT] WHERE YEARWEEK(transaction_date, 1) = YEARWEEK(CURDATE(), 1)\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "How many orders used the coupon code 'FESTIVE10' this year?",
      "fields": [
        "name",
        "coupon_code",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT COUNT(name) as total_orders FROM [BT]tabSales Order[BT] WHERE coupon_code = 'FESTIVE10' AND YEAR(transaction_date) = YEAR(CURDATE())\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Which customer has the highest cumulative sales this year?",
      "fields": [
        "customer",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT customer, SUM(grand_total) as total_sales FROM [BT]tabSales Order[BT] WHERE YEAR(transaction_date) = YEAR(CURDATE()) GROUP BY customer ORDER BY total_sales DESC LIMIT 1\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which currency was used most frequently in supplier quotations over the past 6 months?",
      "fields": [
        "name",
        "currency",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, currency, transaction_date FROM [BT]tabSupplier Quotation[BT]  WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY currency ORDER BY usage_count DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which project has received the highest total quotation value from all suppliers combined?",
      "fields": [
        "name",
        "project",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, project, net_total FROM [BT]tabSupplier Quotation[BT]  GROUP BY project ORDER BY total_value DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which suppliers have quoted more than 10 different quotations in the last quarter?",
      "fields": [
        "name",
        "supplier",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, transaction_date FROM [BT]tabSupplier Quotation[BT]  WHERE transaction_date BETWEEN '2025-04-01' AND '2025-06-30' GROUP BY supplier HAVING count > 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "What is the monthly trend of quotation net total values for the current fiscal year?",
      "fields": [
        "name",
        "transaction_date",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, transaction_date, net_total FROM [BT]tabSupplier Quotation[BT]  WHERE transaction_date >= DATE_FORMAT(CURDATE(), '%Y-01-01') GROUP BY month ORDER BY month''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which supplier has the highest average discount amount across all quotations?",
      "fields": [
        "name",
        "supplier",
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, discount_amount FROM [BT]tabSupplier Quotation[BT]  GROUP BY supplier ORDER BY avg_discount DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "List suppliers who submitted quotations where conversion rate is below 1 for foreign currencies.",
      "fields": [
        "name",
        "supplier",
        "conversion_rate",
        "currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, conversion_rate, currency FROM [BT]tabSupplier Quotation[BT]  WHERE conversion_rate < 1 AND currency != 'QAR' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which cost center has received the most quotation value this year?",
      "fields": [
        "name",
        "cost_center",
        "net_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, cost_center, net_total, transaction_date FROM [BT]tabSupplier Quotation[BT]  WHERE transaction_date >= DATE_FORMAT(CURDATE(), '%Y-01-01') GROUP BY cost_center ORDER BY total DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which suppliers quoted amounts that required rounding adjustment exceeding 100 QAR?",
      "fields": [
        "name",
        "supplier",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, rounding_adjustment FROM [BT]tabSupplier Quotation[BT]  WHERE ABS(rounding_adjustment) > 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which projects received quotations with a valid till date that has already expired?",
      "fields": [
        "name",
        "project",
        "valid_till"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, project, valid_till FROM [BT]tabSupplier Quotation[BT]  WHERE valid_till < CURDATE()''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "What is the total number and value of quotations grouped by status?",
      "fields": [
        "name",
        "status",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, net_total FROM [BT]tabSupplier Quotation[BT]  GROUP BY status''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which suppliers have submitted quotations linked to more than 3 different projects?",
      "fields": [
        "name",
        "supplier",
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, project FROM [BT]tabSupplier Quotation[BT]  WHERE project IS NOT NULL GROUP BY supplier HAVING project_count > 3''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "List quotations where the discount amount exceeds 15% of the net total.",
      "fields": [
        "name",
        "discount_amount",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, discount_amount, net_total FROM [BT]tabSupplier Quotation[BT]  WHERE net_total > 0 AND (discount_amount / net_total) > 0.15''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which suppliers submitted quotations to multiple companies?",
      "fields": [
        "name",
        "supplier",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, company FROM [BT]tabSupplier Quotation[BT]  GROUP BY supplier HAVING company_count > 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "What is the average and maximum quotation value per tax category?",
      "fields": [
        "name",
        "tax_category",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_category, net_total FROM [BT]tabSupplier Quotation[BT]  GROUP BY tax_category''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which quotations have a net total less than the total quantity multiplied by 100?",
      "fields": [
        "name",
        "net_total",
        "total_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, net_total, total_qty FROM [BT]tabSupplier Quotation[BT]  WHERE total_qty * 100 > net_total''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which suppliers consistently used the same contact person across all their quotations?",
      "fields": [
        "name",
        "supplier",
        "contact_person"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, contact_person FROM [BT]tabSupplier Quotation[BT]  GROUP BY supplier HAVING COUNT(DISTINCT contact_person) = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which quotations had zero taxes but a total value above 50,000?",
      "fields": [
        "name",
        "total_taxes_and_charges",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_taxes_and_charges, net_total FROM [BT]tabSupplier Quotation[BT]  WHERE total_taxes_and_charges = 0 AND net_total > 50000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "List suppliers who have submitted quotations only in foreign currencies.",
      "fields": [
        "name",
        "supplier",
        "currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, currency FROM [BT]tabSupplier Quotation[BT]  GROUP BY supplier HAVING SUM(currency = 'QAR') = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which quotations have a missing cost center but are linked to a project?",
      "fields": [
        "name",
        "cost_center",
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, cost_center, project FROM [BT]tabSupplier Quotation[BT]  WHERE cost_center IS NULL AND project IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which incoterm was used most frequently in quotations submitted in the past 12 months?",
      "fields": [
        "incoterm",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT incoterm, COUNT(*) as cnt FROM [BT]tabSupplier Quotation[BT] WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH) GROUP BY incoterm ORDER BY cnt DESC LIMIT 1\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get companies with the default holiday list set as '2025 List'.",
      "fields": [
        "name",
        "company_name",
        "default_holiday_list"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, default_holiday_list FROM [BT]tabCompany[BT] WHERE default_holiday_list = '2025 List'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Find companies with registration info that includes 'VAT'.",
      "fields": [
        "name",
        "company_name",
        "registration_info"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, registration_info FROM [BT]tabCompany[BT] WHERE registration_info LIKE '%VAT%'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List companies with a credit limit greater than 1,000,000.",
      "fields": [
        "name",
        "company_name",
        "credit_limit"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, credit_limit FROM [BT]tabCompany[BT] WHERE credit_limit > 1000000\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get all companies that use 'Cost - ERP' as their default operating cost account.",
      "fields": [
        "name",
        "company_name",
        "default_operating_cost_account"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, default_operating_cost_account FROM [BT]tabCompany[BT] WHERE default_operating_cost_account = 'Cost - ERP'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Fetch the accumulated depreciation and depreciation cost center for 'MacroTech'.",
      "fields": [
        "name",
        "company_name",
        "accumulated_depreciation_account",
        "depreciation_cost_center"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, accumulated_depreciation_account, depreciation_cost_center FROM [BT]tabCompany[BT] WHERE company_name = 'MacroTech'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Check which companies have not set a payment terms template.",
      "fields": [
        "name",
        "company_name",
        "payment_terms"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, payment_terms FROM [BT]tabCompany[BT] WHERE payment_terms IS NULL OR payment_terms = ''\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Find companies using 'Warehouse - Gulf' for sales return.",
      "fields": [
        "name",
        "company_name",
        "default_warehouse_for_sales_return"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, default_warehouse_for_sales_return FROM [BT]tabCompany[BT] WHERE default_warehouse_for_sales_return = 'Warehouse - Gulf'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get companies that started operations before 2010.",
      "fields": [
        "name",
        "company_name",
        "date_of_commencement"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, date_of_commencement FROM [BT]tabCompany[BT] WHERE YEAR(date_of_commencement) < 2010\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "How many warehouses do we manage?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql(\"SELECT COUNT(name) as total_warehouses FROM [BT]tabWarehouse[BT]\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "How many purchase orders were created this year?",
      "fields": [
        "name",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT COUNT(name) as total_orders FROM [BT]tabPurchase Order[BT] WHERE YEAR(transaction_date) = YEAR(CURDATE())\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Production Plan"
      ],
      "question": "How many production plans were created this month?",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT COUNT(name) as total_plans FROM [BT]tabProduction Plan[BT] WHERE MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "How many customers do we have?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql(\"SELECT COUNT(name) as total_customers FROM [BT]tabCustomer[BT]\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Journal Entry"
      ],
      "question": "How many journal entries are for bank transactions?",
      "fields": [
        "name",
        "voucher_type"
      ]
    },
    "output": "frappe.db.sql(\"SELECT COUNT(name) as total_entries FROM [BT]tabJournal Entry[BT] WHERE voucher_type = 'Bank Entry'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Entry"
      ],
      "question": "How many stock entries were return entries?",
      "fields": [
        "name",
        "purpose"
      ]
    },
    "output": "frappe.db.sql(\"SELECT COUNT(name) as total_entries FROM [BT]tabStock Entry[BT] WHERE purpose IN ('Material Transfer for Return', 'Sales Return', 'Purchase Return')\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "How many companies have a registered fax number?",
      "fields": [
        "name",
        "fax"
      ]
    },
    "output": "frappe.db.sql(\"SELECT COUNT(name) as total_companies FROM [BT]tabCompany[BT] WHERE fax IS NOT NULL AND fax != ''\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Find companies whose description contains the word 'manufacturing'.",
      "fields": [
        "name",
        "company_name",
        "company_description"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, company_description FROM [BT]tabCompany[BT] WHERE company_description LIKE '%manufacturing%'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List companies whose domain is 'techwave.com'.",
      "fields": [
        "name",
        "company_name",
        "domain"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, domain FROM [BT]tabCompany[BT] WHERE domain = 'techwave.com'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get names and emails of companies registered after 2022.",
      "fields": [
        "name",
        "company_name",
        "email",
        "date_of_incorporation"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, email, date_of_incorporation FROM [BT]tabCompany[BT] WHERE date_of_incorporation > '2022-12-31'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Fetch the default cash account and discount account for 'Nile Ltd'.",
      "fields": [
        "name",
        "company_name",
        "default_cash_account",
        "default_discount_account"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, default_cash_account, default_discount_account FROM [BT]tabCompany[BT] WHERE company_name = 'Nile Ltd'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "How many companies use USD as their currency?",
      "fields": [
        "name",
        "default_currency"
      ]
    },
    "output": "frappe.db.sql(\"SELECT COUNT(*) as total FROM [BT]tabCompany[BT] WHERE default_currency = 'USD'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies were established in the same year as 'Orion Global'?",
      "fields": [
        "name",
        "company_name",
        "date_of_establishment"
      ]
    },
    "output": "frappe.db.sql(\"SELECT c2.name, c2.company_name, c2.date_of_establishment FROM [BT]tabCompany[BT] c1 JOIN [BT]tabCompany[BT] c2 ON YEAR(c1.date_of_establishment) = YEAR(c2.date_of_establishment) WHERE c1.company_name = 'Orion Global' AND c2.company_name != 'Orion Global'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List all customers from India",
      "fields": [
        "customer_name",
        "country"
      ]
    },
    "output": "frappe.db.sql(\"SELECT customer_name, country FROM [BT]tabCustomer[BT] WHERE country = 'India'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Find pending Sales Orders",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, status FROM [BT]tabSales Order[BT] WHERE status = 'To Deliver and Bill'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get total sales amount in July 2024",
      "fields": [
        "grand_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT SUM(grand_total) as total_sales FROM [BT]tabSales Invoice[BT] WHERE posting_date BETWEEN '2024-07-01' AND '2024-07-31'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List all items under category 'Beverages'",
      "fields": [
        "item_name",
        "item_group"
      ]
    },
    "output": "frappe.db.sql(\"SELECT item_name, item_group FROM [BT]tabItem[BT] WHERE item_group = 'Beverages'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Find top 5 suppliers by purchase amount",
      "fields": [
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql(\"SELECT supplier, SUM(grand_total) as total_purchase FROM [BT]tabPurchase Invoice[BT] GROUP BY supplier ORDER BY total_purchase DESC LIMIT 5\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "Check current stock of Apple Juice",
      "fields": [
        "item_code",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql(\"SELECT item_code, SUM(actual_qty) as current_stock FROM [BT]tabStock Ledger Entry[BT] WHERE item_code = 'Apple Juice' GROUP BY item_code\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices for customer 'ABC Stores'",
      "fields": [
        "name",
        "customer",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, customer, grand_total FROM [BT]tabSales Invoice[BT] WHERE customer = 'ABC Stores'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get companies that are children of 'Global Holdings'.",
      "fields": [
        "name",
        "company_name",
        "parent_company"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, parent_company FROM [BT]tabCompany[BT] WHERE parent_company = 'Global Holdings'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List companies with a finance book configured.",
      "fields": [
        "name",
        "company_name",
        "default_finance_book"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, default_finance_book FROM [BT]tabCompany[BT] WHERE default_finance_book IS NOT NULL AND default_finance_book != ''\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Show companies with a registration_details field left empty.",
      "fields": [
        "name",
        "company_name",
        "registration_details"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, registration_details FROM [BT]tabCompany[BT] WHERE registration_details IS NULL OR registration_details = ''\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get the unrealized profit/loss account and round off account for 'Core Solutions'.",
      "fields": [
        "name",
        "company_name",
        "unrealized_profit_loss_account",
        "round_off_account"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, unrealized_profit_loss_account, round_off_account FROM [BT]tabCompany[BT] WHERE company_name = 'Core Solutions'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Check if 'VisionTech' has perpetual inventory enabled.",
      "fields": [
        "name",
        "company_name",
        "enable_perpetual_inventory"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, enable_perpetual_inventory FROM [BT]tabCompany[BT] WHERE company_name = 'VisionTech'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get companies using 'Operations - ERP' as their cost center.",
      "fields": [
        "name",
        "company_name",
        "cost_center"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, cost_center FROM [BT]tabCompany[BT] WHERE cost_center = 'Operations - ERP'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies have 'QNB' as their default bank account?",
      "fields": [
        "name",
        "company_name",
        "default_bank_account"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, default_bank_account FROM [BT]tabCompany[BT] WHERE default_bank_account = 'QNB'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Find companies with an exception budget approver role set.",
      "fields": [
        "name",
        "company_name",
        "exception_budget_approver_role"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, exception_budget_approver_role FROM [BT]tabCompany[BT] WHERE exception_budget_approver_role IS NOT NULL AND exception_budget_approver_role != ''\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get all companies with monthly sales target configured.",
      "fields": [
        "name",
        "company_name",
        "monthly_sales_target"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, monthly_sales_target FROM [BT]tabCompany[BT] WHERE monthly_sales_target IS NOT NULL\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get write-off and unrealized profit accounts of 'Trafalgar Group'.",
      "fields": [
        "name",
        "company_name",
        "write_off_account",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, write_off_account, unrealized_profit_loss_account FROM [BT]tabCompany[BT] WHERE company_name = 'Trafalgar Group'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Check if 'GulfOil Ltd' has default receivable and payable accounts set.",
      "fields": [
        "name",
        "company_name",
        "default_receivable_account",
        "default_payable_account"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, default_receivable_account, default_payable_account FROM [BT]tabCompany[BT] WHERE company_name = 'GulfOil Ltd'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "How many companies were incorporated after 2020?",
      "fields": [
        "name",
        "date_of_incorporation"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, date_of_incorporation FROM [BT]tabCompany[BT] WHERE date_of_incorporation > '2020-12-31'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get the finance book and inventory account for 'Crescent Retail'.",
      "fields": [
        "name",
        "company_name",
        "default_finance_book",
        "default_inventory_account"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, company_name, default_finance_book, default_inventory_account FROM [BT]tabCompany[BT] WHERE company_name = 'Crescent Retail'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which suppliers submitted quotations in multiple currencies this year?",
      "fields": [
        "supplier",
        "currency"
      ]
    },
    "output": "frappe.db.sql(\"SELECT supplier, COUNT(DISTINCT currency) as currency_count FROM [BT]tabSupplier Quotation[BT] WHERE YEAR(transaction_date) = YEAR(CURDATE()) GROUP BY supplier HAVING currency_count > 1\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "Which items had the highest total production quantity last year?",
      "fields": [
        "production_item",
        "produced_qty"
      ]
    },
    "output": "frappe.db.sql(\"SELECT production_item, SUM(produced_qty) as total_produced FROM [BT]tabWork Order[BT] WHERE YEAR(actual_end_date) = YEAR(CURDATE()) - 1 GROUP BY production_item ORDER BY total_produced DESC\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "Which production item has the highest total planned operating cost for pending work orders?",
      "fields": [
        "production_item",
        "planned_operating_cost"
      ]
    },
    "output": "frappe.db.sql(\"SELECT production_item, SUM(planned_operating_cost) as total_cost FROM [BT]tabWork Order[BT] WHERE status = 'Pending' GROUP BY production_item ORDER BY total_cost DESC LIMIT 1\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "Show a trend of completed work orders by month for the last 12 months.",
      "fields": [
        "month",
        "completed_count"
      ]
    },
    "output": "frappe.db.sql(\"SELECT DATE_FORMAT(actual_end_date, '%Y-%m') as month, COUNT(name) as completed_count FROM [BT]tabWork Order[BT] WHERE status = 'Completed' AND actual_end_date >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH) GROUP BY month ORDER BY month ASC\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "List all work orders with a planned start date in the next 7 days, including their required items.",
      "fields": [
        "name",
        "planned_start_date"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, planned_start_date FROM [BT]tabWork Order[BT] WHERE planned_start_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 7 DAY)\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "Which work orders are using multi-level BOMs and what is their average completion time?",
      "fields": [
        "name",
        "use_multi_level_bom",
        "completion_time"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, use_multi_level_bom, TIMESTAMPDIFF(DAY, planned_start_date, actual_end_date) as completion_time FROM [BT]tabWork Order[BT] WHERE use_multi_level_bom = 1 AND status = 'Completed' AND actual_end_date IS NOT NULL AND planned_start_date IS NOT NULL\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "How many work orders are still in draft status and older than 30 days?",
      "fields": [
        "name",
        "status",
        "creation"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, status, creation FROM [BT]tabWork Order[BT] WHERE status = 'Draft' AND creation < DATE_SUB(CURDATE(), INTERVAL 30 DAY)\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "BOM"
      ],
      "question": "List all active BOMs for a specific item, sorted by creation date.",
      "fields": [
        "name",
        "item",
        "is_active",
        "creation"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, item, is_active, creation FROM [BT]tabBOM[BT] WHERE is_active = 1 ORDER BY creation DESC\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "BOM"
      ],
      "question": "Which BOM has the highest total cost?",
      "fields": [
        "name",
        "total_cost"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, total_cost FROM [BT]tabBOM[BT] ORDER BY total_cost DESC LIMIT 1\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "BOM"
      ],
      "question": "How many BOMs are set as default for each item?",
      "fields": [
        "item",
        "default_count"
      ]
    },
    "output": "frappe.db.sql(\"SELECT item, COUNT(name) as default_count FROM [BT]tabBOM[BT] WHERE is_default = 1 GROUP BY item\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "BOM"
      ],
      "question": "Which BOMs include alternative items and what are those items?",
      "fields": [
        "name",
        "allow_alternative_item"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, allow_alternative_item FROM [BT]tabBOM[BT] WHERE allow_alternative_item = 1\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "BOM"
      ],
      "question": "What is the average raw material cost per BOM for the last quarter?",
      "fields": [
        "avg_cost"
      ]
    },
    "output": "frappe.db.sql(\"SELECT AVG(raw_material_cost) as avg_cost FROM [BT]tabBOM[BT] WHERE creation BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE()\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "List all work orders where the actual operating cost exceeded the planned operating cost.",
      "fields": [
        "name",
        "planned_operating_cost",
        "actual_operating_cost"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, planned_operating_cost, actual_operating_cost FROM [BT]tabWork Order[BT] WHERE actual_operating_cost > planned_operating_cost\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "What is the total quantity of items produced from work orders linked to a specific sales order?",
      "fields": [
        "sales_order",
        "total_produced"
      ]
    },
    "output": "frappe.db.sql(\"SELECT sales_order, SUM(produced_qty) as total_produced FROM [BT]tabWork Order[BT] WHERE sales_order IS NOT NULL GROUP BY sales_order\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "Which warehouse is most frequently used as the source for work orders in the last 6 months?",
      "fields": [
        "source_warehouse",
        "usage_count"
      ]
    },
    "output": "frappe.db.sql(\"SELECT source_warehouse, COUNT(name) as usage_count FROM [BT]tabWork Order[BT] WHERE creation >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY source_warehouse ORDER BY usage_count DESC LIMIT 1\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "How many work orders were delayed (actual end date later than planned end date) in the last year?",
      "fields": [
        "name",
        "actual_end_date",
        "planned_end_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, actual_end_date, planned_end_date FROM [BT]tabWork Order[BT]  WHERE actual_end_date > planned_end_date AND actual_end_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "Which work order took the longest to complete last quarter?",
      "fields": [
        "name",
        "actual_start_date",
        "actual_end_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, actual_start_date, actual_end_date FROM [BT]tabWork Order[BT]  WHERE actual_start_date BETWEEN '2025-01-01' AND '2025-03-31' AND actual_end_date IS NOT NULL ORDER BY duration DESC LIMIT 1\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "How many work orders are currently in progress for each production item?",
      "fields": [
        "name",
        "production_item",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, production_item, status FROM [BT]tabWork Order[BT]  WHERE status = 'In Progress' GROUP BY production_item\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "What is the average lead time for work orders completed last month, grouped by production item?",
      "fields": [
        "name",
        "production_item",
        "lead_time",
        "actual_end_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, production_item, lead_time, actual_end_date FROM [BT]tabWork Order[BT]  WHERE actual_end_date BETWEEN '2025-05-01' AND '2025-05-31' GROUP BY production_item\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "Which project has the highest number of open work orders right now?",
      "fields": [
        "name",
        "project",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, project, status FROM [BT]tabWork Order[BT]  WHERE status = 'Not Started' GROUP BY project ORDER BY count DESC LIMIT 1\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "How much material has been transferred for manufacturing but not yet produced, by work order?",
      "fields": [
        "name",
        "material_transferred_for_manufacturing",
        "produced_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, material_transferred_for_manufacturing, produced_qty FROM [BT]tabWork Order[BT]  WHERE docstatus < 2 AND material_transferred_for_manufacturing > produced_qty\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "List all work orders that had more material transferred than planned quantity.",
      "fields": [
        "name",
        "qty",
        "material_transferred_for_manufacturing"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, qty, material_transferred_for_manufacturing FROM [BT]tabWork Order[BT]  WHERE material_transferred_for_manufacturing > qty''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "Which work orders had a corrective operation cost above 10,000?",
      "fields": [
        "name",
        "corrective_operation_cost"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, corrective_operation_cost FROM [BT]tabWork Order[BT]  WHERE corrective_operation_cost > 10000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "Find average actual operating cost per company this quarter.",
      "fields": [
        "name",
        "company",
        "actual_operating_cost",
        "actual_end_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company, actual_operating_cost, actual_end_date FROM [BT]tabWork Order[BT]  WHERE QUARTER(actual_end_date) = QUARTER(CURDATE()) AND YEAR(actual_end_date) = YEAR(CURDATE()) GROUP BY company''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "Which projects have more than 5 active work orders?",
      "fields": [
        "name",
        "project",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, project, status FROM [BT]tabWork Order[BT]  WHERE status = 'In Process' GROUP BY project HAVING active_orders > 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "List suppliers who submitted more than 3 quotations in the last quarter.",
      "fields": [
        "name",
        "supplier",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, transaction_date FROM [BT]tabSupplier Quotation[BT]  WHERE QUARTER(transaction_date) = QUARTER(CURDATE()) - 1 AND YEAR(transaction_date) = YEAR(CURDATE()) GROUP BY supplier HAVING quotation_count > 3''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which quotations have a total amount higher than the average for their currency?",
      "fields": [
        "name",
        "grand_total",
        "currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total, currency FROM [BT]tabSupplier Quotation[BT]  sq1 WHERE grand_total > (  SELECT name, grand_total, currency FROM [BT]tabSupplier Quotation[BT]  sq2  WHERE sq1.currency = sq2.currency)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Find quotations with incoterm 'FOB' and total taxes above 5000.",
      "fields": [
        "name",
        "incoterm",
        "total_taxes_and_charges"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, incoterm, total_taxes_and_charges FROM [BT]tabSupplier Quotation[BT]  WHERE incoterm = 'FOB' AND total_taxes_and_charges > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "List companies with the highest number of supplier quotations.",
      "fields": [
        "name",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company FROM [BT]tabSupplier Quotation[BT]  GROUP BY company ORDER BY quotation_count DESC LIMIT 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which suppliers submitted quotations with discounts over 10%?",
      "fields": [
        "name",
        "supplier",
        "additional_discount_percentage",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, additional_discount_percentage, grand_total FROM [BT]tabSupplier Quotation[BT]  WHERE additional_discount_percentage > 10 ORDER BY additional_discount_percentage DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "List the top 5 suppliers by total quotation value this year.",
      "fields": [
        "name",
        "supplier",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, grand_total, transaction_date FROM [BT]tabSupplier Quotation[BT]  WHERE YEAR(transaction_date) = YEAR(CURDATE()) GROUP BY supplier ORDER BY total_value DESC LIMIT 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "How many quotations are still in 'Draft' status from each supplier?",
      "fields": [
        "name",
        "supplier",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, status FROM [BT]tabSupplier Quotation[BT]  WHERE status = 'Draft' GROUP BY supplier''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which projects received quotations from more than one supplier?",
      "fields": [
        "name",
        "project",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, project, supplier FROM [BT]tabSupplier Quotation[BT]  WHERE project IS NOT NULL GROUP BY project HAVING COUNT(DISTINCT supplier) > 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Find suppliers whose average quotation amount exceeds 75,000.",
      "fields": [
        "name",
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, grand_total FROM [BT]tabSupplier Quotation[BT]  GROUP BY supplier HAVING avg_quotation > 75000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which suppliers submitted quotations exceeding 50,000 in the last quarter?",
      "fields": [
        "name",
        "supplier",
        "transaction_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, transaction_date, grand_total FROM [BT]tabSupplier Quotation[BT]  WHERE grand_total > 50000 AND transaction_date BETWEEN '2025-01-01' AND '2025-03-31' ORDER BY grand_total DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Find the average total amount of quotations submitted by each supplier in 2025.",
      "fields": [
        "name",
        "supplier",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, grand_total, transaction_date FROM [BT]tabSupplier Quotation[BT]  WHERE YEAR(transaction_date) = 2025 GROUP BY supplier''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which supplier submitted the highest number of quotations in 2024?",
      "fields": [
        "name",
        "supplier",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, transaction_date FROM [BT]tabSupplier Quotation[BT]  WHERE YEAR(transaction_date) = 2024 GROUP BY supplier ORDER BY count DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "List suppliers who submitted quotations for more than 3 different projects.",
      "fields": [
        "name",
        "supplier",
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, project FROM [BT]tabSupplier Quotation[BT]  WHERE project IS NOT NULL GROUP BY supplier HAVING project_count > 3''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Get total quotation value per company for March 2025.",
      "fields": [
        "name",
        "company",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company, grand_total, transaction_date FROM [BT]tabSupplier Quotation[BT]  WHERE transaction_date BETWEEN '2025-03-01' AND '2025-03-31' GROUP BY company''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which suppliers gave quotations with the highest discount amounts in the last 6 months?",
      "fields": [
        "name",
        "supplier",
        "discount_amount",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, discount_amount, transaction_date FROM [BT]tabSupplier Quotation[BT]  WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) ORDER BY discount_amount DESC LIMIT 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which incoterms were used most frequently across all quotations?",
      "fields": [
        "name",
        "incoterm"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, incoterm FROM [BT]tabSupplier Quotation[BT]  WHERE incoterm IS NOT NULL AND incoterm != '' GROUP BY incoterm ORDER BY usage_count DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which suppliers submitted quotations with a base grand total exceeding 1 million QAR?",
      "fields": [
        "name",
        "supplier",
        "base_grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, base_grand_total FROM [BT]tabSupplier Quotation[BT]  WHERE base_grand_total > 1000000 ORDER BY base_grand_total DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which suppliers applied more than one pricing rule in their quotations?",
      "fields": [
        "name",
        "supplier",
        "pricing_rules"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, pricing_rules FROM [BT]tabSupplier Quotation[BT]  WHERE pricing_rules IS NOT NULL AND pricing_rules != '' GROUP BY supplier HAVING rule_usage_count > 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "What is the average rounding adjustment made on quotations this year?",
      "fields": [
        "name",
        "rounding_adjustment",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, rounding_adjustment, transaction_date FROM [BT]tabSupplier Quotation[BT]  WHERE transaction_date >= DATE_FORMAT(CURDATE(), '%Y-01-01')''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which suppliers quoted for multiple cost centers in the past year?",
      "fields": [
        "name",
        "supplier",
        "cost_center",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, cost_center, transaction_date FROM [BT]tabSupplier Quotation[BT]  WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY supplier HAVING unique_cost_centers > 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which quotations were submitted with a price list currency different from the company's default?",
      "fields": [
        "name",
        "price_list_currency",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, price_list_currency, company FROM [BT]tabSupplier Quotation[BT]  sq JOIN [BT]tabCompany[BT] c ON sq.company = c.name WHERE sq.price_list_currency != c.default_currency''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which projects received supplier quotations with base tax deductions greater than 10,000?",
      "fields": [
        "name",
        "project",
        "base_taxes_and_charges_deducted"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, project, base_taxes_and_charges_deducted FROM [BT]tabSupplier Quotation[BT]  WHERE base_taxes_and_charges_deducted > 10000 ORDER BY base_taxes_and_charges_deducted DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "What is the monthly count of quotations submitted per company this year?",
      "fields": [
        "name",
        "company",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company, transaction_date FROM [BT]tabSupplier Quotation[BT]  WHERE transaction_date >= DATE_FORMAT(CURDATE(), '%Y-01-01') GROUP BY company, month ORDER BY company, month''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which suppliers submitted quotations with the same value for net total and grand total more than 5 times?",
      "fields": [
        "name",
        "supplier",
        "net_total",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, net_total, grand_total FROM [BT]tabSupplier Quotation[BT]  WHERE net_total = grand_total GROUP BY supplier HAVING match_count > 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies have auto accounting for stock enabled?",
      "fields": [
        "name",
        "company_name",
        "enable_auto_accounting_for_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_name, enable_auto_accounting_for_stock FROM [BT]tabCompany[BT] WHERE enable_auto_accounting_for_stock = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Fetch all companies registered in the United Arab Emirates.",
      "fields": [
        "name",
        "company_name",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_name, country FROM [BT]tabCompany[BT] WHERE country = 'United Arab Emirates' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get the abbreviation and tax ID of the company named 'FinServe Ltd'.",
      "fields": [
        "name",
        "abbr",
        "tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, abbr, tax_id FROM [BT]tabCompany[BT] WHERE company_name = 'FinServe Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Is there a company named 'GulfTech Holdings'?",
      "fields": [
        "name",
        "company_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_name FROM [BT]tabCompany[BT] WHERE company_name = 'GulfTech Holdings' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "How many companies have a default currency set to 'QAR'?",
      "fields": [
        "name",
        "default_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as total_companies FROM [BT]tabCompany[BT] WHERE default_currency = 'QAR' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get company logo and website for 'Skyline Inc'.",
      "fields": [
        "name",
        "company_logo",
        "website"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_logo, website FROM [BT]tabCompany[BT] WHERE company_name = 'Skyline Inc' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List companies with perpetual inventory enabled.",
      "fields": [
        "name",
        "company_name",
        "enable_perpetual_inventory"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_name, enable_perpetual_inventory FROM [BT]tabCompany[BT] WHERE enable_perpetual_inventory = 1 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get the company details where abbreviation is 'HTS'.",
      "fields": [
        "name",
        "company_name",
        "abbr"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_name, abbr FROM [BT]tabCompany[BT] WHERE abbr = 'HTS' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies are marked as a group?",
      "fields": [
        "name",
        "company_name",
        "is_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_name, is_group FROM [BT]tabCompany[BT] WHERE is_group = 1 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Show all companies with no email address set.",
      "fields": [
        "email",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT email, name FROM [BT]tabCompany[BT] WHERE email IS NULL OR email = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Find companies with a phone number starting with +974.",
      "fields": [
        "name",
        "phone_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, phone_no FROM [BT]tabCompany[BT] WHERE phone_no LIKE '+974%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List companies where the domain is set as 'Retail'.",
      "fields": [
        "name",
        "company_name",
        "domain"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_name, domain FROM [BT]tabCompany[BT] WHERE domain = 'Retail' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get all companies established after 2010.",
      "fields": [
        "name",
        "company_name",
        "date_of_establishment"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_name, date_of_establishment FROM [BT]tabCompany[BT] WHERE YEAR(date_of_establishment) > 2010 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Find companies using 'Bank of Qatar' as their default bank account.",
      "fields": [
        "default_bank_account",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT default_bank_account, name FROM [BT]tabCompany[BT] WHERE default_bank_account = 'Bank of Qatar' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Show companies that have parent company set as 'ERPGulf Global'.",
      "fields": [
        "parent_company",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT parent_company, name FROM [BT]tabCompany[BT] WHERE parent_company = 'ERPGulf Global' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get the write-off and unrealized profit loss accounts of 'Alpha Corp'.",
      "fields": [
        "name",
        "write_off_account",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, write_off_account, unrealized_profit_loss_account FROM [BT]tabCompany[BT] WHERE company_name = 'Alpha Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List companies where chart of accounts is set but no finance book is configured.",
      "fields": [
        "chart_of_accounts",
        "default_finance_book",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT chart_of_accounts, default_finance_book, name FROM [BT]tabCompany[BT] WHERE chart_of_accounts IS NOT NULL AND (default_finance_book IS NULL OR default_finance_book = '') ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "What is the status of delivery note DN-00045?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status FROM [BT]tabDelivery Note[BT] WHERE name = 'DN-00045' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Who is the customer on delivery note DN-00123?",
      "fields": [
        "name",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer FROM [BT]tabDelivery Note[BT] WHERE name = 'DN-00123' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "When was DN-00210 submitted?",
      "fields": [
        "name",
        "posting_date",
        "posting_time"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, posting_time FROM [BT]tabDelivery Note[BT] WHERE name = 'DN-00210' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "What warehouse was used in delivery note DN-00501?",
      "fields": [
        "name",
        "set_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, set_warehouse FROM [BT]tabDelivery Note[BT] WHERE name = 'DN-00501' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "How many items are listed in DN-00444?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as total_items FROM [BT]tabDelivery Note Item[BT] WHERE parent = 'DN-00444' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "What is the contact number for the recipient of DN-00301?",
      "fields": [
        "name",
        "contact_mobile"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, contact_mobile FROM [BT]tabDelivery Note[BT] WHERE name = 'DN-00301' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Was DN-00122 submitted or just saved?",
      "fields": [
        "name",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, docstatus FROM [BT]tabDelivery Note[BT] WHERE name = 'DN-00122' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Show me all delivery notes from this week.",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date FROM [BT]tabDelivery Note[BT] WHERE YEARWEEK(posting_date, 1) = YEARWEEK(CURDATE(), 1) ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "List all deliveries made in May 2025.",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date FROM [BT]tabDelivery Note[BT] WHERE YEAR(posting_date) = 2025 AND MONTH(posting_date) = 5 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Retrieve delivery notes made to Techno Gulf.",
      "fields": [
        "name",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer FROM [BT]tabDelivery Note[BT] WHERE customer = 'Techno Gulf' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "How many items are listed in DN-00444?",
      "fields": [
        "name",
        "item_code",
        "qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT parent as name, item_code, qty FROM [BT]tabDelivery Note Item[BT] WHERE parent = 'DN-00444' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "What is the contact number for the recipient of DN-00301?",
      "fields": [
        "name",
        "contact_mobile"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, contact_mobile FROM [BT]tabDelivery Note[BT] WHERE name = 'DN-00301' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Was DN-00122 submitted or just saved?",
      "fields": [
        "name",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, docstatus FROM [BT]tabDelivery Note[BT] WHERE name = 'DN-00122' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Retrieve delivery notes made to Techno Gulf.",
      "fields": [
        "name",
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, posting_date FROM [BT]tabDelivery Note[BT] WHERE customer = 'Techno Gulf' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Show all delivery notes with status 'To Bill'.",
      "fields": [
        "name",
        "status",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, posting_date FROM [BT]tabDelivery Note[BT] WHERE status = 'To Bill' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Show me all purchase orders that used 'Air Freight' as the shipping rule.",
      "fields": [
        "name",
        "shipping_rule"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, shipping_rule FROM [BT]tabPurchase Order[BT] WHERE shipping_rule = 'Air Freight' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List all purchase orders placed in the last 15 days from 'Delta Traders'.",
      "fields": [
        "name",
        "supplier",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, transaction_date FROM [BT]tabPurchase Order[BT] WHERE supplier = 'Delta Traders' AND transaction_date >= DATE_SUB(CURDATE(), INTERVAL 15 DAY) ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Show all purchase orders that haven't been fully received yet.",
      "fields": [
        "name",
        "per_received",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, per_received, status FROM [BT]tabPurchase Order[BT] WHERE per_received < 100 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "How many orders were placed in EUR currency last quarter?",
      "fields": [
        "name",
        "currency",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as total_orders FROM [BT]tabPurchase Order[BT] WHERE currency = 'EUR' AND QUARTER(transaction_date) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) AND YEAR(transaction_date) = YEAR(CURDATE()) ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Did we place any orders last month for subcontracted work?",
      "fields": [
        "name",
        "is_subcontracted",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_subcontracted, transaction_date FROM [BT]tabPurchase Order[BT] WHERE is_subcontracted = 1 AND MONTH(transaction_date) = MONTH(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) AND YEAR(transaction_date) = YEAR(CURDATE()) ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Get the grand total and taxes for PO-00045.",
      "fields": [
        "name",
        "grand_total",
        "total_taxes_and_charges"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total, total_taxes_and_charges FROM [BT]tabPurchase Order[BT] WHERE name = 'PO-00045' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Compare the average base total of orders placed in Q1 and Q2 of this year.",
      "fields": [
        "quarter",
        "avg_base_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT QUARTER(transaction_date) as quarter, AVG(base_total) as avg_base_total FROM [BT]tabPurchase Order[BT] WHERE YEAR(transaction_date) = YEAR(CURDATE()) AND QUARTER(transaction_date) IN (1, 2) GROUP BY QUARTER(transaction_date) ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Which suppliers gave us the highest discounts in the past year?",
      "fields": [
        "supplier",
        "max_discount"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, MAX(additional_discount_percentage) as max_discount FROM [BT]tabPurchase Order[BT] WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) GROUP BY supplier ORDER BY max_discount DESC ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Find purchase orders with more than 10% discount and over $10,000 grand total.",
      "fields": [
        "name",
        "additional_discount_percentage",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, additional_discount_percentage, grand_total FROM [BT]tabPurchase Order[BT] WHERE additional_discount_percentage > 10 AND grand_total > 10000 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Show me all purchase orders for 'ACME Supplies' scheduled to arrive next week.",
      "fields": [
        "name",
        "supplier",
        "schedule_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, schedule_date FROM [BT]tabPurchase Order[BT] WHERE supplier = 'ACME Supplies' AND YEARWEEK(schedule_date, 1) = YEARWEEK(CURDATE(), 1) + 1 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List all orders created by 'accounts@mycompany.com' that used a custom price list.",
      "fields": [
        "name",
        "owner",
        "buying_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, owner, buying_price_list FROM [BT]tabPurchase Order[BT] WHERE owner = 'accounts@mycompany.com' AND buying_price_list IS NOT NULL ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List orders placed for the 'Green Tower Project' tagged under cost center 'CT-003'.",
      "fields": [
        "name",
        "project",
        "cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, project, cost_center FROM [BT]tabPurchase Order[BT] WHERE project = 'Green Tower Project' AND cost_center = 'CT-003' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Did we place any purchase orders between July 1st and September 30th?",
      "fields": [
        "name",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, transaction_date FROM [BT]tabPurchase Order[BT] WHERE transaction_date BETWEEN '2025-07-01' AND '2025-09-30' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Get the taxes and charges applied in PO-00877 and the incoterm used.",
      "fields": [
        "name",
        "taxes_and_charges",
        "incoterm"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, taxes_and_charges, incoterm FROM [BT]tabPurchase Order[BT] WHERE name = 'PO-00877' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Which purchase orders reference supplier quotation SQ-2031?",
      "fields": [
        "name",
        "ref_sq"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, ref_sq FROM [BT]tabPurchase Order[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "How many orders were raised using the 'Standard Buying' template and are marked as subcontracted?",
      "fields": [
        "name",
        "payment_terms_template",
        "is_subcontracted"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_terms_template, is_subcontracted FROM [BT]tabPurchase Order[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Compare the number of orders created in English vs Arabic language.",
      "fields": [
        "language",
        "COUNT(name) as total_orders"
      ]
    },
    "output": "frappe.db.sql('''SELECT language, COUNT(name) as total_orders FROM [BT]tabPurchase Order[BT] WHERE language IN ('English', 'Arabic') GROUP BY language''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Find all POs where base total taxes added exceeded ₹20,000 and company was 'ABC Pvt Ltd'.",
      "fields": [
        "name",
        "base_taxes_and_charges_added",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, base_taxes_and_charges_added, company FROM [BT]tabPurchase Order[BT] WHERE base_taxes_and_charges_added > 20000 AND company = 'ABC Pvt Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Can you list all orders that had more than 2 payment schedule entries?",
      "fields": [
        "parent",
        "COUNT(name) as schedule_count"
      ]
    },
    "output": "frappe.db.sql('''SELECT parent, COUNT(name) as schedule_count FROM [BT]tabPurchase Order Payment Schedule[BT] GROUP BY parent HAVING COUNT(name) > 2''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "How many purchase orders have discounts above 1000 and are billed partially?",
      "fields": [
        "name",
        "discount_amount",
        "per_billed"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, discount_amount, per_billed FROM [BT]tabPurchase Order[BT] WHERE discount_amount > 1000 AND per_billed < 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Show me orders with rounding adjustment greater than 50 in USD.",
      "fields": [
        "name",
        "rounding_adjustment",
        "currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, rounding_adjustment, currency FROM [BT]tabPurchase Order[BT] WHERE rounding_adjustment > 50 AND currency = 'USD' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Give me subcontracted purchase orders placed in the last 6 months.",
      "fields": [
        "name",
        "is_subcontracted",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_subcontracted, transaction_date FROM [BT]tabPurchase Order[BT] WHERE is_subcontracted = 1 AND transaction_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Do we have any purchase orders with missing billing address but filled shipping address?",
      "fields": [
        "name",
        "billing_address",
        "shipping_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, billing_address, shipping_address FROM [BT]tabPurchase Order[BT] WHERE (billing_address IS NULL OR billing_address = '') AND shipping_address IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Get the incoterm and named place for PO-00045.",
      "fields": [
        "name",
        "incoterm",
        "named_place"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, incoterm, named_place FROM [BT]tabPurchase Order[BT] WHERE name = 'PO-00045' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List all orders with tax deduction and tax category 'TDS 194H'.",
      "fields": [
        "name",
        "apply_tds",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, apply_tds, tax_withholding_category FROM [BT]tabPurchase Order[BT] WHERE apply_tds = 1 AND tax_withholding_category = 'TDS 194H' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Which suppliers have multiple open purchase orders over 50000?",
      "fields": [
        "supplier",
        "COUNT(name) as total_orders"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, COUNT(name) as total_orders FROM [BT]tabPurchase Order[BT] WHERE status = 'To Receive and Bill' AND grand_total > 50000 GROUP BY supplier HAVING COUNT(name) > 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Give me contact email and number for PO-3321.",
      "fields": [
        "name",
        "contact_email",
        "contact_mobile"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, contact_email, contact_mobile FROM [BT]tabPurchase Order[BT] WHERE name = 'PO-3321' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Which purchase orders used pricing rules and are still open?",
      "fields": [
        "name",
        "pricing_rules",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, pricing_rules, status FROM [BT]tabPurchase Order[BT] WHERE pricing_rules IS NOT NULL AND status != 'Closed' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Get the total tax amount and grand total for PO-10234.",
      "fields": [
        "name",
        "total_taxes_and_charges",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_taxes_and_charges, grand_total FROM [BT]tabPurchase Order[BT] WHERE name = 'PO-10234' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "How many orders were placed for Customer 'ABC Retail' and are billed more than 80%?",
      "fields": [
        "name",
        "customer",
        "per_billed"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, per_billed FROM [BT]tabPurchase Order[BT] WHERE customer = 'ABC Retail' AND per_billed > 80''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List orders where total net weight is above 1000 kg and tax category is 'Import GST'.",
      "fields": [
        "name",
        "total_net_weight",
        "tax_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_net_weight, tax_category FROM [BT]tabPurchase Order[BT] WHERE total_net_weight > 1000 AND tax_category = 'Import GST' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Do we have any orders where the supplier name is empty but contact person exists?",
      "fields": [
        "name",
        "supplier_name",
        "contact_person"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_name, contact_person FROM [BT]tabPurchase Order[BT] WHERE (supplier_name IS NULL OR supplier_name = '') AND contact_person IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Fetch all POs where tax withheld amount exceeded 5000 and base grand total is over 1 lakh.",
      "fields": [
        "name",
        "tax_withholding_net_total",
        "base_grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_withholding_net_total, base_grand_total FROM [BT]tabPurchase Order[BT] WHERE tax_withholding_net_total > 5000 AND base_grand_total > 100000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List POs that used shipping rule 'Freight50' and schedule date is next month.",
      "fields": [
        "name",
        "shipping_rule",
        "schedule_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, shipping_rule, schedule_date FROM [BT]tabPurchase Order[BT] WHERE shipping_rule = 'Freight50' AND MONTH(schedule_date) = MONTH(CURDATE()) + 1 AND YEAR(schedule_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Find all purchase orders where the items table includes more than 5 items.",
      "fields": [
        "parent",
        "COUNT(item_code) as item_count"
      ]
    },
    "output": "frappe.db.sql('''SELECT parent, COUNT(item_code) as item_count FROM [BT]tabPurchase Order Item[BT] GROUP BY parent HAVING COUNT(item_code) > 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Get billing and shipping address for PO-55678.",
      "fields": [
        "name",
        "billing_address",
        "shipping_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, billing_address, shipping_address FROM [BT]tabPurchase Order[BT] WHERE name = 'PO-55678' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Which POs use customer contact mobile but don't have email listed?",
      "fields": [
        "name",
        "customer_contact_mobile",
        "customer_contact_email"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_contact_mobile, customer_contact_email FROM [BT]tabPurchase Order[BT] WHERE customer_contact_mobile IS NOT NULL AND customer_contact_email IS NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List all orders where advance paid exceeds 25% of grand total.",
      "fields": [
        "name",
        "advance_paid",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, advance_paid, grand_total FROM [BT]tabPurchase Order[BT] WHERE advance_paid / grand_total > 0.25''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Which POs are overdue based on schedule date but not yet fully received?",
      "fields": [
        "name",
        "schedule_date",
        "per_received"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, schedule_date, per_received FROM [BT]tabPurchase Order[BT] WHERE schedule_date < CURDATE() AND per_received < 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Show POs created this quarter with zero discount and positive tax value.",
      "fields": [
        "name",
        "discount_amount",
        "base_total_taxes_and_charges",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, discount_amount, base_total_taxes_and_charges, transaction_date FROM [BT]tabPurchase Order[BT] WHERE discount_amount = 0 AND base_total_taxes_and_charges > 0 AND QUARTER(transaction_date) = QUARTER(CURDATE()) AND YEAR(transaction_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "How many suppliers are there in total?",
      "fields": [
        "COUNT(name) as total_suppliers"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) as total_suppliers FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "How many suppliers were added this year?",
      "fields": [
        "name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) FROM [BT]tabSupplier[BT] WHERE YEAR(creation) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers from India.",
      "fields": [
        "name",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, country FROM [BT]tabSupplier[BT] WHERE country = 'India' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "How many suppliers belong to the 'Raw Material' group?",
      "fields": [
        "name",
        "supplier_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) FROM [BT]tabSupplier[BT] WHERE supplier_group = 'Raw Material' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which country has the most suppliers?",
      "fields": [
        "name",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT country, COUNT(name) as total FROM [BT]tabSupplier[BT] GROUP BY country ORDER BY total DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "How many suppliers were added last quarter?",
      "fields": [
        "name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) FROM [BT]tabSupplier[BT] WHERE QUARTER(creation) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) AND YEAR(creation) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List internal suppliers only.",
      "fields": [
        "name",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_internal_supplier FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "How many suppliers are from 'Germany' and use 'EUR' as currency?",
      "fields": [
        "name",
        "country",
        "default_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) FROM [BT]tabSupplier[BT] WHERE country = 'Germany' AND default_currency = 'EUR' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which supplier was added most recently?",
      "fields": [
        "name",
        "supplier_name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_name, creation FROM [BT]tabSupplier[BT] ORDER BY creation DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "How many 'Local' suppliers were added this month?",
      "fields": [
        "name",
        "supplier_type",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) FROM [BT]tabSupplier[BT] WHERE supplier_type = 'Local' AND MONTH(creation) = MONTH(CURDATE()) AND YEAR(creation) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "How many purchase orders mention 'urgent' in their terms section?",
      "fields": [
        "name",
        "terms"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) FROM [BT]tabPurchase Order[BT] WHERE terms LIKE '%urgent%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Which suppliers had orders with mobile contact ending in 7890?",
      "fields": [
        "name",
        "contact_mobile"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, contact_mobile FROM [BT]tabPurchase Order[BT] WHERE contact_mobile LIKE '%7890' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List all customers and the related shipping addresses from the last 60 days.",
      "fields": [
        "name",
        "customer",
        "shipping_address",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, shipping_address, transaction_date FROM [BT]tabPurchase Order[BT] WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 60 DAY) ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Find POs where supplier and customer are both from the same company 'Star Textiles Ltd'.",
      "fields": [
        "name",
        "supplier",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, customer FROM [BT]tabPurchase Order[BT] WHERE supplier = 'Star Textiles Ltd' AND customer = 'Star Textiles Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Give me the total number of purchase orders with empty contact email.",
      "fields": [
        "name",
        "contact_email"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) FROM [BT]tabPurchase Order[BT] WHERE IFNULL(contact_email, '') = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Which POs are using the 'Standard Conditions' template for their terms and conditions?",
      "fields": [
        "name",
        "tc_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tc_name FROM [BT]tabPurchase Order[BT] WHERE tc_name = 'Standard Conditions' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Show me all purchase orders where both billing and shipping address belong to 'Zone 4 Logistics Area'.",
      "fields": [
        "name",
        "billing_address",
        "shipping_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, billing_address, shipping_address FROM [BT]tabPurchase Order[BT] WHERE billing_address = 'Zone 4 Logistics Area' AND shipping_address = 'Zone 4 Logistics Area' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Get the grand total and currency for PO-2031.",
      "fields": [
        "name",
        "grand_total",
        "currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total, currency FROM [BT]tabPurchase Order[BT] WHERE name = 'PO-2031' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Which purchase orders were made using USD and had a total above 50,000?",
      "fields": [
        "name",
        "currency",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, currency, grand_total FROM [BT]tabPurchase Order[BT] WHERE currency = 'USD' AND grand_total > 50000 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Do we have any orders where discount exceeded 1000 in total?",
      "fields": [
        "name",
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, discount_amount FROM [BT]tabPurchase Order[BT] WHERE discount_amount > 1000 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "How many purchase orders applied a rounding adjustment over 500?",
      "fields": [
        "name",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) FROM [BT]tabPurchase Order[BT] WHERE rounding_adjustment > 500 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List orders where base net total and net total are not equal (currency mismatch check).",
      "fields": [
        "name",
        "base_net_total",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, base_net_total, net_total FROM [BT]tabPurchase Order[BT] WHERE base_net_total != net_total ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Find purchase orders where the conversion rate was manually adjusted to less than 0.5.",
      "fields": [
        "name",
        "conversion_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, conversion_rate FROM [BT]tabPurchase Order[BT] WHERE conversion_rate < 0.5 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Give me a list of all currency types used in the last 90 days of purchase orders.",
      "fields": [
        "name",
        "currency",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT currency, transaction_date, name FROM [BT]tabPurchase Order[BT] WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 90 DAY) ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Which POs had both additional discount percentage over 10% and base discount amount over 5000?",
      "fields": [
        "name",
        "additional_discount_percentage",
        "base_discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, additional_discount_percentage, base_discount_amount FROM [BT]tabPurchase Order[BT] WHERE additional_discount_percentage > 10 AND base_discount_amount > 5000 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List all purchase orders where the base rounded total and grand total are not matching.",
      "fields": [
        "name",
        "base_rounded_total",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, base_rounded_total, grand_total FROM [BT]tabPurchase Order[BT] WHERE base_rounded_total != grand_total ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "How many purchase orders are linked to a project and still pending?",
      "fields": [
        "name",
        "project",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) FROM [BT]tabPurchase Order[BT] WHERE project IS NOT NULL AND status = 'Pending' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List all purchase orders scheduled in the next 15 days.",
      "fields": [
        "name",
        "schedule_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, schedule_date FROM [BT]tabPurchase Order[BT] WHERE schedule_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 15 DAY) ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Get address and contact details for PO-0218.",
      "fields": [
        "name",
        "supplier_address",
        "contact_person",
        "contact_mobile",
        "contact_email"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_address, contact_person, contact_mobile, contact_email FROM [BT]tabPurchase Order[BT] WHERE name = 'PO-0218' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Which purchase orders were issued under inter-company reference but not yet billed?",
      "fields": [
        "name",
        "inter_company_order_reference",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, inter_company_order_reference, status FROM [BT]tabPurchase Order[BT] WHERE inter_company_order_reference IS NOT NULL AND status != 'Billed' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Check if we have any POs in 'Draft' status but already linked to a customer.",
      "fields": [
        "name",
        "status",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, customer FROM [BT]tabPurchase Order[BT] WHERE status = 'Draft' AND customer IS NOT NULL ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Show all purchase orders with specific tax category 'TDS 194C' and project linked.",
      "fields": [
        "name",
        "tax_withholding_category",
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_withholding_category, project FROM [BT]tabPurchase Order[BT] WHERE tax_withholding_category = 'TDS 194C' AND project IS NOT NULL ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Compare billed vs received percentages for orders in the last 60 days.",
      "fields": [
        "name",
        "per_billed",
        "per_received",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, per_billed, per_received, transaction_date FROM [BT]tabPurchase Order[BT] WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 60 DAY) ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Get the payment terms and conditions for PO-3021.",
      "fields": [
        "name",
        "payment_terms_template",
        "tc_name",
        "terms"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_terms_template, tc_name, terms FROM [BT]tabPurchase Order[BT] WHERE name = 'PO-3021' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Find orders made in April this year and grouped same items.",
      "fields": [
        "name",
        "transaction_date",
        "group_same_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, transaction_date, group_same_items FROM [BT]tabPurchase Order[BT] WHERE MONTH(transaction_date) = 4 AND YEAR(transaction_date) = YEAR(CURDATE()) AND group_same_items = 1 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List all auto-repeating POs still in draft state.",
      "fields": [
        "name",
        "auto_repeat",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, auto_repeat, status FROM [BT]tabPurchase Order[BT] WHERE auto_repeat IS NOT NULL AND status = 'Draft' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Which purchase orders have tax and charges deducted more than 2000 and still had a grand total above 50000?",
      "fields": [
        "name",
        "taxes_and_charges_deducted",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, taxes_and_charges_deducted, grand_total FROM [BT]tabPurchase Order[BT] WHERE taxes_and_charges_deducted > 2000 AND grand_total > 50000 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Get address and contact details for purchase order PO-0218.",
      "fields": [
        "name",
        "supplier_address",
        "contact_person",
        "contact_mobile",
        "contact_email"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, supplier_address, contact_person, contact_mobile, contact_email FROM [BT]tabPurchase Order[BT] WHERE name = \\'PO-0218\\' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Which purchase orders were issued under inter-company reference but not yet billed?",
      "fields": [
        "name",
        "inter_company_order_reference",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, inter_company_order_reference, status FROM [BT]tabPurchase Order[BT] WHERE inter_company_order_reference IS NOT NULL AND status != \\'Billed\\' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Check if we have any POs in 'Draft' status but already linked to a customer.",
      "fields": [
        "name",
        "status",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, status, customer FROM [BT]tabPurchase Order[BT] WHERE status = \\'Draft\\' AND customer IS NOT NULL ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Show all purchase orders with specific tax category 'TDS 194C' and project linked.",
      "fields": [
        "name",
        "tax_withholding_category",
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, tax_withholding_category, project FROM [BT]tabPurchase Order[BT] WHERE tax_withholding_category = \\'TDS 194C\\' AND project IS NOT NULL ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Compare billed vs received percentages for orders in the last 60 days.",
      "fields": [
        "name",
        "per_billed",
        "per_received",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, per_billed, per_received, transaction_date FROM [BT]tabPurchase Order[BT] WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 60 DAY) ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Get the payment terms and conditions for PO-3021.",
      "fields": [
        "name",
        "payment_terms_template",
        "tc_name",
        "terms"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, payment_terms_template, tc_name, terms FROM [BT]tabPurchase Order[BT] WHERE name = \\'PO-3021\\' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Find orders made in April this year and grouped same items.",
      "fields": [
        "name",
        "transaction_date",
        "group_same_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, transaction_date, group_same_items FROM [BT]tabPurchase Order[BT] WHERE MONTH(transaction_date) = 4 AND YEAR(transaction_date) = YEAR(CURDATE()) AND group_same_items = 1 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List all auto-repeating POs still in draft state.",
      "fields": [
        "name",
        "auto_repeat",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, auto_repeat, status FROM [BT]tabPurchase Order[BT] WHERE status = 'Draft' AND auto_repeat IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice Item"
      ],
      "question": "Which customer bought the most pens last month?",
      "fields": [
        "name",
        "customer",
        "item_name",
        "qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT si.customer, SUM(sii.qty) AS total_qty FROM [BT]tabSales Invoice Item[BT] sii JOIN [BT]tabSales Invoice[BT] si ON si.name = sii.parent WHERE sii.item_name = 'Pen' AND si.posting_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) GROUP BY si.customer ORDER BY total_qty DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice Item"
      ],
      "question": "What are the top 3 items sold by quantity this quarter?",
      "fields": [
        "name",
        "item_code",
        "qty",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code, SUM(qty) AS total_qty FROM [BT]tabSales Invoice Item[BT] sii JOIN [BT]tabSales Invoice[BT] si ON si.name = sii.parent WHERE si.posting_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY item_code ORDER BY total_qty DESC LIMIT 3''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the total revenue for each month in the last 6 months?",
      "fields": [
        "name",
        "posting_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT DATE_FORMAT(posting_date, '%Y-%m') AS month, SUM(grand_total) AS total_revenue FROM [BT]tabSales Invoice[BT] WHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY month ORDER BY month ASC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Compare the gross profit of the last 8 quarters?",
      "fields": [
        "name",
        "posting_date",
        "base_net_total",
        "base_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT CONCAT(YEAR(posting_date), '-', QUARTER(posting_date)) AS quarter, SUM(base_total - base_net_total) AS gross_profit FROM [BT]tabSales Invoice[BT] WHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 24 MONTH) GROUP BY quarter ORDER BY quarter DESC LIMIT 8''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Journal Entry Account"
      ],
      "question": "How much we lost due to exchange rate variation last year?",
      "fields": [
        "name",
        "account",
        "debit_in_account_currency",
        "credit_in_account_currency",
        "exchange_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, account, debit_in_account_currency, credit_in_account_currency, exchange_rate FROM [BT]tabJournal Entry Account[BT] WHERE account = 'Exchange Gain/Loss - FX' AND posting_date BETWEEN DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 YEAR),'%Y-01-01') AND DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 YEAR),'%Y-12-31')''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show me customers with a credit limit below 10,000.",
      "fields": [
        "name",
        "customer_name",
        "credit_limits"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, customer_name, credit_limits FROM [BT]tabCustomer[BT] WHERE credit_limits < 10000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List all customers that belong to the 'Retail' group and speak English.",
      "fields": [
        "name",
        "customer_name",
        "customer_group",
        "language"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, customer_name, customer_group, language FROM [BT]tabCustomer[BT] WHERE customer_group = 'Retail' AND language = 'English' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Who are the customers using 'INR' currency and located in 'India'?",
      "fields": [
        "name",
        "customer_name",
        "default_currency",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, customer_name, default_currency, territory FROM [BT]tabCustomer[BT] WHERE default_currency = 'INR' AND territory = 'India' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Get customers who joined before 2020.",
      "fields": [
        "name",
        "customer_name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, customer_name, creation FROM [BT]tabCustomer[BT] WHERE YEAR(creation) < 2020''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Who are the top 3 customers by total sales amount this year?",
      "fields": [
        "name",
        "customer",
        "base_grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer, SUM(base_grand_total) AS total_sales FROM [BT]tabSales Invoice[BT] WHERE posting_date BETWEEN DATE_FORMAT(CURDATE(), '%Y-01-01') AND CURDATE() AND docstatus = 1 GROUP BY customer ORDER BY total_sales DESC LIMIT 3''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "How many new internal customers did we add in the last 6 months?",
      "fields": [
        "name",
        "is_internal_customer",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, is_internal_customer, creation FROM [BT]tabCustomer[BT] WHERE is_internal_customer = 1 AND creation >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customer groups have the highest number of disabled customers?",
      "fields": [
        "name",
        "customer_group",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer_group, COUNT(name) AS count_disabled FROM [BT]tabCustomer[BT] WHERE disabled = 1 GROUP BY customer_group ORDER BY count_disabled DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "What is the trend in customer signups by gender over the past year?",
      "fields": [
        "name",
        "gender",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT gender, MONTH(creation) AS month, COUNT(name) AS signups FROM [BT]tabCustomer[BT] WHERE creation >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH) GROUP BY gender, month ORDER BY month ASC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Who are the customers handled by 'Ravi Kumar' and belong to 'Retail' group?",
      "fields": [
        "name",
        "customer_name",
        "account_manager",
        "customer_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, customer_name, account_manager, customer_group FROM [BT]tabCustomer[BT] WHERE account_manager = 'Ravi Kumar' AND customer_group = 'Retail' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Give me names of businesses that fall under the wholesale category.",
      "fields": [
        "name",
        "customer_name",
        "customer_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, customer_name, customer_group FROM [BT]tabCustomer[BT] WHERE customer_group = 'Wholesale' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Can you list all clients based in the UAE region?",
      "fields": [
        "name",
        "customer_name",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, customer_name, territory FROM [BT]tabCustomer[BT] WHERE territory = 'UAE' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Hey, I need a list of all customers we have in the Gulf market.",
      "fields": [
        "name",
        "customer_name",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, customer_name, territory FROM [BT]tabCustomer[BT] WHERE territory IN ('UAE','Qatar','Saudi Arabia','Kuwait','Bahrain','Oman') ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers use USD as their default currency?",
      "fields": [
        "name",
        "customer_name",
        "default_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, customer_name, default_currency FROM [BT]tabCustomer[BT] WHERE default_currency = 'USD' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Find customers who are from 'India', managed by 'Neha', and have a credit limit above 1 lakh.",
      "fields": [
        "name",
        "customer_name",
        "territory",
        "account_manager",
        "credit_limits"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, customer_name, territory, account_manager, credit_limits FROM [BT]tabCustomer[BT] WHERE territory = 'India' AND account_manager = 'Neha' AND credit_limits > 100000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List all corporate customers using EUR currency and part of Hospitality segment.",
      "fields": [
        "name",
        "customer_name",
        "customer_type",
        "default_currency",
        "market_segment"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, customer_name, customer_type, default_currency, market_segment FROM [BT]tabCustomer[BT] WHERE customer_type = 'Corporate' AND default_currency = 'EUR' AND market_segment = 'Hospitality' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which territory has the highest number of customers?",
      "fields": [
        "name",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT territory, COUNT(name) AS total_customers FROM [BT]tabCustomer[BT] GROUP BY territory ORDER BY total_customers DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Compare the number of internal vs external customers.",
      "fields": [
        "name",
        "is_internal_customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_internal_customer, COUNT(name) AS total FROM [BT]tabCustomer[BT] GROUP BY is_internal_customer''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers have open sales orders but haven’t placed any invoices yet?",
      "fields": [
        "name",
        "customer_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT so.customer AS customer_name FROM [BT]tabSales Order[BT] so LEFT JOIN [BT]tabSales Invoice[BT] si ON so.customer = si.customer WHERE si.name IS NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Who are the customers added in the last 30 days?",
      "fields": [
        "name",
        "customer_name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, customer_name, creation FROM [BT]tabCustomer[BT] WHERE creation >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List all customers registered this year.",
      "fields": [
        "name",
        "customer_name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, customer_name, creation FROM [BT]tabCustomer[BT] WHERE YEAR(creation) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List all customers along with their group and territory.",
      "fields": [
        "name",
        "customer_name",
        "customer_group",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, customer_name, customer_group, territory FROM [BT]tabCustomer[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show me every customer that is currently disabled.",
      "fields": [
        "name",
        "customer_name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, customer_name, disabled FROM [BT]tabCustomer[BT] WHERE disabled = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers are linked to leads from Qatar?",
      "fields": [
        "name",
        "customer_name",
        "lead_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT c.name, c.customer_name, c.lead_name FROM [BT]tabCustomer[BT] c JOIN [BT]tabLead[BT] l ON c.lead_name = l.name WHERE l.country = 'Qatar' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers who have a default price list assigned.",
      "fields": [
        "name",
        "customer_name",
        "default_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, customer_name, default_price_list FROM [BT]tabCustomer[BT] WHERE default_price_list IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "What is the email address of the customer named 'Ahmed Trading Co'?",
      "fields": [
        "name",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, email_id FROM [BT]tabCustomer[BT] WHERE customer_name = 'Ahmed Trading Co' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List all customers with the gender specified as 'Female'.",
      "fields": [
        "name",
        "customer_name",
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, customer_name, gender FROM [BT]tabCustomer[BT] WHERE gender = 'Female' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers have a website link added?",
      "fields": [
        "name",
        "customer_name",
        "website"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT name, customer_name, website FROM [BT]tabCustomer[BT] WHERE website IS NOT NULL AND website != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Get all customers with 'Standard Selling' as their default price list.",
      "fields": [
        "name",
        "customer_name",
        "default_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, default_price_list FROM [BT]tabCustomer[BT] WHERE default_price_list = 'Standard Selling' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Find customers that have set 'Doha Bank' as their default bank account.",
      "fields": [
        "name",
        "customer_name",
        "default_bank_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, default_bank_account FROM [BT]tabCustomer[BT] WHERE default_bank_account = 'Doha Bank' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers have the 'Sales Order' required flag enabled?",
      "fields": [
        "name",
        "customer_name",
        "so_required"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, so_required FROM [BT]tabCustomer[BT] WHERE so_required = 1 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show all customers who have enabled delivery note requirement.",
      "fields": [
        "name",
        "customer_name",
        "dn_required"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, dn_required FROM [BT]tabCustomer[BT] WHERE dn_required = 1 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers and their loyalty program tier.",
      "fields": [
        "name",
        "customer_name",
        "loyalty_program_tier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, loyalty_program_tier FROM [BT]tabCustomer[BT] WHERE loyalty_program_tier IS NOT NULL ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers are associated with the company 'HTS Qatar'?",
      "fields": [
        "name",
        "customer_name",
        "companies"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, companies FROM [BT]tabCustomer[BT] WHERE FIND_IN_SET('HTS Qatar', companies) ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Get all customers marked as internal customers.",
      "fields": [
        "name",
        "customer_name",
        "is_internal_customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, is_internal_customer FROM [BT]tabCustomer[BT] WHERE is_internal_customer = 1 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Find all customers with mobile numbers starting with +974.",
      "fields": [
        "name",
        "customer_name",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, mobile_no FROM [BT]tabCustomer[BT] WHERE mobile_no LIKE '+974%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Give me all the customers having 'Retail' group and active portal users.",
      "fields": [
        "name",
        "customer_name",
        "customer_group",
        "portal_users"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, customer_group, portal_users FROM [BT]tabCustomer[BT] WHERE customer_group = 'Retail' AND portal_users = 1 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers do not have a tax ID assigned?",
      "fields": [
        "name",
        "customer_name",
        "tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, tax_id FROM [BT]tabCustomer[BT] WHERE tax_id IS NULL OR tax_id = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers whose names start with 'A'.",
      "fields": [
        "name",
        "customer_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name FROM [BT]tabCustomer[BT] WHERE customer_name LIKE 'A%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Retrieve all internal customers with a defined tax category.",
      "fields": [
        "name",
        "customer_name",
        "is_internal_customer",
        "tax_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, is_internal_customer, tax_category FROM [BT]tabCustomer[BT] WHERE is_internal_customer = 1 AND tax_category IS NOT NULL ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers fall under the 'Automotive' industry?",
      "fields": [
        "name",
        "customer_name",
        "industry"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, industry FROM [BT]tabCustomer[BT] WHERE industry = 'Automotive' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Can you tell me how many customers are there in the system?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS total_customers FROM [BT]tabCustomer[BT] ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show me the details of 'Super Mart' including currency and address.",
      "fields": [
        "name",
        "customer_name",
        "default_currency",
        "primary_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, default_currency, primary_address FROM [BT]tabCustomer[BT] WHERE customer_name = 'Super Mart' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customer groups have more than 10 customers?",
      "fields": [
        "name",
        "customer_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer_group, COUNT(name) AS total_customers FROM [BT]tabCustomer[BT] GROUP BY customer_group HAVING total_customers > 10 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Give all customers with assigned loyalty programs.",
      "fields": [
        "name",
        "customer_name",
        "loyalty_program"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, loyalty_program FROM [BT]tabCustomer[BT] WHERE loyalty_program IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "What is the average credit limit across all corporate customers?",
      "fields": [
        "name",
        "customer_type",
        "credit_limits"
      ]
    },
    "output": "frappe.db.sql('''SELECT AVG(credit_limits) AS average_credit_limit FROM [BT]tabCustomer[BT] WHERE customer_type = 'Company' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item Price"
      ],
      "question": "How much price increase happened for Mangos last 5 years?",
      "fields": [
        "name",
        "item_code",
        "price_list_rate",
        "valid_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, price_list_rate, valid_from FROM [BT]tabItem Price[BT] WHERE item_code = 'Mango' AND valid_from >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR) ORDER BY valid_from''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Give me all delivery notes created today.",
      "fields": [
        "name",
        "posting_date",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, customer FROM [BT]tabDelivery Note[BT] WHERE DATE(posting_date) = CURDATE()''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "List all delivery notes that mention item 'Pen Blue'.",
      "fields": [
        "name",
        "items"
      ]
    },
    "output": "frappe.db.sql('''SELECT dn.name, dni.item_name FROM [BT]tabDelivery Note[BT] dn JOIN [BT]tabDelivery Note Item[BT] dni ON dn.name = dni.parent WHERE dni.item_name = 'Pen Blue' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Show me deliveries handled by the courier 'Qatar Express'.",
      "fields": [
        "name",
        "transporter"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, transporter FROM [BT]tabDelivery Note[BT] WHERE transporter = 'Qatar Express' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Which delivery notes were made by warehouse 'WH-001'?",
      "fields": [
        "name",
        "set_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, set_warehouse FROM [BT]tabDelivery Note[BT] WHERE set_warehouse = 'WH-001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "What is the average number of items per delivery this year?",
      "fields": [
        "name",
        "total_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT AVG(total_qty) AS avg_items_per_delivery FROM [BT]tabDelivery Note[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Show all delivery notes for customer 'Al Sada Trading' with status 'Completed'.",
      "fields": [
        "name",
        "customer",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, status FROM [BT]tabDelivery Note[BT] WHERE customer = 'Al Sada Trading' AND status = 'Completed' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Get delivery notes with more than 5 items and submitted after June 1st.",
      "fields": [
        "name",
        "total_qty",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_qty, posting_date FROM [BT]tabDelivery Note[BT] WHERE total_qty > 5 AND posting_date > '2025-06-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "List all deliveries to customers in Doha that are still pending billing.",
      "fields": [
        "name",
        "customer_address",
        "per_billed"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_address, per_billed FROM [BT]tabDelivery Note[BT] WHERE customer_address LIKE '%Doha%' AND per_billed < 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Find all delivery notes where delivery date is after posting date.",
      "fields": [
        "name",
        "lr_date",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, lr_date, posting_date FROM [BT]tabDelivery Note[BT] WHERE lr_date > posting_date''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Which deliveries were handled by 'Mohammed Khan' and sent to 'Al Wakrah'?",
      "fields": [
        "name",
        "driver_name",
        "shipping_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, driver_name, shipping_address FROM [BT]tabDelivery Note[BT] WHERE driver_name = 'Mohammed Khan' AND shipping_address LIKE '%Al Wakrah%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Which delivery notes were associated with the project 'Retail Expansion 2025'?",
      "fields": [
        "name",
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, project FROM [BT]tabDelivery Note[BT] WHERE project = 'Retail Expansion 2025' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "List deliveries that used cost center 'Main Warehouse Center'.",
      "fields": [
        "name",
        "cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, cost_center FROM [BT]tabDelivery Note[BT] WHERE cost_center = 'Main Warehouse Center' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Which delivery notes have rounding adjustments greater than 10?",
      "fields": [
        "name",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, rounding_adjustment FROM [BT]tabDelivery Note[BT] WHERE rounding_adjustment > 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Find delivery notes with additional discounts more than 5 percent.",
      "fields": [
        "name",
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, additional_discount_percentage FROM [BT]tabDelivery Note[BT] WHERE additional_discount_percentage > 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Show me all delivery notes with tax category 'Export'.",
      "fields": [
        "name",
        "tax_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_category FROM [BT]tabDelivery Note[BT] WHERE tax_category = 'Export' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Show the last few delivery notes for Gulf Supplies.",
      "fields": [
        "name",
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, posting_date FROM [BT]tabDelivery Note[BT] WHERE customer = 'Gulf Supplies' ORDER BY posting_date DESC LIMIT 5 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Are there any delivery notes missing a driver name?",
      "fields": [
        "name",
        "driver_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, driver_name FROM [BT]tabDelivery Note[BT] WHERE driver_name IS NULL OR driver_name = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Show delivery notes that are still open and over 7 days old.",
      "fields": [
        "name",
        "status",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, posting_date FROM [BT]tabDelivery Note[BT] WHERE status = 'Draft' AND posting_date < DATE_SUB(CURDATE(), INTERVAL 7 DAY) ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "What is the average delivery delay this year?",
      "fields": [
        "name",
        "posting_date",
        "lr_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT AVG(DATEDIFF(lr_date, posting_date)) AS avg_delay_days FROM [BT]tabDelivery Note[BT] WHERE YEAR(posting_date) = YEAR(CURDATE()) AND lr_date IS NOT NULL ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Which deliveries took more than one day from creation to dispatch?",
      "fields": [
        "name",
        "posting_date",
        "lr_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, lr_date FROM [BT]tabDelivery Note[BT] WHERE lr_date IS NOT NULL AND DATEDIFF(lr_date, posting_date) > 1 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Were there any deliveries cancelled this month?",
      "fields": [
        "name",
        "status",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, posting_date FROM [BT]tabDelivery Note[BT] WHERE status = 'Cancelled' AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE()) ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "What was the last delivery we made to ABC Electronics?",
      "fields": [
        "name",
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, posting_date FROM [BT]tabDelivery Note[BT] WHERE customer = 'ABC Electronics' ORDER BY posting_date DESC LIMIT 1 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "What delivery notes were created from Sales Order SO-00012?",
      "fields": [
        "name",
        "po_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, po_no FROM [BT]tabDelivery Note[BT] WHERE po_no = 'SO-00012' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "From which warehouse was the item 'Laptop 14' shipped?",
      "fields": [
        "name",
        "set_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT dn.name, dn.set_warehouse FROM [BT]tabDelivery Note[BT] dn JOIN [BT]tabDelivery Note Item[BT] dni ON dn.name = dni.parent WHERE dni.item_name = 'Laptop 14' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "What were the delivered quantities for item 'Notebook A5' last month?",
      "fields": [
        "name",
        "items",
        "total_qty",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT dn.name, dni.item_name AS items, dni.qty AS total_qty, dn.posting_date FROM [BT]tabDelivery Note[BT] dn JOIN [BT]tabDelivery Note Item[BT] dni ON dn.name = dni.parent WHERE dni.item_name = 'Notebook A5' AND MONTH(dn.posting_date) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(dn.posting_date) = YEAR(CURDATE()) ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List all invoices created after June 2025.",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date FROM [BT]tabPurchase Invoice[BT] WHERE posting_date > '2025-06-30' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "What is the full address of customer 'CUST-0003'?",
      "fields": [
        "name",
        "customer_name",
        "customer_type",
        "customer_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, customer_type, customer_address FROM [BT]tabCustomer[BT] WHERE name = 'CUST-0003' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices with outstanding amount below 1000.",
      "fields": [
        "name",
        "grand_total",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total, outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE outstanding_amount < 1000 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "List employees who joined after 2023.",
      "fields": [
        "name",
        "employee_name",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, date_of_joining FROM [BT]tabEmployee[BT] WHERE date_of_joining > '2023-12-31' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Get items with brand 'Dell' and price above 5000.",
      "fields": [
        "name",
        "brand",
        "standard_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, brand, standard_rate FROM [BT]tabItem[BT] WHERE brand = 'Dell' AND standard_rate > 5000 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers are active and based in Qatar?",
      "fields": [
        "name",
        "supplier_type",
        "supplier_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_type, supplier_group FROM [BT]tabSupplier[BT] WHERE disabled = 0 AND country = 'Qatar' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quotation"
      ],
      "question": "List quotations for customer 'Gulf Steel' having discount over 10%.",
      "fields": [
        "name",
        "customer",
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, discount_amount FROM [BT]tabQuotation[BT] WHERE customer = 'Gulf Steel' AND discount_amount > 10 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Timesheet"
      ],
      "question": "Did 'EMP-003' log more than 8 hours on June 5, 2025?",
      "fields": [
        "name",
        "employee",
        "hours",
        "from_time"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee, hours, from_time FROM [BT]tabTimesheet[BT] WHERE employee = 'EMP-003' AND DATE(from_time) = '2025-06-05' AND hours > 8 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Was any order placed with delivery date in December 2025?",
      "fields": [
        "name",
        "transaction_date",
        "delivery_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, transaction_date, delivery_date FROM [BT]tabPurchase Order[BT] WHERE MONTH(delivery_date) = 12 AND YEAR(delivery_date) = 2025 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Project"
      ],
      "question": "Which projects are overdue as of today?",
      "fields": [
        "name",
        "status",
        "expected_end_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, expected_end_date FROM [BT]tabProject[BT] WHERE status != 'Completed' AND expected_end_date < CURDATE() ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Get all delivered orders with net total above 20,000.",
      "fields": [
        "name",
        "delivery_date",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, delivery_date, net_total FROM [BT]tabSales Order[BT] WHERE docstatus = 1 AND net_total > 20000 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Count payment entries with mode of payment as 'Cash'.",
      "fields": [
        "name",
        "posting_date",
        "paid_amount",
        "mode_of_payment"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, paid_amount, mode_of_payment FROM [BT]tabPayment Entry[BT] WHERE mode_of_payment = 'Cash' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get the default currency of 'Acme Corporation'.",
      "fields": [
        "name",
        "default_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_currency FROM [BT]tabCompany[BT] WHERE company_name = 'Acme Corporation' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "How many companies have a default receivable account?",
      "fields": [
        "name",
        "default_receivable_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_receivable_account FROM [BT]tabCompany[BT] WHERE default_receivable_account IS NOT NULL ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List the names of companies incorporated in India.",
      "fields": [
        "name",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, country FROM [BT]tabCompany[BT] WHERE country = 'India' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Check if a company named 'Global Finance Inc.' exists.",
      "fields": [
        "name",
        "company_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_name FROM [BT]tabCompany[BT] WHERE company_name = 'Global Finance Inc.' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get a list of companies using 'INR' currency and having a default bank account.",
      "fields": [
        "name",
        "default_currency",
        "default_bank_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_currency, default_bank_account FROM [BT]tabCompany[BT] WHERE default_currency = 'INR' AND default_bank_account IS NOT NULL ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Fetch the abbreviation and email of the company with tax ID 'GSTIN1234'.",
      "fields": [
        "name",
        "abbr",
        "email",
        "tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, abbr, email, tax_id FROM [BT]tabCompany[BT] WHERE tax_id = 'GSTIN1234' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "How many companies are set as groups?",
      "fields": [
        "name",
        "is_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_group FROM [BT]tabCompany[BT] WHERE is_group = 1 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get all company names with no domain assigned.",
      "fields": [
        "name",
        "domain"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, domain FROM [BT]tabCompany[BT] WHERE domain IS NULL ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Check whether there’s any company established on '2020-01-01'.",
      "fields": [
        "name",
        "date_of_establishment"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, date_of_establishment FROM [BT]tabCompany[BT] WHERE date_of_establishment = '2020-01-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies use USD as their default currency?",
      "fields": [
        "name",
        "default_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_currency FROM [BT]tabCompany[BT] WHERE default_currency = 'USD' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List companies that were established before 2015.",
      "fields": [
        "name",
        "date_of_establishment"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, date_of_establishment FROM [BT]tabCompany[BT] WHERE date_of_establishment < '2015-01-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Show companies with tax ID starting with 'GST'.",
      "fields": [
        "name",
        "tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_id FROM [BT]tabCompany[BT] WHERE tax_id LIKE 'GST%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get the list of companies having default warehouse for sales return.",
      "fields": [
        "name",
        "default_warehouse_for_sales_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_warehouse_for_sales_return FROM [BT]tabCompany[BT] WHERE default_warehouse_for_sales_return IS NOT NULL ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Find companies with perpetual inventory enabled.",
      "fields": [
        "name",
        "enable_perpetual_inventory"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, enable_perpetual_inventory FROM [BT]tabCompany[BT] WHERE enable_perpetual_inventory = 1 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List companies with a website starting with 'www.'",
      "fields": [
        "name",
        "website"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, website FROM [BT]tabCompany[BT] WHERE website LIKE 'www.%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List all companies that allow account creation against child company.",
      "fields": [
        "name",
        "allow_account_creation_against_child_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, allow_account_creation_against_child_company FROM [BT]tabCompany[BT] WHERE allow_account_creation_against_child_company = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies have no registration details filled?",
      "fields": [
        "name",
        "registration_details"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, registration_details FROM [BT]tabCompany[BT] WHERE registration_details IS NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Find companies with a company logo uploaded.",
      "fields": [
        "name",
        "company_logo"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_logo FROM [BT]tabCompany[BT] WHERE company_logo IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List companies where depreciation cost center is not set.",
      "fields": [
        "name",
        "depreciation_cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, depreciation_cost_center FROM [BT]tabCompany[BT] WHERE depreciation_cost_center IS NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies are using a default operating cost account?",
      "fields": [
        "name",
        "default_operating_cost_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_operating_cost_account FROM [BT]tabCompany[BT] WHERE default_operating_cost_account IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get the list of companies with cost centers configured.",
      "fields": [
        "name",
        "cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, cost_center FROM [BT]tabCompany[BT] WHERE cost_center IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Show all companies with budget approver roles assigned.",
      "fields": [
        "name",
        "exception_budget_approver_role"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, exception_budget_approver_role FROM [BT]tabCompany[BT] WHERE exception_budget_approver_role IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies have fixed asset defaults set up?",
      "fields": [
        "name",
        "fixed_asset_defaults"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, fixed_asset_defaults FROM [BT]tabCompany[BT] WHERE fixed_asset_defaults IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies were created without a phone number?",
      "fields": [
        "name",
        "phone_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, phone_no FROM [BT]tabCompany[BT] WHERE phone_no IS NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Find companies with default cash and bank accounts set.",
      "fields": [
        "name",
        "default_cash_account",
        "default_bank_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_cash_account, default_bank_account FROM [BT]tabCompany[BT] WHERE default_cash_account IS NOT NULL AND default_bank_account IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get the list of companies whose abbreviation is more than 3 characters.",
      "fields": [
        "name",
        "abbr"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, abbr FROM [BT]tabCompany[BT] WHERE LENGTH(abbr) > 3''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Show companies that have payment terms configured.",
      "fields": [
        "name",
        "payment_terms"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_terms FROM [BT]tabCompany[BT] WHERE payment_terms IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies have auto accounting for stock enabled?",
      "fields": [
        "name",
        "auto_accounting_for_stock_settings"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, auto_accounting_for_stock_settings FROM [BT]tabCompany[BT] WHERE auto_accounting_for_stock_settings = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Find companies with monthly sales target mentioned.",
      "fields": [
        "name",
        "monthly_sales_target"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, monthly_sales_target FROM [BT]tabCompany[BT] WHERE monthly_sales_target IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies operate under the domain 'manufacturing'?",
      "fields": [
        "name",
        "domain"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, domain FROM [BT]tabCompany[BT] WHERE domain = 'manufacturing' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List companies that belong to a parent company.",
      "fields": [
        "name",
        "parent_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, parent_company FROM [BT]tabCompany[BT] WHERE parent_company IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies have more than 5 subsidiaries?",
      "fields": [
        "name",
        "company_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_name FROM [BT]tabCompany[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Find companies using Oracle Financials.",
      "fields": [
        "name",
        "chart_of_accounts"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, chart_of_accounts FROM [BT]tabCompany[BT] WHERE chart_of_accounts LIKE '%Oracle Financials%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies support remote work?",
      "fields": [
        "name",
        "email",
        "website"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, email, website FROM [BT]tabCompany[BT] WHERE email IS NOT NULL AND website IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get companies that filed tax returns for 2023.",
      "fields": [
        "name",
        "tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_id FROM [BT]tabCompany[BT] WHERE tax_id IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies use AI for recruitment?",
      "fields": [
        "name",
        "company_description"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_description FROM [BT]tabCompany[BT] WHERE company_description LIKE '%AI%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List all companies with female leadership.",
      "fields": [
        "name",
        "company_name",
        "email"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_name, email FROM [BT]tabCompany[BT] WHERE company_description LIKE '%female leadership%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get all companies that use 'Cash - CO' for cash transactions.",
      "fields": [
        "name",
        "default_cash_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_cash_account FROM [BT]tabCompany[BT] WHERE default_cash_account = 'Cash - CO' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Find companies where the default receivable and payable accounts are set.",
      "fields": [
        "name",
        "default_receivable_account",
        "default_payable_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_receivable_account, default_payable_account FROM [BT]tabCompany[BT] WHERE default_receivable_account IS NOT NULL AND default_payable_account IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies are configured with a depreciation cost center?",
      "fields": [
        "name",
        "depreciation_cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, depreciation_cost_center FROM [BT]tabCompany[BT] WHERE depreciation_cost_center IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List companies whose name starts with 'Tech'.",
      "fields": [
        "name",
        "company_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_name FROM [BT]tabCompany[BT] WHERE name LIKE 'Tech%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get companies with unrealized profit/loss account defined.",
      "fields": [
        "name",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, unrealized_profit_loss_account FROM [BT]tabCompany[BT] WHERE unrealized_profit_loss_account IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Find all companies that have fixed asset defaults configured.",
      "fields": [
        "name",
        "fixed_asset_defaults"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, fixed_asset_defaults FROM [BT]tabCompany[BT] WHERE fixed_asset_defaults IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List companies where the domain is not set.",
      "fields": [
        "name",
        "domain"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, domain FROM [BT]tabCompany[BT] WHERE domain IS NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Show companies having monthly sales target above 500000.",
      "fields": [
        "name",
        "monthly_sales_target"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, monthly_sales_target FROM [BT]tabCompany[BT] WHERE monthly_sales_target > 500000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies have round-off account set?",
      "fields": [
        "name",
        "round_off_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, round_off_account FROM [BT]tabCompany[BT] WHERE round_off_account IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List all companies with a CEO assigned.",
      "fields": [
        "name",
        "company_name",
        "tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_name, tax_id FROM [BT]tabCompany[BT] WHERE tax_id IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Show companies founded before the internet era.",
      "fields": [
        "name",
        "default_currency",
        "domain"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_currency, domain FROM [BT]tabCompany[BT] WHERE date_of_establishment < '1990-01-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get company headquarters location.",
      "fields": [
        "name",
        "address_html",
        "fax"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, address_html, fax FROM [BT]tabCompany[BT] WHERE address_html IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List all companies run by women entrepreneurs.",
      "fields": [
        "name",
        "company_name",
        "domain"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_name, domain FROM [BT]tabCompany[BT] WHERE company_description LIKE '%women%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies have an internal Slack channel?",
      "fields": [
        "name",
        "company_name",
        "email"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_name, email FROM [BT]tabCompany[BT] WHERE email LIKE '%slack%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List all companies established after 2015 in India.",
      "fields": [
        "name",
        "date_of_establishment",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, date_of_establishment, country FROM [BT]tabCompany[BT] WHERE date_of_establishment > '2015-01-01' AND country='India' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies have a default currency set to USD and operate in the USA?",
      "fields": [
        "name",
        "default_currency",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_currency, country FROM [BT]tabCompany[BT] WHERE default_currency='USD' AND country='USA' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Find companies that are parent companies and not part of any group.",
      "fields": [
        "name",
        "is_group",
        "parent_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_group, parent_company FROM [BT]tabCompany[BT] WHERE is_group=0 AND parent_company IS NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Show companies using the standard holiday list and operating in the UAE.",
      "fields": [
        "name",
        "default_holiday_list",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_holiday_list, country FROM [BT]tabCompany[BT] WHERE default_holiday_list='Standard' AND country='UAE' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies have a credit limit greater than 100000?",
      "fields": [
        "name",
        "credit_limit"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, credit_limit FROM [BT]tabCompany[BT] WHERE credit_limit > 100000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List companies that have depreciation enabled but without a depreciation cost center set.",
      "fields": [
        "name",
        "depreciation_expense_account",
        "depreciation_cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, depreciation_expense_account, depreciation_cost_center FROM [BT]tabCompany[BT] WHERE depreciation_expense_account IS NOT NULL AND depreciation_cost_center IS NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Get companies using perpetual inventory.",
      "fields": [
        "name",
        "enable_perpetual_inventory"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, enable_perpetual_inventory FROM [BT]tabCompany[BT] WHERE enable_perpetual_inventory=1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies were incorporated after 2020 and belong to the Europe domain?",
      "fields": [
        "name",
        "date_of_incorporation",
        "domain"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, date_of_incorporation, domain FROM [BT]tabCompany[BT] WHERE date_of_incorporation > '2020-01-01' AND domain LIKE '%Europe%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List companies using a custom chart of accounts.",
      "fields": [
        "name",
        "chart_of_accounts"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, chart_of_accounts FROM [BT]tabCompany[BT] WHERE chart_of_accounts IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies have a default finance book set but no exchange gain loss account?",
      "fields": [
        "name",
        "default_finance_book",
        "exchange_gain_loss_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_finance_book, exchange_gain_loss_account FROM [BT]tabCompany[BT] WHERE default_finance_book IS NOT NULL AND exchange_gain_loss_account IS NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Show the tax ID and domain of all companies operating in Canada.",
      "fields": [
        "name",
        "country",
        "tax_id",
        "domain"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, country, tax_id, domain FROM [BT]tabCompany[BT] WHERE country='Canada' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List all companies with a website set and email available.",
      "fields": [
        "name",
        "website",
        "email"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, website, email FROM [BT]tabCompany[BT] WHERE website IS NOT NULL AND email IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Can you list all the companies that are currently active in our ERP system?",
      "fields": [
        "name",
        "company_name",
        "is_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_name, is_group FROM [BT]tabCompany[BT] WHERE disabled=0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "What’s the full name of our primary registered company named 'HTS Pvt Ltd'?",
      "fields": [
        "name",
        "company_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_name FROM [BT]tabCompany[BT] WHERE name='HTS Pvt Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which country is our company 'NovaTech Solutions' legally registered in?",
      "fields": [
        "name",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, country FROM [BT]tabCompany[BT] WHERE name='NovaTech Solutions' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "What is the default currency set for 'BrightEdge Ltd' for financial transactions?",
      "fields": [
        "name",
        "default_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_currency FROM [BT]tabCompany[BT] WHERE name='BrightEdge Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "When was 'GreenField Enterprises' established and officially incorporated?",
      "fields": [
        "name",
        "date_of_establishment",
        "date_of_incorporation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, date_of_establishment, date_of_incorporation FROM [BT]tabCompany[BT] WHERE name='GreenField Enterprises' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Who is listed as the parent company of 'FusionCorp International'?",
      "fields": [
        "name",
        "parent_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, parent_company FROM [BT]tabCompany[BT] WHERE name='FusionCorp International' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Has a company logo been uploaded for 'SkyNet Digital Ltd' in the system?",
      "fields": [
        "name",
        "company_logo"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_logo FROM [BT]tabCompany[BT] WHERE name='SkyNet Digital Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Can you check if a logo file is attached for the company 'AlphaBridge Tech'?",
      "fields": [
        "name",
        "company_logo"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_logo FROM [BT]tabCompany[BT] WHERE name='AlphaBridge Tech' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "What is the phone number and email address listed for 'Zylor Innovations Pvt Ltd'?",
      "fields": [
        "name",
        "phone_no",
        "email"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, phone_no, email FROM [BT]tabCompany[BT] WHERE name='Zylor Innovations Pvt Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which cost center is defined as the default for 'CoreFlex Global Solutions'?",
      "fields": [
        "name",
        "cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, cost_center FROM [BT]tabCompany[BT] WHERE name='CoreFlex Global Solutions' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Can Galaxy Infotech Ltd create accounts for its child companies?",
      "fields": [
        "name",
        "allow_account_creation_against_child_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, allow_account_creation_against_child_company FROM [BT]tabCompany[BT] WHERE name='Galaxy Infotech Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Is Orion Holdings Pvt Ltd set up to allow child companies to have their own accounts?",
      "fields": [
        "name",
        "allow_account_creation_against_child_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, allow_account_creation_against_child_company FROM [BT]tabCompany[BT] WHERE name='Orion Holdings Pvt Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Can Lambda Systems Pvt Ltd add accounts under its branch companies?",
      "fields": [
        "name",
        "allow_account_creation_against_child_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, allow_account_creation_against_child_company FROM [BT]tabCompany[BT] WHERE name='Lambda Systems Pvt Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "What’s the monthly sales target set for Stellar Industries Ltd?",
      "fields": [
        "name",
        "monthly_sales_target"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, monthly_sales_target FROM [BT]tabCompany[BT] WHERE name='Stellar Industries Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Is the perpetual inventory feature turned on for our company stock records?",
      "fields": [
        "name",
        "is_group",
        "enable_perpetual_inventory"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_group, enable_perpetual_inventory FROM [BT]tabCompany[BT] ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Have we enabled both perpetual inventory and provisional accounting for stock transactions?",
      "fields": [
        "name",
        "is_group",
        "enable_perpetual_inventory",
        "enable_provisional_accounting_for_non_stock_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_group, enable_perpetual_inventory, enable_provisional_accounting_for_non_stock_items FROM [BT]tabCompany[BT] ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Can you check which accounts we use for customer receivables and vendor payables?",
      "fields": [
        "name",
        "is_group",
        "default_receivable_account",
        "default_payable_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_group, default_receivable_account, default_payable_account FROM [BT]tabCompany[BT] ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which account do we use for rounding off entries in our financial reports?",
      "fields": [
        "name",
        "is_group",
        "round_off_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_group, round_off_account FROM [BT]tabCompany[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List all registered companies in the system.",
      "fields": [
        "name",
        "is_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_group FROM [BT]tabCompany[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies are currently active in our system?",
      "fields": [
        "name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, disabled FROM [BT]tabCompany[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Can you list all our company branches?",
      "fields": [
        "name",
        "is_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_group FROM [BT]tabCompany[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies have USD as their base currency?",
      "fields": [
        "name",
        "default_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_currency FROM [BT]tabCompany[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which country is set for each registered company?",
      "fields": [
        "name",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, country FROM [BT]tabCompany[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List companies whose fiscal year starts in April.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabCompany[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Companies with fiscal year starting in January?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabCompany[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "List companies where multi-currency accounting is enabled.",
      "fields": [
        "name",
        "default_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_currency FROM [BT]tabCompany[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which companies have enabled auto accounting for stock?",
      "fields": [
        "name",
        "auto_accounting_for_stock_settings"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, auto_accounting_for_stock_settings FROM [BT]tabCompany[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Do all companies have tax IDs recorded?",
      "fields": [
        "name",
        "tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_id FROM [BT]tabCompany[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Show the default cost center for each company.",
      "fields": [
        "name",
        "cost_center",
        "is_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, cost_center, is_group FROM [BT]tabCompany[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Which fields store company identity and tax settings?",
      "fields": [
        "name",
        "company_name",
        "tax_id",
        "default_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_name, tax_id, default_currency FROM [BT]tabCompany[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "Where do I find the accounts configured under each company?",
      "fields": [
        "name",
        "default_bank_account",
        "default_receivable_account",
        "default_payable_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_bank_account, default_receivable_account, default_payable_account FROM [BT]tabCompany[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "How much did we spend in February?",
      "fields": [
        "posting_date",
        "grand_total",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT posting_date, grand_total, name FROM [BT]tabPurchase Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What's the total value of all bills for April?",
      "fields": [
        "name",
        "posting_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, grand_total FROM [BT]tabPurchase Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show all purchases from DEF supplier.",
      "fields": [
        "name",
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, grand_total FROM [BT]tabPurchase Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "How many purchase invoices were submitted by Eastline Supplies?",
      "fields": [
        "name",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier FROM [BT]tabPurchase Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Any purchase invoices submitted by Global Traders?",
      "fields": [
        "name",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier FROM [BT]tabPurchase Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show all purchases from DEF supplier.",
      "fields": [
        "name",
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, grand_total FROM [BT]tabPurchase Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "How many purchase invoices were submitted by Eastline Supplies?",
      "fields": [
        "name",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier FROM [BT]tabPurchase Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Any purchase invoices submitted by Global Traders?",
      "fields": [
        "name",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier FROM [BT]tabPurchase Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List invoices where discount was applied on Grand Total.",
      "fields": [
        "name",
        "apply_discount_on"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, apply_discount_on FROM [BT]tabPurchase Invoice[BT] WHERE apply_discount_on = 'Grand Total' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show invoices that ignored the default payment terms template.",
      "fields": [
        "name",
        "ignore_default_payment_terms_template"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, ignore_default_payment_terms_template FROM [BT]tabPurchase Invoice[BT] WHERE ignore_default_payment_terms_template = 1 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Find invoices where the supplier is internal.",
      "fields": [
        "name",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_internal_supplier FROM [BT]tabPurchase Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which invoices represent another company?",
      "fields": [
        "name",
        "represents_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, represents_company FROM [BT]tabPurchase Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List invoices where posting time was manually set.",
      "fields": [
        "name",
        "set_posting_time"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, set_posting_time FROM [BT]tabPurchase Invoice[BT] WHERE set_posting_time = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show all invoices with their payment schedule and due dates.",
      "fields": [
        "parent",
        "due_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT parent as name, due_date FROM [BT]tabPayment Schedule[BT] WHERE parenttype = 'Purchase Invoice' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice Item"
      ],
      "question": "Which invoices include items delivered to 'Doha Stockyard'?",
      "fields": [
        "parent",
        "item_code",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT parent, item_code, warehouse FROM [BT]tabPurchase Invoice Item[BT] WHERE warehouse = 'Doha Stockyard' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice Item"
      ],
      "question": "List invoices that contain item code 'ITM-9003'.",
      "fields": [
        "parent",
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT parent, item_code FROM [BT]tabPurchase Invoice Item[BT] WHERE item_code = 'ITM-9003' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Taxes and Charges"
      ],
      "question": "Show invoices where tax charge type is 'On Net Total'.",
      "fields": [
        "parent",
        "charge_type",
        "tax_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT parent, charge_type, tax_amount FROM [BT]tabPurchase Taxes and Charges[BT] WHERE charge_type = 'On Net Total' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What was our quarterly sales revenue trend for the last 2 years?",
      "fields": [
        "name",
        "posting_date",
        "base_net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, base_net_total FROM [BT]tabSales Invoice[BT] WHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 2 YEAR)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which region generated the highest revenue in 2023?",
      "fields": [
        "name",
        "territory",
        "base_net_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, territory, base_net_total, posting_date FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = 2023 ORDER BY base_net_total DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice Item"
      ],
      "question": "How did the average cost of steel fluctuate in the past year?",
      "fields": [
        "parent",
        "item_code",
        "rate",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT parent, item_code, rate, posting_date FROM [BT]tabPurchase Invoice Item[BT] WHERE item_code = 'Steel' AND posting_date >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show invoices using cost center 'Operations Gulf'.",
      "fields": [
        "name",
        "cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, cost_center FROM [BT]tabPurchase Invoice[BT] WHERE cost_center = 'Operations Gulf' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show invoices billed with Bill No INV-789 from Eastern Supplies.",
      "fields": [
        "name",
        "bill_no",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, bill_no, supplier FROM [BT]tabPurchase Invoice[BT] WHERE bill_no = 'INV-789' AND supplier = 'Eastern Supplies' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List invoices with withheld tax vouchers applied.",
      "fields": [
        "name",
        "tax_withheld_vouchers"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_withheld_vouchers FROM [BT]tabPurchase Invoice[BT] WHERE tax_withheld_vouchers IS NOT NULL AND tax_withheld_vouchers != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Find invoices where write-off cost center is set.",
      "fields": [
        "name",
        "write_off_cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, write_off_cost_center FROM [BT]tabPurchase Invoice[BT] WHERE write_off_cost_center IS NOT NULL AND write_off_cost_center != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which invoices have stock update enabled?",
      "fields": [
        "name",
        "update_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_stock FROM [BT]tabPurchase Invoice[BT] WHERE update_stock = 1 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which invoices used exchange rate based on transaction date?",
      "fields": [
        "name",
        "use_transaction_date_exchange_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, use_transaction_date_exchange_rate FROM [BT]tabPurchase Invoice[BT] WHERE use_transaction_date_exchange_rate = 1 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Find invoices where tax withholding category is 'Professional Fees'.",
      "fields": [
        "name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_withholding_category FROM [BT]tabPurchase Invoice[BT] WHERE tax_withholding_category = 'Professional Fees' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List all invoices that used the buying price list 'Wholesale Rates'.",
      "fields": [
        "name",
        "buying_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, buying_price_list FROM [BT]tabPurchase Invoice[BT] WHERE buying_price_list = 'Wholesale Rates' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which invoices are associated with a subscription?",
      "fields": [
        "name",
        "subscription"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, subscription FROM [BT]tabPurchase Invoice[BT] WHERE subscription IS NOT NULL AND subscription != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Find invoices where discount amount exceeded 5000.",
      "fields": [
        "name",
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, discount_amount FROM [BT]tabPurchase Invoice[BT] WHERE discount_amount > 5000 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which supplier charged us the highest shipping costs last year?",
      "fields": [
        "name",
        "supplier",
        "shipping_rule",
        "base_total_taxes_and_charges",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, shipping_rule, base_total_taxes_and_charges, posting_date FROM [BT]tabPurchase Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE()) - 1 ORDER BY base_total_taxes_and_charges DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which invoices used exchange rate based on transaction date?",
      "fields": [
        "name",
        "use_transaction_date_exchange_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, use_transaction_date_exchange_rate FROM [BT]tabPurchase Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show invoices using cost center 'Operations Gulf'.",
      "fields": [
        "name",
        "cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, cost_center FROM [BT]tabPurchase Invoice[BT] WHERE cost_center = 'Operations Gulf' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Find invoices where write-off cost center is set.",
      "fields": [
        "name",
        "write_off_cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, write_off_cost_center FROM [BT]tabPurchase Invoice[BT] WHERE write_off_cost_center IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List invoices with withheld tax vouchers applied.",
      "fields": [
        "name",
        "tax_withheld_vouchers"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_withheld_vouchers FROM [BT]tabPurchase Invoice[BT] WHERE tax_withheld_vouchers IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show invoices billed with Bill No INV-789 from Eastern Supplies.",
      "fields": [
        "name",
        "bill_no",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, bill_no, supplier FROM [BT]tabPurchase Invoice[BT] WHERE bill_no = 'INV-789' AND supplier = 'Eastern Supplies' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which invoices have stock update enabled?",
      "fields": [
        "name",
        "update_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_stock FROM [BT]tabPurchase Invoice[BT] WHERE update_stock = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List all invoices that used the buying price list 'Wholesale Rates'.",
      "fields": [
        "name",
        "buying_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, buying_price_list FROM [BT]tabPurchase Invoice[BT] WHERE buying_price_list = 'Wholesale Rates' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which invoices are associated with a subscription?",
      "fields": [
        "name",
        "subscription"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, subscription FROM [BT]tabPurchase Invoice[BT] WHERE subscription IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Find invoices where discount amount exceeded 5000.",
      "fields": [
        "name",
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, discount_amount FROM [BT]tabPurchase Invoice[BT] WHERE discount_amount > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Compare our operating margin for the last 4 quarters.",
      "fields": [
        "name",
        "net_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, net_total, posting_date FROM [BT]tabSales Invoice[BT] WHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show top 5 products by revenue contribution in the current year based on invoice posting date.",
      "fields": [
        "name",
        "item_code",
        "amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT sii.name, sii.item_code, SUM(sii.amount) as total_amount, si.posting_date FROM [BT]tabSales Invoice Item[BT] sii JOIN [BT]tabSales Invoice[BT] si ON sii.parent = si.name WHERE YEAR(si.posting_date) = YEAR(CURDATE()) GROUP BY sii.item_code ORDER BY total_amount DESC LIMIT 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which supplier charged us the highest shipping costs last year?",
      "fields": [
        "name",
        "supplier",
        "shipping_rule",
        "base_total_taxes_and_charges",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, shipping_rule, base_total_taxes_and_charges, posting_date FROM [BT]tabPurchase Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE()) - 1 ORDER BY base_total_taxes_and_charges DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices were overdue in Q1 2024?",
      "fields": [
        "name",
        "due_date",
        "status",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, due_date, status, posting_date FROM [BT]tabSales Invoice[BT] WHERE status = 'Overdue' AND QUARTER(posting_date) = 1 AND YEAR(posting_date) = 2024''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What was the average discount offered per customer in 2023?",
      "fields": [
        "customer",
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer, AVG(discount_amount) AS avg_discount FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = 2023 GROUP BY customer''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "How much did we spend on imported goods last quarter?",
      "fields": [
        "name",
        "is_internal_supplier",
        "base_net_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, base_net_total, posting_date FROM [BT]tabPurchase Invoice[BT] WHERE is_internal_supplier = 0 AND QUARTER(posting_date) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "How much did we spend on imported goods last quarter?",
      "fields": [
        "name",
        "is_internal_supplier",
        "base_net_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_internal_supplier, base_net_total, posting_date FROM [BT]tabPurchase Invoice[BT] WHERE is_internal_supplier = 0 AND QUARTER(posting_date) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) AND YEAR(posting_date) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER))''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What was the impact of exchange rate variation on our net income in 2024?",
      "fields": [
        "name",
        "conversion_rate",
        "net_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, conversion_rate, net_total, posting_date FROM [BT]tabPurchase Invoice[BT] WHERE YEAR(posting_date) = 2024''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which suppliers gave us the biggest discounts in 2023?",
      "fields": [
        "name",
        "supplier",
        "discount_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, SUM(discount_amount) as total_discount FROM [BT]tabPurchase Invoice[BT] WHERE YEAR(posting_date) = 2023 GROUP BY supplier ORDER BY total_discount DESC LIMIT 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice Item"
      ],
      "question": "Did our average purchase price for office chairs go up or down over 2022?",
      "fields": [
        "item_code",
        "rate",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT pii.item_code, AVG(pii.rate) as avg_rate, pi.posting_date FROM [BT]tabPurchase Invoice Item[BT] pii JOIN [BT]tabPurchase Invoice[BT] pi ON pii.parent = pi.name WHERE pii.item_code = 'Office Chair' AND YEAR(pi.posting_date) = 2022 GROUP BY MONTH(pi.posting_date) ORDER BY MONTH(pi.posting_date)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customer made the highest number of repeat purchases?",
      "fields": [
        "customer",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer, COUNT(name) as repeat_orders FROM [BT]tabSales Invoice[BT] GROUP BY customer ORDER BY repeat_orders DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which invoices used warehouse 'Central Warehouse'?",
      "fields": [
        "name",
        "set_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, set_warehouse FROM [BT]tabPurchase Invoice[BT] WHERE set_warehouse = 'Central Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List invoices created from naming series PINV-2025-.",
      "fields": [
        "name",
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, naming_series FROM [BT]tabPurchase Invoice[BT] WHERE naming_series LIKE 'PINV-2025-%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show invoices with auto repeat enabled.",
      "fields": [
        "name",
        "auto_repeat"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, auto_repeat FROM [BT]tabPurchase Invoice[BT] WHERE auto_repeat IS NOT NULL ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which invoices were marked as opening balances?",
      "fields": [
        "name",
        "is_opening"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_opening FROM [BT]tabPurchase Invoice[BT] WHERE is_opening = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List invoices with foreign exchange loss accounts assigned.",
      "fields": [
        "name",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, unrealized_profit_loss_account FROM [BT]tabPurchase Invoice[BT] WHERE unrealized_profit_loss_account IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which salespersons exceeded their target in H1 2024?",
      "fields": [
        "name",
        "sales_person",
        "net_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT st.sales_person, SUM(si.net_total) as total_sales FROM [BT]tabSales Invoice Team[BT] st JOIN [BT]tabSales Invoice[BT] si ON st.parent = si.name WHERE si.posting_date BETWEEN '2024-01-01' AND '2024-06-30' GROUP BY st.sales_person HAVING SUM(si.net_total) > st.allocated_target''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which item had the highest return rate in the last 6 months?",
      "fields": [
        "name",
        "item_code",
        "returned_qty",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT sii.item_code, SUM(sii.returned_qty) as total_returned FROM [BT]tabSales Invoice Item[BT] sii JOIN [BT]tabSales Invoice[BT] si ON sii.parent = si.name WHERE si.posting_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY sii.item_code ORDER BY total_returned DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What was our best-selling category in Q2?",
      "fields": [
        "item_group",
        "qty",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT sii.item_group, SUM(sii.qty) as total_qty FROM [BT]tabSales Invoice Item[BT] sii JOIN [BT]tabSales Invoice[BT] si ON sii.parent = si.name WHERE QUARTER(si.posting_date) = 2 GROUP BY sii.item_group ORDER BY total_qty DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How much profit did we make on mango sales last year?",
      "fields": [
        "item_code",
        "net_profit",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT sii.item_code, SUM(si.net_total - si.total_cost) as net_profit FROM [BT]tabSales Invoice Item[BT] sii JOIN [BT]tabSales Invoice[BT] si ON sii.parent = si.name WHERE sii.item_code = 'Mango' AND YEAR(si.posting_date) = YEAR(CURDATE()) - 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Compare our operating margin for the last 4 quarters.",
      "fields": [
        "posting_date",
        "net_total",
        "operating_cost"
      ]
    },
    "output": "frappe.db.sql('''SELECT QUARTER(posting_date) as quarter, SUM(net_total - operating_cost) as operating_margin FROM [BT]tabSales Invoice[BT] WHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH) GROUP BY quarter ORDER BY quarter''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "How much GST did we pay to each supplier last financial year?",
      "fields": [
        "supplier",
        "taxes",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, SUM(taxes) as total_gst FROM [BT]tabPurchase Invoice[BT] WHERE posting_date BETWEEN CONCAT(YEAR(CURDATE())-1, '-04-01') AND CONCAT(YEAR(CURDATE()), '-03-31') GROUP BY supplier''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List invoices with foreign exchange loss accounts assigned.",
      "fields": [
        "name",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, unrealized_profit_loss_account FROM [BT]tabPurchase Invoice[BT] WHERE unrealized_profit_loss_account IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customer made the highest number of repeat purchases?",
      "fields": [
        "customer",
        "repeat_orders"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer, COUNT(name) AS repeat_orders FROM [BT]tabSales Invoice[BT] GROUP BY customer HAVING COUNT(name) > 1 ORDER BY repeat_orders DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which invoices used warehouse 'Central Warehouse'?",
      "fields": [
        "name",
        "set_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, set_warehouse FROM [BT]tabPurchase Invoice[BT] WHERE set_warehouse = 'Central Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List invoices created from naming series PINV-2025-.",
      "fields": [
        "name",
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, naming_series FROM [BT]tabPurchase Invoice[BT] WHERE naming_series LIKE 'PINV-2025-%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show invoices with auto repeat enabled.",
      "fields": [
        "name",
        "auto_repeat"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, auto_repeat FROM [BT]tabPurchase Invoice[BT] WHERE auto_repeat IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which invoices were marked as opening balances?",
      "fields": [
        "name",
        "is_opening"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_opening FROM [BT]tabPurchase Invoice[BT] WHERE is_opening = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List invoices with foreign exchange loss accounts assigned.",
      "fields": [
        "name",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, unrealized_profit_loss_account FROM [BT]tabPurchase Invoice[BT] WHERE unrealized_profit_loss_account IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show invoices that applied a payment terms template.",
      "fields": [
        "name",
        "payment_terms_template"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_terms_template FROM [BT]tabPurchase Invoice[BT] WHERE payment_terms_template IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which invoices were delivered to 'Doha Warehouse Address'?",
      "fields": [
        "name",
        "shipping_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, shipping_address FROM [BT]tabPurchase Invoice[BT] WHERE shipping_address = 'Doha Warehouse Address' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Find invoices with PLC conversion rate above 1.25.",
      "fields": [
        "name",
        "plc_conversion_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, plc_conversion_rate FROM [BT]tabPurchase Invoice[BT] WHERE plc_conversion_rate > 1.25''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which invoices have terms and conditions applied?",
      "fields": [
        "name",
        "tc_name",
        "terms"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tc_name, terms FROM [BT]tabPurchase Invoice[BT] WHERE tc_name IS NOT NULL OR terms IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show invoices billed to contact person 'Mohammed Ali'.",
      "fields": [
        "name",
        "contact_person"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, contact_person FROM [BT]tabPurchase Invoice[BT] WHERE contact_person = 'Mohammed Ali' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which invoices were created by Global Traders and are still unpaid?",
      "fields": [
        "name",
        "supplier",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, outstanding_amount FROM [BT]tabPurchase Invoice[BT] WHERE supplier = 'Global Traders' AND outstanding_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "How much total quantity did we receive in January 2025?",
      "fields": [
        "name",
        "total_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_qty FROM [BT]tabPurchase Invoice[BT] WHERE posting_date BETWEEN '2025-01-01' AND '2025-01-31' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show me invoices that have a rounding adjustment.",
      "fields": [
        "name",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, rounding_adjustment FROM [BT]tabPurchase Invoice[BT] WHERE rounding_adjustment != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List purchase invoices that were marked as returns.",
      "fields": [
        "name",
        "is_return",
        "return_against"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, return_against FROM [BT]tabPurchase Invoice[BT] WHERE is_return = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Find all invoices with total tax deducted over 10,000.",
      "fields": [
        "name",
        "total_taxes_and_charges"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_taxes_and_charges FROM [BT]tabPurchase Invoice[BT] WHERE total_taxes_and_charges > 10000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which invoices are tagged to the project 'Skyline Phase 2'?",
      "fields": [
        "name",
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, project FROM [BT]tabPurchase Invoice[BT] WHERE project = 'Skyline Phase 2' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "How many invoices used the pricing rule mechanism?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE pricing_rule IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Give me invoices from last year where currency is EUR.",
      "fields": [
        "name",
        "currency",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, currency, posting_date FROM [BT]tabPurchase Invoice[BT] WHERE currency = 'EUR' AND YEAR(posting_date) = YEAR(CURDATE()) - 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List all invoices where write-off amount was applied.",
      "fields": [
        "name",
        "write_off_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, write_off_amount FROM [BT]tabPurchase Invoice[BT] WHERE write_off_amount IS NOT NULL AND write_off_amount != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What are the top 3 suppliers by total grand total billed this year?",
      "fields": [
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, SUM(grand_total) AS total FROM [BT]tabPurchase Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE()) GROUP BY supplier ORDER BY total DESC LIMIT 3''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List all unpaid purchase invoices.",
      "fields": [
        "name",
        "supplier",
        "due_date",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, due_date, outstanding_amount FROM [BT]tabPurchase Invoice[BT] WHERE outstanding_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which invoices are tagged to the project 'Skyline Phase 2'?",
      "fields": [
        "name",
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, project FROM [BT]tabPurchase Invoice[BT] WHERE project = 'Skyline Phase 2' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "How many invoices used the pricing rule mechanism?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS total_invoices FROM [BT]tabPurchase Invoice[BT] WHERE pricing_rule_applied = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Give me invoices from last year where currency is EUR.",
      "fields": [
        "name",
        "currency",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, currency, posting_date FROM [BT]tabPurchase Invoice[BT] WHERE currency = 'EUR' AND YEAR(posting_date) = YEAR(CURDATE()) - 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List all invoices where write-off amount was applied.",
      "fields": [
        "name",
        "write_off_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, write_off_amount FROM [BT]tabPurchase Invoice[BT] WHERE write_off_amount != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What are the top 3 suppliers by total grand total billed this year?",
      "fields": [
        "supplier",
        "total_grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, SUM(grand_total) AS total_grand_total FROM [BT]tabPurchase Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE()) GROUP BY supplier ORDER BY total_grand_total DESC LIMIT 3''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What is the grand total for invoice PINV-00421?",
      "fields": [
        "name",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total FROM [BT]tabPurchase Invoice[BT] WHERE name = 'PINV-00421' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "How many purchase invoices did we create last month?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS total_invoices FROM [BT]tabPurchase Invoice[BT] WHERE MONTH(posting_date) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List all purchase invoices where total amount is above 1,00,000.",
      "fields": [
        "name",
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, grand_total FROM [BT]tabPurchase Invoice[BT] WHERE grand_total > 100000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show invoices that were paid using cash.",
      "fields": [
        "name",
        "mode_of_payment",
        "paid_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, mode_of_payment, paid_amount FROM [BT]tabPurchase Invoice[BT] WHERE mode_of_payment = 'Cash' AND paid_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which invoices applied a discount greater than 10%?",
      "fields": [
        "name",
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, additional_discount_percentage FROM [BT]tabPurchase Invoice[BT] WHERE additional_discount_percentage > 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List all invoices for project Alpha Build with outstanding amounts.",
      "fields": [
        "name",
        "project",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, project, outstanding_amount FROM [BT]tabPurchase Invoice[BT] WHERE project = 'Alpha Build' AND outstanding_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show me purchase invoices where TDS was applied.",
      "fields": [
        "name",
        "apply_tds",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, apply_tds, tax_withholding_category FROM [BT]tabPurchase Invoice[BT] WHERE apply_tds = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show all purchases from DEF supplier.",
      "fields": [
        "supplier",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, name FROM [BT]tabPurchase Invoice[BT] WHERE supplier = 'DEF' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "How many purchase invoices were submitted by Eastline Supplies?",
      "fields": [
        "name",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier FROM [BT]tabPurchase Invoice[BT] WHERE supplier = 'Eastline Supplies' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Any purchase invoices submitted by Global Traders?",
      "fields": [
        "name",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier FROM [BT]tabPurchase Invoice[BT] WHERE supplier = 'Global Traders' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show purchase invoices from Eastline Supplies created this month.",
      "fields": [
        "supplier",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, posting_date, name FROM [BT]tabPurchase Invoice[BT] WHERE supplier = 'Eastline Supplies' AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show purchase invoices worth $12,000 posted this month.",
      "fields": [
        "grand_total",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT grand_total, posting_date, name FROM [BT]tabPurchase Invoice[BT] WHERE grand_total = 12000 AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Confirm if Redwood Industries sent a purchase invoice worth $12,000.",
      "fields": [
        "name",
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, grand_total FROM [BT]tabPurchase Invoice[BT] WHERE supplier = 'Redwood Industries' AND grand_total = 12000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "Count how many valuation rates exceeded 1000 this year for 'ITEM-777'.",
      "fields": [
        "name",
        "valuation_rate",
        "item_code",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) AS count, name, valuation_rate, item_code, posting_date FROM [BT]tabStock Ledger Entry[BT] WHERE item_code = 'ITEM-777' AND valuation_rate > 1000 AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List all purchase orders from 'ABC Traders'.",
      "fields": [
        "name",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier FROM [BT]tabPurchase Order[BT] WHERE supplier = 'ABC Traders' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Show me orders placed in April 2025.",
      "fields": [
        "name",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, transaction_date FROM [BT]tabPurchase Order[BT] WHERE transaction_date BETWEEN '2025-04-01' AND '2025-04-30' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Get the grand total of order 'PO-00045'.",
      "fields": [
        "name",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total FROM [BT]tabPurchase Order[BT] WHERE name = 'PO-00045' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Was any order created with negative advance paid?",
      "fields": [
        "name",
        "advance_paid"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, advance_paid FROM [BT]tabPurchase Order[BT] WHERE advance_paid < 0 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "How many orders were placed by 'john@example.com'?",
      "fields": [
        "name",
        "owner"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, owner FROM [BT]tabPurchase Order[BT] WHERE owner = 'john@example.com' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Show all cancelled purchase orders.",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status FROM [BT]tabPurchase Order[BT] WHERE status = 'Cancelled' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Are there any draft orders with grand total over 1 million?",
      "fields": [
        "name",
        "docstatus",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, docstatus, grand_total FROM [BT]tabPurchase Order[BT] WHERE docstatus = 0 AND grand_total > 1000000 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Count purchase orders with currency 'EUR'.",
      "fields": [
        "name",
        "currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) AS count, name, currency FROM [BT]tabPurchase Order[BT] WHERE currency = 'EUR' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List all purchase orders from 'ABC Traders'.",
      "fields": [
        "name",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier FROM [BT]tabPurchase Order[BT] WHERE supplier = 'ABC Traders' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Show me orders placed in April 2025.",
      "fields": [
        "name",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, transaction_date FROM [BT]tabPurchase Order[BT] WHERE transaction_date BETWEEN '2025-04-01' AND '2025-04-30' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Get the grand total of order 'PO-00045'.",
      "fields": [
        "name",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total FROM [BT]tabPurchase Order[BT] WHERE name = 'PO-00045' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Was any order created with negative advance paid?",
      "fields": [
        "name",
        "advance_paid"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, advance_paid FROM [BT]tabPurchase Order[BT] WHERE advance_paid < 0 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "How many orders were placed by 'john@example.com'?",
      "fields": [
        "name",
        "owner"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) AS count, name, owner FROM [BT]tabPurchase Order[BT] WHERE owner = 'john@example.com' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Show all cancelled purchase orders.",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status FROM [BT]tabPurchase Order[BT] WHERE status = 'Cancelled' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Are there any draft orders with grand total over 1 million?",
      "fields": [
        "name",
        "docstatus",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, docstatus, grand_total FROM [BT]tabPurchase Order[BT] WHERE docstatus = 0 AND grand_total > 1000000 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Count purchase orders with currency 'EUR'.",
      "fields": [
        "name",
        "currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) AS count, name, currency FROM [BT]tabPurchase Order[BT] WHERE currency = 'EUR' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Find all orders created today.",
      "fields": [
        "name",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, transaction_date FROM [BT]tabPurchase Order[BT] WHERE transaction_date = CURDATE() ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List orders scheduled after January 1, 2026.",
      "fields": [
        "name",
        "schedule_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, schedule_date FROM [BT]tabPurchase Order[BT] WHERE schedule_date > '2026-01-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Get supplier name for PO-1002.",
      "fields": [
        "name",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier FROM [BT]tabPurchase Order[BT] WHERE name = 'PO-1002' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Were any orders billed more than 100%?",
      "fields": [
        "name",
        "per_billed"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, per_billed FROM [BT]tabPurchase Order[BT] WHERE per_billed > 100 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Count all submitted purchase orders.",
      "fields": [
        "name",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) AS count, name, docstatus FROM [BT]tabPurchase Order[BT] WHERE docstatus = 1 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List all orders using buying price list 'Premium'.",
      "fields": [
        "name",
        "buying_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, buying_price_list FROM [BT]tabPurchase Order[BT] WHERE buying_price_list = 'Premium' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Check if any PO was submitted with 0 grand total.",
      "fields": [
        "name",
        "docstatus",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, docstatus, grand_total FROM [BT]tabPurchase Order[BT] WHERE grand_total = 0 AND docstatus = 1 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Find orders with tax charges above 5000.",
      "fields": [
        "name",
        "total_taxes_and_charges"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_taxes_and_charges FROM [BT]tabPurchase Order[BT] WHERE total_taxes_and_charges > 5000 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Are there any orders from supplier 'XYZ Ltd' with schedule date in 2023?",
      "fields": [
        "name",
        "supplier",
        "schedule_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, schedule_date FROM [BT]tabPurchase Order[BT] WHERE supplier='XYZ Ltd' AND YEAR(schedule_date)=2023''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Which orders had zero advance paid and no tax charges?",
      "fields": [
        "name",
        "advance_paid",
        "total_taxes_and_charges"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, advance_paid, total_taxes_and_charges FROM [BT]tabPurchase Order[BT] WHERE advance_paid=0 AND total_taxes_and_charges=0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Did we create any order for company 'HTS Gulf' in 2025?",
      "fields": [
        "name",
        "company",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company, transaction_date FROM [BT]tabPurchase Order[BT] WHERE company='HTS Gulf' AND YEAR(transaction_date)=2025''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Get orders billed exactly 0%.",
      "fields": [
        "name",
        "per_billed"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, per_billed FROM [BT]tabPurchase Order[BT] WHERE per_billed=0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "Which item and warehouse combinations had more than one entry on the same date?",
      "fields": [
        "name",
        "item_code",
        "warehouse",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code, warehouse, posting_date, COUNT(*) as entry_count FROM [BT]tabStock Ledger Entry[BT] GROUP BY item_code, warehouse, posting_date HAVING COUNT(*) > 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "Give me all voucher numbers for transactions made today with adjustment entries.",
      "fields": [
        "name",
        "voucher_no",
        "is_adjustment_entry",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, voucher_no, is_adjustment_entry, posting_date FROM [BT]tabStock Ledger Entry[BT] WHERE is_adjustment_entry=1 AND posting_date=CURDATE()''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "Which items had negative actual quantity movement this week in 'Raw Material WH'?",
      "fields": [
        "name",
        "item_code",
        "actual_qty",
        "posting_date",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, actual_qty, posting_date, warehouse FROM [BT]tabStock Ledger Entry[BT] WHERE actual_qty < 0 AND warehouse='Raw Material WH' AND WEEK(posting_date)=WEEK(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "Was any transaction created by user 'john.doe@hts.com' in the last 7 days?",
      "fields": [
        "name",
        "owner",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, owner, creation FROM [BT]tabStock Ledger Entry[BT] WHERE owner='john.doe@hts.com' AND creation BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE()''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "How many distinct warehouses handled 'ITEM-X' in Q1 2025?",
      "fields": [
        "name",
        "item_code",
        "warehouse",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(DISTINCT warehouse) as warehouse_count FROM [BT]tabStock Ledger Entry[BT] WHERE item_code='ITEM-X' AND posting_date BETWEEN '2025-01-01' AND '2025-03-31' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "List items where outgoing rate was zero but incoming rate was positive.",
      "fields": [
        "name",
        "incoming_rate",
        "outgoing_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, incoming_rate, outgoing_rate FROM [BT]tabStock Ledger Entry[BT] WHERE outgoing_rate=0 AND incoming_rate>0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "Which batches had movement recorded this week with valuation rate above 200?",
      "fields": [
        "name",
        "batch_no",
        "posting_date",
        "valuation_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, batch_no, posting_date, valuation_rate FROM [BT]tabStock Ledger Entry[BT] WHERE WEEK(posting_date)=WEEK(CURDATE()) AND valuation_rate > 200''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "Give me the total stock value difference this year for company 'Gulf Traders'.",
      "fields": [
        "name",
        "stock_value_difference",
        "company",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(stock_value_difference) as total_stock_value_difference FROM [BT]tabStock Ledger Entry[BT] WHERE company='Gulf Traders' AND YEAR(posting_date)=YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "How many entries were posted by 'manager@demo.com' in the past 7 days?",
      "fields": [
        "name",
        "owner",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as total_entries FROM [BT]tabStock Ledger Entry[BT] WHERE owner='manager@demo.com' AND posting_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE()''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "Which stock entries had serial numbers present but batch number missing and were created in 2025?",
      "fields": [
        "name",
        "serial_no",
        "batch_no",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, serial_no, batch_no, creation FROM [BT]tabStock Ledger Entry[BT] WHERE serial_no IS NOT NULL AND (batch_no IS NULL OR batch_no='') AND YEAR(creation)=2025''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "List all entries where qty after transaction is negative and valuation rate is zero.",
      "fields": [
        "name",
        "qty_after_transaction",
        "valuation_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, qty_after_transaction, valuation_rate FROM [BT]tabStock Ledger Entry[BT] WHERE qty_after_transaction < 0 AND valuation_rate = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "List all serial numbers used in stock entries posted yesterday.",
      "fields": [
        "name",
        "serial_no",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, serial_no, posting_date FROM [BT]tabStock Ledger Entry[BT] WHERE DATE(posting_date) = DATE_SUB(CURDATE(), INTERVAL 1 DAY)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "Which warehouses received items with valuation rate higher than outgoing rate last month?",
      "fields": [
        "name",
        "warehouse",
        "valuation_rate",
        "outgoing_rate",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse, valuation_rate, outgoing_rate, posting_date FROM [BT]tabStock Ledger Entry[BT] WHERE valuation_rate > outgoing_rate AND MONTH(posting_date) = MONTH(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) AND YEAR(posting_date) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 MONTH))''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "What items were posted by 'stock.manager@example.com' with stock value difference over 5000?",
      "fields": [
        "name",
        "owner",
        "stock_value_difference"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, owner, stock_value_difference FROM [BT]tabStock Ledger Entry[BT] WHERE owner='stock.manager@example.com' AND stock_value_difference > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "Show entries where recalculation was done and the project field is not empty.",
      "fields": [
        "name",
        "recalculate_rate",
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, recalculate_rate, project FROM [BT]tabStock Ledger Entry[BT] WHERE recalculate_rate=1 AND project IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "Give all entries for batch 'BATCH-ALPHA-01' where actual qty is not zero.",
      "fields": [
        "name",
        "batch_no",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, batch_no, actual_qty FROM [BT]tabStock Ledger Entry[BT] WHERE batch_no='BATCH-ALPHA-01' AND actual_qty != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "Were there any items where valuation rate dropped after incoming?",
      "fields": [
        "name",
        "item_code",
        "valuation_rate",
        "incoming_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, valuation_rate, incoming_rate FROM [BT]tabStock Ledger Entry[BT] WHERE incoming_rate > valuation_rate''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "Get entries with batch number starting with 'BATCH2025' in January 2025.",
      "fields": [
        "name",
        "batch_no",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, batch_no, posting_date FROM [BT]tabStock Ledger Entry[BT] WHERE batch_no LIKE 'BATCH2025%' AND MONTH(posting_date)=1 AND YEAR(posting_date)=2025''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "List all entries with adjustment entry marked true and incoming rate above 100.",
      "fields": [
        "name",
        "is_adjustment_entry",
        "incoming_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_adjustment_entry, incoming_rate FROM [BT]tabStock Ledger Entry[BT] WHERE is_adjustment_entry=1 AND incoming_rate > 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "Get all entries for item 'ITEM-00023' in fiscal year 2024-2025.",
      "fields": [
        "name",
        "item_code",
        "fiscal_year"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, fiscal_year FROM [BT]tabStock Ledger Entry[BT] WHERE item_code='ITEM-00023' AND fiscal_year='2024-2025''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "How many stock ledger entries were posted on weekends?",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as total_weekend_entries FROM [BT]tabStock Ledger Entry[BT] WHERE DAYOFWEEK(posting_date) IN (1,7)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "Which warehouses received items with valuation rate higher than outgoing rate last month?",
      "fields": [
        "name",
        "warehouse",
        "valuation_rate",
        "outgoing_rate",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse, valuation_rate, outgoing_rate, posting_date FROM [BT]tabStock Ledger Entry[BT] WHERE valuation_rate > outgoing_rate AND MONTH(posting_date) = MONTH(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) AND YEAR(posting_date) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 MONTH))''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "What items were posted by 'stock.manager@example.com' with stock value difference over 5000?",
      "fields": [
        "name",
        "owner",
        "stock_value_difference"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, owner, stock_value_difference FROM [BT]tabStock Ledger Entry[BT] WHERE owner='stock.manager@example.com' AND stock_value_difference > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "Show entries where recalculation was done and the project field is not empty.",
      "fields": [
        "name",
        "recalculate_rate",
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, recalculate_rate, project FROM [BT]tabStock Ledger Entry[BT] WHERE recalculate_rate=1 AND project IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "List all serial numbers used in stock entries posted yesterday.",
      "fields": [
        "name",
        "serial_no",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, serial_no, posting_date FROM [BT]tabStock Ledger Entry[BT] WHERE DATE(posting_date) = DATE_SUB(CURDATE(), INTERVAL 1 DAY)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "Give all entries for batch 'BATCH-ALPHA-01' where actual qty is not zero.",
      "fields": [
        "name",
        "batch_no",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, batch_no, actual_qty FROM [BT]tabStock Ledger Entry[BT] WHERE batch_no='BATCH-ALPHA-01' AND actual_qty != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "Were there any items where valuation rate dropped after incoming?",
      "fields": [
        "name",
        "item_code",
        "valuation_rate",
        "incoming_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, valuation_rate, incoming_rate FROM [BT]tabStock Ledger Entry[BT] WHERE incoming_rate > valuation_rate''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List all approved purchase orders from last month.",
      "fields": [
        "name",
        "status",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, transaction_date FROM [BT]tabPurchase Order[BT] WHERE status='Approved' AND MONTH(transaction_date)=MONTH(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) AND YEAR(transaction_date)=YEAR(DATE_SUB(CURDATE(), INTERVAL 1 MONTH))''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Track all items sent through delivery notes.",
      "fields": [
        "name",
        "posting_date",
        "items"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, items FROM [BT]tabDelivery Note[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quotation"
      ],
      "question": "Can you help me create a sales quotation for John Traders today?",
      "fields": [
        "name",
        "quotation_to",
        "party_name",
        "customer_name",
        "transaction_date",
        "valid_till",
        "order_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, quotation_to, party_name, customer_name, transaction_date, valid_till, order_type FROM [BT]tabQuotation[BT] WHERE party_name='John Traders' AND DATE(transaction_date)=CURDATE()''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "I received a price quote from ABC Traders — how do I enter it?",
      "fields": [
        "name",
        "supplier",
        "transaction_date",
        "items",
        "valid_till",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, transaction_date, items, valid_till, company FROM [BT]tabSupplier Quotation[BT] WHERE supplier='ABC Traders' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Attendance"
      ],
      "question": "I'd like to see everyone's attendance for March 2025.",
      "fields": [
        "name",
        "attendance_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, attendance_date FROM [BT]tabAttendance[BT] WHERE MONTH(attendance_date)=3 AND YEAR(attendance_date)=2025''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show me all unpaid bills from our suppliers.",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status FROM [BT]tabPurchase Invoice[BT] WHERE status != 'Paid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Which customer payments are still overdue as of today?",
      "fields": [
        "name",
        "party_type",
        "due_date",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, party_type, due_date, status FROM [BT]tabPayment Entry[BT] WHERE party_type='Customer' AND due_date < CURDATE() AND status != 'Paid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List all purchase orders we approved last month.",
      "fields": [
        "name",
        "status",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, transaction_date FROM [BT]tabPurchase Order[BT] WHERE status='Approved' AND MONTH(transaction_date)=MONTH(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) AND YEAR(transaction_date)=YEAR(DATE_SUB(CURDATE(), INTERVAL 1 MONTH))''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "I want to track items we shipped out recently through delivery notes.",
      "fields": [
        "name",
        "posting_date",
        "items"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, items FROM [BT]tabDelivery Note[BT] WHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items have the highest valuation rate this year?",
      "fields": [
        "name",
        "item_code",
        "item_name",
        "valuation_rate",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, item_name, valuation_rate, creation FROM [BT]tabItem[BT] WHERE YEAR(creation)=YEAR(CURDATE()) ORDER BY valuation_rate DESC LIMIT 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Find bins with indented quantity or planned quantity more than ordered quantity.",
      "fields": [
        "name",
        "indented_qty",
        "planned_qty",
        "ordered_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, indented_qty, planned_qty, ordered_qty FROM [BT]tabBin[BT] WHERE indented_qty > ordered_qty OR planned_qty > ordered_qty''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "How many items have a valuation rate over 100 but actual quantity under 10?",
      "fields": [
        "name",
        "valuation_rate",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, valuation_rate, actual_qty FROM [BT]tabBin[BT] WHERE valuation_rate > 100 AND actual_qty < 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Are there any bins modified today where the stock value changed and reserved quantity is not zero?",
      "fields": [
        "name",
        "modified",
        "stock_value",
        "reserved_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, modified, stock_value, reserved_qty FROM [BT]tabBin[BT] WHERE DATE(modified) = CURDATE() AND reserved_qty != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Give me bins with negative projected quantity in any warehouse with 'Subcontract' in its name.",
      "fields": [
        "name",
        "projected_qty",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, projected_qty, warehouse FROM [BT]tabBin[BT] WHERE projected_qty < 0 AND warehouse LIKE '%Subcontract%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Show me all item codes and their stock UOMs in the 'Spare Parts' warehouse.",
      "fields": [
        "name",
        "item_code",
        "stock_uom",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, stock_uom, warehouse FROM [BT]tabBin[BT] WHERE warehouse = 'Spare Parts' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which bins are owned by 'admin@example.com' and have not been modified in the last 30 days?",
      "fields": [
        "name",
        "owner",
        "modified"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, owner, modified FROM [BT]tabBin[BT] WHERE owner = 'admin@example.com' AND modified < DATE_SUB(CURDATE(), INTERVAL 30 DAY)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which items in the 'Central Warehouse' have both indented and ordered quantities greater than 50?",
      "fields": [
        "name",
        "item_code",
        "indented_qty",
        "ordered_qty",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, indented_qty, ordered_qty, warehouse FROM [BT]tabBin[BT] WHERE warehouse = 'Central Warehouse' AND indented_qty > 50 AND ordered_qty > 50''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "List all items where reserved quantity for subcontracting exceeds actual quantity by at least 10 units.",
      "fields": [
        "name",
        "item_code",
        "actual_qty",
        "reserved_qty_for_sub_contract"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, actual_qty, reserved_qty_for_sub_contract FROM [BT]tabBin[BT] WHERE reserved_qty_for_sub_contract - actual_qty >= 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which bins have zero projected quantity but have some planned quantity?",
      "fields": [
        "name",
        "item_code",
        "projected_qty",
        "planned_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, projected_qty, planned_qty FROM [BT]tabBin[BT] WHERE projected_qty = 0 AND planned_qty > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Show items that have no reserved quantities at all across any category.",
      "fields": [
        "name",
        "item_code",
        "reserved_qty",
        "reserved_qty_for_production",
        "reserved_qty_for_sub_contract",
        "reserved_qty_for_production_plan"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, reserved_qty, reserved_qty_for_production, reserved_qty_for_sub_contract, reserved_qty_for_production_plan FROM [BT]tabBin[BT] WHERE reserved_qty = 0 AND reserved_qty_for_production = 0 AND reserved_qty_for_sub_contract = 0 AND reserved_qty_for_production_plan = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Find the items that have negative stock value or valuation rate.",
      "fields": [
        "name",
        "item_code",
        "valuation_rate",
        "stock_value"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, valuation_rate, stock_value FROM [BT]tabBin[BT] WHERE valuation_rate < 0 OR stock_value < 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which bins were last modified by 'admin@example.com' and belong to 'Spare Parts' warehouse?",
      "fields": [
        "name",
        "item_code",
        "modified_by",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, modified_by, warehouse FROM [BT]tabBin[BT] WHERE modified_by = 'admin@example.com' AND warehouse = 'Spare Parts' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "List all bins with actual quantity > 0 but zero reserved stock and reserved_qty_for_production.",
      "fields": [
        "name",
        "item_code",
        "actual_qty",
        "reserved_stock",
        "reserved_qty_for_production"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, actual_qty, reserved_stock, reserved_qty_for_production FROM [BT]tabBin[BT] WHERE actual_qty > 0 AND reserved_stock = 0 AND reserved_qty_for_production = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which items in 'Cold Storage' have projected quantity lower than any reserved quantity?",
      "fields": [
        "name",
        "item_code",
        "projected_qty",
        "reserved_qty",
        "reserved_qty_for_sub_contract",
        "reserved_qty_for_production"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, projected_qty, reserved_qty, reserved_qty_for_sub_contract, reserved_qty_for_production FROM [BT]tabBin[BT] WHERE warehouse = 'Cold Storage' AND projected_qty < GREATEST(reserved_qty, reserved_qty_for_sub_contract, reserved_qty_for_production)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Get a list of items that have both valuation rate and stock value missing (null).",
      "fields": [
        "name",
        "item_code",
        "valuation_rate",
        "stock_value"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, valuation_rate, stock_value FROM [BT]tabBin[BT] WHERE valuation_rate IS NULL AND stock_value IS NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which items have projected quantity between 20 and 40 but actual quantity less than 10?",
      "fields": [
        "name",
        "item_code",
        "projected_qty",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, projected_qty, actual_qty FROM [BT]tabBin[BT] WHERE projected_qty BETWEEN 20 AND 40 AND actual_qty < 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "List all bins where the actual quantity is below the indented quantity.",
      "fields": [
        "name",
        "actual_qty",
        "indented_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, actual_qty, indented_qty FROM [BT]tabBin[BT] WHERE actual_qty < indented_qty''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Show me items stored in 'Main Warehouse' that have zero projected stock.",
      "fields": [
        "name",
        "warehouse",
        "projected_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse, projected_qty FROM [BT]tabBin[BT] WHERE warehouse = 'Main Warehouse' AND projected_qty = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which items have a reserved quantity for production but no actual quantity yet?",
      "fields": [
        "name",
        "reserved_qty_for_production",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, reserved_qty_for_production, actual_qty FROM [BT]tabBin[BT] WHERE reserved_qty_for_production > 0 AND actual_qty = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Give me a list of items where reserved stock is more than 20 and valuation rate is above 100.",
      "fields": [
        "name",
        "reserved_stock",
        "valuation_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, reserved_stock, valuation_rate FROM [BT]tabBin[BT] WHERE reserved_stock > 20 AND valuation_rate > 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Show bins where reserved_qty_for_production_plan exceeds reserved_qty_for_production by 10 or more.",
      "fields": [
        "name",
        "reserved_qty_for_production_plan",
        "reserved_qty_for_production"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, reserved_qty_for_production_plan, reserved_qty_for_production FROM [BT]tabBin[BT] WHERE reserved_qty_for_production_plan - reserved_qty_for_production >= 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which items have the same valuation rate but belong to different warehouses?",
      "fields": [
        "name",
        "item_code",
        "valuation_rate",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT b1.name, b1.item_code, b1.valuation_rate, b1.warehouse FROM [BT]tabBin[BT] b1 JOIN [BT]tabBin[BT] b2 ON b1.item_code = b2.item_code AND b1.warehouse != b2.warehouse AND b1.valuation_rate = b2.valuation_rate''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Find all items that are completely unplanned and unordered across all warehouses.",
      "fields": [
        "name",
        "planned_qty",
        "ordered_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, planned_qty, ordered_qty FROM [BT]tabBin[BT] WHERE planned_qty = 0 AND ordered_qty = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "List bins that were modified today and have stock value greater than 2000.",
      "fields": [
        "name",
        "modified",
        "stock_value"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, modified, stock_value FROM [BT]tabBin[BT] WHERE DATE(modified) = CURDATE() AND stock_value > 2000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Show items with negative projected quantity in any warehouse that ends with 'Store'.",
      "fields": [
        "name",
        "projected_qty",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, projected_qty, warehouse FROM [BT]tabBin[BT] WHERE projected_qty < 0 AND warehouse LIKE '%Store' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which items have a stock unit of measure as 'Nos' and more than 100 in actual quantity?",
      "fields": [
        "name",
        "stock_uom",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, stock_uom, actual_qty FROM [BT]tabBin[BT] WHERE stock_uom = 'Nos' AND actual_qty > 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "List all bins with projected quantity below zero in the last 14 days.",
      "fields": [
        "name",
        "projected_qty",
        "modified"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, projected_qty, modified FROM [BT]tabBin[BT] WHERE projected_qty < 0 AND modified >= DATE_SUB(CURDATE(), INTERVAL 14 DAY)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which warehouses store more than 5 different items where actual quantity is above 50 units?",
      "fields": [
        "name",
        "warehouse",
        "item_code",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse, item_code, actual_qty FROM [BT]tabBin[BT] WHERE actual_qty > 50 GROUP BY warehouse HAVING COUNT(DISTINCT item_code) > 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "List all items with stock value above 50,000 in 'Main Store'.",
      "fields": [
        "name",
        "item_code",
        "warehouse",
        "stock_value"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, warehouse, stock_value FROM [BT]tabBin[BT] WHERE warehouse = 'Main Store' AND stock_value > 50000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Show bins where actual quantity is less than indented quantity.",
      "fields": [
        "name",
        "actual_qty",
        "indented_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, actual_qty, indented_qty FROM [BT]tabBin[BT] WHERE actual_qty < indented_qty''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which item has the highest reserved quantity for subcontracting?",
      "fields": [
        "name",
        "item_code",
        "reserved_qty_for_sub_contract"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, reserved_qty_for_sub_contract FROM [BT]tabBin[BT] ORDER BY reserved_qty_for_sub_contract DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Find bins where planned quantity is zero but ordered quantity is more than 100.",
      "fields": [
        "name",
        "planned_qty",
        "ordered_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, planned_qty, ordered_qty FROM [BT]tabBin[BT] WHERE planned_qty = 0 AND ordered_qty > 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which warehouses are storing item 'ST-0003' with more than 100 units reserved for production?",
      "fields": [
        "name",
        "item_code",
        "warehouse",
        "reserved_qty_for_production"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, warehouse, reserved_qty_for_production FROM [BT]tabBin[BT] WHERE item_code = 'ST-0003' AND reserved_qty_for_production > 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Get all bins where reserved and projected quantities are both zero.",
      "fields": [
        "name",
        "reserved_qty",
        "projected_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, reserved_qty, projected_qty FROM [BT]tabBin[BT] WHERE reserved_qty = 0 AND projected_qty = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Give me all bins where valuation rate is missing or not updated.",
      "fields": [
        "name",
        "valuation_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, valuation_rate FROM [BT]tabBin[BT] WHERE valuation_rate IS NULL OR valuation_rate = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Show all bins where actual quantity is greater than projected quantity and reserved stock exists.",
      "fields": [
        "name",
        "actual_qty",
        "projected_qty",
        "reserved_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, actual_qty, projected_qty, reserved_stock FROM [BT]tabBin[BT] WHERE actual_qty > projected_qty AND reserved_stock > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which items in 'Cold Store' have any type of reserved quantity set?",
      "fields": [
        "name",
        "warehouse",
        "reserved_qty",
        "reserved_qty_for_production",
        "reserved_qty_for_sub_contract"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse, reserved_qty, reserved_qty_for_production, reserved_qty_for_sub_contract FROM [BT]tabBin[BT] WHERE warehouse = 'Cold Store' AND (reserved_qty > 0 OR reserved_qty_for_production > 0 OR reserved_qty_for_sub_contract > 0)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which item has shown the highest stock value growth in the last 3 months?",
      "fields": [
        "name",
        "item_code",
        "stock_value",
        "modified"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, stock_value, modified FROM [BT]tabBin[BT] WHERE modified >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) ORDER BY stock_value DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "List items where projected quantity is significantly lower than actual quantity.",
      "fields": [
        "name",
        "item_code",
        "actual_qty",
        "projected_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, actual_qty, projected_qty FROM [BT]tabBin[BT] WHERE projected_qty < (actual_qty * 0.5)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Find bins that haven't been modified in the last 6 months and still hold stock.",
      "fields": [
        "name",
        "item_code",
        "modified",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, modified, actual_qty FROM [BT]tabBin[BT] WHERE actual_qty > 0 AND modified < DATE_SUB(CURDATE(), INTERVAL 6 MONTH)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which warehouse has the highest cumulative reserved stock?",
      "fields": [
        "warehouse",
        "total_reserved"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse, SUM(reserved_stock) as total_reserved FROM [BT]tabBin[BT] GROUP BY warehouse ORDER BY total_reserved DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Compare indented vs ordered quantities for item 'ITM-456'.",
      "fields": [
        "name",
        "item_code",
        "indented_qty",
        "ordered_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, indented_qty, ordered_qty FROM [BT]tabBin[BT] WHERE item_code = 'ITM-456' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which items have zero stock but non-zero reserved or planned quantities?",
      "fields": [
        "name",
        "item_code",
        "actual_qty",
        "reserved_qty",
        "planned_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, actual_qty, reserved_qty, planned_qty FROM [BT]tabBin[BT] WHERE actual_qty = 0 AND (reserved_qty > 0 OR planned_qty > 0)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Find bins where stock value per unit is unusually low (below 1 currency unit).",
      "fields": [
        "name",
        "item_code",
        "stock_value",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, stock_value, actual_qty FROM [BT]tabBin[BT] WHERE actual_qty > 0 AND (stock_value / actual_qty) < 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Show bins with stock UOM missing or undefined.",
      "fields": [
        "name",
        "item_code",
        "stock_uom"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, stock_uom FROM [BT]tabBin[BT] WHERE stock_uom IS NULL OR stock_uom = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Show bins modified today with a stock value above 2000.",
      "fields": [
        "name",
        "modified",
        "stock_value"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, modified, stock_value FROM [BT]tabBin[BT] WHERE DATE(modified) = CURDATE() AND stock_value > 2000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Give me all records where any kind of reserved quantity is greater than 100 units.",
      "fields": [
        "name",
        "reserved_qty",
        "reserved_qty_for_production",
        "reserved_qty_for_sub_contract"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, reserved_qty, reserved_qty_for_production, reserved_qty_for_sub_contract FROM [BT]tabBin[BT] WHERE reserved_qty > 100 OR reserved_qty_for_production > 100 OR reserved_qty_for_sub_contract > 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which items stored in 'Finished Goods WH' have stock value above 20,000 but reserved stock is zero?",
      "fields": [
        "name",
        "warehouse",
        "stock_value",
        "reserved_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse, stock_value, reserved_stock FROM [BT]tabBin[BT] WHERE warehouse = 'Finished Goods WH' AND stock_value > 20000 AND reserved_stock = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Find all bins where the difference between projected and actual quantity exceeds 500 units.",
      "fields": [
        "name",
        "projected_qty",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, projected_qty, actual_qty FROM [BT]tabBin[BT] WHERE ABS(projected_qty - actual_qty) > 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which item codes have at least 100 units reserved for production and subcontracting combined?",
      "fields": [
        "name",
        "item_code",
        "reserved_qty_for_production",
        "reserved_qty_for_sub_contract"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, reserved_qty_for_production, reserved_qty_for_sub_contract FROM [BT]tabBin[BT] WHERE (reserved_qty_for_production + reserved_qty_for_sub_contract) >= 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "List all bins where indented quantity is less than ordered quantity but reserved stock is still positive.",
      "fields": [
        "name",
        "indented_qty",
        "ordered_qty",
        "reserved_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, indented_qty, ordered_qty, reserved_stock FROM [BT]tabBin[BT] WHERE indented_qty < ordered_qty AND reserved_stock > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which warehouses have more than 10 bins with zero actual quantity but non-zero valuation rate?",
      "fields": [
        "warehouse",
        "name",
        "actual_qty",
        "valuation_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse, COUNT(*) as bin_count FROM [BT]tabBin[BT] WHERE actual_qty = 0 AND valuation_rate > 0 GROUP BY warehouse HAVING bin_count > 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Show all bins where the valuation rate dropped in the last week but stock value remained high.",
      "fields": [
        "name",
        "valuation_rate",
        "stock_value",
        "modified"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, valuation_rate, stock_value, modified FROM [BT]tabBin[BT] WHERE valuation_rate < 100 AND stock_value > 10000 AND modified >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Check stock quantity in bin for item 'AeroDrone X5' at 'Main Store'.",
      "fields": [
        "name",
        "item_code",
        "warehouse",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, warehouse, actual_qty FROM [BT]tabBin[BT] WHERE item_code = 'AeroDrone X5' AND warehouse = 'Main Store' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Get bin details for warehouse 'Main Store'.",
      "fields": [
        "name",
        "warehouse",
        "item_code",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse, item_code, actual_qty FROM [BT]tabBin[BT] WHERE warehouse = 'Main Store' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "List all bins that have a negative stock quantity.",
      "fields": [
        "name",
        "actual_qty",
        "item_code",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, actual_qty, item_code, warehouse FROM [BT]tabBin[BT] WHERE actual_qty < 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Batch"
      ],
      "question": "What is the manufacturing date of batch 'BATCH-009' for item 'AeroDrone X5'?",
      "fields": [
        "name",
        "manufacturing_date",
        "batch_id",
        "item"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, manufacturing_date, batch_id, item FROM [BT]tabBatch[BT] WHERE batch_id = 'BATCH-009' AND item = 'AeroDrone X5' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Batch"
      ],
      "question": "What's the current status and quantity of goods issued under batch 'BATCH-1002'?",
      "fields": [
        "name",
        "batch_qty",
        "item",
        "batch_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, batch_qty, item, batch_id FROM [BT]tabBatch[BT] WHERE batch_id = 'BATCH-1002' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Serial No"
      ],
      "question": "Find serial numbers with an active warranty under item 'SmartWatch Pro'.",
      "fields": [
        "name",
        "serial_no",
        "warranty_expiry_date",
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, serial_no, warranty_expiry_date, item_code FROM [BT]tabSerial No[BT] WHERE item_code = 'SmartWatch Pro' AND warranty_expiry_date >= CURDATE()''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Reconciliation"
      ],
      "question": "How do I reconcile the actual stock for 'FusionPad Tablet' in warehouse 'Main Store'?",
      "fields": [
        "name",
        "item_code",
        "set_warehouse",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, set_warehouse, company FROM [BT]tabStock Reconciliation[BT] WHERE item_code = 'FusionPad Tablet' AND set_warehouse = 'Main Store' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Reconciliation"
      ],
      "question": "Submit a reconciliation entry to correct quantity mismatches for item 'AeroDrone X5' in warehouse 'Main Store'.",
      "fields": [
        "name",
        "item_code",
        "set_warehouse",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, set_warehouse, company FROM [BT]tabStock Reconciliation[BT] WHERE item_code = 'AeroDrone X5' AND set_warehouse = 'Main Store' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Add a new warehouse named 'South Regional Depot' under company 'HTS Pvt Ltd'.",
      "fields": [
        "name",
        "warehouse_name",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, company FROM [BT]tabWarehouse[BT] WHERE company = 'HTS Pvt Ltd' AND warehouse_name = 'South Regional Depot' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which company has the highest number of active warehouses?",
      "fields": [
        "company",
        "name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT company, COUNT(*) as active_warehouse_count FROM [BT]tabWarehouse[BT] WHERE disabled = 0 GROUP BY company ORDER BY active_warehouse_count DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouse has the most child warehouses under it?",
      "fields": [
        "parent_warehouse",
        "name",
        "warehouse_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT parent_warehouse, COUNT(*) as child_count FROM [BT]tabWarehouse[BT] WHERE parent_warehouse IS NOT NULL GROUP BY parent_warehouse ORDER BY child_count DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "List all disabled warehouses along with their company names.",
      "fields": [
        "name",
        "warehouse_name",
        "disabled",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, disabled, company FROM [BT]tabWarehouse[BT] WHERE disabled = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "How many warehouses are there in each state?",
      "fields": [
        "state",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT state, COUNT(*) as total FROM [BT]tabWarehouse[BT] GROUP BY state ORDER BY total DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Give me the recently created warehouses this month.",
      "fields": [
        "name",
        "warehouse_name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, creation FROM [BT]tabWarehouse[BT] WHERE MONTH(creation) = MONTH(CURDATE()) AND YEAR(creation) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouses are missing contact numbers?",
      "fields": [
        "name",
        "warehouse_name",
        "phone_no",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, phone_no, mobile_no FROM [BT]tabWarehouse[BT] WHERE (phone_no IS NULL OR phone_no = '') AND (mobile_no IS NULL OR mobile_no = '')''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which company has the most active warehouses this year?",
      "fields": [
        "name",
        "company",
        "disabled",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company, disabled, creation FROM [BT]tabWarehouse[BT] WHERE disabled = 0 AND YEAR(creation) = YEAR(CURDATE()) GROUP BY company ORDER BY active_warehouses DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "List all warehouses set up in the last 3 months with no assigned parent.",
      "fields": [
        "name",
        "warehouse_name",
        "parent_warehouse",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, parent_warehouse, creation FROM [BT]tabWarehouse[BT] WHERE parent_warehouse IS NULL AND creation >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouse types have the highest number of active locations?",
      "fields": [
        "name",
        "warehouse_type",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_type, disabled FROM [BT]tabWarehouse[BT] WHERE disabled = 0 GROUP BY warehouse_type ORDER BY count DESC LIMIT 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Can you list all parent warehouses that don\u2019t have any child warehouses linked?",
      "fields": [
        "name",
        "warehouse_name",
        "parent_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, parent_warehouse FROM [BT]tabWarehouse[BT] w1 LEFT JOIN [BT]tabWarehouse[BT] w2 ON w1.name = w2.parent_warehouse WHERE w2.name IS NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Give me all warehouses that belong to companies starting with 'Al-'.",
      "fields": [
        "name",
        "warehouse_name",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, company FROM [BT]tabWarehouse[BT] WHERE company LIKE 'Al-%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Warehouses that were created before 2022 and are still active\u2014what are their names?",
      "fields": [
        "name",
        "warehouse_name",
        "creation",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, creation, disabled FROM [BT]tabWarehouse[BT] WHERE disabled = 0 AND creation < '2022-01-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Show all warehouse names and emails in Qatar region with missing phone numbers.",
      "fields": [
        "name",
        "warehouse_name",
        "email_id",
        "phone_no",
        "city"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, email_id, phone_no, city FROM [BT]tabWarehouse[BT] WHERE city = 'Qatar' AND (phone_no IS NULL OR phone_no = '')''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which city has the highest number of disabled warehouses?",
      "fields": [
        "name",
        "city",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, city, disabled FROM [BT]tabWarehouse[BT] WHERE disabled = 1 GROUP BY city ORDER BY total DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Find all warehouses where both phone and mobile numbers are the same.",
      "fields": [
        "name",
        "warehouse_name",
        "phone_no",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, phone_no, mobile_no FROM [BT]tabWarehouse[BT] WHERE phone_no = mobile_no AND phone_no IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "List all warehouse addresses in cities that start with the letter 'S' and have active email IDs.",
      "fields": [
        "name",
        "city",
        "address_line_1",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, city, address_line_1, email_id FROM [BT]tabWarehouse[BT] WHERE city LIKE 'S%' AND email_id IS NOT NULL AND email_id != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouse has the highest number of levels in the warehouse hierarchy tree?",
      "fields": [
        "name",
        "warehouse_name",
        "lft",
        "rgt"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, lft, rgt FROM [BT]tabWarehouse[BT] ORDER BY levels DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Show all group warehouses linked to a parent warehouse under the company 'ERPGulf LLC'.",
      "fields": [
        "name",
        "is_group",
        "parent_warehouse",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_group, parent_warehouse, company FROM [BT]tabWarehouse[BT] WHERE is_group = 1 AND company = 'ERPGulf LLC' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Fetch warehouses which are disabled but still have a phone number listed.",
      "fields": [
        "name",
        "disabled",
        "phone_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, disabled, phone_no FROM [BT]tabWarehouse[BT] WHERE disabled = 1 AND phone_no IS NOT NULL AND phone_no != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Compare the number of warehouses per warehouse type.",
      "fields": [
        "name",
        "warehouse_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_type FROM [BT]tabWarehouse[BT] GROUP BY warehouse_type ORDER BY total_warehouses DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "How many warehouses were created each year for the last 5 years?",
      "fields": [
        "name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, creation FROM [BT]tabWarehouse[BT] WHERE creation >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR) GROUP BY year ORDER BY year''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Can you tell me how many new warehouses were created each month this year?",
      "fields": [
        "name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, creation FROM [BT]tabWarehouse[BT] WHERE YEAR(creation) = YEAR(CURDATE()) GROUP BY MONTH(creation) ORDER BY MONTH(creation)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Show the names and types of all warehouses located in Doha.",
      "fields": [
        "name",
        "warehouse_name",
        "warehouse_type",
        "city"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, warehouse_type, city FROM [BT]tabWarehouse[BT] WHERE city = 'Doha' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouse is likely the central hub given it has the most child nodes?",
      "fields": [
        "name",
        "parent_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, parent_warehouse FROM [BT]tabWarehouse[BT] WHERE parent_warehouse IS NOT NULL GROUP BY parent_warehouse ORDER BY child_count DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "I need a list of active warehouses where parent is either 'Central Storage' or 'Transit Hub'.",
      "fields": [
        "name",
        "warehouse_name",
        "disabled",
        "parent_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, disabled, parent_warehouse FROM [BT]tabWarehouse[BT] WHERE disabled = 0 AND parent_warehouse IN ('Central Storage', 'Transit Hub')''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Warehouses that don\u2019t have phone or mobile contact info\u2014can you find them?",
      "fields": [
        "name",
        "warehouse_name",
        "phone_no",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, phone_no, mobile_no FROM [BT]tabWarehouse[BT] WHERE (phone_no IS NULL OR phone_no = '') AND (mobile_no IS NULL OR mobile_no = '')''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "List all rejected warehouses along with their parent warehouse and type.",
      "fields": [
        "name",
        "warehouse_name",
        "is_rejected_warehouse",
        "parent_warehouse",
        "warehouse_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, is_rejected_warehouse, parent_warehouse, warehouse_type FROM [BT]tabWarehouse[BT] WHERE is_rejected_warehouse = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouses were created in the last 3 months and are not disabled?",
      "fields": [
        "name",
        "warehouse_name",
        "creation",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, creation, disabled FROM [BT]tabWarehouse[BT] WHERE creation >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND disabled = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Show the number of warehouses by state, ordered by highest count.",
      "fields": [
        "name",
        "state"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, state FROM [BT]tabWarehouse[BT] GROUP BY state ORDER BY warehouse_count DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which parent warehouse has the most child warehouses?",
      "fields": [
        "name",
        "parent_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, parent_warehouse FROM [BT]tabWarehouse[BT] WHERE parent_warehouse IS NOT NULL GROUP BY parent_warehouse ORDER BY child_count DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "View all inactive or archived warehouses in the system.",
      "fields": [
        "name",
        "disabled",
        "warehouse_name",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, disabled, warehouse_name, company FROM [BT]tabWarehouse[BT] WHERE disabled = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Show bins modified today with a stock value above 2000.",
      "fields": [
        "name",
        "modified",
        "stock_value"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, modified, stock_value FROM [BT]tabBin[BT] WHERE DATE(modified) = CURDATE() AND stock_value > 2000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Give me all records where any kind of reserved quantity is greater than 100 units.",
      "fields": [
        "name",
        "reserved_qty",
        "reserved_qty_for_production",
        "reserved_qty_for_sub_contract"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, reserved_qty, reserved_qty_for_production, reserved_qty_for_sub_contract FROM [BT]tabBin[BT] WHERE reserved_qty > 100 OR reserved_qty_for_production > 100 OR reserved_qty_for_sub_contract > 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which items stored in 'Finished Goods WH' have stock value above 20,000 but reserved stock is zero?",
      "fields": [
        "name",
        "warehouse",
        "stock_value",
        "reserved_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse, stock_value, reserved_stock FROM [BT]tabBin[BT] WHERE warehouse = 'Finished Goods WH' AND stock_value > 20000 AND reserved_stock = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Find all bins where the difference between projected and actual quantity exceeds 500 units.",
      "fields": [
        "name",
        "projected_qty",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, projected_qty, actual_qty FROM [BT]tabBin[BT] WHERE ABS(projected_qty - actual_qty) > 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which item codes have at least 100 units reserved for production and subcontracting combined?",
      "fields": [
        "name",
        "reserved_qty_for_production",
        "reserved_qty_for_sub_contract",
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, reserved_qty_for_production, reserved_qty_for_sub_contract, item_code FROM [BT]tabBin[BT] WHERE (reserved_qty_for_production + reserved_qty_for_sub_contract) >= 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "List all bins where indented quantity is less than ordered quantity but reserved stock is still positive.",
      "fields": [
        "name",
        "indented_qty",
        "ordered_qty",
        "reserved_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, indented_qty, ordered_qty, reserved_stock FROM [BT]tabBin[BT] WHERE indented_qty < ordered_qty AND reserved_stock > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which warehouses have more than 10 bins with zero actual quantity but non-zero valuation rate?",
      "fields": [
        "name",
        "warehouse",
        "actual_qty",
        "valuation_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse, actual_qty, valuation_rate FROM [BT]tabBin[BT] WHERE actual_qty = 0 AND valuation_rate > 0 GROUP BY warehouse HAVING COUNT(name) > 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Show all bins where the valuation rate dropped in the last week but stock value remained high.",
      "fields": [
        "name",
        "valuation_rate",
        "stock_value",
        "modified"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, valuation_rate, stock_value, modified FROM [BT]tabBin[BT] WHERE valuation_rate < 100 AND stock_value > 10000 AND modified >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Check stock quantity in bin for item 'AeroDrone X5' at 'Main Store'.",
      "fields": [
        "name",
        "item_code",
        "warehouse",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, warehouse, actual_qty FROM [BT]tabBin[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Get bin details for warehouse 'Main Store'.",
      "fields": [
        "name",
        "warehouse",
        "item_code",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse, item_code, actual_qty FROM [BT]tabBin[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "List all bins that have a negative stock quantity.",
      "fields": [
        "name",
        "actual_qty",
        "item_code",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, actual_qty, item_code, warehouse FROM [BT]tabBin[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Batch"
      ],
      "question": "What is the manufacturing date of batch 'BATCH-009' for item 'AeroDrone X5'?",
      "fields": [
        "name",
        "manufacturing_date",
        "batch_id",
        "item"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, manufacturing_date, batch_id, item FROM [BT]tabBatch[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Batch"
      ],
      "question": "What's the current status and quantity of goods issued under batch 'BATCH-1002'?",
      "fields": [
        "name",
        "batch_qty",
        "item",
        "batch_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, batch_qty, item, batch_id FROM [BT]tabBatch[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Serial No"
      ],
      "question": "Find serial numbers with an active warranty under item 'SmartWatch Pro'.",
      "fields": [
        "name",
        "serial_no",
        "warranty_expiry_date",
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, serial_no, warranty_expiry_date, item_code FROM [BT]tabSerial No[BT] No[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Reconciliation"
      ],
      "question": "How do I reconcile the actual stock for 'FusionPad Tablet' in warehouse 'Main Store'?",
      "fields": [
        "name",
        "item_code",
        "set_warehouse",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, set_warehouse, company FROM [BT]tabStock Reconciliation[BT] Reconciliation[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Reconciliation"
      ],
      "question": "Submit a reconciliation entry to correct quantity mismatches for item 'AeroDrone X5' in warehouse 'Main Store'.",
      "fields": [
        "name",
        "item_code",
        "set_warehouse",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, set_warehouse, company FROM [BT]tabStock Reconciliation[BT] Reconciliation[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Add a new warehouse named 'South Regional Depot' under company 'HTS Pvt Ltd'.",
      "fields": [
        "name",
        "warehouse_name",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, company FROM [BT]tabWarehouse[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which company has the highest number of active warehouses?",
      "fields": [
        "name",
        "company",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company, disabled FROM [BT]tabWarehouse[BT] WHERE disabled = 0 GROUP BY company ORDER BY active_warehouse_count DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouse has the most child warehouses under it?",
      "fields": [
        "name",
        "warehouse_name",
        "parent_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, parent_warehouse FROM [BT]tabWarehouse[BT] WHERE parent_warehouse IS NOT NULL GROUP BY parent_warehouse ORDER BY child_count DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "List all disabled warehouses along with their company names.",
      "fields": [
        "name",
        "warehouse_name",
        "disabled",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, disabled, company FROM [BT]tabWarehouse[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "How many warehouses are there in each state?",
      "fields": [
        "name",
        "state"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, state FROM [BT]tabWarehouse[BT] GROUP BY state ORDER BY total DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouses are missing contact numbers?",
      "fields": [
        "name",
        "warehouse_name",
        "phone_no",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, phone_no, mobile_no FROM [BT]tabWarehouse[BT] WHERE (phone_no IS NULL OR phone_no = '') AND (mobile_no IS NULL OR mobile_no = '')''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which company has the most active warehouses this year?",
      "fields": [
        "name",
        "company",
        "disabled",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company, disabled, creation FROM [BT]tabWarehouse[BT] WHERE disabled = 0 AND YEAR(creation) = YEAR(CURDATE()) GROUP BY company ORDER BY active_warehouses DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "List all warehouses set up in the last 3 months with no assigned parent.",
      "fields": [
        "name",
        "warehouse_name",
        "parent_warehouse",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, parent_warehouse, creation FROM [BT]tabWarehouse[BT] WHERE parent_warehouse IS NULL AND creation >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouse types have the highest number of active locations?",
      "fields": [
        "name",
        "warehouse_type",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_type, disabled FROM [BT]tabWarehouse[BT] WHERE disabled = 0 GROUP BY warehouse_type ORDER BY count DESC LIMIT 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Can you list all parent warehouses that don\u2019t have any child warehouses linked?",
      "fields": [
        "name",
        "warehouse_name",
        "parent_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, parent_warehouse FROM [BT]tabWarehouse[BT] w1 LEFT JOIN [BT]tabWarehouse[BT] w2 ON w1.name = w2.parent_warehouse WHERE w2.name IS NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Give me all warehouses that belong to companies starting with 'Al-'.",
      "fields": [
        "name",
        "warehouse_name",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, company FROM [BT]tabWarehouse[BT] WHERE company LIKE 'Al-%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Warehouses that were created before 2022 and are still active\u2014what are their names?",
      "fields": [
        "name",
        "warehouse_name",
        "creation",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, creation, disabled FROM [BT]tabWarehouse[BT] WHERE disabled = 0 AND creation < '2022-01-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Show all warehouse names and emails in Qatar region with missing phone numbers.",
      "fields": [
        "name",
        "warehouse_name",
        "email_id",
        "phone_no",
        "city"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, email_id, phone_no, city FROM [BT]tabWarehouse[BT] WHERE city = 'Qatar' AND (phone_no IS NULL OR phone_no = '')''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which city has the highest number of disabled warehouses?",
      "fields": [
        "name",
        "city",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, city, disabled FROM [BT]tabWarehouse[BT] WHERE disabled = 1 GROUP BY city ORDER BY total DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Find all warehouses where both phone and mobile numbers are the same.",
      "fields": [
        "name",
        "warehouse_name",
        "phone_no",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, phone_no, mobile_no FROM [BT]tabWarehouse[BT] WHERE phone_no = mobile_no AND phone_no IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "List all warehouse addresses in cities that start with the letter 'S' and have active email IDs.",
      "fields": [
        "name",
        "city",
        "address_line_1",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, city, address_line_1, email_id FROM [BT]tabWarehouse[BT] WHERE city LIKE 'S%' AND email_id IS NOT NULL AND email_id != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouse has the highest number of levels in the warehouse hierarchy tree?",
      "fields": [
        "name",
        "warehouse_name",
        "lft",
        "rgt"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, lft, rgt FROM [BT]tabWarehouse[BT] ORDER BY levels DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Show all group warehouses linked to a parent warehouse under the company 'ERPGulf LLC'.",
      "fields": [
        "name",
        "is_group",
        "parent_warehouse",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_group, parent_warehouse, company FROM [BT]tabWarehouse[BT] WHERE is_group = 1 AND company = 'ERPGulf LLC' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Fetch warehouses which are disabled but still have a phone number listed.",
      "fields": [
        "name",
        "disabled",
        "phone_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, disabled, phone_no FROM [BT]tabWarehouse[BT] WHERE disabled = 1 AND phone_no IS NOT NULL AND phone_no != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Compare the number of warehouses per warehouse type.",
      "fields": [
        "name",
        "warehouse_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_type FROM [BT]tabWarehouse[BT] GROUP BY warehouse_type ORDER BY total_warehouses DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "How many warehouses were created each year for the last 5 years?",
      "fields": [
        "name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, creation FROM [BT]tabWarehouse[BT] WHERE creation >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR) GROUP BY year ORDER BY year''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Can you tell me how many new warehouses were created each month this year?",
      "fields": [
        "name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, creation FROM [BT]tabWarehouse[BT] WHERE YEAR(creation) = YEAR(CURDATE()) GROUP BY MONTH(creation) ORDER BY MONTH(creation)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Show the names and types of all warehouses located in Doha.",
      "fields": [
        "name",
        "warehouse_name",
        "warehouse_type",
        "city"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, warehouse_type, city FROM [BT]tabWarehouse[BT] WHERE city = 'Doha' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouse is likely the central hub given it has the most child nodes?",
      "fields": [
        "name",
        "parent_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, parent_warehouse FROM [BT]tabWarehouse[BT] WHERE parent_warehouse IS NOT NULL GROUP BY parent_warehouse ORDER BY child_count DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "I need a list of active warehouses where parent is either 'Central Storage' or 'Transit Hub'.",
      "fields": [
        "name",
        "warehouse_name",
        "disabled",
        "parent_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, disabled, parent_warehouse FROM [BT]tabWarehouse[BT] WHERE disabled = 0 AND parent_warehouse IN ('Central Storage', 'Transit Hub')''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Warehouses that don\u2019t have phone or mobile contact info\u2014can you find them?",
      "fields": [
        "name",
        "warehouse_name",
        "phone_no",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, phone_no, mobile_no FROM [BT]tabWarehouse[BT] WHERE (phone_no IS NULL OR phone_no = '') AND (mobile_no IS NULL OR mobile_no = '')''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "List all rejected warehouses along with their parent warehouse and type.",
      "fields": [
        "name",
        "warehouse_name",
        "is_rejected_warehouse",
        "parent_warehouse",
        "warehouse_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, is_rejected_warehouse, parent_warehouse, warehouse_type FROM [BT]tabWarehouse[BT] WHERE is_rejected_warehouse = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouses were created in the last 3 months and are not disabled?",
      "fields": [
        "name",
        "warehouse_name",
        "creation",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warehouse_name, creation, disabled FROM [BT]tabWarehouse[BT] WHERE creation >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND disabled = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Show the number of warehouses by state, ordered by highest count.",
      "fields": [
        "name",
        "state"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, state FROM [BT]tabWarehouse[BT] GROUP BY state ORDER BY warehouse_count DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which parent warehouse has the most child warehouses?",
      "fields": [
        "name",
        "parent_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, parent_warehouse FROM [BT]tabWarehouse[BT] WHERE parent_warehouse IS NOT NULL GROUP BY parent_warehouse ORDER BY child_count DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "View all inactive or archived warehouses in the system.",
      "fields": [
        "name",
        "disabled",
        "warehouse_name",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, disabled, warehouse_name, company FROM [BT]tabWarehouse[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM"
      ],
      "question": "Define a conversion between 'Kilogram' and 'Gram' for stock items.",
      "fields": [
        "name",
        "uom_name",
        "must_be_whole_number"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, uom_name, must_be_whole_number FROM [BT]tabUOM[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM"
      ],
      "question": "Add a new unit of measure called 'Milliliter' for liquid tracking.",
      "fields": [
        "name",
        "uom_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, uom_name FROM [BT]tabUOM[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "Can you check the current status and linked customer for lead ID LEAD-00234?",
      "fields": [
        "name",
        "status",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, customer FROM [BT]tabLead[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quotation"
      ],
      "question": "Find all quotations where total value is above 10,000.",
      "fields": [
        "name",
        "transaction_date",
        "customer_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, transaction_date, customer_name FROM [BT]tabQuotation[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quotation"
      ],
      "question": "Show quotations with delivery status marked 'Shipped'.",
      "fields": [
        "name",
        "order_type",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, order_type, status FROM [BT]tabQuotation[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quotation"
      ],
      "question": "List quotations with payment done via 'Credit Card'.",
      "fields": [
        "name",
        "currency",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, currency, transaction_date FROM [BT]tabQuotation[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quotation"
      ],
      "question": "Show quotations approved by manager.",
      "fields": [
        "name",
        "status",
        "order_lost_reason"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, order_lost_reason FROM [BT]tabQuotation[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quotation"
      ],
      "question": "Get quotations where the item code is 'ITEM-001'.",
      "fields": [
        "name",
        "total_qty",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_qty, net_total FROM [BT]tabQuotation[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show all partners with an email address.",
      "fields": [
        "name",
        "partner_name",
        "partner_type",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, partner_type, territory FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Get the phone number and logo of each partner.",
      "fields": [
        "name",
        "logo"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, logo FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List partners based on registration date and name.",
      "fields": [
        "name",
        "partner_name",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, commission_rate FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Find the partners who joined last year.",
      "fields": [
        "name",
        "partner_name",
        "partner_type",
        "description"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, partner_type, description FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Get the list of sales partners with GST details.",
      "fields": [
        "name",
        "partner_name",
        "partner_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, partner_type FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show partner address and tax ID.",
      "fields": [
        "name",
        "partner_name",
        "partner_type",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, partner_type, territory FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List partners using contact_email and partner name.",
      "fields": [
        "name",
        "partner_name",
        "partner_type",
        "referral_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, partner_type, referral_code FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show commission rate and bank account of each partner.",
      "fields": [
        "name",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, commission_rate FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Get the mobile number of affiliates in the south zone.",
      "fields": [
        "name",
        "partner_name",
        "partner_type",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, partner_type, territory FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show referral code, address, and approval status.",
      "fields": [
        "name",
        "referral_code",
        "partner_name",
        "partner_website"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, referral_code, partner_name, partner_website FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partners have 'bulk' or 'enterprise' in their description?",
      "fields": [
        "name",
        "partner_name",
        "description"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, description FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Find partners whose introduction includes the word 'exclusive'.",
      "fields": [
        "name",
        "introduction",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, introduction, partner_name FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Search for partners with 'trusted' in their description or intro.",
      "fields": [
        "name",
        "introduction",
        "description",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, introduction, description, partner_name FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List all affiliates or dealers.",
      "fields": [
        "name",
        "partner_type",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_type, partner_name FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List partners with contact number and name.",
      "fields": [
        "name",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Get partners with their address and tax ID.",
      "fields": [
        "name",
        "address_html"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, address_html FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show referral code and GST for all resellers.",
      "fields": [
        "name",
        "referral_code",
        "partner_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, referral_code, partner_type FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partners are shown on the website but have no description?",
      "fields": [
        "name",
        "partner_name",
        "show_in_website",
        "description"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, show_in_website, description FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show visible partners who didn\u2019t enter an introduction.",
      "fields": [
        "name",
        "partner_name",
        "show_in_website",
        "introduction"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, show_in_website, introduction FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Find website-visible partners missing their logo.",
      "fields": [
        "name",
        "show_in_website",
        "logo",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, show_in_website, logo, partner_name FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List partners from Gulf, Asia, or MENA regions.",
      "fields": [
        "name",
        "territory",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, territory, partner_name FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show partners with websites on example.com or example.org.",
      "fields": [
        "name",
        "partner_name",
        "partner_website"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, partner_website FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partners have 'bulk' or 'enterprise' in their description?",
      "fields": [
        "name",
        "partner_name",
        "description"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, description FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Find partners whose introduction includes the word 'exclusive'.",
      "fields": [
        "name",
        "introduction",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, introduction, partner_name FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Search for partners with 'trusted' in their description or intro.",
      "fields": [
        "name",
        "introduction",
        "description",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, introduction, description, partner_name FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partners have defined target details?",
      "fields": [
        "name",
        "partner_name",
        "targets"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, targets FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Get the contact and address descriptions for all resellers.",
      "fields": [
        "name",
        "partner_type",
        "contact_desc",
        "address_desc"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_type, contact_desc, address_desc FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List partners in India who have added a description.",
      "fields": [
        "name",
        "territory",
        "description",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, territory, description, partner_name FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Find resellers who have defined sales targets.",
      "fields": [
        "name",
        "partner_type",
        "targets",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_type, targets, partner_name FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partners are either in Asia or Europe?",
      "fields": [
        "name",
        "territory",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, territory, partner_name FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Get partners who are either resellers or commission agents.",
      "fields": [
        "name",
        "partner_type",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_type, partner_name FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Find partners in either 'Gulf' or 'MENA' territories.",
      "fields": [
        "name",
        "territory",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, territory, partner_name FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Who are affiliates or distributors listed on the website?",
      "fields": [
        "name",
        "partner_type",
        "show_in_website",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_type, show_in_website, partner_name FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List the names and websites of partners visible on the site.",
      "fields": [
        "name",
        "partner_name",
        "partner_website",
        "show_in_website"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, partner_website, show_in_website FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show partner type and contact email of all partners.",
      "fields": [
        "name",
        "partner_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_type FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partners are visible on the website but haven\u2019t added a referral code?",
      "fields": [
        "name",
        "partner_name",
        "show_in_website",
        "referral_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, show_in_website, referral_code FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show all dealers and affiliates.",
      "fields": [
        "name",
        "partner_type",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_type, partner_name FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Find partners with \u2018bulk\u2019 in their description.",
      "fields": [
        "name",
        "description",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, description, partner_name FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "What are the target details of partners in the UAE?",
      "fields": [
        "name",
        "territory",
        "targets"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, territory, targets FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partners don\u2019t have any description?",
      "fields": [
        "name",
        "partner_name",
        "description"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, description FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show introduction and logo for all resellers.",
      "fields": [
        "name",
        "partner_type",
        "introduction",
        "logo"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_type, introduction, logo FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partners have their logo and website?",
      "fields": [
        "name",
        "partner_name",
        "logo",
        "partner_website"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, logo, partner_website FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Give me contact numbers of all affiliates.",
      "fields": [
        "name",
        "partner_name",
        "partner_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, partner_type FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show referral codes of all partners who are marked for website display.",
      "fields": [
        "name",
        "referral_code",
        "show_in_website",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, referral_code, show_in_website, partner_name FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show me all partners with a commission rate of more than 10% in the Gulf region.",
      "fields": [
        "name",
        "partner_name",
        "commission_rate",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, commission_rate, territory FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Where can I view the total commission earned by sales partner 'Global Deals LLP' this quarter?",
      "fields": [
        "name",
        "partner_name",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, commission_rate FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Opportunity"
      ],
      "question": "How can I track all sales opportunities created for Q2 (April to June 2025)?",
      "fields": [
        "name",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, transaction_date FROM [BT]tabOpportunity[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "How do I create a new lead from a website inquiry named 'John Smith'?",
      "fields": [
        "name",
        "lead_name",
        "email_id",
        "source"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, lead_name, email_id, source FROM [BT]tabLead[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "BOM"
      ],
      "question": "I want to create a new BOM for the product 'SmartWidget X200'. How can I do that?",
      "fields": [
        "name",
        "item",
        "quantity",
        "items"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item, quantity, items FROM [BT]tabBOM[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "BOM"
      ],
      "question": "Where can I check the estimated cost from the BOM for 'HeatShield Panel'?",
      "fields": [
        "name",
        "total_cost",
        "item"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_cost, item FROM [BT]tabBOM[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "Show the work order linked to production batch 'BATCH-00015'.",
      "fields": [
        "name",
        "production_item",
        "status",
        "batch_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, production_item, status, batch_no FROM [BT]tabWork Order[BT] ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "Get the current status of work order 'WO-00023'.",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status FROM [BT]tabWork Order[BT] ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Work Order"
      ],
      "question": "Which workstation is assigned to work order 'WO-00045'?",
      "fields": [
        "name",
        "workstation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, workstation FROM [BT]tabWork Order[BT] ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Production Plan"
      ],
      "question": "List all production plans created for Q2 2025.",
      "fields": [
        "name",
        "company",
        "planned_start_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company, planned_start_date FROM [BT]tabProduction Plan[BT] Plan[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Production Plan"
      ],
      "question": "Which work orders are included in production plan 'PP-00014'?",
      "fields": [
        "work_order",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT work_order, name FROM [BT]tabProduction Plan[BT] Plan[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Production Plan"
      ],
      "question": "Check the planned quantity for item 'ITEM-0009' in production plan 'PP-00012'.",
      "fields": [
        "name",
        "planned_qty",
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, planned_qty, item_code FROM [BT]tabProduction Plan[BT] Plan[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Job Card"
      ],
      "question": "Get operation log for job card 'JC-00120'.",
      "fields": [
        "name",
        "operation",
        "time_logs"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, operation, time_logs FROM [BT]tabJob Card[BT] Card[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Job Card"
      ],
      "question": "Is the job card 'JC-00130' marked as completed?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status FROM [BT]tabJob Card[BT] Card[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Job Card"
      ],
      "question": "Who is the operator assigned to job card 'JC-00089'?",
      "fields": [
        "name",
        "employee"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee FROM [BT]tabJob Card[BT] Card[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Salary Slip"
      ],
      "question": "Get salary slips for all employees generated for April 2025.",
      "fields": [
        "name",
        "employee",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee, posting_date FROM [BT]tabSalary Slip[BT] Slip[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Salary Slip"
      ],
      "question": "Show all deductions applied to salary slip 'SS-00210'.",
      "fields": [
        "name",
        "deductions"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, deductions FROM [BT]tabSalary Slip[BT] Slip[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "BOM"
      ],
      "question": "Can you show me the list of raw materials used in the BOM for 'EcoCooler 500'?",
      "fields": [
        "name",
        "items"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, items FROM [BT]tabBOM[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "What is the current status of lead 'LEAD-00123' in the CRM?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status FROM [BT]tabLead[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Opportunity"
      ],
      "question": "Who is assigned as the opportunity owner for deal OPP-00321?",
      "fields": [
        "name",
        "opportunity_owner"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, opportunity_owner FROM [BT]tabOpportunity[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Opportunity"
      ],
      "question": "When is the expected closing date for opportunity OPP-00456?",
      "fields": [
        "name",
        "expected_closing"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, expected_closing FROM [BT]tabOpportunity[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "What is the designation and email address of employee John Doe?",
      "fields": [
        "name",
        "designation",
        "personal_email"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, designation, personal_email FROM [BT]tabEmployee[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "What is the price and description of item 'ITEM-0001'?",
      "fields": [
        "name",
        "description",
        "standard_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, description, standard_rate FROM [BT]tabItem[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "What are the barcode and stock unit set for item 'AeroDrone X5'?",
      "fields": [
        "name",
        "barcodes",
        "stock_uom"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, barcodes, stock_uom FROM [BT]tabItem[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item Group"
      ],
      "question": "Which item group is 'AeroDrone X5' assigned to?",
      "fields": [
        "name",
        "item_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_group FROM [BT]tabItem Group[BT] Group[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item Group"
      ],
      "question": "Which warehouse is set as default for the item group 'Electronics'?",
      "fields": [
        "name",
        "default_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_warehouse FROM [BT]tabItem Group[BT] Group[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Batch"
      ],
      "question": "When does the batch 'BATCH-042' of 'EcoFilter Max' expire?",
      "fields": [
        "name",
        "expiry_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, expiry_date FROM [BT]tabBatch[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Serial No"
      ],
      "question": "What is the maintenance status of serial number 'SN-X5-101'?",
      "fields": [
        "name",
        "maintenance_status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, maintenance_status FROM [BT]tabSerial No[BT] No[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Serial No"
      ],
      "question": "What is the current status of serial number 'SN-X7-222'?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status FROM [BT]tabSerial No[BT] No[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "What is the current address for warehouse 'Main Store'?",
      "fields": [
        "name",
        "address_line_1"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, address_line_1 FROM [BT]tabWarehouse[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM"
      ],
      "question": "What is the full name of the unit 'Box' used for sales?",
      "fields": [
        "name",
        "uom_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, uom_name FROM [BT]tabUOM[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "What email address is set for sales partner 'ZapNest Distributors'?",
      "fields": [
        "name",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, email_id FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "Which territory is assigned to lead LEAD-00045?",
      "fields": [
        "name",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, territory FROM [BT]tabLead[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Cost Center"
      ],
      "question": "Which cost centers are created to track research and development expenses?",
      "fields": [
        "name",
        "cost_center_name",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, cost_center_name, company FROM [BT]tabCost Center[BT] Center[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Cost Center"
      ],
      "question": "Where can I find budget-linked cost centers for the marketing department?",
      "fields": [
        "name",
        "cost_center_name",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, cost_center_name, company FROM [BT]tabCost Center[BT] Center[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Cost Center"
      ],
      "question": "Which cost centers are currently marked as inactive in the system?",
      "fields": [
        "name",
        "cost_center_name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, cost_center_name, disabled FROM [BT]tabCost Center[BT] Center[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Request for Quotation"
      ],
      "question": "Can you show the list of RFQs sent to multiple suppliers this month?",
      "fields": [
        "name",
        "suppliers",
        "transaction_date",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, suppliers, transaction_date, status FROM [BT]tabRequest for Quotation[BT] WHERE MONTH(transaction_date) = MONTH(CURDATE()) AND YEAR(transaction_date) = YEAR(CURDATE()) AND suppliers LIKE '%,%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Request for Quotation"
      ],
      "question": "What's the current response status for the request for quotation 'RFQ-00045'?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status FROM [BT]tabRequest for Quotation[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Request for Quotation"
      ],
      "question": "List RFQs that are still pending or awaiting supplier responses.",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status FROM [BT]tabRequest for Quotation[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Taxes and Charges"
      ],
      "question": "Can you show me the tax templates used for import purchases?",
      "fields": [
        "name",
        "category",
        "charge_type",
        "rate",
        "account_head"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, category, charge_type, rate, account_head FROM [BT]tabPurchase Taxes and Charges[BT] Taxes and Charges[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Taxes and Charges"
      ],
      "question": "What is the surcharge value currently set in our purchase tax settings?",
      "fields": [
        "name",
        "description",
        "rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, description, rate FROM [BT]tabPurchase Taxes and Charges[BT] Taxes and Charges[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Taxes and Charges"
      ],
      "question": "Which account head is linked to the import charges template?",
      "fields": [
        "name",
        "account_head",
        "description"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, account_head, description FROM [BT]tabPurchase Taxes and Charges[BT] Taxes and Charges[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tax Rule"
      ],
      "question": "Are there any tax rules that apply 18% GST for purchases made in Delhi?",
      "fields": [
        "name",
        "billing_state",
        "purchase_tax_template",
        "tax_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, billing_state, purchase_tax_template, tax_category FROM [BT]tabTax Rule[BT] Rule[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tax Rule"
      ],
      "question": "Which tax rules exclude services from taxation?",
      "fields": [
        "name",
        "item_group",
        "purchase_tax_template"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_group, purchase_tax_template FROM [BT]tabTax Rule[BT] Rule[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tax Rule"
      ],
      "question": "List all tax rules that are marked inactive or outdated.",
      "fields": [
        "name",
        "to_date",
        "purchase_tax_template"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, to_date, purchase_tax_template FROM [BT]tabTax Rule[BT] Rule[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Pricing Rule"
      ],
      "question": "Which pricing rules apply discounts to bulk orders?",
      "fields": [
        "name",
        "title",
        "min_qty",
        "discount_percentage",
        "rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, title, min_qty, discount_percentage, rate FROM [BT]tabPricing Rule[BT] Rule[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Pricing Rule"
      ],
      "question": "Can I see pricing rules based on customer group conditions?",
      "fields": [
        "name",
        "title",
        "customer_group",
        "rate",
        "discount_percentage"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, title, customer_group, rate, discount_percentage FROM [BT]tabPricing Rule[BT] Rule[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Pricing Rule"
      ],
      "question": "Which pricing rules are active for seasonal discounts this quarter?",
      "fields": [
        "name",
        "title",
        "valid_from",
        "valid_upto",
        "rate",
        "discount_percentage"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, title, valid_from, valid_upto, rate, discount_percentage FROM [BT]tabPricing Rule[BT] Rule[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Mode of Payment"
      ],
      "question": "What payment methods like UPI or card are allowed in the system?",
      "fields": [
        "name",
        "type",
        "enabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, type, enabled FROM [BT]tabMode of Payment[BT] of Payment[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Mode of Payment"
      ],
      "question": "Which payment modes are enabled for use in POS?",
      "fields": [
        "name",
        "type",
        "enabled",
        "enable_in_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, type, enabled, enable_in_pos FROM [BT]tabMode of Payment[BT] of Payment[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Mode of Payment"
      ],
      "question": "Is cheque enabled as an accepted payment method?",
      "fields": [
        "name",
        "enabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, enabled FROM [BT]tabMode of Payment[BT] of Payment[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Taxes and Charges"
      ],
      "question": "Which sales tax templates include a 5% VAT rate?",
      "fields": [
        "name",
        "rate",
        "account_head",
        "charge_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, rate, account_head, charge_type FROM [BT]tabSales Taxes and Charges[BT] Taxes and Charges[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Taxes and Charges"
      ],
      "question": "Which tax accounts are linked to sales tax templates?",
      "fields": [
        "name",
        "account_head",
        "charge_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, account_head, charge_type FROM [BT]tabSales Taxes and Charges[BT] Taxes and Charges[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Taxes and Charges"
      ],
      "question": "Are any sales tax templates disabled for inter-state transactions?",
      "fields": [
        "name",
        "account_head",
        "charge_type",
        "description"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, account_head, charge_type, description FROM [BT]tabSales Taxes and Charges[BT] Taxes and Charges[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Account"
      ],
      "question": "What are the active expense accounts in our chart of accounts?",
      "fields": [
        "name",
        "account_type",
        "root_type",
        "is_group",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, account_type, root_type, is_group, disabled FROM [BT]tabAccount[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Account"
      ],
      "question": "Can you show me our entire chart of accounts grouped by type?",
      "fields": [
        "name",
        "account_type",
        "root_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, account_type, root_type FROM [BT]tabAccount[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Account"
      ],
      "question": "Which accounts have been marked as frozen?",
      "fields": [
        "name",
        "freeze_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, freeze_account FROM [BT]tabAccount[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Fiscal Year"
      ],
      "question": "What is the end date for the fiscal year 2025\u20132026?",
      "fields": [
        "name",
        "year",
        "year_end_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, year, year_end_date FROM [BT]tabFiscal Year[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Fiscal Year"
      ],
      "question": "Which fiscal year is currently set as the default in the system?",
      "fields": [
        "name",
        "year",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, year, disabled FROM [BT]tabFiscal Year[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Currency"
      ],
      "question": "Is AED an enabled currency in the system?",
      "fields": [
        "name",
        "enabled",
        "currency_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, enabled, currency_name FROM [BT]tabCurrency[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Currency"
      ],
      "question": "What's the conversion rate between USD and INR?",
      "fields": [
        "name",
        "conversion_rate",
        "currency_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, conversion_rate, currency_name FROM [BT]tabCurrency[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "What GST number is saved for customer 'Globe Enterprises'?",
      "fields": [
        "name",
        "tax_id",
        "customer_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_id, customer_name FROM [BT]tabCustomer[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quotation"
      ],
      "question": "What is the total amount quoted to customer 'GreenMart' in the latest quotation?",
      "fields": [
        "name",
        "party_name",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, party_name, grand_total FROM [BT]tabQuotation[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "When does the quotation from 'Raj Suppliers' expire?",
      "fields": [
        "name",
        "supplier",
        "valid_till"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, valid_till FROM [BT]tabSupplier Quotation[BT] ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Mode of Payment"
      ],
      "question": "Is UPI listed as an active mode of payment in the system?",
      "fields": [
        "name",
        "mode_of_payment",
        "enabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, mode_of_payment, enabled FROM [BT]tabMode of Payment[BT] of Payment[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Taxes and Charges"
      ],
      "question": "What tax rate is applied for inter-state sales in our current tax settings?",
      "fields": [
        "name",
        "tax_category",
        "rate",
        "account_head"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_category, rate, account_head FROM [BT]tabSales Taxes and Charges[BT] Taxes and Charges[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Can you show me the details of the purchase order created for the vendor 'Vendora Public'?",
      "fields": [
        "name",
        "supplier",
        "transaction_date",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, transaction_date, status FROM [BT]tabPurchase Order[BT] Order[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Please show me all the purchase invoices that were recorded last month.",
      "fields": [
        "name",
        "posting_date",
        "supplier",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, supplier, status FROM [BT]tabPurchase Invoice[BT] ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Can you show me all delivery notes made in April 2025?",
      "fields": [
        "name",
        "posting_date",
        "customer",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, customer, grand_total FROM [BT]tabDelivery Note[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "What warehouse was used for the delivery note DN-00023?",
      "fields": [
        "name",
        "set_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, set_warehouse FROM [BT]tabDelivery Note[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "What is the commission rate and territory for Sales Partner 'Crimson Fig Traders'?",
      "fields": [
        "name",
        "commission_rate",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, commission_rate, territory FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List all sales partners shown on the website.",
      "fields": [
        "name",
        "partner_name",
        "territory",
        "show_in_website"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name, territory, show_in_website FROM [BT]tabSales Partner[BT] Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Contact"
      ],
      "question": "Get the email and phone number of the contact named 'Sana Shaikh'.",
      "fields": [
        "name",
        "email_id",
        "phone"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, email_id, phone FROM [BT]tabContact[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Contact"
      ],
      "question": "Can you list all contacts created in the last 7 days?",
      "fields": [
        "name",
        "first_name",
        "last_name",
        "email_id",
        "phone"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, first_name, last_name, email_id, phone FROM [BT]tabContact[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Address"
      ],
      "question": "Show all customer addresses located in Dubai.",
      "fields": [
        "name",
        "address_title",
        "city",
        "address_line1",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, address_title, city, address_line1, customer FROM [BT]tabAddress[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Project"
      ],
      "question": "How many projects are under budget this quarter?",
      "fields": [
        "name",
        "total_costing_amount",
        "total_billable_amount",
        "expected_start_date",
        "expected_end_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS under_budget_projects FROM [BT]tabProject[BT] WHERE QUARTER(expected_start_date) = QUARTER(CURDATE()) AND YEAR(expected_start_date) = YEAR(CURDATE()) AND total_costing_amount < total_billable_amount', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Task"
      ],
      "question": "List tasks assigned but not started.",
      "fields": [
        "name",
        "subject",
        "project",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, subject, project, status FROM [BT]tabTask[BT] WHERE status = \"Open\" OR status = \"Not Started\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "What is the average delivery time for sales orders?",
      "fields": [
        "name",
        "transaction_date",
        "delivery_date"
      ]
    },
    "output": "frappe.db.sql('SELECT AVG(DATEDIFF(delivery_date, transaction_date)) AS avg_delivery_days FROM [BT]tabSales Order[BT] WHERE delivery_date IS NOT NULL', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "How many sales orders are delayed beyond expected delivery date?",
      "fields": [
        "name",
        "delivery_date",
        "status",
        "delivery_status"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS delayed_orders FROM [BT]tabSales Order[BT] WHERE delivery_status != \"Delivered\" AND delivery_date < CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Which sales orders have the highest discount applied?",
      "fields": [
        "name",
        "discount_amount",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT name, discount_amount, grand_total FROM [BT]tabSales Order[BT] WHERE discount_amount IS NOT NULL ORDER BY discount_amount DESC LIMIT 10', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "List all customers with pending sales orders.",
      "fields": [
        "name",
        "customer",
        "customer_name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT DISTINCT customer, customer_name FROM [BT]tabSales Order[BT] WHERE status NOT IN (\"Completed\", \"Cancelled\", \"Closed\")', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "What is the monthly sales trend for the last year?",
      "fields": [
        "name",
        "transaction_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT DATE_FORMAT(transaction_date, \"%Y-%m\") AS month, SUM(grand_total) AS total_sales FROM [BT]tabSales Order[BT] WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 12 MONTH) GROUP BY month ORDER BY month', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which sales team members generated the highest revenue last quarter?",
      "fields": [
        "name",
        "owner",
        "grand_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT owner, SUM(grand_total) AS total_revenue FROM [BT]tabSales Invoice[BT] WHERE QUARTER(posting_date) = QUARTER(CURDATE() - INTERVAL 1 QUARTER) AND YEAR(posting_date) = YEAR(CURDATE() - INTERVAL 1 QUARTER) GROUP BY owner ORDER BY total_revenue DESC', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the total tax collected from sales invoices this year?",
      "fields": [
        "name",
        "total_taxes_and_charges",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT SUM(total_taxes_and_charges) AS total_tax FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "How many sales orders were created last month?",
      "fields": [
        "name",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS sales_orders_last_month FROM [BT]tabSales Order[BT] WHERE MONTH(transaction_date) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(transaction_date) = YEAR(CURDATE() - INTERVAL 1 MONTH)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customer contributed the highest sales revenue last year?",
      "fields": [
        "name",
        "customer",
        "customer_name",
        "grand_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT customer, customer_name, SUM(grand_total) AS total_revenue FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE() - INTERVAL 1 YEAR) GROUP BY customer, customer_name ORDER BY total_revenue DESC LIMIT 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "What is the current status of sales orders (Pending, Delivered, Cancelled)?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT status, COUNT(name) AS count FROM [BT]tabSales Order[BT] GROUP BY status', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all sales invoices with outstanding payments.",
      "fields": [
        "name",
        "customer",
        "customer_name",
        "grand_total",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, customer, customer_name, grand_total, outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE outstanding_amount > 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many sales returns were processed this quarter?",
      "fields": [
        "name",
        "is_return",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS sales_returns FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND QUARTER(posting_date) = QUARTER(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "What is the average order value per customer?",
      "fields": [
        "name",
        "customer",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT customer, AVG(grand_total) AS avg_order_value FROM [BT]tabSales Order[BT] GROUP BY customer', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "List all canceled sales orders and reasons for cancellation.",
      "fields": [
        "name",
        "customer",
        "customer_name",
        "status",
        "remarks"
      ]
    },
    "output": "frappe.db.sql('SELECT name, customer, customer_name, status, remarks FROM [BT]tabSales Order[BT] WHERE status = \"Cancelled\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "What is the average purchase order value?",
      "fields": [
        "name",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT AVG(grand_total) AS avg_po_value FROM [BT]tabPurchase Order[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "How many purchase invoices are overdue for payment?",
      "fields": [
        "name",
        "due_date",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS overdue_invoices FROM [BT]tabPurchase Invoice[BT] WHERE due_date < CURDATE() AND outstanding_amount > 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List purchase orders pending receipt of goods.",
      "fields": [
        "name",
        "supplier",
        "status",
        "per_received"
      ]
    },
    "output": "frappe.db.sql('SELECT name, supplier, status, per_received FROM [BT]tabPurchase Order[BT] WHERE per_received < 100 AND status NOT IN (\"Cancelled\", \"Closed\")', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What is the total purchase return value this year?",
      "fields": [
        "name",
        "grand_total",
        "posting_date",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('SELECT SUM(grand_total) AS total_return_value FROM [BT]tabPurchase Invoice[BT] WHERE is_return = 1 AND YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "How many purchase orders were created last month?",
      "fields": [
        "name",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS po_count_last_month FROM [BT]tabPurchase Order[BT] WHERE MONTH(transaction_date) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(transaction_date) = YEAR(CURDATE() - INTERVAL 1 MONTH)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "How many items are currently in stock?",
      "fields": [
        "name",
        "total_projected_qty"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS items_in_stock FROM [BT]tabItem[BT] WHERE total_projected_qty > 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List all items with their item code and stock quantity.",
      "fields": [
        "name",
        "item_code",
        "total_projected_qty"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, total_projected_qty FROM [BT]tabItem[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "What is the stock quantity of item ITEM-0001?",
      "fields": [
        "name",
        "item_code",
        "total_projected_qty"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, total_projected_qty FROM [BT]tabItem[BT] WHERE item_code = \"ITEM-0001\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which item has the highest stock quantity?",
      "fields": [
        "name",
        "item_code",
        "total_projected_qty"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, total_projected_qty FROM [BT]tabItem[BT] ORDER BY total_projected_qty DESC LIMIT 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "How many items are below the reorder level?",
      "fields": [
        "name",
        "total_projected_qty",
        "safety_stock"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS below_reorder FROM [BT]tabItem[BT] WHERE total_projected_qty < safety_stock', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List all items that were added this month.",
      "fields": [
        "name",
        "item_code",
        "creation"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, creation FROM [BT]tabItem[BT] WHERE MONTH(creation) = MONTH(CURDATE()) AND YEAR(creation) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "What is the average selling price of items?",
      "fields": [
        "name",
        "standard_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT AVG(standard_rate) AS avg_selling_price FROM [BT]tabItem[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which item has the highest selling price?",
      "fields": [
        "name",
        "item_code",
        "standard_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, standard_rate FROM [BT]tabItem[BT] ORDER BY standard_rate DESC LIMIT 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "How many items have no stock?",
      "fields": [
        "name",
        "total_projected_qty"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS no_stock_items FROM [BT]tabItem[BT] WHERE total_projected_qty <= 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List all discontinued items.",
      "fields": [
        "name",
        "item_code",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, disabled FROM [BT]tabItem[BT] WHERE disabled = 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "What is the total value of all purchase orders this month?",
      "fields": [
        "name",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT SUM(grand_total) AS total_value_this_month FROM [BT]tabPurchase Order[BT] WHERE MONTH(transaction_date) = MONTH(CURDATE()) AND YEAR(transaction_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List all purchase orders with their supplier and grand total.",
      "fields": [
        "name",
        "supplier",
        "supplier_name",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT name, supplier, supplier_name, grand_total FROM [BT]tabPurchase Order[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "What is the status of purchase order PO-0007?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, status FROM [BT]tabPurchase Order[BT] WHERE name = \"PO-0007\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "How many purchase orders were received in the last quarter?",
      "fields": [
        "name",
        "per_received",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS received_last_quarter FROM [BT]tabPurchase Order[BT] WHERE per_received = 100 AND QUARTER(transaction_date) = QUARTER(CURDATE() - INTERVAL 1 QUARTER) AND YEAR(transaction_date) = YEAR(CURDATE() - INTERVAL 1 QUARTER)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Which supplier has the highest total purchase order amount this year?",
      "fields": [
        "name",
        "supplier",
        "supplier_name",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT supplier, supplier_name, SUM(grand_total) AS total_amount FROM [BT]tabPurchase Order[BT] WHERE YEAR(transaction_date) = YEAR(CURDATE()) GROUP BY supplier, supplier_name ORDER BY total_amount DESC LIMIT 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "How many purchase orders were cancelled last month?",
      "fields": [
        "name",
        "status",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS cancelled_last_month FROM [BT]tabPurchase Order[BT] WHERE status = \"Cancelled\" AND MONTH(transaction_date) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(transaction_date) = YEAR(CURDATE() - INTERVAL 1 MONTH)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "What is the average purchase order value this year?",
      "fields": [
        "name",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT AVG(grand_total) AS avg_po_value_this_year FROM [BT]tabPurchase Order[BT] WHERE YEAR(transaction_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List all purchase orders created today.",
      "fields": [
        "name",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, transaction_date FROM [BT]tabPurchase Order[BT] WHERE transaction_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "How many purchase orders are pending receipt?",
      "fields": [
        "name",
        "per_received"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS pending_receipt FROM [BT]tabPurchase Order[BT] WHERE per_received < 100 AND status NOT IN (\"Cancelled\", \"Closed\")', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "How many sales orders were created this month?",
      "fields": [
        "name",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS so_count_this_month FROM [BT]tabSales Order[BT] WHERE MONTH(transaction_date) = MONTH(CURDATE()) AND YEAR(transaction_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "What is the total amount for all sales orders this month?",
      "fields": [
        "name",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT SUM(grand_total) AS total_sales_this_month FROM [BT]tabSales Order[BT] WHERE MONTH(transaction_date) = MONTH(CURDATE()) AND YEAR(transaction_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "List all sales orders with their customer and grand total.",
      "fields": [
        "name",
        "customer",
        "customer_name",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT name, customer, customer_name, grand_total FROM [BT]tabSales Order[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "What is the status of sales order SO-0003?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, status FROM [BT]tabSales Order[BT] WHERE name = \"SO-0003\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "How many sales orders were delivered last month?",
      "fields": [
        "name",
        "delivery_status",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS delivered_last_month FROM [BT]tabSales Order[BT] WHERE delivery_status = \"Delivered\" AND MONTH(transaction_date) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(transaction_date) = YEAR(CURDATE() - INTERVAL 1 MONTH)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Which customer has the highest total sales order amount this year?",
      "fields": [
        "name",
        "customer",
        "customer_name",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT customer, customer_name, SUM(grand_total) AS total_amount FROM [BT]tabSales Order[BT] WHERE YEAR(transaction_date) = YEAR(CURDATE()) GROUP BY customer, customer_name ORDER BY total_amount DESC LIMIT 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "How many sales orders were cancelled last quarter?",
      "fields": [
        "name",
        "status",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS cancelled_last_quarter FROM [BT]tabSales Order[BT] WHERE status = \"Cancelled\" AND QUARTER(transaction_date) = QUARTER(CURDATE() - INTERVAL 1 QUARTER) AND YEAR(transaction_date) = YEAR(CURDATE() - INTERVAL 1 QUARTER)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "What is the average sales order amount this year?",
      "fields": [
        "name",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT AVG(grand_total) AS avg_so_amount_year FROM [BT]tabSales Order[BT] WHERE YEAR(transaction_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "List all sales orders created today.",
      "fields": [
        "name",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, transaction_date FROM [BT]tabSales Order[BT] WHERE transaction_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "How many sales orders are pending delivery?",
      "fields": [
        "name",
        "delivery_status"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS pending_delivery FROM [BT]tabSales Order[BT] WHERE delivery_status NOT IN (\"Delivered\", \"Cancelled\")', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What is the payment status of purchase invoices by supplier?",
      "fields": [
        "name",
        "supplier",
        "supplier_name",
        "grand_total",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT supplier, supplier_name, SUM(grand_total) AS total_invoiced, SUM(outstanding_amount) AS total_outstanding FROM [BT]tabPurchase Invoice[BT] GROUP BY supplier, supplier_name', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List purchase orders with partial delivery.",
      "fields": [
        "name",
        "supplier",
        "status",
        "per_received"
      ]
    },
    "output": "frappe.db.sql('SELECT name, supplier, status, per_received FROM [BT]tabPurchase Order[BT] WHERE per_received > 0 AND per_received < 100', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Project"
      ],
      "question": "How many new projects were initiated last quarter?",
      "fields": [
        "name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS new_projects FROM [BT]tabProject[BT] WHERE QUARTER(creation) = QUARTER(CURDATE() - INTERVAL 1 QUARTER) AND YEAR(creation) = YEAR(CURDATE() - INTERVAL 1 QUARTER)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Project"
      ],
      "question": "What is the average project delay time?",
      "fields": [
        "name",
        "expected_end_date",
        "actual_end_date"
      ]
    },
    "output": "frappe.db.sql('SELECT AVG(DATEDIFF(actual_end_date, expected_end_date)) AS avg_delay_days FROM [BT]tabProject[BT] WHERE actual_end_date > expected_end_date', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Which purchase orders are pending approval?",
      "fields": [
        "name",
        "status",
        "transaction_date",
        "supplier",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT name, status, transaction_date, supplier, supplier_name FROM [BT]tabPurchase Order[BT] WHERE status = 'Pending Approval'\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "What is the monthly purchase volume trend for key suppliers?",
      "fields": [
        "transaction_date",
        "supplier",
        "supplier_name",
        "total_qty"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT transaction_date, supplier, supplier_name, total_qty FROM [BT]tabPurchase Order[BT] WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR) ORDER BY transaction_date\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List all purchase invoices paid late in the last quarter.",
      "fields": [
        "name",
        "posting_date",
        "due_date",
        "paid_amount",
        "status"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT name, posting_date, due_date, paid_amount, status FROM [BT]tabPurchase Invoice[BT] WHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND posting_date > due_date AND status = 'Paid'\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "How many purchase orders are currently in draft status?",
      "fields": [
        "name",
        "status",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT name, status, transaction_date FROM [BT]tabPurchase Order[BT] WHERE status = 'Draft'\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "What is the lead time variability for recent purchase orders?",
      "fields": [
        "transaction_date",
        "schedule_date",
        "supplier"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT transaction_date, schedule_date, supplier FROM [BT]tabPurchase Order[BT] WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Which suppliers have the best on-time delivery rates?",
      "fields": [
        "supplier",
        "supplier_name",
        "delivery_date",
        "transaction_date",
        "status"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT supplier, supplier_name, delivery_date, transaction_date, status FROM [BT]tabPurchase Order[BT] WHERE delivery_date <= schedule_date AND status = 'Completed'\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List the purchase orders with the highest discounts applied.",
      "fields": [
        "name",
        "discount_amount",
        "additional_discount_percentage",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT name, discount_amount, additional_discount_percentage, transaction_date FROM [BT]tabPurchase Order[BT] ORDER BY discount_amount DESC LIMIT 10\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "How many purchase returns were processed last year?",
      "fields": [
        "name",
        "is_return",
        "posting_date",
        "supplier"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT name, is_return, posting_date, supplier FROM [BT]tabPurchase Invoice[BT] WHERE is_return = 1 AND posting_date >= DATE_SUB(CURDATE(), INTERVAL 1 YEAR)\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Which sales orders have been delayed beyond their delivery dates?",
      "fields": [
        "name",
        "transaction_date",
        "delivery_date",
        "status"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT name, transaction_date, delivery_date, status FROM [BT]tabSales Order[BT] WHERE delivery_date < CURDATE() AND status NOT IN ('Delivered', 'Cancelled')\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show sales invoices that were fully paid within the last month.",
      "fields": [
        "name",
        "posting_date",
        "paid_amount",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT name, posting_date, paid_amount, grand_total FROM [BT]tabSales Invoice[BT] WHERE paid_amount >= grand_total AND posting_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE()\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Which customers have the highest number of cancelled sales orders?",
      "fields": [
        "customer",
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT customer, COUNT(name) AS cancelled_orders FROM [BT]tabSales Order[BT] WHERE status = 'Cancelled' GROUP BY customer ORDER BY cancelled_orders DESC LIMIT 10\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "List the top 10 products by sales revenue this quarter.",
      "fields": [
        "items",
        "transaction_date",
        "total"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT item_code, SUM(amount) AS total_revenue FROM [BT]tabSales Order Item[BT] JOIN [BT]tabSales Order[BT] ON [BT]tabSales Order Item[BT].parent = [BT]tabSales Order[BT].name WHERE transaction_date BETWEEN DATE_FORMAT(CURDATE(), '%Y-%m-01') AND LAST_DAY(CURDATE()) GROUP BY item_code ORDER BY total_revenue DESC LIMIT 10\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "How many sales orders were amended or updated last month?",
      "fields": [
        "name",
        "amended_from",
        "modified"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT COUNT(name) AS amended_orders FROM [BT]tabSales Order[BT] WHERE amended_from IS NOT NULL AND MONTH(modified) = MONTH(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) AND YEAR(modified) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 MONTH))\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "What is the average time between sales order creation and delivery?",
      "fields": [
        "transaction_date",
        "delivery_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT AVG(DATEDIFF(delivery_date, transaction_date)) AS avg_days_to_delivery FROM [BT]tabSales Order[BT] WHERE delivery_date IS NOT NULL AND transaction_date IS NOT NULL\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quotation"
      ],
      "question": "Can you show the sales quotation Q-44556 for Bright Foods?",
      "fields": [
        "name",
        "items",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT name, items, grand_total FROM [BT]tabQuotation[BT] WHERE name = \"Q-44556\" AND customer = \"Bright Foods\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quotation"
      ],
      "question": "What was the price for GreenTech Industries in quotation Q-77899?",
      "fields": [
        "name",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT name, grand_total FROM [BT]tabQuotation[BT] WHERE name = \"Q-77899\" AND customer = \"GreenTech Industries\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quotation"
      ],
      "question": "When does sales quotation Q-22345 expire for Innovate Ltd?",
      "fields": [
        "name",
        "valid_till"
      ]
    },
    "output": "frappe.db.sql('SELECT name, valid_till FROM [BT]tabQuotation[BT] WHERE name = \"Q-22345\" AND customer = \"Innovate Ltd\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quotation"
      ],
      "question": "Has sales quotation Q-33456 expired for ModernTech Supplies?",
      "fields": [
        "name",
        "valid_till"
      ]
    },
    "output": "frappe.db.sql('SELECT name, valid_till FROM [BT]tabQuotation[BT] WHERE name = \"Q-33456\" AND customer = \"ModernTech Supplies\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "What is the email address of customer John Doe?",
      "fields": [
        "name",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('SELECT name, email_id FROM [BT]tabCustomer[BT] WHERE customer_name = \"John Doe\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "When was customer falikn Corp created in the system?",
      "fields": [
        "name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('SELECT name, creation FROM [BT]tabCustomer[BT] WHERE customer_name = \"falikn Corp\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "What is the credit limit assigned to customer Fresh Mart?",
      "fields": [
        "name",
        "credit_limits"
      ]
    },
    "output": "frappe.db.sql('SELECT name, credit_limits FROM [BT]tabCustomer[BT] WHERE customer_name = \"Fresh Mart\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "What is the primary contact number for customer Zenith Traders?",
      "fields": [
        "name",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('SELECT name, mobile_no FROM [BT]tabCustomer[BT] WHERE customer_name = \"Zenith Traders\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "What is the default currency used by customer Alpha Foods?",
      "fields": [
        "name",
        "default_currency"
      ]
    },
    "output": "frappe.db.sql('SELECT name, default_currency FROM [BT]tabCustomer[BT] WHERE customer_name = \"Alpha Foods\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Person"
      ],
      "question": "What is the email ID of sales person Ahmed Khan?",
      "fields": [
        "name",
        "employee"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee FROM [BT]tabSales Person[BT] WHERE sales_person_name = \"Ahmed Khan\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Person"
      ],
      "question": "When was sales person Jason Lee added to the system?",
      "fields": [
        "name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('SELECT name, creation FROM [BT]tabSales Person[BT] WHERE sales_person_name = \"Jason Lee\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Person"
      ],
      "question": "What is the employee ID of sales person Maria Gomez?",
      "fields": [
        "name",
        "employee"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee FROM [BT]tabSales Person[BT] WHERE sales_person_name = \"Maria Gomez\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Person"
      ],
      "question": "What is the territory assigned to sales person Ramesh Patel?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM [BT]tabSales Person[BT] WHERE sales_person_name = \"Ramesh Patel\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "When was delivery note DN-00045 submitted?",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, posting_date FROM [BT]tabDelivery Note[BT] WHERE name = \"DN-00045\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "What is the total quantity in delivery note DN-00123?",
      "fields": [
        "name",
        "total_qty"
      ]
    },
    "output": "frappe.db.sql('SELECT name, total_qty FROM [BT]tabDelivery Note[BT] WHERE name = \"DN-00123\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Which customer was delivery note DN-00321 issued to?",
      "fields": [
        "name",
        "customer"
      ]
    },
    "output": "frappe.db.sql('SELECT name, customer FROM [BT]tabDelivery Note[BT] WHERE name = \"DN-00321\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "What is the status of delivery note DN-00210?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, status FROM [BT]tabDelivery Note[BT] WHERE name = \"DN-00210\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Who created delivery note DN-00456?",
      "fields": [
        "name",
        "owner"
      ]
    },
    "output": "frappe.db.sql('SELECT name, owner FROM [BT]tabDelivery Note[BT] WHERE name = \"DN-00456\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "What is the stock unit of item Mango Juice?",
      "fields": [
        "name",
        "stock_uom"
      ]
    },
    "output": "frappe.db.sql('SELECT name, stock_uom FROM [BT]tabItem[BT] WHERE item_name = \"Mango Juice\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "What is the standard selling rate of item Organic Honey?",
      "fields": [
        "name",
        "standard_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, standard_rate FROM [BT]tabItem[BT] WHERE item_name = \"Organic Honey\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "What is the default warehouse for item Premium Olive Oil?",
      "fields": [
        "name",
        "set_warehouse"
      ]
    },
    "output": "frappe.db.sql('SELECT name, set_warehouse FROM [BT]tabItem[BT] WHERE item_name = \"Premium Olive Oil\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "What brand is assigned to item Fresh Apple Cider?",
      "fields": [
        "name",
        "brand"
      ]
    },
    "output": "frappe.db.sql('SELECT name, brand FROM [BT]tabItem[BT] WHERE item_name = \"Fresh Apple Cider\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "When was item Golden Syrup last updated?",
      "fields": [
        "name",
        "modified"
      ]
    },
    "output": "frappe.db.sql('SELECT name, modified FROM [BT]tabItem[BT] WHERE item_name = \"Golden Syrup\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Price List"
      ],
      "question": "What is the currency used in the Standard Selling price list?",
      "fields": [
        "name",
        "currency"
      ]
    },
    "output": "frappe.db.sql('SELECT name, currency FROM [BT]tabPrice List[BT] WHERE name = \"Standard Selling\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Price List"
      ],
      "question": "When was the Wholesale Price List last modified?",
      "fields": [
        "name",
        "modified"
      ]
    },
    "output": "frappe.db.sql('SELECT name, modified FROM [BT]tabPrice List[BT] WHERE name = \"Wholesale Price List\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Price List"
      ],
      "question": "Is the Export Price List enabled?",
      "fields": [
        "name",
        "enabled"
      ]
    },
    "output": "frappe.db.sql('SELECT name, enabled FROM [BT]tabPrice List[BT] WHERE name = \"Export Price List\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Price List"
      ],
      "question": "What is the buying/selling type of the Dealer Rate List?",
      "fields": [
        "name",
        "buying",
        "selling"
      ]
    },
    "output": "frappe.db.sql('SELECT name, buying, selling FROM [BT]tabPrice List[BT] WHERE name = \"Dealer Rate List\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Price List"
      ],
      "question": "What is the territory assigned to the Retail Price List?",
      "fields": [
        "name",
        "countries"
      ]
    },
    "output": "frappe.db.sql('SELECT name, countries FROM [BT]tabPrice List[BT] WHERE name = \"Retail Price List\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "How is lead 'L-2023-101' progressing?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, status FROM [BT]tabLead[BT] WHERE name = \"L-2023-101\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "Show me the qualified leads from the 'Trade Show'.",
      "fields": [
        "name",
        "lead_name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, lead_name, status FROM [BT]tabLead[BT] WHERE source = \"Trade Show\" AND status = \"Qualified\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "Which leads came from the 'Tech Conference'?",
      "fields": [
        "name",
        "lead_name",
        "source"
      ]
    },
    "output": "frappe.db.sql('SELECT name, lead_name, source FROM [BT]tabLead[BT] WHERE source = \"Tech Conference\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "Who are the new leads this week?",
      "fields": [
        "name",
        "lead_name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('SELECT name, lead_name, creation FROM [BT]tabLead[BT] WHERE creation >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "Which new leads did we get from 'Summer Discount'?",
      "fields": [
        "name",
        "lead_name",
        "source"
      ]
    },
    "output": "frappe.db.sql('SELECT name, lead_name, source FROM [BT]tabLead[BT] WHERE source = \"Summer Discount\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "How many new leads did we get last month from 'Global Expo'?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS lead_count FROM [BT]tabLead[BT] WHERE source = \"Global Expo\" AND creation BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "How many leads did we get last month from 'Summer Promo'?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS lead_count FROM [BT]tabLead[BT] WHERE source = \"Summer Promo\" AND creation BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "Show me all leads from 'Product Launch Event'.",
      "fields": [
        "name",
        "lead_name",
        "source"
      ]
    },
    "output": "frappe.db.sql('SELECT name, lead_name, source FROM [BT]tabLead[BT] WHERE source = \"Product Launch Event\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "Which leads were qualified at the 'New Year Sales'?",
      "fields": [
        "name",
        "lead_name",
        "status",
        "source"
      ]
    },
    "output": "frappe.db.sql('SELECT name, lead_name, status, source FROM [BT]tabLead[BT] WHERE source = \"New Year Sales\" AND status = \"Qualified\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "What\u2019s the status of the leads assigned to 'Mohammed Al-Mansoori'?",
      "fields": [
        "name",
        "lead_name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, lead_name, status FROM [BT]tabLead[BT] WHERE lead_owner = \"Mohammed Al-Mansoori\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "How are the leads assigned to 'Bonanza Launch' doing?",
      "fields": [
        "name",
        "lead_name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, lead_name, status FROM [BT]tabLead[BT] WHERE source = \"Bonanza Launch\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "What leads have the email 'aysha.razak@example.com' from 'Next-Gen Product Launch'?",
      "fields": [
        "name",
        "lead_name",
        "email_id",
        "campaign_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, lead_name, email_id, campaign_name FROM [BT]tabLead[BT] WHERE email_id = \"aysha.razak@example.com\" AND campaign_name = \"Next-Gen Product Launch\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "How many leads from 'Trade Show' are still marked as 'New'?",
      "fields": [
        "name",
        "campaign_name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS new_leads FROM [BT]tabLead[BT] WHERE campaign_name = \"Trade Show\" AND status = \"New\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "Which leads from 'Product Launch Event' have a high annual revenue?",
      "fields": [
        "name",
        "lead_name",
        "campaign_name",
        "annual_revenue"
      ]
    },
    "output": "frappe.db.sql('SELECT name, lead_name, campaign_name, annual_revenue FROM [BT]tabLead[BT] WHERE campaign_name = \"Product Launch Event\" AND annual_revenue > 1000000', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "How does this month\u2019s lead generation compare to last month\u2019s for 'Tech Innovators Expo'?",
      "fields": [
        "name",
        "campaign_name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('SELECT name, campaign_name, creation FROM [BT]tabLead[BT] WHERE campaign_name = \"Tech Innovators Expo\" AND creation BETWEEN DATE_FORMAT(CURDATE(), \"%Y-%m-01\") AND LAST_DAY(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "What\u2019s the difference in conversion rates between leads from 'Online Webinar' and 'Summer Sales'?",
      "fields": [
        "name",
        "campaign_name",
        "qualification_status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, campaign_name, qualification_status FROM [BT]tabLead[BT] WHERE campaign_name IN (\"Online Webinar\", \"Summer Sales\")', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "Can you list the currently qualified leads from 'Tech Innovators Expo'?",
      "fields": [
        "name",
        "lead_name",
        "campaign_name",
        "qualification_status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, lead_name, campaign_name, qualification_status FROM [BT]tabLead[BT] WHERE campaign_name = \"Tech Innovators Expo\" AND qualification_status = \"Qualified\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "Can you list the currently qualified leads from 'Tech Innovators Expo'?",
      "fields": [
        "name",
        "qualification_status",
        "campaign_name",
        "lead_name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, lead_name, status, campaign_name, qualification_status FROM [BT]tabLead[BT] WHERE qualification_status = \"Qualified\" AND campaign_name = \"Tech Innovators Expo\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "Are there any unqualified leads from 'Summer Sales'?",
      "fields": [
        "name",
        "qualification_status",
        "campaign_name",
        "lead_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, lead_name, qualification_status, campaign_name FROM [BT]tabLead[BT] WHERE qualification_status = \"Unqualified\" AND campaign_name = \"Summer Sales\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "Show me the leads created in the last two weeks for 'Tech Innovators Expo'.",
      "fields": [
        "name",
        "lead_name",
        "creation",
        "campaign_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, lead_name, creation, campaign_name FROM [BT]tabLead[BT] WHERE campaign_name = \"Tech Innovators Expo\" AND creation >= DATE_SUB(CURDATE(), INTERVAL 14 DAY)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "How many leads were generated last month from the 'Introducing the Future' campaign?",
      "fields": [
        "name",
        "campaign_name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS lead_count FROM [BT]tabLead[BT] WHERE campaign_name = \"Introducing the Future\" AND creation BETWEEN DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 MONTH), \"%Y-%m-01\") AND LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 1 MONTH))', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Who still owes us payments from SteelWorks Ltd.?",
      "fields": [
        "name",
        "party",
        "party_type",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, party_type, outstanding_amount FROM [BT]tabPayment Entry[BT] WHERE party_type = \"Customer\" AND party = \"SteelWorks Ltd.\" AND outstanding_amount > 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Did we receive payment from GreenTech Innovations for invoice 'GT-302'?",
      "fields": [
        "name",
        "party",
        "references"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, references FROM [BT]tabPayment Entry[BT] WHERE party = \"GreenTech Innovations\" AND JSON_CONTAINS(references, \"{\\\\\"reference_name\\\\\": \\\\\\\"GT-302\\\\\"}\")', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "What's the outstanding amount for John Williams?",
      "fields": [
        "name",
        "party",
        "party_type",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, party_type, outstanding_amount FROM [BT]tabPayment Entry[BT] WHERE party_type = \"Customer\" AND party = \"John Williams\" AND outstanding_amount > 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Have we received all the payments we\u2019re owed for invoices 'INV-501' and 'INV-502'?",
      "fields": [
        "name",
        "references"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, references FROM [BT]tabPayment Entry[BT] WHERE JSON_EXTRACT(references, \"$.reference_name\") IN (\"INV-501\", \"INV-502\")', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Did we pay Fresh Supplies for invoice 'FS-123'?",
      "fields": [
        "name",
        "party",
        "references",
        "payment_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, references, payment_type, paid_amount FROM [BT]tabPayment Entry[BT] WHERE party = \"Fresh Supplies\" AND JSON_CONTAINS(references, \"{\\\\\"reference_name\\\\\": \\\\\\\"FS-123\\\\\"}\") AND payment_type = \"Pay\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Which invoices still need to be paid for Pinnacle Industries?",
      "fields": [
        "name",
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, references, outstanding_amount FROM [BT]tabPayment Entry[BT] WHERE party = \"Pinnacle Industries\" AND outstanding_amount > 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Everyone paid up yet for invoice 'INV-103' from Horizon Enterprises?",
      "fields": [
        "name",
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, references, outstanding_amount FROM [BT]tabPayment Entry[BT] WHERE party = \"Horizon Enterprises\" AND JSON_CONTAINS(references, \"{\\\\\"reference_name\\\\\": \\\\\\\"INV-103\\\\\"}\")', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Who still owes us payments for 'INV-105' from Tech Solutions?",
      "fields": [
        "name",
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, references, outstanding_amount FROM [BT]tabPayment Entry[BT] WHERE party = \"Tech Solutions\" AND JSON_CONTAINS(references, \"{\\\\\"reference_name\\\\\": \\\\\\\"INV-105\\\\\"}\") AND outstanding_amount > 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Did we pay Fresh Foods their invoice 'FF-789'?",
      "fields": [
        "name",
        "party",
        "references",
        "payment_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, references, payment_type, paid_amount FROM [BT]tabPayment Entry[BT] WHERE party = \"Fresh Foods\" AND JSON_CONTAINS(references, \"{\\\\\"reference_name\\\\\": \\\\\\\"FF-789\\\\\"}\") AND payment_type = \"Pay\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Who hasn't paid their bill yet for invoice 'INV-110' from Elite Traders?",
      "fields": [
        "name",
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, references, outstanding_amount FROM [BT]tabPayment Entry[BT] WHERE party = \"Elite Traders\" AND JSON_CONTAINS(references, \"{\\\\\"reference_name\\\\\": \\\\\\\"INV-110\\\\\"}\") AND outstanding_amount > 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Who owes us money from Finovate Solutions for 'INV-113'?",
      "fields": [
        "name",
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, references, outstanding_amount FROM [BT]tabPayment Entry[BT] WHERE party = \"Finovate Solutions\" AND JSON_CONTAINS(references, \"{\\\\\"reference_name\\\\\": \\\\\\\"INV-113\\\\\"}\") AND outstanding_amount > 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Which bills still haven\u2019t been paid from customer 'Quantum Industries'?",
      "fields": [
        "name",
        "party",
        "outstanding_amount",
        "references"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, references, outstanding_amount FROM [BT]tabPayment Entry[BT] WHERE party = \"Quantum Industries\" AND outstanding_amount > 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "What\u2019s the total outstanding amount for invoice 'INV-207' from InnovateTech?",
      "fields": [
        "name",
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, references, outstanding_amount FROM [BT]tabPayment Entry[BT] WHERE party = \"InnovateTech\" AND JSON_CONTAINS(references, \"{\\\\\"reference_name\\\\\": \\\\\\\"INV-207\\\\\"}\")', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Did we receive payment from Urban Mart Ltd for invoice 'UM-123'?",
      "fields": [
        "name",
        "party",
        "references",
        "payment_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, references, paid_amount, payment_type FROM [BT]tabPayment Entry[BT] WHERE party = \"Urban Mart Ltd\" AND JSON_CONTAINS(references, \"{\\\\\"reference_name\\\\\": \\\\\\\"UM-123\\\\\"}\") AND payment_type = \"Receive\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Has everyone paid their bills for invoices 'INV-101' and 'INV-202' from Business Solutions?",
      "fields": [
        "name",
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM [BT]tabPayment Entry[BT] WHERE party = \"Business Solutions\" AND JSON_EXTRACT(references, \"$.reference_name\") IN (\"INV-101\", \"INV-202\") AND outstanding_amount <= 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Are there any overdue payments for 'TechnoWorks Ltd'?",
      "fields": [
        "name",
        "party",
        "outstanding_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, posting_date, outstanding_amount FROM [BT]tabPayment Entry[BT] WHERE party = \"TechnoWorks Ltd\" AND outstanding_amount > 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Did we get paid by XYZ Corp for invoice 'XYZ-789'?",
      "fields": [
        "name",
        "party",
        "references",
        "payment_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, references, paid_amount, payment_type FROM [BT]tabPayment Entry[BT] WHERE party = \"XYZ Corp\" AND JSON_CONTAINS(references, \"{\\\\\"reference_name\\\\\": \\\\\\\"XYZ-789\\\\\"}\") AND payment_type = \"Receive\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Have we settled the bill with the vendor 'Fresh Supplies' for invoice 'FS-501'?",
      "fields": [
        "name",
        "party",
        "references",
        "payment_type",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM [BT]tabPayment Entry[BT] WHERE party = \"Fresh Supplies\" AND JSON_CONTAINS(references, \"{\\\\\"reference_name\\\\\": \\\\\\\"FS-501\\\\\"}\") AND payment_type = \"Pay\" AND outstanding_amount <= 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "How much does John Williams still owe us?",
      "fields": [
        "name",
        "party",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, outstanding_amount FROM [BT]tabPayment Entry[BT] WHERE party = \"John Williams\" AND outstanding_amount > 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Have we received all payments for invoices 'INV-501' and 'INV-502' this month?",
      "fields": [
        "name",
        "references",
        "status",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status FROM [BT]tabPayment Entry[BT] WHERE JSON_EXTRACT(references, \"$.reference_name\") IN (\"INV-501\", \"INV-502\") AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Did we pay Fresh Supplies the full amount for invoice 'FS-123'?",
      "fields": [
        "name",
        "party",
        "references",
        "paid_amount",
        "base_total_allocated_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, paid_amount, base_total_allocated_amount FROM [BT]tabPayment Entry[BT] WHERE party = \"Fresh Supplies\" AND JSON_CONTAINS(references, \"{\\\\\"reference_name\\\\\": \\\\\\\"FS-123\\\\\"}\")', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Which invoices are unpaid for Pinnacle Industries between 'INV-101' and 'INV-105'?",
      "fields": [
        "name",
        "party",
        "references",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, references FROM [BT]tabPayment Entry[BT] WHERE party = \"Pinnacle Industries\" AND JSON_EXTRACT(references, \"$.reference_name\") IN (\"INV-101\", \"INV-102\", \"INV-103\", \"INV-104\", \"INV-105\") AND status != \"Paid\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Has everyone paid up yet for invoice 'INV-103' from Horizon Enterprises?",
      "fields": [
        "name",
        "party",
        "references",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, status FROM [BT]tabPayment Entry[BT] WHERE party = \"Horizon Enterprises\" AND JSON_CONTAINS(references, \"{\\\\\"reference_name\\\\\": \\\\\\\"INV-103\\\\\"}\")', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Who still owes us payments for 'INV-105' from Tech Solutions?",
      "fields": [
        "name",
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, outstanding_amount FROM [BT]tabPayment Entry[BT] WHERE party = \"Tech Solutions\" AND JSON_CONTAINS(references, \"{\\\\\"reference_name\\\\\": \\\\\\\"INV-105\\\\\"}\") AND outstanding_amount > 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "What electronics do we have?",
      "fields": [
        "item_code",
        "item_group"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code, item_group FROM [BT]tabItem[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Did we pay Fresh Foods their invoice 'FF-789'?",
      "fields": [
        "name",
        "party",
        "references",
        "paid_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, references, paid_amount FROM [BT]tabPayment Entry[BT] WHERE party = \"Fresh Foods\" AND JSON_CONTAINS(references, \"{\\\\\"reference_name\\\\\": \\\\\\\"FF-789\\\\\"}\")', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Who hasn't paid their bill yet for invoice 'INV-110' from Elite Traders?",
      "fields": [
        "name",
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, references, outstanding_amount FROM [BT]tabPayment Entry[BT] WHERE party = \"Elite Traders\" AND JSON_CONTAINS(references, \"{\\\\\"reference_name\\\\\": \\\\\\\"INV-110\\\\\"}\") AND outstanding_amount > 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Who owes us money from Finovate Solutions for 'INV-113'?",
      "fields": [
        "name",
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, references, outstanding_amount FROM [BT]tabPayment Entry[BT] WHERE party = \"Finovate Solutions\" AND JSON_CONTAINS(references, \"{\\\\\"reference_name\\\\\": \\\\\\\"INV-113\\\\\"}\") AND outstanding_amount > 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Which bills still haven\u2019t been paid from customer 'Quantum Industries'?",
      "fields": [
        "name",
        "party",
        "status",
        "references"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, references, status FROM [BT]tabPayment Entry[BT] WHERE party = \"Quantum Industries\" AND status != \"Paid\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "What\u2019s the total outstanding amount for invoice 'INV-207' from NextGen Solutions?",
      "fields": [
        "name",
        "party",
        "references",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, references, outstanding_amount FROM [BT]tabPayment Entry[BT] WHERE party = \"NextGen Solutions\" AND JSON_CONTAINS(references, \"{\\\\\"reference_name\\\\\": \\\\\\\"INV-207\\\\\"}\")', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Did we receive payment from Urban Mart Ltd for invoice 'UM-123'?",
      "fields": [
        "name",
        "party",
        "references",
        "paid_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, references, paid_amount FROM [BT]tabPayment Entry[BT] WHERE party = \"Urban Mart Ltd\" AND JSON_CONTAINS(references, \"{\\\\\"reference_name\\\\\": \\\\\\\"UM-123\\\\\"}\")', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Can you provide a list of all payment entries linked to 'Tech Innovations Ltd.' for the last quarter?",
      "fields": [
        "name",
        "party",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, party, posting_date FROM [BT]tabPayment Entry[BT] WHERE party = \"Tech Innovations Ltd.\" AND posting_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show all items with a rate of $50 or more",
      "fields": [
        "name",
        "item_name",
        "standard_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_name, standard_rate FROM [BT]tabItem[BT] WHERE standard_rate >= 50', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items are still marked as active or not closed?",
      "fields": [
        "name",
        "item_name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_name, disabled FROM [BT]tabItem[BT] WHERE disabled = 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Fetch open items with item code ITEM-1001.",
      "fields": [
        "name",
        "item_code",
        "disabled",
        "item_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, item_name, disabled FROM [BT]tabItem[BT] WHERE item_code = \"ITEM-1001\" AND disabled = 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Any open items with the item code ITEM-1002?",
      "fields": [
        "name",
        "item_code",
        "disabled",
        "item_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, item_name, disabled FROM [BT]tabItem[BT] WHERE item_code = \"ITEM-1002\" AND disabled = 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items have missing or late entries?",
      "fields": [
        "name",
        "item_code",
        "item_name",
        "end_of_life"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, item_name, end_of_life FROM [BT]tabItem[BT] WHERE end_of_life < CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "How many items did we create last month?",
      "fields": [
        "name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS item_count FROM [BT]tabItem[BT] WHERE creation BETWEEN DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 MONTH), \"%Y-%m-01\") AND LAST_DAY(DATE_SUB(CURDATE(), INTERVAL 1 MONTH))', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show me items with unit 'Nos' and open status.",
      "fields": [
        "name",
        "item_code",
        "item_name",
        "stock_uom",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, item_name, stock_uom, disabled FROM [BT]tabItem[BT] WHERE stock_uom = \"Nos\" AND disabled = 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "How much rice is in stock?",
      "fields": [
        "name",
        "item_code",
        "item_name",
        "total_projected_qty"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, item_name, total_projected_qty FROM [BT]tabItem[BT] WHERE item_name LIKE \"%rice%\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Do we have enough items in the warehouse?",
      "fields": [
        "name",
        "item_code",
        "item_name",
        "total_projected_qty"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, item_name, total_projected_qty FROM [BT]tabItem[BT] WHERE total_projected_qty <= 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Any items running low?",
      "fields": [
        "name",
        "item_code",
        "item_name",
        "total_projected_qty"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, item_name, total_projected_qty FROM [BT]tabItem[BT] WHERE total_projected_qty < 10', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items with color 'Red' and weight '500g'.",
      "fields": [
        "name",
        "item_code",
        "attributes",
        "weight_per_unit"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, attributes, weight_per_unit FROM [BT]tabItem[BT] WHERE weight_per_unit = 500 AND attributes LIKE \"%Red%\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items approaching expiry in the next 30 days.",
      "fields": [
        "name",
        "item_code",
        "end_of_life"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, item_name, end_of_life FROM [BT]tabItem[BT] WHERE end_of_life BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 30 DAY)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items have batch numbers due for recall?",
      "fields": [
        "name",
        "item_code",
        "has_batch_no"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, item_name, has_batch_no FROM [BT]tabItem[BT] WHERE has_batch_no = 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "Which items were transferred between warehouses last week?",
      "fields": [
        "name",
        "item_code",
        "warehouse",
        "qty",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, warehouse, qty, posting_date FROM [BT]tabStock Ledger Entry[BT] WHERE posting_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE() AND voucher_type = \"Stock Entry\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "How much stock was moved from warehouse A to warehouse B?",
      "fields": [
        "name",
        "item_code",
        "warehouse",
        "qty"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, qty FROM [BT]tabStock Ledger Entry[BT] WHERE from_warehouse = \"Warehouse A\" AND to_warehouse = \"Warehouse B\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items with a discount rate above 10%.",
      "fields": [
        "name",
        "item_code",
        "max_discount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, item_name, max_discount FROM [BT]tabItem[BT] WHERE max_discount > 10', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items with unit 'kg' and below reorder level.",
      "fields": [
        "name",
        "item_code",
        "stock_uom",
        "total_projected_qty"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, item_name, total_projected_qty FROM [BT]tabItem[BT] WHERE stock_uom = \"kg\" AND total_projected_qty < 10', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show all items with UOM 'kg' and a price greater than $100.",
      "fields": [
        "name",
        "item_code",
        "stock_uom",
        "standard_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, item_name, standard_rate FROM [BT]tabItem[BT] WHERE stock_uom = \"kg\" AND standard_rate > 100', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items that have been marked 'on hold' or 'delayed in delivery'.",
      "fields": [
        "name",
        "item_code",
        "item_name",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, item_name, description FROM [BT]tabItem[BT] WHERE description LIKE \"%on hold%\" OR description LIKE \"%delayed%\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "What items are requested by customer 'InkNova Corp'?",
      "fields": [
        "name",
        "item_code",
        "customer"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, item_name FROM [BT]tabItem[BT] WHERE customer = \"InkNova Corp\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "What items were ordered by 'LumenQuill Ltd' in the last month?",
      "fields": [
        "name",
        "item_code",
        "item_name",
        "customer",
        "creation"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_code, item_name FROM [BT]tabItem[BT] WHERE customer = \"LumenQuill Ltd\" AND creation >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items available in both 'Warehouse A' and 'Warehouse B'.",
      "fields": [
        "name",
        "item_code",
        "item_name"
      ]
    },
    "output": "frappe.db.sql('SELECT DISTINCT name, item_code, item_name FROM [BT]tabItem[BT] WHERE warehouse IN (\"Warehouse A\", \"Warehouse B\")', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "How many items were returned in the last month?",
      "fields": [
        "name",
        "item_code",
        "item_name",
        "creation"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, COUNT(name) AS returned_items_last_month FROM [BT]tabItem[BT] WHERE is_return = 1 AND creation >= DATE_FORMAT(DATE_SUB(CURDATE(), INTERVAL 1 MONTH), '%Y-%m-01') AND creation < DATE_FORMAT(CURDATE(), '%Y-%m-01')\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show all items transferred from 'Warehouse A' to 'Warehouse B' in the last quarter.",
      "fields": [
        "name",
        "item_code",
        "item_name"
      ]
    },
    "output": "frappe.db.sql(\"SELECT sle.name, sle.item_code, i.item_name FROM [BT]tabStock Ledger Entry[BT] sle JOIN [BT]tabItem[BT] i ON sle.item_code = i.name WHERE sle.to_warehouse = 'Warehouse B' AND sle.posting_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH)\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "What items are part of the ongoing sale with a discount of 20% or more?",
      "fields": [
        "name",
        "item_code",
        "item_name",
        "max_discount"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, item_code, item_name, max_discount FROM [BT]tabItem[BT] WHERE max_discount >= 20\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items currently on promotional offer for the 'Black Friday Sale'.",
      "fields": [
        "name",
        "item_code",
        "item_name",
        "description"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, item_code, item_name, description FROM [BT]tabItem[BT] WHERE description LIKE '%Black Friday Sale%'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items are part of the ongoing production batch?",
      "fields": [
        "name",
        "item_code",
        "item_name",
        "default_bom"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, item_code, item_name, default_bom FROM [BT]tabItem[BT] WHERE default_bom != ''\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show me items used in manufacturing 'Product X'.",
      "fields": [
        "name",
        "item_code",
        "item_name",
        "default_bom"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, item_code, item_name FROM [BT]tabItem[BT] WHERE variant_of = 'Product X'\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items were returned by 'AmberCircuit Corp' in the past 30 days?",
      "fields": [
        "name",
        "item_code",
        "customer",
        "posting_date",
        "is_return"
      ]
    },
    "output": "frappe.db.sql(\"SELECT name, item_code, customer, creation AS posting_date, is_return FROM [BT]tabItem[BT] WHERE customer = 'AmberCircuit Corp' AND is_return = 1 AND creation >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "How many employees are in the Sales department?",
      "fields": [
        "name",
        "department"
      ]
    },
    "output": "frappe.db.sql('SELECT name, COUNT(name) AS sales_department_count FROM [BT]tabEmployee[BT] WHERE department = \"Sales\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Who joined last quarter?",
      "fields": [
        "name",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, date_of_joining FROM [BT]tabEmployee[BT] WHERE date_of_joining BETWEEN \"2025-01-01\" AND \"2025-03-31\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Show me the list of all team leads.",
      "fields": [
        "name",
        "designation",
        "department"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, department, designation FROM [BT]tabEmployee[BT] WHERE designation = \"Team Lead\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Who was hired last month?",
      "fields": [
        "name",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, date_of_joining FROM [BT]tabEmployee[BT] WHERE date_of_joining BETWEEN \"2025-04-01\" AND \"2025-04-30\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "How many employees are currently on payroll?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, COUNT(name) AS active_employees FROM [BT]tabEmployee[BT] WHERE status = \"Active\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Show the employee directory.",
      "fields": [
        "name",
        "employee_name",
        "department",
        "designation",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, department, designation, status FROM [BT]tabEmployee[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Who recently resigned?",
      "fields": [
        "name",
        "status",
        "relieving_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, relieving_date, status FROM [BT]tabEmployee[BT] WHERE status = \"Left\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "How many employees are on a probationary period?",
      "fields": [
        "name",
        "employment_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, COUNT(name) AS probation_count FROM [BT]tabEmployee[BT] WHERE employment_type = \"Probation\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "How many employees have been with us for over 5 years?",
      "fields": [
        "name",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('SELECT name, COUNT(name) AS over_5_years FROM [BT]tabEmployee[BT] WHERE date_of_joining <= DATE_SUB(CURDATE(), INTERVAL 1825 DAY)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "List employees connected to Project 'Alpha Construction'.",
      "fields": [
        "name",
        "project"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, project FROM [BT]tabEmployee[BT] WHERE project = \"Alpha Construction\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Who recently resigned?",
      "fields": [
        "name",
        "employee_name",
        "status",
        "relieving_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, status, relieving_date FROM [BT]tabEmployee[BT] WHERE status = \"Left\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "What's the employee hiring trend this quarter?",
      "fields": [
        "name",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('SELECT name, date_of_joining FROM [BT]tabEmployee[BT] WHERE date_of_joining BETWEEN \"2025-04-01\" AND \"2025-06-30\" ORDER BY date_of_joining ASC', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "List employees named John Kim added this month.",
      "fields": [
        "name",
        "employee_name",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, date_of_joining FROM [BT]tabEmployee[BT] WHERE employee_name = \"John Kim\" AND MONTH(date_of_joining) = MONTH(CURDATE()) AND YEAR(date_of_joining) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "How many employee records are pending approval?",
      "fields": [
        "name",
        "employee_name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, status FROM [BT]tabEmployee[BT] WHERE status = \"Pending\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Summarize employees added last quarter.",
      "fields": [
        "name",
        "employee_name",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, date_of_joining FROM [BT]tabEmployee[BT] WHERE date_of_joining BETWEEN \"2025-01-01\" AND \"2025-03-31\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Fetch employees who joined on January 1 and are marked as active.",
      "fields": [
        "name",
        "employee_name",
        "date_of_joining",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, date_of_joining, status FROM [BT]tabEmployee[BT] WHERE date_of_joining = \"2025-01-01\" AND status = \"Active\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees in Finance have an open status?",
      "fields": [
        "name",
        "employee_name",
        "department",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, department, status FROM [BT]tabEmployee[BT] WHERE department = \"Finance\" AND status = \"Open\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees are still pending?",
      "fields": [
        "name",
        "employee_name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, status FROM [BT]tabEmployee[BT] WHERE status = \"Pending\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees have not been processed yet?",
      "fields": [
        "name",
        "employee_name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, status FROM [BT]tabEmployee[BT] WHERE status = \"Pending\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Who's assigned to the 'Lakeside Park' project?",
      "fields": [
        "name",
        "employee_name",
        "project"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, project FROM [BT]tabEmployee[BT] WHERE project = \"Lakeside Park\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers have not paid yet from the retail group?",
      "fields": [
        "name",
        "customer_name",
        "customer_group",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, customer_name, outstanding_amount FROM [BT]tabCustomer[BT] WHERE customer_group = \"Retail\" AND outstanding_amount > 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "How many employee records are pending approval?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, COUNT(name) AS pending_count FROM [BT]tabEmployee[BT] WHERE status = \"Pending\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees in Finance have an open status?",
      "fields": [
        "name",
        "employee_name",
        "department",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, department, status FROM [BT]tabEmployee[BT] WHERE department = \"Finance\" AND status = \"Open\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees are still pending?",
      "fields": [
        "name",
        "employee_name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, status FROM [BT]tabEmployee[BT] WHERE status = \"Pending\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees have not been processed yet?",
      "fields": [
        "name",
        "employee_name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, status FROM [BT]tabEmployee[BT] WHERE status = \"Draft\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Who's assigned to the 'Lakeside Park' project?",
      "fields": [
        "name",
        "employee_name",
        "project"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, project FROM [BT]tabEmployee[BT] WHERE project = \"Lakeside Park\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees are assigned to the 'Maple Ridge Expansion' project?",
      "fields": [
        "name",
        "employee_name",
        "project"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, project FROM [BT]tabEmployee[BT] WHERE project = \"Maple Ridge Expansion\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Any employees linked to the 'Sunset Villas' project?",
      "fields": [
        "name",
        "employee_name",
        "project"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, project FROM [BT]tabEmployee[BT] WHERE project = \"Sunset Villas\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees are assigned to the 'Blue Ocean Resort' project?",
      "fields": [
        "name",
        "employee_name",
        "project"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, project FROM [BT]tabEmployee[BT] WHERE project = \"Blue Ocean Resort\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "How many employees received performance awards last quarter?",
      "fields": [
        "name",
        "employee_name",
        "feedback"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, feedback FROM [BT]tabEmployee[BT] WHERE feedback LIKE \"%award%\" AND date_of_joining BETWEEN \"2025-01-01\" AND \"2025-03-31\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees in Finance have an open status?",
      "fields": [
        "name",
        "department",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, department, status FROM [BT]tabEmployee[BT] WHERE department = \"Finance\" AND status = \"Open\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees are still pending?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, status FROM [BT]tabEmployee[BT] WHERE status = \"Pending\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees have not been processed yet?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, status FROM [BT]tabEmployee[BT] WHERE status = \"Not Processed\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Who's assigned to the 'Lakeside Park' project?",
      "fields": [
        "name",
        "employee_name",
        "project"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, project FROM [BT]tabEmployee[BT] WHERE project = \"Lakeside Park\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees are assigned to the 'Maple Ridge Expansion' project?",
      "fields": [
        "name",
        "employee_name",
        "project"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, project FROM [BT]tabEmployee[BT] WHERE project = \"Maple Ridge Expansion\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Any employees linked to the 'Sunset Villas' project?",
      "fields": [
        "name",
        "employee_name",
        "project"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, project FROM [BT]tabEmployee[BT] WHERE project = \"Sunset Villas\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees are assigned to the 'Blue Ocean Resort' project?",
      "fields": [
        "name",
        "employee_name",
        "project"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, project FROM [BT]tabEmployee[BT] WHERE project = \"Blue Ocean Resort\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers have not paid yet from the retail group?",
      "fields": [
        "name",
        "customer_name",
        "customer_group",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, customer_name, customer_group, outstanding_amount FROM [BT]tabCustomer[BT] WHERE customer_group = \"Retail\" AND outstanding_amount > 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which department had the most employees join recently?",
      "fields": [
        "name",
        "department",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('SELECT name, department, COUNT(name) AS join_count FROM [BT]tabEmployee[BT] WHERE date_of_joining >= \"2025-04-01\" GROUP BY department ORDER BY join_count DESC', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Who is currently listed as the custodian for asset PRINTER-HX200?",
      "fields": [
        "name",
        "asset_name",
        "custodian"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, custodian FROM [BT]tabAsset[BT] WHERE asset_name = \"PRINTER-HX200\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Can you tell me who\u2019s holding PROJECTOR-K980 right now?",
      "fields": [
        "name",
        "asset_name",
        "custodian"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, custodian FROM [BT]tabAsset[BT] WHERE asset_name = \"PROJECTOR-K980\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Any idea who\u2019s responsible for that scanner SCANMASTER-XL2?",
      "fields": [
        "name",
        "asset_name",
        "custodian"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, custodian FROM [BT]tabAsset[BT] WHERE asset_name = \"SCANMASTER-XL2\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which department is responsible for managing the asset SERVER-R900?",
      "fields": [
        "name",
        "asset_name",
        "department"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, department FROM [BT]tabAsset[BT] WHERE asset_name = \"SERVER-R900\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Who's in charge of SWITCH-GX500?",
      "fields": [
        "name",
        "asset_name",
        "custodian"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, custodian FROM [BT]tabAsset[BT] WHERE asset_name = \"SWITCH-GX500\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What team owns the FIREWALL-EDGE02 machine?",
      "fields": [
        "name",
        "asset_name",
        "department"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, department FROM [BT]tabAsset[BT] WHERE asset_name = \"FIREWALL-EDGE02\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "List all assets insured under policy number INS-2024-221.",
      "fields": [
        "name",
        "asset_name",
        "policy_number"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, policy_number FROM [BT]tabAsset[BT] WHERE policy_number = \"INS-2024-221\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which assets are covered by INS-2024-309?",
      "fields": [
        "name",
        "asset_name",
        "policy_number"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, policy_number FROM [BT]tabAsset[BT] WHERE policy_number = \"INS-2024-309\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Can you pull up everything linked to policy INS-2025-088?",
      "fields": [
        "name",
        "asset_name",
        "policy_number",
        "insured_value",
        "insurance_start_date",
        "insurance_end_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, policy_number, insured_value, insurance_start_date, insurance_end_date FROM [BT]tabAsset[BT] WHERE policy_number = \"INS-2025-088\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "List employees named John Kim added this month.",
      "fields": [
        "name",
        "employee_name",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, date_of_joining FROM [BT]tabEmployee[BT] WHERE employee_name = \"John Kim\" AND YEAR(date_of_joining) = YEAR(CURDATE()) AND MONTH(date_of_joining) = MONTH(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "What's the trend in new employee joining dates this quarter?",
      "fields": [
        "name",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, date_of_joining FROM [BT]tabEmployee[BT] WHERE QUARTER(date_of_joining) = QUARTER(CURDATE()) AND YEAR(date_of_joining) = YEAR(CURDATE()) ORDER BY date_of_joining ASC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Summarize employees added last quarter.",
      "fields": [
        "name",
        "employee_name",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, date_of_joining FROM [BT]tabEmployee[BT] WHERE QUARTER(date_of_joining) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) AND YEAR(date_of_joining) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER))''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Total number of employees added this year.",
      "fields": [
        "name",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS employees_this_year FROM [BT]tabEmployee[BT] WHERE YEAR(date_of_joining) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Fetch employees who joined on January 1 and are marked as active.",
      "fields": [
        "name",
        "employee_name",
        "date_of_joining",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, date_of_joining, status FROM [BT]tabEmployee[BT] WHERE DATE(date_of_joining) = CONCAT(YEAR(CURDATE()), '-01-01') AND status = \"Active\"''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Show employees with the highest activity this week.",
      "fields": [
        "name",
        "employee_name",
        "modified"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, modified FROM [BT]tabEmployee[BT] WHERE YEARWEEK(modified, 1) = YEARWEEK(CURDATE(), 1) ORDER BY modified DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "How many employees have been promoted to managerial roles this year?",
      "fields": [
        "name",
        "employee_name",
        "designation",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, designation, date_of_joining FROM [BT]tabEmployee[BT] WHERE designation LIKE \"%Manager%\" AND YEAR(date_of_joining) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "What's the employee hiring trend this quarter?",
      "fields": [
        "name",
        "employee_name",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, date_of_joining FROM [BT]tabEmployee[BT] WHERE QUARTER(date_of_joining) = QUARTER(CURDATE()) AND YEAR(date_of_joining) = YEAR(CURDATE()) ORDER BY date_of_joining ASC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which department had the most employees join recently?",
      "fields": [
        "name",
        "department",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('''SELECT department, COUNT(name) AS join_count FROM [BT]tabEmployee[BT] WHERE date_of_joining >= DATE_SUB(CURDATE(), INTERVAL 30 DAY) GROUP BY department ORDER BY join_count DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show customers from top territories this week.",
      "fields": [
        "name",
        "territory",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, territory, creation FROM [BT]tabCustomer[BT] WHERE YEARWEEK(creation, 1) = YEARWEEK(CURDATE(), 1) ORDER BY territory''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees have been transferred to a new department this month?",
      "fields": [
        "name",
        "employee_name",
        "department",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, department, date_of_joining FROM [BT]tabEmployee[BT] WHERE YEAR(date_of_joining) = YEAR(CURDATE()) AND MONTH(date_of_joining) = MONTH(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Are there any assets with insurance ending this month?",
      "fields": [
        "name",
        "asset_name",
        "insurance_end_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, asset_name, insurance_end_date FROM [BT]tabAsset[BT] WHERE YEAR(insurance_end_date) = YEAR(CURDATE()) AND MONTH(insurance_end_date) = MONTH(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which assets need insurance renewal this month?",
      "fields": [
        "name",
        "asset_name",
        "insurance_end_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, asset_name, insurance_end_date FROM [BT]tabAsset[BT] WHERE YEAR(insurance_end_date) = YEAR(CURDATE()) AND MONTH(insurance_end_date) = MONTH(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Anything due for insurance expiry right now?",
      "fields": [
        "name",
        "asset_name",
        "insurance_end_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, asset_name, insurance_end_date FROM [BT]tabAsset[BT] WHERE insurance_end_date <= CURDATE()''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which assets haven’t been fully depreciated yet?",
      "fields": [
        "name",
        "asset_name",
        "is_fully_depreciated"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, asset_name, is_fully_depreciated FROM [BT]tabAsset[BT] WHERE is_fully_depreciated = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Show me all assets still depreciating.",
      "fields": [
        "name",
        "asset_name",
        "is_fully_depreciated"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, is_fully_depreciated FROM [BT]tabAsset[BT] WHERE is_fully_depreciated = 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Do we have any items that aren't fully depreciated?",
      "fields": [
        "name",
        "is_fully_depreciated"
      ]
    },
    "output": "frappe.db.sql('SELECT name, is_fully_depreciated FROM [BT]tabAsset[BT] WHERE is_fully_depreciated = 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What depreciation frequency is set for asset PROJECTOR-LD320?",
      "fields": [
        "name",
        "asset_name",
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, frequency_of_depreciation FROM [BT]tabAsset[BT] WHERE asset_name = \"PROJECTOR-LD320\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "How often do we depreciate SCANNER-BR410?",
      "fields": [
        "name",
        "asset_name",
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, frequency_of_depreciation FROM [BT]tabAsset[BT] WHERE asset_name = \"SCANNER-BR410\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Is ROUTER-WAVE700 on yearly depreciation?",
      "fields": [
        "name",
        "asset_name",
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, frequency_of_depreciation FROM [BT]tabAsset[BT] WHERE asset_name = \"ROUTER-WAVE700\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "When is the next depreciation scheduled for asset VEHICLE-B450?",
      "fields": [
        "name",
        "next_depreciation_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, next_depreciation_date FROM [BT]tabAsset[BT] WHERE name = \"VEHICLE-B450\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Show me the purchase receipt linked to asset MONITOR-VX992.",
      "fields": [
        "name",
        "purchase_receipt"
      ]
    },
    "output": "frappe.db.sql('SELECT name, purchase_receipt FROM [BT]tabAsset[BT] WHERE name = \"MONITOR-VX992\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which assets are tied to Purchase Invoice INV-2025-0843?",
      "fields": [
        "name",
        "asset_name",
        "purchase_invoice"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, purchase_invoice FROM [BT]tabAsset[BT] WHERE purchase_invoice = \"INV-2025-0843\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What's the gross purchase amount of asset LAPTOP-ZBOOK-G5?",
      "fields": [
        "name",
        "gross_purchase_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, gross_purchase_amount FROM [BT]tabAsset[BT] WHERE name = \"LAPTOP-ZBOOK-G5\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "List all assets under cost center 'Marketing-CC1'.",
      "fields": [
        "name",
        "asset_name",
        "cost_center"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, cost_center FROM [BT]tabAsset[BT] WHERE cost_center = \"Marketing-CC1\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Find all assets owned by our Qatar branch.",
      "fields": [
        "name",
        "asset_name",
        "company"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, company FROM [BT]tabAsset[BT] WHERE company = \"Qatar\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Show the depreciation schedule for asset 'Laptop-001'.",
      "fields": [
        "name",
        "depreciation_schedule_view"
      ]
    },
    "output": "frappe.db.sql('SELECT name, depreciation_schedule_view FROM [BT]tabAsset[BT] WHERE name = \"Laptop-001\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "List all assets due for maintenance this quarter.",
      "fields": [
        "name",
        "asset_name",
        "maintenance_required"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, maintenance_required FROM [BT]tabAsset[BT] WHERE maintenance_required = 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What's the current value of asset 'Machine-001'?",
      "fields": [
        "name",
        "value_after_depreciation"
      ]
    },
    "output": "frappe.db.sql('SELECT name, value_after_depreciation FROM [BT]tabAsset[BT] WHERE name = \"Machine-001\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which assets haven\u2019t been fully depreciated yet?",
      "fields": [
        "name",
        "asset_name",
        "is_fully_depreciated"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, is_fully_depreciated FROM [BT]tabAsset[BT] WHERE is_fully_depreciated = 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What depreciation frequency is set for asset PROJECTOR-LD320?",
      "fields": [
        "name",
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.db.sql('SELECT name, frequency_of_depreciation FROM [BT]tabAsset[BT] WHERE name = \"PROJECTOR-LD320\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which assets are covered by INS-2024-309?",
      "fields": [
        "name",
        "asset_name",
        "policy_number"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, policy_number FROM [BT]tabAsset[BT] WHERE policy_number = \"INS-2024-309\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Next depreciation date for CAMERA-ZN80?",
      "fields": [
        "name",
        "next_depreciation_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, next_depreciation_date FROM [BT]tabAsset[BT] WHERE name = \"CAMERA-ZN80\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which purchase receipt was used for MONITOR-VX992?",
      "fields": [
        "name",
        "purchase_receipt"
      ]
    },
    "output": "frappe.db.sql('SELECT name, purchase_receipt FROM [BT]tabAsset[BT] WHERE name = \"MONITOR-VX992\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which assets are tied to Purchase Invoice INV-2025-0843?",
      "fields": [
        "name",
        "asset_name",
        "purchase_invoice"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, purchase_invoice FROM [BT]tabAsset[BT] WHERE purchase_invoice = \"INV-2025-0843\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What's the gross purchase amount of asset LAPTOP-ZBOOK-G5?",
      "fields": [
        "name",
        "gross_purchase_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, gross_purchase_amount FROM [BT]tabAsset[BT] WHERE name = \"LAPTOP-ZBOOK-G5\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "List all assets under cost center 'Marketing-CC1'.",
      "fields": [
        "name",
        "asset_name",
        "cost_center"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, cost_center FROM [BT]tabAsset[BT] WHERE cost_center = \"Marketing-CC1\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What\u2019s the total value of our capex items?",
      "fields": [
        "name",
        "purchase_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, SUM(purchase_amount) AS total_capex_value FROM [BT]tabAsset[BT] WHERE docstatus = 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Show the depreciation schedule for asset 'Laptop-001'.",
      "fields": [
        "name",
        "depreciation_schedule_view"
      ]
    },
    "output": "frappe.db.sql('SELECT name, depreciation_schedule_view FROM [BT]tabAsset[BT] WHERE name = \"Laptop-001\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "List all assets due for maintenance this quarter.",
      "fields": [
        "name",
        "asset_name",
        "maintenance_required"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, maintenance_required FROM [BT]tabAsset[BT] WHERE maintenance_required = 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What's the current value of asset 'Machine-001'?",
      "fields": [
        "name",
        "value_after_depreciation"
      ]
    },
    "output": "frappe.db.sql('SELECT name, value_after_depreciation FROM [BT]tabAsset[BT] WHERE name = \"Machine-001\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Show value changes to the 'Server-A' over the year.",
      "fields": [
        "name",
        "value_after_depreciation",
        "depreciation_schedule_view"
      ]
    },
    "output": "frappe.db.sql('SELECT name, value_after_depreciation, depreciation_schedule_view FROM [BT]tabAsset[BT] WHERE name = \"Server-A\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show me today's submitted purchase invoices.",
      "fields": [
        "name",
        "posting_date",
        "supplier",
        "grand_total",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, posting_date, supplier, grand_total, status FROM [BT]tabPurchase Invoice[BT] WHERE DATE(posting_date) = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which departments had the most employees join this week?",
      "fields": [
        "name",
        "department",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('SELECT department, COUNT(name) AS join_count FROM [BT]tabEmployee[BT] WHERE date_of_joining BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE() GROUP BY department ORDER BY join_count DESC', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Total number of employees added this year.",
      "fields": [
        "name",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS employees_this_year FROM [BT]tabEmployee[BT] WHERE date_of_joining BETWEEN DATE_FORMAT(CURDATE(), \"%Y-01-01\") AND DATE_FORMAT(CURDATE(), \"%Y-12-31\")', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Show employees with the highest activity this week.",
      "fields": [
        "name",
        "employee_name",
        "modified"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, modified FROM [BT]tabEmployee[BT] WHERE modified BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE() ORDER BY modified DESC', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show customers from top territories this week.",
      "fields": [
        "name",
        "customer_name",
        "territory",
        "creation"
      ]
    },
    "output": "frappe.db.sql('SELECT name, customer_name, territory, creation FROM [BT]tabCustomer[BT] WHERE creation BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE() ORDER BY territory DESC', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Report assets that require maintenance this week.",
      "fields": [
        "name",
        "asset_name",
        "maintenance_required"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, maintenance_required FROM [BT]tabAsset[BT] WHERE maintenance_required = 1 AND modified BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List all purchase invoices created today.",
      "fields": [
        "name",
        "posting_date",
        "supplier",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT name, posting_date, supplier, grand_total FROM [BT]tabPurchase Invoice[BT] WHERE DATE(posting_date) = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Company"
      ],
      "question": "What is the credit limit for Zenith Tech Solutions this year?",
      "fields": [
        "name",
        "credit_limit"
      ]
    },
    "output": "frappe.db.sql('SELECT name, credit_limit FROM [BT]tabCompany[BT] WHERE name = \"Zenith Tech Solutions\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "How many employees are eligible for retirement this year?",
      "fields": [
        "name",
        "date_of_birth"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS retirement_count FROM [BT]tabEmployee[BT] WHERE YEAR(CURDATE()) - YEAR(date_of_birth) >= 65', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Find all assets owned by our Qatar branch.",
      "fields": [
        "name",
        "asset_name",
        "location"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, location FROM [BT]tabAsset[BT] WHERE location = \"Qatar\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Can you pull the depreciation details for PRINTER-XD450?",
      "fields": [
        "name",
        "depreciation_schedule_view"
      ]
    },
    "output": "frappe.db.sql('SELECT name, depreciation_schedule_view FROM [BT]tabAsset[BT] WHERE name = \"PRINTER-XD450\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "How much is CAMERA-ZY202 worth on the books right now?",
      "fields": [
        "name",
        "value_after_depreciation"
      ]
    },
    "output": "frappe.db.sql('SELECT name, value_after_depreciation FROM [BT]tabAsset[BT] WHERE name = \"CAMERA-ZY202\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Give me the yearly valuation trend for STORAGE-BX600.",
      "fields": [
        "name",
        "depreciation_schedule_view"
      ]
    },
    "output": "frappe.db.sql('SELECT name, depreciation_schedule_view FROM [BT]tabAsset[BT] WHERE name = \"STORAGE-BX600\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "S3 Backup Settings"
      ],
      "question": "Can I set up automatic backups to my S3 bucket in the system?",
      "fields": [
        "name",
        "bucket",
        "enabled",
        "frequency"
      ]
    },
    "output": "frappe.db.sql('SELECT name, bucket, enabled, frequency FROM [BT]tabS3 Backup Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Finance Book"
      ],
      "question": "Where can I view the list of finance books used in our company?",
      "fields": [
        "name",
        "finance_book_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, finance_book_name FROM [BT]tabFinance Book[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Finance Book"
      ],
      "question": "Can I rename or update the name of an existing finance book?",
      "fields": [
        "name",
        "finance_book_name"
      ]
    },
    "output": "frappe.db.sql('UPDATE [BT]tabFinance Book[BT] SET finance_book_name = \"NEW_BOOK_NAME\" WHERE name = \"OLD_BOOK_NAME\"')"
  },
  {
    "input": {
      "doctype": [
        "UOM Category"
      ],
      "question": "What are the different UOM categories defined in our system?",
      "fields": [
        "name",
        "category_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, category_name FROM [BT]tabUOM Category[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Finance Book"
      ],
      "question": "What finance books are used by default for journal entries?",
      "fields": [
        "name",
        "finance_book_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, finance_book_name FROM [BT]tabFinance Book[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Category"
      ],
      "question": "What are the different UOM categories defined in our system?",
      "fields": [
        "name",
        "category_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, category_name FROM [BT]tabUOM Category[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Category"
      ],
      "question": "Where can I find the category for weight-based units of measure?",
      "fields": [
        "name",
        "category_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, category_name FROM [BT]tabUOM Category[BT] WHERE category_name = \"Weight\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Finance Book"
      ],
      "question": "Where can I view the list of finance books used in our company?",
      "fields": [
        "name",
        "finance_book_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, finance_book_name FROM [BT]tabFinance Book[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Finance Book"
      ],
      "question": "Can I rename or update the name of an existing finance book?",
      "fields": [
        "name",
        "finance_book_name"
      ]
    },
    "output": "frappe.db.sql('UPDATE [BT]tabFinance Book[BT] SET finance_book_name = \"NEW_BOOK_NAME\" WHERE name = \"EXISTING_BOOK_NAME\"')"
  },
  {
    "input": {
      "doctype": [
        "Finance Book"
      ],
      "question": "List all finance books currently set up in the system.",
      "fields": [
        "name",
        "finance_book_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, finance_book_name FROM [BT]tabFinance Book[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Finance Book"
      ],
      "question": "Is there a finance book for our Singapore entity?",
      "fields": [
        "name",
        "finance_book_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, finance_book_name FROM [BT]tabFinance Book[BT] WHERE finance_book_name = \"Singapore Entity\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Finance Book"
      ],
      "question": "Show all finance books used for tax reporting purposes.",
      "fields": [
        "name",
        "finance_book_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, finance_book_name FROM [BT]tabFinance Book[BT] WHERE finance_book_name LIKE \"%Tax%\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Finance Book"
      ],
      "question": "Which finance books are linked to our international subsidiaries?",
      "fields": [
        "name",
        "finance_book_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, finance_book_name FROM [BT]tabFinance Book[BT] WHERE finance_book_name LIKE \"%International%\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Category"
      ],
      "question": "What are the different UOM categories defined in our system?",
      "fields": [
        "name",
        "category_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, category_name FROM [BT]tabUOM Category[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Category"
      ],
      "question": "Where can I find the category for weight-based units of measure?",
      "fields": [
        "name",
        "category_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, category_name FROM [BT]tabUOM Category[BT] WHERE category_name = \"Weight\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Finance Book"
      ],
      "question": "How many finance books are currently active in our system?",
      "fields": [
        "name",
        "finance_book_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, COUNT(name) AS active_books FROM [BT]tabFinance Book[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Finance Book"
      ],
      "question": "Where are the names of all configured finance books stored?",
      "fields": [
        "name",
        "finance_book_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, finance_book_name FROM [BT]tabFinance Book[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Project Type"
      ],
      "question": "Can I get a list of all the different project types we\u2019ve created?",
      "fields": [
        "name",
        "project_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, project_type FROM [BT]tabProject Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Project Type"
      ],
      "question": "What project types are currently defined in the system?",
      "fields": [
        "name",
        "project_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, project_type FROM [BT]tabProject Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Project Type"
      ],
      "question": "Can I get a list of all the different project types we\u2019ve created?",
      "fields": [
        "name",
        "project_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, project_type FROM [BT]tabProject Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Project Type"
      ],
      "question": "What project types are currently defined in the system?",
      "fields": [
        "name",
        "project_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, project_type FROM [BT]tabProject Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Project Type"
      ],
      "question": "Can I get a list of all the different project types we\u2019ve created?",
      "fields": [
        "name",
        "project_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, project_type FROM [BT]tabProject Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Project Type"
      ],
      "question": "What project types are currently defined in the system?",
      "fields": [
        "name",
        "project_type",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT name, project_type, description FROM [BT]tabProject Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Project Type"
      ],
      "question": "Show me all types of projects listed with their descriptions.",
      "fields": [
        "name",
        "project_type",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT name, project_type, description FROM [BT]tabProject Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Can you show me all defined activity types and their default rates?",
      "fields": [
        "name",
        "activity_type",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, billing_rate, costing_rate FROM [BT]tabActivity Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Where do we set the default billing and costing rate for each activity?",
      "fields": [
        "name",
        "activity_type",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, billing_rate, costing_rate FROM [BT]tabActivity Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Which activity types are active and which ones are disabled?",
      "fields": [
        "name",
        "activity_type",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, disabled FROM [BT]tabActivity Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Do we have an activity type for design work with a set billing rate?",
      "fields": [
        "name",
        "activity_type",
        "billing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, billing_rate FROM [BT]tabActivity Type[BT] WHERE activity_type = \"Design\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Which activity types are currently disabled in the system?",
      "fields": [
        "name",
        "activity_type",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, disabled FROM [BT]tabActivity Type[BT] WHERE disabled = 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "List all active activity types used in projects.",
      "fields": [
        "name",
        "activity_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type FROM [BT]tabActivity Type[BT] WHERE disabled = 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Show me all activity types with their billing and costing rates.",
      "fields": [
        "name",
        "activity_type",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, billing_rate, costing_rate FROM [BT]tabActivity Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "What are the billing and costing rates for the activity type 'Consulting'?",
      "fields": [
        "name",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, billing_rate, costing_rate FROM [BT]tabActivity Type[BT] WHERE activity_type = \"Consulting\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Fetch the costing rate of 'Installation' activity type.",
      "fields": [
        "name",
        "costing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, costing_rate FROM [BT]tabActivity Type[BT] WHERE activity_type = \"Installation\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Is the activity type 'Field Support' currently enabled?",
      "fields": [
        "name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('SELECT name, disabled FROM [BT]tabActivity Type[BT] WHERE activity_type = \"Field Support\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Where can I see the rates associated with each task type?",
      "fields": [
        "name",
        "activity_type",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, billing_rate, costing_rate FROM [BT]tabActivity Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Which activity types are active and which ones are disabled?",
      "fields": [
        "name",
        "activity_type",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, disabled FROM [BT]tabActivity Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Can you list all defined activity types in the system?",
      "fields": [
        "name",
        "activity_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type FROM [BT]tabActivity Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Show billing and costing rates for all activity types.",
      "fields": [
        "name",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, billing_rate, costing_rate FROM [BT]tabActivity Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Give me the billing rate for 'Design Work'.",
      "fields": [
        "name",
        "billing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, billing_rate FROM [BT]tabActivity Type[BT] WHERE activity_type = \"Design Work\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Retrieve all activity types where costing rate exceeds 100.",
      "fields": [
        "name",
        "activity_type",
        "costing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, costing_rate FROM [BT]tabActivity Type[BT] WHERE costing_rate > 100', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "What activity types have a billing rate set to zero?",
      "fields": [
        "name",
        "activity_type",
        "billing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, billing_rate FROM [BT]tabActivity Type[BT] WHERE billing_rate = 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Which activities are marked as disabled?",
      "fields": [
        "name",
        "activity_type",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, disabled FROM [BT]tabActivity Type[BT] WHERE disabled = 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "List all activities with billing rate higher than costing rate.",
      "fields": [
        "name",
        "activity_type",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, billing_rate, costing_rate FROM [BT]tabActivity Type[BT] WHERE billing_rate > costing_rate', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Which activity types have both rates configured?",
      "fields": [
        "name",
        "activity_type",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, billing_rate, costing_rate FROM [BT]tabActivity Type[BT] WHERE billing_rate > 0 AND costing_rate > 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Find all active activity types for project billing.",
      "fields": [
        "name",
        "activity_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type FROM [BT]tabActivity Type[BT] WHERE disabled = 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Is there a place to see the rates associated with each task type?",
      "fields": [
        "activity_type",
        "billing_rate",
        "costing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT activity_type, billing_rate, costing_rate FROM [BT]tabActivity Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Fetch costing rate for 'Installation'.",
      "fields": [
        "name",
        "activity_type",
        "costing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, costing_rate FROM [BT]tabActivity Type[BT] WHERE activity_type = \"Installation\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Cheque Print Template"
      ],
      "question": "Where do I configure the layout for printing cheques for different banks?",
      "fields": [
        "name",
        "bank_name",
        "cheque_width",
        "cheque_height",
        "starting_position_from_top_edge"
      ]
    },
    "output": "frappe.db.sql('SELECT name, bank_name, cheque_width, cheque_height, starting_position_from_top_edge FROM [BT]tabCheque Print Template[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Cheque Print Template"
      ],
      "question": "Is there a way to set the position of the payer\u2019s name and date on a cheque?",
      "fields": [
        "name",
        "payer_name_from_top_edge",
        "payer_name_from_left_edge",
        "date_dist_from_top_edge",
        "date_dist_from_left_edge"
      ]
    },
    "output": "frappe.db.sql('SELECT name, payer_name_from_top_edge, payer_name_from_left_edge, date_dist_from_top_edge, date_dist_from_left_edge FROM [BT]tabCheque Print Template[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Cheque Print Template"
      ],
      "question": "Where can I upload scanned cheque templates for visual alignment?",
      "fields": [
        "name",
        "bank_name",
        "scanned_cheque"
      ]
    },
    "output": "frappe.db.sql('SELECT name, bank_name, scanned_cheque FROM [BT]tabCheque Print Template[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Cheque Print Template"
      ],
      "question": "Can I enable an option to include an 'Account Payable' label on printed cheques?",
      "fields": [
        "name",
        "bank_name",
        "is_account_payable"
      ]
    },
    "output": "frappe.db.sql('SELECT name, bank_name, is_account_payable FROM [BT]tabCheque Print Template[BT] WHERE is_account_payable = 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Cheque Print Template"
      ],
      "question": "Where can I define spacing and width for cheque amounts in words?",
      "fields": [
        "name",
        "amt_in_words_line_spacing",
        "amt_in_word_width"
      ]
    },
    "output": "frappe.db.sql('SELECT name, amt_in_words_line_spacing, amt_in_word_width FROM [BT]tabCheque Print Template[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Cheque Print Template"
      ],
      "question": "Which template lets me adjust the distance of account number from the top and left edges?",
      "fields": [
        "name",
        "bank_name",
        "acc_no_dist_from_top_edge",
        "acc_no_dist_from_left_edge"
      ]
    },
    "output": "frappe.db.sql('SELECT name, bank_name, acc_no_dist_from_top_edge, acc_no_dist_from_left_edge FROM [BT]tabCheque Print Template[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Cheque Print Template"
      ],
      "question": "How do I configure cheque dimensions for a specific print format?",
      "fields": [
        "name",
        "cheque_width",
        "cheque_height",
        "has_print_format"
      ]
    },
    "output": "frappe.db.sql('SELECT name, cheque_width, cheque_height, has_print_format FROM [BT]tabCheque Print Template[BT] WHERE has_print_format = 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Cheque Print Template"
      ],
      "question": "How can I define the cheque size and margins for Citibank?",
      "fields": [
        "name",
        "bank_name",
        "cheque_width",
        "cheque_height",
        "starting_position_from_top_edge"
      ]
    },
    "output": "frappe.db.sql('SELECT name, bank_name, cheque_width, cheque_height, starting_position_from_top_edge FROM [BT]tabCheque Print Template[BT] WHERE bank_name = \"Citibank\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Entry"
      ],
      "question": "List stock entries that were linked to a purchase order and have remarks.",
      "fields": [
        "name",
        "purchase_order",
        "remarks"
      ]
    },
    "output": "frappe.db.sql('SELECT name, purchase_order, remarks FROM [BT]tabStock Entry[BT] WHERE purchase_order != \"\" AND remarks != \"\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Entry"
      ],
      "question": "Get stock entries created by user 'admin@erpgulf.com' on or after April 1, 2025.",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, posting_date FROM [BT]tabStock Entry[BT] WHERE owner = \"admin@erpgulf.com\" AND posting_date >= \"2025-04-01\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "List all activity types available for timesheet entry.",
      "fields": [
        "name",
        "activity_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type FROM [BT]tabActivity Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Branch"
      ],
      "question": "Can you show me a list of all our active branches?",
      "fields": [
        "name",
        "branch"
      ]
    },
    "output": "frappe.db.sql('SELECT name, branch FROM [BT]tabBranch[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Branch"
      ],
      "question": "Is there a branch registered under the name Downtown Store?",
      "fields": [
        "name",
        "branch"
      ]
    },
    "output": "frappe.db.sql('SELECT name, branch FROM [BT]tabBranch[BT] WHERE branch = \"Downtown Store\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Branch"
      ],
      "question": "Are branch names stored somewhere in the ERP system?",
      "fields": [
        "name",
        "branch"
      ]
    },
    "output": "frappe.db.sql('SELECT name, branch FROM [BT]tabBranch[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Branch"
      ],
      "question": "Where do I manage our store and branch records?",
      "fields": [
        "name",
        "branch"
      ]
    },
    "output": "frappe.db.sql('SELECT name, branch FROM [BT]tabBranch[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Branch"
      ],
      "question": "Can I get the details of the South Branch?",
      "fields": [
        "name",
        "branch"
      ]
    },
    "output": "frappe.db.sql('SELECT name, branch FROM [BT]tabBranch[BT] WHERE branch = \"South Branch\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Branch"
      ],
      "question": "Which branch is associated with our new distribution center?",
      "fields": [
        "name",
        "branch"
      ]
    },
    "output": "frappe.db.sql('SELECT name, branch FROM [BT]tabBranch[BT] WHERE branch = \"Distribution Center\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Branch"
      ],
      "question": "Are branch names stored somewhere in the ERP system?",
      "fields": [
        "name",
        "branch"
      ]
    },
    "output": "frappe.db.sql('SELECT name, branch FROM [BT]tabBranch[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Branch"
      ],
      "question": "Can we rename a branch entry in the ERP?",
      "fields": [
        "name",
        "branch"
      ]
    },
    "output": "frappe.db.sql('SELECT name, branch FROM [BT]tabBranch[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Branch"
      ],
      "question": "I need to create a record for the new Mumbai branch\u2014how do I do that?",
      "fields": [
        "name",
        "branch"
      ]
    },
    "output": "frappe.db.sql('SELECT name, branch FROM [BT]tabBranch[BT] WHERE branch = \"Mumbai\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "BOM Website Operation"
      ],
      "question": "Can we filter BOM website operations by operation name or time?",
      "fields": [
        "name",
        "operation",
        "time_in_mins"
      ]
    },
    "output": "frappe.db.sql('SELECT name, operation, time_in_mins FROM [BT]tabBOM Website Operation[BT] WHERE operation != \"\" AND time_in_mins > 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Project Type"
      ],
      "question": "List out our project types so I can assign one to a new project.",
      "fields": [
        "name",
        "project_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, project_type FROM [BT]tabProject Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Category"
      ],
      "question": "List all UOM categories used in item conversion.",
      "fields": [
        "name",
        "category_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, category_name FROM [BT]tabUOM Category[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Category"
      ],
      "question": "Is there a separate UOM category for liquids?",
      "fields": [
        "name",
        "category_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, category_name FROM [BT]tabUOM Category[BT] WHERE category_name = \"Liquids\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Website Item Group"
      ],
      "question": "Where do I configure which item groups appear on our website?",
      "fields": [
        "name",
        "item_group"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_group FROM [BT]tabWebsite Item Group[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Project Type"
      ],
      "question": "Where can I find a list of all project type labels and their purpose?",
      "fields": [
        "name",
        "project_type",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT name, project_type, description FROM [BT]tabProject Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Category"
      ],
      "question": "Is there a separate UOM category for liquids?",
      "fields": [
        "name",
        "category_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, category_name FROM [BT]tabUOM Category[BT] WHERE category_name = \"Liquid\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Category"
      ],
      "question": "Which UOM category does 'Box' belong to?",
      "fields": [
        "name",
        "category_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, category_name FROM [BT]tabUOM Category[BT] WHERE category_name = \"Box\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Project"
      ],
      "question": "List all active projects created in the last 30 days.",
      "fields": [
        "name",
        "status",
        "creation"
      ]
    },
    "output": "frappe.db.sql('SELECT name, status, creation FROM [BT]tabProject[BT] WHERE status = \"Active\" AND creation >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List all customers from Qatar.",
      "fields": [
        "name",
        "customer_name",
        "country"
      ]
    },
    "output": "frappe.db.sql('SELECT name, customer_name, country FROM [BT]tabCustomer[BT] WHERE country = \"Qatar\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item Website Specification"
      ],
      "question": "Where can I add website-specific labels and descriptions for my items?",
      "fields": [
        "name",
        "label",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT name, label, description FROM [BT]tabItem Website Specification[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Project Type"
      ],
      "question": "Where do we store the description of each project type?",
      "fields": [
        "name",
        "project_type",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT name, project_type, description FROM [BT]tabProject Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Project Type"
      ],
      "question": "Is there a place to view all project categories we handle?",
      "fields": [
        "name",
        "project_type",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT name, project_type, description FROM [BT]tabProject Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Project Type"
      ],
      "question": "Which table holds our standard project types and their explanations?",
      "fields": [
        "name",
        "project_type",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT name, project_type, description FROM [BT]tabProject Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Project Type"
      ],
      "question": "Where can I find a description of internal vs external project types?",
      "fields": [
        "name",
        "project_type",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT name, project_type, description FROM [BT]tabProject Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Project Type"
      ],
      "question": "Show me all types of projects listed with their descriptions.",
      "fields": [
        "name",
        "project_type",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT name, project_type, description FROM [BT]tabProject Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Can you show me all defined activity types and their default rates?",
      "fields": [
        "name",
        "activity_type",
        "costing_rate",
        "billing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, costing_rate, billing_rate FROM [BT]tabActivity Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Where do we set the default billing and costing rate for each activity?",
      "fields": [
        "name",
        "activity_type",
        "costing_rate",
        "billing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, costing_rate, billing_rate FROM [BT]tabActivity Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "What activities are listed for project time tracking?",
      "fields": [
        "name",
        "activity_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type FROM [BT]tabActivity Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "I need to review the list of activity types we use in our projects.",
      "fields": [
        "name",
        "activity_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type FROM [BT]tabActivity Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Which activity types are active and which ones are disabled?",
      "fields": [
        "name",
        "activity_type",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, disabled FROM [BT]tabActivity Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Do we have an activity type for design work with a set billing rate?",
      "fields": [
        "name",
        "activity_type",
        "billing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, billing_rate FROM [BT]tabActivity Type[BT] WHERE activity_type = \"Design\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "What\u2019s the default costing rate for installation activities?",
      "fields": [
        "name",
        "activity_type",
        "costing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, costing_rate FROM [BT]tabActivity Type[BT] WHERE activity_type = \"Installation\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Is there a place to see the rates associated with each task type?",
      "fields": [
        "name",
        "activity_type",
        "costing_rate",
        "billing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, costing_rate, billing_rate FROM [BT]tabActivity Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Can I disable an outdated activity type without deleting it?",
      "fields": [
        "name",
        "activity_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type FROM [BT]tabActivity Type[BT] WHERE disabled = 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Can we update the billing rate for a specific activity type?",
      "fields": [
        "name",
        "activity_type",
        "billing_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, billing_rate FROM [BT]tabActivity Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Can I disable an outdated activity type without deleting it?",
      "fields": [
        "name",
        "activity_type",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type, disabled FROM [BT]tabActivity Type[BT] WHERE disabled = 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Activity Type"
      ],
      "question": "Where can I add a new activity type for field support?",
      "fields": [
        "name",
        "activity_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, activity_type FROM [BT]tabActivity Type[BT] WHERE activity_type = \"Field Support\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Where do I find the total ordered quantity for 'Product Y' across all suppliers?",
      "fields": [
        "item_code",
        "quantity_ordered",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code, quantity_ordered, supplier FROM [BT]tabPurchase Order[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "How can I track the available stock for all products in warehouse 'W-101'?",
      "fields": [
        "item_code",
        "stock_qty",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code, stock_qty, warehouse FROM [BT]tabItem[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "How can I check the total number of items ordered for 'Product A' in the last 6 months?",
      "fields": [
        "item_code",
        "quantity_ordered"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code, quantity_ordered FROM [BT]tabPurchase Order[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Where can I find all available stock quantities for 'Product B' across warehouses?",
      "fields": [
        "item_code",
        "stock_qty",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code, stock_qty, warehouse FROM [BT]tabItem[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "How do I get the total stock available for all products in 'Warehouse A'?",
      "fields": [
        "item_code",
        "stock_qty",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code, stock_qty, warehouse FROM [BT]tabItem[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Category"
      ],
      "question": "Where can I configure a new unit category for digital items?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.db.sql('SELECT category_name FROM [BT]tabUOM Category[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Category"
      ],
      "question": "How do I manage categories of UOMs in ERPNext?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.db.sql('SELECT category_name FROM [BT]tabUOM Category[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Category"
      ],
      "question": "What category is used for length measurements?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.db.sql('SELECT category_name FROM [BT]tabUOM Category[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Category"
      ],
      "question": "Which UOM categories are mandatory during UOM conversion?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.db.sql('SELECT category_name FROM [BT]tabUOM Category[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Category"
      ],
      "question": "Can I rename an existing UOM category without affecting items?",
      "fields": [
        "category_name"
      ]
    },
    "output": "frappe.db.sql('SELECT category_name FROM [BT]tabUOM Category[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Party Type"
      ],
      "question": "How can I configure party types like Customer or Supplier for transactions?",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.db.sql('SELECT party_type, account_type FROM [BT]tabParty Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Party Type"
      ],
      "question": "Which party types are linked with the Payable account type?",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.db.sql('SELECT party_type, account_type FROM [BT]tabParty Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Party Type"
      ],
      "question": "Show all party types set up in the ERP system.",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.db.sql('SELECT party_type, account_type FROM [BT]tabParty Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Party Type"
      ],
      "question": "Is there a party type defined for Employees in the chart of accounts?",
      "fields": [
        "party_type"
      ]
    },
    "output": "frappe.db.sql('SELECT party_type FROM [BT]tabParty Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Party Type"
      ],
      "question": "Which party type is associated with the Receivable account group?",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.db.sql('SELECT party_type, account_type FROM [BT]tabParty Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Party Type"
      ],
      "question": "Can I map a new party type to both Payable and Receivable accounts?",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.db.sql('SELECT party_type, account_type FROM [BT]tabParty Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Party Type"
      ],
      "question": "Where do I define account types for different party types?",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.db.sql('SELECT party_type, account_type FROM [BT]tabParty Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Party Type"
      ],
      "question": "Do we have any party type other than Customer or Supplier configured?",
      "fields": [
        "party_type"
      ]
    },
    "output": "frappe.db.sql('SELECT party_type FROM [BT]tabParty Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Party Type"
      ],
      "question": "What account type is assigned to party type 'Shareholder'?",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.db.sql('SELECT party_type, account_type FROM [BT]tabParty Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Party Type"
      ],
      "question": "List all party types and their associated account types.",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.db.sql('SELECT party_type, account_type FROM [BT]tabParty Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Party Type"
      ],
      "question": "How is the default account type decided for each party type?",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.db.sql('SELECT party_type, account_type FROM [BT]tabParty Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Party Type"
      ],
      "question": "Where can I edit the account type for a specific party type?",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.db.sql('SELECT party_type, account_type FROM [BT]tabParty Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Routing"
      ],
      "question": "Where can I define or manage the routing steps for manufacturing operations?",
      "fields": [
        "routing_name",
        "operations"
      ]
    },
    "output": "frappe.db.sql('SELECT routing_name, operations FROM [BT]tabRouting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Routing"
      ],
      "question": "Can I see the list of routings that are currently disabled?",
      "fields": [
        "routing_name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('SELECT routing_name, disabled FROM [BT]tabRouting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Routing"
      ],
      "question": "What is the routing name used for assembling the new generator unit?",
      "fields": [
        "routing_name"
      ]
    },
    "output": "frappe.db.sql('SELECT routing_name FROM [BT]tabRouting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Routing"
      ],
      "question": "Which document stores the operation flow used in a BOM process?",
      "fields": [
        "operations"
      ]
    },
    "output": "frappe.db.sql('SELECT operations FROM [BT]tabRouting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Routing"
      ],
      "question": "Is there a way to deactivate a routing without deleting it?",
      "fields": [
        "routing_name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('SELECT routing_name, disabled FROM [BT]tabRouting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Routing"
      ],
      "question": "Where do I view all BOM operations linked to a specific routing?",
      "fields": [
        "routing_name",
        "operations"
      ]
    },
    "output": "frappe.db.sql('SELECT routing_name, operations FROM [BT]tabRouting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Routing"
      ],
      "question": "What ERP record helps organize the sequence of manufacturing tasks?",
      "fields": [
        "routing_name",
        "operations"
      ]
    },
    "output": "frappe.db.sql('SELECT routing_name, operations FROM [BT]tabRouting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Routing"
      ],
      "question": "Show me the routing used for our engine assembly line.",
      "fields": [
        "routing_name"
      ]
    },
    "output": "frappe.db.sql('SELECT routing_name FROM [BT]tabRouting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "Where can I define the types of shares available for employees or users?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT title, description FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "I need to update the description of a specific share type. Where do I do that?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT title, description FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "Show me all the share types we\u2019ve created in the system.",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT title, description FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "Can I add a long description to a share type to explain its purpose?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT title, description FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "How do I create a new share type with a specific title?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT title, description FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "What doctype stores information about different types of shares we assign?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT title, description FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "Is there a section to describe the purpose of each share type?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT title, description FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "Where can I maintain the master list of share types in ERPNext?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT title, description FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "Can I list all titles of the share types defined in our system?",
      "fields": [
        "title"
      ]
    },
    "output": "frappe.db.sql('SELECT title FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "How do I view or edit a share type\u2019s details like name and description?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT title, description FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Party Type"
      ],
      "question": "List all party types and their associated account types.",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.db.sql('SELECT party_type, account_type FROM [BT]tabParty Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Party Type"
      ],
      "question": "How is the default account type decided for each party type?",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.db.sql('SELECT party_type, account_type FROM [BT]tabParty Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Party Type"
      ],
      "question": "Where can I edit the account type for a specific party type?",
      "fields": [
        "party_type",
        "account_type"
      ]
    },
    "output": "frappe.db.sql('SELECT party_type, account_type FROM [BT]tabParty Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Routing"
      ],
      "question": "Where can I define or manage the routing steps for manufacturing operations?",
      "fields": [
        "routing_name",
        "operations"
      ]
    },
    "output": "frappe.db.sql('SELECT routing_name, operations FROM [BT]tabRouting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Routing"
      ],
      "question": "Can I see the list of routings that are currently disabled?",
      "fields": [
        "routing_name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('SELECT routing_name, disabled FROM [BT]tabRouting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Routing"
      ],
      "question": "What is the routing name used for assembling the new generator unit?",
      "fields": [
        "routing_name"
      ]
    },
    "output": "frappe.db.sql('SELECT routing_name FROM [BT]tabRouting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Routing"
      ],
      "question": "Which document stores the operation flow used in a BOM process?",
      "fields": [
        "routing_name",
        "operations"
      ]
    },
    "output": "frappe.db.sql('SELECT routing_name, operations FROM [BT]tabRouting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Routing"
      ],
      "question": "Is there a way to deactivate a routing without deleting it?",
      "fields": [
        "routing_name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('SELECT routing_name, disabled FROM [BT]tabRouting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Routing"
      ],
      "question": "Where do I view all BOM operations linked to a specific routing?",
      "fields": [
        "routing_name",
        "operations"
      ]
    },
    "output": "frappe.db.sql('SELECT routing_name, operations FROM [BT]tabRouting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Routing"
      ],
      "question": "What ERP record helps organize the sequence of manufacturing tasks?",
      "fields": [
        "routing_name",
        "operations"
      ]
    },
    "output": "frappe.db.sql('SELECT routing_name, operations FROM [BT]tabRouting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Routing"
      ],
      "question": "Show me the routing used for our engine assembly line.",
      "fields": [
        "routing_name"
      ]
    },
    "output": "frappe.db.sql('SELECT routing_name FROM [BT]tabRouting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "Where can I define the types of shares available for employees or users?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT title, description FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "I need to update the description of a specific share type. Where do I do that?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT title, description FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "Show me all the share types we\u2019ve created in the system.",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT title, description FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "Can I add a long description to a share type to explain its purpose?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT title, description FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "How do I create a new share type with a specific title?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT title, description FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "What doctype stores information about different types of shares we assign?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT title, description FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "Is there a section to describe the purpose of each share type?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT title, description FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "Where can I maintain the master list of share types in ERPNext?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT title, description FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "Can I list all titles of the share types defined in our system?",
      "fields": [
        "title"
      ]
    },
    "output": "frappe.db.sql('SELECT title FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "How do I view or edit a share type\u2019s details like name and description?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT title, description FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "Is there a field for a text description of each share type?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Share Type"
      ],
      "question": "Which document stores the labels and notes for share classifications?",
      "fields": [
        "title",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT title, description FROM [BT]tabShare Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Routing"
      ],
      "question": "Can I assign multiple BOM operations under a single routing plan?",
      "fields": [
        "operations"
      ]
    },
    "output": "frappe.db.sql('SELECT operations FROM [BT]tabRouting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Routing"
      ],
      "question": "List all active routings available in the system.",
      "fields": [
        "routing_name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('SELECT routing_name, disabled FROM [BT]tabRouting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Routing"
      ],
      "question": "How do I configure a routing for a new batch production?",
      "fields": [
        "routing_name",
        "operations"
      ]
    },
    "output": "frappe.db.sql('SELECT routing_name, operations FROM [BT]tabRouting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Routing"
      ],
      "question": "Where are the routing names and their operations recorded?",
      "fields": [
        "routing_name",
        "operations"
      ]
    },
    "output": "frappe.db.sql('SELECT routing_name, operations FROM [BT]tabRouting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Guarantee"
      ],
      "question": "Where do I record details of a provided bank guarantee linked to a customer project?",
      "fields": [
        "reference_doctype",
        "reference_docname",
        "project"
      ]
    },
    "output": "frappe.db.sql('SELECT project] FROM [BT]tabBank Guarantee[BT] WHERE name = \"reference_docname\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Guarantee"
      ],
      "question": "How can I capture the bank, bank account, and SWIFT number for a guarantee?",
      "fields": [
        "bank",
        "bank_account",
        "swift_number"
      ]
    },
    "output": "frappe.db.sql('SELECT swift_number] FROM [BT]tabBank Guarantee[BT] WHERE name = \"bank_account\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Guarantee"
      ],
      "question": "Is there a place to store the IBAN and branch code for bank guarantee processing?",
      "fields": [
        "iban",
        "branch_code"
      ]
    },
    "output": "frappe.db.sql('SELECT iban, branch_code FROM [BT]tabBank Guarantee[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Guarantee"
      ],
      "question": "Where can I set the amount, start date, and validity of a bank guarantee?",
      "fields": [
        "amount",
        "start_date",
        "validity"
      ]
    },
    "output": "frappe.db.sql('SELECT validity] FROM [BT]tabBank Guarantee[BT] WHERE name = \"start_date\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Guarantee"
      ],
      "question": "Can I store clauses or additional terms related to the bank guarantee?",
      "fields": [
        "more_information"
      ]
    },
    "output": "frappe.db.sql('SELECT more_information FROM [BT]tabBank Guarantee[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Guarantee"
      ],
      "question": "Which document holds the reference to a supplier's fixed deposit and margin money?",
      "fields": [
        "fixed_deposit_number",
        "margin_money"
      ]
    },
    "output": "frappe.db.sql('SELECT fixed_deposit_number, margin_money FROM [BT]tabBank Guarantee[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Guarantee"
      ],
      "question": "Where do I maintain the bank guarantee number and the name of the beneficiary?",
      "fields": [
        "bank_guarantee_number",
        "name_of_beneficiary"
      ]
    },
    "output": "frappe.db.sql('SELECT bank_guarantee_number, name_of_beneficiary FROM [BT]tabBank Guarantee[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Guarantee"
      ],
      "question": "How can I track charges incurred for issuing a bank guarantee?",
      "fields": [
        "charges"
      ]
    },
    "output": "frappe.db.sql('SELECT charges FROM [BT]tabBank Guarantee[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Guarantee"
      ],
      "question": "Is there a form where I can input a dynamic reference to a project or invoice for the guarantee?",
      "fields": [
        "project",
        "reference_doctype",
        "reference_docname"
      ]
    },
    "output": "frappe.db.sql('SELECT reference_docname] FROM [BT]tabBank Guarantee[BT] WHERE name = \"reference_doctype\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Conversion Factor"
      ],
      "question": "Where can I define how many boxes equal one pallet for a product category?",
      "fields": [
        "category",
        "from_uom",
        "to_uom"
      ]
    },
    "output": "frappe.db.sql('SELECT category, from_uom, to_uom FROM [BT]tabUOM Conversion Factor[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Conversion Factor"
      ],
      "question": "How do I set up the conversion from kilograms to grams in a specific category?",
      "fields": [
        "category",
        "from_uom",
        "to_uom"
      ]
    },
    "output": "frappe.db.sql('SELECT category, from_uom, to_uom FROM [BT]tabUOM Conversion Factor[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Conversion Factor"
      ],
      "question": "Can I create a rule to convert meters to centimeters under a UOM category?",
      "fields": [
        "category",
        "from_uom",
        "to_uom"
      ]
    },
    "output": "frappe.db.sql('SELECT category, from_uom, to_uom FROM [BT]tabUOM Conversion Factor[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Conversion Factor"
      ],
      "question": "Where do I input the factor to convert from cartons to units?",
      "fields": [
        "category",
        "from_uom",
        "to_uom"
      ]
    },
    "output": "frappe.db.sql('SELECT category, from_uom, to_uom FROM [BT]tabUOM Conversion Factor[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Conversion Factor"
      ],
      "question": "How is the conversion value defined between 'From' and 'To' UOMs?",
      "fields": [
        "from_uom",
        "to_uom",
        "value"
      ]
    },
    "output": "frappe.db.sql('SELECT value] FROM [BT]tabUOM Conversion Factor[BT] WHERE name = \"to_uom\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Conversion Factor"
      ],
      "question": "Where can I specify a UOM conversion within the 'Weight' category?",
      "fields": [
        "category",
        "from_uom",
        "to_uom"
      ]
    },
    "output": "frappe.db.sql('SELECT category, from_uom, to_uom FROM [BT]tabUOM Conversion Factor[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Conversion Factor"
      ],
      "question": "What document do I use to declare that 1 box equals 12 pieces?",
      "fields": [
        "category",
        "from_uom",
        "to_uom",
        "value"
      ]
    },
    "output": "frappe.db.sql('SELECT value] FROM [BT]tabUOM Conversion Factor[BT] WHERE name = \"to_uom\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Conversion Factor"
      ],
      "question": "Can I map a conversion from dozens to units under a category?",
      "fields": [
        "category",
        "from_uom",
        "to_uom"
      ]
    },
    "output": "frappe.db.sql('SELECT category, from_uom, to_uom FROM [BT]tabUOM Conversion Factor[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Conversion Factor"
      ],
      "question": "Is there a place to manage all unit of measurement conversions by category?",
      "fields": [
        "category",
        "from_uom",
        "to_uom"
      ]
    },
    "output": "frappe.db.sql('SELECT category, from_uom, to_uom FROM [BT]tabUOM Conversion Factor[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Conversion Factor"
      ],
      "question": "How do I enter the value to convert from gallons to liters?",
      "fields": [
        "category",
        "from_uom",
        "to_uom",
        "value"
      ]
    },
    "output": "frappe.db.sql('SELECT category, from_uom, to_uom, value FROM [BT]tabUOM Conversion Factor[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Conversion Factor"
      ],
      "question": "Which form holds the link between different units like 'kg' and 'lb'?",
      "fields": [
        "category",
        "from_uom",
        "to_uom",
        "value"
      ]
    },
    "output": "frappe.db.sql('SELECT category, from_uom, to_uom, value FROM [BT]tabUOM Conversion Factor[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UOM Conversion Factor"
      ],
      "question": "Can I update a conversion factor between pieces and packets?",
      "fields": [
        "category",
        "from_uom",
        "to_uom",
        "value"
      ]
    },
    "output": "frappe.db.sql('SELECT category, from_uom, to_uom, value FROM [BT]tabUOM Conversion Factor[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Guarantee"
      ],
      "question": "Which form captures whether the guarantee is for receiving or providing?",
      "fields": [
        "bg_type"
      ]
    },
    "output": "frappe.db.sql('SELECT bg_type FROM [BT]tabBank Guarantee[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Guarantee"
      ],
      "question": "Can I view or edit a previous version of a bank guarantee that was amended?",
      "fields": [
        "name",
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('SELECT name, amended_from FROM [BT]tabBank Guarantee[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Guarantee"
      ],
      "question": "Where do we track bank guarantees tied to a specific customer or supplier?",
      "fields": [
        "customer",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('SELECT customer, supplier FROM [BT]tabBank Guarantee[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Settings"
      ],
      "question": "Where is the dispatch template for delivery trips configured?",
      "fields": [
        "dispatch_template"
      ]
    },
    "output": "frappe.db.sql('SELECT dispatch_template FROM [BT]tabDelivery Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Market Segment"
      ],
      "question": "Give me a list of all market segments we\u2019ve created.",
      "fields": [
        "market_segment"
      ]
    },
    "output": "frappe.db.sql('SELECT market_segment FROM [BT]tabMarket Segment[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Market Segment"
      ],
      "question": "Show me the names of all our target market segments.",
      "fields": [
        "market_segment"
      ]
    },
    "output": "frappe.db.sql('SELECT market_segment FROM [BT]tabMarket Segment[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Market Segment"
      ],
      "question": "Check if we have any defined market segments for our business.",
      "fields": [
        "market_segment"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM [BT]tabMarket Segment[BT]  LIMIT 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Market Segment"
      ],
      "question": "List all market segments registered in the system that contain the word 'Retail'.",
      "fields": [
        "market_segment"
      ]
    },
    "output": "frappe.db.sql('SELECT market_segment FROM [BT]tabMarket Segment[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Market Segment"
      ],
      "question": "Show all market segments we\u2019ve added so far.",
      "fields": [
        "market_segment"
      ]
    },
    "output": "frappe.db.sql('SELECT market_segment FROM [BT]tabMarket Segment[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Market Segment"
      ],
      "question": "Get the names of all our target market segments.",
      "fields": [
        "market_segment"
      ]
    },
    "output": "frappe.db.sql('SELECT market_segment FROM [BT]tabMarket Segment[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Market Segment"
      ],
      "question": "Check if we have any market segments added in the system.",
      "fields": [
        "market_segment"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM [BT]tabMarket Segment[BT]  LIMIT 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Market Segment"
      ],
      "question": "Show me market segments that include the word 'Retail'.",
      "fields": [
        "market_segment"
      ]
    },
    "output": "frappe.db.sql('SELECT market_segment FROM [BT]tabMarket Segment[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Account Subtype"
      ],
      "question": "What are the available subtypes for bank accounts in our system?",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.db.sql('SELECT account_subtype FROM [BT]tabBank Account Subtype[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Account Subtype"
      ],
      "question": "Show me a list of all defined bank account subtypes.",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.db.sql('SELECT account_subtype FROM [BT]tabBank Account Subtype[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Account Subtype"
      ],
      "question": "List the subtypes configured under bank account settings.",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.db.sql('SELECT account_subtype FROM [BT]tabBank Account Subtype[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Account Subtype"
      ],
      "question": "Check if we have a 'Savings' or 'Current' subtype in our bank account setup.",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.db.sql('SELECT account_subtype FROM [BT]tabBank Account Subtype[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Account Subtype"
      ],
      "question": "List all custom bank account subtypes added for our company.",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.db.sql('SELECT account_subtype FROM [BT]tabBank Account Subtype[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Account Subtype"
      ],
      "question": "Check if there's a specific subtype for credit card accounts.",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.db.sql('SELECT account_subtype FROM [BT]tabBank Account Subtype[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Account Subtype"
      ],
      "question": "Show the subtype classifications for different bank accounts.",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.db.sql('SELECT account_subtype FROM [BT]tabBank Account Subtype[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Account Subtype"
      ],
      "question": "Check if bank accounts are categorized by subtype anywhere in the system.",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM [BT]tabBank Account Subtype[BT]  LIMIT 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Account Subtype"
      ],
      "question": "List any subtypes like 'Overdraft' and 'Cash Credit' if they're in ERPNext.",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.db.sql('SELECT account_subtype FROM [BT]tabBank Account Subtype[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Account Subtype"
      ],
      "question": "Show how bank accounts are grouped by subtype in our configuration.",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.db.sql('SELECT account_subtype FROM [BT]tabBank Account Subtype[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Account Subtype"
      ],
      "question": "Check if our ERP system stores subtypes for different bank account types.",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM [BT]tabBank Account Subtype[BT]  LIMIT 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bank Account Subtype"
      ],
      "question": "Which document holds the labels for bank account subtypes?",
      "fields": [
        "account_subtype"
      ]
    },
    "output": "frappe.db.sql('SELECT account_subtype FROM [BT]tabBank Account Subtype[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee Group"
      ],
      "question": "Can you show me all the employee groups we\u2019ve created so far?",
      "fields": [
        "employee_group_name"
      ]
    },
    "output": "frappe.db.sql('SELECT employee_group_name FROM [BT]tabEmployee Group[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee Group"
      ],
      "question": "Which group is assigned to our warehouse staff?",
      "fields": [
        "employee_group_name"
      ]
    },
    "output": "frappe.db.sql('SELECT employee_group_name FROM [BT]tabEmployee Group[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee Group"
      ],
      "question": "List the employees in the Logistics employee group.",
      "fields": [
        "employee_group_name",
        "employee_list"
      ]
    },
    "output": "frappe.db.sql('SELECT employee_group_name, employee_list FROM [BT]tabEmployee Group[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee Group"
      ],
      "question": "Do we have an employee group for our temporary staff?",
      "fields": [
        "employee_group_name"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM [BT]tabEmployee Group[BT] WHERE name = \"%temporary%\" LIMIT 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee Group"
      ],
      "question": "Which employees are part of the 'Sales Team A' group?",
      "fields": [
        "employee_group_name",
        "employee_list"
      ]
    },
    "output": "frappe.db.sql('SELECT employee_group_name, employee_list FROM [BT]tabEmployee Group[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee Group"
      ],
      "question": "Show me the list of employee groups that include at least one member.",
      "fields": [
        "employee_group_name",
        "employee_list"
      ]
    },
    "output": "frappe.db.sql('SELECT employee_group_name, employee_list FROM [BT]tabEmployee Group[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee Group"
      ],
      "question": "How many employee groups are defined in our system?",
      "fields": [
        "employee_group_name"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabEmployee Group[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee Group"
      ],
      "question": "Is John Smith part of any employee group?",
      "fields": [
        "employee_list"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM [BT]tabEmployee Group[BT] WHERE name = \"%John Smith%\" LIMIT 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee Group"
      ],
      "question": "Find all employee groups with names starting with 'Admin'.",
      "fields": [
        "employee_group_name"
      ]
    },
    "output": "frappe.db.sql('SELECT employee_group_name FROM [BT]tabEmployee Group[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee Group"
      ],
      "question": "Can I see a breakdown of employees under each employee group?",
      "fields": [
        "employee_group_name",
        "employee_list"
      ]
    },
    "output": "frappe.db.sql('SELECT employee_group_name, employee_list FROM [BT]tabEmployee Group[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee Group"
      ],
      "question": "Which employee group does our support staff belong to?",
      "fields": [
        "employee_group_name",
        "employee_list"
      ]
    },
    "output": "frappe.db.sql('SELECT employee_group_name, employee_list FROM [BT]tabEmployee Group[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Auto Repeat"
      ],
      "question": "List all auto-repeat setups scheduled to run weekly.",
      "fields": [
        "frequency"
      ]
    },
    "output": "frappe.db.sql('SELECT frequency FROM [BT]tabAuto Repeat[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Auto Repeat"
      ],
      "question": "How many auto-repeat tasks are active in April 2025?",
      "fields": [
        "start_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabAuto Repeat[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Auto Repeat"
      ],
      "question": "Do we have any auto-repeat configurations without an end date?",
      "fields": [
        "end_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM [BT]tabAuto Repeat[BT]  LIMIT 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Auto Repeat"
      ],
      "question": "What is the next scheduled date for any auto-repeat task?",
      "fields": [
        "next_schedule_date"
      ]
    },
    "output": "frappe.db.sql('SELECT next_schedule_date FROM [BT]tabAuto Repeat[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Auto Repeat"
      ],
      "question": "Which auto-repeat entries have email notifications enabled?",
      "fields": [
        "notify_by_email"
      ]
    },
    "output": "frappe.db.sql('SELECT notify_by_email FROM [BT]tabAuto Repeat[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Auto Repeat"
      ],
      "question": "List auto-repeat tasks that include a reminder template.",
      "fields": [
        "template"
      ]
    },
    "output": "frappe.db.sql('SELECT template FROM [BT]tabAuto Repeat[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Auto Repeat"
      ],
      "question": "Get the email recipients configured for each auto-repeat task.",
      "fields": [
        "recipients"
      ]
    },
    "output": "frappe.db.sql('SELECT recipients FROM [BT]tabAuto Repeat[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Auto Repeat"
      ],
      "question": "Fetch contact emails set using the get_contacts option.",
      "fields": [
        "get_contacts"
      ]
    },
    "output": "frappe.db.sql('SELECT get_contacts FROM [BT]tabAuto Repeat[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Auto Repeat"
      ],
      "question": "How many auto-repeat entries are linked to Sales Invoice or Purchase Invoice?",
      "fields": [
        "reference_doctype"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabAuto Repeat[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Auto Repeat"
      ],
      "question": "Get preview messages used in existing auto-repeat email templates.",
      "fields": [
        "preview_message"
      ]
    },
    "output": "frappe.db.sql('SELECT preview_message FROM [BT]tabAuto Repeat[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Auto Repeat"
      ],
      "question": "Which print formats are linked to auto-repeat records?",
      "fields": [
        "print_format"
      ]
    },
    "output": "frappe.db.sql('SELECT print_format FROM [BT]tabAuto Repeat[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UAE VAT Settings"
      ],
      "question": "Fetch the UAE VAT account configuration for Gulf Trading LLC.",
      "fields": [
        "name",
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.db.sql('SELECT name, company, uae_vat_accounts FROM [BT]tabUAE VAT Settings[BT] WHERE company = \"Gulf Trading LLC\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounting Period"
      ],
      "question": "Where do I define the start and end dates for a fiscal period?",
      "fields": [
        "name",
        "start_date",
        "end_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, start_date, end_date FROM [BT]tabAccounting Period[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounting Period"
      ],
      "question": "How can I assign a company to a specific accounting period?",
      "fields": [
        "name",
        "period_name",
        "company"
      ]
    },
    "output": "frappe.db.sql('SELECT name, period_name, company FROM [BT]tabAccounting Period[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounting Period"
      ],
      "question": "Where can I view all closed documents within a fiscal period?",
      "fields": [
        "name",
        "period_name",
        "closed_documents"
      ]
    },
    "output": "frappe.db.sql('SELECT name, period_name, closed_documents FROM [BT]tabAccounting Period[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounting Period"
      ],
      "question": "Is there a way to restrict entries for closed periods in ERPNext?",
      "fields": [
        "name",
        "period_name",
        "closed_documents"
      ]
    },
    "output": "frappe.db.sql('SELECT name, period_name, closed_documents FROM [BT]tabAccounting Period[BT] WHERE closed_documents != \"\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounting Period"
      ],
      "question": "I want to block certain financial entries after year-end. How do I do that?",
      "fields": [
        "name",
        "end_date",
        "closed_documents"
      ]
    },
    "output": "frappe.db.sql('SELECT name, period_name, closed_documents FROM [BT]tabAccounting Period[BT] WHERE end_date < CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounting Period"
      ],
      "question": "How do I define a quarterly period and prevent backdated entries for it?",
      "fields": [
        "name",
        "start_date",
        "end_date",
        "closed_documents"
      ]
    },
    "output": "frappe.db.sql('SELECT name, start_date, end_date, closed_documents FROM [BT]tabAccounting Period[BT] WHERE closed_documents != \"\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounting Period"
      ],
      "question": "Where do I close specific documents for a particular accounting period?",
      "fields": [
        "name",
        "period_name",
        "closed_documents"
      ]
    },
    "output": "frappe.db.sql('SELECT name, period_name, closed_documents FROM [BT]tabAccounting Period[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounting Period"
      ],
      "question": "Check if there's any defined accounting period for the company 'Zenthos Maritime Holdings'.",
      "fields": [
        "name",
        "company"
      ]
    },
    "output": "frappe.db.sql('SELECT name, company FROM [BT]tabAccounting Period[BT] WHERE company = \"Zenthos Maritime Holdings\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounting Period"
      ],
      "question": "How many accounting periods are configured in total?",
      "fields": [
        "name",
        "period_name"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(name) AS total_accounting_periods FROM [BT]tabAccounting Period[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounting Period"
      ],
      "question": "Get the start and end date of the accounting period named 'Q3 Closing FY 2023-24'.",
      "fields": [
        "name",
        "start_date",
        "end_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, start_date, end_date FROM [BT]tabAccounting Period[BT] WHERE name = \"Q3 Closing FY 2023-24\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Invoice Discounting"
      ],
      "question": "What is the loan account linked to transaction ID 'INV-DISC-0045'?",
      "fields": [
        "short_term_loan"
      ]
    },
    "output": "frappe.db.sql('SELECT short_term_loan,as_dict=True FROM [BT]tabInvoice Discounting[BT] WHERE name = \"INV-DISC-0045\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Invoice Discounting"
      ],
      "question": "Do we have any invoice discounting record for account 'Citibank Receivables'?",
      "fields": [
        "short_term_loan"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM [BT]tabInvoice Discounting[BT]  LIMIT 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse Type"
      ],
      "question": "Where can I define different categories for my warehouses like cold storage or transit?",
      "fields": [
        "name",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT name, description FROM [BT]tabWarehouse Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse Type"
      ],
      "question": "How do I add a label or classification for each warehouse we manage?",
      "fields": [
        "name",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabWarehouse Type[BT] WHERE name = \"Cold Storage\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse Type"
      ],
      "question": "Can I describe the function or specialization of a warehouse?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabWarehouse Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse Type"
      ],
      "question": "What doctype should I use to set a type like 'finished goods' or 'raw materials' warehouse?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM [BT]tabWarehouse Type[BT]  LIMIT 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse Type"
      ],
      "question": "Where do I configure custom warehouse types with brief descriptions?",
      "fields": [
        "name",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT name, description FROM [BT]tabWarehouse Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "How many warehouses are categorized under \u2018Cold Storage\u2019?",
      "fields": [
        "warehouse_type"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabWarehouse[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "List all warehouses tagged as \u2018Transit\u2019 type.",
      "fields": [
        "name",
        "warehouse_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, warehouse_type FROM [BT]tabWarehouse[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Fetch full details of warehouse named 'Central Depot'.",
      "fields": []
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabWarehouse[BT] WHERE name = \"Central Depot\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "What are the names and types of all operational warehouses?",
      "fields": [
        "name",
        "warehouse_type"
      ]
    },
    "output": "frappe.db.sql('SELECT name, warehouse_type FROM [BT]tabWarehouse[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Loyalty Program"
      ],
      "question": "Fetch full configuration for the program named 'Gold Rewards'.",
      "fields": []
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabLoyalty Program[BT] WHERE name = \"Gold Rewards\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouses were created this month?",
      "fields": [
        "name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, creation FROM [BT]tabWarehouse[BT] WHERE YEAR(creation) = YEAR(CURDATE()) AND MONTH(creation) = MONTH(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Loyalty Program"
      ],
      "question": "List all loyalty programs active between Jan and Mar 2025.",
      "fields": [
        "loyalty_program_name",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_program_name, from_date, to_date FROM [BT]tabLoyalty Program[BT] WHERE from_date <= '2025-03-31' AND to_date >= '2025-01-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Loyalty Program"
      ],
      "question": "How many loyalty programs have auto-enrollment enabled?",
      "fields": [
        "auto_opt_in"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) AS auto_enrolled FROM [BT]tabLoyalty Program[BT] WHERE auto_opt_in = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Loyalty Program"
      ],
      "question": "Show all loyalty programs assigned to the 'Retail Customers' group.",
      "fields": [
        "loyalty_program_name",
        "customer_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_program_name, customer_group FROM [BT]tabLoyalty Program[BT] WHERE customer_group = \"Retail Customers\"''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Loyalty Program"
      ],
      "question": "List loyalty programs that expire within 90 days of creation.",
      "fields": [
        "loyalty_program_name",
        "expiry_duration"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_program_name, expiry_duration FROM [BT]tabLoyalty Program[BT] WHERE DATEDIFF(to_date, from_date) <= 90''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Loyalty Program"
      ],
      "question": "What is the expiry duration for the loyalty program 'Premium Gold'?",
      "fields": [
        "expiry_duration"
      ]
    },
    "output": "frappe.db.sql('''SELECT expiry_duration FROM [BT]tabLoyalty Program[BT] WHERE loyalty_program_name = \"Premium Gold\"''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Loyalty Program"
      ],
      "question": "Which expense account is linked to the loyalty program 'Silver Tier'?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT expense_account FROM [BT]tabLoyalty Program[BT] WHERE loyalty_program_name = \"Silver Tier\"''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Loyalty Program"
      ],
      "question": "List all loyalty programs defined for company 'MyShop Corp'.",
      "fields": [
        "name",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company FROM [BT]tabLoyalty Program[BT] WHERE company = \"MyShop Corp\"''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Loyalty Program"
      ],
      "question": "Can you show all loyalty programs restricted to 'North Region'?",
      "fields": [
        "loyalty_program_name",
        "customer_territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_program_name, customer_territory FROM [BT]tabLoyalty Program[BT] WHERE customer_territory = \"North Region\"''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Loyalty Program"
      ],
      "question": "How do I set up a new loyalty program for my customers?",
      "fields": [
        "loyalty_program_name",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_program_name, from_date, to_date FROM [BT]tabLoyalty Program[BT] ORDER BY creation DESC LIMIT 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Loyalty Program"
      ],
      "question": "Where can I configure different tiers for customer loyalty rewards?",
      "fields": [
        "loyalty_program_type",
        "rules"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_program_type, rules FROM [BT]tabLoyalty Program[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Loyalty Program"
      ],
      "question": "Can I automatically enroll all customers into a loyalty scheme?",
      "fields": [
        "auto_opt_in"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_program_name, auto_opt_in FROM [BT]tabLoyalty Program[BT] WHERE auto_opt_in = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Loyalty Program"
      ],
      "question": "Where do I set the date range during which a loyalty program is active?",
      "fields": [
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_program_name, from_date, to_date FROM [BT]tabLoyalty Program[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Loyalty Program"
      ],
      "question": "How can I define the conversion rate from currency to loyalty points?",
      "fields": [
        "conversion_factor"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_program_name, conversion_factor FROM [BT]tabLoyalty Program[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Loyalty Program"
      ],
      "question": "Where can I specify the account that logs loyalty program expenses?",
      "fields": [
        "expense_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_program_name, expense_account FROM [BT]tabLoyalty Program[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Loyalty Program"
      ],
      "question": "How do I define how long loyalty points are valid for?",
      "fields": [
        "expiry_duration"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_program_name, expiry_duration FROM [BT]tabLoyalty Program[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Loyalty Program"
      ],
      "question": "Can I restrict a loyalty scheme to customers in a specific region?",
      "fields": [
        "customer_territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_program_name, customer_territory FROM [BT]tabLoyalty Program[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Loyalty Program"
      ],
      "question": "How many loyalty programs are linked to the 'Retail Customers' group?",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) AS programs_count FROM [BT]tabLoyalty Program[BT] WHERE customer_group = \"Retail Customers\"''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Loyalty Program"
      ],
      "question": "Fetch the full details of the 'Gold Tier' loyalty program.",
      "fields": []
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabLoyalty Program[BT] WHERE loyalty_program_name = \"Gold Tier\"''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Shipping Rule"
      ],
      "question": "Where do I define the shipping cost rules for sales orders?",
      "fields": [
        "label",
        "shipping_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT label, shipping_amount FROM [BT]tabShipping Rule[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Shipping Rule"
      ],
      "question": "How do I configure a shipping rule specific to purchases?",
      "fields": [
        "shipping_rule_type"
      ]
    },
    "output": "frappe.db.sql('SELECT shipping_rule_type FROM [BT]tabShipping Rule[BT] WHERE shipping_rule_type = \"Purchase\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Shipping Rule"
      ],
      "question": "Can I set a fixed shipping fee regardless of order size?",
      "fields": [
        "calculate_based_on",
        "shipping_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT calculate_based_on, shipping_amount FROM [BT]tabShipping Rule[BT] WHERE calculate_based_on = \"Fixed\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Shipping Rule"
      ],
      "question": "Where can I disable a shipping rule that’s no longer in use?",
      "fields": [
        "disabled"
      ]
    },
    "output": "frappe.db.sql('SELECT name, disabled FROM [BT]tabShipping Rule[BT] WHERE disabled = 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Shipping Rule"
      ],
      "question": "How do I link shipping charges to a specific cost center?",
      "fields": [
        "cost_center"
      ]
    },
    "output": "frappe.db.sql('SELECT name, cost_center FROM [BT]tabShipping Rule[BT] WHERE cost_center IS NOT NULL', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Shipping Rule"
      ],
      "question": "Where can I assign an account for booking shipping charges?",
      "fields": [
        "account"
      ]
    },
    "output": "frappe.db.sql('SELECT name, account FROM [BT]tabShipping Rule[BT] WHERE account IS NOT NULL', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Priority"
      ],
      "question": "Get the full record for the issue priority labeled 'Critical'.",
      "fields": []
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabIssue Priority[BT] WHERE name = \"Critical\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Priority"
      ],
      "question": "How many priority levels have a non-empty description?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabIssue Priority[BT] WHERE description IS NOT NULL AND description != \"\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Priority"
      ],
      "question": "What do I use to define urgency levels for issues reported by customers?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabIssue Priority[BT] WHERE name = \"High\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Priority"
      ],
      "question": "Can I customize the meaning of 'High Priority' or 'Low Priority' for our support team?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabIssue Priority[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Priority"
      ],
      "question": "Where can I update the description for critical issues in the system?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabIssue Priority[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Priority"
      ],
      "question": "How can I add a note or explanation for what each issue priority means?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabIssue Priority[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Priority"
      ],
      "question": "Can I create a new custom priority level for incoming issues?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabIssue Priority[BT] WHERE name = \"Custom Priority\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Priority"
      ],
      "question": "How many issue priority labels have a description added?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabIssue Priority[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Priority"
      ],
      "question": "I want to check what note is linked to the 'Urgent' issue priority.",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description,as_dict=True FROM [BT]tabIssue Priority[BT] WHERE name = \"Urgent\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Personal Data Download Request"
      ],
      "question": "How can a user request a copy of all their personal data?",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabPersonal Data Download Request[BT] WHERE name = \"REQ-USER-0001\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Personal Data Download Request"
      ],
      "question": "Where do I track user requests to download their personal information?",
      "fields": [
        "user",
        "user_name"
      ]
    },
    "output": "frappe.db.sql('SELECT user, user_name FROM [BT]tabPersonal Data Download Request[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Personal Data Download Request"
      ],
      "question": "Where can I review historical personal data download requests?",
      "fields": [
        "user",
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('SELECT user, amended_from FROM [BT]tabPersonal Data Download Request[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Personal Data Download Request"
      ],
      "question": "How can I check if a user has already requested a data export?",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.db.sql('SELECT user FROM [BT]tabPersonal Data Download Request[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Personal Data Download Request"
      ],
      "question": "I need to know which users requested their personal data. Where can I find this?",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.db.sql('SELECT user FROM [BT]tabPersonal Data Download Request[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Personal Data Download Request"
      ],
      "question": "Is there a way to log when a user requests to download their account data?",
      "fields": [
        "user",
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('SELECT user, amended_from FROM [BT]tabPersonal Data Download Request[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Personal Data Download Request"
      ],
      "question": "How many users have submitted personal data download requests?",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabPersonal Data Download Request[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Personal Data Download Request"
      ],
      "question": "Can I track multiple personal data requests from the same user?",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.db.sql('SELECT user FROM [BT]tabPersonal Data Download Request[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Personal Data Download Request"
      ],
      "question": "Where are GDPR personal data access requests recorded?",
      "fields": [
        "user_name",
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('SELECT user_name, amended_from FROM [BT]tabPersonal Data Download Request[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Personal Data Download Request"
      ],
      "question": "Which doctype stores the name of the user requesting data export?",
      "fields": [
        "user_name"
      ]
    },
    "output": "frappe.db.sql('SELECT user_name FROM [BT]tabPersonal Data Download Request[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Personal Data Download Request"
      ],
      "question": "Where do I store amendments to previous personal data requests?",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('SELECT amended_from FROM [BT]tabPersonal Data Download Request[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Personal Data Download Request"
      ],
      "question": "Is there a record of personal data export requests initiated by users?",
      "fields": []
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabPersonal Data Download Request[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Invoice Discounting"
      ],
      "question": "Where can I associate multiple invoices with a single invoice discounting record?",
      "fields": [
        "invoices"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabInvoice Discounting[BT] WHERE name = \"INV-DISC-0005\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Invoice Discounting"
      ],
      "question": "How can I capture total discounting amount and track settlement status?",
      "fields": [
        "total_amount",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT total_amount, status FROM [BT]tabInvoice Discounting[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "How do I add a new issue type like 'Login Problem' or 'System Error'?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabIssue Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "Where do I maintain a list of issue types for categorizing customer tickets?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabIssue Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "Which form lets me add a short description for a new issue category?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabIssue Type[BT] WHERE name = \"New Category\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "I need to update the descriptions for our existing support issue types. Where do I go?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabIssue Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "Where can I configure common categories for helpdesk and IT support tickets?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabIssue Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "Is there a place to manage predefined issue categories for reporting purposes?",
      "fields": []
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabIssue Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "What do I use to classify technical support tickets into types?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabIssue Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "How do I record different types of issues that users frequently report?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabIssue Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "I want to create a new category for product-related complaints. Which module should I use?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabIssue Type[BT] WHERE name = \"Product Complaints\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "Can I group issues based on type for better analysis? Where do I do this?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabIssue Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "Which form lets me add a short description for a new issue category?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabIssue Type[BT] WHERE name = \"New Category\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "I need to update the descriptions for our existing support issue types. Where do I go?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabIssue Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "Where can I configure common categories for helpdesk and IT support tickets?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabIssue Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "Is there a place to manage predefined issue categories for reporting purposes?",
      "fields": []
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabIssue Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "What do I use to classify technical support tickets into types?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabIssue Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "How do I record different types of issues that users frequently report?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabIssue Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "I want to create a new category for product-related complaints. Which module should I use?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabIssue Type[BT] WHERE name = \"Product Complaints\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "Can I group issues based on type for better analysis? Where do I do this?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabIssue Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "Fetch the description of 'High Priority' issue type.",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabIssue Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "Which form lets me add a short description for a new issue category?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabIssue Type[BT] WHERE name = \"Login Problem\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "Where can I configure common categories for helpdesk and IT support tickets?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabIssue Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "Can I group issues based on type for better analysis?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabIssue Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue Type"
      ],
      "question": "Where do I maintain a list of issue types for categorizing customer tickets?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabIssue Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tag"
      ],
      "question": "How do I create a new tag to categorize my records?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabTag[BT] WHERE name = \"New Category\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tag"
      ],
      "question": "Which doctype lets me define labels or tags for better grouping?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabTag[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tag"
      ],
      "question": "Where do I add a tag description for my items or documents?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabTag[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tag"
      ],
      "question": "Which tag is used to label important documents?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabTag[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tag"
      ],
      "question": "How many tags have the word 'Sales' in their description?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabTag[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tag"
      ],
      "question": "Where can I edit the text for a tag label used in CRM records?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabTag[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tag"
      ],
      "question": "I want to reuse a label for filtering records\u2014where do I define that?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabTag[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tag"
      ],
      "question": "How do I store keywords that describe a record for easier search?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabTag[BT] WHERE name = \"CRM-Search-Helper\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tag"
      ],
      "question": "Which doctype is responsible for holding descriptive keywords or labels?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabTag[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tag"
      ],
      "question": "Where do I define a tag used for document categorization?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabTag[BT] WHERE name = \"Document Category\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tag"
      ],
      "question": "Can I create a short description for document tags?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT description FROM [BT]tabTag[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Tag"
      ],
      "question": "Where do I update the meaning behind tags I assign to records?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabTag[BT] WHERE name = \"Sales Lead Tags\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UAE VAT Settings"
      ],
      "question": "How can I view the VAT accounts linked to my company in the UAE?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.db.sql('SELECT company, uae_vat_accounts FROM [BT]tabUAE VAT Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UAE VAT Settings"
      ],
      "question": "Can I add custom VAT accounts for the UAE in the settings?",
      "fields": [
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.db.sql('SELECT uae_vat_accounts FROM [BT]tabUAE VAT Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UAE VAT Settings"
      ],
      "question": "How do I configure the default VAT accounts for the UAE?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabUAE VAT Settings[BT] WHERE name = \"DEFAULT-UAE-VAT\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UAE VAT Settings"
      ],
      "question": "How do I update the VAT accounts after setting them up?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.db.sql('SELECT company, uae_vat_accounts FROM [BT]tabUAE VAT Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UAE VAT Settings"
      ],
      "question": "Can I assign a VAT account to a FrostEcho company in the UAE VAT settings?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql('SELECT company FROM [BT]tabUAE VAT Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UAE VAT Settings"
      ],
      "question": "Is there a way to check which VAT accounts are associated with each company in the UAE?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.db.sql('SELECT company, uae_vat_accounts FROM [BT]tabUAE VAT Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UAE VAT Settings"
      ],
      "question": "Can I remove a VAT account from the UAE VAT settings?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabUAE VAT Settings[BT] WHERE name = \"REMOVE-VAT-2024\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UAE VAT Settings"
      ],
      "question": "How do I add a new company to the UAE VAT settings?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabUAE VAT Settings[BT] WHERE name = \"NEW-COMPANY-VAT\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UAE VAT Settings"
      ],
      "question": "Is it possible to manage multiple UAE VAT accounts under a single company?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabUAE VAT Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UAE VAT Settings"
      ],
      "question": "How do I link my company with the UAE VAT accounts?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.db.sql('SELECT company, uae_vat_accounts FROM [BT]tabUAE VAT Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Voice Call Settings"
      ],
      "question": "How do I set up voice call settings for my user?",
      "fields": [
        "user",
        "call_receiving_device"
      ]
    },
    "output": "frappe.db.sql('SELECT user, call_receiving_device FROM [BT]tabVoice Call Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Voice Call Settings"
      ],
      "question": "Can I choose the device through which voice calls are received?",
      "fields": [
        "user",
        "call_receiving_device"
      ]
    },
    "output": "frappe.db.sql('SELECT user, call_receiving_device FROM [BT]tabVoice Call Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Voice Call Settings"
      ],
      "question": "How do I configure the greeting message for incoming calls?",
      "fields": [
        "user",
        "greeting_message"
      ]
    },
    "output": "frappe.db.sql('SELECT user, greeting_message FROM [BT]tabVoice Call Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Voice Call Settings"
      ],
      "question": "Is it possible to set a message for when the agent is busy?",
      "fields": [
        "agent_busy_message"
      ]
    },
    "output": "frappe.db.sql('SELECT agent_busy_message FROM [BT]tabVoice Call Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Voice Call Settings"
      ],
      "question": "Can I configure an unavailable message for when the agent cannot take a call?",
      "fields": [
        "agent_unavailable_message"
      ]
    },
    "output": "frappe.db.sql('SELECT agent_unavailable_message FROM [BT]tabVoice Call Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Voice Call Settings"
      ],
      "question": "Which device has been set to receive calls for user 'agent1@example.com'?",
      "fields": [
        "user",
        "call_receiving_device"
      ]
    },
    "output": "frappe.db.sql('SELECT user, call_receiving_device FROM [BT]tabVoice Call Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Voice Call Settings"
      ],
      "question": "How many users have configured a custom busy message?",
      "fields": [
        "agent_busy_message"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabVoice Call Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UAE VAT Settings"
      ],
      "question": "Can I assign specific VAT rates to the accounts in the UAE VAT settings?",
      "fields": [
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.db.sql('SELECT uae_vat_accounts FROM [BT]tabUAE VAT Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UAE VAT Settings"
      ],
      "question": "How do I view the VAT accounts linked to my company in the UAE?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.db.sql('SELECT company, uae_vat_accounts FROM [BT]tabUAE VAT Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UAE VAT Settings"
      ],
      "question": "Is it possible to manage multiple UAE VAT accounts under a single company?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabUAE VAT Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UAE VAT Settings"
      ],
      "question": "Which VAT accounts are currently active for 'Global Enterprises'?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.db.sql('SELECT company, uae_vat_accounts FROM [BT]tabUAE VAT Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UAE VAT Settings"
      ],
      "question": "How do I retrieve the full VAT setup record for 'Inspire Group FZ LLC'?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql('SELECT company FROM [BT]tabUAE VAT Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UAE VAT Settings"
      ],
      "question": "Can I list all VAT configurations across companies?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.db.sql('SELECT company, uae_vat_accounts FROM [BT]tabUAE VAT Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "UAE VAT Settings"
      ],
      "question": "I want to update or review VAT account assignments per company. Where should I query?",
      "fields": [
        "company",
        "uae_vat_accounts"
      ]
    },
    "output": "frappe.db.sql('SELECT company, uae_vat_accounts FROM [BT]tabUAE VAT Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Voice Call Settings"
      ],
      "question": "How do I update the call receiving device for a specific user?",
      "fields": [
        "user",
        "call_receiving_device"
      ]
    },
    "output": "frappe.db.sql('SELECT user, call_receiving_device FROM [BT]tabVoice Call Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Voice Call Settings"
      ],
      "question": "Can I assign different devices for different users to receive voice calls?",
      "fields": [
        "user",
        "call_receiving_device"
      ]
    },
    "output": "frappe.db.sql('SELECT user, call_receiving_device FROM [BT]tabVoice Call Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Voice Call Settings"
      ],
      "question": "Is it possible to set up a custom message for when the agent is unavailable?",
      "fields": [
        "agent_unavailable_message"
      ]
    },
    "output": "frappe.db.sql('SELECT agent_unavailable_message FROM [BT]tabVoice Call Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Voice Call Settings"
      ],
      "question": "What happens if I do not set a greeting message for voice calls?",
      "fields": [
        "greeting_message"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabVoice Call Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Voice Call Settings"
      ],
      "question": "How can I enable or disable the greeting message feature?",
      "fields": [
        "user",
        "greeting_message"
      ]
    },
    "output": "frappe.db.sql('SELECT user, greeting_message FROM [BT]tabVoice Call Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Voice Call Settings"
      ],
      "question": "How can I change the greeting message after it has been set?",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.db.sql('SELECT user FROM [BT]tabVoice Call Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Voice Call Settings"
      ],
      "question": "How can I change the greeting message after it has been set?",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.db.sql('SELECT user FROM [BT]tabVoice Call Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Voice Call Settings"
      ],
      "question": "What happens if I do not set a greeting message for voice calls?",
      "fields": [
        "greeting_message"
      ]
    },
    "output": "frappe.db.sql('SELECT greeting_message FROM [BT]tabVoice Call Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Voice Call Settings"
      ],
      "question": "How many users have set a custom agent unavailable message?",
      "fields": [
        "agent_unavailable_message"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabVoice Call Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Auto Repeat"
      ],
      "question": "How can I update the status of an auto-repeat task?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT status FROM [BT]tabAuto Repeat[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Auto Repeat"
      ],
      "question": "How many auto repeat records are currently disabled?",
      "fields": [
        "disabled"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabAuto Repeat[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Voice Call Settings"
      ],
      "question": "Retrieve the call receiving device used by a specific user.",
      "fields": [
        "user",
        "call_receiving_device"
      ]
    },
    "output": "frappe.db.sql('SELECT user, call_receiving_device FROM [BT]tabVoice Call Settings[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Auto Repeat"
      ],
      "question": "Get all auto repeat templates submitted with 'Weekly' frequency.",
      "fields": [
        "frequency"
      ]
    },
    "output": "frappe.db.sql('SELECT frequency FROM [BT]tabAuto Repeat[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "User Select Document Type"
      ],
      "question": "How do I view a list of document types available for a user?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.db.sql('SELECT document_type FROM [BT]tabUser Select Document Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "User Select Document Type"
      ],
      "question": "How do I assign new document types to a user in ERPNext?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabUser Select Document Type[BT] WHERE name = \"Sales Invoice\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "User Select Document Type"
      ],
      "question": "Can I delete a document type assignment from a user?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.db.sql('SELECT document_type FROM [BT]tabUser Select Document Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "User Select Document Type"
      ],
      "question": "How do I manage permissions for selected document types?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.db.sql('SELECT document_type FROM [BT]tabUser Select Document Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "User Select Document Type"
      ],
      "question": "Can I assign multiple document types to a single user?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.db.sql('SELECT document_type FROM [BT]tabUser Select Document Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "User Select Document Type"
      ],
      "question": "How do I restrict users to view only specific document types?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.db.sql('SELECT document_type FROM [BT]tabUser Select Document Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "User Select Document Type"
      ],
      "question": "Can I modify the allowed document types for a user after initial assignment?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.db.sql('SELECT document_type FROM [BT]tabUser Select Document Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "User Select Document Type"
      ],
      "question": "How do I audit document type access by users?",
      "fields": [
        "document_type"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabUser Select Document Type[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Promotional Scheme"
      ],
      "question": "How do I disable a promotional scheme in ERPNext?",
      "fields": [
        "disable"
      ]
    },
    "output": "frappe.db.sql('SELECT disable FROM [BT]tabPromotional Scheme[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Promotional Scheme"
      ],
      "question": "Which schemes apply to customer groups and are not disabled?",
      "fields": [
        "customer_group",
        "disable"
      ]
    },
    "output": "frappe.db.sql('SELECT customer_group, disable FROM [BT]tabPromotional Scheme[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Promotional Scheme"
      ],
      "question": "Fetch promotional schemes applicable to the brand 'Acme'",
      "fields": [
        "brands"
      ]
    },
    "output": "frappe.db.sql('SELECT brands FROM [BT]tabPromotional Scheme[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Promotional Scheme"
      ],
      "question": "How many promotional schemes are linked to the campaign 'Festive2025'?",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabPromotional Scheme[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Promotional Scheme"
      ],
      "question": "What is the scheme valid from January 1 to March 31, 2025?",
      "fields": [
        "valid_from",
        "valid_upto"
      ]
    },
    "output": "frappe.db.sql('SELECT valid_from, valid_upto FROM [BT]tabPromotional Scheme[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Promotional Scheme"
      ],
      "question": "What is the start date of the 'Summer Promo 2025' scheme?",
      "fields": [
        "valid_from"
      ]
    },
    "output": "frappe.db.sql('SELECT valid_from FROM [BT]tabPromotional Scheme[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "Where can I find the redirect URI tied to an OAuth code in ERPNext?",
      "fields": [
        "authorization_code",
        "redirect_uri_bound_to_authorization_code"
      ]
    },
    "output": "frappe.db.sql('SELECT authorization_code, redirect_uri_bound_to_authorization_code FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "How do I validate the code challenge method used in an OAuth transaction?",
      "fields": [
        "code_challenge_method"
      ]
    },
    "output": "frappe.db.sql('SELECT code_challenge_method FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "Where do I set the lifetime or validity of an OAuth authorization code in ERPNext?",
      "fields": [
        "validity"
      ]
    },
    "output": "frappe.db.sql('SELECT validity FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "How many OAuth codes were generated by user [BT]jane@example.com[BT]?",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "How can I check if a specific authorization code has expired in ERPNext?",
      "fields": [
        "authorization_code",
        "expiration_time"
      ]
    },
    "output": "frappe.db.sql('SELECT authorization_code, expiration_time FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "Where can I find the redirect URI tied to an OAuth code in ERPNext?",
      "fields": [
        "authorization_code",
        "redirect_uri_bound_to_authorization_code"
      ]
    },
    "output": "frappe.db.sql('SELECT authorization_code, redirect_uri_bound_to_authorization_code FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "How do I validate the code challenge method used in an OAuth transaction?",
      "fields": [
        "code_challenge_method"
      ]
    },
    "output": "frappe.db.sql('SELECT code_challenge_method FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "Where do I set the lifetime or validity of an OAuth authorization code in ERPNext?",
      "fields": [
        "validity"
      ]
    },
    "output": "frappe.db.sql('SELECT validity FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "How many OAuth codes were generated by user [BT]jane@example.com[BT]?",
      "fields": [
        "user"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "How can I check if a specific authorization code has expired in ERPNext?",
      "fields": [
        "authorization_code",
        "expiration_time"
      ]
    },
    "output": "frappe.db.sql('SELECT authorization_code, expiration_time FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounting Dimension"
      ],
      "question": "How many disabled accounting dimensions do we have?",
      "fields": [
        "disabled"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabAccounting Dimension[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounting Dimension"
      ],
      "question": "How do I list all active accounting dimensions?",
      "fields": [
        "label",
        "document_type"
      ]
    },
    "output": "frappe.db.sql('SELECT label, document_type FROM [BT]tabAccounting Dimension[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounting Dimension"
      ],
      "question": "Can I retrieve the document type of an accounting dimension by label?",
      "fields": [
        "label"
      ]
    },
    "output": "frappe.db.sql('SELECT label FROM [BT]tabAccounting Dimension[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quality Inspection Parameter Group"
      ],
      "question": "How do I fetch all parameter groups?",
      "fields": [
        "group_name"
      ]
    },
    "output": "frappe.db.sql('SELECT group_name FROM [BT]tabQuality Inspection Parameter Group[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quality Inspection Parameter Group"
      ],
      "question": "Can I get details of a parameter group by name?",
      "fields": [
        "group_name"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabQuality Inspection Parameter Group[BT] WHERE name = \"Raw Material Checks\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quality Inspection Parameter Group"
      ],
      "question": "Which parameter groups are used for inspections?",
      "fields": [
        "group_name"
      ]
    },
    "output": "frappe.db.sql('SELECT group_name FROM [BT]tabQuality Inspection Parameter Group[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounting Dimension"
      ],
      "question": "Get the full record for the 'Cost Center' dimension.",
      "fields": [
        "label"
      ]
    },
    "output": "frappe.db.sql('SELECT label FROM [BT]tabAccounting Dimension[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quality Inspection Parameter"
      ],
      "question": "Get the description for the parameter Moisture Content.",
      "fields": [
        "parameter",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT parameter, description FROM [BT]tabQuality Inspection Parameter[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quality Inspection Parameter"
      ],
      "question": "How many parameters belong to the 'Chemical Tests' group?",
      "fields": [
        "parameter_group"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabQuality Inspection Parameter[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quality Inspection Parameter"
      ],
      "question": "Retrieve the full record for the parameter 'PH Level'.",
      "fields": [
        "parameter"
      ]
    },
    "output": "frappe.db.sql('SELECT parameter FROM [BT]tabQuality Inspection Parameter[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quality Inspection Parameter"
      ],
      "question": "Fetch all inspection parameters and their descriptions.",
      "fields": [
        "parameter",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT parameter, description FROM [BT]tabQuality Inspection Parameter[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Voucher"
      ],
      "question": "How do I fetch a landed cost voucher by name?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabLanded Cost Voucher[BT] WHERE name = \"LCV-0001\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Voucher"
      ],
      "question": "List all vouchers created in May 2025.",
      "fields": [
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT posting_date FROM [BT]tabLanded Cost Voucher[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Voucher"
      ],
      "question": "How many landed cost vouchers were amended from previous ones?",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabLanded Cost Voucher[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Voucher"
      ],
      "question": "Get the total tax for voucher LCV-0003.",
      "fields": [
        "total_taxes_and_charges"
      ]
    },
    "output": "frappe.db.sql('SELECT total_taxes_and_charges,as_dict=True FROM [BT]tabLanded Cost Voucher[BT] WHERE name = \"LCV-0003\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Landed Cost Voucher"
      ],
      "question": "Retrieve the distribution method used in voucher LCV-0004.",
      "fields": [
        "distribute_charges_based_on"
      ]
    },
    "output": "frappe.db.sql('SELECT distribute_charges_based_on,as_dict=True FROM [BT]tabLanded Cost Voucher[BT] WHERE name = \"LCV-0004\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounting Dimension"
      ],
      "question": "How can I set default values for my accounting dimension?",
      "fields": [
        "dimension_defaults"
      ]
    },
    "output": "frappe.db.sql('SELECT dimension_defaults FROM [BT]tabAccounting Dimension[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounting Dimension"
      ],
      "question": "How can I disable an accounting dimension?",
      "fields": [
        "label"
      ]
    },
    "output": "frappe.db.sql('SELECT label FROM [BT]tabAccounting Dimension[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Accounting Dimension"
      ],
      "question": "What fields are included in the accounting dimension setup?",
      "fields": [
        "document_type",
        "label",
        "fieldname"
      ]
    },
    "output": "frappe.db.sql('SELECT document_type, label, fieldname FROM [BT]tabAccounting Dimension[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quality Inspection Parameter"
      ],
      "question": "How do I create a new quality inspection parameter?",
      "fields": [
        "parameter",
        "parameter_group",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT parameter, parameter_group, description FROM [BT]tabQuality Inspection Parameter[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quality Inspection Parameter"
      ],
      "question": "What is the role of parameter groups in quality inspection parameters?",
      "fields": [
        "parameter_group"
      ]
    },
    "output": "frappe.db.sql('SELECT parameter_group FROM [BT]tabQuality Inspection Parameter[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quality Inspection Parameter"
      ],
      "question": "How can I link a quality inspection parameter to a group?",
      "fields": [
        "parameter_group"
      ]
    },
    "output": "frappe.db.sql('SELECT parameter_group FROM [BT]tabQuality Inspection Parameter[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quality Inspection Parameter"
      ],
      "question": "What details can I add for each quality inspection parameter?",
      "fields": [
        "parameter",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT parameter, description FROM [BT]tabQuality Inspection Parameter[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Quality Inspection Parameter"
      ],
      "question": "Can I update the description of a quality inspection parameter?",
      "fields": [
        "parameter",
        "description"
      ]
    },
    "output": "frappe.db.sql('SELECT parameter, description FROM [BT]tabQuality Inspection Parameter[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Term"
      ],
      "question": "How do I create a new payment term?",
      "fields": [
        "payment_term_name"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabPayment Term[BT] WHERE name = \"Net 30\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Term"
      ],
      "question": "How can I set a payment term based on invoice date?",
      "fields": [
        "due_date_based_on"
      ]
    },
    "output": "frappe.db.sql('SELECT due_date_based_on FROM [BT]tabPayment Term[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Term"
      ],
      "question": "Can I apply a discount based on payment terms?",
      "fields": [
        "discount"
      ]
    },
    "output": "frappe.db.sql('SELECT discount FROM [BT]tabPayment Term[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Term"
      ],
      "question": "How can I set the payment due date based on the end of the invoice month?",
      "fields": [
        "due_date_based_on",
        "credit_months"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabPayment Term[BT] WHERE name = \"credit_months\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Term"
      ],
      "question": "What options do I have for defining credit terms in payment terms?",
      "fields": [
        "credit_days",
        "credit_months"
      ]
    },
    "output": "frappe.db.sql('SELECT credit_days, credit_months FROM [BT]tabPayment Term[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Term"
      ],
      "question": "How can I apply a discount based on invoice amounts in payment terms?",
      "fields": [
        "discount_type",
        "discount"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabPayment Term[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset Category"
      ],
      "question": "How do I list all asset categories in the system?",
      "fields": [
        "asset_category_name"
      ]
    },
    "output": "frappe.db.sql('SELECT asset_category_name FROM [BT]tabAsset Category[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset Category"
      ],
      "question": "Can I view which asset categories have CWIP accounting enabled?",
      "fields": [
        "asset_category_name",
        "enable_cwip_accounting"
      ]
    },
    "output": "frappe.db.sql('SELECT asset_category_name, enable_cwip_accounting FROM [BT]tabAsset Category[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset Category"
      ],
      "question": "Which finance books are linked to each asset category?",
      "fields": [
        "asset_category_name",
        "finance_books"
      ]
    },
    "output": "frappe.db.sql('SELECT asset_category_name, finance_books FROM [BT]tabAsset Category[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset Category"
      ],
      "question": "How do I retrieve the accounts mapped to each asset category?",
      "fields": [
        "asset_category_name",
        "accounts"
      ]
    },
    "output": "frappe.db.sql('SELECT asset_category_name, accounts FROM [BT]tabAsset Category[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset Category"
      ],
      "question": "Can I view all asset categories in the system?",
      "fields": [
        "asset_category_name"
      ]
    },
    "output": "frappe.db.sql('SELECT asset_category_name FROM [BT]tabAsset Category[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset Category"
      ],
      "question": "How can I view the finance books linked to an asset category?",
      "fields": [
        "finance_books"
      ]
    },
    "output": "frappe.db.sql('SELECT finance_books FROM [BT]tabAsset Category[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset Category"
      ],
      "question": "Can I retrieve the depreciation options for each asset category?",
      "fields": [
        "asset_category_name",
        "depreciation_options"
      ]
    },
    "output": "frappe.db.sql('SELECT asset_category_name, depreciation_options FROM [BT]tabAsset Category[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset Category"
      ],
      "question": "How many asset categories have Capital Work in Progress Accounting enabled?",
      "fields": [
        "enable_cwip_accounting"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabAsset Category[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset Category"
      ],
      "question": "Can I view the list of accounts linked to each asset category?",
      "fields": [
        "asset_category_name",
        "accounts"
      ]
    },
    "output": "frappe.db.sql('SELECT asset_category_name, accounts FROM [BT]tabAsset Category[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset Category"
      ],
      "question": "What is the depreciation setup for the 'Plant & Machinery' category?",
      "fields": [
        "depreciation_options"
      ]
    },
    "output": "frappe.db.sql('SELECT depreciation_options FROM [BT]tabAsset Category[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset Category"
      ],
      "question": "Get the full document of the asset category named 'Office Equipment'.",
      "fields": [
        "asset_category_name"
      ]
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabAsset Category[BT] WHERE name = \"Office Equipment\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "Is the OAuth authorization code OA-9F8X3Q still valid?",
      "fields": [
        "validity"
      ]
    },
    "output": "frappe.db.sql('SELECT validity FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "What code challenge method is used in the OAuth authorization code OA-9F8X3Q?",
      "fields": [
        "code_challenge_method"
      ]
    },
    "output": "frappe.db.sql('SELECT code_challenge_method FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "What are the scopes defined in the OAuth authorization code OA-9F8X3Q?",
      "fields": [
        "scopes"
      ]
    },
    "output": "frappe.db.sql('SELECT scopes FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "What nonce value is used in the OAuth authorization code OA-9F8X3Q?",
      "fields": [
        "nonce"
      ]
    },
    "output": "frappe.db.sql('SELECT nonce FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "What is the validity status of the OAuth authorization code OA-9F8X3Q?",
      "fields": [
        "validity"
      ]
    },
    "output": "frappe.db.sql('SELECT validity FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "Which client is linked to the OAuth authorization code OA-9F8X3Q?",
      "fields": [
        "client"
      ]
    },
    "output": "frappe.db.sql('SELECT client FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "What is the expiration time for the OAuth authorization code OA-9F8X3Q?",
      "fields": [
        "expiration_time"
      ]
    },
    "output": "frappe.db.sql('SELECT expiration_time FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "What is the redirect URI for the OAuth authorization code OA-9F8X3Q?",
      "fields": [
        "redirect_uri_bound_to_authorization_code"
      ]
    },
    "output": "frappe.db.sql('SELECT redirect_uri_bound_to_authorization_code FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "Retrieve all active OAuth authorization codes.",
      "fields": [
        "authorization_code",
        "validity"
      ]
    },
    "output": "frappe.db.sql('SELECT authorization_code, validity FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "Get all OAuth codes that have expired.",
      "fields": [
        "authorization_code",
        "expiration_time"
      ]
    },
    "output": "frappe.db.sql('SELECT authorization_code, expiration_time FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "Fetch the full record for a 89isji authorization code.",
      "fields": [
        "authorization_code"
      ]
    },
    "output": "frappe.db.sql('SELECT authorization_code FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "What is the validity status of the OAuth authorization code 'akjdisjdoi'?",
      "fields": [
        "validity"
      ]
    },
    "output": "frappe.db.sql('SELECT validity FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What were the value changes recorded for ROUTER-GT950 this year?",
      "fields": [
        "name",
        "asset_name",
        "value_after_depreciation"
      ]
    },
    "output": "frappe.db.sql('SELECT name, asset_name, value_after_depreciation FROM [BT]tabAsset[BT] WHERE asset_name = \"ROUTER-GT950\" AND YEAR(creation) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees joined this year?",
      "fields": [
        "name",
        "employee_name",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, date_of_joining FROM [BT]tabEmployee[BT] WHERE YEAR(date_of_joining) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "How many OAuth authorization codes were issued today?",
      "fields": [
        "creation"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) AS count FROM [BT]tabOAuth Authorization Code[BT] WHERE DATE(creation) = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Job Card Operation"
      ],
      "question": "Show operations completed more than 10 hours ago.",
      "fields": [
        "completed_time"
      ]
    },
    "output": "frappe.db.sql('SELECT name,completed_time FROM [BT]tabJob Card Operation[BT] WHERE completed_time <= DATE_SUB(NOW(), INTERVAL 10 HOUR)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "OAuth Authorization Code"
      ],
      "question": "Find all authorization codes linked to the client 'Client123'.",
      "fields": [
        "client"
      ]
    },
    "output": "frappe.db.sql('SELECT client FROM [BT]tabOAuth Authorization Code[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Import Supplier Invoice"
      ],
      "question": "How can I view the status of imported supplier invoices in ERPNext?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, status FROM [BT]tabImport Supplier Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Import Supplier Invoice"
      ],
      "question": "How many imported supplier invoices are marked as completed?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabImport Supplier Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Import Supplier Invoice"
      ],
      "question": "Where is the tax account mapped in a supplier invoice import?",
      "fields": [
        "tax_account"
      ]
    },
    "output": "frappe.db.sql('SELECT tax_account FROM [BT]tabImport Supplier Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Import Supplier Invoice"
      ],
      "question": "List all supplier invoice imports for the company 'Qatar Trading Co'.",
      "fields": [
        "name",
        "company"
      ]
    },
    "output": "frappe.db.sql('SELECT name, company FROM [BT]tabImport Supplier Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Import Supplier Invoice"
      ],
      "question": "Where can I view the list of all supplier invoices with the default buying price list 'Standard Buying'?",
      "fields": [
        "default_buying_price_list"
      ]
    },
    "output": "frappe.db.sql('SELECT default_buying_price_list FROM [BT]tabImport Supplier Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Import Supplier Invoice"
      ],
      "question": "How do I retrieve all imported invoices with status set to 'Success'?",
      "fields": [
        "status",
        "invoice_series"
      ]
    },
    "output": "frappe.db.sql('SELECT status, invoice_series FROM [BT]tabImport Supplier Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Import Supplier Invoice"
      ],
      "question": "Get all import records including the supplier group and tax account fields.",
      "fields": [
        "supplier_group",
        "tax_account"
      ]
    },
    "output": "frappe.db.sql('SELECT supplier_group, tax_account FROM [BT]tabImport Supplier Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Import Supplier Invoice"
      ],
      "question": "Show all supplier invoice import entries with their company and item code.",
      "fields": [
        "company",
        "item_code"
      ]
    },
    "output": "frappe.db.sql('SELECT company, item_code FROM [BT]tabImport Supplier Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Import Supplier Invoice"
      ],
      "question": "Retrieve the full document of the supplier invoice import record 'IMP-INV-0005'.",
      "fields": []
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabImport Supplier Invoice[BT] WHERE name = \"IMP-INV-0005\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Import Supplier Invoice"
      ],
      "question": "What is the company name for the invoice with item code 'ITEM-1002'?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql('SELECT company FROM [BT]tabImport Supplier Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Import Supplier Invoice"
      ],
      "question": "How many invoice import records are currently in the system?",
      "fields": []
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabImport Supplier Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Import Supplier Invoice"
      ],
      "question": "List invoices imported for supplier group 'Electronics Vendors'.",
      "fields": [
        "supplier_group"
      ]
    },
    "output": "frappe.db.sql('SELECT supplier_group FROM [BT]tabImport Supplier Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all items provided by the supplier 'Glint Harbor Supplies'.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.db.sql('SELECT supplier FROM [BT]tabSupplier[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "How many supplier items are associated with 'XYZ Traders'?",
      "fields": []
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabSupplier[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get the name of the supplier linked to item 'ITEM-00034'.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.db.sql('SELECT supplier FROM [BT]tabSupplier[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Fetch all supplier item records for purchase analysis.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.db.sql('SELECT supplier FROM [BT]tabSupplier[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Retrieve the full document for supplier item ID 'SUPITEM-0045'.",
      "fields": []
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabSupplier[BT] WHERE name = \"SUPITEM-0045\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers linked to items created in the last 30 days.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.db.sql('SELECT supplier FROM [BT]tabSupplier[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "How many items are associated with any supplier?",
      "fields": []
    },
    "output": "frappe.db.sql('SELECT COUNT(*) FROM [BT]tabSupplier[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get the supplier name for item entry 'SI-00112'.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.db.sql('SELECT supplier FROM [BT]tabSupplier[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Fetch all supplier item mappings for inventory planning.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.db.sql('SELECT supplier FROM [BT]tabSupplier[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Retrieve supplier item document for ID 'SUP-ITEM-2025-01'.",
      "fields": []
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabSupplier[BT] WHERE name = \"SUP-ITEM-2025-01\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What dates were gain/loss entries made for supplier 'Maxwell Corp'?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE supplier = 'Maxwell Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all supplier items where supplier is not 'Generic Supplier'.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.db.sql('SELECT supplier FROM [BT]tabSupplier[BT] WHERE supplier != \"Generic Supplier\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show all supplier item entries created this week.",
      "fields": [
        "supplier",
        "creation"
      ]
    },
    "output": "frappe.db.sql('SELECT supplier, creation FROM [BT]tabSupplier[BT] WHERE YEARWEEK(creation, 1) = YEARWEEK(CURDATE(), 1)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all supplier items linked to supplier 'Eastern Trade Corp'.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.db.sql('SELECT supplier FROM [BT]tabSupplier[BT] WHERE supplier = \"Eastern Trade Corp\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Pull the complete document for the supplier item 'ITEM-SUP-102'.",
      "fields": []
    },
    "output": "frappe.db.sql('SELECT * FROM [BT]tabSupplier[BT] WHERE name = \"ITEM-SUP-102\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show supplier-item relationships filtered by a specific region or tag.",
      "fields": [
        "supplier",
        "region",
        "tag"
      ]
    },
    "output": "frappe.db.sql('SELECT supplier, region, tag FROM [BT]tabSupplier[BT] WHERE region IS NOT NULL OR tag IS NOT NULL', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which supplier is linked to the item 'LED Panel - 60W'?",
      "fields": [
        "supplier",
        "item_code"
      ]
    },
    "output": "frappe.db.sql('SELECT supplier FROM [BT]tabSupplier[BT] WHERE item_code = \"LED Panel - 60W\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get the supplier-item mapping where supplier is 'Alpha Corp'.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.db.sql('SELECT supplier FROM [BT]tabSupplier[BT] WHERE supplier = \"Alpha Corp\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Give me a full list of supplier records with suppliers visible.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.db.sql('SELECT supplier FROM [BT]tabSupplier[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find all items that have more than one supplier linked.",
      "fields": [
        "item_code"
      ]
    },
    "output": "frappe.db.sql('SELECT item_code, COUNT(supplier) as supplier_count FROM [BT]tabSupplier[BT] GROUP BY item_code HAVING supplier_count > 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "When was the exchange difference posted for advance entry SIA-0092?",
      "fields": [
        "name",
        "difference_posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, difference_posting_date FROM [BT]tabSales Invoice[BT] WHERE name = \"SIA-0092\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all posting dates for exchange differences recorded this year.",
      "fields": [
        "name",
        "difference_posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, difference_posting_date FROM [BT]tabSales Invoice[BT] WHERE YEAR(difference_posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which advance entries posted gain/loss adjustments in February 2024?",
      "fields": [
        "name",
        "difference_posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, difference_posting_date FROM [BT]tabSales Invoice[BT] WHERE difference_posting_date BETWEEN \"2024-02-01\" AND \"2024-02-29\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What exchange rate was applied to document PINV-0452?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE name = 'PINV-0452' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show the reference exchange rate for the latest advance entry.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What exchange rates were used for advances posted last month?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE posting_date between '['2024-04-01', '2024-04-30']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What was the exchange rate for the advance entry ADV-0030?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE name = 'ADV-0030' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Find exchange rates used in all April 2024 supplier advances.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE posting_date between '['2024-04-01', '2024-04-30']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Retrieve exchange rates where allocated amount exceeded QAR 1000.",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE outstanding_amount > 1000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the reference type linked to the advance record SIA-2025-0001?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT 'Sales Invoice' FROM [BT]tabSales Invoice[BT] WHERE name = 'SIA-2025-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show me the document type connected with advance entry SIA-3023.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT 'Sales Invoice' FROM [BT]tabSales Invoice[BT] WHERE name = 'SIA-3023' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What kind of document is the advance associated with in record ADV-SINV-047?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT 'Sales Invoice' FROM [BT]tabSales Invoice[BT] WHERE name = 'ADV-SINV-047' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Provide the type of reference document for the advance SIA-8005.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT 'Sales Invoice' FROM [BT]tabSales Invoice[BT] WHERE name = 'SIA-8005' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "For entry SIA-7613, what is the document type it is linked to?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT 'Sales Invoice' FROM [BT]tabSales Invoice[BT] WHERE name = 'SIA-7613' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which document type is most frequently associated with sales advance payments?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT 'Sales Invoice' FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What document types are recorded for advances posted last quarter?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT 'Sales Invoice' FROM [BT]tabSales Invoice[BT] WHERE posting_date between '['2024-01-01', '2024-03-31']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find out whether any advances are linked to 'Sales Order'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE 'Sales Invoice' = 'Sales Order' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the reference type of the most recent advance linked to Orion Tech.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT 'Sales Invoice' FROM [BT]tabSales Invoice[BT] WHERE customer = 'Orion Tech' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List remarks from advances posted with an amount greater than QAR 5,000.",
      "fields": [
        "remarks",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT remarks FROM [BT]tabSales Invoice[BT] WHERE grand_total > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "For which advances was 'final adjustment' noted in the remarks field?",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE remarks LIKE '%final adjustment%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show remarks added to the most recent advance received from Greenwave Ltd.",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT remarks FROM [BT]tabSales Invoice[BT] WHERE customer = 'Greenwave Ltd.' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which records include remarks containing the word 'reallocation'?",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT remarks FROM [BT]tabSales Invoice[BT] WHERE remarks LIKE '%reallocation%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Pull all remarks associated with document SINV-2088 advances.",
      "fields": [
        "remarks",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT remarks FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-2088' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show the reference row used in the advance record SINVADV-5503.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE name = 'SINVADV-5503' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which row of the original invoice is linked to advance SINVADV-2029?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE name = 'SINVADV-2029' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all advances that reference line number 2 in their invoices.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE reference_row = 2''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "For invoice SINV-8891, which line item is this advance linked to?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-8891' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show the row index linked to the advance for document SINV-3001.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-3001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the advance amount paid under entry SINVADV-3407?",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT grand_total FROM [BT]tabSales Invoice[BT] WHERE name = 'SINVADV-3407' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which advances recorded any exchange rate gain or loss?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE numeric_field = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show the currency exchange difference for entry SIA-3245.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE name = 'SIA-3245' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find entries with exchange gain/loss above QAR 500.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE exchange_gain_loss > 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve gain/loss on currency for foreign advances in Q4 2023.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE posting_date between '['2023-10-01', '2023-12-31']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What's the exchange loss recorded for customer Teal Spire Retail?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE customer = 'Teal Spire Retail' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which entries have zero allocated amounts?",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE outstanding_amount = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Identify records where allocated amount is greater than QAR 20,000.",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE outstanding_amount > 20000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What’s the total allocated amount across all customer advances in Q1 2024?",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE posting_date between '['2024-01-01', '2024-03-31']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "For entry ADV-4567, what value has been allocated so far?",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE name = 'ADV-4567' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the total allocated advance amount made by ‘Nexa Distributors’?",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE customer = 'Nexa Distributors' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What portion of advance has been allocated in entry SINVADV-2217?",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE name = 'SINVADV-2217' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all entries where allocated amount is less than QAR 5,000.",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE outstanding_amount < 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the average allocated amount for all advances in March 2024?",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE posting_date between '['2024-03-01', '2024-03-31']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which advance entries had full allocation matching the total advance amount?",
      "fields": [
        "outstanding_amount",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total, outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE outstanding_amount != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the allocated amount for the advance referencing SINV-4401?",
      "fields": [
        "outstanding_amount",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-4401' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show advance payments greater than QAR 25,000.",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total FROM [BT]tabSales Invoice[BT] WHERE grand_total > 25000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "What is the start date of the stock balance for document CSB-00023?",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT from_date FROM [BT]tabClosing Stock Balance[BT] WHERE name = 'CSB-00023' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "What is the closing date for the stock report CSB-0031?",
      "fields": [
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT to_date FROM [BT]tabClosing Stock Balance[BT] WHERE name = 'CSB-0031' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Is the unit of measurement shown in report CSB-0485?",
      "fields": [
        "include_uom"
      ]
    },
    "output": "frappe.db.sql('''SELECT include_uom FROM [BT]tabClosing Stock Balance[BT] WHERE name = 'CSB-0485' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "List reports where UOM inclusion is disabled.",
      "fields": [
        "include_uom"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabClosing Stock Balance[BT] WHERE include_uom = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Which reports include the unit of measurement column?",
      "fields": [
        "include_uom"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabClosing Stock Balance[BT] WHERE include_uom = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Find the UOM inclusion flag for the report submitted on 2024-04-01.",
      "fields": [
        "include_uom"
      ]
    },
    "output": "frappe.db.sql('''SELECT include_uom FROM [BT]tabClosing Stock Balance[BT] WHERE from_date = '2024-04-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "What type of warehouse stores the closing stock for item 'ITEM-1009'?",
      "fields": [
        "warehouse_type",
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_type FROM [BT]tabClosing Stock Balance[BT] WHERE item_code = 'ITEM-1009' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Which warehouse types are used for items in the 'Electronics' group?",
      "fields": [
        "warehouse_type",
        "item_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_type FROM [BT]tabClosing Stock Balance[BT] WHERE item_group = 'Electronics' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Fetch the warehouse type for stock record CSB-1024.",
      "fields": [
        "warehouse_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_type FROM [BT]tabClosing Stock Balance[BT] WHERE name = 'CSB-1024' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Show warehouse types used for all closing stock entries created after April 1, 2024.",
      "fields": [
        "warehouse_type",
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_type FROM [BT]tabClosing Stock Balance[BT] WHERE from_date > '2024-04-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "List all warehouse types used by 'Tech Distributors Ltd'.",
      "fields": [
        "warehouse_type",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_type FROM [BT]tabClosing Stock Balance[BT] WHERE company = 'Tech Distributors Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Which warehouse type is most commonly used across all warehouses?",
      "fields": [
        "warehouse_type",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_type FROM [BT]tabClosing Stock Balance[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Which stock balance entries are amendments of previous records?",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, amended_from FROM [BT]tabClosing Stock Balance[BT] WHERE amended_from != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Get amendment source document for CSB-0035.",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT amended_from FROM [BT]tabClosing Stock Balance[BT] WHERE name = 'CSB-0035' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "List all entries in Closing Stock Balance that were amendments.",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, amended_from FROM [BT]tabClosing Stock Balance[BT] WHERE amended_from != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Is CSB-0221 an updated version of another stock balance document?",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT amended_from FROM [BT]tabClosing Stock Balance[BT] WHERE name = 'CSB-0221' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Show previous documents that were amended into current entries.",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT amended_from FROM [BT]tabClosing Stock Balance[BT] WHERE amended_from != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Find the original entry for the amended stock report CSB-0105.",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT amended_from FROM [BT]tabClosing Stock Balance[BT] WHERE name = 'CSB-0105' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Has CSB-0098 been amended from an earlier entry?",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT amended_from FROM [BT]tabClosing Stock Balance[BT] WHERE name = 'CSB-0098' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Show all current stock balances that are revised versions of older entries.",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabClosing Stock Balance[BT] WHERE amended_from != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Find entries that were created as amendments to earlier closing stock records.",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, amended_from FROM [BT]tabClosing Stock Balance[BT] WHERE amended_from != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Check if the entry CSB-1002 is an amendment of a previous stock report.",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT amended_from FROM [BT]tabClosing Stock Balance[BT] WHERE name = 'CSB-1002' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "List warehouse types associated with closing stock between January and March 2024.",
      "fields": [
        "warehouse_type",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_type FROM [BT]tabClosing Stock Balance[BT] WHERE from_date >= '2024-01-01' AND to_date <= '2024-03-31' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Which warehouse type is used in entry CSB-00456?",
      "fields": [
        "warehouse_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_type FROM [BT]tabClosing Stock Balance[BT] WHERE name = 'CSB-00456' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Show all distinct warehouse types used in closing stock entries of 'Global Mart'.",
      "fields": [
        "warehouse_type",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_type FROM [BT]tabClosing Stock Balance[BT] WHERE company = 'Global Mart' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Get the latest warehouse type used in closing stock for finished goods.",
      "fields": [
        "warehouse_type",
        "item_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_type FROM [BT]tabClosing Stock Balance[BT] WHERE item_group = 'Finished Goods' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Did the warehouse summary for March 2024 include UOM details?",
      "fields": [
        "include_uom"
      ]
    },
    "output": "frappe.db.sql('''SELECT include_uom FROM [BT]tabClosing Stock Balance[BT] WHERE from_date >= '2024-03-01' AND to_date <= '2024-03-31' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "What item group is associated with the stock entry CSB-5043?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_group FROM [BT]tabClosing Stock Balance[BT] WHERE name = 'CSB-5043' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "List all item groups included in the April 2024 closing stock report.",
      "fields": [
        "item_group",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_group FROM [BT]tabClosing Stock Balance[BT] WHERE from_date >= '2024-04-01' AND to_date <= '2024-04-30' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Which item group includes 'STEEL-325' in this report?",
      "fields": [
        "item_group",
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_group FROM [BT]tabClosing Stock Balance[BT] WHERE item_code = 'STEEL-325' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "What item groups are tracked for Warehouse A during Q1 2024?",
      "fields": [
        "item_group",
        "warehouse",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_group FROM [BT]tabClosing Stock Balance[BT] WHERE warehouse = 'Warehouse A' AND from_date >= '2024-01-01' AND to_date <= '2024-03-31' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Identify the item group that includes the product 'CAP-102'.",
      "fields": [
        "item_group",
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_group FROM [BT]tabClosing Stock Balance[BT] WHERE item_code = 'CAP-102' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Which item groups had balances across multiple warehouses last month?",
      "fields": [
        "item_group",
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_group FROM [BT]tabClosing Stock Balance[BT] WHERE to_date between '['2024-04-01', '2024-04-30']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "What item group is recorded most frequently across entries in May 2024?",
      "fields": [
        "item_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_group FROM [BT]tabClosing Stock Balance[BT] WHERE to_date between '['2024-05-01', '2024-05-31']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "What item group appears with status 'Draft' in recent entries?",
      "fields": [
        "item_group",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_group FROM [BT]tabClosing Stock Balance[BT] WHERE status = 'Draft' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "For the company FreshMart, which item groups were tracked in April 2024?",
      "fields": [
        "item_group",
        "company",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_group FROM [BT]tabClosing Stock Balance[BT] WHERE company = 'FreshMart' AND from_date >= '2024-04-01' AND to_date <= '2024-04-30' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "What item groups were recorded in the report for warehouse type 'Transit'?",
      "fields": [
        "item_group",
        "warehouse_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_group FROM [BT]tabClosing Stock Balance[BT] WHERE warehouse_type = 'Transit' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Which item code is recorded in report CSB-1201?",
      "fields": [
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM [BT]tabClosing Stock Balance[BT] WHERE name = 'CSB-1201' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "List all item codes tracked between March and April 2024.",
      "fields": [
        "item_code",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM [BT]tabClosing Stock Balance[BT] WHERE from_date >= '2024-03-01' AND to_date <= '2024-04-30' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Show me item codes recorded for Finished Goods Warehouse only.",
      "fields": [
        "item_code",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM [BT]tabClosing Stock Balance[BT] WHERE warehouse = 'Finished Goods Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Which item codes were recorded under the 'Spare Parts' group?",
      "fields": [
        "item_code",
        "item_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM [BT]tabClosing Stock Balance[BT] WHERE item_group = 'Spare Parts' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Get all unique item codes recorded in the latest stock balance entries.",
      "fields": [
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM [BT]tabClosing Stock Balance[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Identify items recorded in stock balances after May 1st.",
      "fields": [
        "item_code",
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM [BT]tabClosing Stock Balance[BT] WHERE from_date > '2024-05-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "What item codes appear most frequently in closing balances this quarter?",
      "fields": [
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM [BT]tabClosing Stock Balance[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Which items are missing from the Central Warehouse report?",
      "fields": [
        "item_code",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM [BT]tabClosing Stock Balance[BT] WHERE warehouse = 'Central Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Show item codes with data submitted by Summit Electronics.",
      "fields": [
        "item_code",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM [BT]tabClosing Stock Balance[BT] WHERE company = 'Summit Electronics' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Which item codes have not been updated in the last report from Raw Materials Warehouse?",
      "fields": [
        "item_code",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code FROM [BT]tabClosing Stock Balance[BT] WHERE warehouse = 'Raw Materials Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "List the to_date for all stock reports submitted in April 2024.",
      "fields": [
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT to_date FROM [BT]tabClosing Stock Balance[BT] WHERE status = 'Submitted' AND to_date between '['2024-04-01', '2024-04-30']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Get the report end date for stock balance CSB-240.",
      "fields": [
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT to_date FROM [BT]tabClosing Stock Balance[BT] WHERE name = 'CSB-240' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "When does the warehouse report for WH-23 end?",
      "fields": [
        "to_date",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT to_date FROM [BT]tabClosing Stock Balance[BT] WHERE warehouse = 'WH-23' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Which stock reports have their closing date set to 2024-06-30?",
      "fields": [
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabClosing Stock Balance[BT] WHERE to_date = '2024-06-30' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "What is the latest closing date used in stock balance reports?",
      "fields": [
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT to_date FROM [BT]tabClosing Stock Balance[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Retrieve the to_date for balances ending in May 2024.",
      "fields": [
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT to_date FROM [BT]tabClosing Stock Balance[BT] WHERE to_date between '['2024-05-01', '2024-05-31']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Show the closing date for all reports created by 'BrightSteel Corp'.",
      "fields": [
        "to_date",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT to_date FROM [BT]tabClosing Stock Balance[BT] WHERE company = 'BrightSteel Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "What's the last recorded stock closing date for warehouse WH-MFG-01?",
      "fields": [
        "to_date",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT to_date FROM [BT]tabClosing Stock Balance[BT] WHERE warehouse = 'WH-MFG-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "What closing dates were used in reports submitted this week?",
      "fields": [
        "to_date",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT to_date FROM [BT]tabClosing Stock Balance[BT] WHERE status = 'Submitted' AND to_date between '['2024-05-20', '2024-05-25']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Give me the beginning date of the stock balance for the April cycle.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT from_date FROM [BT]tabClosing Stock Balance[BT] WHERE to_date between '['2024-04-01', '2024-04-30']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "When did the stock balance period begin for 'Trinity Corp'?",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT from_date FROM [BT]tabClosing Stock Balance[BT] WHERE company = 'Trinity Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Retrieve the earliest from_date in closing stock balance records for warehouse 'WH-0001'.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT from_date FROM [BT]tabClosing Stock Balance[BT] WHERE warehouse = 'WH-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Find all records where the from_date is before 2024-03-01.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, from_date FROM [BT]tabClosing Stock Balance[BT] WHERE from_date < '2024-03-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "List the starting dates of stock reports in March 2024.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT from_date FROM [BT]tabClosing Stock Balance[BT] WHERE from_date between '['2024-03-01', '2024-03-31']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Get the from_date for stock balance submitted under item group 'Electronics'.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT from_date FROM [BT]tabClosing Stock Balance[BT] WHERE item_group = 'Electronics' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "What is the starting date of the balance recorded for the warehouse 'Main Store'?",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT from_date FROM [BT]tabClosing Stock Balance[BT] WHERE warehouse = 'Main Store' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Check the start date of closing stock records in status 'Submitted'.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT from_date FROM [BT]tabClosing Stock Balance[BT] WHERE status = 'Submitted' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Show the from_date for stock balance linked to item_code 'ITM-9023'.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT from_date FROM [BT]tabClosing Stock Balance[BT] WHERE item_code = 'ITM-9023' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "What is the naming series used for the April 2024 stock closure document?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabClosing Stock Balance[BT] WHERE from_date >= '2024-04-01' AND to_date <= '2024-04-30' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Get the current status of stock closing for the item group 'Raw Materials'.",
      "fields": [
        "status",
        "item_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT status FROM [BT]tabClosing Stock Balance[BT] WHERE item_group = 'Raw Materials' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "List all closing stock balances that have been cancelled.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabClosing Stock Balance[BT] WHERE status = 'Cancelled' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Which closing stock entries for 'SuperMart Ltd.' are still in Draft?",
      "fields": [
        "company",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabClosing Stock Balance[BT] WHERE company = 'SuperMart Ltd.' AND status = 'Draft' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Check the approval status for stock balance with warehouse type 'Distribution'.",
      "fields": [
        "warehouse_type",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT status FROM [BT]tabClosing Stock Balance[BT] WHERE warehouse_type = 'Distribution' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "How many cancelled stock balances were filed by 'Trident Corp'?",
      "fields": [
        "status",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabClosing Stock Balance[BT] WHERE status = 'Cancelled' AND company = 'Trident Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "What is the current status of the stock balance document with item code 'PACK-2241'?",
      "fields": [
        "status",
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT status FROM [BT]tabClosing Stock Balance[BT] WHERE item_code = 'PACK-2241' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Show me all closing stock balances that are in Draft state.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabClosing Stock Balance[BT] WHERE status = 'Draft' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "How many closing stock documents are currently marked as Submitted?",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabClosing Stock Balance[BT] WHERE status = 'Submitted' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Get the status of the stock balance entry submitted by NovaTech Corp.",
      "fields": [
        "status",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT status FROM [BT]tabClosing Stock Balance[BT] WHERE company = 'NovaTech Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Find the status of the most recent stock closing for 'Main Warehouse'.",
      "fields": [
        "status",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT status FROM [BT]tabClosing Stock Balance[BT] WHERE warehouse = 'Main Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Which entries were cancelled in the last quarter?",
      "fields": [
        "status",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabClosing Stock Balance[BT] WHERE status = 'Cancelled' AND from_date >= '2024-01-01' AND to_date <= '2024-03-31' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Check the status of stock balance with warehouse 'East Wing Depot'.",
      "fields": [
        "status",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT status FROM [BT]tabClosing Stock Balance[BT] WHERE warehouse = 'East Wing Depot' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "How many Draft entries are there for the item 'CABLE-3010'?",
      "fields": [
        "status",
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabClosing Stock Balance[BT] WHERE status = 'Draft' AND item_code = 'CABLE-3010' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Fetch the status of stock reports generated in April 2024.",
      "fields": [
        "status",
        "from_date",
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT status FROM [BT]tabClosing Stock Balance[BT] WHERE from_date >= '2024-04-01' AND to_date <= '2024-04-30' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Show all closing stock documents with Submitted status from TechPlus Ltd.",
      "fields": [
        "status",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabClosing Stock Balance[BT] WHERE status = 'Submitted' AND company = 'TechPlus Ltd.' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Show me the document series code used in closing stock balance sheets.",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabClosing Stock Balance[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Which naming pattern is followed for stock balance entries of May 2024?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabClosing Stock Balance[BT] WHERE from_date >= '2024-05-01' AND to_date <= '2024-05-31' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Identify the naming series used in the most recent stock balance document for Beta Corp.",
      "fields": [
        "naming_series",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabClosing Stock Balance[BT] WHERE company = 'Beta Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "What naming convention is used in documents tracking monthly closing stock?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabClosing Stock Balance[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How much advance was paid for invoice SINV-3020?",
      "fields": [
        "grand_total",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT grand_total FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-3020' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What are the advance amounts received in February 2024?",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT grand_total FROM [BT]tabSales Invoice[BT] WHERE posting_date between '['2024-02-01', '2024-02-29']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What remarks were recorded for the advance linked to document SINV-9042?",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT remarks FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-9042' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find any internal notes or descriptions added to large advance records.",
      "fields": [
        "remarks",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT remarks FROM [BT]tabSales Invoice[BT] WHERE grand_total > 20000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "For which advances was a remark tagged as 'urgent allocation required'?",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE remarks LIKE '%urgent allocation required%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Display all remarks where the comment mentions 'prepaid adjustment'.",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT remarks FROM [BT]tabSales Invoice[BT] WHERE remarks LIKE '%prepaid adjustment%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which advances had a recorded exchange gain or loss for March 2024?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE posting_date between '['2024-03-01', '2024-03-31']' 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "What is the naming series used for the closing stock record created for April 2024?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabClosing Stock Balance[BT] WHERE from_date >= '2024-04-01' AND to_date <= '2024-04-30' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Which naming series pattern is followed in closing stock entries for Alpha Corp?",
      "fields": [
        "naming_series",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabClosing Stock Balance[BT] WHERE company = 'Alpha Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Show me the document series used for stock balances finalized last quarter.",
      "fields": [
        "naming_series",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabClosing Stock Balance[BT] WHERE status = 'Submitted' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "What is the unique series format used to identify closing stock balance entries?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabClosing Stock Balance[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Closing Stock Balance"
      ],
      "question": "Can you provide the naming convention applied to the latest closing stock submission?",
      "fields": [
        "naming_series",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabClosing Stock Balance[BT] WHERE status = 'Submitted' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What’s the gain or loss due to currency rate for invoice SINV-8721?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-8721' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find the exchange loss on any entries with ref exchange rate below 3.5.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE ref_exchange_rate < 3.5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What are the exchange gains or losses in Q1 for foreign currency advances?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE posting_date between '['2024-01-01', '2024-03-31']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List gains or losses recorded from foreign payments in February.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE posting_date between '['2024-02-01', '2024-02-29']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "For which documents were advances received from customer 'Nova Traders'?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE customer = 'Nova Traders' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show reference names of advances that were partially allocated.",
      "fields": [
        "name",
        "outstanding_amount",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE outstanding_amount < 'grand_total' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List the documents against which more than QAR 25,000 was received in advance.",
      "fields": [
        "name",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE grand_total > 25000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What are the referenced document IDs for fully allocated advances?",
      "fields": [
        "name",
        "outstanding_amount",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE outstanding_amount = 'grand_total' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the document name linked to advance entry SIA-1020?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE name = 'SIA-1020' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Can you list reference names tied to advances for ‘Alpha Corp’?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE customer = 'Alpha Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show me the document IDs of all advances from April 2024.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE posting_date between '['2024-04-01', '2024-04-30']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which referenced documents have more than QAR 15,000 as advance?",
      "fields": [
        "name",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE grand_total > 15000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List reference types for all advances exceeding QAR 20,000.",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT 'Sales Invoice' FROM [BT]tabSales Invoice[BT] WHERE grand_total > 20000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "When was the gain/loss journal entry posted for entry ADV-3001?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE name = 'ADV-3001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which advance entries had gain/loss posted on 2024-03-10?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE difference_posting_date = '2024-03-10' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List all gain/loss difference posting dates for entries recorded in March 2024.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE difference_posting_date between '['2024-03-01', '2024-03-31']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "When was the gain/loss impact posted for supplier 'Vertex Global'?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE supplier = 'Vertex Global' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Retrieve the latest gain/loss posting date for supplier 'TopDeal Supplies'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE supplier = 'TopDeal Supplies' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "For advances exceeding QAR 15,000, when were the gain/loss differences posted?",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE grand_total > 15000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Check the gain/loss posting dates for all entries with exchange differences.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE numeric_field = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What were the gain/loss posting dates for all advances in Q1 2024?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE difference_posting_date between '['2024-01-01', '2024-03-31']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Give me the posting dates for gain/loss on foreign currency adjustments for March 2024 advances.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE difference_posting_date between '['2024-03-01', '2024-03-31']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "When were gains or losses posted for supplier-linked advances this quarter?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE difference_posting_date between '['2024-01-01', '2024-03-31']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What reference exchange rates were set for entries linked to Purchase Orders?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE 'Purchase Invoice' = 'Purchase Order' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show reference exchange rates used in supplier prepayments from March 2024.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE posting_date between '['2024-03-01', '2024-03-31']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List the exchange rates used for supplier 'Zantrix Global'.",
      "fields": [
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE supplier = 'Zantrix Global' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show entries that applied an exchange rate greater than 3.5.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE ref_exchange_rate > 3.5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which advances had exchange gain/loss exceeding 500?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE exchange_gain_loss > 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Find the reference name for the advance entry labeled 'ADV-1042'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE name = 'ADV-1042' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which documents have been referenced in supplier advances posted after May 1st, 2024?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE posting_date > '2024-05-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List reference names of all advances related to 'Tech Parts Co'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE supplier = 'Tech Parts Co' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List all advance entries referencing document PINV-8743.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE name = 'PINV-8743' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Retrieve reference names for all advances made to 'Gulf Paper Traders'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE supplier = 'Gulf Paper Traders' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Find the latest advance entry and its linked reference document.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which reference documents received advance payments above QAR 20,000?",
      "fields": [
        "name",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE grand_total > 20000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Are there any advances referencing document ID PINV-10001?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabPurchase Invoice[BT] WHERE name = 'PINV-10001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "How many unique reference documents were linked in March 2024?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabPurchase Invoice[BT] WHERE posting_date between '['2024-03-01', '2024-03-31']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What remarks were added to advance entry ADV-5612?",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT remarks FROM [BT]tabPurchase Invoice[BT] WHERE name = 'ADV-5612' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Fetch remarks where the allocated amount is less than QAR 2000.",
      "fields": [
        "remarks",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT remarks FROM [BT]tabPurchase Invoice[BT] WHERE outstanding_amount < 2000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show remarks attached to any advance for document PINV-9022.",
      "fields": [
        "remarks",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT remarks FROM [BT]tabPurchase Invoice[BT] WHERE name = 'PINV-9022' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Get remarks from advances that recorded an exchange gain or loss.",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT remarks FROM [BT]tabPurchase Invoice[BT] WHERE numeric_field = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Are there remarks logged for any reference to 'Expense Claim'?",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT remarks FROM [BT]tabPurchase Invoice[BT] WHERE 'Purchase Invoice' = 'Expense Claim' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which row number is linked to advance entry ADV-11007?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE name = 'ADV-11007' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Fetch the reference row values for all advance payments related to supplier 'Silverline Traders'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE supplier = 'Silverline Traders' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Get the reference row from the latest advance entry made by 'SpeedChem Supplies'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE supplier = 'SpeedChem Supplies' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What are the reference row numbers for all advances posted in March 2024?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE posting_date between '['2024-03-01', '2024-03-31']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which reference rows are associated with entries having an advance amount above QAR 8,000?",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE grand_total > 8000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Find out which reference row entry corresponds to advance number ADV-8802.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE name = 'ADV-8802' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Do we have any advance records linked to reference row number 3?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabPurchase Invoice[BT] WHERE reference_row = 3''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Check which reference rows are linked to the document ID PINV-2089.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE name = 'PINV-2089' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "For entries referencing the document type 'Purchase Invoice', what are their row numbers?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE 'Purchase Invoice' = 'Purchase Invoice' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What is the row number linked to advance PINVADV-2091?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE name = 'PINVADV-2091' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List advance entries with amounts greater than QAR 8000.",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total FROM [BT]tabPurchase Invoice[BT] WHERE grand_total > 8000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Get the advance amount recorded for entry ADV-7340.",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT grand_total FROM [BT]tabPurchase Invoice[BT] WHERE name = 'ADV-7340' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Fetch all advance entries with an amount of QAR 5000.",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total FROM [BT]tabPurchase Invoice[BT] WHERE grand_total = 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Check if there's any advance paid more than QAR 15000.",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabPurchase Invoice[BT] WHERE grand_total > 15000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Get the advance amount for the latest entry from Al Hayat Supplies.",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT grand_total FROM [BT]tabPurchase Invoice[BT] WHERE supplier = 'Al Hayat Supplies' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "How much was advanced in entry ADV-4091?",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT grand_total FROM [BT]tabPurchase Invoice[BT] WHERE name = 'ADV-4091' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List advance amounts greater than 5000 QAR.",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total FROM [BT]tabPurchase Invoice[BT] WHERE grand_total > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What remarks were added to advance entry ADV-5612?",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT remarks FROM [BT]tabPurchase Invoice[BT] WHERE name = 'ADV-5612' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show all remarks recorded for advances made to 'Bright Supplies Co.'.",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT remarks FROM [BT]tabPurchase Invoice[BT] WHERE supplier = 'Bright Supplies Co.' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What is the total advance value logged for supplier voucher PINV-1445?",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT grand_total FROM [BT]tabPurchase Invoice[BT] WHERE name = 'PINV-1445' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Get all advance entries where amount is not equal to the allocated amount.",
      "fields": [
        "grand_total",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE grand_total != 'outstanding_amount' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List the advance amount for supplier 'Elite Procurement Co.' from last week.",
      "fields": [
        "grand_total",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT grand_total FROM [BT]tabPurchase Invoice[BT] WHERE supplier = 'Elite Procurement Co.' AND posting_date between '['2024-04-01', '2024-04-07']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "How much of the advance was allocated for PINV-00942?",
      "fields": [
        "outstanding_amount",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT outstanding_amount FROM [BT]tabPurchase Invoice[BT] WHERE name = 'PINV-00942' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What is the allocated amount for the latest advance entry?",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT outstanding_amount FROM [BT]tabPurchase Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What amount has been allocated from advance entry ADV-3024?",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT outstanding_amount FROM [BT]tabPurchase Invoice[BT] WHERE name = 'ADV-3024' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show me the allocated amounts for all supplier advances.",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT outstanding_amount FROM [BT]tabPurchase Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List allocation amounts for advance payments over QAR 5000.",
      "fields": [
        "grand_total",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT outstanding_amount FROM [BT]tabPurchase Invoice[BT] WHERE grand_total > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Find all advances with zero allocated amount.",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE outstanding_amount = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Check allocated amounts from March 2024 advances.",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT outstanding_amount FROM [BT]tabPurchase Invoice[BT] WHERE posting_date between '['2024-03-01', '2024-03-31']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Retrieve allocated amounts from the latest five entries.",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT outstanding_amount FROM [BT]tabPurchase Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which entries have allocations above QAR 8,000?",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE outstanding_amount > 8000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Tell me the allocated amount for entry ADV-2040.",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT outstanding_amount FROM [BT]tabPurchase Invoice[BT] WHERE name = 'ADV-2040' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Can you retrieve the comment added for advance entry ADV-2091?",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT remarks FROM [BT]tabPurchase Invoice[BT] WHERE name = 'ADV-2091' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What is the exchange gain or loss recorded for advance ADV-5001?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE name = 'ADV-5001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show the exchange gain or loss for all advances made to supplier 'Delta Exports'.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE supplier = 'Delta Exports' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Get all advances where exchange gain or loss was recorded above QAR 100.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE exchange_gain_loss > 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Retrieve the exchange gain or loss amount from the latest supplier advance.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which advance entries had no exchange difference recorded?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE exchange_gain_loss = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Find the exchange differences for all advances linked to invoice PINV-9932.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE name = 'PINV-9932' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List exchange gain/loss amounts by supplier across all advances.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabPurchase Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List all comments or notes on advances posted in February 2024.",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT remarks FROM [BT]tabPurchase Invoice[BT] WHERE posting_date between '['2024-02-01', '2024-02-29']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Retrieve remarks associated with supplier prepayments where allocated amount exceeds QAR 5000.",
      "fields": [
        "remarks",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT remarks FROM [BT]tabPurchase Invoice[BT] WHERE outstanding_amount > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Can you retrieve the finance book for the asset tagged as AF-7820?",
      "fields": [
        "asset_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT asset_name FROM [BT]tabAsset[BT] WHERE name = 'AF-7820' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which finance book does asset AF-5620 belong to?",
      "fields": [
        "asset_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT asset_name FROM [BT]tabAsset[BT] WHERE name = 'AF-5620' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Find the finance book managing depreciation for asset ID AF-7854.",
      "fields": [
        "asset_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT asset_name FROM [BT]tabAsset[BT] WHERE name = 'AF-7854' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Retrieve the finance book associated with asset AF-9991.",
      "fields": [
        "asset_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT asset_name FROM [BT]tabAsset[BT] WHERE name = 'AF-9991' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which finance book tracks assets that follow straight-line depreciation?",
      "fields": [
        "asset_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT asset_name FROM [BT]tabAsset[BT] WHERE depreciation_method = 'Straight Line' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "List all finance books that support daily prorata-based depreciation.",
      "fields": [
        "asset_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT asset_name FROM [BT]tabAsset[BT] WHERE daily_prorata_based = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which finance book is assigned to asset ID AF-9285?",
      "fields": [
        "asset_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT asset_name FROM [BT]tabAsset[BT] WHERE name = 'AF-9285' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Under which finance book is asset AF-1023 recorded?",
      "fields": [
        "asset_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT asset_name FROM [BT]tabAsset[BT] WHERE name = 'AF-1023' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What finance book is currently tracking depreciation for asset AF-2034?",
      "fields": [
        "asset_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT asset_name FROM [BT]tabAsset[BT] WHERE name = 'AF-2034' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Show me the finance book linked to asset AF-3321.",
      "fields": [
        "asset_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT asset_name FROM [BT]tabAsset[BT] WHERE name = 'AF-3321' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Can you find the depreciation method for asset AF-2048?",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.db.sql('''SELECT depreciation_method FROM [BT]tabAsset[BT] WHERE name = 'AF-2048' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What depreciation method is applied for asset AF-5623?",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.db.sql('''SELECT depreciation_method FROM [BT]tabAsset[BT] WHERE name = 'AF-5623' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Retrieve depreciation method used in asset AF-9991.",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.db.sql('''SELECT depreciation_method FROM [BT]tabAsset[BT] WHERE name = 'AF-9991' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Can you find the depreciation method for asset AF-2048?",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.db.sql('''SELECT depreciation_method FROM [BT]tabAsset[BT] WHERE name = 'AF-2048' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What depreciation method is applied for asset AF-5623?",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.db.sql('''SELECT depreciation_method FROM [BT]tabAsset[BT] WHERE name = 'AF-5623' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Retrieve depreciation method used in asset AF-9991.",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.db.sql('''SELECT depreciation_method FROM [BT]tabAsset[BT] WHERE name = 'AF-9991' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which depreciation method applies to high-value equipment?",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.db.sql('''SELECT depreciation_method FROM [BT]tabAsset[BT] WHERE asset_type = 'High Value' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Retrieve depreciation method for leased machinery.",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.db.sql('''SELECT depreciation_method FROM [BT]tabAsset[BT] WHERE asset_type = 'Leased' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Find depreciation method best suited for assets with unpredictable usage.",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.db.sql('''SELECT depreciation_method FROM [BT]tabAsset[BT] WHERE asset_usage = 'Unpredictable' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Retrieve depreciation method for long-life factory equipment.",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.db.sql('''SELECT depreciation_method FROM [BT]tabAsset[BT] WHERE asset_category = 'Manufacturing Equipment' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "How many depreciation cycles are planned for asset AF-1023?",
      "fields": [
        "total_number_of_depreciations"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_number_of_depreciations FROM [BT]tabAsset[BT] WHERE name = 'AF-1023' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Find the total number of depreciation entries planned for asset AF-7854.",
      "fields": [
        "total_number_of_depreciations"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_number_of_depreciations FROM [BT]tabAsset[BT] WHERE name = 'AF-7854' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "How many planned depreciation cycles exist for assets acquired in 2023?",
      "fields": [
        "total_number_of_depreciations"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_number_of_depreciations FROM [BT]tabAsset[BT] WHERE acquisition_year = '2023' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "How many depreciation cycles are planned for leased equipment?",
      "fields": [
        "total_number_of_depreciations"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_number_of_depreciations FROM [BT]tabAsset[BT] WHERE asset_type = 'Leased' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Retrieve the total depreciation cycles planned for asset AF-2034.",
      "fields": [
        "total_number_of_depreciations"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_number_of_depreciations FROM [BT]tabAsset[BT] WHERE name = 'AF-2034' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Show me the planned depreciation cycle count for asset AF-5620.",
      "fields": [
        "total_number_of_depreciations"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_number_of_depreciations FROM [BT]tabAsset[BT] WHERE name = 'AF-5620' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which assets have the highest number of planned depreciation cycles?",
      "fields": [
        "total_number_of_depreciations"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Retrieve the total planned depreciation cycles for high-value assets.",
      "fields": [
        "total_number_of_depreciations"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_number_of_depreciations FROM [BT]tabAsset[BT] WHERE asset_category = 'High Value' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What’s the planned depreciation cycle count for assets with salvage value above 50%?",
      "fields": [
        "total_number_of_depreciations"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Find planned depreciation cycles for assets that follow monthly depreciation frequency.",
      "fields": [
        "total_number_of_depreciations"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_number_of_depreciations FROM [BT]tabAsset[BT] WHERE frequency_of_depreciation = 'Monthly' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "How many booked depreciation entries exist for asset AF-1023?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE name = 'AF-1023' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Retrieve booked depreciation cycles for asset AF-7854.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE name = 'AF-7854' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "How many booked depreciation cycles exist for assets with a depreciation start date in 2023?",
      "fields": [
        "available_for_use_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Retrieve the number of booked depreciation entries for leased equipment.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE asset_type = 'Leased' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Show me the booked depreciation cycles for asset AF-2034.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE name = 'AF-2034' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Find the booked depreciation cycle count for asset AF-5620.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE name = 'AF-5620' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which assets have the highest number of booked depreciation cycles?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Retrieve booked depreciation cycles for assets with high expected value after useful life.",
      "fields": [
        "expected_value_after_useful_life"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What’s the booked depreciation cycle count for assets with salvage value above 50%?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Find booked depreciation cycles for assets that follow monthly depreciation frequency.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE frequency_of_depreciation = 'Monthly' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Is asset AF-1023 using daily prorata-based depreciation?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE name = 'AF-1023' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Retrieve depreciation setting for asset AF-7854—does it follow daily prorata?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE name = 'AF-7854' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "How does daily prorata-based depreciation affect asset AF-2034?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE name = 'AF-2034' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Does asset AF-9991 follow a daily prorata-based calculation?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE name = 'AF-9991' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which assets are set to use daily prorata-based depreciation?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE daily_prorata_based = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Retrieve assets applying daily prorata depreciation for leased equipment.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE asset_type = 'Leased' AND daily_prorata_based = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Are high-value assets set to daily prorata-based depreciation?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE asset_category = 'High Value' AND daily_prorata_based = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What depreciation settings allow both daily prorata and monthly frequency?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, frequency_of_depreciation FROM [BT]tabAsset[BT] WHERE daily_prorata_based = 1 AND frequency_of_depreciation = 'Monthly' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Find daily prorata depreciation settings for assets acquired before 2020.",
      "fields": [
        "available_for_use_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Identify assets that switched from non-daily to daily prorata-based depreciation.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAsset[BT] WHERE daily_prorata_based = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Does asset AF-1023 use shift-based depreciation?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE name = 'AF-1023' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which assets follow shift-based depreciation?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE shift_based = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Retrieve shift-based depreciation setting for asset AF-7854.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE name = 'AF-7854' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Are leased assets set to shift-based depreciation?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE asset_type = 'Leased' AND shift_based = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which depreciation method is best for shift-based assets?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT depreciation_method FROM [BT]tabAsset[BT] WHERE shift_based = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "How does shift-based depreciation impact 24/7 operational equipment?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE operational_hours = '24/7' AND shift_based = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Identify assets with shift-based depreciation activated.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE shift_based = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Retrieve shift-based depreciation settings for high-value assets.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE asset_category = 'High Value' AND shift_based = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Find shift-based depreciation settings for assets acquired before 2020.",
      "fields": [
        "available_for_use_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Identify assets that switched from non-shift-based to shift-based depreciation.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAsset[BT] WHERE shift_based = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "How frequently is depreciation recorded for asset AF-1023?",
      "fields": [
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT frequency_of_depreciation FROM [BT]tabAsset[BT] WHERE name = 'AF-1023' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Retrieve depreciation frequency for asset AF-7854.",
      "fields": [
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT frequency_of_depreciation FROM [BT]tabAsset[BT] WHERE name = 'AF-7854' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What depreciation frequency applies to assets with an expected value after useful life greater than $100,000?",
      "fields": [
        "frequency_of_depreciation",
        "expected_value_after_useful_life"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "How often is depreciation recorded for leased equipment?",
      "fields": [
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, frequency_of_depreciation FROM [BT]tabAsset[BT] WHERE shift_based = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Identify assets that use monthly depreciation frequency.",
      "fields": [
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, frequency_of_depreciation FROM [BT]tabAsset[BT] WHERE frequency_of_depreciation = 'Monthly' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "When does depreciation start for asset AF-1023?",
      "fields": [
        "available_for_use_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT available_for_use_date FROM [BT]tabAsset[BT] WHERE name = 'AF-1023' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Find the depreciation start date for asset AF-7854.",
      "fields": [
        "available_for_use_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT available_for_use_date FROM [BT]tabAsset[BT] WHERE name = 'AF-7854' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What is the depreciation start date for leased equipment?",
      "fields": [
        "available_for_use_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT available_for_use_date FROM [BT]tabAsset[BT] WHERE asset_type = 'Leased' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Retrieve depreciation start dates for assets acquired before 2020.",
      "fields": [
        "available_for_use_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Identify assets whose depreciation starts in 2023.",
      "fields": [
        "available_for_use_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What is the depreciation start date for assets with an expected value after useful life greater than $100,000?",
      "fields": [
        "available_for_use_date",
        "expected_value_after_useful_life"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Does asset AF-9991 have a scheduled depreciation start date?",
      "fields": [
        "available_for_use_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT available_for_use_date FROM [BT]tabAsset[BT] WHERE name = 'AF-9991' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Find depreciation start dates for assets with salvage value above 50%.",
      "fields": [
        "available_for_use_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Retrieve depreciation start dates for assets switching from monthly to quarterly frequency.",
      "fields": [
        "available_for_use_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, available_for_use_date FROM [BT]tabAsset[BT] WHERE frequency_of_depreciation = 'Quarterly' AND previous_frequency = 'Monthly' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Identify assets that switched from an undefined to a fixed depreciation start date.",
      "fields": [
        "available_for_use_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What is the salvage value percentage for asset record AF-2024-003?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE name = 'AF-2024-003' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Show the salvage value percentages for all asset finance books.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which assets have a salvage value percentage above 20?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE salvage_value_percentage > 20''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "List assets where salvage value is 0%.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE salvage_value_percentage = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Get salvage value percentages for assets that use Straight Line depreciation.",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE depreciation_method = 'Straight Line' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which depreciation entries have salvage value between 10 and 15 percent?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE salvage_value_percentage between '[10, 15]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Find all assets whose retained value percentage is not zero.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE numeric_field = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Show salvage percentages for assets starting depreciation in 2024.",
      "fields": [
        "available_for_use_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE available_for_use_date between '['2024-01-01', '2024-12-31']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Retrieve the salvage value percentage for all assets using Reducing Balance method.",
      "fields": [
        "depreciation_method"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE depreciation_method = 'Reducing Balance' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Give me the salvage value percent of assets that depreciate monthly.",
      "fields": [
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE frequency_of_depreciation = 'Monthly' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What is the depreciation rate defined for asset AFB-003?",
      "fields": [
        "rate_of_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT rate_of_depreciation FROM [BT]tabAsset[BT] WHERE name = 'AFB-003' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "List the depreciation rate and method used for straight line assets.",
      "fields": [
        "rate_of_depreciation",
        "depreciation_method"
      ]
    },
    "output": "frappe.db.sql('''SELECT rate_of_depreciation, depreciation_method FROM [BT]tabAsset[BT] WHERE depreciation_method = 'Straight Line' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Find all assets with an annual depreciation rate above 10%.",
      "fields": [
        "rate_of_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE rate_of_depreciation > 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What is the depreciation rate and start date for asset AFB-104?",
      "fields": [
        "rate_of_depreciation",
        "available_for_use_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT rate_of_depreciation, available_for_use_date FROM [BT]tabAsset[BT] WHERE name = 'AFB-104' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which records show quarterly depreciation and more than 5% rate?",
      "fields": [
        "rate_of_depreciation",
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE frequency_of_depreciation = 'Quarterly' AND rate_of_depreciation > 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Give depreciation rate and expected value after use for AFB-212.",
      "fields": [
        "rate_of_depreciation",
        "expected_value_after_useful_life"
      ]
    },
    "output": "frappe.db.sql('''SELECT rate_of_depreciation, expected_value_after_useful_life FROM [BT]tabAsset[BT] WHERE name = 'AFB-212' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Show depreciation rate for assets with salvage value above 15%.",
      "fields": [
        "rate_of_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT rate_of_depreciation FROM [BT]tabAsset[BT] WHERE salvage_value_percentage > 15''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What is the depreciation rate for assets following Reducing Balance method?",
      "fields": [
        "rate_of_depreciation",
        "depreciation_method"
      ]
    },
    "output": "frappe.db.sql('''SELECT rate_of_depreciation FROM [BT]tabAsset[BT] WHERE depreciation_method = 'Reducing Balance' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "List depreciation rates for assets posted after January 1, 2024.",
      "fields": [
        "rate_of_depreciation",
        "available_for_use_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT rate_of_depreciation FROM [BT]tabAsset[BT] WHERE available_for_use_date > '2024-01-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Find assets with over 20% depreciation rate and monthly schedule.",
      "fields": [
        "rate_of_depreciation",
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabAsset[BT] WHERE rate_of_depreciation > 20 AND frequency_of_depreciation = 'Monthly' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What is the estimated value of the asset after its useful life ends?",
      "fields": [
        "expected_value_after_useful_life"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "How much will be left of the asset’s value once it's fully depreciated?",
      "fields": [
        "expected_value_after_useful_life"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, expected_value_after_useful_life FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Retrieve the expected post-depreciation value for asset AFB-2024-004.",
      "fields": [
        "asset_name",
        "expected_value_after_useful_life",
        "asset_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT expected_value_after_useful_life FROM [BT]tabAsset[BT] WHERE asset_name = 'AFB-2024-004' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Show the expected value and depreciation frequency for AFB-204.",
      "fields": [
        "asset_name",
        "expected_value_after_useful_life",
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT expected_value_after_useful_life, frequency_of_depreciation FROM [BT]tabAsset[BT] WHERE asset_name = 'AFB-204' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What will be the final estimated asset value and the annual depreciation rate for asset AFB-775?",
      "fields": [
        "asset_name",
        "expected_value_after_useful_life",
        "rate_of_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT expected_value_after_useful_life, rate_of_depreciation FROM [BT]tabAsset[BT] WHERE asset_name = 'AFB-775' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Give me the expected value and the depreciation method for AFB-001.",
      "fields": [
        "asset_name",
        "expected_value_after_useful_life",
        "depreciation_method"
      ]
    },
    "output": "frappe.db.sql('''SELECT expected_value_after_useful_life, depreciation_method FROM [BT]tabAsset[BT] WHERE asset_name = 'AFB-001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Find the salvage percent and expected post-life value for AFB-122.",
      "fields": [
        "asset_name",
        "expected_value_after_useful_life"
      ]
    },
    "output": "frappe.db.sql('''SELECT expected_value_after_useful_life FROM [BT]tabAsset[BT] WHERE asset_name = 'AFB-122' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What is the expected value after useful life and how frequently is depreciation applied?",
      "fields": [
        "expected_value_after_useful_life",
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Give details of depreciation method and expected asset value after use for AFB-091.",
      "fields": [
        "asset_name",
        "expected_value_after_useful_life",
        "depreciation_method"
      ]
    },
    "output": "frappe.db.sql('''SELECT expected_value_after_useful_life, depreciation_method FROM [BT]tabAsset[BT] WHERE asset_name = 'AFB-091' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Fetch the future asset value and value after depreciation for AFB-995.",
      "fields": [
        "asset_name",
        "expected_value_after_useful_life",
        "value_after_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT expected_value_after_useful_life, value_after_depreciation FROM [BT]tabAsset[BT] WHERE asset_name = 'AFB-995' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What is the final value of the asset after depreciation ends?",
      "fields": [
        "value_after_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT value_after_depreciation FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Show the post-depreciation value for asset AFB-4021.",
      "fields": [
        "name",
        "value_after_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT value_after_depreciation FROM [BT]tabAsset[BT] WHERE name = 'AFB-4021' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Give the asset’s value after all depreciation has been posted.",
      "fields": [
        "value_after_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT value_after_depreciation FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What field shows the value left after all depreciation cycles?",
      "fields": [
        "total_number_of_depreciations",
        "value_after_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT value_after_depreciation FROM [BT]tabAsset[BT] WHERE total_number_of_depreciations > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Find the end-of-life value of the asset using straight line depreciation.",
      "fields": [
        "value_after_depreciation",
        "depreciation_method"
      ]
    },
    "output": "frappe.db.sql('''SELECT value_after_depreciation FROM [BT]tabAsset[BT] WHERE depreciation_method = 'Straight Line' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "For asset FIN-8902, what’s the remaining value after monthly depreciation?",
      "fields": [
        "name",
        "value_after_depreciation",
        "frequency_of_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT value_after_depreciation FROM [BT]tabAsset[BT] WHERE name = 'FIN-8902' AND frequency_of_depreciation = 'Monthly' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "How do we determine what value is left after full depreciation?",
      "fields": [
        "value_after_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT value_after_depreciation FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Show value of asset AFB-999 after its useful life ends.",
      "fields": [
        "name",
        "value_after_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT value_after_depreciation FROM [BT]tabAsset[BT] WHERE name = 'AFB-999' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "What value remains after depreciation for assets with reducing balance method?",
      "fields": [
        "value_after_depreciation",
        "depreciation_method"
      ]
    },
    "output": "frappe.db.sql('''SELECT value_after_depreciation FROM [BT]tabAsset[BT] WHERE depreciation_method = 'Reducing Balance' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Asset"
      ],
      "question": "Which field indicates the final worth of the asset post-depreciation?",
      "fields": [
        "value_after_depreciation"
      ]
    },
    "output": "frappe.db.sql('''SELECT value_after_depreciation FROM [BT]tabAsset[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Blanket Order"
      ],
      "question": "What is the series pattern used to generate the ID for this blanket order?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabBlanket Order[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Blanket Order"
      ],
      "question": "Identify the naming convention used to assign blanket order numbers.",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabBlanket Order[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Blanket Order"
      ],
      "question": "Which field defines the prefix or pattern for auto-generating the agreement ID?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabBlanket Order[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Blanket Order"
      ],
      "question": "What value structure is used to auto-assign blanket order numbers at creation?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabBlanket Order[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Blanket Order"
      ],
      "question": "When a new blanket order is created, which field determines how its ID is generated?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabBlanket Order[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Blanket Order"
      ],
      "question": "Show the naming format logic applied to blanket order IDs in Buekx Pvt Ltd.",
      "fields": [
        "naming_series",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabBlanket Order[BT] WHERE company = 'Buekx Pvt Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Blanket Order"
      ],
      "question": "Which field ensures sequential numbering of long-term supplier agreements?",
      "fields": [
        "naming_series",
        "blanket_order_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabBlanket Order[BT] WHERE blanket_order_type = 'Supplier' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Blanket Order"
      ],
      "question": "What defines how the order ID is automatically structured and incremented?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabBlanket Order[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Blanket Order"
      ],
      "question": "In the case of multiple companies, which field helps standardize the ID format for agreements?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabBlanket Order[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Blanket Order"
      ],
      "question": "How does the system decide what prefix or series to assign to a new agreement record?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabBlanket Order[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Who is the sales partner named 'BrightEdge Corp'?",
      "fields": []
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSales Partner[BT] WHERE name = 'BrightEdge Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Give name , website link of  partner who referred 'NovaTech'?",
      "fields": [
        "partner_name",
        "website",
        "referral_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, website FROM [BT]tabSales Partner[BT] WHERE referral_code = 'NovaTech' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List all sales partners along with their names and commission percentages.",
      "fields": [
        "partner_name",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, commission_rate FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Identify the distributor with the partner name 'QatarSuppliers Ltd.'",
      "fields": [
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name FROM [BT]tabSales Partner[BT] WHERE partner_name = 'QatarSuppliers Ltd.' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show me the names and types of all sales partners listed on the website.",
      "fields": [
        "partner_name",
        "partner_type",
        "show_in_website"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, partner_type FROM [BT]tabSales Partner[BT] WHERE show_in_website = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partner with the name 'Omega Resale' has a commission rate above 10%?",
      "fields": [
        "partner_name",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, commission_rate FROM [BT]tabSales Partner[BT] WHERE partner_name = 'Omega Resale' AND commission_rate > 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Find all partners where the name contains the word 'Global'.",
      "fields": [
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name FROM [BT]tabSales Partner[BT] WHERE partner_name LIKE '%Global%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Give me a list of partner names and referral codes for email marketing.",
      "fields": [
        "partner_name",
        "referral_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, referral_code FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "What is the partner name and their introduction text for 'MavenConnect'?",
      "fields": [
        "partner_name",
        "introduction"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, introduction FROM [BT]tabSales Partner[BT] WHERE partner_name = 'MavenConnect' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "What type of sales partner is 'EliteMark Inc.'—a distributor or a reseller?",
      "fields": [
        "partner_name",
        "partner_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_type FROM [BT]tabSales Partner[BT] WHERE partner_name = 'EliteMark Inc.' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show me all partners who are listed as commission agents.",
      "fields": [
        "partner_type",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Commission Agent' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which sales partners have the partner type set as affiliate?",
      "fields": [
        "partner_type",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Affiliate' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Find all dealer-type partners operating in the 'GCC' territory.",
      "fields": [
        "partner_type",
        "territory",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Dealer' AND territory = 'GCC' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "What is the partner type associated with 'ResellXperts Pvt Ltd'?",
      "fields": [
        "partner_name",
        "partner_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_type FROM [BT]tabSales Partner[BT] WHERE partner_name = 'ResellXperts Pvt Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Do we have any affiliates who referred new customers this quarter?",
      "fields": [
        "partner_type",
        "referral_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT referral_code FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Affiliate' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List all resellers whose websites are publicly visible on our portal.",
      "fields": [
        "partner_type",
        "show_in_website",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Reseller' AND show_in_website = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partner types do we currently work with across all operational territories?",
      "fields": [
        "partner_type",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT partner_type, territory FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Give me the names and partner types of every partner earning over 10% commission.",
      "fields": [
        "partner_name",
        "partner_type",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, partner_type FROM [BT]tabSales Partner[BT] WHERE commission_rate > 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Between resellers and distributors, which type has the higher count in our system?",
      "fields": [
        "partner_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_type, COUNT(*) as total FROM [BT]tabSales Partner[BT] WHERE partner_type IN ('Reseller', 'Distributor''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which region is 'Alpha Distributors' assigned to?",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT territory FROM [BT]tabSales Partner[BT] WHERE name = 'Alpha Distributors' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Give me the territory and commission rate for 'Skyline Partners'.",
      "fields": [
        "territory",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT territory, commission_rate FROM [BT]tabSales Partner[BT] WHERE name = 'Skyline Partners' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "In which markets are our affiliate partners most active?",
      "fields": [
        "territory",
        "partner_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT territory FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Affiliate' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List partners operating in 'Southeast Asia' and show their partner type.",
      "fields": [
        "territory",
        "partner_name",
        "partner_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, partner_type FROM [BT]tabSales Partner[BT] WHERE territory = 'Southeast Asia' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Find all sales partners assigned to the 'GCC' territory.",
      "fields": [
        "partner_name",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name FROM [BT]tabSales Partner[BT] WHERE territory = 'GCC' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "How many partners are listed under the 'Europe' territory?",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Partner[BT] WHERE territory = 'Europe' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which regions have the most commission agents listed?",
      "fields": [
        "territory",
        "partner_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT territory, COUNT(*) as total FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Commission Agent' GROUP BY territory ORDER BY total DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List the names and territories of all partners visible on our website.",
      "fields": [
        "partner_name",
        "territory",
        "show_in_website"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, territory FROM [BT]tabSales Partner[BT] WHERE show_in_website = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "What’s the combined list of regions covered by our resellers and distributors?",
      "fields": [
        "territory",
        "partner_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT territory FROM [BT]tabSales Partner[BT] WHERE partner_type in '['Reseller', 'Distributor']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Do we have any sales partners working in both Europe and Asia?",
      "fields": [
        "partner_name",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name FROM [BT]tabSales Partner[BT] WHERE territory IN ('Europe', 'Asia''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "What is the commission rate set for 'ResellXperts Pvt Ltd'?",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT commission_rate FROM [BT]tabSales Partner[BT] WHERE name = 'ResellXperts Pvt Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List all sales partners with a commission rate above 12%.",
      "fields": [
        "name",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, commission_rate FROM [BT]tabSales Partner[BT] WHERE commission_rate > 12''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Who are the partners with a commission rate of exactly 10.5%?",
      "fields": [
        "name",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, commission_rate FROM [BT]tabSales Partner[BT] WHERE commission_rate = 10.5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Give me names and commission rates of partners who are resellers.",
      "fields": [
        "commission_rate",
        "partner_type",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, commission_rate FROM [BT]tabSales Partner[BT] WHERE partner_type = 'reseller' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show partners with commission rates above 8% operating in 'South Asia'.",
      "fields": [
        "partner_name",
        "commission_rate",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, commission_rate, territory FROM [BT]tabSales Partner[BT] WHERE commission_rate > 8 AND territory = 'South Asia' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Is there a partner with 0% commission rate in the system?",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Partner[BT] WHERE commission_rate = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Find all distributors with commission rates between 5% and 15%.",
      "fields": [
        "partner_name",
        "partner_type",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, commission_rate FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Distributor' AND commission_rate between '[5, 15]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partner offers the highest commission?",
      "fields": [
        "name",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, commission_rate FROM [BT]tabSales Partner[BT] ORDER BY commission_rate DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Do any of the top-performing partners have a commission rate below 5%?",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Partner[BT] WHERE commission_rate < 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show partner names, types, and commission rates for website-visible partners.",
      "fields": [
        "partner_name",
        "partner_type",
        "show_in_website",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, partner_type, commission_rate FROM [BT]tabSales Partner[BT] WHERE show_in_website = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Can you show the address and contact details linked to 'SummitTrade Inc.'?",
      "fields": [
        "address_contacts",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT address_contacts FROM [BT]tabSales Partner[BT] WHERE partner_name = 'SummitTrade Inc.' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which sales partners have more than one address or contact entry associated with them?",
      "fields": [
        "address_contacts"
      ]
    },
    "output": "frappe.db.sql('''SELECT address_contacts FROM [BT]tabSales Partner[BT] WHERE address_contacts != '[]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List all contact entries found under sales partners based in the UAE.",
      "fields": [
        "address_contacts",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT address_contacts FROM [BT]tabSales Partner[BT] WHERE territory = 'UAE' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Are there any partners without any contact or address entries listed?",
      "fields": [
        "address_contacts",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Fetch the partner name, type, and all contact records for resellers in North America.",
      "fields": [
        "partner_name",
        "partner_type",
        "territory",
        "address_contacts"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, partner_type, address_contacts FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Reseller' AND territory = 'North America' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "How many contact records are stored for the partner 'GreenLink Pvt Ltd'?",
      "fields": [
        "address_contacts",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT address_contacts FROM [BT]tabSales Partner[BT] WHERE partner_name = 'GreenLink Pvt Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Give me a breakdown of sales partners and their total number of linked contact entries.",
      "fields": [
        "address_contacts",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, address_contacts FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Do we have any distributors that haven’t added address contacts yet?",
      "fields": [
        "partner_type",
        "address_contacts"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Distributor' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show me all partners whose address_contacts field includes both phone and email.",
      "fields": [
        "address_contacts",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, address_contacts FROM [BT]tabSales Partner[BT] WHERE address_contacts has '['phone', 'email']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "What contact information exists for partners with active referral codes and visible websites?",
      "fields": [
        "address_contacts",
        "referral_code",
        "show_in_website"
      ]
    },
    "output": "frappe.db.sql('''SELECT address_contacts FROM [BT]tabSales Partner[BT] WHERE referral_code != '' AND show_in_website = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Can you show the address and contact details linked to 'SummitTrade Inc.'?",
      "fields": [
        "address_contacts",
        "partner_name",
        "contact_desc",
        "address_desc",
        "territory",
        "contact_html"
      ]
    },
    "output": "frappe.db.sql('''SELECT address_contacts, partner_name, contact_desc, address_desc, territory, contact_html FROM [BT]tabSales Partner[BT] WHERE partner_name = 'SummitTrade Inc.' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which sales partners have more than one address or contact entry associated with them?",
      "fields": [
        "address_contacts",
        "partner_name",
        "address_desc",
        "contact_desc",
        "territory",
        "partner_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List all contact entries found under sales partners based in the UAE.",
      "fields": [
        "address_contacts",
        "territory",
        "partner_name",
        "address_desc",
        "partner_type",
        "contact_html"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSales Partner[BT] WHERE territory = 'UAE' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Are there any partners without any contact or address entries listed?",
      "fields": [
        "address_contacts",
        "partner_name",
        "address_desc",
        "contact_desc",
        "territory",
        "partner_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Fetch the partner name, type, and all contact records for resellers in North America.",
      "fields": [
        "partner_name",
        "partner_type",
        "territory",
        "address_contacts",
        "address_desc",
        "contact_desc"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Reseller' AND territory = 'North America' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Contact"
      ],
      "question": "How many contact records are stored for the partner 'GreenLink Pvt Ltd'?",
      "fields": [
        "name",
        "middle_name",
        "last_name",
        "full_name",
        "email_id",
        "user",
        "address_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabContact[BT] WHERE name = 'GreenLink Pvt Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Give me a breakdown of sales partners and their total number of linked contact entries.",
      "fields": [
        "name",
        "partner_name",
        "contact_desc"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Do we have any distributors that haven’t added address contacts yet?",
      "fields": [
        "name",
        "address_contacts",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partners don’t have any address_desc provided?",
      "fields": [
        "name",
        "partner_name",
        "address_desc"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Count the number of partners with 'No. 14' in their address description.",
      "fields": [
        "name",
        "address_desc",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Export the partner name and address_desc of all affiliates in the system.",
      "fields": [
        "name",
        "partner_name",
        "address_desc"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show the address_desc field for all listed partners.",
      "fields": [
        "name",
        "address_desc",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Can I get the address description for every distributor we work with?",
      "fields": [
        "name",
        "address_desc",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which sales partners have their address_desc starting with 'Suite 3A'?",
      "fields": [
        "name",
        "address_desc",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List names and short address descriptions of partners based in Europe.",
      "fields": [
        "name",
        "partner_name",
        "territory",
        "address_desc"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, partner_name FROM [BT]tabSales Partner[BT] WHERE territory = 'Europe' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Get me address_desc and territory for all commission agents.",
      "fields": [
        "name",
        "address_desc",
        "territory",
        "partner_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, territory FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Commission Agent' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Does 'MarketWide Inc.' have an address description stored?",
      "fields": [
        "name",
        "address_desc",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Partner[BT] WHERE partner_name = 'MarketWide Inc.' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "How much commission does 'TradeSphere Global' earn?",
      "fields": [
        "commission_rate",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT commission_rate FROM [BT]tabSales Partner[BT] WHERE partner_name = 'TradeSphere Global' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List all sales partners earning more than 10% commission.",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT commission_rate FROM [BT]tabSales Partner[BT] WHERE commission_rate > 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "What’s the commission rate for our distributor 'BrightWave Solutions'?",
      "fields": [
        "commission_rate",
        "partner_name",
        "partner_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT commission_rate FROM [BT]tabSales Partner[BT] WHERE partner_name = 'BrightWave Solutions' AND partner_type = 'Distributor' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show names and commission percentages of all commission agents.",
      "fields": [
        "partner_name",
        "partner_type",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, commission_rate FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Commission Agent' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Find partners earning less than or equal to 5% commission.",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT commission_rate FROM [BT]tabSales Partner[BT] WHERE commission_rate <= 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Is there any partner with exactly 12% commission?",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Partner[BT] WHERE commission_rate = 12''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Give me the partner name, website, and commission percentage for all resellers.",
      "fields": [
        "partner_name",
        "partner_type",
        "website",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, website, commission_rate FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Reseller' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Compare the commission rates between 'TradeWing Pvt Ltd' and 'GlobalReach Partners'.",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT commission_rate FROM [BT]tabSales Partner[BT] WHERE partner_name in '['TradeWing Pvt Ltd', 'GlobalReach Partners']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "What are the commission rates for all partners based in 'MENA' region?",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT commission_rate FROM [BT]tabSales Partner[BT] WHERE territory = 'MENA' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Are distributors earning more commission than affiliates?",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT commission_rate FROM [BT]tabSales Partner[BT] WHERE partner_type in '['Distributor', 'Affiliate']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "What is the description given for 'Orbit Trade Solutions' in our partner records?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('''SELECT description FROM [BT]tabSales Partner[BT] WHERE partner_name = 'Orbit Trade Solutions' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List all partners along with their descriptions.",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, description FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partners include the word 'logistics' in their description?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, description FROM [BT]tabSales Partner[BT] WHERE description LIKE '%logistics%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Can you show the name and description of each partner based in Asia?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, description FROM [BT]tabSales Partner[BT] WHERE territory = 'Asia' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Can you show the name and description of each partner based in Asia?",
      "fields": [
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, description FROM [BT]tabSales Partner[BT] WHERE territory = 'Asia' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Get me the description and partner type for affiliates in our list.",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('''SELECT description, partner_type FROM [BT]tabSales Partner[BT] WHERE partner_type = 'affiliate' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Get me the description and partner type for affiliates in our list.",
      "fields": [
        "partner_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT description, partner_type FROM [BT]tabSales Partner[BT] WHERE partner_type = 'affiliate' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Do we have a partner with 'ecommerce' mentioned in the description?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Partner[BT] WHERE description LIKE '%ecommerce%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Compare the descriptions of 'BrightLeaf Group' and 'CoreBridge Alliance'.",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, description FROM [BT]tabSales Partner[BT] WHERE partner_name in '['BrightLeaf Group', 'CoreBridge Alliance']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show me names and descriptions of all partners who earn over 15% commission.",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, description FROM [BT]tabSales Partner[BT] WHERE commission_rate > 15''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show me names and descriptions of all partners who earn over 15% commission.",
      "fields": [
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, description FROM [BT]tabSales Partner[BT] WHERE commission_rate > 15''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "What’s the official description of our partner 'LogiMax Pvt Ltd'?",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('''SELECT description FROM [BT]tabSales Partner[BT] WHERE partner_name = 'LogiMax Pvt Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Find all partners who have empty or missing descriptions.",
      "fields": [
        "description"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name FROM [BT]tabSales Partner[BT] WHERE description in '['', null]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show me the contact details displayed for 'Orbit Connect Pvt Ltd'.",
      "fields": [
        "contact_html"
      ]
    },
    "output": "frappe.db.sql('''SELECT contact_html FROM [BT]tabSales Partner[BT] WHERE partner_name = 'Orbit Connect Pvt Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which sales partners have formatted contact information available?",
      "fields": [
        "contact_html"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Partner[BT] WHERE contact_html != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Do we store contact HTML for each partner profile?",
      "fields": [
        "contact_html"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Partner[BT] WHERE contact_html != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Get a list of all partners with their HTML-based contact blocks.",
      "fields": [
        "contact_html"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, contact_html FROM [BT]tabSales Partner[BT] WHERE contact_html != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partners have both their formatted contacts and website links listed?",
      "fields": [
        "contact_html",
        "website"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, contact_html, website FROM [BT]tabSales Partner[BT] WHERE contact_html != '' AND website != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Give me the contact block and territory for all resellers.",
      "fields": [
        "contact_html",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT contact_html, territory FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Reseller' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Find partners who have provided both contact HTML and introduction.",
      "fields": [
        "contact_html",
        "introduction"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, contact_html, introduction FROM [BT]tabSales Partner[BT] WHERE contact_html != '' AND introduction != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "What are the targets set for each of our sales partners?",
      "fields": [
        "targets"
      ]
    },
    "output": "frappe.db.sql('''SELECT targets FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Give me the list of all partners along with their sales targets.",
      "fields": [
        "partner_name",
        "targets"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, targets FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show targets assigned to distributor-type partners across all territories.",
      "fields": [
        "partner_type",
        "targets"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_type, targets FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Distributor' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List partner names and their targets who operate in the UAE region.",
      "fields": [
        "partner_name",
        "targets"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, targets FROM [BT]tabSales Partner[BT] WHERE territory = 'UAE' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Can you show me partner types and the targets they are expected to meet?",
      "fields": [
        "partner_type",
        "targets"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_type, targets FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Give me all partners marked as affiliates with targets above QAR 500,000.",
      "fields": [
        "partner_type",
        "targets"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_type, targets FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Affiliate' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which of our resellers have sales targets for the upcoming quarter?",
      "fields": [
        "partner_type",
        "targets"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_type, targets FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Reseller' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Compare sales targets across partner types and list the top performers.",
      "fields": [
        "partner_type",
        "targets"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_type, targets FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Do we have any partners without any assigned sales targets?",
      "fields": [
        "targets"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Partner[BT] WHERE targets = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "What is the official website of 'Torotta Avlaye'?",
      "fields": [
        "partner_name",
        "website"
      ]
    },
    "output": "frappe.db.sql('''SELECT website FROM [BT]tabSales Partner[BT] WHERE partner_name = 'Torotta Avlaye' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List all partners whose websites end with '.com.qa'.",
      "fields": [
        "website",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, website FROM [BT]tabSales Partner[BT] WHERE website LIKE '%.com.qa' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Do any of our reseller partners have websites listed?",
      "fields": [
        "partner_type",
        "website",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, website FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Reseller' AND website != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show partner names and their websites for those visible to the public.",
      "fields": [
        "partner_name",
        "website",
        "show_in_website"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, website FROM [BT]tabSales Partner[BT] WHERE show_in_website = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partners have no website provided in their records?",
      "fields": [
        "website",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Partner[BT] WHERE website = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Get me a list of partner websites containing the word 'global'.",
      "fields": [
        "website",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, website FROM [BT]tabSales Partner[BT] WHERE website LIKE '%global%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Can you find all distributor partners and display their website URLs?",
      "fields": [
        "partner_type",
        "website"
      ]
    },
    "output": "frappe.db.sql('''SELECT website FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Distributor' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Do we have any affiliate partners with websites ending in '.org'?",
      "fields": [
        "partner_type",
        "website",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, website FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Affiliate' AND website LIKE '%.org' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Between 'Resell360' and 'OmniPartners', which one has a listed website?",
      "fields": [
        "partner_name",
        "website"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, website FROM [BT]tabSales Partner[BT] WHERE partner_name in '['Resell360', 'OmniPartners']' AND website != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partner has the website 'www.synergylink.com'?",
      "fields": [
        "website",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name FROM [BT]tabSales Partner[BT] WHERE website = 'www.synergylink.com' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List all partners along with their referral_code values.",
      "fields": [
        "name",
        "referral_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, referral_code FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partners don’t have any referral_code provided in their records?",
      "fields": [
        "referral_code",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Partner[BT] WHERE referral_code = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Find partners who have referral codes starting with 'AFF-'.",
      "fields": [
        "name",
        "referral_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, referral_code FROM [BT]tabSales Partner[BT] WHERE referral_code LIKE 'AFF-%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Get the referral_code and website for all affiliate-type partners.",
      "fields": [
        "partner_type",
        "referral_code",
        "website"
      ]
    },
    "output": "frappe.db.sql('''SELECT referral_code, website FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Affiliate' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Export partner_name and referral_code for all partners in Qatar.",
      "fields": [
        "territory",
        "partner_name",
        "referral_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, referral_code FROM [BT]tabSales Partner[BT] WHERE territory = 'Qatar' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "What is the referral code assigned to 'Altura Traders'?",
      "fields": [
        "partner_name",
        "referral_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT referral_code FROM [BT]tabSales Partner[BT] WHERE partner_name = 'Altura Traders' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Does 'Zenith Connect' have a referral_code assigned?",
      "fields": [
        "partner_name",
        "referral_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT referral_code FROM [BT]tabSales Partner[BT] WHERE partner_name = 'Zenith Connect' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Count how many partners have valid referral codes stored.",
      "fields": [
        "referral_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Partner[BT] WHERE referral_code != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "What is the route path assigned to 'GlobalLink Solutions' on our website?",
      "fields": [
        "route",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT route FROM [BT]tabSales Partner[BT] WHERE partner_name = 'GlobalLink Solutions' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List all sales partners whose route starts with '/partners/'.",
      "fields": [
        "name",
        "route"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, route FROM [BT]tabSales Partner[BT] WHERE route LIKE '/partners/%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show me the partner names and their corresponding web route paths.",
      "fields": [
        "partner_name",
        "route"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, route FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partners have unique route entries configured for the site?",
      "fields": [
        "name",
        "route"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, route FROM [BT]tabSales Partner[BT] WHERE route != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Do we have any partners using the default route value or an empty one?",
      "fields": [
        "name",
        "route"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Partner[BT] WHERE route = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Between 'TradeBridge' and 'MarketScope', who has a custom route defined?",
      "fields": [
        "partner_name",
        "route"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, route FROM [BT]tabSales Partner[BT] WHERE partner_name in '['TradeBridge', 'MarketScope']' AND route != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Give me all route entries that contain the word 'exclusive'.",
      "fields": [
        "route"
      ]
    },
    "output": "frappe.db.sql('''SELECT route FROM [BT]tabSales Partner[BT] WHERE route LIKE '%exclusive%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which sales partner has the URL route '/partner-profile/gcc-distributor'?",
      "fields": [
        "partner_name",
        "route"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name FROM [BT]tabSales Partner[BT] WHERE route = '/partner-profile/gcc-distributor' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Export all visible partners on the website along with their route links.",
      "fields": [
        "partner_name",
        "route",
        "show_in_website"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, route FROM [BT]tabSales Partner[BT] WHERE show_in_website = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Are there any route fields duplicated across different partners?",
      "fields": [
        "route"
      ]
    },
    "output": "frappe.db.sql('''SELECT route, COUNT(*) FROM [BT]tabSales Partner[BT] GROUP BY route HAVING COUNT(*) > 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "What is the external website link provided for 'BlueOcean Vendors'?",
      "fields": [
        "partner_name",
        "partner_website",
        "route",
        "logo"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_website FROM [BT]tabSales Partner[BT] WHERE partner_name = 'BlueOcean Vendors' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List the partner_website URLs of all partners visible to customers.",
      "fields": [
        "partner_website",
        "show_in_website",
        "website",
        "contact_desc"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_website FROM [BT]tabSales Partner[BT] WHERE show_in_website = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Can I view the official external sites for all commission agents?",
      "fields": [
        "partner_website",
        "commission_rate",
        "referral_code",
        "website"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_website FROM [BT]tabSales Partner[BT] WHERE commission_rate != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Get partner names and partner_website links for reseller-type entries.",
      "fields": [
        "partner_name",
        "partner_website",
        "partner_type",
        "referral_code",
        "route"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, partner_website FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Reseller' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partners do not have a partner_website listed yet?",
      "fields": [
        "partner_website",
        "description",
        "contact_html",
        "logo"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Partner[BT] WHERE partner_website = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Are there any affiliate partners whose websites contain 'tradehub'?",
      "fields": [
        "partner_type",
        "partner_website",
        "website",
        "route"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_website FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Affiliate' AND partner_website LIKE '%tradehub%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Between 'NetBridge Ltd' and 'MarketSpark', who has a valid partner_website?",
      "fields": [
        "partner_name",
        "partner_website",
        "introduction",
        "route"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, partner_website FROM [BT]tabSales Partner[BT] WHERE partner_name in '['NetBridge Ltd', 'MarketSpark']' AND partner_website != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show all partner_website URLs that end in '.tech' domain.",
      "fields": [
        "partner_website",
        "route",
        "website",
        "referral_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_website FROM [BT]tabSales Partner[BT] WHERE partner_website LIKE '%.tech' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Do any of the partners have a link to 'https://affiliateworld.org' in their records?",
      "fields": [
        "partner_website",
        "website",
        "route",
        "description"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Partner[BT] WHERE partner_website = 'https://affiliateworld.org' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Fetch the partner_website and contact description for partners in South America.",
      "fields": [
        "partner_website",
        "contact_desc",
        "territory",
        "route"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_website, contact_desc FROM [BT]tabSales Partner[BT] WHERE territory = 'South America' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "What is the introduction note for 'Orbit Traders' in our sales partner list?",
      "fields": [
        "introduction"
      ]
    },
    "output": "frappe.db.sql('''SELECT introduction FROM [BT]tabSales Partner[BT] WHERE partner_name = 'Orbit Traders' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show me all partners along with their introduction texts.",
      "fields": [
        "name",
        "introduction"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, introduction FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which sales partners have introduction messages starting with 'Leading exporter'?",
      "fields": [
        "name",
        "introduction"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Partner[BT] WHERE introduction LIKE 'Leading exporter%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List the name and introduction for every commission agent.",
      "fields": [
        "partner_type",
        "partner_name",
        "introduction"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name, introduction FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Commission Agent' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partners don't have any introduction filled in?",
      "fields": [
        "name",
        "introduction"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Partner[BT] WHERE introduction = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Provide all introductions for partners in the European region.",
      "fields": [
        "territory",
        "introduction"
      ]
    },
    "output": "frappe.db.sql('''SELECT introduction FROM [BT]tabSales Partner[BT] WHERE territory = 'Europe' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Export a list of reseller-type partners and their introduction fields.",
      "fields": [
        "partner_type",
        "introduction"
      ]
    },
    "output": "frappe.db.sql('''SELECT introduction FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Reseller' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Check if 'GlobeX Trade Corp' has an introduction field entered.",
      "fields": [
        "partner_name",
        "introduction"
      ]
    },
    "output": "frappe.db.sql('''SELECT introduction FROM [BT]tabSales Partner[BT] WHERE partner_name = 'GlobeX Trade Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "How many sales partners have included an introduction message?",
      "fields": [
        "introduction"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Partner[BT] WHERE introduction != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List all partners whose introductions contain the word 'global'.",
      "fields": [
        "name",
        "introduction"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Partner[BT] WHERE introduction LIKE '%global%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "What is the naming pattern used to generate supplier IDs?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabSupplier[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Can you show me how supplier codes are automatically generated?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabSupplier[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which document controls the prefix used for new supplier entries?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabSupplier[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find out how supplier numbers are structured in the system.",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabSupplier[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Where is the supplier ID format like 'SUP-.YYYY.-' defined?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabSupplier[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "How are suppliers named when records are created?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabSupplier[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "What format is used for supplier auto-generated names?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabSupplier[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Is there a setting that defines how new supplier records are named?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabSupplier[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which doctype includes the naming_series for vendors?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "What is the naming pattern for the vendors?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabSupplier[BT] LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Who is the vendor with code SUP-00015? I need their registered name for invoicing.",
      "fields": [
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE name = 'SUP-00015' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Pull up a list of suppliers based in Germany for vendor negotiations.",
      "fields": [
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE country = 'Germany' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show me the supplier name for internal transport services. We need to update the contract.",
      "fields": [
        "supplier_name",
        "is_transporter"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE is_transporter = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get the supplier name and mobile number for 'Metallic Edge Corp'.",
      "fields": [
        "supplier_name",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, mobile_no FROM [BT]tabSupplier[BT] WHERE supplier_name = 'Metallic Edge Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find the supplier that uses the email 'supplies@techlink.io'.",
      "fields": [
        "supplier_name",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE email_id = 'supplies@techlink.io' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get me the supplier name and default currency for vendors that are marked frozen in the system.",
      "fields": [
        "supplier_name",
        "default_currency",
        "is_frozen"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_currency FROM [BT]tabSupplier[BT] WHERE is_frozen = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Check the supplier name and primary contact for vendor ID SUP-00021.",
      "fields": [
        "supplier_name",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_primary_contact FROM [BT]tabSupplier[BT] WHERE name = 'SUP-00021' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all active suppliers under the 'Raw Material' group.",
      "fields": [
        "supplier_name",
        "supplier_group",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE supplier_group = 'Raw Material' AND disabled = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "I need supplier names and email IDs for transport service providers.",
      "fields": [
        "supplier_name",
        "email_id",
        "is_transporter"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, email_id FROM [BT]tabSupplier[BT] WHERE is_transporter = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which country is 'Atlantic Trade Co.' registered in?",
      "fields": [
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT country FROM [BT]tabSupplier[BT] WHERE supplier_name = 'Atlantic Trade Co.' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers located in the United Arab Emirates.",
      "fields": [
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE country = 'United Arab Emirates' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get suppliers from India and Bangladesh for textile sourcing.",
      "fields": [
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE country in '['India', 'Bangladesh']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show me vendors registered in countries outside the EU.",
      "fields": [
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE country not in '['Germany', 'France', 'Italy', 'Spain']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Do we have any suppliers from South Korea?",
      "fields": [
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE country = 'South Korea' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Filter all supplier entries that mention 'Germany' as their country.",
      "fields": [
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE country = 'Germany' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "How many suppliers are currently registered in China?",
      "fields": [
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSupplier[BT] WHERE country = 'China' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Export list of suppliers along with their country of operation.",
      "fields": [
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, country FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which vendors are based in Australia and New Zealand?",
      "fields": [
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE country in '['Australia', 'New Zealand']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Who are our suppliers from Latin American countries?",
      "fields": [
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE country in '['Brazil', 'Argentina', 'Colombia', 'Chile']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which supplier group does 'Fresh Agro Supplies' fall under?",
      "fields": [
        "supplier_group",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_group FROM [BT]tabSupplier[BT] WHERE supplier_name = 'Fresh Agro Supplies' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers categorized under 'Raw Material Vendors'.",
      "fields": [
        "supplier_group",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE supplier_group = 'Raw Material Vendors' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "How many suppliers do we have in the 'Importers' group?",
      "fields": [
        "supplier_group",
        "email_id",
        "image",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSupplier[BT] WHERE supplier_group = 'Importers' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get the supplier names and their groups for all active vendors from India.",
      "fields": [
        "supplier_group",
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_group FROM [BT]tabSupplier[BT] WHERE country = 'India' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show the group classification for suppliers that are transport service providers.",
      "fields": [
        "supplier_group",
        "is_transporter",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_group FROM [BT]tabSupplier[BT] WHERE is_transporter = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Do we have any local suppliers under the 'Capital Equipment' group?",
      "fields": [
        "supplier_group",
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE supplier_group = 'Capital Equipment' AND country = 'India' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Pull all supplier records under the 'Utilities & Services' group with payment terms set.",
      "fields": [
        "supplier_group",
        "payment_terms",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, payment_terms FROM [BT]tabSupplier[BT] WHERE supplier_group = 'Utilities & Services' AND payment_terms != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "BOM"
      ],
      "question": "List all active BOMs for item 'Steel Frame Assembly', sorted by creation date.",
      "fields": [
        "item",
        "is_active",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item, creation FROM [BT]tabBOM[BT] WHERE is_active = 1 AND item = 'Steel Frame Assembly' ORDER BY creation ASC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "BOM"
      ],
      "question": "Which BOMs include alternative items like 'Aluminum Rod'?",
      "fields": [
        "name",
        "items",
        "allow_alternative_item"
      ]
    },
    "output": "frappe.db.sql('''SELECT bom.name, bi.item_code, bi.alternative_item FROM [BT]tabBOM[BT] bom JOIN [BT]tabBOM Item[BT] bi ON bom.name = bi.parent WHERE bi.alternative_item = 'Aluminum Rod' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "BOM"
      ],
      "question": "Which BOMs use routing 'Assembly Line A' and what are their names?",
      "fields": [
        "name",
        "routing"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, routing FROM [BT]tabBOM[BT] WHERE routing = 'Assembly Line A' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "BOM"
      ],
      "question": "List BOMs that have more than 5 exploded items.",
      "fields": [
        "name",
        "items"
      ]
    },
    "output": "frappe.db.sql('''SELECT bi.parent AS bom_name, COUNT(bi.item_code,as_dict=True) AS exploded_item_count FROM [BT]tabBOM Item[BT] bi GROUP BY bi.parent HAVING COUNT(bi.item_code,as_dict=True) > 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "BOM"
      ],
      "question": "Which BOMs were amended from 'BOM-STEEL-001'?",
      "fields": [
        "name",
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, amended_from FROM [BT]tabBOM[BT] WHERE amended_from = 'BOM-STEEL-001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "For each supplier group, show the default currency and the number of associated suppliers.",
      "fields": [
        "supplier_group",
        "default_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_group, default_currency FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are there any suppliers who also handle transportation services for us?",
      "fields": [
        "is_transporter"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier[BT] WHERE is_transporter = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which vendors are marked as transport providers for our delivery operations?",
      "fields": [
        "is_transporter",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE is_transporter = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Pull up supplier names along with their transport service status for audit purposes.",
      "fields": [
        "supplier_name",
        "is_transporter"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, is_transporter FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show transport status and type for all active vendors.",
      "fields": [
        "is_transporter",
        "supplier_type",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_transporter, supplier_type FROM [BT]tabSupplier[BT] WHERE disabled = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers in our system provide transport services along with their products?",
      "fields": [
        "is_transporter",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE is_transporter = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List supplier name, group, and transport status for review.",
      "fields": [
        "supplier_name",
        "supplier_group",
        "is_transporter"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_group, is_transporter FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which vendors don’t provide transport services but outsource deliveries?",
      "fields": [
        "is_transporter",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE is_transporter = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show me all suppliers with their names and whether they handle transportation.",
      "fields": [
        "supplier_name",
        "is_transporter"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, is_transporter FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get the supplier name, type, and transport capability status for construction vendors.",
      "fields": [
        "supplier_name",
        "supplier_type",
        "is_transporter",
        "supplier_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_type, is_transporter FROM [BT]tabSupplier[BT] WHERE supplier_group = 'Construction' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which of our suppliers also operate as logistics partners?",
      "fields": [
        "is_transporter",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE is_transporter = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find suppliers who haven't uploaded their business image yet.",
      "fields": [
        "image",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE image = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Pull the image and default currency info for active suppliers.",
      "fields": [
        "image",
        "default_currency",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT image, default_currency FROM [BT]tabSupplier[BT] WHERE disabled = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which vendors have profile pictures and valid email addresses?",
      "fields": [
        "image",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT image, email_id FROM [BT]tabSupplier[BT] WHERE image != '' AND email_id != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Do any suppliers have images associated with their company profiles?",
      "fields": [
        "image",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, image FROM [BT]tabSupplier[BT] WHERE image != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get me the profile pictures and contact details of key international vendors.",
      "fields": [
        "image",
        "mobile_no",
        "email_id",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT image, mobile_no, email_id FROM [BT]tabSupplier[BT] WHERE country = 'International' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which vendors have uploaded a profile image in the system?",
      "fields": [
        "image",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE image != ''''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show me the supplier name and image for all internal suppliers.",
      "fields": [
        "supplier_name",
        "image",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, image FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers along with their logos for catalog publishing.",
      "fields": [
        "supplier_name",
        "image"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, image FROM [BT]tabSupplier[BT] WHERE image != ''''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Do we have image records for vendors categorized as 'Transport Services'?",
      "fields": [
        "image",
        "supplier_name",
        "supplier_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, image FROM [BT]tabSupplier[BT] WHERE supplier_type = 'Transport Services' AND image != ''''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get the name, type, and image of all disabled suppliers.",
      "fields": [
        "supplier_name",
        "supplier_type",
        "image",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_type, image FROM [BT]tabSupplier[BT] WHERE disabled = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers with a configured default bank account.",
      "fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_bank_account FROM [BT]tabSupplier[BT] WHERE default_bank_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers don't have any default bank account set?",
      "fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE default_bank_account = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get the names and default bank accounts of all internal suppliers.",
      "fields": [
        "supplier_name",
        "default_bank_account",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_bank_account FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Pull all disabled suppliers who still have default bank accounts linked.",
      "fields": [
        "disabled",
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_bank_account FROM [BT]tabSupplier[BT] WHERE disabled = 1 AND default_bank_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which vendors use 'HSBC Main' as their default bank?",
      "fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE default_bank_account = 'HSBC Main' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Retrieve the supplier name, currency, and bank account for international suppliers.",
      "fields": [
        "supplier_name",
        "default_currency",
        "default_bank_account",
        "supplier_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_currency, default_bank_account FROM [BT]tabSupplier[BT] WHERE supplier_group = 'International' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get all suppliers with both a default bank account and a tax ID.",
      "fields": [
        "default_bank_account",
        "tax_id",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_bank_account, tax_id FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Give me a list of all vendors and their bank accounts for payment processing.",
      "fields": [
        "supplier_name",
        "default_bank_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_bank_account FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are there any suppliers with missing bank and price list setup?",
      "fields": [
        "default_bank_account",
        "default_price_list",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List internal suppliers who have a bank account but no tax ID.",
      "fields": [
        "is_internal_supplier",
        "default_bank_account",
        "supplier_name",
        "tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_bank_account FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1 AND default_bank_account != '' AND tax_id = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers with a configured default bank account.",
      "fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_bank_account FROM [BT]tabSupplier[BT] WHERE default_bank_account isnot ' '''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers don't have any default bank account set?",
      "fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE default_bank_account = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get the names and default bank accounts of all internal suppliers.",
      "fields": [
        "supplier_name",
        "default_bank_account",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_bank_account FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Pull all disabled suppliers who still have default bank accounts linked.",
      "fields": [
        "supplier_name",
        "default_bank_account",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_bank_account FROM [BT]tabSupplier[BT] WHERE disabled = 1 AND default_bank_account isnot ' '''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which vendors use 'HSBC Main' as their default bank?",
      "fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE default_bank_account = 'HSBC Main' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Retrieve the supplier name, currency, and bank account for international suppliers.",
      "fields": [
        "supplier_name",
        "default_currency",
        "default_bank_account",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_currency, default_bank_account FROM [BT]tabSupplier[BT] WHERE country != 'Local' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get all suppliers with both a default bank account and a tax ID.",
      "fields": [
        "default_bank_account",
        "tax_id",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_bank_account, tax_id FROM [BT]tabSupplier[BT] WHERE default_bank_account isnot '' AND tax_id isnot ' '''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Give me a list of all vendors and their bank accounts for payment processing.",
      "fields": [
        "supplier_name",
        "default_bank_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_bank_account FROM [BT]tabSupplier[BT] WHERE default_bank_account isnot ' '''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are there any suppliers with missing bank and price list setup?",
      "fields": [
        "default_bank_account",
        "default_price_list",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE default_bank_account = '' AND default_price_list = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List internal suppliers who have a bank account but no tax ID.",
      "fields": [
        "is_internal_supplier",
        "default_bank_account",
        "tax_id",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_bank_account FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1 AND default_bank_account isnot '' AND tax_id = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "What is the default bank account associated with each supplier?",
      "fields": [
        "default_bank_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT default_bank_account FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get supplier names along with their default bank accounts.",
      "fields": [
        "supplier_name",
        "default_bank_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_bank_account FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which internal suppliers have a default bank account listed?",
      "fields": [
        "is_internal_supplier",
        "default_bank_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT default_bank_account FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show me the name, currency, and default bank account for all active suppliers.",
      "fields": [
        "supplier_name",
        "default_currency",
        "default_bank_account",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_currency, default_bank_account FROM [BT]tabSupplier[BT] WHERE disabled = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find suppliers who have no default bank account setup but are not frozen.",
      "fields": [
        "default_bank_account",
        "is_frozen"
      ]
    },
    "output": "frappe.db.sql('''SELECT default_bank_account FROM [BT]tabSupplier[BT] WHERE default_bank_account = '' AND is_frozen = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Pull suppliers with both a valid default bank account and price list.",
      "fields": [
        "default_bank_account",
        "default_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT default_bank_account, default_price_list FROM [BT]tabSupplier[BT] WHERE default_bank_account != '' AND default_price_list != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers that are not disabled and have bank details set for default transactions.",
      "fields": [
        "default_bank_account",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT default_bank_account FROM [BT]tabSupplier[BT] WHERE disabled = 0 AND default_bank_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show me the suppliers who represent companies and have default bank accounts set.",
      "fields": [
        "represents_company",
        "default_bank_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT default_bank_account, represents_company FROM [BT]tabSupplier[BT] WHERE default_bank_account != '' AND represents_company != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Export supplier names and their bank accounts used for automatic payments.",
      "fields": [
        "supplier_name",
        "default_bank_account",
        "payment_terms"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_bank_account, payment_terms FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Do any vendors lack a default bank account for incoming payment setups?",
      "fields": [
        "default_bank_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT default_bank_account FROM [BT]tabSupplier[BT] WHERE default_bank_account = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which sales partners have 'Standard Selling' as their default price list?",
      "fields": [
        "default_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSales Partner[BT] WHERE default_price_list = 'Standard Selling' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Show me all partners and their assigned default price lists.",
      "fields": [
        "partner_name",
        "default_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSales Partner[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Are there any partners that haven’t selected a default price list yet?",
      "fields": [
        "partner_name",
        "default_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSales Partner[BT] WHERE default_price_list = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Give me the names of partners in Europe using 'Retail Prices' as their default list.",
      "fields": [
        "partner_name",
        "territory",
        "default_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSales Partner[BT] WHERE territory = 'Europe' AND default_price_list = 'Retail Prices' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Who is using 'Wholesale Rates' as the default price list and is also a reseller?",
      "fields": [
        "partner_name",
        "partner_type",
        "default_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Reseller' AND default_price_list = 'Wholesale Rates' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "List distributors with missing default price list configuration.",
      "fields": [
        "partner_name",
        "partner_type",
        "default_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Distributor' AND default_price_list = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Can I see which default price list 'SkyTrade Ltd' is using?",
      "fields": [
        "partner_name",
        "default_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSales Partner[BT] WHERE partner_name = 'SkyTrade Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which affiliates are assigned 'International Pricing' as their default price list?",
      "fields": [
        "partner_type",
        "default_price_list",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSales Partner[BT] WHERE partner_type = 'Affiliate' AND default_price_list = 'International Pricing' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "How many sales partners use the 'Qatar Discounted List' by default?",
      "fields": [
        "default_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Partner[BT] WHERE default_price_list = 'Qatar Discounted List' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "I want to audit all partners that use a price list starting with 'North America'.",
      "fields": [
        "default_price_list",
        "partner_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSales Partner[BT] WHERE default_price_list LIKE 'North America%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers have 'Standard Chartered - 112233' as their bank?",
      "fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE default_bank_account = 'Standard Chartered - 112233' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show me all partners and their assigned default bank accounts.",
      "fields": [
        "supplier_name",
        "default_bank_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_bank_account FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are there any suppliers that haven’t set up a default bank account yet?",
      "fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE default_bank_account = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Does 'Pacific Traders' have a default bank account set?",
      "fields": [
        "default_bank_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT default_bank_account FROM [BT]tabSupplier[BT] WHERE name = 'Pacific Traders' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers with their default bank accounts defined.",
      "fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_bank_account FROM [BT]tabSupplier[BT] WHERE default_bank_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find internal suppliers using 'Standard Chartered - 112233' as their bank.",
      "fields": [
        "is_internal_supplier",
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1 AND default_bank_account = 'Standard Chartered - 112233' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Who are the UAE suppliers that use 'Mashreq Bank - 4455' by default?",
      "fields": [
        "country",
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE country = 'United Arab Emirates' AND default_bank_account = 'Mashreq Bank - 4455' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "How many suppliers use a defined default bank account?",
      "fields": [
        "default_bank_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSupplier[BT] WHERE default_bank_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers using a bank account starting with 'Doha Bank'.",
      "fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, default_bank_account FROM [BT]tabSupplier[BT] WHERE default_bank_account LIKE 'Doha Bank%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Check the default bank account of 'BrightBridge Supplies' if available.",
      "fields": [
        "default_bank_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT default_bank_account FROM [BT]tabSupplier[BT] WHERE name = 'BrightBridge Supplies' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers represent HTS Qatar?",
      "fields": [
        "represents_company",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE represents_company = 'HTS Qatar' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List the suppliers and companies they represent.",
      "fields": [
        "supplier_name",
        "represents_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, represents_company FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Do we have any suppliers that do not represent a company?",
      "fields": [
        "supplier_name",
        "represents_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE represents_company = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "How many suppliers are linked to 'Global Traders Inc.'?",
      "fields": [
        "represents_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSupplier[BT] WHERE represents_company = 'Global Traders Inc.' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Check which company 'BrightSource LLC' represents.",
      "fields": [
        "represents_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT represents_company FROM [BT]tabSupplier[BT] WHERE name = 'BrightSource LLC' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Who are the suppliers from India representing a company?",
      "fields": [
        "country",
        "represents_company",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE country = 'India' AND represents_company != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Give me suppliers who represent 'Vertex Technologies' and are internal vendors.",
      "fields": [
        "represents_company",
        "is_internal_supplier",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE represents_company = 'Vertex Technologies' AND is_internal_supplier = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which company does 'Delta Logistics' represent and what is their email?",
      "fields": [
        "supplier_name",
        "represents_company",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT represents_company, email_id FROM [BT]tabSupplier[BT] WHERE supplier_name = 'Delta Logistics' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers that represent companies starting with 'Qatar'.",
      "fields": [
        "represents_company",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, represents_company FROM [BT]tabSupplier[BT] WHERE represents_company LIKE 'Qatar%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are there suppliers that represent different companies across territories?",
      "fields": [
        "represents_company",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT represents_company, COUNT(DISTINCT country) as territories FROM [BT]tabSupplier[BT] WHERE represents_company IS NOT NULL GROUP BY represents_company HAVING territories > 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which companies is 'Max Traders Ltd' associated with as a supplier?",
      "fields": [
        "supplier_name",
        "companies"
      ]
    },
    "output": "frappe.db.sql('''SELECT companies FROM [BT]tabSupplier[BT] WHERE supplier_name = 'Max Traders Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers and their linked companies.",
      "fields": [
        "supplier_name",
        "companies"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, companies FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are there suppliers associated with more than one company?",
      "fields": [
        "supplier_name",
        "companies"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE JSON_LENGTH(companies) > 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "How many suppliers are linked with 'Qatar Oil Co' as their company?",
      "fields": [
        "companies"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) FROM [BT]tabSupplier[BT] WHERE JSON_CONTAINS(companies, ''Qatar Oil Co''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Fetch the companies for supplier 'BrightLogix LLC'.",
      "fields": [
        "companies"
      ]
    },
    "output": "frappe.db.sql('''SELECT companies FROM [BT]tabSupplier[BT] WHERE name = 'BrightLogix LLC' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Do we have any suppliers not linked to any company?",
      "fields": [
        "supplier_name",
        "companies"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE companies = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Give the names of suppliers in India connected to multiple companies.",
      "fields": [
        "supplier_name",
        "country",
        "companies"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE country = 'India' AND JSON_LENGTH(companies) > 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show suppliers grouped by the company they represent.",
      "fields": [
        "companies"
      ]
    },
    "output": "frappe.db.sql('''SELECT JSON_UNQUOTE(JSON_EXTRACT(companies, '$[0]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get a list of internal suppliers and their companies.",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "companies"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, companies FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers are linked with 'HTS Qatar' and listed under 'International Vendors' group?",
      "fields": [
        "supplier_name",
        "supplier_group",
        "companies"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE supplier_group = 'International Vendors' AND JSON_CONTAINS(companies, ''HTS Qatar''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show me all suppliers along with their business background or description.",
      "fields": [
        "supplier_name",
        "supplier_details"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_details FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "What’s written in the profile section of 'GulfSteel Ltd'?",
      "fields": [
        "supplier_details"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_details FROM [BT]tabSupplier[BT] WHERE name = 'GulfSteel Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers that have 'construction materials' mentioned in their business description.",
      "fields": [
        "supplier_name",
        "supplier_details"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_details FROM [BT]tabSupplier[BT] WHERE supplier_details LIKE '%construction materials%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are there any suppliers whose profile mentions both logistics and warehousing?",
      "fields": []
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier[BT] WHERE supplier_details LIKE '%logistics%' AND supplier_details LIKE '%warehousing%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Retrieve details of internal suppliers describing supply chain services.",
      "fields": [
        "supplier_name",
        "supplier_details"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_details FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1 AND supplier_details LIKE '%supply chain%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers have not provided any business description yet?",
      "fields": [
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE supplier_details = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get supplier names and details for those in the 'Raw Materials' group.",
      "fields": [
        "supplier_name",
        "supplier_details"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_details FROM [BT]tabSupplier[BT] WHERE supplier_group = 'Raw Materials' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers with 'Retailer' type have lengthy descriptions in their profile?",
      "fields": []
    },
    "output": "frappe.db.sql('''SELECT name, supplier_details FROM [BT]tabSupplier[BT] WHERE supplier_type = 'Retailer' AND LENGTH(supplier_details) > 200''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Tell me about the description and background of ‘Oceanic Trade Co’.",
      "fields": [
        "supplier_details"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_details FROM [BT]tabSupplier[BT] WHERE name = 'Oceanic Trade Co' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "I want to find suppliers whose details mention 'eco-friendly' or 'green'.",
      "fields": [
        "supplier_details"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier[BT] WHERE supplier_details LIKE '%eco-friendly%' OR supplier_details LIKE '%green%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers have specified their preferred communication language?",
      "fields": [
        "language",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, language FROM [BT]tabSupplier[BT] WHERE language != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers along with their language preferences.",
      "fields": [
        "language",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, language FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Who are the suppliers using Arabic as their preferred language?",
      "fields": [
        "language",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE language = 'Arabic' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find suppliers from Qatar who prefer to communicate in English.",
      "fields": [
        "language",
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, language FROM [BT]tabSupplier[BT] WHERE country = 'Qatar' AND language = 'English' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Do any internal suppliers use Spanish as their language setting?",
      "fields": [
        "language",
        "supplier_name",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1 AND language = 'Spanish' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List the languages used by suppliers marked as transporters.",
      "fields": [
        "language",
        "supplier_name",
        "is_transporter"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, language FROM [BT]tabSupplier[BT] WHERE is_transporter = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Can I see which language 'Elite Logistics' prefers for communication?",
      "fields": [
        "language",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT language FROM [BT]tabSupplier[BT] WHERE supplier_name = 'Elite Logistics' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers have not set any language preference?",
      "fields": [
        "language",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE language = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "How many suppliers are using French as their communication language?",
      "fields": [
        "language"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSupplier[BT] WHERE language = 'French' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Give me a list of suppliers using any language setting starting with 'En'.",
      "fields": [
        "language",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, language FROM [BT]tabSupplier[BT] WHERE language LIKE 'En%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers have a valid Tax ID on file?",
      "fields": [
        "tax_id",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, tax_id FROM [BT]tabSupplier[BT] WHERE tax_id != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers and their registered tax IDs.",
      "fields": [
        "supplier_name",
        "tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, tax_id FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Who uses 'QA-77890' as their Tax ID?",
      "fields": [
        "supplier_name",
        "tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE tax_id = 'QA-77890' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find suppliers in the UAE with a Tax ID starting with 'AE'.",
      "fields": [
        "country",
        "tax_id",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, tax_id FROM [BT]tabSupplier[BT] WHERE country = 'UAE' AND tax_id LIKE 'AE%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which internal suppliers have no tax ID provided?",
      "fields": [
        "is_internal_supplier",
        "tax_id",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1 AND tax_id = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show me the tax ID of 'PrimeSteel Ltd'.",
      "fields": [
        "supplier_name",
        "tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT tax_id FROM [BT]tabSupplier[BT] WHERE supplier_name = 'PrimeSteel Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List transporters along with their tax identification numbers.",
      "fields": [
        "is_transporter",
        "tax_id",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, tax_id FROM [BT]tabSupplier[BT] WHERE is_transporter = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "How many suppliers have a Tax ID containing 'VAT'?",
      "fields": [
        "tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSupplier[BT] WHERE tax_id LIKE '%VAT%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Give me the suppliers and tax IDs for those using 'Retail Group'.",
      "fields": [
        "supplier_group",
        "supplier_name",
        "tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, tax_id FROM [BT]tabSupplier[BT] WHERE supplier_group = 'Retail Group' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers have tax IDs that end with '99'?",
      "fields": [
        "supplier_name",
        "tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, tax_id FROM [BT]tabSupplier[BT] WHERE tax_id LIKE '%99' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers along with their tax categories.",
      "fields": [
        "supplier_name",
        "tax_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers fall under the 'Goods and Services' tax category?",
      "fields": [
        "tax_category",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier[BT] WHERE tax_category = 'Goods and Services' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are there any suppliers without a defined tax category?",
      "fields": [
        "tax_category",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier[BT] WHERE tax_category = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show me suppliers categorized under 'Zero Tax'.",
      "fields": [
        "tax_category",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier[BT] WHERE tax_category = 'Zero Tax' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which supplier named 'Al Jazeera Supplies' has what tax category?",
      "fields": [
        "supplier_name",
        "tax_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier[BT] WHERE supplier_name = 'Al Jazeera Supplies' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Fetch all tax categories of internal suppliers.",
      "fields": [
        "is_internal_supplier",
        "tax_category",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find all Indian suppliers in the 'Export Category' for tax.",
      "fields": [
        "country",
        "tax_category",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier[BT] WHERE country = 'India' AND tax_category = 'Export Category' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List names and tax categories for transporters.",
      "fields": [
        "is_transporter",
        "supplier_name",
        "tax_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier[BT] WHERE is_transporter = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are any disabled suppliers assigned a tax category?",
      "fields": [
        "disabled",
        "tax_category",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier[BT] WHERE disabled = 1 AND tax_category != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Give me the tax categories of suppliers having VAT in their tax ID.",
      "fields": [
        "tax_id",
        "tax_category",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier[BT] WHERE tax_id LIKE '%VAT%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers with their tax withholding categories.",
      "fields": [
        "supplier_name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, tax_withholding_category FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers are associated with the 'Professional Services' tax withholding category?",
      "fields": [
        "supplier_name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE tax_withholding_category = 'Professional Services' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Do any internal suppliers fall under a tax withholding category?",
      "fields": [
        "is_internal_supplier",
        "supplier_name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, tax_withholding_category FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "What is the withholding category for the supplier named 'Oceanic Traders'?",
      "fields": [
        "supplier_name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT tax_withholding_category FROM [BT]tabSupplier[BT] WHERE supplier_name = 'Oceanic Traders' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Give me names and withholding categories for all transporters.",
      "fields": [
        "is_transporter",
        "supplier_name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, tax_withholding_category FROM [BT]tabSupplier[BT] WHERE is_transporter = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers do not have any tax withholding category assigned?",
      "fields": [
        "supplier_name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE tax_withholding_category = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Can you get me suppliers from Qatar with tax withholding category labeled 'Consulting'?",
      "fields": [
        "country",
        "tax_withholding_category",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE country = 'Qatar' AND tax_withholding_category = 'Consulting' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are there any disabled suppliers linked to a withholding category?",
      "fields": [
        "disabled",
        "supplier_name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, tax_withholding_category FROM [BT]tabSupplier[BT] WHERE disabled = 1 AND tax_withholding_category != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "I need a breakdown of withholding tax categories used by all suppliers.",
      "fields": [
        "supplier_name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, tax_withholding_category FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Fetch suppliers with tax ID containing 'VAT' and show their tax withholding categories.",
      "fields": [
        "tax_id",
        "supplier_name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, tax_withholding_category FROM [BT]tabSupplier[BT] WHERE tax_id LIKE '%VAT%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers have a billing address listed as their primary address?",
      "fields": [
        "supplier_name",
        "primary_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, primary_address FROM [BT]tabSupplier[BT] WHERE primary_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers have a primary address saved?",
      "fields": [
        "supplier_name",
        "supplier_primary_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_primary_address FROM [BT]tabSupplier[BT] WHERE supplier_primary_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers are marked with a warning for POS?",
      "fields": [
        "warn_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT warn_pos FROM [BT]tabSupplier[BT] WHERE warn_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get the list of suppliers and whether they trigger POS warnings.",
      "fields": [
        "warn_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT warn_pos FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List Indian suppliers with POS warnings enabled.",
      "fields": [
        "warn_pos",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT warn_pos FROM [BT]tabSupplier[BT] WHERE country = 'India' AND warn_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Who are the suppliers that are not flagged for POS?",
      "fields": [
        "warn_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT warn_pos FROM [BT]tabSupplier[BT] WHERE warn_pos = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which disabled suppliers also have POS warnings turned on?",
      "fields": [
        "warn_pos",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT warn_pos FROM [BT]tabSupplier[BT] WHERE disabled = 1 AND warn_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show suppliers with POS warning flags and their emails.",
      "fields": [
        "warn_pos",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT warn_pos, email_id FROM [BT]tabSupplier[BT] WHERE warn_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find the supplier group of all those with POS warnings active.",
      "fields": [
        "warn_pos",
        "supplier_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT warn_pos, supplier_group FROM [BT]tabSupplier[BT] WHERE warn_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are there suppliers flagged for POS but not frozen?",
      "fields": [
        "warn_pos",
        "is_frozen"
      ]
    },
    "output": "frappe.db.sql('''SELECT warn_pos FROM [BT]tabSupplier[BT] WHERE warn_pos = 1 AND is_frozen = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Retrieve suppliers with POS warnings and their primary contacts.",
      "fields": [
        "warn_pos",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT warn_pos, supplier_primary_contact FROM [BT]tabSupplier[BT] WHERE warn_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers from Qatar who are warned for POS.",
      "fields": [
        "warn_pos",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT warn_pos FROM [BT]tabSupplier[BT] WHERE country = 'Qatar' AND warn_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List the suppliers and their registered primary addresses.",
      "fields": [
        "supplier_name",
        "supplier_primary_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_primary_address FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show all suppliers that do not have a primary address assigned.",
      "fields": [
        "supplier_name",
        "supplier_primary_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE supplier_primary_address = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Do any Indian suppliers have a registered primary address?",
      "fields": [
        "supplier_name",
        "supplier_primary_address",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_primary_address FROM [BT]tabSupplier[BT] WHERE country = 'India' AND supplier_primary_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which internal suppliers have a specified primary address?",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "supplier_primary_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1 AND supplier_primary_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get suppliers with both primary address and contact person set.",
      "fields": [
        "supplier_name",
        "supplier_primary_address",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE supplier_primary_address != '' AND supplier_primary_contact != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find primary address and email for each supplier.",
      "fields": [
        "supplier_name",
        "supplier_primary_address",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_primary_address, email_id FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers have the same primary and billing address?",
      "fields": [
        "supplier_primary_address",
        "primary_address",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE supplier_primary_address = 'primary_address' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are there suppliers with a defined primary address and website?",
      "fields": [
        "supplier_name",
        "supplier_primary_address",
        "website"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE supplier_primary_address != '' AND website != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show suppliers along with their names, emails, and primary addresses.",
      "fields": [
        "supplier_name",
        "email_id",
        "supplier_primary_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, email_id, supplier_primary_address FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show me the primary billing addresses for all suppliers.",
      "fields": [
        "supplier_name",
        "primary_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, primary_address FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find suppliers that don’t have any billing address saved.",
      "fields": [
        "supplier_name",
        "primary_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE primary_address = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Do suppliers from the UAE have a defined billing address?",
      "fields": [
        "supplier_name",
        "country",
        "primary_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, primary_address FROM [BT]tabSupplier[BT] WHERE country = 'UAE' AND primary_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which transporters have a recorded primary address?",
      "fields": [
        "supplier_name",
        "is_transporter",
        "primary_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE is_transporter = 1 AND primary_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Give me suppliers with matching primary and main addresses.",
      "fields": [
        "supplier_name",
        "primary_address",
        "supplier_primary_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE primary_address = 'supplier_primary_address' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers and their contact details including billing address.",
      "fields": [
        "supplier_name",
        "email_id",
        "primary_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, email_id, primary_address FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which internal suppliers have a primary address mentioned?",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "primary_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1 AND primary_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find out suppliers with websites and billing addresses both filled.",
      "fields": [
        "supplier_name",
        "primary_address",
        "website"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE primary_address != '' AND website != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers list email and billing address together?",
      "fields": [
        "supplier_name",
        "email_id",
        "primary_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, email_id, primary_address FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Who is listed as the primary contact for each supplier?",
      "fields": [
        "supplier_name",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_primary_contact FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers along with their main contact persons.",
      "fields": [
        "supplier_name",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_primary_contact FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find all suppliers without a primary contact assigned.",
      "fields": [
        "supplier_name",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE supplier_primary_contact = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Do any internal suppliers have a primary contact defined?",
      "fields": [
        "is_internal_supplier",
        "supplier_primary_contact",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_primary_contact FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1 AND supplier_primary_contact != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers from India have listed their primary contact person?",
      "fields": [
        "country",
        "supplier_primary_contact",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_primary_contact FROM [BT]tabSupplier[BT] WHERE country = 'India' AND supplier_primary_contact != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Give me suppliers that have both primary contact and address information.",
      "fields": [
        "supplier_primary_contact",
        "supplier_primary_address",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE supplier_primary_contact != '' AND supplier_primary_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all primary contacts and their email for every supplier.",
      "fields": [
        "supplier_name",
        "supplier_primary_contact",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_primary_contact, email_id FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show me suppliers whose primary contact name includes the word 'Manager'.",
      "fields": [
        "supplier_name",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_primary_contact FROM [BT]tabSupplier[BT] WHERE supplier_primary_contact LIKE '%Manager%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are there any suppliers without email but with a contact person listed?",
      "fields": [
        "email_id",
        "supplier_primary_contact",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE email_id = '' AND supplier_primary_contact != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Give me a list of supplier names with mobile and contact details.",
      "fields": [
        "supplier_name",
        "mobile_no",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, mobile_no, supplier_primary_contact FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers along with their mobile numbers.",
      "fields": [
        "supplier_name",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, mobile_no FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers have not provided a mobile number?",
      "fields": [
        "supplier_name",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE mobile_no = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show me suppliers with a mobile number starting with '+974'.",
      "fields": [
        "supplier_name",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, mobile_no FROM [BT]tabSupplier[BT] WHERE mobile_no LIKE '+974%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get names and mobile contacts of all internal suppliers.",
      "fields": [
        "supplier_name",
        "mobile_no",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, mobile_no FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find suppliers whose mobile numbers are longer than 10 digits.",
      "fields": [
        "supplier_name",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show suppliers with mobile numbers and email addresses.",
      "fields": [
        "supplier_name",
        "mobile_no",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, mobile_no, email_id FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers listed from India have valid mobile numbers?",
      "fields": [
        "supplier_name",
        "mobile_no",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, mobile_no FROM [BT]tabSupplier[BT] WHERE country = 'India' AND mobile_no != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find suppliers where the mobile number and email are both missing.",
      "fields": [
        "mobile_no",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE mobile_no = '' AND email_id = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Do any suppliers use a mobile number containing the digits '999'?",
      "fields": [
        "supplier_name",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, mobile_no FROM [BT]tabSupplier[BT] WHERE mobile_no LIKE '%999%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers with both contact person and mobile number available.",
      "fields": [
        "supplier_name",
        "supplier_primary_contact",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE supplier_primary_contact != '' AND mobile_no != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show me all suppliers with their email addresses.",
      "fields": [
        "supplier_name",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, email_id FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers have not provided an email address?",
      "fields": [
        "supplier_name",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE email_id = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers whose email contains 'procure'.",
      "fields": [
        "supplier_name",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, email_id FROM [BT]tabSupplier[BT] WHERE email_id LIKE '%procure%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get internal suppliers and their email contacts.",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, email_id FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show suppliers whose email ends with '@gmail.com'.",
      "fields": [
        "supplier_name",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, email_id FROM [BT]tabSupplier[BT] WHERE email_id LIKE '%@gmail.com' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers from Qatar have their email ID registered?",
      "fields": [
        "supplier_name",
        "country",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, email_id FROM [BT]tabSupplier[BT] WHERE country = 'Qatar' AND email_id != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers with both email and website available.",
      "fields": [
        "email_id",
        "website",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE email_id != '' AND website != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Do any suppliers use a common domain in their email addresses?",
      "fields": [
        "supplier_name",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, email_id FROM [BT]tabSupplier[BT] WHERE email_id LIKE '%@%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find suppliers where both mobile number and email are missing.",
      "fields": [
        "supplier_name",
        "mobile_no",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE mobile_no = '' AND email_id = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers have the same email as their contact person?",
      "fields": [
        "supplier_name",
        "email_id",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE email_id = 'supplier_primary_contact' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers with their assigned payment terms.",
      "fields": [
        "supplier_name",
        "payment_terms"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, payment_terms FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers do not have any payment terms specified?",
      "fields": [
        "supplier_name",
        "payment_terms"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE payment_terms = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are there any suppliers who follow Net 30 payment terms?",
      "fields": [
        "supplier_name",
        "payment_terms"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE payment_terms = 'Net 30' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Give me the list of internal suppliers and their payment terms.",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "payment_terms"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, payment_terms FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers from the US use immediate payment terms?",
      "fields": [
        "supplier_name",
        "country",
        "payment_terms"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE country = 'United States' AND payment_terms = 'Immediate' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Can I get the payment terms and contact email for each supplier?",
      "fields": [
        "supplier_name",
        "payment_terms",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, payment_terms, email_id FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers have both payment terms and a price list defined?",
      "fields": [
        "supplier_name",
        "payment_terms",
        "default_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE payment_terms != '' AND default_price_list != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show me suppliers where payment terms are missing but price list is available.",
      "fields": [
        "supplier_name",
        "payment_terms",
        "default_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE payment_terms = '' AND default_price_list != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get suppliers with Net 15 terms and based in Qatar.",
      "fields": [
        "supplier_name",
        "payment_terms",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE payment_terms = 'Net 15' AND country = 'Qatar' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List the names, payment terms, and groups of all suppliers.",
      "fields": [
        "supplier_name",
        "payment_terms",
        "supplier_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, payment_terms, supplier_group FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers and their linked account settings.",
      "fields": [
        "supplier_name",
        "accounts"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, accounts FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers do not have any account details configured?",
      "fields": [
        "supplier_name",
        "accounts"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE accounts = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show me internal suppliers with defined accounts.",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "accounts"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1 AND accounts != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get the account records of suppliers from India.",
      "fields": [
        "supplier_name",
        "country",
        "accounts"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, accounts FROM [BT]tabSupplier[BT] WHERE country = 'India' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are there any suppliers whose accounts section is empty?",
      "fields": [
        "supplier_name",
        "accounts"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE accounts = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers from the US have account records?",
      "fields": [
        "supplier_name",
        "country",
        "accounts"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE country = 'United States' AND accounts != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Provide a list of supplier names with their accounts and emails.",
      "fields": [
        "supplier_name",
        "accounts",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, accounts, email_id FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find suppliers with both accounts and payment terms specified.",
      "fields": [
        "supplier_name",
        "accounts",
        "payment_terms"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE accounts != '' AND payment_terms != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers whose accounts section includes more than one record.",
      "fields": [
        "supplier_name",
        "accounts"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE accounts != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Can I get supplier groups with their accounts info?",
      "fields": [
        "supplier_group",
        "accounts"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_group, accounts FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers allow creating purchase invoices without a purchase order?",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE allow_purchase_invoice_creation_without_purchase_order = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers who require a purchase order for creating invoices.",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE allow_purchase_invoice_creation_without_purchase_order = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get the setting status for creating invoices without purchase orders for each supplier.",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, allow_purchase_invoice_creation_without_purchase_order FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show me suppliers from India who allow invoices without POs.",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_order",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE country = 'India' AND allow_purchase_invoice_creation_without_purchase_order = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are there internal suppliers who allow bypassing purchase orders?",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "allow_purchase_invoice_creation_without_purchase_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1 AND allow_purchase_invoice_creation_without_purchase_order = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers with email addresses allow skipping POs for invoices?",
      "fields": [
        "supplier_name",
        "email_id",
        "allow_purchase_invoice_creation_without_purchase_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, email_id FROM [BT]tabSupplier[BT] WHERE allow_purchase_invoice_creation_without_purchase_order = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Fetch supplier names and invoice policy flags regarding POs.",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, allow_purchase_invoice_creation_without_purchase_order FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find suppliers grouped by supplier type who allow invoice creation without POs.",
      "fields": [
        "supplier_name",
        "supplier_type",
        "allow_purchase_invoice_creation_without_purchase_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_type FROM [BT]tabSupplier[BT] WHERE allow_purchase_invoice_creation_without_purchase_order = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers do not allow creating invoices before purchase orders?",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE allow_purchase_invoice_creation_without_purchase_order = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Can you show suppliers and their PO invoice policy side by side?",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, allow_purchase_invoice_creation_without_purchase_order FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers allow creating invoices without a purchase receipt?",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE allow_purchase_invoice_creation_without_purchase_receipt = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers who require a receipt before invoicing.",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE allow_purchase_invoice_creation_without_purchase_receipt = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get supplier names and their invoice creation policy with respect to receipts.",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, allow_purchase_invoice_creation_without_purchase_receipt FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show internal suppliers who can skip purchase receipts while invoicing.",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1 AND allow_purchase_invoice_creation_without_purchase_receipt = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which Indian suppliers allow invoice creation without purchase receipts?",
      "fields": [
        "supplier_name",
        "country",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE country = 'India' AND allow_purchase_invoice_creation_without_purchase_receipt = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find suppliers and whether they allow skipping receipts for invoices.",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, allow_purchase_invoice_creation_without_purchase_receipt FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Can you show suppliers with their country and invoice receipt policy?",
      "fields": [
        "supplier_name",
        "country",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, country, allow_purchase_invoice_creation_without_purchase_receipt FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Suppliers who don’t allow invoices without receipts?",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE allow_purchase_invoice_creation_without_purchase_receipt = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers and their invoice policy on receipts?",
      "fields": [
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, allow_purchase_invoice_creation_without_purchase_receipt FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers with their invoice without receipt setting and emails.",
      "fields": [
        "supplier_name",
        "email_id",
        "allow_purchase_invoice_creation_without_purchase_receipt"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, email_id, allow_purchase_invoice_creation_without_purchase_receipt FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers are currently frozen and inactive?",
      "fields": [
        "supplier_name",
        "is_frozen"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, is_frozen FROM [BT]tabSupplier[BT] WHERE is_frozen = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List frozen suppliers along with their email and group.",
      "fields": [
        "supplier_name",
        "is_frozen",
        "email_id",
        "supplier_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, email_id, supplier_group, is_frozen FROM [BT]tabSupplier[BT] WHERE is_frozen = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show suppliers that are not frozen.",
      "fields": [
        "supplier_name",
        "is_frozen"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, is_frozen FROM [BT]tabSupplier[BT] WHERE is_frozen = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get a list of suppliers and whether they are frozen or not.",
      "fields": [
        "supplier_name",
        "is_frozen"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, is_frozen FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which internal suppliers are marked as frozen?",
      "fields": [
        "supplier_name",
        "is_frozen",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, is_frozen, is_internal_supplier FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1 AND is_frozen = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Suppliers from India who are frozen?",
      "fields": [
        "supplier_name",
        "is_frozen",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, country, is_frozen FROM [BT]tabSupplier[BT] WHERE country = 'India' AND is_frozen = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers and their frozen status along with email ID.",
      "fields": [
        "supplier_name",
        "is_frozen",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, is_frozen, email_id FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Who are the frozen suppliers that also have pending RFQs?",
      "fields": [
        "supplier_name",
        "is_frozen",
        "warn_rfqs"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, is_frozen, warn_rfqs FROM [BT]tabSupplier[BT] WHERE is_frozen = 1 AND warn_rfqs = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get frozen suppliers and check their payment terms.",
      "fields": [
        "supplier_name",
        "is_frozen",
        "payment_terms"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, payment_terms, is_frozen FROM [BT]tabSupplier[BT] WHERE is_frozen = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Provide a list of all suppliers with frozen status and country.",
      "fields": [
        "supplier_name",
        "is_frozen",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, is_frozen, country FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers have been disabled in the system?",
      "fields": [
        "supplier_name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, disabled FROM [BT]tabSupplier[BT] WHERE disabled = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all disabled suppliers along with their emails.",
      "fields": [
        "supplier_name",
        "disabled",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, email_id FROM [BT]tabSupplier[BT] WHERE disabled = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get supplier names and whether they are disabled or active.",
      "fields": [
        "supplier_name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, disabled FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which Indian suppliers have been disabled?",
      "fields": [
        "supplier_name",
        "disabled",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE country = 'India' AND disabled = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find disabled suppliers and their group classification.",
      "fields": [
        "supplier_name",
        "disabled",
        "supplier_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_group FROM [BT]tabSupplier[BT] WHERE disabled = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show all suppliers that are not disabled.",
      "fields": [
        "supplier_name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE disabled = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List names and disabled status of suppliers from USA.",
      "fields": [
        "supplier_name",
        "disabled",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, disabled FROM [BT]tabSupplier[BT] WHERE country = 'USA' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which disabled suppliers are also frozen?",
      "fields": [
        "supplier_name",
        "disabled",
        "is_frozen"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE disabled = 1 AND is_frozen = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Give the names, emails, and disabled status of suppliers.",
      "fields": [
        "supplier_name",
        "email_id",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, email_id, disabled FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Retrieve all suppliers with their disabled status and tax ID.",
      "fields": [
        "supplier_name",
        "disabled",
        "tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, disabled, tax_id FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers are marked with a warning for RFQs?",
      "fields": [
        "supplier_name",
        "warn_rfqs"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE warn_rfqs = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get the list of suppliers and whether they trigger RFQ warnings.",
      "fields": [
        "supplier_name",
        "warn_rfqs"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, warn_rfqs FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List Indian suppliers with RFQ warnings enabled.",
      "fields": [
        "supplier_name",
        "warn_rfqs",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE country = 'India' AND warn_rfqs = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Who are the suppliers that are not flagged for RFQs?",
      "fields": [
        "supplier_name",
        "warn_rfqs"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE warn_rfqs = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which disabled suppliers also have RFQ warnings turned on?",
      "fields": [
        "supplier_name",
        "warn_rfqs",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE disabled = 1 AND warn_rfqs = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show suppliers with RFQ warning flags and their emails.",
      "fields": [
        "supplier_name",
        "warn_rfqs",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, email_id FROM [BT]tabSupplier[BT] WHERE warn_rfqs = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find the supplier group of all those with RFQ warnings active.",
      "fields": [
        "supplier_name",
        "warn_rfqs",
        "supplier_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_group FROM [BT]tabSupplier[BT] WHERE warn_rfqs = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are there suppliers flagged for RFQs but not frozen?",
      "fields": [
        "supplier_name",
        "warn_rfqs",
        "is_frozen"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE warn_rfqs = 1 AND is_frozen = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Retrieve suppliers with RFQ warnings and their primary contacts.",
      "fields": [
        "supplier_name",
        "warn_rfqs",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, supplier_primary_contact FROM [BT]tabSupplier[BT] WHERE warn_rfqs = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers from Qatar who are warned for RFQs.",
      "fields": [
        "supplier_name",
        "warn_rfqs",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE country = 'Qatar' AND warn_rfqs = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers are blocked from receiving RFQs?",
      "fields": [
        "prevent_rfqs"
      ]
    },
    "output": "frappe.db.sql('''SELECT prevent_rfqs FROM [BT]tabSupplier[BT] WHERE prevent_rfqs = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List the suppliers with the RFQ restriction enabled.",
      "fields": [
        "prevent_rfqs"
      ]
    },
    "output": "frappe.db.sql('''SELECT prevent_rfqs FROM [BT]tabSupplier[BT] WHERE prevent_rfqs = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are there any Indian suppliers who are prevented from receiving RFQs?",
      "fields": [
        "prevent_rfqs",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT prevent_rfqs FROM [BT]tabSupplier[BT] WHERE country = 'India' AND prevent_rfqs = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers are eligible to receive RFQs?",
      "fields": [
        "prevent_rfqs",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE prevent_rfqs = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get all suppliers that are not blocked from RFQs and are active.",
      "fields": [
        "prevent_rfqs",
        "disabled",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE prevent_rfqs = 0 AND disabled = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers with RFQ restriction are also frozen?",
      "fields": [
        "prevent_rfqs",
        "is_frozen"
      ]
    },
    "output": "frappe.db.sql('''SELECT prevent_rfqs FROM [BT]tabSupplier[BT] WHERE prevent_rfqs = 1 AND is_frozen = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Retrieve suppliers with RFQ prevention and their email contacts.",
      "fields": [
        "prevent_rfqs",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT prevent_rfqs, email_id FROM [BT]tabSupplier[BT] WHERE prevent_rfqs = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers marked to prevent RFQs, along with their types.",
      "fields": [
        "prevent_rfqs",
        "supplier_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT prevent_rfqs, supplier_type FROM [BT]tabSupplier[BT] WHERE prevent_rfqs = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Who are the internal suppliers blocked from RFQs?",
      "fields": [
        "prevent_rfqs",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT prevent_rfqs FROM [BT]tabSupplier[BT] WHERE prevent_rfqs = 1 AND is_internal_supplier = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show suppliers restricted from RFQs with their status and country.",
      "fields": [
        "prevent_rfqs",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT prevent_rfqs, country FROM [BT]tabSupplier[BT] WHERE prevent_rfqs = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers are blocked from making POS transactions?",
      "fields": [
        "supplier_name",
        "prevent_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, prevent_pos FROM [BT]tabSupplier[BT] WHERE prevent_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show me the list of suppliers who have POS restrictions.",
      "fields": [
        "supplier_name",
        "prevent_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, prevent_pos FROM [BT]tabSupplier[BT] WHERE prevent_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are any internal suppliers blocked from POS operations?",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "prevent_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, is_internal_supplier, prevent_pos FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1 AND prevent_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers from India who are prevented from POS transactions.",
      "fields": [
        "supplier_name",
        "country",
        "prevent_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, country, prevent_pos FROM [BT]tabSupplier[BT] WHERE country = 'India' AND prevent_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers are allowed to use POS features?",
      "fields": [
        "supplier_name",
        "prevent_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, prevent_pos FROM [BT]tabSupplier[BT] WHERE prevent_pos = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get the supplier names and their POS restriction status.",
      "fields": [
        "supplier_name",
        "prevent_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, prevent_pos FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Can you show suppliers with both RFQ and POS restrictions?",
      "fields": [
        "supplier_name",
        "prevent_pos",
        "prevent_rfqs"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, prevent_pos, prevent_rfqs FROM [BT]tabSupplier[BT] WHERE prevent_pos = 1 AND prevent_rfqs = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers that are disabled and cannot access POS.",
      "fields": [
        "supplier_name",
        "prevent_pos",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, prevent_pos, disabled FROM [BT]tabSupplier[BT] WHERE prevent_pos = 1 AND disabled = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Who among the transporters are barred from POS usage?",
      "fields": [
        "supplier_name",
        "is_transporter",
        "prevent_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, is_transporter, prevent_pos FROM [BT]tabSupplier[BT] WHERE is_transporter = 1 AND prevent_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find suppliers with POS restrictions and alert flags.",
      "fields": [
        "supplier_name",
        "prevent_pos",
        "warn_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, prevent_pos, warn_pos FROM [BT]tabSupplier[BT] WHERE prevent_pos = 1 AND warn_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers are currently on hold?",
      "fields": [
        "supplier_name",
        "on_hold"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, on_hold FROM [BT]tabSupplier[BT] WHERE on_hold = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show suppliers that are not on hold.",
      "fields": [
        "supplier_name",
        "on_hold"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, on_hold FROM [BT]tabSupplier[BT] WHERE on_hold = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers with a hold status flag.",
      "fields": [
        "supplier_name",
        "on_hold"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, on_hold FROM [BT]tabSupplier[BT] WHERE on_hold = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get names of internal suppliers that are on hold.",
      "fields": [
        "supplier_name",
        "on_hold",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, on_hold, is_internal_supplier FROM [BT]tabSupplier[BT] WHERE on_hold = 1 AND is_internal_supplier = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are any Indian suppliers on hold?",
      "fields": [
        "supplier_name",
        "on_hold",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, on_hold, country FROM [BT]tabSupplier[BT] WHERE on_hold = 1 AND country = 'India' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers are on hold and also disabled?",
      "fields": [
        "supplier_name",
        "on_hold",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, on_hold, disabled FROM [BT]tabSupplier[BT] WHERE on_hold = 1 AND disabled = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find suppliers who are both transporters and are on hold.",
      "fields": [
        "supplier_name",
        "on_hold",
        "is_transporter"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, on_hold, is_transporter FROM [BT]tabSupplier[BT] WHERE on_hold = 1 AND is_transporter = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Give me the list of suppliers on hold and also warned for RFQs.",
      "fields": [
        "supplier_name",
        "on_hold",
        "warn_rfqs"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, on_hold, warn_rfqs FROM [BT]tabSupplier[BT] WHERE on_hold = 1 AND warn_rfqs = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show suppliers with hold flag and a release date set.",
      "fields": [
        "supplier_name",
        "on_hold",
        "release_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, on_hold, release_date FROM [BT]tabSupplier[BT] WHERE on_hold = 1 AND release_date != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Retrieve all supplier names and their on-hold status.",
      "fields": [
        "supplier_name",
        "on_hold"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, on_hold FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers are marked with a warning for POS?",
      "fields": [
        "warn_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT warn_pos FROM [BT]tabSupplier[BT] WHERE warn_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get the list of suppliers and whether they trigger POS warnings.",
      "fields": [
        "warn_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT warn_pos FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List Indian suppliers with POS warnings enabled.",
      "fields": [
        "warn_pos",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT warn_pos FROM [BT]tabSupplier[BT] WHERE country = 'India' AND warn_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Who are the suppliers that are not flagged for POS?",
      "fields": [
        "warn_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT warn_pos FROM [BT]tabSupplier[BT] WHERE warn_pos = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which disabled suppliers also have POS warnings turned on?",
      "fields": [
        "warn_pos",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT warn_pos FROM [BT]tabSupplier[BT] WHERE disabled = 1 AND warn_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show suppliers with POS warning flags and their emails.",
      "fields": [
        "warn_pos",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT warn_pos, email_id FROM [BT]tabSupplier[BT] WHERE warn_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find the supplier group of all those with POS warnings active.",
      "fields": [
        "warn_pos",
        "supplier_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT warn_pos, supplier_group FROM [BT]tabSupplier[BT] WHERE warn_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Are there suppliers flagged for POS but not frozen?",
      "fields": [
        "warn_pos",
        "is_frozen"
      ]
    },
    "output": "frappe.db.sql('''SELECT warn_pos FROM [BT]tabSupplier[BT] WHERE warn_pos = 1 AND is_frozen = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Retrieve suppliers with POS warnings and their primary contacts.",
      "fields": [
        "warn_pos",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT warn_pos, supplier_primary_contact FROM [BT]tabSupplier[BT] WHERE warn_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers from Qatar who are warned for POS.",
      "fields": [
        "warn_pos",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT warn_pos FROM [BT]tabSupplier[BT] WHERE country = 'Qatar' AND warn_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers have a release date assigned?",
      "fields": [
        "supplier_name",
        "release_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, release_date FROM [BT]tabSupplier[BT] WHERE release_date != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers with release dates after January 1st, 2025.",
      "fields": [
        "supplier_name",
        "release_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, release_date FROM [BT]tabSupplier[BT] WHERE release_date > '2025-01-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Find suppliers who are on hold and have a scheduled release date.",
      "fields": [
        "supplier_name",
        "on_hold",
        "release_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, release_date FROM [BT]tabSupplier[BT] WHERE on_hold = 1 AND release_date != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show suppliers whose release date is in March 2025.",
      "fields": [
        "supplier_name",
        "release_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, release_date FROM [BT]tabSupplier[BT] WHERE release_date LIKE '2025-03-%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which internal suppliers have a release date defined?",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "release_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, release_date FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1 AND release_date != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get the supplier names and their release dates.",
      "fields": [
        "supplier_name",
        "release_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, release_date FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Who are the disabled suppliers with a release date scheduled?",
      "fields": [
        "supplier_name",
        "disabled",
        "release_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, release_date FROM [BT]tabSupplier[BT] WHERE disabled = 1 AND release_date != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Can you list suppliers that are blocked from POS but have a release date?",
      "fields": [
        "supplier_name",
        "prevent_pos",
        "release_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, release_date FROM [BT]tabSupplier[BT] WHERE prevent_pos = 1 AND release_date != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers have no release date set?",
      "fields": [
        "supplier_name",
        "release_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE release_date = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers with release dates and hold types together.",
      "fields": [
        "supplier_name",
        "release_date",
        "hold_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, release_date, hold_type FROM [BT]tabSupplier[BT] WHERE release_date != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers have associated portal users?",
      "fields": [
        "supplier_name",
        "portal_users"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, portal_users FROM [BT]tabSupplier[BT] WHERE portal_users != '[]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers that don't have any portal users assigned.",
      "fields": [
        "supplier_name",
        "portal_users"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get names and portal user details for each supplier.",
      "fields": [
        "supplier_name",
        "portal_users"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, portal_users FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show suppliers with more than one portal user configured.",
      "fields": [
        "supplier_name",
        "portal_users"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, portal_users FROM [BT]tabSupplier[BT] WHERE portal_users != '[]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which internal suppliers have portal users added?",
      "fields": [
        "supplier_name",
        "is_internal_supplier",
        "portal_users"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, portal_users FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1 AND portal_users != '[]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Get the list of all suppliers who are not disabled and have portal users.",
      "fields": [
        "supplier_name",
        "disabled",
        "portal_users"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, portal_users FROM [BT]tabSupplier[BT] WHERE disabled = 0 AND portal_users != '[]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show portal users for Indian suppliers.",
      "fields": [
        "supplier_name",
        "country",
        "portal_users"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, portal_users FROM [BT]tabSupplier[BT] WHERE country = 'India' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Do any suppliers from the USA have portal users configured?",
      "fields": [
        "supplier_name",
        "country",
        "portal_users"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE country = 'USA' AND portal_users != '[]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers with warning flags have portal users?",
      "fields": [
        "supplier_name",
        "warn_pos",
        "portal_users"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM [BT]tabSupplier[BT] WHERE warn_pos = 1 AND portal_users != '[]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show the list of supplier portal users along with their names and emails.",
      "fields": [
        "supplier_name",
        "portal_users",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name, portal_users, email_id FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Can you show me the sales invoice for order SO-12345?",
      "fields": [
        "po_no",
        "customer",
        "items",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, items, grand_total FROM [BT]tabSales Invoice[BT] WHERE po_no = 'SO-12345' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the amount on the sales invoice SI-45678?",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT grand_total FROM [BT]tabSales Invoice[BT] WHERE name = 'SI-45678' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Has the customer paid for invoice SI-22334?",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE name = 'SI-22334' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How much is left to pay on sales invoice SI-33445?",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE name = 'SI-33445' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "When is the payment due for sales invoice SI-33456?",
      "fields": [
        "due_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT due_date FROM [BT]tabSales Invoice[BT] WHERE name = 'SI-33456' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Is sales invoice SI-44556 overdue?",
      "fields": [
        "due_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT due_date FROM [BT]tabSales Invoice[BT] WHERE name = 'SI-44556' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What products were billed on sales invoice SI-12312?",
      "fields": [
        "items"
      ]
    },
    "output": "frappe.db.sql('''SELECT items FROM [BT]tabSales Invoice[BT] WHERE name = 'SI-12312' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What discount was applied to sales invoice SI-33445?",
      "fields": [
        "discount_amount",
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.db.sql('''SELECT discount_amount, additional_discount_percentage FROM [BT]tabSales Invoice[BT] WHERE name = 'SI-33445' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Can you send me a copy of sales invoice SI-22334? (retrieval part only)",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE name = 'SI-22334' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "When was sales invoice SI-76565 created?",
      "fields": [
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT creation FROM [BT]tabSales Invoice[BT] WHERE name = 'SI-76565' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Has sales invoice SI-55667 been approved?",
      "fields": [
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT docstatus FROM [BT]tabSales Invoice[BT] WHERE name = 'SI-55667' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Who approved sales invoice SI-33445?",
      "fields": [
        "owner"
      ]
    },
    "output": "frappe.db.sql('''SELECT owner FROM [BT]tabSales Invoice[BT] WHERE name = 'SI-33445' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Can you show the sales invoice for customer John Doe?",
      "fields": [
        "name",
        "grand_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total, posting_date FROM [BT]tabSales Invoice[BT] WHERE customer = 'John Doe' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How much did we charge customer Crater & Clove Corp in their last invoice?",
      "fields": [
        "name",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total FROM [BT]tabSales Invoice[BT] WHERE customer = 'Crater & Clove Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Has sales invoice SI-55667 been refunded yet?",
      "fields": [
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return FROM [BT]tabSales Invoice[BT] WHERE name = 'SI-55667' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Was there a late fee added to sales invoice SI-33445?",
      "fields": [
        "other_charges_calculation"
      ]
    },
    "output": "frappe.db.sql('''SELECT other_charges_calculation FROM [BT]tabSales Invoice[BT] WHERE name = 'SI-33445' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How much was the late fee on sales invoice SI-55667?",
      "fields": [
        "other_charges_calculation"
      ]
    },
    "output": "frappe.db.sql('''SELECT other_charges_calculation FROM [BT]tabSales Invoice[BT] WHERE name = 'SI-55667' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the quantity of backordered items for customer 'Delta Electronics'?",
      "fields": [
        "customer",
        "item_name",
        "qty",
        "delivered_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_name, qty, delivered_qty FROM [BT]tabSales Invoice Item[BT] WHERE parenttype = 'Sales Invoice' AND customer = 'Delta Electronics' AND delivered_qty < 'qty' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What's the total value of pending orders?",
      "fields": [
        "status",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT grand_total FROM [BT]tabSales Invoice[BT] WHERE status = 'Unpaid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many items are currently backordered?",
      "fields": [
        "item_name",
        "delivered_qty",
        "qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_name FROM [BT]tabSales Invoice Item[BT] WHERE delivered_qty < 'qty' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Auto Repeat"
      ],
      "question": "Fetch all auto-repeat tasks ending this month.",
      "fields": [
        "end_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT end_date FROM [BT]tabAuto Repeat[BT] WHERE end_date BETWEEN DATE_FORMAT(CURDATE(), \"%Y-%m-01\") AND LAST_DAY(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "How many suppliers have been updated this month?",
      "fields": []
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSupplier[BT] WHERE MONTH(modified) = MONTH(CURDATE()) AND YEAR(modified) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What's the total value of sales orders generated this month?",
      "fields": [
        "posting_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(grand_total) as total_sales FROM [BT]tabSales Invoice[BT] WHERE MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the total value of sales orders placed by 'ByteWorks Ltd' this month?",
      "fields": [
        "customer",
        "posting_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(grand_total) as total_sales FROM [BT]tabSales Invoice[BT] WHERE customer = \"ByteWorks Ltd\" AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all the sales orders created this month for product 'Apple MacBook Pro'.",
      "fields": [
        "name",
        "items",
        "item_name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT si.name, sii.item_name, si.posting_date FROM [BT]tabSales Invoice Item[BT] sii INNER JOIN [BT]tabSales Invoice[BT] si ON si.name = sii.parent WHERE sii.item_name = \"Apple MacBook Pro\" AND MONTH(si.posting_date) = MONTH(CURDATE()) AND YEAR(si.posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many sales orders were generated in the last 7 days?",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE posting_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE()''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How much value in sales orders was processed by the 'Marketing Division' this quarter?",
      "fields": [
        "name",
        "department",
        "base_grand_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(base_grand_total) as total_sales FROM [BT]tabSales Invoice[BT] WHERE department = \"Marketing Division\" AND QUARTER(posting_date) = QUARTER(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What was the total sales order value for the second quarter?",
      "fields": [
        "name",
        "grand_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(grand_total) as total_sales FROM [BT]tabSales Invoice[BT] WHERE QUARTER(posting_date) = 2 AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Did we meet our sales targets for the previous quarter?",
      "fields": [
        "posting_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(grand_total) as total_sales FROM [BT]tabSales Invoice[BT] WHERE QUARTER(posting_date) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) AND YEAR(posting_date) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER))''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many sales orders were created during February?",
      "fields": [
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE MONTH(posting_date) = 2 AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many sales orders were placed with status 'Delivered' this quarter?",
      "fields": [
        "name",
        "status",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE status = \"Delivered\" AND QUARTER(posting_date) = QUARTER(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Please show all sales orders placed by customers from 'East Coast' this week.",
      "fields": [
        "name",
        "customer",
        "territory",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, territory, posting_date FROM [BT]tabSales Invoice[BT] WHERE territory = \"East Coast\" AND YEARWEEK(posting_date, 1) = YEARWEEK(CURDATE(), 1)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the status of the sales orders placed by top-tier customer 'TechGlobal Inc' this week?",
      "fields": [
        "name",
        "customer",
        "status",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, posting_date FROM [BT]tabSales Invoice[BT] WHERE customer = \"TechGlobal Inc\" AND YEARWEEK(posting_date, 1) = YEARWEEK(CURDATE(), 1)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Can you display the sales orders created by customers from Chicago this week?",
      "fields": [
        "name",
        "customer",
        "customer_address",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, customer_address, posting_date FROM [BT]tabSales Invoice[BT] WHERE customer_address LIKE \"%Chicago%\" AND YEARWEEK(posting_date, 1) = YEARWEEK(CURDATE(), 1)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the total value of open sales orders worth over $20,000?",
      "fields": [
        "name",
        "grand_total",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT sum(grand_total) FROM [BT]tabSales Invoice[BT] WHERE status = 'Unpaid' AND grand_total > 20000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all sales orders created with a  value greater than $15,000 for 'Fusion Enterprises'.",
      "fields": [
        "name",
        "grand_total",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total, customer FROM [BT]tabSales Invoice[BT] WHERE customer = 'Fusion Enterprises' AND grand_total > 15000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many sales orders were made for the 'MountainPeak Development' project?",
      "fields": [
        "name",
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE project = 'MountainPeak Development' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What's the total value of sales orders with a payment status 'Pending' for 'BrightTech Innovations'?",
      "fields": [
        "customer",
        "status",
        "outstanding_amount",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total, outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE customer = 'BrightTech Innovations' AND status = 'Unpaid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Please list all the sales orders that were created last week for product 'Ultra Wireless Router'.",
      "fields": [
        "posting_date",
        "items",
        "item_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, items FROM [BT]tabSales Invoice[BT] WHERE posting_date between '['last_week_start', 'last_week_end']' AND items.item_name = 'Ultra Wireless Router' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many sales orders were confirmed in the past 30 days for 'SmartTech Enterprises'?",
      "fields": [
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE customer = 'SmartTech Enterprises' AND posting_date > '30_days_ago' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What’s the total sales order value for 'iPhone 14' in the past quarter?",
      "fields": [
        "items",
        "item_name",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total FROM [BT]tabSales Invoice[BT] WHERE posting_date between '['last_quarter_start', 'last_quarter_end']' AND items.item_name = 'iPhone 14' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any Sales Invoices linked to the 'Crescent Towers' project?",
      "fields": [
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, project FROM [BT]tabSales Invoice[BT] WHERE project = 'Crescent Towers' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there any sales invoices linked to 'Oceanic Ventures'?",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer FROM [BT]tabSales Invoice[BT] WHERE customer = 'Oceanic Ventures' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What’s the total sales value of invoices that are still unpaid for customer 'Global Enterprises'?",
      "fields": [
        "customer",
        "outstanding_amount",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT grand_total FROM [BT]tabSales Invoice[BT] WHERE customer = 'Global Enterprises' AND outstanding_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List the exchange gain/loss values for all advance payments this month.",
      "fields": [
        "name",
        "posting_date",
        "exchange_gain_loss_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, posting_date, exchange_gain_loss_amount FROM [BT]tabPurchase Invoice[BT] WHERE MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the highest advance amount recorded this year?",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('SELECT MAX(grand_total) AS highest_advance FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all remarks added to advances posted this week.",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.sql('SELECT remarks FROM [BT]tabSales Invoice[BT] WHERE WEEK(posting_date, 1) = WEEK(CURDATE(), 1) AND YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which documents have been referenced in customer advances this week?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM [BT]tabSales Invoice[BT] WHERE WEEK(posting_date, 1) = WEEK(CURDATE(), 1) AND YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which referenced documents were linked to advance payments created this year?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List exchange gain/loss amounts for all advance entries posted this year.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM [BT]tabPurchase Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all sales invoices with outstanding amount greater than 1000.",
      "fields": [
        "name",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT name, outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE outstanding_amount > 1000', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Total amount of all paid invoices for the last month.",
      "fields": [
        "total_amount",
        "status",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT SUM(total_amount) AS total_paid FROM [BT]tabSales Invoice[BT] WHERE status = \"Paid\" AND MONTH(posting_date) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Revenue from 'Product Y' sold to 'Customer Z' last week.",
      "fields": [
        "total_amount",
        "item_code",
        "customer"
      ]
    },
    "output": "frappe.db.sql('SELECT SUM(total_amount) AS revenue FROM [BT]tabSales Invoice[BT] WHERE item_code = \"Product Y\" AND customer = \"Customer Z\" AND WEEK(posting_date, 1) = WEEK(CURDATE() - INTERVAL 1 WEEK, 1) AND YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Total amount generated from all paid invoices of 'Customer X' this year.",
      "fields": [
        "total_amount",
        "customer",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT SUM(total_amount) AS total_paid FROM [BT]tabSales Invoice[BT] WHERE customer = \"Customer X\" AND status = \"Paid\" AND YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Units of 'Product X' sold in the last 6 months.",
      "fields": [
        "item_code",
        "quantity_sold"
      ]
    },
    "output": "frappe.db.sql('SELECT SUM(quantity_sold) AS total_sold FROM [BT]tabSales Invoice[BT] WHERE item_code = \"Product X\" AND posting_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Total amount of all paid invoices issued last month.",
      "fields": [
        "total_amount",
        "status",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT SUM(total_amount) AS total_paid FROM [BT]tabSales Invoice[BT] WHERE status = \"Paid\" AND MONTH(posting_date) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Total amount generated from all invoices in the last quarter.",
      "fields": [
        "total_amount",
        "status",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT SUM(total_amount) AS total_amount FROM [BT]tabSales Invoice[BT] WHERE QUARTER(posting_date) = QUARTER(CURDATE() - INTERVAL 1 QUARTER) AND YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all sales invoices with a title assigned.",
      "fields": [
        "name",
        "title"
      ]
    },
    "output": "frappe.db.sql('SELECT name, title FROM [BT]tabSales Invoice[BT] WHERE title IS NOT NULL AND title != \"\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoice numbers and their titles.",
      "fields": [
        "name",
        "title"
      ]
    },
    "output": "frappe.db.sql('SELECT name, title FROM [BT]tabSales Invoice[BT]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which sales invoices are missing the title?",
      "fields": [
        "title",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE title = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find all invoices for the customer John Enterprises along with their titles.",
      "fields": [
        "name",
        "customer",
        "title"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, title FROM [BT]tabSales Invoice[BT] WHERE customer = 'John Enterprises' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices titled 'March Sales' were posted after March 1st, 2025?",
      "fields": [
        "name",
        "title",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, title, posting_date FROM [BT]tabSales Invoice[BT] WHERE title = 'March Sales' AND posting_date > '2025-03-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Do we have any consolidated sales invoices with a title?",
      "fields": [
        "name",
        "title",
        "is_consolidated"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, title, is_consolidated FROM [BT]tabSales Invoice[BT] WHERE is_consolidated = 1 AND title != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List the titles of all POS sales invoices.",
      "fields": [
        "name",
        "title",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, title FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give me sales invoice titles, customer names, and their posting dates.",
      "fields": [
        "name",
        "title",
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, title, customer, posting_date FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have the same value in both title and customer_name fields?",
      "fields": [
        "name",
        "title",
        "customer_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, title, customer_name FROM [BT]tabSales Invoice[BT] WHERE title = 'customer_name' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get titles of sales invoices created for customers in Qatar.",
      "fields": [
        "name",
        "title",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, title, customer FROM [BT]tabSales Invoice[BT] WHERE customer LIKE '%Qatar%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which sales invoices use a naming series starting with INV-?",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabSales Invoice[BT] WHERE naming_series LIKE 'INV-%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoice numbers and their naming series values.",
      "fields": [
        "name",
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, naming_series FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices that don't have any naming series set.",
      "fields": [
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series FROM [BT]tabSales Invoice[BT] WHERE naming_series = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which sales invoices from March 2025 used the naming series INV-2025?",
      "fields": [
        "naming_series",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series, posting_date FROM [BT]tabSales Invoice[BT] WHERE posting_date LIKE '2025-03-%' AND naming_series = 'INV-2025' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find POS invoices with a naming series that starts with POS-2025.",
      "fields": [
        "naming_series",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series, is_pos FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND naming_series LIKE 'POS-2025%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give invoice titles, customers, and their naming series.",
      "fields": [
        "title",
        "customer",
        "naming_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT title, customer, naming_series FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with naming series 'INV-2024' for the company Alpha Corp.",
      "fields": [
        "naming_series",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series, company FROM [BT]tabSales Invoice[BT] WHERE naming_series = 'INV-2024' AND company = 'Alpha Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the naming series of return invoices.",
      "fields": [
        "naming_series",
        "return_against",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series, return_against FROM [BT]tabSales Invoice[BT] WHERE is_return = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have the naming series same as their title?",
      "fields": [
        "naming_series",
        "title"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series, title FROM [BT]tabSales Invoice[BT] WHERE naming_series = 'title' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give me the naming series and customer names for invoices from India.",
      "fields": [
        "naming_series",
        "customer",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT naming_series, customer FROM [BT]tabSales Invoice[BT] WHERE territory = 'India' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all sales invoices along with their customer names.",
      "fields": [
        "name",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices are made for the customer Gulf Tech Solutions?",
      "fields": [
        "name",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer FROM [BT]tabSales Invoice[BT] WHERE customer = 'Gulf Tech Solutions' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find all invoices where the customer field is empty.",
      "fields": [
        "name",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE customer = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers have invoices with grand total above 10,000?",
      "fields": [
        "name",
        "customer",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, grand_total FROM [BT]tabSales Invoice[BT] WHERE grand_total > 10000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all POS invoices with customer details.",
      "fields": [
        "name",
        "customer",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List customers with invoices dated after April 1st, 2025.",
      "fields": [
        "name",
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, posting_date FROM [BT]tabSales Invoice[BT] WHERE posting_date > '2025-04-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the customer and company for each sales invoice.",
      "fields": [
        "name",
        "customer",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, company FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have customers from the Qatar region?",
      "fields": [
        "name",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer FROM [BT]tabSales Invoice[BT] WHERE customer LIKE '%Qatar%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where the customer and customer_name are different.",
      "fields": [
        "name",
        "customer",
        "customer_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, customer_name FROM [BT]tabSales Invoice[BT] WHERE customer != 'customer_name' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all sales invoices that have a tax ID assigned.",
      "fields": [
        "name",
        "tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_id FROM [BT]tabSales Invoice[BT] WHERE tax_id != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which sales invoices are missing a tax ID?",
      "fields": [
        "name",
        "tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE tax_id = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get tax IDs and customer names from all invoices.",
      "fields": [
        "tax_id",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT tax_id, customer FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices for Gulf Contracting that include a tax ID.",
      "fields": [
        "name",
        "tax_id",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_id, customer FROM [BT]tabSales Invoice[BT] WHERE customer = 'Gulf Contracting' AND tax_id != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices where the tax ID matches 'QA-4567'.",
      "fields": [
        "name",
        "tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_id FROM [BT]tabSales Invoice[BT] WHERE tax_id = 'QA-4567' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have the same value in both tax ID and company tax ID?",
      "fields": [
        "name",
        "tax_id",
        "company_tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_id, company_tax_id FROM [BT]tabSales Invoice[BT] WHERE tax_id = 'company_tax_id' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show tax IDs for invoices posted after May 1st, 2025.",
      "fields": [
        "name",
        "tax_id",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_id, posting_date FROM [BT]tabSales Invoice[BT] WHERE posting_date > '2025-05-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List tax IDs for all POS sales invoices.",
      "fields": [
        "name",
        "tax_id",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_id FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get tax ID and tax category for all sales invoices.",
      "fields": [
        "name",
        "tax_id",
        "tax_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_id, tax_category FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with tax ID starting with 'QA' and issued by 'Qatar Trading Co'.",
      "fields": [
        "name",
        "tax_id",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_id, company FROM [BT]tabSales Invoice[BT] WHERE tax_id LIKE 'QA%' AND company = 'Qatar Trading Co' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all sales invoices created by Gulf Engineering Company.",
      "fields": [
        "name",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company FROM [BT]tabSales Invoice[BT] WHERE company = 'Gulf Engineering Company' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which companies issued sales invoices in 2025?",
      "fields": [
        "name",
        "company",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company, posting_date FROM [BT]tabSales Invoice[BT] WHERE posting_date LIKE '2025%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all invoices where the company is not 'Violet Spanner Corporation'.",
      "fields": [
        "name",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company FROM [BT]tabSales Invoice[BT] WHERE company != 'Violet Spanner Corporation' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices for the company 'Global Tech' with status 'Unpaid'.",
      "fields": [
        "name",
        "company",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company, status FROM [BT]tabSales Invoice[BT] WHERE company = 'Global Tech' AND status = 'Unpaid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find all invoices from companies whose name contains 'Qatar'.",
      "fields": [
        "name",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company FROM [BT]tabSales Invoice[BT] WHERE company LIKE '%Qatar%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which companies issued invoices to customer 'Universal Steel'?",
      "fields": [
        "name",
        "company",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company, customer FROM [BT]tabSales Invoice[BT] WHERE customer = 'Universal Steel' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give the posting dates and companies for all sales invoices.",
      "fields": [
        "name",
        "company",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company, posting_date FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices where the company tax ID matches the company name.",
      "fields": [
        "name",
        "company",
        "company_tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company, company_tax_id FROM [BT]tabSales Invoice[BT] WHERE company_tax_id = 'company' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which internal customers were invoiced by Gulf Enterprises?",
      "fields": [
        "name",
        "company",
        "is_internal_customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company, is_internal_customer FROM [BT]tabSales Invoice[BT] WHERE company = 'Gulf Enterprises' AND is_internal_customer = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices posted by each company along with the currency used.",
      "fields": [
        "name",
        "company",
        "currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company, currency FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all sales invoices where the company's tax ID is filled.",
      "fields": [
        "name",
        "company_tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_tax_id FROM [BT]tabSales Invoice[BT] WHERE company_tax_id != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoice numbers and company tax IDs.",
      "fields": [
        "name",
        "company_tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_tax_id FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices are missing the company tax ID?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE company_tax_id = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices for company 'SmartTech Ltd' that have a tax ID on record.",
      "fields": [
        "name",
        "company",
        "company_tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company, company_tax_id FROM [BT]tabSales Invoice[BT] WHERE company = 'SmartTech Ltd' AND company_tax_id != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show company tax ID details for invoices posted after Jan 1, 2025.",
      "fields": [
        "name",
        "company_tax_id",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_tax_id, posting_date FROM [BT]tabSales Invoice[BT] WHERE posting_date > '2025-01-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find sales invoices where company and tax ID are both defined.",
      "fields": [
        "name",
        "company",
        "company_tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company, company_tax_id FROM [BT]tabSales Invoice[BT] WHERE company != '' AND company_tax_id != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which internal customer invoices also have company tax IDs?",
      "fields": [
        "name",
        "company_tax_id",
        "is_internal_customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_tax_id, is_internal_customer FROM [BT]tabSales Invoice[BT] WHERE is_internal_customer = 1 AND company_tax_id != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get company tax IDs for invoices with grand total over 10,000.",
      "fields": [
        "name",
        "company_tax_id",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_tax_id, grand_total FROM [BT]tabSales Invoice[BT] WHERE grand_total > 10000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where company tax ID matches the customer’s tax ID.",
      "fields": [
        "name",
        "company_tax_id",
        "tax_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_tax_id, tax_id FROM [BT]tabSales Invoice[BT] WHERE company_tax_id = 'tax_id' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show me company tax ID and status for each invoice created this year.",
      "fields": [
        "name",
        "company_tax_id",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, company_tax_id, status FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all sales invoices created after January 1, 2025.",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date FROM [BT]tabSales Invoice[BT] WHERE posting_date > '2025-01-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List sales invoices with their posting dates.",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices posted before December 2024.",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date FROM [BT]tabSales Invoice[BT] WHERE posting_date < '2024-12-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices were posted on March 15, 2025?",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date FROM [BT]tabSales Invoice[BT] WHERE posting_date = '2025-03-15' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all invoices with posting date in April 2025.",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date FROM [BT]tabSales Invoice[BT] WHERE posting_date LIKE '2025-04-%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all POS invoices posted this year.",
      "fields": [
        "name",
        "posting_date",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, is_pos FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND posting_date LIKE '2025%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which sales invoices for Smart Electronics were posted in Q1 of 2025?",
      "fields": [
        "name",
        "posting_date",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, posting_date FROM [BT]tabSales Invoice[BT] WHERE customer = 'Smart Electronics' AND posting_date between '['2025-01-01', '2025-03-31']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the posting date and status of invoices posted after June 1st, 2025.",
      "fields": [
        "name",
        "posting_date",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, status FROM [BT]tabSales Invoice[BT] WHERE posting_date > '2025-06-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which internal customer invoices were posted in February 2025?",
      "fields": [
        "name",
        "posting_date",
        "is_internal_customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, is_internal_customer FROM [BT]tabSales Invoice[BT] WHERE is_internal_customer = 1 AND posting_date LIKE '2025-02-%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices had manually set posting times?",
      "fields": [
        "name",
        "set_posting_time"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, set_posting_time FROM [BT]tabSales Invoice[BT] WHERE set_posting_time = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where the posting time was not manually set.",
      "fields": [
        "name",
        "set_posting_time"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, set_posting_time FROM [BT]tabSales Invoice[BT] WHERE set_posting_time = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoice numbers and whether their posting time was manually configured.",
      "fields": [
        "name",
        "set_posting_time"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, set_posting_time FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show me manually set posting times for invoices from Qatar Industries.",
      "fields": [
        "name",
        "customer",
        "set_posting_time"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, set_posting_time FROM [BT]tabSales Invoice[BT] WHERE customer = 'Qatar Industries' AND set_posting_time = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which POS invoices had custom posting times?",
      "fields": [
        "name",
        "is_pos",
        "set_posting_time"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, set_posting_time FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND set_posting_time = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find all consolidated invoices with a manually set posting time.",
      "fields": [
        "name",
        "is_consolidated",
        "set_posting_time"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_consolidated, set_posting_time FROM [BT]tabSales Invoice[BT] WHERE is_consolidated = 1 AND set_posting_time = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices created after April 1st have manual posting times?",
      "fields": [
        "name",
        "set_posting_time",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, set_posting_time, posting_date FROM [BT]tabSales Invoice[BT] WHERE posting_date > '2025-04-01' AND set_posting_time = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Do any invoices for internal customers have set posting times?",
      "fields": [
        "name",
        "is_internal_customer",
        "set_posting_time"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_internal_customer, set_posting_time FROM [BT]tabSales Invoice[BT] WHERE is_internal_customer = 1 AND set_posting_time = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with both custom posting time and debit note enabled.",
      "fields": [
        "name",
        "set_posting_time",
        "is_debit_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, set_posting_time, is_debit_note FROM [BT]tabSales Invoice[BT] WHERE set_posting_time = 1 AND is_debit_note = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the posting time setting and company for all unpaid invoices.",
      "fields": [
        "name",
        "set_posting_time",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, set_posting_time, company FROM [BT]tabSales Invoice[BT] WHERE status = 'Unpaid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show me all pending invoices due on 2025-06-30.",
      "fields": [
        "name",
        "due_date",
        "status",
        "posting_date",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, due_date, status, posting_date, customer FROM [BT]tabSales Invoice[BT] WHERE status = 'Unpaid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the list of invoices with due date in the past 7 days.",
      "fields": [
        "name",
        "due_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, due_date FROM [BT]tabSales Invoice[BT] WHERE due_date between '[start_date, end_date]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Partner"
      ],
      "question": "Which partner has the highest sales target set for this year?",
      "fields": [
        "partner_name",
        "targets"
      ]
    },
    "output": "frappe.db.sql('SELECT partner_name, targets FROM [BT]tabSales Partner[BT] ORDER BY targets DESC LIMIT 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Do any customers have more than one invoice posted today?",
      "fields": [
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT customer, COUNT(name) AS invoice_count FROM [BT]tabSales Invoice[BT] WHERE posting_date = CURDATE() GROUP BY customer HAVING COUNT(name) > 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices posted today.",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, posting_date FROM [BT]tabSales Invoice[BT] WHERE posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices that are due tomorrow.",
      "fields": [
        "name",
        "due_date",
        "customer",
        "posting_date",
        "grand_total",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, due_date, customer, posting_date, grand_total, status FROM [BT]tabSales Invoice[BT] WHERE due_date = CURDATE() + INTERVAL 1 DAY', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Fetch invoices which have a due date set for this week.",
      "fields": [
        "name",
        "due_date",
        "customer",
        "company",
        "posting_date",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, due_date, customer, company, posting_date, status FROM [BT]tabSales Invoice[BT] WHERE YEARWEEK(due_date, 1) = YEARWEEK(CURDATE(), 1)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the due dates and companies for all invoices created today.",
      "fields": [
        "name",
        "due_date",
        "company",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, due_date, company, posting_date FROM [BT]tabSales Invoice[BT] WHERE posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices are due after June 15, 2025?",
      "fields": [
        "name",
        "due_date",
        "customer"
      ]
    },
    "output": "frappe.db.sql('SELECT name, due_date, customer FROM [BT]tabSales Invoice[BT] WHERE due_date > \"2025-06-15\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give me invoices from Niyon Corp that are due next month.",
      "fields": [
        "name",
        "due_date",
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, due_date, customer, posting_date FROM [BT]tabSales Invoice[BT] WHERE customer = \"Niyon Corp\" AND MONTH(due_date) = MONTH(CURDATE() + INTERVAL 1 MONTH) AND YEAR(due_date) = YEAR(CURDATE() + INTERVAL 1 MONTH)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find the invoices that were due yesterday but are still unpaid.",
      "fields": [
        "name",
        "due_date",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, due_date, status FROM [BT]tabSales Invoice[BT] WHERE due_date = CURDATE() - INTERVAL 1 DAY AND status = \"Unpaid\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show overdue invoices as of today.",
      "fields": [
        "name",
        "due_date",
        "status"
      ]
    },
    "output": "frappe.db.sql('SELECT name, due_date, status FROM [BT]tabSales Invoice[BT] WHERE due_date < CURDATE() AND status = \"Unpaid\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices are due after today and belong to Goochi Ltd?",
      "fields": [
        "name",
        "due_date",
        "customer"
      ]
    },
    "output": "frappe.db.sql('SELECT name, due_date, customer FROM [BT]tabSales Invoice[BT] WHERE customer = \"Goochi Ltd\" AND due_date > CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices were done through Point of Sale?",
      "fields": [
        "name",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices were made using POS?",
      "fields": [
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List POS invoices for the customer named 'Retail World'.",
      "fields": [
        "name",
        "customer",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, is_pos FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND customer = 'Retail World' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get non-POS invoices generated before today.",
      "fields": [
        "name",
        "posting_date",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('SELECT name, posting_date, is_pos FROM [BT]tabSales Invoice[BT] WHERE is_pos = 0 AND posting_date < CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find POS invoices created this week.",
      "fields": [
        "name",
        "posting_date",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('SELECT name, posting_date, is_pos FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND YEARWEEK(posting_date, 1) = YEARWEEK(CURDATE(), 1)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there any POS invoices created today?",
      "fields": [
        "is_pos",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Fetch the total number of invoices that are not POS-based.",
      "fields": [
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_pos = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which POS invoices are also returns?",
      "fields": [
        "name",
        "is_pos",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, is_return FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND is_return = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all invoices made via POS with totals above 3000.",
      "fields": [
        "name",
        "is_pos",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, grand_total FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND grand_total > 3000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give me a list of customers who have POS invoices.",
      "fields": [
        "customer",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices were created using the POS profile 'Counter A'?",
      "fields": [
        "pos_profile",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, pos_profile FROM [BT]tabSales Invoice[BT] WHERE pos_profile = 'Counter A' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all POS profiles used in today's invoices.",
      "fields": [
        "pos_profile",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT pos_profile FROM [BT]tabSales Invoice[BT] WHERE posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices were linked to the 'Main Hall POS' profile?",
      "fields": [
        "pos_profile"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE pos_profile = 'Main Hall POS' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices where POS profile was set but the invoice was not submitted.",
      "fields": [
        "pos_profile",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, pos_profile FROM [BT]tabSales Invoice[BT] WHERE pos_profile != '' AND docstatus = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS profile and grand total for all POS invoices above 5000.",
      "fields": [
        "pos_profile",
        "grand_total",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT pos_profile, grand_total FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND grand_total > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with missing POS profile but marked as POS transactions.",
      "fields": [
        "pos_profile",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos FROM [BT]tabSales Invoice[BT] WHERE pos_profile in '[None, '']' AND is_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers used the POS profile 'Retail POS' this week?",
      "fields": [
        "pos_profile",
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT customer FROM [BT]tabSales Invoice[BT] WHERE pos_profile = \"Retail POS\" AND WEEK(posting_date, 1) = WEEK(CURDATE(), 1) AND YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count the number of invoices without any POS profile assigned.",
      "fields": [
        "pos_profile"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE pos_profile in '[None, '']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get a list of invoices made using different POS profiles and their amounts.",
      "fields": [
        "pos_profile",
        "name",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, pos_profile, grand_total FROM [BT]tabSales Invoice[BT] WHERE pos_profile != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which POS profiles were used for return invoices?",
      "fields": [
        "pos_profile",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT pos_profile FROM [BT]tabSales Invoice[BT] WHERE is_return = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there any consolidated invoices?",
      "fields": [
        "is_consolidated"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE is_consolidated = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices that were not consolidated.",
      "fields": [
        "name",
        "is_consolidated"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_consolidated FROM [BT]tabSales Invoice[BT] WHERE is_consolidated = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many consolidated invoices were issued this year?",
      "fields": [
        "is_consolidated",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_consolidated = 1 AND YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers received consolidated invoices last month?",
      "fields": [
        "customer",
        "is_consolidated",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE is_consolidated = 1 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show me consolidated invoices from Tech World Ltd.",
      "fields": [
        "customer",
        "is_consolidated",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, is_consolidated FROM [BT]tabSales Invoice[BT] WHERE customer = 'Tech World Ltd.' AND is_consolidated = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List consolidated invoices with grand total above 25,000.",
      "fields": [
        "is_consolidated",
        "grand_total",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total, is_consolidated FROM [BT]tabSales Invoice[BT] WHERE is_consolidated = 1 AND grand_total > 25000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which consolidated invoices are still unpaid?",
      "fields": [
        "is_consolidated",
        "status",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_consolidated, status FROM [BT]tabSales Invoice[BT] WHERE is_consolidated = 1 AND status = 'Unpaid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which consolidated invoices are marked as returns?",
      "fields": [
        "is_consolidated",
        "is_return",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_consolidated, is_return FROM [BT]tabSales Invoice[BT] WHERE is_consolidated = 1 AND is_return = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices are returns?",
      "fields": [
        "name",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return FROM [BT]tabSales Invoice[BT] WHERE is_return = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices were marked as returns?",
      "fields": [
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Fetch return invoices submitted by 'Ocean Traders'.",
      "fields": [
        "name",
        "is_return",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, is_return FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND customer = 'Ocean Traders' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the list of return invoices with a grand total above 5000.",
      "fields": [
        "name",
        "is_return",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total, is_return FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND grand_total > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many returns were created last month?",
      "fields": [
        "is_return",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all return invoices along with their return reference.",
      "fields": [
        "name",
        "is_return",
        "return_against"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, return_against FROM [BT]tabSales Invoice[BT] WHERE is_return = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Return invoices from 'Global Supplies' with outstanding amounts?",
      "fields": [
        "name",
        "customer",
        "is_return",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, outstanding_amount, is_return FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND customer = 'Global Supplies' AND outstanding_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List return invoices created after June 1, 2025.",
      "fields": [
        "name",
        "is_return",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, is_return FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND posting_date > 'datetime.date(2025, 6, 1)' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices that are returns and mention their original invoice reference.",
      "fields": [
        "name",
        "return_against"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, return_against FROM [BT]tabSales Invoice[BT] WHERE is_return = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which return invoice refers to INV-2025-0012?",
      "fields": [
        "name",
        "return_against"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, return_against FROM [BT]tabSales Invoice[BT] WHERE return_against = 'INV-2025-0012' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give all returns linked to any original invoice.",
      "fields": [
        "name",
        "return_against"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, return_against FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND return_against != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many return invoices are linked to original invoices?",
      "fields": [
        "return_against"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND return_against != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Fetch invoices that reference original invoice INV-3056 as returns.",
      "fields": [
        "name",
        "return_against"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, return_against, is_return FROM [BT]tabSales Invoice[BT] WHERE return_against = 'INV-3056' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show return invoices and the corresponding invoice they are linked to.",
      "fields": [
        "name",
        "return_against"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, return_against FROM [BT]tabSales Invoice[BT] WHERE is_return = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices linked to 'Retail Hub' with original invoice numbers.",
      "fields": [
        "name",
        "customer",
        "return_against"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, return_against, customer FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND customer = 'Retail Hub' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there any returns not linked to any invoice?",
      "fields": [
        "return_against"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND return_against = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the original invoice for return INV-2025-089?",
      "fields": [
        "return_against"
      ]
    },
    "output": "frappe.db.sql('''SELECT return_against FROM [BT]tabSales Invoice[BT] WHERE name = 'INV-2025-089' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all returns issued last month along with their original invoice references.",
      "fields": [
        "name",
        "posting_date",
        "return_against"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, return_against FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have the 'update outstanding for self' option enabled?",
      "fields": [
        "name",
        "update_outstanding_for_self"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_outstanding_for_self FROM [BT]tabSales Invoice[BT] WHERE update_outstanding_for_self = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices where the update outstanding flag is turned off.",
      "fields": [
        "update_outstanding_for_self"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE update_outstanding_for_self = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoice names with update outstanding set to true.",
      "fields": [
        "name",
        "update_outstanding_for_self"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_outstanding_for_self FROM [BT]tabSales Invoice[BT] WHERE update_outstanding_for_self = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices for 'Krypton LLC' that have update outstanding enabled.",
      "fields": [
        "name",
        "customer",
        "update_outstanding_for_self"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, update_outstanding_for_self FROM [BT]tabSales Invoice[BT] WHERE customer = 'Krypton LLC' AND update_outstanding_for_self = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there any invoices with update outstanding disabled created this month?",
      "fields": [
        "posting_date",
        "update_outstanding_for_self"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE update_outstanding_for_self = 0 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get recent POS invoices where update outstanding is active.",
      "fields": [
        "name",
        "is_pos",
        "update_outstanding_for_self"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, update_outstanding_for_self FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND update_outstanding_for_self = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which sales partner’s invoices have update outstanding for self set?",
      "fields": [
        "name",
        "sales_partner",
        "update_outstanding_for_self"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_partner, update_outstanding_for_self FROM [BT]tabSales Invoice[BT] WHERE update_outstanding_for_self = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with high grand total and update outstanding enabled.",
      "fields": [
        "name",
        "grand_total",
        "update_outstanding_for_self"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total, update_outstanding_for_self FROM [BT]tabSales Invoice[BT] WHERE grand_total > 5000 AND update_outstanding_for_self = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices where both update stock and update outstanding are enabled.",
      "fields": [
        "name",
        "update_stock",
        "update_outstanding_for_self"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_stock, update_outstanding_for_self FROM [BT]tabSales Invoice[BT] WHERE update_stock = 1 AND update_outstanding_for_self = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices in June 2025 had update outstanding for self turned on?",
      "fields": [
        "posting_date",
        "update_outstanding_for_self"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE update_outstanding_for_self = 1 AND posting_date between '[datetime.date(2025, 6, 1), datetime.date(2025, 6, 30)]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have updated the billed amount in the linked Sales Order?",
      "fields": [
        "name",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_billed_amount_in_sales_order FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_sales_order = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have not updated the billed amount in Sales Orders?",
      "fields": [
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_sales_order = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show me all sales orders created by 'NorthStar Technologies' this month?",
      "fields": [
        "name",
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, posting_date FROM [BT]tabSales Invoice[BT] WHERE customer = 'NorthStar Technologies' AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show me the details of open sales orders from last month for 'CloudServe Solutions'.",
      "fields": [
        "name",
        "customer",
        "status",
        "posting_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, grand_total, status, posting_date FROM [BT]tabSales Invoice[BT] WHERE customer = 'CloudServe Solutions' AND status = 'Unpaid' AND MONTH(posting_date) = MONTH(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) AND YEAR(posting_date) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 MONTH))''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Show me all warehouses added in the last 90 days.",
      "fields": [
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, creation FROM [BT]tabWarehouse[BT] WHERE creation >= DATE_SUB(CURDATE(), INTERVAL 90 DAY)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouses were created in the last 60 days?",
      "fields": [
        "warehouse_name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_name, creation FROM [BT]tabWarehouse[BT] WHERE creation >= DATE_SUB(CURDATE(), INTERVAL 60 DAY)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Show me all quotations submitted by FreshMart in the last 30 days.",
      "fields": [
        "name",
        "supplier",
        "transaction_date",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, transaction_date, status FROM [BT]tabSupplier Quotation[BT] WHERE supplier = 'FreshMart' AND transaction_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "List suppliers who gave quotations with discounts above 10% last month.",
      "fields": [
        "supplier",
        "discount_amount",
        "additional_discount_percentage",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, discount_amount, additional_discount_percentage, transaction_date FROM [BT]tabSupplier Quotation[BT] WHERE additional_discount_percentage > 10 AND MONTH(transaction_date) = MONTH(DATE_SUB(CURDATE(), INTERVAL 1 MONTH)) AND YEAR(transaction_date) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 MONTH))''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which quotations are going to expire within the next 10 days?",
      "fields": [
        "name",
        "valid_till",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, valid_till FROM [BT]tabSupplier Quotation[BT] WHERE valid_till BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 10 DAY)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Get quotations from the last 60 days where the total quantity is above 100.",
      "fields": [
        "name",
        "transaction_date",
        "total_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, transaction_date, total_qty FROM [BT]tabSupplier Quotation[BT] WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 60 DAY) AND total_qty > 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "List all quotations with status not equal to 'Expired' and valid till at least next week.",
      "fields": [
        "name",
        "status",
        "valid_till"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, valid_till FROM [BT]tabSupplier Quotation[BT] WHERE status != 'Expired' AND valid_till >= DATE_ADD(CURDATE(), INTERVAL 7 DAY)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "List all quotations submitted in EUR currency last quarter.",
      "fields": [
        "name",
        "supplier",
        "transaction_date",
        "currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, transaction_date, currency FROM [BT]tabSupplier Quotation[BT] WHERE currency = 'EUR' AND QUARTER(transaction_date) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) AND YEAR(transaction_date) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER))''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Count all quotations that are still valid as of today.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSupplier Quotation[BT] WHERE valid_till >= CURDATE()''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which supplier billed us the highest amount last quarter?",
      "fields": [
        "name",
        "supplier",
        "total_grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,supplier, SUM(grand_total) AS total_grand_total FROM [BT]tabPurchase Invoice[BT] WHERE QUARTER(posting_date) = QUARTER(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) AND YEAR(posting_date) = YEAR(DATE_SUB(CURDATE(), INTERVAL 1 QUARTER)) GROUP BY supplier ORDER BY total_grand_total DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices from 'Acme Inc.' that updated billed amount in the Sales Order.",
      "fields": [
        "name",
        "customer",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, update_billed_amount_in_sales_order FROM [BT]tabSales Invoice[BT] WHERE customer = 'Acme Inc.' AND update_billed_amount_in_sales_order = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the invoices created this month that didn't affect the billed amount in Sales Orders.",
      "fields": [
        "name",
        "posting_date",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, update_billed_amount_in_sales_order FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_sales_order = 0 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there POS invoices that also update billed amount in Sales Orders?",
      "fields": [
        "name",
        "is_pos",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, update_billed_amount_in_sales_order FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND update_billed_amount_in_sales_order = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all returned invoices that update billed amount in Sales Orders.",
      "fields": [
        "name",
        "is_return",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, update_billed_amount_in_sales_order FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND update_billed_amount_in_sales_order = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give me the invoices that updated Sales Order billing in June 2025.",
      "fields": [
        "name",
        "update_billed_amount_in_sales_order",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_billed_amount_in_sales_order, posting_date FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_sales_order = 1 AND posting_date between '[datetime.date(2025, 6, 1), datetime.date(2025, 6, 30)]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices for 'Gadget Co.' that did not update billed amount in SO.",
      "fields": [
        "name",
        "customer",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, update_billed_amount_in_sales_order FROM [BT]tabSales Invoice[BT] WHERE customer = 'Gadget Co.' AND update_billed_amount_in_sales_order = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices with total above 10,000 updated Sales Order billing?",
      "fields": [
        "name",
        "grand_total",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total, update_billed_amount_in_sales_order FROM [BT]tabSales Invoice[BT] WHERE grand_total > 10000 AND update_billed_amount_in_sales_order = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Do we have invoices with both stock update and billed amount update in SO?",
      "fields": [
        "name",
        "update_stock",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_stock, update_billed_amount_in_sales_order FROM [BT]tabSales Invoice[BT] WHERE update_stock = 1 AND update_billed_amount_in_sales_order = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have updated the billed amount in the linked Delivery Note?",
      "fields": [
        "name",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_billed_amount_in_delivery_note FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_delivery_note = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count the invoices that did not update billed amount in Delivery Notes.",
      "fields": [
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_delivery_note = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices from 'SpeedyMart' that updated billed amount in Delivery Notes.",
      "fields": [
        "name",
        "customer",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, update_billed_amount_in_delivery_note FROM [BT]tabSales Invoice[BT] WHERE customer = 'SpeedyMart' AND update_billed_amount_in_delivery_note = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get non-updated Delivery Note invoices created last month.",
      "fields": [
        "name",
        "posting_date",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, update_billed_amount_in_delivery_note FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_delivery_note = 0 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Do any POS invoices also update the Delivery Note billing?",
      "fields": [
        "name",
        "is_pos",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, update_billed_amount_in_delivery_note FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND update_billed_amount_in_delivery_note = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with both stock and delivery note billing updates.",
      "fields": [
        "name",
        "update_stock",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_stock, update_billed_amount_in_delivery_note FROM [BT]tabSales Invoice[BT] WHERE update_stock = 1 AND update_billed_amount_in_delivery_note = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices with return status updated Delivery Note billing?",
      "fields": [
        "name",
        "is_return",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, update_billed_amount_in_delivery_note FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND update_billed_amount_in_delivery_note = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices where billed amount wasn't updated in DN but grand total exceeded 5000.",
      "fields": [
        "name",
        "update_billed_amount_in_delivery_note",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_billed_amount_in_delivery_note, grand_total FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_delivery_note = 0 AND grand_total > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give invoices for 'TechNova' with DN billing updated in June 2025.",
      "fields": [
        "name",
        "customer",
        "update_billed_amount_in_delivery_note",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, update_billed_amount_in_delivery_note, posting_date FROM [BT]tabSales Invoice[BT] WHERE customer = 'TechNova' AND update_billed_amount_in_delivery_note = 1 AND posting_date between '[datetime.date(2025, 6, 1), datetime.date(2025, 6, 30)]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices updated the billed amount in their sales orders?",
      "fields": [
        "name",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_billed_amount_in_sales_order FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_sales_order = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show me invoices that didn’t update billed amount in sales orders.",
      "fields": [
        "name",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_billed_amount_in_sales_order FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_sales_order = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have their sales order billing status updated?",
      "fields": [
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_sales_order = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List customer names for invoices where sales order billing was updated.",
      "fields": [
        "customer",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_sales_order = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices from 'Sun Traders' have billing updates in their sales orders?",
      "fields": [
        "name",
        "customer",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, update_billed_amount_in_sales_order FROM [BT]tabSales Invoice[BT] WHERE customer = 'Sun Traders' AND update_billed_amount_in_sales_order = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Fetch POS invoices that also update the billed amount in the sales order.",
      "fields": [
        "name",
        "is_pos",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, update_billed_amount_in_sales_order FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND update_billed_amount_in_sales_order = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where billed amounts weren’t synced back to sales orders.",
      "fields": [
        "name",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_billed_amount_in_sales_order FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_sales_order = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices that both return items and update sales order billing.",
      "fields": [
        "name",
        "is_return",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, update_billed_amount_in_sales_order FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND update_billed_amount_in_sales_order = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show the posting dates of invoices that have updated their sales order billing.",
      "fields": [
        "name",
        "posting_date",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, update_billed_amount_in_sales_order FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_sales_order = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices updated the billed amount in their delivery notes?",
      "fields": [
        "name",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_billed_amount_in_delivery_note FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_delivery_note = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices that did not sync billed amounts back to delivery notes.",
      "fields": [
        "name",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_billed_amount_in_delivery_note FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_delivery_note = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices with delivery note billing update enabled.",
      "fields": [
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_delivery_note = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Fetch invoices where 'Gadget House' has updated billing in delivery notes.",
      "fields": [
        "name",
        "customer",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, update_billed_amount_in_delivery_note FROM [BT]tabSales Invoice[BT] WHERE customer = 'Gadget House' AND update_billed_amount_in_delivery_note = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List the posting dates of invoices with delivery note billing updates.",
      "fields": [
        "name",
        "posting_date",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, update_billed_amount_in_delivery_note FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_delivery_note = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Did any POS invoices update their delivery note billing?",
      "fields": [
        "name",
        "is_pos",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, update_billed_amount_in_delivery_note FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND update_billed_amount_in_delivery_note = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with both delivery note billing updates and returns.",
      "fields": [
        "name",
        "is_return",
        "update_billed_amount_in_delivery_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, update_billed_amount_in_delivery_note FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND update_billed_amount_in_delivery_note = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many non-return invoices update delivery note billing?",
      "fields": [
        "update_billed_amount_in_delivery_note",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 0 AND update_billed_amount_in_delivery_note = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all invoices with delivery billing update and amount over 5000.",
      "fields": [
        "name",
        "update_billed_amount_in_delivery_note",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_billed_amount_in_delivery_note, grand_total FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_delivery_note = 1 AND grand_total > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices are marked as debit notes?",
      "fields": [
        "name",
        "is_debit_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_debit_note FROM [BT]tabSales Invoice[BT] WHERE is_debit_note = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many debit notes were issued to customers?",
      "fields": [
        "is_debit_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_debit_note = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all debit notes created last month.",
      "fields": [
        "name",
        "posting_date",
        "is_debit_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, is_debit_note FROM [BT]tabSales Invoice[BT] WHERE is_debit_note = 1 AND posting_date between '[start_date, end_date]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find debit notes issued by the company 'RetailX Corp'.",
      "fields": [
        "name",
        "company",
        "is_debit_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company, is_debit_note FROM [BT]tabSales Invoice[BT] WHERE is_debit_note = 1 AND company = 'RetailX Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there any debit notes with a grand total exceeding 10,000?",
      "fields": [
        "name",
        "grand_total",
        "is_debit_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total, is_debit_note FROM [BT]tabSales Invoice[BT] WHERE is_debit_note = 1 AND grand_total > 10000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers updated billing info in delivery notes this week?",
      "fields": [
        "customer",
        "update_billed_amount_in_delivery_note",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer, update_billed_amount_in_delivery_note, posting_date FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_delivery_note = 1 AND YEARWEEK(posting_date, 1) = YEARWEEK(CURDATE(), 1)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give me debit notes that are still unpaid.",
      "fields": [
        "name",
        "status",
        "is_debit_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, is_debit_note FROM [BT]tabSales Invoice[BT] WHERE is_debit_note = 1 AND status = 'Unpaid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers received debit notes this week?",
      "fields": [
        "customer",
        "is_debit_note",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer, is_debit_note, posting_date FROM [BT]tabSales Invoice[BT] WHERE is_debit_note = 1 AND YEARWEEK(posting_date, 1) = YEARWEEK(CURDATE(), 1)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which debit notes were created today?",
      "fields": [
        "name",
        "posting_date",
        "is_debit_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, is_debit_note FROM [BT]tabSales Invoice[BT] WHERE is_debit_note = 1 AND posting_date = CURDATE()''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List debit notes for 'Acme Ltd' with posting date after June 1 of the current year.",
      "fields": [
        "name",
        "customer",
        "posting_date",
        "is_debit_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, posting_date, is_debit_note FROM [BT]tabSales Invoice[BT] WHERE is_debit_note = 1 AND customer = 'Acme Ltd' AND posting_date >= DATE(CONCAT(YEAR(CURDATE()), '-06-01'))''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find debit notes that are returns as well.",
      "fields": [
        "name",
        "is_debit_note",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_debit_note, is_return FROM [BT]tabSales Invoice[BT] WHERE is_debit_note = 1 AND is_return = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices were amended from a previous one?",
      "fields": [
        "name",
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, amended_from FROM [BT]tabSales Invoice[BT] WHERE amended_from != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices that are modifications of others.",
      "fields": [
        "name",
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, amended_from FROM [BT]tabSales Invoice[BT] WHERE amended_from != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices that have been amended more than once.",
      "fields": [
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE amended_from != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give all invoices that were amended from invoice SI-0001.",
      "fields": [
        "name",
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, amended_from FROM [BT]tabSales Invoice[BT] WHERE amended_from = 'SI-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find all revised invoices for 'Retail Corp'.",
      "fields": [
        "name",
        "customer",
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, amended_from FROM [BT]tabSales Invoice[BT] WHERE customer = 'Retail Corp' AND amended_from != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Were any invoices amended today?",
      "fields": [
        "amended_from",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE amended_from IS NOT NULL AND posting_date = CURDATE()''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show amended invoices that are also debit notes.",
      "fields": [
        "name",
        "is_debit_note",
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_debit_note, amended_from FROM [BT]tabSales Invoice[BT] WHERE is_debit_note = 1 AND amended_from != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have not been amended?",
      "fields": [
        "name",
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, amended_from FROM [BT]tabSales Invoice[BT] WHERE amended_from = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many amended invoices were created for company 'Tradelink Ltd'?",
      "fields": [
        "amended_from",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE amended_from != '' AND company = 'Tradelink Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices were booked under the Main Cost Center?",
      "fields": [
        "name",
        "cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, cost_center FROM [BT]tabSales Invoice[BT] WHERE cost_center = 'Main Cost Center' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices associated with cost center East Zone.",
      "fields": [
        "name",
        "cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, cost_center FROM [BT]tabSales Invoice[BT] WHERE cost_center = 'East Zone' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices were tagged to the North Division cost center?",
      "fields": [
        "cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE cost_center = 'North Division' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with a blank cost center field.",
      "fields": [
        "name",
        "cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, cost_center FROM [BT]tabSales Invoice[BT] WHERE cost_center = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with cost centers starting with 'HO'.",
      "fields": [
        "name",
        "cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, cost_center FROM [BT]tabSales Invoice[BT] WHERE cost_center LIKE 'HO%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all POS invoices booked under Retail Cost Center.",
      "fields": [
        "name",
        "cost_center",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, cost_center, is_pos FROM [BT]tabSales Invoice[BT] WHERE cost_center = 'Retail Cost Center' AND is_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with cost center 'Warehouse-001' and company 'Gulf Ltd'.",
      "fields": [
        "name",
        "cost_center",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, cost_center, company FROM [BT]tabSales Invoice[BT] WHERE cost_center = 'Warehouse-001' AND company = 'Gulf Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with cost center defined and net total greater than 5000.",
      "fields": [
        "name",
        "cost_center",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, cost_center, net_total FROM [BT]tabSales Invoice[BT] WHERE cost_center != '' AND net_total > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many sales returns were recorded under Regional Cost Center?",
      "fields": [
        "cost_center",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE cost_center = 'Regional Cost Center' AND is_return = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices associated with project code 'PRJ-2025-001'.",
      "fields": [
        "name",
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, project FROM [BT]tabSales Invoice[BT] WHERE project = 'PRJ-2025-001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices are linked to the project 'Alpha Expansion'?",
      "fields": [
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE project = 'Alpha Expansion' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices that are not linked to any project.",
      "fields": [
        "name",
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, project FROM [BT]tabSales Invoice[BT] WHERE project = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices for 'Apollo Infra' project posted after 2025-05-01.",
      "fields": [
        "name",
        "project",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, project, posting_date FROM [BT]tabSales Invoice[BT] WHERE project = 'Apollo Infra' AND posting_date > 'datetime.date(2025, 5, 1)' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers have invoices linked to project 'Green Energy'?",
      "fields": [
        "customer",
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE project = 'Green Energy' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices under the project 'Legacy Tower'.",
      "fields": [
        "name",
        "is_return",
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, project, is_return FROM [BT]tabSales Invoice[BT] WHERE project = 'Legacy Tower' AND is_return = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get POS invoices linked to project 'Retail 360'.",
      "fields": [
        "name",
        "project",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, project, is_pos FROM [BT]tabSales Invoice[BT] WHERE project = 'Retail 360' AND is_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices for the 'Urban Smart Homes' project with total exceeding 50000.",
      "fields": [
        "name",
        "project",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, project, grand_total FROM [BT]tabSales Invoice[BT] WHERE project = 'Urban Smart Homes' AND grand_total > 50000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which projects were billed in June 2025?",
      "fields": [
        "project",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT project FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[datetime.date(2025, 6, 1), datetime.date(2025, 6, 30)]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there any invoices for project 'Skyline Mega Mall' billed today?",
      "fields": [
        "project",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE project = 'Skyline Mega Mall' AND posting_date = CURDATE()''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices where currency and price list settings were changed manually.",
      "fields": [
        "currency_and_price_list",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, currency_and_price_list FROM [BT]tabSales Invoice[BT] WHERE currency_and_price_list = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices that have custom currency and price list configurations.",
      "fields": [
        "name",
        "currency_and_price_list",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, currency_and_price_list, posting_date FROM [BT]tabSales Invoice[BT] WHERE currency_and_price_list = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices did not use the default price list setting?",
      "fields": [
        "currency_and_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE currency_and_price_list = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get a list of invoices where price list selection was overridden.",
      "fields": [
        "name",
        "currency_and_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, currency_and_price_list FROM [BT]tabSales Invoice[BT] WHERE currency_and_price_list = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers have invoices with modified price list settings?",
      "fields": [
        "customer",
        "currency_and_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE currency_and_price_list = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find all POS invoices that used a non-standard currency and price list setup.",
      "fields": [
        "name",
        "currency_and_price_list",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, currency_and_price_list, is_pos FROM [BT]tabSales Invoice[BT] WHERE currency_and_price_list = 1 AND is_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List return invoices with custom currency and price list settings.",
      "fields": [
        "name",
        "currency_and_price_list",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, currency_and_price_list, is_return FROM [BT]tabSales Invoice[BT] WHERE currency_and_price_list = 1 AND is_return = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices created this month that mention contact persons?",
      "fields": [
        "posting_date",
        "contact_person"
      ]
    },
    "output": "frappe.db.sql('''SELECT contact_person, name FROM [BT]tabSales Invoice[BT] WHERE contact_person != '' AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices created this month with valid contact email addresses?",
      "fields": [
        "posting_date",
        "contact_email",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, contact_email FROM [BT]tabSales Invoice[BT] WHERE contact_email != '' AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices bypassed default payment terms this month?",
      "fields": [
        "posting_date",
        "ignore_default_payment_terms_template"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE ignore_default_payment_terms_template = 1 AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices created this month that used a payment terms template.",
      "fields": [
        "posting_date",
        "payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_terms_template FROM [BT]tabSales Invoice[BT] WHERE payment_terms_template != '' AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Batch"
      ],
      "question": "Find all batches of item 'EcoFilter Max' expiring this month.",
      "fields": [
        "batch_id",
        "item",
        "expiry_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT batch_id, item, expiry_date FROM [BT]tabBatch[BT] WHERE item = 'EcoFilter Max' AND MONTH(expiry_date) = MONTH(CURDATE()) AND YEAR(expiry_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "What is the total salary expense for this month?",
      "fields": [
        "ctc"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(ctc)/12 AS total_monthly_salary_expense FROM [BT]tabEmployee[BT] WHERE ctc IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Did any invoices created this month update the billed amount in sales orders?",
      "fields": [
        "name",
        "posting_date",
        "update_billed_amount_in_sales_order"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, update_billed_amount_in_sales_order FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_sales_order = 1 AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices by cost center 'Admin' posted this month.",
      "fields": [
        "name",
        "cost_center",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, cost_center, posting_date FROM [BT]tabSales Invoice[BT] WHERE cost_center = 'Admin' AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices this year have changed currency and price list?",
      "fields": [
        "currency_and_price_list",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE currency_and_price_list = 1 AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all invoices where the currency conversion rate is greater than 1.5.",
      "fields": [
        "name",
        "conversion_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, conversion_rate FROM [BT]tabSales Invoice[BT] WHERE conversion_rate > 1.5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have a conversion rate less than the base rate of 1?",
      "fields": [
        "name",
        "conversion_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, conversion_rate FROM [BT]tabSales Invoice[BT] WHERE conversion_rate < 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices were posted with a currency conversion rate exactly equal to 1?",
      "fields": [
        "conversion_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE conversion_rate = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices with conversion rates modified manually by users.",
      "fields": [
        "name",
        "conversion_rate",
        "currency_and_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, conversion_rate, currency_and_price_list FROM [BT]tabSales Invoice[BT] WHERE currency_and_price_list = 1 AND conversion_rate != 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices with conversion rates higher than 2.0.",
      "fields": [
        "name",
        "conversion_rate",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, conversion_rate, is_return FROM [BT]tabSales Invoice[BT] WHERE conversion_rate > 2.0 AND is_return = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List POS invoices with conversion rate below 0.9.",
      "fields": [
        "name",
        "is_pos",
        "conversion_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, conversion_rate FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND conversion_rate < 0.9''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all invoices in April 2025 with conversion rates above 1.2.",
      "fields": [
        "name",
        "conversion_rate",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, conversion_rate, posting_date FROM [BT]tabSales Invoice[BT] WHERE conversion_rate > 1.2 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many customer invoices were billed with a conversion rate above 1?",
      "fields": [
        "customer",
        "conversion_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE conversion_rate > 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give me invoices from 'Acme Corp' where conversion rate was not 1.",
      "fields": [
        "name",
        "conversion_rate",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, conversion_rate, customer FROM [BT]tabSales Invoice[BT] WHERE customer = 'Acme Corp' AND conversion_rate != 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where the selling price list used was 'Standard Selling'.",
      "fields": [
        "name",
        "selling_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, selling_price_list FROM [BT]tabSales Invoice[BT] WHERE selling_price_list = 'Standard Selling' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices were made using the 'Retail Selling' price list?",
      "fields": [
        "selling_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE selling_price_list = 'Retail Selling' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices that used 'POS Price List'.",
      "fields": [
        "name",
        "is_pos",
        "selling_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, selling_price_list FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND selling_price_list = 'POS Price List' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices from 'Tech Supplies' where 'Premium Pricing' was applied.",
      "fields": [
        "name",
        "customer",
        "selling_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, selling_price_list FROM [BT]tabSales Invoice[BT] WHERE customer = 'Tech Supplies' AND selling_price_list = 'Premium Pricing' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all return invoices that used the 'Wholesale Selling' price list.",
      "fields": [
        "name",
        "is_return",
        "selling_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, selling_price_list FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND selling_price_list = 'Wholesale Selling' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Were any invoices created today using 'Special Rates' price list?",
      "fields": [
        "selling_price_list",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE selling_price_list = 'Special Rates' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many consolidated invoices were issued this year?",
      "fields": [
        "is_consolidated",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_consolidated = 1 AND YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get a list of consolidated invoices created today.",
      "fields": [
        "is_consolidated",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, is_consolidated, posting_date FROM [BT]tabSales Invoice[BT] WHERE is_consolidated = 1 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many consolidated invoices were submitted this week?",
      "fields": [
        "is_consolidated",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_consolidated = 1 AND YEARWEEK(posting_date, 1) = YEARWEEK(CURDATE(), 1)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all non-return invoices posted today.",
      "fields": [
        "name",
        "is_return",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, is_return, posting_date FROM [BT]tabSales Invoice[BT] WHERE is_return = 0 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which return invoices were created this week?",
      "fields": [
        "name",
        "is_return",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, posting_date, is_return FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND YEARWEEK(posting_date, 1) = YEARWEEK(CURDATE(), 1)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Show quotations submitted by 'Zedex Supplies' in USD that are still valid today.",
      "fields": [
        "name",
        "supplier",
        "currency",
        "valid_till"
      ]
    },
    "output": "frappe.db.sql('SELECT name, supplier, currency, valid_till FROM [BT]tabSupplier Quotation[BT] WHERE supplier = \"Zedex Supplies\" AND currency = \"USD\" AND valid_till >= CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if there's any Delivery Note billing update in today's invoices.",
      "fields": [
        "update_billed_amount_in_delivery_note",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE update_billed_amount_in_delivery_note = 1 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices amended from another invoice this week.",
      "fields": [
        "name",
        "amended_from",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, amended_from, posting_date FROM [BT]tabSales Invoice[BT] WHERE amended_from != \"\" AND YEARWEEK(posting_date, 1) = YEARWEEK(CURDATE(), 1)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there invoices created today with a different conversion rate than the default?",
      "fields": [
        "conversion_rate",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE conversion_rate != 1 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show me invoices using any price list other than 'Standard Selling'.",
      "fields": [
        "name",
        "selling_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, selling_price_list FROM [BT]tabSales Invoice[BT] WHERE selling_price_list != 'Standard Selling' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all invoices this quarter with the price list set as 'Seasonal Offer'.",
      "fields": [
        "name",
        "selling_price_list",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, selling_price_list, posting_date FROM [BT]tabSales Invoice[BT] WHERE selling_price_list = 'Seasonal Offer' AND posting_date >= 'start' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List distinct price lists used by 'Global Traders' in their invoices.",
      "fields": [
        "customer",
        "selling_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT selling_price_list FROM [BT]tabSales Invoice[BT] WHERE customer = 'Global Traders' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with 'Holiday Deal' selling price list?",
      "fields": [
        "customer",
        "selling_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE selling_price_list = 'Holiday Deal' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where the price list currency is USD.",
      "fields": [
        "name",
        "price_list_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, price_list_currency FROM [BT]tabSales Invoice[BT] WHERE price_list_currency = 'USD' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have price list currency as EUR?",
      "fields": [
        "price_list_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE price_list_currency = 'EUR' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show return invoices where the price list currency was INR.",
      "fields": [
        "name",
        "is_return",
        "price_list_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, price_list_currency FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND price_list_currency = 'INR' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices from 'Acme Corp' where the price list currency is GBP.",
      "fields": [
        "name",
        "customer",
        "price_list_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, price_list_currency FROM [BT]tabSales Invoice[BT] WHERE customer = 'Acme Corp' AND price_list_currency = 'GBP' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find POS invoices using AED as the price list currency.",
      "fields": [
        "name",
        "is_pos",
        "price_list_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, price_list_currency FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND price_list_currency = 'AED' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Were any invoices posted today in CAD as price list currency?",
      "fields": [
        "price_list_currency",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE price_list_currency = \"CAD\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with price list currency other than USD.",
      "fields": [
        "name",
        "price_list_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, price_list_currency FROM [BT]tabSales Invoice[BT] WHERE price_list_currency != 'USD' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices in SGD as the price list currency?",
      "fields": [
        "customer",
        "price_list_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE price_list_currency = 'SGD' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with 'Holiday Promo' price list and currency set to JPY.",
      "fields": [
        "name",
        "selling_price_list",
        "price_list_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, selling_price_list, price_list_currency FROM [BT]tabSales Invoice[BT] WHERE selling_price_list = 'Holiday Promo' AND price_list_currency = 'JPY' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices where the price list currency conversion rate is greater than 1.5.",
      "fields": [
        "name",
        "plc_conversion_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, plc_conversion_rate FROM [BT]tabSales Invoice[BT] WHERE plc_conversion_rate > 1.5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have a plc conversion rate less than 1?",
      "fields": [
        "plc_conversion_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE plc_conversion_rate < 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List return invoices with plc conversion rate over 2.0.",
      "fields": [
        "name",
        "is_return",
        "plc_conversion_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, plc_conversion_rate FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND plc_conversion_rate > 2.0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find POS invoices where the plc conversion rate is exactly 1.0.",
      "fields": [
        "name",
        "is_pos",
        "plc_conversion_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, plc_conversion_rate FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND plc_conversion_rate = 1.0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with a conversion rate under 0.9?",
      "fields": [
        "customer",
        "plc_conversion_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE plc_conversion_rate < 0.9''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show distinct conversion rates used in return invoices.",
      "fields": [
        "is_return",
        "plc_conversion_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT plc_conversion_rate FROM [BT]tabSales Invoice[BT] WHERE is_return = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with updated currency and price list made this month.",
      "fields": [
        "name",
        "posting_date",
        "currency_and_price_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, currency_and_price_list, posting_date FROM [BT]tabSales Invoice[BT] WHERE currency_and_price_list = 1 AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there any invoices with overridden currency settings created today?",
      "fields": [
        "currency_and_price_list",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE currency_and_price_list = 1 AND posting_date = CURDATE()''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices this month where plc conversion rate is not 1.",
      "fields": [
        "name",
        "plc_conversion_rate",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, plc_conversion_rate, posting_date FROM [BT]tabSales Invoice[BT] WHERE plc_conversion_rate != 1 AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if there are any invoices with plc conversion rate above 3 today.",
      "fields": [
        "plc_conversion_rate",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE plc_conversion_rate > 3 AND posting_date = CURDATE()''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give me invoices this year with price list currency as QAR.",
      "fields": [
        "name",
        "price_list_currency",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, price_list_currency, posting_date FROM [BT]tabSales Invoice[BT] WHERE price_list_currency = 'QAR' AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices this year had a plc conversion rate below 0.5?",
      "fields": [
        "plc_conversion_rate",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE plc_conversion_rate < 0.5 AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where pricing rules were explicitly ignored.",
      "fields": [
        "name",
        "ignore_pricing_rule"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, ignore_pricing_rule FROM [BT]tabSales Invoice[BT] WHERE ignore_pricing_rule = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices do not follow any pricing rules?",
      "fields": [
        "ignore_pricing_rule"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE ignore_pricing_rule = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices that skipped pricing rules.",
      "fields": [
        "name",
        "is_return",
        "ignore_pricing_rule"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, ignore_pricing_rule FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND ignore_pricing_rule = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices where pricing rules were ignored.",
      "fields": [
        "name",
        "is_pos",
        "ignore_pricing_rule"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, ignore_pricing_rule FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND ignore_pricing_rule = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers have invoices that skipped pricing rules?",
      "fields": [
        "customer",
        "ignore_pricing_rule"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE ignore_pricing_rule = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all invoices this quarter where pricing rules were not used.",
      "fields": [
        "name",
        "ignore_pricing_rule",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, ignore_pricing_rule, posting_date FROM [BT]tabSales Invoice[BT] WHERE ignore_pricing_rule = 1 AND posting_date >= 'start' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all invoices where pricing rules were applied.",
      "fields": [
        "name",
        "ignore_pricing_rule"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, ignore_pricing_rule FROM [BT]tabSales Invoice[BT] WHERE ignore_pricing_rule = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices where barcode scanning was enabled.",
      "fields": [
        "name",
        "scan_barcode"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, scan_barcode FROM [BT]tabSales Invoice[BT] WHERE scan_barcode = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices used barcode scanning?",
      "fields": [
        "scan_barcode"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE scan_barcode = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List return invoices where barcode scanning was active.",
      "fields": [
        "name",
        "is_return",
        "scan_barcode"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, scan_barcode FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND scan_barcode = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which POS invoices had barcode scanning enabled?",
      "fields": [
        "name",
        "is_pos",
        "scan_barcode"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, scan_barcode FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND scan_barcode = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers used barcode scanning in their invoices?",
      "fields": [
        "customer",
        "scan_barcode"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE scan_barcode = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give all invoices from this quarter with barcode scanning turned on.",
      "fields": [
        "name",
        "scan_barcode",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, scan_barcode, posting_date FROM [BT]tabSales Invoice[BT] WHERE scan_barcode = 1 AND posting_date >= 'start' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where barcode scanning was not used.",
      "fields": [
        "name",
        "scan_barcode"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, scan_barcode FROM [BT]tabSales Invoice[BT] WHERE scan_barcode = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices where stock was updated.",
      "fields": [
        "name",
        "update_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_stock FROM [BT]tabSales Invoice[BT] WHERE update_stock = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices involved stock updates?",
      "fields": [
        "update_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE update_stock = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List return invoices that updated stock.",
      "fields": [
        "name",
        "is_return",
        "update_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, update_stock FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND update_stock = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices where stock was also updated.",
      "fields": [
        "name",
        "is_pos",
        "update_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, update_stock FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND update_stock = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices that updated stock?",
      "fields": [
        "customer",
        "update_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE update_stock = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give invoices from 'SuperMart' that updated stock.",
      "fields": [
        "name",
        "customer",
        "update_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, update_stock FROM [BT]tabSales Invoice[BT] WHERE customer = 'SuperMart' AND update_stock = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with no stock update applied.",
      "fields": [
        "name",
        "update_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_stock FROM [BT]tabSales Invoice[BT] WHERE update_stock = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all invoices from this quarter that used 'Seasonal Warehouse'.",
      "fields": [
        "name",
        "set_warehouse",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, set_warehouse, posting_date FROM [BT]tabSales Invoice[BT] WHERE set_warehouse = 'Seasonal Warehouse' AND posting_date >= 'start' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List distinct warehouses used in Sales Invoices.",
      "fields": [
        "set_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT set_warehouse FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find all invoices that did not use the default warehouse.",
      "fields": [
        "name",
        "set_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, set_warehouse FROM [BT]tabSales Invoice[BT] WHERE set_warehouse != 'Main Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers used 'Express Warehouse' for fulfillment?",
      "fields": [
        "customer",
        "set_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE set_warehouse = 'Express Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices that used 'Main Warehouse' as the default warehouse.",
      "fields": [
        "name",
        "set_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, set_warehouse FROM [BT]tabSales Invoice[BT] WHERE set_warehouse = 'Main Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices were assigned to 'Retail Warehouse'?",
      "fields": [
        "set_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE set_warehouse = 'Retail Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which POS invoices were fulfilled from 'Outlet Warehouse'?",
      "fields": [
        "name",
        "is_pos",
        "set_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, set_warehouse FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND set_warehouse = 'Outlet Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices from customer 'SuperMart' using 'Store Warehouse'.",
      "fields": [
        "name",
        "customer",
        "set_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, set_warehouse FROM [BT]tabSales Invoice[BT] WHERE customer = 'SuperMart' AND set_warehouse = 'Store Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show return invoices assigned to 'Returns Warehouse'.",
      "fields": [
        "name",
        "is_return",
        "set_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, set_warehouse FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND set_warehouse = 'Returns Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all invoices from this quarter that used 'Seasonal Warehouse'.",
      "fields": [
        "name",
        "set_warehouse",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, set_warehouse, posting_date FROM [BT]tabSales Invoice[BT] WHERE set_warehouse = 'Seasonal Warehouse' AND posting_date >= 'start' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List distinct warehouses used in Sales Invoices.",
      "fields": [
        "set_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT set_warehouse FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find all invoices that did not use the default warehouse.",
      "fields": [
        "name",
        "set_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, set_warehouse FROM [BT]tabSales Invoice[BT] WHERE set_warehouse != 'Main Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers used 'Express Warehouse' for fulfillment?",
      "fields": [
        "customer",
        "set_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE set_warehouse = 'Express Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices that had 'Target Warehouse 1' selected as their target warehouse.",
      "fields": [
        "name",
        "set_target_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, set_target_warehouse FROM [BT]tabSales Invoice[BT] WHERE set_target_warehouse = 'Target Warehouse 1' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices were assigned to 'Outlet Target Warehouse'?",
      "fields": [
        "set_target_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE set_target_warehouse = 'Outlet Target Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which POS invoices used 'Retail Target Warehouse'?",
      "fields": [
        "name",
        "is_pos",
        "set_target_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, set_target_warehouse FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND set_target_warehouse = 'Retail Target Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices for customer 'ElectroMart' with 'Main Target Warehouse'.",
      "fields": [
        "name",
        "customer",
        "set_target_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, set_target_warehouse FROM [BT]tabSales Invoice[BT] WHERE customer = 'ElectroMart' AND set_target_warehouse = 'Main Target Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show return invoices that used 'Returns Target Warehouse'.",
      "fields": [
        "name",
        "is_return",
        "set_target_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, set_target_warehouse FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND set_target_warehouse = 'Returns Target Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices from this quarter with 'Seasonal Target Warehouse' assigned.",
      "fields": [
        "name",
        "set_target_warehouse",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, set_target_warehouse, posting_date FROM [BT]tabSales Invoice[BT] WHERE set_target_warehouse = 'Seasonal Target Warehouse' AND posting_date >= 'start' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List distinct target warehouses used in invoices.",
      "fields": [
        "set_target_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT set_target_warehouse FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices that did not use 'Central Target Warehouse'.",
      "fields": [
        "name",
        "set_target_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, set_target_warehouse FROM [BT]tabSales Invoice[BT] WHERE set_target_warehouse != 'Central Target Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers used 'City Target Warehouse' in their invoices?",
      "fields": [
        "customer",
        "set_target_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE set_target_warehouse = 'City Target Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices that include items in the invoice lines.",
      "fields": [
        "items",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, items FROM [BT]tabSales Invoice[BT] WHERE items != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where 'Laptop Pro 15' is one of the items.",
      "fields": [
        "items",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, items FROM [BT]tabSales Invoice[BT] WHERE items.item_code = 'Laptop Pro 15' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices include the item 'USB Cable'?",
      "fields": [
        "items"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE items.item_code = 'USB Cable' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices where any of the items have quantity more than 10.",
      "fields": [
        "items",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, items FROM [BT]tabSales Invoice[BT] WHERE items.qty > 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices that include both 'Mouse' and 'Keyboard' in the items.",
      "fields": [
        "items",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, items FROM [BT]tabSales Invoice[BT] WHERE items.item_code in '['Mouse', 'Keyboard']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find POS invoices with at least one item quantity above 5.",
      "fields": [
        "is_pos",
        "items",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, items FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND items.qty > 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers bought the item 'HDMI Cable'?",
      "fields": [
        "customer",
        "items"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE items.item_code = 'HDMI Cable' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Return invoices that included 'SSD Drive' as an item.",
      "fields": [
        "is_return",
        "items",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, items FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND items.item_code = 'SSD Drive' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all invoices where the total quantity exceeds 100.",
      "fields": [
        "name",
        "total_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_qty FROM [BT]tabSales Invoice[BT] WHERE total_qty > 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices had a total quantity of zero?",
      "fields": [
        "total_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE total_qty = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List POS invoices where the total quantity is more than 20.",
      "fields": [
        "name",
        "is_pos",
        "total_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, total_qty FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND total_qty > 20''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get return invoices with total quantity less than 10.",
      "fields": [
        "name",
        "is_return",
        "total_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, total_qty FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND total_qty < 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices this month with total quantity above 50.",
      "fields": [
        "name",
        "total_qty",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_qty, posting_date FROM [BT]tabSales Invoice[BT] WHERE total_qty > 50 AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all invoices where total quantity is not equal to 0.",
      "fields": [
        "name",
        "total_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_qty FROM [BT]tabSales Invoice[BT] WHERE total_qty != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers have invoices with total quantity above 200?",
      "fields": [
        "customer",
        "total_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE total_qty > 200''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many return invoices were made with zero total quantity?",
      "fields": [
        "is_return",
        "total_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND total_qty = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where the total net weight exceeds 500 kg.",
      "fields": [
        "name",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_net_weight FROM [BT]tabSales Invoice[BT] WHERE total_net_weight > 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have zero total net weight?",
      "fields": [
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE total_net_weight = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices with a total net weight below 100 kg.",
      "fields": [
        "name",
        "is_pos",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, total_net_weight FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND total_net_weight < 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices where the total net weight is over 250 kg.",
      "fields": [
        "name",
        "is_return",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, total_net_weight FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND total_net_weight > 250''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all invoices created today with plc conversion rate between 1 and 2.",
      "fields": [
        "name",
        "plc_conversion_rate",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, plc_conversion_rate, posting_date FROM [BT]tabSales Invoice[BT] WHERE plc_conversion_rate BETWEEN 1 AND 2 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices created today that did not apply pricing rules.",
      "fields": [
        "name",
        "ignore_pricing_rule",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, ignore_pricing_rule, posting_date FROM [BT]tabSales Invoice[BT] WHERE ignore_pricing_rule = 1 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoices today ignored pricing rules.",
      "fields": [
        "ignore_pricing_rule",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE ignore_pricing_rule = 1 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show today's invoices that involved barcode scanning.",
      "fields": [
        "name",
        "scan_barcode",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, scan_barcode, posting_date FROM [BT]tabSales Invoice[BT] WHERE scan_barcode = 1 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices created today that used barcode scanning?",
      "fields": [
        "scan_barcode",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE scan_barcode = 1 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices from this week that included stock updates.",
      "fields": [
        "name",
        "update_stock",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, update_stock, posting_date FROM [BT]tabSales Invoice[BT] WHERE update_stock = 1 AND YEARWEEK(posting_date, 1) = YEARWEEK(CURDATE(), 1)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Did any invoices update stock today?",
      "fields": [
        "update_stock",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE update_stock = 1 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Did any invoices use 'Warehouse A' today?",
      "fields": [
        "set_warehouse",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE set_warehouse = \"Warehouse A\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Were any invoices created today with 'Express Target Warehouse'?",
      "fields": [
        "set_target_warehouse",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE set_target_warehouse = \"Express Target Warehouse\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there any invoices today that include 'Monitor 27 inch'?",
      "fields": [
        "items",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice Item[BT] WHERE item_code = \"Monitor 27 inch\" AND parent IN (SELECT name FROM [BT]tabSales Invoice[BT] WHERE posting_date = CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices today with total quantity exactly 1?",
      "fields": [
        "total_qty",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE total_qty = 1 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices this week with a total net weight over 1000 kg?",
      "fields": [
        "name",
        "total_net_weight",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, total_net_weight, posting_date FROM [BT]tabSales Invoice[BT] WHERE total_net_weight > 1000 AND YEARWEEK(posting_date, 1) = YEARWEEK(CURDATE(), 1)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if there are any invoices with net weight exactly 300 kg created today.",
      "fields": [
        "total_net_weight",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE total_net_weight = 300 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give a list of invoices with non-zero net weight.",
      "fields": [
        "name",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_net_weight FROM [BT]tabSales Invoice[BT] WHERE total_net_weight != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with a total net weight greater than 800 kg?",
      "fields": [
        "customer",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE total_net_weight > 800''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many return invoices had no net weight?",
      "fields": [
        "is_return",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND total_net_weight = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where the total net weight exceeds 500 kg.",
      "fields": [
        "name",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_net_weight FROM [BT]tabSales Invoice[BT] WHERE total_net_weight > 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have zero total net weight?",
      "fields": [
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE total_net_weight = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices with a total net weight below 100 kg.",
      "fields": [
        "name",
        "is_pos",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, total_net_weight FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND total_net_weight < 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices where the total net weight is over 250 kg.",
      "fields": [
        "name",
        "is_return",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, total_net_weight FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND total_net_weight > 250''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give a list of invoices with non-zero net weight.",
      "fields": [
        "name",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_net_weight FROM [BT]tabSales Invoice[BT] WHERE total_net_weight != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with a total net weight greater than 800 kg?",
      "fields": [
        "customer",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE total_net_weight > 800''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many return invoices had no net weight?",
      "fields": [
        "is_return",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND total_net_weight = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where the total net weight exceeds 500 kg.",
      "fields": [
        "name",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_net_weight FROM [BT]tabSales Invoice[BT] WHERE total_net_weight > 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have zero total net weight?",
      "fields": [
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE total_net_weight = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices with a total net weight below 100 kg.",
      "fields": [
        "name",
        "is_pos",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, total_net_weight FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND total_net_weight < 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices where the total net weight is over 250 kg.",
      "fields": [
        "name",
        "is_return",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, total_net_weight FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND total_net_weight > 250''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give a list of invoices with non-zero net weight.",
      "fields": [
        "name",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_net_weight FROM [BT]tabSales Invoice[BT] WHERE total_net_weight != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with a total net weight greater than 800 kg?",
      "fields": [
        "customer",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE total_net_weight > 800''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many return invoices had no net weight?",
      "fields": [
        "is_return",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND total_net_weight = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where the base total exceeds 10,000.",
      "fields": [
        "name",
        "base_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, base_total FROM [BT]tabSales Invoice[BT] WHERE base_total > 10000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have a base total exactly 0?",
      "fields": [
        "base_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE base_total = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get return invoices with base total greater than 5000.",
      "fields": [
        "name",
        "is_return",
        "base_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, base_total FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND base_total > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List POS invoices with base total below 1000.",
      "fields": [
        "name",
        "is_pos",
        "base_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, base_total FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND base_total < 1000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers have invoices with a base total over 20,000?",
      "fields": [
        "customer",
        "base_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE base_total > 20000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give a list of all invoices with non-zero base total values.",
      "fields": [
        "name",
        "base_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, base_total FROM [BT]tabSales Invoice[BT] WHERE base_total != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice from 'Tech Solutions' has base total under 300.",
      "fields": [
        "base_total",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE customer = 'Tech Solutions' AND base_total < 300''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many return invoices had a base total over 15,000?",
      "fields": [
        "is_return",
        "base_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND base_total > 15000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where the base net total is more than 12,000.",
      "fields": [
        "name",
        "base_net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, base_net_total FROM [BT]tabSales Invoice[BT] WHERE base_net_total > 12000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have zero base net total?",
      "fields": [
        "base_net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE base_net_total = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show return invoices with a base net total below 1,000.",
      "fields": [
        "name",
        "is_return",
        "base_net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, base_net_total FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND base_net_total < 1000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List POS invoices having base net total less than 500.",
      "fields": [
        "name",
        "is_pos",
        "base_net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, base_net_total FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND base_net_total < 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with base net total over 25,000?",
      "fields": [
        "customer",
        "base_net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE base_net_total > 25000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where the base net total is not zero.",
      "fields": [
        "name",
        "base_net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, base_net_total FROM [BT]tabSales Invoice[BT] WHERE base_net_total != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the average base net total for invoices this quarter?",
      "fields": [
        "base_net_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_net_total FROM [BT]tabSales Invoice[BT] WHERE posting_date >= 'start' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if 'Global Retail' has any invoice with base net total under 1000.",
      "fields": [
        "base_net_total",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE customer = 'Global Retail' AND base_net_total < 1000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many return invoices have base net total above 10,000?",
      "fields": [
        "is_return",
        "base_net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND base_net_total > 10000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with total amount greater than 10,000.",
      "fields": [
        "name",
        "total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total FROM [BT]tabSales Invoice[BT] WHERE total > 10000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have a total value of exactly 0?",
      "fields": [
        "total"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE total = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find POS invoices where the total is below 500.",
      "fields": [
        "name",
        "total",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total, is_pos FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND total < 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers have invoices totaling over 20,000?",
      "fields": [
        "customer",
        "total"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE total > 20000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List return invoices with total value less than 2,000.",
      "fields": [
        "name",
        "is_return",
        "total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, total FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND total < 2000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all invoices with non-zero total values.",
      "fields": [
        "name",
        "total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total FROM [BT]tabSales Invoice[BT] WHERE total != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Average total value of invoices created this quarter?",
      "fields": [
        "total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT total FROM [BT]tabSales Invoice[BT] WHERE posting_date >= 'start' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if 'TechCorp' has any invoice with total over 30,000.",
      "fields": [
        "customer",
        "total"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE customer = 'TechCorp' AND total > 30000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where the net total is more than 25,000.",
      "fields": [
        "name",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, net_total FROM [BT]tabSales Invoice[BT] WHERE net_total > 25000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have a net total exactly equal to zero?",
      "fields": [
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE net_total = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find POS invoices where the net total is less than 1,000.",
      "fields": [
        "name",
        "net_total",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, net_total, is_pos FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND net_total < 1000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with a net total greater than 50,000?",
      "fields": [
        "customer",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE net_total > 50000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Return invoices with a net total less than 5,000.",
      "fields": [
        "name",
        "net_total",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, net_total FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND net_total < 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all invoices where net total is not zero.",
      "fields": [
        "name",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, net_total FROM [BT]tabSales Invoice[BT] WHERE net_total != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice from 'Acme Corp' has net total above 40,000.",
      "fields": [
        "customer",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE customer = 'Acme Corp' AND net_total > 40000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count of invoices in Q2 where net total is below 3,000.",
      "fields": [
        "net_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE net_total < 3000 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with 'Export' as their tax category.",
      "fields": [
        "tax_category",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_category FROM [BT]tabSales Invoice[BT] WHERE tax_category = 'Export' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices used the 'Domestic' tax category?",
      "fields": [
        "tax_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE tax_category = 'Domestic' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with tax category not equal to 'Zero Rated'.",
      "fields": [
        "tax_category",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_category FROM [BT]tabSales Invoice[BT] WHERE tax_category != 'Zero Rated' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices received any card payment?",
      "fields": [
        "name",
        "payments"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(DISTINCT si.name) as total_invoices FROM [BT]tabSales Invoice[BT] si JOIN [BT]tabSales Invoice Payment[BT] sip ON si.name = sip.parent WHERE sip.mode_of_payment = 'Card' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with more than one payment method used.",
      "fields": [
        "payments",
        "name",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT si.name, si.customer FROM [BT]tabSales Invoice[BT] si JOIN [BT]tabSales Invoice Payment[BT] sip ON si.name = sip.parent GROUP BY si.name, si.customer HAVING COUNT(DISTINCT sip.mode_of_payment) > 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with 'Deemed Export' tax category?",
      "fields": [
        "tax_category",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE tax_category = 'Deemed Export' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List return invoices categorized as 'SEZ'.",
      "fields": [
        "tax_category",
        "is_return",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_category, is_return FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND tax_category = 'SEZ' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices marked as POS and having tax category as 'Special Rate'.",
      "fields": [
        "tax_category",
        "is_pos",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, tax_category FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND tax_category = 'Special Rate' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the average base total of invoices from this month.",
      "fields": [
        "base_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT AVG(base_total) as average_base_total FROM [BT]tabSales Invoice[BT] WHERE MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices this month marked under the 'Nil Rated' tax category?",
      "fields": [
        "tax_category",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_category, posting_date FROM [BT]tabSales Invoice[BT] WHERE tax_category = 'Nil Rated' AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get a distinct list of tax categories used in sales invoices.",
      "fields": [
        "tax_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT tax_category FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices that used 'Standard GST' in taxes and charges.",
      "fields": [
        "taxes_and_charges",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT taxes_and_charges, name FROM [BT]tabSales Invoice[BT] WHERE taxes_and_charges = 'Standard GST' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices applied 'Export Tax Template' as taxes and charges?",
      "fields": [
        "taxes_and_charges"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE taxes_and_charges = 'Export Tax Template' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices with taxes and charges set to 'Retail Scheme Tax'.",
      "fields": [
        "is_pos",
        "taxes_and_charges",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, taxes_and_charges, name FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND taxes_and_charges = 'Retail Scheme Tax' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices where the taxes and charges template was 'Return Tax'.",
      "fields": [
        "is_return",
        "taxes_and_charges",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, taxes_and_charges, name FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND taxes_and_charges = 'Return Tax' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices using any tax template other than 'Zero Tax'.",
      "fields": [
        "taxes_and_charges",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT taxes_and_charges, name FROM [BT]tabSales Invoice[BT] WHERE taxes_and_charges != 'Zero Tax' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers used the 'State GST Plan' tax template?",
      "fields": [
        "taxes_and_charges",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE taxes_and_charges = 'State GST Plan' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show me invoices from Q1 where 'VAT Template' was used.",
      "fields": [
        "taxes_and_charges",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT taxes_and_charges, posting_date, name FROM [BT]tabSales Invoice[BT] WHERE taxes_and_charges = 'VAT Template' AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List distinct taxes and charges templates applied in sales invoices.",
      "fields": [
        "taxes_and_charges"
      ]
    },
    "output": "frappe.db.sql('''SELECT taxes_and_charges FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices that used the 'Standard Shipping' rule.",
      "fields": [
        "shipping_rule",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT shipping_rule, name FROM [BT]tabSales Invoice[BT] WHERE shipping_rule = 'Standard Shipping' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices applied the 'Express Delivery' shipping rule?",
      "fields": [
        "shipping_rule"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE shipping_rule = 'Express Delivery' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices where the shipping rule was set to 'POS Free Shipping'.",
      "fields": [
        "is_pos",
        "shipping_rule",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, shipping_rule, name FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND shipping_rule = 'POS Free Shipping' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices where 'Return Shipping Rule' was used.",
      "fields": [
        "is_return",
        "shipping_rule",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, shipping_rule, name FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND shipping_rule = 'Return Shipping Rule' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices using any shipping rule other than 'No Shipping'.",
      "fields": [
        "shipping_rule",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT shipping_rule, name FROM [BT]tabSales Invoice[BT] WHERE shipping_rule != 'No Shipping' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers received shipments under 'Premium Shipping' rule?",
      "fields": [
        "shipping_rule",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE shipping_rule = 'Premium Shipping' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices from last quarter using the 'Seasonal Shipping' rule.",
      "fields": [
        "shipping_rule",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT shipping_rule, posting_date, name FROM [BT]tabSales Invoice[BT] WHERE shipping_rule = 'Seasonal Shipping' AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List distinct shipping rules used in all sales invoices.",
      "fields": [
        "shipping_rule"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT shipping_rule FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where the Incoterm was set to 'FOB'.",
      "fields": [
        "incoterm"
      ]
    },
    "output": "frappe.db.sql('''SELECT incoterm FROM [BT]tabSales Invoice[BT] WHERE incoterm = 'FOB' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices used 'CIF' as their incoterm?",
      "fields": [
        "incoterm"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE incoterm = 'CIF' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices with 'DAP' incoterm.",
      "fields": [
        "incoterm",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, incoterm FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND incoterm = 'DAP' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices where incoterm used was 'DDP'.",
      "fields": [
        "incoterm",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, incoterm FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND incoterm = 'DDP' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices using any incoterm other than 'FOB'.",
      "fields": [
        "incoterm"
      ]
    },
    "output": "frappe.db.sql('''SELECT incoterm FROM [BT]tabSales Invoice[BT] WHERE incoterm != 'FOB' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with 'CFR' incoterm?",
      "fields": [
        "incoterm",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE incoterm = 'CFR' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices from Q2 using 'DDU' incoterm.",
      "fields": [
        "incoterm",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT incoterm, posting_date FROM [BT]tabSales Invoice[BT] WHERE incoterm = 'DDU' AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all unique incoterms used in invoices.",
      "fields": [
        "incoterm"
      ]
    },
    "output": "frappe.db.sql('''SELECT incoterm FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where the named place is set to 'Doha Port'.",
      "fields": [
        "name",
        "named_place"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, named_place FROM [BT]tabSales Invoice[BT] WHERE named_place = 'Doha Port' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices were shipped from 'Jebel Ali Free Zone'?",
      "fields": [
        "named_place"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE named_place = 'Jebel Ali Free Zone' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices delivered from 'Dubai Airport'.",
      "fields": [
        "name",
        "is_pos",
        "named_place"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, named_place FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND named_place = 'Dubai Airport' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List return invoices where goods were delivered to 'Salwa Road Warehouse'.",
      "fields": [
        "name",
        "is_return",
        "named_place"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, named_place FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND named_place = 'Salwa Road Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give me all invoices shipped from places other than 'Hamad Port'.",
      "fields": [
        "name",
        "named_place"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, named_place FROM [BT]tabSales Invoice[BT] WHERE named_place != 'Hamad Port' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers received shipments from 'Al Wakrah Facility'?",
      "fields": [
        "customer",
        "named_place"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE named_place = 'Al Wakrah Facility' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find all invoices from Q2 where goods were dispatched from 'Ras Laffan Hub'.",
      "fields": [
        "name",
        "named_place",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, named_place, posting_date FROM [BT]tabSales Invoice[BT] WHERE named_place = 'Ras Laffan Hub' AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all unique named places used in sales invoices.",
      "fields": [
        "named_place"
      ]
    },
    "output": "frappe.db.sql('''SELECT named_place FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices that include tax records.",
      "fields": [
        "name",
        "taxes"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, taxes FROM [BT]tabSales Invoice[BT] WHERE taxes != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have no tax information?",
      "fields": [
        "taxes"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE taxes = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many POS invoices have tax records?",
      "fields": [
        "taxes",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND taxes != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List return invoices that have tax entries.",
      "fields": [
        "name",
        "taxes",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, taxes FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND taxes != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show distinct customers from invoices that include tax details.",
      "fields": [
        "customer",
        "taxes"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE taxes != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where tax information was updated from default.",
      "fields": [
        "name",
        "taxes"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, taxes FROM [BT]tabSales Invoice[BT] WHERE taxes != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices this week with a total net weight over 1000 kg?",
      "fields": [
        "name",
        "total_net_weight",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, total_net_weight, posting_date FROM [BT]tabSales Invoice[BT] WHERE total_net_weight > 1000 AND YEARWEEK(posting_date, 1) = YEARWEEK(CURDATE(), 1)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if there are any invoices with net weight exactly 300 kg created today.",
      "fields": [
        "total_net_weight",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE total_net_weight = 300 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices created today with a base total less than 500.",
      "fields": [
        "base_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT base_total, posting_date FROM [BT]tabSales Invoice[BT] WHERE base_total < 500 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with base net total below 300 created today.",
      "fields": [
        "base_net_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT base_net_total, posting_date FROM [BT]tabSales Invoice[BT] WHERE base_net_total < 300 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with total value over 15,000 created today.",
      "fields": [
        "name",
        "posting_date",
        "total"
      ]
    },
    "output": "frappe.db.sql('SELECT name, total, posting_date FROM [BT]tabSales Invoice[BT] WHERE total > 15000 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with net total over 10,000 created today?",
      "fields": [
        "name",
        "net_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, net_total, posting_date FROM [BT]tabSales Invoice[BT] WHERE net_total > 10000 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check for invoices created today using the 'Exempt' tax category.",
      "fields": [
        "tax_category",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE tax_category = \"Exempt\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Were any invoices created today with 'Holiday Tax Plan' as taxes and charges?",
      "fields": [
        "taxes_and_charges",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE taxes_and_charges = \"Holiday Tax Plan\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices this year with any tax category specified.",
      "fields": [
        "name",
        "tax_category",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, tax_category, posting_date FROM [BT]tabSales Invoice[BT] WHERE tax_category IS NOT NULL AND YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Were any invoices today created using the 'Holiday Delivery' shipping rule?",
      "fields": [
        "shipping_rule",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE shipping_rule = \"Holiday Delivery\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Were any invoices created today using 'EXW' incoterm?",
      "fields": [
        "incoterm",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE incoterm = \"EXW\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all invoices this year with any incoterm value set.",
      "fields": [
        "incoterm",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT incoterm, posting_date FROM [BT]tabSales Invoice[BT] WHERE incoterm != \"\" AND YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Were any invoices issued today from 'Qatar Industrial Area'?",
      "fields": [
        "named_place",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE named_place = \"Qatar Industrial Area\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices used a named place this year?",
      "fields": [
        "named_place",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE named_place != \"\" AND YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with non-empty taxes field created today.",
      "fields": [
        "name",
        "taxes",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, taxes, posting_date FROM [BT]tabSales Invoice[BT] WHERE taxes != \"\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices posted this week contain tax entries?",
      "fields": [
        "name",
        "taxes",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, taxes, posting_date FROM [BT]tabSales Invoice[BT] WHERE taxes != \"\" AND YEARWEEK(posting_date, 1) = YEARWEEK(CURDATE(), 1)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with tax data from this fiscal year.",
      "fields": [
        "name",
        "taxes",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, taxes, posting_date FROM [BT]tabSales Invoice[BT] WHERE taxes != \"\" AND YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice created today has a taxes field filled.",
      "fields": [
        "taxes",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE taxes != \"\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where the base total taxes and charges exceed 500.",
      "fields": [
        "name",
        "base_total_taxes_and_charges"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, base_total_taxes_and_charges FROM [BT]tabSales Invoice[BT] WHERE base_total_taxes_and_charges > 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have zero base total taxes and charges?",
      "fields": [
        "base_total_taxes_and_charges"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE base_total_taxes_and_charges = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices with base total taxes and charges greater than 300.",
      "fields": [
        "name",
        "is_pos",
        "base_total_taxes_and_charges"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, base_total_taxes_and_charges FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND base_total_taxes_and_charges > 300''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices where the base total taxes and charges is under 200.",
      "fields": [
        "name",
        "is_return",
        "base_total_taxes_and_charges"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, base_total_taxes_and_charges FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND base_total_taxes_and_charges < 200''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Were any invoices created today with base total taxes and charges above 100?",
      "fields": [
        "base_total_taxes_and_charges",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE base_total_taxes_and_charges > 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices where base total taxes and charges exceeded 750?",
      "fields": [
        "customer",
        "base_total_taxes_and_charges"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE base_total_taxes_and_charges > 750''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices this year with non-zero base total taxes and charges.",
      "fields": [
        "name",
        "base_total_taxes_and_charges",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, base_total_taxes_and_charges, posting_date FROM [BT]tabSales Invoice[BT] WHERE base_total_taxes_and_charges != 0 AND YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with base total taxes and charges not equal to zero.",
      "fields": [
        "name",
        "base_total_taxes_and_charges"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, base_total_taxes_and_charges FROM [BT]tabSales Invoice[BT] WHERE base_total_taxes_and_charges != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many return invoices had base total taxes and charges equal to 150?",
      "fields": [
        "is_return",
        "base_total_taxes_and_charges"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND base_total_taxes_and_charges = 150''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where the totals field is not empty.",
      "fields": [
        "name",
        "totals"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, totals FROM [BT]tabSales Invoice[BT] WHERE totals != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have totals mentioned?",
      "fields": [
        "totals"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE totals != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices where the totals section is filled in.",
      "fields": [
        "name",
        "is_pos",
        "totals"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, totals FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND totals != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices with total information present.",
      "fields": [
        "name",
        "is_return",
        "totals"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, totals FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND totals != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with filled totals field?",
      "fields": [
        "customer",
        "totals"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE totals != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get distinct totals values used in all sales invoices.",
      "fields": [
        "totals"
      ]
    },
    "output": "frappe.db.sql('''SELECT totals FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices this quarter where totals are recorded.",
      "fields": [
        "name",
        "posting_date",
        "totals"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, totals, posting_date FROM [BT]tabSales Invoice[BT] WHERE totals != '' AND posting_date >= 'start' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give me invoices where the totals match 'Subtotal + Tax'.",
      "fields": [
        "name",
        "totals"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, totals FROM [BT]tabSales Invoice[BT] WHERE totals = 'Subtotal + Tax' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many return invoices with totals set to 'Final Amount'?",
      "fields": [
        "is_return",
        "totals"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND totals = 'Final Amount' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where the base grand total is more than 10,000.",
      "fields": [
        "name",
        "base_grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, base_grand_total FROM [BT]tabSales Invoice[BT] WHERE base_grand_total > 10000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many return invoices had a base grand total under 5,000?",
      "fields": [
        "is_return",
        "base_grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND base_grand_total < 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices with a base grand total exactly 7500.",
      "fields": [
        "is_pos",
        "base_grand_total",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, base_grand_total FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND base_grand_total = 7500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with a base grand total above 50,000?",
      "fields": [
        "customer",
        "base_grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE base_grand_total > 50000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices this quarter with high base grand totals.",
      "fields": [
        "name",
        "posting_date",
        "base_grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, base_grand_total, posting_date FROM [BT]tabSales Invoice[BT] WHERE base_grand_total > 0 AND posting_date >= 'start' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there any invoices where base grand total is not zero?",
      "fields": [
        "base_grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE base_grand_total != '0' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get average base grand total for invoices in 2025.",
      "fields": [
        "base_grand_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_grand_total FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show distinct base grand total values used in sales invoices.",
      "fields": [
        "base_grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_grand_total FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices had a base grand total of exactly 9999.99?",
      "fields": [
        "base_grand_total",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, base_grand_total FROM [BT]tabSales Invoice[BT] WHERE base_grand_total = 9999.99''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices where base_rounding_adjustment was applied.",
      "fields": [
        "name",
        "base_rounding_adjustment"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, base_rounding_adjustment FROM [BT]tabSales Invoice[BT] WHERE base_rounding_adjustment != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have base_rounding_adjustment as 0?",
      "fields": [
        "base_rounding_adjustment"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE base_rounding_adjustment = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices with non-zero base_rounding_adjustment.",
      "fields": [
        "is_return",
        "base_rounding_adjustment",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, base_rounding_adjustment FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND base_rounding_adjustment != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with base_rounding_adjustment greater than 2?",
      "fields": [
        "customer",
        "base_rounding_adjustment"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE base_rounding_adjustment > 2''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where the base rounded total is greater than 1000.",
      "fields": [
        "name",
        "base_rounded_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, base_rounded_total FROM [BT]tabSales Invoice[BT] WHERE base_rounded_total > 1000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have base_rounded_total equal to zero?",
      "fields": [
        "base_rounded_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE base_rounded_total = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices where the base_rounded_total exceeds 5000.",
      "fields": [
        "is_return",
        "base_rounded_total",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, base_rounded_total FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND base_rounded_total > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the total base_rounding_adjustment across invoices for this month.",
      "fields": [
        "base_rounding_adjustment",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(base_rounding_adjustment) AS total_base_rounding_adjustment FROM [BT]tabSales Invoice[BT] WHERE MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with base_rounded_total less than 300?",
      "fields": [
        "customer",
        "base_rounded_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE base_rounded_total < 300''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the sum of base_rounded_total for invoices posted this month.",
      "fields": [
        "base_rounded_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(base_rounded_total) AS total_base_rounded_total FROM [BT]tabSales Invoice[BT] WHERE MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get distinct values of base_rounded_total used in sales invoices.",
      "fields": [
        "base_rounded_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_rounded_total FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices from Q1 where base_rounded_total was below 800.",
      "fields": [
        "base_rounded_total",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, base_rounded_total, posting_date FROM [BT]tabSales Invoice[BT] WHERE base_rounded_total < 800 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where the grand total is greater than 10,000.",
      "fields": [
        "name",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total FROM [BT]tabSales Invoice[BT] WHERE grand_total > 10000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have grand total exactly 0?",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE grand_total = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show return invoices with grand total less than 500.",
      "fields": [
        "name",
        "is_return",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, grand_total FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND grand_total < 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find POS invoices where the grand total is not equal to 0.",
      "fields": [
        "is_pos",
        "grand_total",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND grand_total != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with grand total between 1000 and 5000.",
      "fields": [
        "name",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total FROM [BT]tabSales Invoice[BT] WHERE grand_total between '[1000, 5000]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the average grand total of all invoices from last month?",
      "fields": [
        "grand_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT grand_total FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with a grand total above 25,000?",
      "fields": [
        "customer",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE grand_total > 25000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give invoices for 'Tech Distributors' where the grand total exceeds 40,000.",
      "fields": [
        "name",
        "customer",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total FROM [BT]tabSales Invoice[BT] WHERE customer = 'Tech Distributors' AND grand_total > 40000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get distinct grand total values used in invoices.",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT grand_total FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where rounding adjustment is greater than 1.",
      "fields": [
        "name",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, rounding_adjustment FROM [BT]tabSales Invoice[BT] WHERE rounding_adjustment > 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices had no rounding adjustment applied?",
      "fields": [
        "rounding_adjustment"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE rounding_adjustment = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show return invoices where rounding adjustment was negative.",
      "fields": [
        "name",
        "is_return",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, rounding_adjustment FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND rounding_adjustment < 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice created this week has base total taxes and charges below 250.",
      "fields": [
        "base_total_taxes_and_charges",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE base_total_taxes_and_charges < 250 AND posting_date BETWEEN [start, end]', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice created today contains totals.",
      "fields": [
        "totals",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE totals != \"\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give invoices created today where base grand total is recorded.",
      "fields": [
        "base_grand_total",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, base_grand_total FROM [BT]tabSales Invoice[BT] WHERE base_grand_total != 0 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoices today have a base_rounding_adjustment value.",
      "fields": [
        "base_rounding_adjustment",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE base_rounding_adjustment != 0 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Were any invoices created today with base_rounded_total over 2000?",
      "fields": [
        "base_rounded_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE base_rounded_total > 2000 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoices were made today with grand total over 20,000.",
      "fields": [
        "grand_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE grand_total > 20000 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice today has a rounding adjustment.",
      "fields": [
        "name",
        "rounding_adjustment",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, rounding_adjustment, posting_date FROM [BT]tabSales Invoice[BT] WHERE rounding_adjustment != 0 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give me POS invoices with a rounding adjustment less than 0.5.",
      "fields": [
        "name",
        "is_pos",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, rounding_adjustment FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND rounding_adjustment < 0.5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with a rounding adjustment above 2?",
      "fields": [
        "name",
        "customer",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT customer, name, rounding_adjustment FROM [BT]tabSales Invoice[BT] WHERE rounding_adjustment > 2''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices this year with rounding adjustment of at least 1.",
      "fields": [
        "name",
        "posting_date",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, rounding_adjustment FROM [BT]tabSales Invoice[BT] WHERE posting_date >= MAKEDATE(YEAR(CURDATE()), 1) AND rounding_adjustment >= 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find distinct rounding adjustment values used in invoices.",
      "fields": [
        "name",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT rounding_adjustment, name FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with a rounding adjustment between -1 and 1.",
      "fields": [
        "name",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, rounding_adjustment FROM [BT]tabSales Invoice[BT] WHERE rounding_adjustment BETWEEN -1 AND 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any return invoices with rounding adjustment over 3.5?",
      "fields": [
        "name",
        "is_return",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, rounding_adjustment FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND rounding_adjustment > 3.5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees are currently on active?",
      "fields": [
        "name",
        "employee_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name FROM [BT]tabEmployee[BT] WHERE status = 'Active' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with a rounded total more than 5,000?",
      "fields": [
        "customer",
        "rounded_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE rounded_total > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get distinct rounded total values from invoices.",
      "fields": [
        "rounded_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT rounded_total FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many return invoices had no rounding applied?",
      "fields": [
        "is_return",
        "rounded_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND rounded_total = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where rounded total equals grand total.",
      "fields": [
        "rounded_total",
        "grand_total",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, rounded_total, grand_total FROM [BT]tabSales Invoice[BT] WHERE rounded_total = 'grand_total' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where the amount in words is not empty.",
      "fields": [
        "name",
        "in_words"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, in_words FROM [BT]tabSales Invoice[BT] WHERE in_words != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have 'Rupees One Thousand Only' written as the amount in words?",
      "fields": [
        "in_words"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE in_words = 'Rupees One Thousand Only' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices where the in_words field is filled.",
      "fields": [
        "is_pos",
        "in_words",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, in_words FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND in_words != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices with amount in words stating 'Rupees Five Hundred Only'.",
      "fields": [
        "is_return",
        "in_words",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, in_words FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND in_words = 'Rupees Five Hundred Only' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there any return invoices where the in_words field is left empty?",
      "fields": [
        "is_return",
        "in_words"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND in_words = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with the amount written as 'Zero Rupees Only'.",
      "fields": [
        "name",
        "in_words"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, in_words FROM [BT]tabSales Invoice[BT] WHERE in_words = 'Zero Rupees Only' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where the total advance paid is more than 1000.",
      "fields": [
        "name",
        "total_advance"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_advance FROM [BT]tabSales Invoice[BT] WHERE total_advance > 1000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have total advance equal to zero?",
      "fields": [
        "total_advance"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE total_advance = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices with a total advance below 500.",
      "fields": [
        "is_pos",
        "total_advance",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_advance FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND total_advance < 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices where total advance was more than 200.",
      "fields": [
        "is_return",
        "total_advance",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, total_advance FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND total_advance > 200''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice created today has a non-empty in_words field.",
      "fields": [
        "in_words",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE in_words != \"\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice created today has a total advance greater than 100.",
      "fields": [
        "total_advance",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE total_advance > 100 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers made an advance of over 3000 in their invoices?",
      "fields": [
        "customer",
        "total_advance"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE total_advance > 3000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with any non-zero total advance in the past 15 days.",
      "fields": [
        "total_advance",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_advance FROM [BT]tabSales Invoice[BT] WHERE total_advance != 0 AND posting_date >= 'start' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give me invoices where the advance amount was exactly 750.",
      "fields": [
        "total_advance",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_advance FROM [BT]tabSales Invoice[BT] WHERE total_advance = 750''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any return invoices with zero advance payment?",
      "fields": [
        "is_return",
        "total_advance",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, total_advance FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND total_advance = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show distinct total advance values used in sales invoices.",
      "fields": [
        "total_advance"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_advance FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with an outstanding amount greater than 5000.",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE outstanding_amount > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have zero outstanding balance?",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE outstanding_amount = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices where the outstanding amount is under 100.",
      "fields": [
        "outstanding_amount",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND outstanding_amount < 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices with unpaid amounts more than 2000.",
      "fields": [
        "outstanding_amount",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND outstanding_amount > 2000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there any invoices created today with outstanding dues?",
      "fields": [
        "outstanding_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE outstanding_amount > 0 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers still owe more than 10,000?",
      "fields": [
        "outstanding_amount",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE outstanding_amount > 10000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with non-zero outstanding amount in the last 7 days?",
      "fields": [
        "outstanding_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE outstanding_amount != 0 AND posting_date >= 'start' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give me invoices where outstanding is exactly 2750.",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE outstanding_amount = 2750''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all return invoices with no outstanding balance.",
      "fields": [
        "outstanding_amount",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND outstanding_amount = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List distinct outstanding amounts from invoices.",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT outstanding_amount FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where rounding total is disabled.",
      "fields": [
        "name",
        "disable_rounded_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, disable_rounded_total FROM [BT]tabSales Invoice[BT] WHERE disable_rounded_total = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have disabled the rounded total option?",
      "fields": [
        "disable_rounded_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE disable_rounded_total = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find all POS invoices where rounded total was not applied.",
      "fields": [
        "is_pos",
        "disable_rounded_total",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, disable_rounded_total FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND disable_rounded_total = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which return invoices had the rounding disabled?",
      "fields": [
        "is_return",
        "disable_rounded_total",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, disable_rounded_total FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND disable_rounded_total = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List distinct customers who have invoices with rounding off turned off.",
      "fields": [
        "customer",
        "disable_rounded_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE disable_rounded_total = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where discount was applied on net total.",
      "fields": [
        "name",
        "apply_discount_on"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, apply_discount_on FROM [BT]tabSales Invoice[BT] WHERE apply_discount_on = 'Net Total' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices apply discount on the grand total?",
      "fields": [
        "apply_discount_on"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE apply_discount_on = 'Grand Total' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices where discount was set on net total.",
      "fields": [
        "name",
        "is_pos",
        "apply_discount_on"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_pos, apply_discount_on FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND apply_discount_on = 'Net Total' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which return invoices apply discounts on grand total?",
      "fields": [
        "name",
        "is_return",
        "apply_discount_on"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, apply_discount_on FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND apply_discount_on = 'Grand Total' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get distinct values of how discounts are applied in invoices.",
      "fields": [
        "apply_discount_on"
      ]
    },
    "output": "frappe.db.sql('''SELECT apply_discount_on FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where discounts were applied on Net Total.",
      "fields": [
        "apply_discount_on"
      ]
    },
    "output": "frappe.db.sql('''SELECT apply_discount_on FROM [BT]tabSales Invoice[BT] WHERE apply_discount_on = 'Net Total' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have discount applied on Grand Total?",
      "fields": [
        "apply_discount_on"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE apply_discount_on = 'Grand Total' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices where discount was applied on Net Total.",
      "fields": [
        "is_pos",
        "apply_discount_on"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, apply_discount_on FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND apply_discount_on = 'Net Total' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices with discount applied on Grand Total.",
      "fields": [
        "is_return",
        "apply_discount_on"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, apply_discount_on FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND apply_discount_on = 'Grand Total' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices not using Net Total for discount application.",
      "fields": [
        "apply_discount_on"
      ]
    },
    "output": "frappe.db.sql('''SELECT apply_discount_on FROM [BT]tabSales Invoice[BT] WHERE apply_discount_on != 'Net Total' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had discounts applied on Grand Total?",
      "fields": [
        "customer",
        "apply_discount_on"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE apply_discount_on = 'Grand Total' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices from Q2 where discount was on Net Total.",
      "fields": [
        "apply_discount_on",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT apply_discount_on, posting_date FROM [BT]tabSales Invoice[BT] WHERE apply_discount_on = 'Net Total' AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many return invoices didn’t apply discount on Net Total?",
      "fields": [
        "is_return",
        "apply_discount_on"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND apply_discount_on != 'Net Total' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all distinct values for the apply discount on field.",
      "fields": [
        "apply_discount_on"
      ]
    },
    "output": "frappe.db.sql('''SELECT apply_discount_on FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with a base discount amount above 500.",
      "fields": [
        "base_discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_discount_amount FROM [BT]tabSales Invoice[BT] WHERE base_discount_amount > 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have zero base discount amount?",
      "fields": [
        "base_discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE base_discount_amount = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices with base discount amount less than 100.",
      "fields": [
        "is_pos",
        "base_discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, base_discount_amount FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND base_discount_amount < 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices with base discount over 250.",
      "fields": [
        "is_return",
        "base_discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, base_discount_amount FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND base_discount_amount > 250''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where base discount was not applied.",
      "fields": [
        "base_discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_discount_amount FROM [BT]tabSales Invoice[BT] WHERE base_discount_amount = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers received base discounts over 1,000?",
      "fields": [
        "customer",
        "base_discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE base_discount_amount > 1000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices in Q1 with base discount amounts above 200?",
      "fields": [
        "base_discount_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_discount_amount, posting_date FROM [BT]tabSales Invoice[BT] WHERE base_discount_amount > 200 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Average base discount amount in this year's invoices?",
      "fields": [
        "base_discount_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_discount_amount FROM [BT]tabSales Invoice[BT] WHERE posting_date >= 'start' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get distinct base discount amounts applied.",
      "fields": [
        "base_discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_discount_amount FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with a base discount amount greater than 500.",
      "fields": [
        "base_discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_discount_amount FROM [BT]tabSales Invoice[BT] WHERE base_discount_amount > 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices had no base discount amount applied?",
      "fields": [
        "base_discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE base_discount_amount = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices with low base discount amount under 100.",
      "fields": [
        "is_pos",
        "base_discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, base_discount_amount FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND base_discount_amount < 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices with base discount more than 250.",
      "fields": [
        "is_return",
        "base_discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, base_discount_amount FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND base_discount_amount > 250''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers received large base discounts over 1000?",
      "fields": [
        "base_discount_amount",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE base_discount_amount > 1000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give me invoices in Q1 with base discount more than 200.",
      "fields": [
        "base_discount_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_discount_amount, posting_date FROM [BT]tabSales Invoice[BT] WHERE base_discount_amount > 200 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get distinct base discount amounts used in invoices.",
      "fields": [
        "base_discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_discount_amount FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where cash or non-trade discount is applied.",
      "fields": [
        "is_cash_or_non_trade_discount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_cash_or_non_trade_discount FROM [BT]tabSales Invoice[BT] WHERE is_cash_or_non_trade_discount = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices created today with rounding disabled?",
      "fields": [
        "posting_date",
        "disable_rounded_total"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE disable_rounded_total = 1 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices created today with discount applied on net total?",
      "fields": [
        "apply_discount_on",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE apply_discount_on = \"Net Total\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices today where discount was on Net Total?",
      "fields": [
        "apply_discount_on",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE apply_discount_on = \"Net Total\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices today with a base discount amount?",
      "fields": [
        "base_discount_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE base_discount_amount != 0 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Average base discount amount in this year's invoices?",
      "fields": [
        "base_discount_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT AVG(base_discount_amount) as avg_discount FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoices created today include a base discount.",
      "fields": [
        "base_discount_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE base_discount_amount != 0 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Average base discount amount in all invoices this year?",
      "fields": [
        "base_discount_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT AVG(base_discount_amount) as avg_discount FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices created today with rounding disabled?",
      "fields": [
        "posting_date",
        "disable_rounded_total"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE disable_rounded_total = 1 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices created today with discount applied on net total?",
      "fields": [
        "apply_discount_on",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE apply_discount_on = \"Net Total\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there any invoices from today with a cash or non-trade discount?",
      "fields": [
        "is_cash_or_non_trade_discount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE is_cash_or_non_trade_discount = 1 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices today where discount was on Net Total?",
      "fields": [
        "apply_discount_on",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE apply_discount_on = \"Net Total\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices created this year with non-trade discount applied.",
      "fields": [
        "is_cash_or_non_trade_discount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT is_cash_or_non_trade_discount, posting_date FROM [BT]tabSales Invoice[BT] WHERE is_cash_or_non_trade_discount = 1 AND YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice today used the 'Clearance Discount' account.",
      "fields": [
        "posting_date",
        "additional_discount_account"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE additional_discount_account = \"Clearance Discount\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices today with a base discount amount?",
      "fields": [
        "base_discount_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE base_discount_amount != 0 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Average base discount amount in this year's invoices?",
      "fields": [
        "base_discount_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT AVG(base_discount_amount) as avg_discount FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoices created today include a base discount.",
      "fields": [
        "base_discount_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE base_discount_amount != 0 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Average base discount amount in all invoices this year?",
      "fields": [
        "base_discount_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT AVG(base_discount_amount) as avg_discount FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with a base discount over 300 and grand total above 10000 created this week.",
      "fields": [
        "base_discount_amount",
        "grand_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT base_discount_amount, grand_total, posting_date FROM [BT]tabSales Invoice[BT] WHERE base_discount_amount > 300 AND grand_total > 10000 AND posting_date >= DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE()) DAY)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with a base discount over 300 and grand total above 10000 created this week.",
      "fields": [
        "base_discount_amount",
        "grand_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT base_discount_amount, grand_total, posting_date FROM [BT]tabSales Invoice[BT] WHERE base_discount_amount > 300 AND grand_total > 10000 AND posting_date >= DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE()) DAY)', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices do not have a non-trade or cash discount?",
      "fields": [
        "is_cash_or_non_trade_discount"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_cash_or_non_trade_discount = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices where cash or non-trade discount was applied.",
      "fields": [
        "is_pos",
        "is_cash_or_non_trade_discount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, is_cash_or_non_trade_discount FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND is_cash_or_non_trade_discount = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices with non-trade discount enabled.",
      "fields": [
        "is_return",
        "is_cash_or_non_trade_discount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, is_cash_or_non_trade_discount FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND is_cash_or_non_trade_discount = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers received invoices with cash/non-trade discount?",
      "fields": [
        "is_cash_or_non_trade_discount",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE is_cash_or_non_trade_discount = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices that applied both cash/non-trade discount and have a status of Paid.",
      "fields": [
        "is_cash_or_non_trade_discount",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_cash_or_non_trade_discount, status FROM [BT]tabSales Invoice[BT] WHERE is_cash_or_non_trade_discount = 1 AND status = 'Paid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List return POS invoices from this quarter where cash/non-trade discount was used.",
      "fields": [
        "is_cash_or_non_trade_discount",
        "is_pos",
        "is_return",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_cash_or_non_trade_discount, is_pos, is_return, posting_date FROM [BT]tabSales Invoice[BT] WHERE is_cash_or_non_trade_discount = 1 AND is_pos = 1 AND is_return = 1 AND posting_date >= 'start' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get distinct combinations of customer and non-trade discount usage.",
      "fields": [
        "customer",
        "is_cash_or_non_trade_discount"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer, is_cash_or_non_trade_discount FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where the additional discount account is 'Sales Discount'.",
      "fields": [
        "additional_discount_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT additional_discount_account FROM [BT]tabSales Invoice[BT] WHERE additional_discount_account = 'Sales Discount' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices applied the 'Promotional Discount Account'?",
      "fields": [
        "additional_discount_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE additional_discount_account = 'Promotional Discount Account' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices where the additional discount account is not empty.",
      "fields": [
        "additional_discount_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT additional_discount_account FROM [BT]tabSales Invoice[BT] WHERE additional_discount_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices using the 'Return Discount' account.",
      "fields": [
        "additional_discount_account",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, additional_discount_account FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND additional_discount_account = 'Return Discount' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any POS invoices using additional discount account named 'Seasonal Discount'?",
      "fields": [
        "is_pos",
        "additional_discount_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, additional_discount_account FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND additional_discount_account = 'Seasonal Discount' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers used the 'Loyalty Discount Account'?",
      "fields": [
        "customer",
        "additional_discount_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE additional_discount_account = 'Loyalty Discount Account' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices in Q1 using the 'New Year Discount' account.",
      "fields": [
        "additional_discount_account",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT additional_discount_account, posting_date FROM [BT]tabSales Invoice[BT] WHERE additional_discount_account = 'New Year Discount' AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show distinct additional discount accounts used in invoices.",
      "fields": [
        "additional_discount_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT additional_discount_account FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices this year that were created without pricing rules.",
      "fields": [
        "ignore_pricing_rule",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE ignore_pricing_rule = 1 AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices this year had barcode scanning enabled?",
      "fields": [
        "scan_barcode",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE scan_barcode = 1 AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices this year triggered stock updates?",
      "fields": [
        "update_stock",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE update_stock = 1 AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices this year included 'Bluetooth Speaker'?",
      "fields": [
        "items",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE items.item_code = 'Bluetooth Speaker' AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the average total quantity of all invoices created this year.",
      "fields": [
        "total_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_qty FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the average total net weight of invoices from this year.",
      "fields": [
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_net_weight FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices this year had a total below 1,000?",
      "fields": [
        "total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE total < 1000 AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Average net total of invoices created this year?",
      "fields": [
        "net_total",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT net_total FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all invoices this year that used any taxes and charges template.",
      "fields": [
        "taxes_and_charges",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,taxes_and_charges, name FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE()) AND taxes_and_charges != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all invoices this year where shipping rule was defined.",
      "fields": [
        "shipping_rule",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,shipping_rule, name FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE()) AND shipping_rule != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where the additional discount percentage exceeds 15%.",
      "fields": [
        "additional_discount_percentage",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,additional_discount_percentage, name FROM [BT]tabSales Invoice[BT] WHERE additional_discount_percentage > 15''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many return invoices had no additional discount percentage?",
      "fields": [
        "is_return",
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND additional_discount_percentage = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices with an additional discount percentage under 5%.",
      "fields": [
        "is_pos",
        "additional_discount_percentage",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,is_pos, additional_discount_percentage, name FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND additional_discount_percentage < 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices created today with any additional discount percentage applied.",
      "fields": [
        "posting_date",
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE additional_discount_percentage != 0 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers received an additional discount percentage of 20% or more?",
      "fields": [
        "name",
        "additional_discount_percentage",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,customer FROM [BT]tabSales Invoice[BT] WHERE additional_discount_percentage >= 20''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where additional discount percentage was set.",
      "fields": [
        "additional_discount_percentage",
        "name",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,additional_discount_percentage, name, grand_total FROM [BT]tabSales Invoice[BT] WHERE additional_discount_percentage != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all invoices this year where any additional discount account was set.",
      "fields": [
        "name",
        "posting_date",
        "additional_discount_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,additional_discount_account, posting_date FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE()) AND additional_discount_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices with additional discount percentage above 10%.",
      "fields": [
        "is_return",
        "additional_discount_percentage",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,is_return, additional_discount_percentage, name FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND additional_discount_percentage > 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show me invoices from Q2 with additional discount applied.",
      "fields": [
        "posting_date",
        "additional_discount_percentage",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT additional_discount_percentage, posting_date, name FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND additional_discount_percentage != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List distinct additional discount percentages used across invoices.",
      "fields": [
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.db.sql('''SELECT additional_discount_percentage FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with discount amount greater than 500.",
      "fields": [
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT discount_amount FROM [BT]tabSales Invoice[BT] WHERE discount_amount > 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices had zero discount amount?",
      "fields": [
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE discount_amount = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices with a discount amount under 100.",
      "fields": [
        "is_pos",
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, discount_amount FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND discount_amount < 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices with discount amount more than 250.",
      "fields": [
        "is_return",
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, discount_amount FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND discount_amount > 250''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers received invoices with discount amount over 1000?",
      "fields": [
        "discount_amount",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE discount_amount > 1000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give me invoices in Q3 with discount amount more than 200.",
      "fields": [
        "discount_amount",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT discount_amount, name, posting_date FROM [BT]tabSales Invoice[BT] WHERE discount_amount > 200 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get distinct discount amounts used in invoices.",
      "fields": [
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT discount_amount FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the average discount amount in invoices this year?",
      "fields": [
        "discount_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT discount_amount, posting_date FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where discount amount was not zero.",
      "fields": [
        "discount_amount",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT discount_amount, name FROM [BT]tabSales Invoice[BT] WHERE discount_amount != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show the secondary tax breakup values in all invoices.",
      "fields": [
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.db.sql('''SELECT sec_tax_breakup FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where secondary tax breakup is not empty.",
      "fields": [
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.db.sql('''SELECT sec_tax_breakup FROM [BT]tabSales Invoice[BT] WHERE sec_tax_breakup != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices include any secondary tax breakup details?",
      "fields": [
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE sec_tax_breakup != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find POS invoices with non-empty secondary tax breakup.",
      "fields": [
        "is_pos",
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, sec_tax_breakup FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND sec_tax_breakup != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many return invoices have a secondary tax breakup?",
      "fields": [
        "is_return",
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND sec_tax_breakup != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with both tax and secondary tax breakup details.",
      "fields": [
        "taxes_and_charges",
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.db.sql('''SELECT taxes_and_charges, sec_tax_breakup FROM [BT]tabSales Invoice[BT] WHERE taxes_and_charges != '' AND sec_tax_breakup != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get recent invoices with secondary tax breakup present.",
      "fields": [
        "sec_tax_breakup",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT sec_tax_breakup, posting_date FROM [BT]tabSales Invoice[BT] WHERE sec_tax_breakup != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with secondary tax details?",
      "fields": [
        "sec_tax_breakup",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE sec_tax_breakup != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give invoice IDs and dates with secondary tax breakup filled.",
      "fields": [
        "sec_tax_breakup",
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date FROM [BT]tabSales Invoice[BT] WHERE sec_tax_breakup != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show the secondary tax breakup values in all invoices.",
      "fields": [
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.db.sql('''SELECT sec_tax_breakup FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where secondary tax breakup is not empty.",
      "fields": [
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.db.sql('''SELECT sec_tax_breakup FROM [BT]tabSales Invoice[BT] WHERE sec_tax_breakup != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices include any secondary tax breakup details?",
      "fields": [
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE sec_tax_breakup != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find POS invoices with non-empty secondary tax breakup.",
      "fields": [
        "is_pos",
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, sec_tax_breakup FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND sec_tax_breakup != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many return invoices have a secondary tax breakup?",
      "fields": [
        "is_return",
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND sec_tax_breakup != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with both tax and secondary tax breakup details.",
      "fields": [
        "taxes_and_charges",
        "sec_tax_breakup"
      ]
    },
    "output": "frappe.db.sql('''SELECT taxes_and_charges, sec_tax_breakup FROM [BT]tabSales Invoice[BT] WHERE taxes_and_charges != '' AND sec_tax_breakup != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get recent invoices with secondary tax breakup present.",
      "fields": [
        "sec_tax_breakup",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT sec_tax_breakup, posting_date FROM [BT]tabSales Invoice[BT] WHERE sec_tax_breakup != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with secondary tax details?",
      "fields": [
        "sec_tax_breakup",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE sec_tax_breakup != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give invoice IDs and dates with secondary tax breakup filled.",
      "fields": [
        "sec_tax_breakup",
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date FROM [BT]tabSales Invoice[BT] WHERE sec_tax_breakup != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices that contain pricing rule details.",
      "fields": [
        "pricing_rule_details"
      ]
    },
    "output": "frappe.db.sql('''SELECT pricing_rule_details FROM [BT]tabSales Invoice[BT] WHERE pricing_rule_details != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices do not have any pricing rule details set?",
      "fields": [
        "pricing_rule_details"
      ]
    },
    "output": "frappe.db.sql('''SELECT pricing_rule_details FROM [BT]tabSales Invoice[BT] WHERE pricing_rule_details = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices contain pricing rule detail entries?",
      "fields": [
        "pricing_rule_details"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE pricing_rule_details != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find POS invoices that used pricing rule details.",
      "fields": [
        "is_pos",
        "pricing_rule_details"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, pricing_rule_details FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND pricing_rule_details != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any return invoices have pricing rule details.",
      "fields": [
        "is_return",
        "pricing_rule_details"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND pricing_rule_details != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give recent invoices with pricing rule detail values filled.",
      "fields": [
        "pricing_rule_details",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT pricing_rule_details, posting_date FROM [BT]tabSales Invoice[BT] WHERE pricing_rule_details != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers received pricing rule benefits?",
      "fields": [
        "customer",
        "pricing_rule_details"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE pricing_rule_details != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give invoice names and their pricing rule info.",
      "fields": [
        "pricing_rule_details",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, pricing_rule_details FROM [BT]tabSales Invoice[BT] WHERE pricing_rule_details != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices where pricing rule details and taxes were both present.",
      "fields": [
        "pricing_rule_details",
        "taxes"
      ]
    },
    "output": "frappe.db.sql('''SELECT pricing_rule_details, taxes FROM [BT]tabSales Invoice[BT] WHERE pricing_rule_details != '' AND taxes != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices that applied any pricing rules.",
      "fields": [
        "pricing_rules"
      ]
    },
    "output": "frappe.db.sql('''SELECT pricing_rules FROM [BT]tabSales Invoice[BT] WHERE pricing_rules != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices were submitted without any pricing rules?",
      "fields": [
        "pricing_rules"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE pricing_rules = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show me invoices where pricing rules were defined and status is Paid.",
      "fields": [
        "pricing_rules",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT pricing_rules, status FROM [BT]tabSales Invoice[BT] WHERE pricing_rules != '' AND status = 'Paid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with pricing rules used in Q2.",
      "fields": [
        "pricing_rules",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT pricing_rules, posting_date FROM [BT]tabSales Invoice[BT] WHERE pricing_rules != '' AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices that used pricing rules over 1000 grand total?",
      "fields": [
        "pricing_rules",
        "customer",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE pricing_rules != '' AND grand_total > 1000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Return invoice entries where pricing rules were present.",
      "fields": [
        "pricing_rules",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT pricing_rules, is_return FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND pricing_rules != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show names and applied pricing rules for each invoice.",
      "fields": [
        "pricing_rules",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, pricing_rules FROM [BT]tabSales Invoice[BT] WHERE pricing_rules != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which pricing rules have been most frequently applied?",
      "fields": [
        "pricing_rules"
      ]
    },
    "output": "frappe.db.sql('''SELECT pricing_rules FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with both pricing rules and taxes defined?",
      "fields": [
        "pricing_rules",
        "taxes"
      ]
    },
    "output": "frappe.db.sql('''SELECT pricing_rules, taxes FROM [BT]tabSales Invoice[BT] WHERE pricing_rules != '' AND taxes != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices that have a packing list attached.",
      "fields": [
        "packing_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT packing_list FROM [BT]tabSales Invoice[BT] WHERE packing_list != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices do not have any packing list?",
      "fields": [
        "packing_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE packing_list = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get average additional discount percentage for invoices this year.",
      "fields": [
        "posting_date",
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.db.sql('SELECT AVG(additional_discount_percentage) as avg_discount FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoices created today include discount amount.",
      "fields": [
        "discount_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE discount_amount != 0 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there any invoices today with a secondary tax breakup?",
      "fields": [
        "sec_tax_breakup",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE sec_tax_breakup != \"\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices today that used pricing rules?",
      "fields": [
        "pricing_rule_details",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE pricing_rule_details != \"\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Do any invoices from today include pricing rules?",
      "fields": [
        "pricing_rules",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE pricing_rules != \"\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices created today that have packing lists.",
      "fields": [
        "packing_list",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT packing_list, posting_date FROM [BT]tabSales Invoice[BT] WHERE packing_list != \"\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices where packing list is available.",
      "fields": [
        "packing_list",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT packing_list, is_return FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND packing_list != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers received invoices with packing lists?",
      "fields": [
        "packing_list",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE packing_list != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give me invoices with packing list and discount applied.",
      "fields": [
        "packing_list",
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT packing_list, discount_amount FROM [BT]tabSales Invoice[BT] WHERE packing_list != '' AND discount_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices where both packing list and pricing rules exist.",
      "fields": [
        "packing_list",
        "pricing_rules"
      ]
    },
    "output": "frappe.db.sql('''SELECT packing_list, pricing_rules FROM [BT]tabSales Invoice[BT] WHERE packing_list != '' AND pricing_rules != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices from July with a packing list included?",
      "fields": [
        "packing_list",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT packing_list, posting_date FROM [BT]tabSales Invoice[BT] WHERE packing_list != '' AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Is there any invoice with packing list and total above 5000?",
      "fields": [
        "packing_list",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT packing_list, grand_total FROM [BT]tabSales Invoice[BT] WHERE packing_list != '' AND grand_total > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show names and packing lists of all such invoices.",
      "fields": [
        "packing_list",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, packing_list FROM [BT]tabSales Invoice[BT] WHERE packing_list != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices that have packed items included.",
      "fields": [
        "packed_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT packed_items FROM [BT]tabSales Invoice[BT] WHERE packed_items != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices do not include any packed items?",
      "fields": [
        "packed_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE packed_items = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show return invoices where packed items were recorded.",
      "fields": [
        "is_return",
        "packed_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, packed_items FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND packed_items != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List POS invoices with any packed items.",
      "fields": [
        "is_pos",
        "packed_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, packed_items FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND packed_items != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices issued today with packed items?",
      "fields": [
        "packed_items",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT packed_items, posting_date FROM [BT]tabSales Invoice[BT] WHERE packed_items != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give customer names for invoices with packed items above ₹10,000.",
      "fields": [
        "packed_items",
        "grand_total",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE packed_items != '' AND grand_total > 10000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices in Q2 contain packed items?",
      "fields": [
        "packed_items",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT packed_items, posting_date FROM [BT]tabSales Invoice[BT] WHERE packed_items != '' AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with packed items and additional discounts?",
      "fields": [
        "packed_items",
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.db.sql('''SELECT packed_items, additional_discount_percentage FROM [BT]tabSales Invoice[BT] WHERE packed_items != '' AND additional_discount_percentage > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices having both packed items and delivery note?",
      "fields": [
        "packed_items",
        "delivery_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT packed_items, delivery_note FROM [BT]tabSales Invoice[BT] WHERE packed_items != '' AND delivery_note != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Just show the packed items of all valid invoices.",
      "fields": [
        "packed_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT packed_items FROM [BT]tabSales Invoice[BT] WHERE packed_items != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices that have packed items included.",
      "fields": [
        "packed_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT packed_items FROM [BT]tabSales Invoice[BT] WHERE packed_items != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices do not include any packed items?",
      "fields": [
        "packed_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE packed_items = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show return invoices where packed items were recorded.",
      "fields": [
        "packed_items",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT packed_items, is_return FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND packed_items != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List POS invoices with any packed items.",
      "fields": [
        "packed_items",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT packed_items, is_pos FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND packed_items != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give customer names for invoices with packed items above ₹10,000.",
      "fields": [
        "packed_items",
        "grand_total",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE packed_items != '' AND grand_total > 10000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices in Q2 contain packed items?",
      "fields": [
        "packed_items",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT packed_items, posting_date FROM [BT]tabSales Invoice[BT] WHERE packed_items != '' AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices issued today with packed items?",
      "fields": [
        "packed_items",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT packed_items, posting_date FROM [BT]tabSales Invoice[BT] WHERE packed_items != \"\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with packed items and additional discounts?",
      "fields": [
        "packed_items",
        "additional_discount_percentage"
      ]
    },
    "output": "frappe.db.sql('''SELECT packed_items, additional_discount_percentage FROM [BT]tabSales Invoice[BT] WHERE packed_items != '' AND additional_discount_percentage > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices having both packed items and delivery note?",
      "fields": [
        "packed_items",
        "delivery_note"
      ]
    },
    "output": "frappe.db.sql('''SELECT packed_items, delivery_note FROM [BT]tabSales Invoice[BT] WHERE packed_items != '' AND delivery_note != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Just show the packed items of all valid invoices.",
      "fields": [
        "packed_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT packed_items FROM [BT]tabSales Invoice[BT] WHERE packed_items != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices that contain product bundle help notes.",
      "fields": [
        "product_bundle_help"
      ]
    },
    "output": "frappe.db.sql('''SELECT product_bundle_help FROM [BT]tabSales Invoice[BT] WHERE product_bundle_help != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices lack any product bundle help?",
      "fields": [
        "product_bundle_help"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE product_bundle_help = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices with filled product bundle help info.",
      "fields": [
        "product_bundle_help",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT product_bundle_help, is_pos FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND product_bundle_help != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which return invoices include product bundle help descriptions?",
      "fields": [
        "product_bundle_help",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT product_bundle_help, is_return FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND product_bundle_help != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices from Q4 include product bundle help comments?",
      "fields": [
        "product_bundle_help",
        "posting_date",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT product_bundle_help, customer, posting_date FROM [BT]tabSales Invoice[BT] WHERE product_bundle_help != '' AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get product bundle help content along with customer name.",
      "fields": [
        "product_bundle_help",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT product_bundle_help, customer FROM [BT]tabSales Invoice[BT] WHERE product_bundle_help != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with product bundle help and discount applied?",
      "fields": [
        "product_bundle_help",
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT product_bundle_help, discount_amount FROM [BT]tabSales Invoice[BT] WHERE product_bundle_help != '' AND discount_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where product bundle help was recorded and paid online.",
      "fields": [
        "product_bundle_help",
        "is_online"
      ]
    },
    "output": "frappe.db.sql('''SELECT product_bundle_help, is_online FROM [BT]tabSales Invoice[BT] WHERE product_bundle_help != '' AND is_online = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices that contain product bundle help notes.",
      "fields": [
        "product_bundle_help"
      ]
    },
    "output": "frappe.db.sql('''SELECT product_bundle_help FROM [BT]tabSales Invoice[BT] WHERE product_bundle_help != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices lack any product bundle help?",
      "fields": [
        "product_bundle_help"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE product_bundle_help = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices with filled product bundle help info.",
      "fields": [
        "product_bundle_help",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT product_bundle_help, is_pos FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND product_bundle_help != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which return invoices include product bundle help descriptions?",
      "fields": [
        "product_bundle_help",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT product_bundle_help, is_return FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND product_bundle_help != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices from Q4 include product bundle help comments?",
      "fields": [
        "product_bundle_help",
        "posting_date",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT product_bundle_help, customer, posting_date FROM [BT]tabSales Invoice[BT] WHERE product_bundle_help != '' AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get product bundle help content along with customer name.",
      "fields": [
        "product_bundle_help",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT product_bundle_help, customer FROM [BT]tabSales Invoice[BT] WHERE product_bundle_help != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with product bundle help and discount applied?",
      "fields": [
        "product_bundle_help",
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT product_bundle_help, discount_amount FROM [BT]tabSales Invoice[BT] WHERE product_bundle_help != '' AND discount_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where product bundle help was recorded and paid online.",
      "fields": [
        "product_bundle_help",
        "is_online"
      ]
    },
    "output": "frappe.db.sql('''SELECT product_bundle_help, is_online FROM [BT]tabSales Invoice[BT] WHERE product_bundle_help != '' AND is_online = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Only show product bundle help text if available.",
      "fields": [
        "product_bundle_help"
      ]
    },
    "output": "frappe.db.sql('''SELECT product_bundle_help FROM [BT]tabSales Invoice[BT] WHERE product_bundle_help != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices that have associated timesheet entries.",
      "fields": [
        "time_sheet_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT time_sheet_list FROM [BT]tabSales Invoice[BT] WHERE time_sheet_list != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices were linked with timesheet list?",
      "fields": [
        "time_sheet_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE time_sheet_list != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices that include time sheet list.",
      "fields": [
        "is_pos",
        "time_sheet_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, time_sheet_list FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND time_sheet_list != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices in Q2 that used time sheet list data?",
      "fields": [
        "time_sheet_list",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT time_sheet_list, posting_date FROM [BT]tabSales Invoice[BT] WHERE time_sheet_list != '' AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices where time sheet list was updated.",
      "fields": [
        "time_sheet_list",
        "modified_by"
      ]
    },
    "output": "frappe.db.sql('''SELECT time_sheet_list, modified_by FROM [BT]tabSales Invoice[BT] WHERE time_sheet_list != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with time sheet entries and discounts.",
      "fields": [
        "time_sheet_list",
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT time_sheet_list, discount_amount FROM [BT]tabSales Invoice[BT] WHERE time_sheet_list != '' AND discount_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with time sheet list and grand total over 10,000.",
      "fields": [
        "time_sheet_list",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT time_sheet_list, grand_total FROM [BT]tabSales Invoice[BT] WHERE time_sheet_list != '' AND grand_total > 10000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Customers who submitted invoices with timesheet entries?",
      "fields": [
        "time_sheet_list",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE time_sheet_list != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Only show the timesheet list values if present.",
      "fields": [
        "time_sheet_list"
      ]
    },
    "output": "frappe.db.sql('''SELECT time_sheet_list FROM [BT]tabSales Invoice[BT] WHERE time_sheet_list != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices that contain timesheet entries.",
      "fields": [
        "timesheets"
      ]
    },
    "output": "frappe.db.sql('''SELECT timesheets FROM [BT]tabSales Invoice[BT] WHERE timesheets != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many sales invoices include timesheets?",
      "fields": [
        "timesheets"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE timesheets != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices from July that include timesheets.",
      "fields": [
        "posting_date",
        "timesheets"
      ]
    },
    "output": "frappe.db.sql('''SELECT posting_date, timesheets FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND timesheets != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Return invoices where timesheets are used.",
      "fields": [
        "is_return",
        "timesheets"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, timesheets FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND timesheets != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List customers linked to invoices using timesheets.",
      "fields": [
        "customer",
        "timesheets"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE timesheets != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with timesheets and total above 5000.",
      "fields": [
        "timesheets",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT timesheets, grand_total FROM [BT]tabSales Invoice[BT] WHERE timesheets != '' AND grand_total > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the full list of timesheet values in invoices.",
      "fields": [
        "timesheets"
      ]
    },
    "output": "frappe.db.sql('''SELECT timesheets FROM [BT]tabSales Invoice[BT] WHERE timesheets != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices that include timesheets.",
      "fields": [
        "is_pos",
        "timesheets"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, timesheets FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND timesheets != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices where timesheets were manually added and discount exists.",
      "fields": [
        "timesheets",
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT timesheets, discount_amount FROM [BT]tabSales Invoice[BT] WHERE timesheets != '' AND discount_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with total billing hours greater than 20.",
      "fields": [
        "total_billing_hours"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_billing_hours FROM [BT]tabSales Invoice[BT] WHERE total_billing_hours > 20''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices had no total billing hours?",
      "fields": [
        "total_billing_hours"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE total_billing_hours = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices where total billing hours is under 10.",
      "fields": [
        "is_pos",
        "total_billing_hours"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, total_billing_hours FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND total_billing_hours < 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices with more than 15 billing hours.",
      "fields": [
        "is_return",
        "total_billing_hours"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, total_billing_hours FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND total_billing_hours > 15''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices from today that have product bundle help filled?",
      "fields": [
        "product_bundle_help",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT product_bundle_help, posting_date FROM [BT]tabSales Invoice[BT] WHERE product_bundle_help != \"\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices from today that have product bundle help filled?",
      "fields": [
        "product_bundle_help",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT product_bundle_help, posting_date FROM [BT]tabSales Invoice[BT] WHERE product_bundle_help != \"\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice today includes total billing hours.",
      "fields": [
        "total_billing_hours",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE total_billing_hours != 0 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with total billing hours above 30?",
      "fields": [
        "customer",
        "total_billing_hours"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE total_billing_hours > 30''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices from last month with over 10 billing hours.",
      "fields": [
        "total_billing_hours",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_billing_hours, posting_date FROM [BT]tabSales Invoice[BT] WHERE total_billing_hours > 10 AND posting_date between '[last_month_start, last_month_end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What are the distinct total billing hour values recorded?",
      "fields": [
        "total_billing_hours"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_billing_hours FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where total billing hours is not zero.",
      "fields": [
        "name",
        "total_billing_hours"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,total_billing_hours FROM [BT]tabSales Invoice[BT] WHERE total_billing_hours != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with total billing amount greater than 1000.",
      "fields": [
        "name",
        "total_billing_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_billing_amount FROM [BT]tabSales Invoice[BT] WHERE total_billing_amount > 1000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices had zero total billing amount?",
      "fields": [
        "name",
        "total_billing_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE total_billing_amount = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices where the total billing amount is under 300.",
      "fields": [
        "name",
        "is_pos",
        "total_billing_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, total_billing_amount FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND total_billing_amount < 300''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices with total billing amount more than 1500.",
      "fields": [
        "name",
        "is_return",
        "total_billing_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, total_billing_amount FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND total_billing_amount > 1500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give average total billing hours this year.",
      "fields": [
        "total_billing_hours",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_billing_hours, posting_date FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with total billing amount above 2000?",
      "fields": [
        "total_billing_amount",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE total_billing_amount > 2000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices from this quarter with total billing amount over 800.",
      "fields": [
        "total_billing_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_billing_amount, posting_date FROM [BT]tabSales Invoice[BT] WHERE total_billing_amount > 800 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What are the distinct total billing amounts recorded?",
      "fields": [
        "total_billing_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_billing_amount FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice today includes total billing amount.",
      "fields": [
        "total_billing_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE total_billing_amount != 0 AND posting_date = CURDATE()''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where total billing amount was not zero.",
      "fields": [
        "total_billing_amount",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_billing_amount, name FROM [BT]tabSales Invoice[BT] WHERE total_billing_amount != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices that used the cash bank account 'HDFC Bank - ERPGulf'.",
      "fields": [
        "cash_bank_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT cash_bank_account FROM [BT]tabSales Invoice[BT] WHERE cash_bank_account = 'HDFC Bank - ERPGulf' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices do not specify any cash bank account?",
      "fields": [
        "cash_bank_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE cash_bank_account = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices linked to the cash bank account 'Cash - Main'.",
      "fields": [
        "is_pos",
        "cash_bank_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, cash_bank_account FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND cash_bank_account = 'Cash - Main' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List return invoices where the cash bank account was 'Petty Cash - HO'.",
      "fields": [
        "is_return",
        "cash_bank_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, cash_bank_account FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND cash_bank_account = 'Petty Cash - HO' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers paid via 'SBI - Corporate' cash bank account?",
      "fields": [
        "cash_bank_account",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE cash_bank_account = 'SBI - Corporate' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices from last quarter that used 'Cash - HO'.",
      "fields": [
        "cash_bank_account",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT cash_bank_account, posting_date FROM [BT]tabSales Invoice[BT] WHERE cash_bank_account = 'Cash - HO' AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What are the unique cash bank accounts used in invoices?",
      "fields": [
        "cash_bank_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT cash_bank_account FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give invoices where cash bank account was not empty.",
      "fields": [
        "cash_bank_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT cash_bank_account FROM [BT]tabSales Invoice[BT] WHERE cash_bank_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices that have any payments recorded.",
      "fields": [
        "payments"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices used cash for payment?",
      "fields": [
        "payments",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check the payment breakdown for INV-0020.",
      "fields": [
        "payments"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSales Invoice[BT] WHERE name = 'INV-0020' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices where total payments include any mode with amount over 5000.",
      "fields": [
        "payments",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices include at least one payment entry?",
      "fields": [
        "payments"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve all payment entries from invoice INV-1001.",
      "fields": [
        "name",
        "payments"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSales Invoice[BT] WHERE name = 'INV-1001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with payment remarks containing the word 'advance'.",
      "fields": [
        "payments",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT si.name, sip.remarks FROM [BT]tabSales Invoice[BT] si JOIN [BT]tabSales Invoice Payment[BT] sip ON si.name = sip.parent WHERE sip.remarks LIKE '%advance%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get names of invoices that include both cash and credit card payments.",
      "fields": [
        "payments",
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with base paid amount greater than 2000.",
      "fields": [
        "base_paid_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_paid_amount FROM [BT]tabSales Invoice[BT] WHERE base_paid_amount > 2000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have base paid amount equal to zero?",
      "fields": [
        "base_paid_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE base_paid_amount = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices with any base paid amount.",
      "fields": [
        "is_pos",
        "base_paid_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, base_paid_amount FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND base_paid_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices with base paid amount below 500.",
      "fields": [
        "is_return",
        "base_paid_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, base_paid_amount FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND base_paid_amount < 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers made large payments over 10,000 base amount?",
      "fields": [
        "base_paid_amount",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE base_paid_amount > 10000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices from Q4 with base paid amount over 1000?",
      "fields": [
        "base_paid_amount",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_paid_amount, name FROM [BT]tabSales Invoice[BT] WHERE base_paid_amount > 1000 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get distinct base paid amounts used across invoices.",
      "fields": [
        "base_paid_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_paid_amount FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Average base paid amount in current fiscal year invoices?",
      "fields": [
        "base_paid_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT AVG(base_paid_amount) as avg_base_paid FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with non-zero base paid amount.",
      "fields": [
        "base_paid_amount",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_paid_amount, name FROM [BT]tabSales Invoice[BT] WHERE base_paid_amount != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with paid amount greater than 3000.",
      "fields": [
        "paid_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT paid_amount FROM [BT]tabSales Invoice[BT] WHERE paid_amount > 3000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices were paid zero?",
      "fields": [
        "paid_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE paid_amount = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find POS invoices with any paid amount recorded.",
      "fields": [
        "is_pos",
        "paid_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, paid_amount FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND paid_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Return invoices with paid amount less than 1000.",
      "fields": [
        "is_return",
        "paid_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, paid_amount FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND paid_amount < 1000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers paid more than 8000?",
      "fields": [
        "paid_amount",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE paid_amount > 8000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices from Q2 with paid amount over 1500?",
      "fields": [
        "paid_amount",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT paid_amount, name FROM [BT]tabSales Invoice[BT] WHERE paid_amount > 1500 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all distinct paid amounts.",
      "fields": [
        "paid_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT paid_amount FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices posted today with paid amount?",
      "fields": [
        "paid_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE paid_amount > 0 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the average paid amount this year?",
      "fields": [
        "paid_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT AVG(paid_amount) as avg_paid_amount FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with non-zero paid amount.",
      "fields": [
        "paid_amount",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT paid_amount, name FROM [BT]tabSales Invoice[BT] WHERE paid_amount != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices where the base change amount exceeds 200.",
      "fields": [
        "base_change_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_change_amount FROM [BT]tabSales Invoice[BT] WHERE base_change_amount > 200''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices had zero base change amount?",
      "fields": [
        "base_change_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE base_change_amount = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List POS invoices that had some base change amount.",
      "fields": [
        "is_pos",
        "base_change_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, base_change_amount FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND base_change_amount != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with base change amount less than 100 and customer is Nocturne Pine Corp.",
      "fields": [
        "base_change_amount",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_change_amount, customer FROM [BT]tabSales Invoice[BT] WHERE base_change_amount < 100 AND customer = 'Nocturne Pine Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the average base change amount across all invoices?",
      "fields": [
        "base_change_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_change_amount FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices in Q4 with base change amount above 500?",
      "fields": [
        "base_change_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_change_amount FROM [BT]tabSales Invoice[BT] WHERE base_change_amount > 500 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which return invoices had any base change amount?",
      "fields": [
        "is_return",
        "base_change_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, base_change_amount FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND base_change_amount != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with non-zero base change amount and customer name.",
      "fields": [
        "base_change_amount",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_change_amount, customer FROM [BT]tabSales Invoice[BT] WHERE base_change_amount != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where the change amount is more than 100.",
      "fields": [
        "change_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT change_amount FROM [BT]tabSales Invoice[BT] WHERE change_amount > 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices had no change amount?",
      "fields": [
        "change_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE change_amount = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices with change amount not equal to zero.",
      "fields": [
        "is_return",
        "change_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, change_amount FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND change_amount != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List POS invoices with any change amount.",
      "fields": [
        "is_pos",
        "change_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, change_amount FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND change_amount != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give distinct change amounts from sales invoices.",
      "fields": [
        "change_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT change_amount FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices with change amount under 50 for company Acme Ltd.",
      "fields": [
        "change_amount",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT change_amount, company FROM [BT]tabSales Invoice[BT] WHERE change_amount < 50 AND company = 'Acme Ltd.' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What’s the average change amount for the current month?",
      "fields": [
        "change_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT change_amount FROM [BT]tabSales Invoice[BT] WHERE posting_date >= 'start' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check invoices with customer and change amount not zero.",
      "fields": [
        "change_amount",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT change_amount, customer FROM [BT]tabSales Invoice[BT] WHERE change_amount != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices in Q1 with a change amount greater than 75.",
      "fields": [
        "change_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT change_amount, posting_date FROM [BT]tabSales Invoice[BT] WHERE change_amount > 75 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all invoices where change amount was recorded in a specific account.",
      "fields": [
        "account_for_change_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT account_for_change_amount FROM [BT]tabSales Invoice[BT] WHERE account_for_change_amount != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have a change amount account specified?",
      "fields": [
        "account_for_change_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE account_for_change_amount != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices that use 'Cash - TEST' for change amount accounting.",
      "fields": [
        "account_for_change_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT account_for_change_amount FROM [BT]tabSales Invoice[BT] WHERE account_for_change_amount = 'Cash - TEST' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices with a change amount account used.",
      "fields": [
        "is_pos",
        "account_for_change_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, account_for_change_amount FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND account_for_change_amount != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all return invoices that recorded a change amount account.",
      "fields": [
        "is_return",
        "account_for_change_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, account_for_change_amount FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND account_for_change_amount != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find distinct accounts used to record change amounts.",
      "fields": [
        "account_for_change_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT account_for_change_amount FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers have invoices with a change amount account?",
      "fields": [
        "customer",
        "account_for_change_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE account_for_change_amount != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices using a specific account for change amount in Q2.",
      "fields": [
        "account_for_change_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT account_for_change_amount FROM [BT]tabSales Invoice[BT] WHERE account_for_change_amount != '' AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Do any draft invoices include an account for change amount?",
      "fields": [
        "status",
        "account_for_change_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT account_for_change_amount FROM [BT]tabSales Invoice[BT] WHERE status = 'Draft' AND account_for_change_amount != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all invoices that have automatic advance allocation enabled.",
      "fields": [
        "allocate_advances_automatically"
      ]
    },
    "output": "frappe.db.sql('''SELECT allocate_advances_automatically FROM [BT]tabSales Invoice[BT] WHERE allocate_advances_automatically = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices where advances were not allocated automatically.",
      "fields": [
        "allocate_advances_automatically"
      ]
    },
    "output": "frappe.db.sql('''SELECT allocate_advances_automatically FROM [BT]tabSales Invoice[BT] WHERE allocate_advances_automatically = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices used automatic allocation of advances?",
      "fields": [
        "allocate_advances_automatically"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE allocate_advances_automatically = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there any POS invoices with automatic advance allocation enabled?",
      "fields": [
        "is_pos",
        "allocate_advances_automatically"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND allocate_advances_automatically = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with advance allocation turned on and payment already made.",
      "fields": [
        "allocate_advances_automatically",
        "paid_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE allocate_advances_automatically = 1 AND paid_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give total count of invoices with advance allocation off.",
      "fields": [
        "allocate_advances_automatically"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE allocate_advances_automatically = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export names of invoices with advance allocation turned on.",
      "fields": [
        "allocate_advances_automatically",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE allocate_advances_automatically = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get a list of invoices with auto allocation and company is Qatcom.",
      "fields": [
        "allocate_advances_automatically",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE allocate_advances_automatically = 1 AND company = 'Qatcom' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where only allocated payments were included.",
      "fields": [
        "only_include_allocated_payments"
      ]
    },
    "output": "frappe.db.sql('''SELECT only_include_allocated_payments FROM [BT]tabSales Invoice[BT] WHERE only_include_allocated_payments = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices that excluded unallocated payments.",
      "fields": [
        "only_include_allocated_payments"
      ]
    },
    "output": "frappe.db.sql('''SELECT only_include_allocated_payments FROM [BT]tabSales Invoice[BT] WHERE only_include_allocated_payments = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices don't include only allocated payments?",
      "fields": [
        "only_include_allocated_payments"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE only_include_allocated_payments = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices from last month with only allocated payments.",
      "fields": [
        "only_include_allocated_payments",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE only_include_allocated_payments = 1 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get names of invoices that included only allocated payments.",
      "fields": [
        "only_include_allocated_payments",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE only_include_allocated_payments = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers have invoices that included only allocated payments?",
      "fields": [
        "only_include_allocated_payments",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE only_include_allocated_payments = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find POS invoices using only allocated payments.",
      "fields": [
        "only_include_allocated_payments",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND only_include_allocated_payments = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give return invoices that don’t use only allocated payments.",
      "fields": [
        "only_include_allocated_payments",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND only_include_allocated_payments = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export invoices that did not include only allocated payments.",
      "fields": [
        "only_include_allocated_payments"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE only_include_allocated_payments = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where advances were fetched.",
      "fields": [
        "get_advances"
      ]
    },
    "output": "frappe.db.sql('''SELECT get_advances FROM [BT]tabSales Invoice[BT] WHERE get_advances = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have not fetched any advances?",
      "fields": [
        "get_advances"
      ]
    },
    "output": "frappe.db.sql('''SELECT get_advances FROM [BT]tabSales Invoice[BT] WHERE get_advances = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have advances pulled in?",
      "fields": [
        "get_advances"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE get_advances = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show return invoices that fetched advances.",
      "fields": [
        "get_advances",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND get_advances = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any POS invoices fetched advances.",
      "fields": [
        "get_advances",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND get_advances = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export invoices with fetched advances and customer data.",
      "fields": [
        "get_advances",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer FROM [BT]tabSales Invoice[BT] WHERE get_advances = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give invoices with fetched advances and grand total above 1000.",
      "fields": [
        "get_advances",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total FROM [BT]tabSales Invoice[BT] WHERE get_advances = 1 AND grand_total > 1000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which companies had invoices with fetched advances?",
      "fields": [
        "get_advances",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT company FROM [BT]tabSales Invoice[BT] WHERE get_advances = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with advances fetched and status as Paid.",
      "fields": [
        "get_advances",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status FROM [BT]tabSales Invoice[BT] WHERE get_advances = 1 AND status = 'Paid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices that have advance payments linked.",
      "fields": [
        "advances"
      ]
    },
    "output": "frappe.db.sql('''SELECT advances FROM [BT]tabSales Invoice[BT] WHERE advances != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices don’t have any advances?",
      "fields": [
        "advances"
      ]
    },
    "output": "frappe.db.sql('''SELECT advances FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give invoice numbers and their advances if available.",
      "fields": [
        "advances",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, advances FROM [BT]tabSales Invoice[BT] WHERE advances != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all return invoices that had advances linked.",
      "fields": [
        "advances",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, advances FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND advances != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have any advances attached?",
      "fields": [
        "advances"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE advances IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export invoices with advances and customer info.",
      "fields": [
        "advances",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, advances FROM [BT]tabSales Invoice[BT] WHERE advances != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices with advances and status marked as Paid.",
      "fields": [
        "advances",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, advances FROM [BT]tabSales Invoice[BT] WHERE advances != 'None' AND status = 'Paid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers have invoices that include advances?",
      "fields": [
        "advances",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE advances != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give invoices with more than 2 advance entries.",
      "fields": [
        "advances",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, advances FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with advances and their grand total.",
      "fields": [
        "advances",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total FROM [BT]tabSales Invoice[BT] WHERE advances != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all invoices with a write-off amount above 200.",
      "fields": [
        "write_off_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT write_off_amount FROM [BT]tabSales Invoice[BT] WHERE write_off_amount > 200''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have zero write-off amount?",
      "fields": [
        "write_off_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE write_off_amount = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with non-zero write-off amounts for customer John Doe.",
      "fields": [
        "write_off_amount",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, write_off_amount FROM [BT]tabSales Invoice[BT] WHERE write_off_amount != 0 AND customer = 'John Doe' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices where write-off amount was manually added.",
      "fields": [
        "write_off_amount",
        "write_off_outstanding_amount_automatically"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, write_off_amount FROM [BT]tabSales Invoice[BT] WHERE write_off_outstanding_amount_automatically = 0 AND write_off_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check invoices that have both advances and write-offs.",
      "fields": [
        "advances",
        "write_off_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE advances != '[]' AND write_off_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there any POS invoices with write-off amounts?",
      "fields": [
        "is_pos",
        "write_off_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND write_off_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Average write-off amount for returned invoices?",
      "fields": [
        "write_off_amount",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT write_off_amount FROM [BT]tabSales Invoice[BT] WHERE is_return = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with write-offs greater than 50 and less than 200.",
      "fields": [
        "write_off_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE write_off_amount between '[50, 200]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with base write-off amount above 100.",
      "fields": [
        "base_write_off_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_write_off_amount FROM [BT]tabSales Invoice[BT] WHERE base_write_off_amount > 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices with no base write-off amount.",
      "fields": [
        "base_write_off_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE base_write_off_amount = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices where base write-off amount is between 50 and 150.",
      "fields": [
        "base_write_off_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_write_off_amount FROM [BT]tabSales Invoice[BT] WHERE base_write_off_amount between '[50, 150]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List return invoices with base write-off amount more than 200.",
      "fields": [
        "is_return",
        "base_write_off_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, base_write_off_amount FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND base_write_off_amount > 200''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with both base and normal write-off amount over 50.",
      "fields": [
        "base_write_off_amount",
        "write_off_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE base_write_off_amount > 50 AND write_off_amount > 50''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices for company 'HTS Qatar' with base write-off above 75.",
      "fields": [
        "base_write_off_amount",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, base_write_off_amount FROM [BT]tabSales Invoice[BT] WHERE company = 'HTS Qatar' AND base_write_off_amount > 75''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Is there any POS invoice with base write-off amount?",
      "fields": [
        "is_pos",
        "base_write_off_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND base_write_off_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Average base write-off amount this quarter?",
      "fields": [
        "base_write_off_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_write_off_amount FROM [BT]tabSales Invoice[BT] WHERE posting_date >= 'q_start' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get distinct base write-off values used in invoices.",
      "fields": [
        "base_write_off_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT base_write_off_amount FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices created today with any base change amount.",
      "fields": [
        "base_change_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE base_change_amount != 0 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get distinct base change amounts used this year.",
      "fields": [
        "base_change_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT DISTINCT base_change_amount FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices created today with change amount present?",
      "fields": [
        "change_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE change_amount != 0 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices from today where change amount was tracked to an account?",
      "fields": [
        "posting_date",
        "account_for_change_amount"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE account_for_change_amount != \"\" AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoices created today use only allocated payments.",
      "fields": [
        "only_include_allocated_payments",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE only_include_allocated_payments = 1 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices created today where advances were fetched.",
      "fields": [
        "get_advances",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE get_advances = 1 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many companies applied write-offs last year?",
      "fields": [
        "write_off_amount",
        "posting_date",
        "company"
      ]
    },
    "output": "frappe.db.sql('SELECT DISTINCT company FROM [BT]tabSales Invoice[BT] WHERE write_off_amount > 0 AND YEAR(posting_date) = YEAR(CURDATE()) - 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where write off outstanding amount automatically is enabled.",
      "fields": [
        "write_off_outstanding_amount_automatically"
      ]
    },
    "output": "frappe.db.sql('''SELECT write_off_outstanding_amount_automatically FROM [BT]tabSales Invoice[BT] WHERE write_off_outstanding_amount_automatically = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have automatic write off disabled?",
      "fields": [
        "write_off_outstanding_amount_automatically"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE write_off_outstanding_amount_automatically = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get names of invoices with auto write off enabled.",
      "fields": [
        "name",
        "write_off_outstanding_amount_automatically"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE write_off_outstanding_amount_automatically = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List return invoices where auto write off is applied.",
      "fields": [
        "is_return",
        "write_off_outstanding_amount_automatically"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND write_off_outstanding_amount_automatically = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoices auto write off is applied for a POS sale.",
      "fields": [
        "is_pos",
        "write_off_outstanding_amount_automatically"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND write_off_outstanding_amount_automatically = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find distinct values used in write off auto mode.",
      "fields": [
        "write_off_outstanding_amount_automatically"
      ]
    },
    "output": "frappe.db.sql('''SELECT write_off_outstanding_amount_automatically FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List customers where invoices had write off auto mode.",
      "fields": [
        "customer",
        "write_off_outstanding_amount_automatically"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE write_off_outstanding_amount_automatically = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where auto write off is not used.",
      "fields": [
        "write_off_outstanding_amount_automatically",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE write_off_outstanding_amount_automatically = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Total invoices with write off auto mode set either way?",
      "fields": [
        "write_off_outstanding_amount_automatically"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices were written off using the account 'Bad Debts'?",
      "fields": [
        "write_off_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT write_off_account FROM [BT]tabSales Invoice[BT] WHERE write_off_account = 'Bad Debts' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices use a write-off account named 'Adjustments'?",
      "fields": [
        "write_off_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE write_off_account = 'Adjustments' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with write-off account set as 'Write Off Charges'.",
      "fields": [
        "write_off_account",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT write_off_account, name FROM [BT]tabSales Invoice[BT] WHERE write_off_account = 'Write Off Charges' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find all return invoices using 'Losses' as write-off account.",
      "fields": [
        "write_off_account",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT write_off_account, is_return FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND write_off_account = 'Losses' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where write-off account is not blank.",
      "fields": [
        "write_off_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT write_off_account FROM [BT]tabSales Invoice[BT] WHERE write_off_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices that used 'Misc Adjustments' as write-off account.",
      "fields": [
        "write_off_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE write_off_account = 'Misc Adjustments' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show return POS invoices using the write-off account 'Loss Reserve'.",
      "fields": [
        "is_return",
        "is_pos",
        "write_off_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, is_pos, write_off_account FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND is_pos = 1 AND write_off_account = 'Loss Reserve' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which write-off accounts were used in January invoices?",
      "fields": [
        "write_off_account",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT write_off_account FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with an auto repeat set.",
      "fields": [
        "name",
        "auto_repeat"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, auto_repeat FROM [BT]tabSales Invoice[BT] WHERE auto_repeat != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices with auto repeat.",
      "fields": [
        "auto_repeat"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE auto_repeat != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice has a specific auto repeat, e.g., 'AUTOREP-0001'.",
      "fields": [
        "auto_repeat"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE auto_repeat = 'AUTOREP-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the value of auto repeat for a specific invoice.",
      "fields": [
        "auto_repeat"
      ]
    },
    "output": "frappe.db.sql('''SELECT auto_repeat FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices with their auto repeat and customer.",
      "fields": [
        "name",
        "auto_repeat",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, auto_repeat, customer FROM [BT]tabSales Invoice[BT] WHERE auto_repeat != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with a AUTOREP-0001 auto repeat and a Wanderflux customer.",
      "fields": [
        "name",
        "auto_repeat",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, auto_repeat, customer FROM [BT]tabSales Invoice[BT] WHERE auto_repeat = 'AUTOREP-0001' AND customer = 'Wanderflux Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with auto repeat and their to date.",
      "fields": [
        "name",
        "auto_repeat",
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, auto_repeat, to_date FROM [BT]tabSales Invoice[BT] WHERE auto_repeat != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if a specific invoice has a specific auto repeat.",
      "fields": [
        "auto_repeat"
      ]
    },
    "output": "frappe.db.sql('''SELECT auto_repeat FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with a specific auto repeat and their from date.",
      "fields": [
        "name",
        "auto_repeat",
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, auto_repeat, from_date FROM [BT]tabSales Invoice[BT] WHERE auto_repeat = 'AUTOREP-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show a single invoice document with an auto repeat.",
      "fields": [
        "name",
        "auto_repeat"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, auto_repeat FROM [BT]tabSales Invoice[BT] WHERE auto_repeat != '' AND name LIKE '%SINV%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get distinct write-off accounts used in paid invoices.",
      "fields": [
        "write_off_account",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT write_off_account FROM [BT]tabSales Invoice[BT] WHERE status = 'Paid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices linked to the write-off cost center named 'Main Operations'.",
      "fields": [
        "write_off_cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT write_off_cost_center FROM [BT]tabSales Invoice[BT] WHERE write_off_cost_center = 'Main Operations' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices where the write-off cost center is missing.",
      "fields": [
        "write_off_cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT write_off_cost_center FROM [BT]tabSales Invoice[BT] WHERE write_off_cost_center = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices used the Finance write-off cost center?",
      "fields": [
        "write_off_cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE write_off_cost_center = 'Finance' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with write-off cost center set to 'General'.",
      "fields": [
        "write_off_cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT write_off_cost_center FROM [BT]tabSales Invoice[BT] WHERE write_off_cost_center = 'General' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get distinct write-off cost centers from all invoices.",
      "fields": [
        "write_off_cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT write_off_cost_center FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have write-off cost center as 'Corporate Overhead'?",
      "fields": [
        "write_off_cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT write_off_cost_center FROM [BT]tabSales Invoice[BT] WHERE write_off_cost_center = 'Corporate Overhead' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with write-off cost center not equal to 'Admin'.",
      "fields": [
        "write_off_cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT write_off_cost_center FROM [BT]tabSales Invoice[BT] WHERE write_off_cost_center != 'Admin' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What are the most used write-off cost centers this year?",
      "fields": [
        "write_off_cost_center",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT write_off_cost_center FROM [BT]tabSales Invoice[BT] WHERE posting_date >= 'start' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices grouped by write-off cost center.",
      "fields": [
        "write_off_cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT write_off_cost_center FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices where loyalty points were redeemed.",
      "fields": [
        "loyalty_points_redemption"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_points_redemption FROM [BT]tabSales Invoice[BT] WHERE loyalty_points_redemption = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices did not involve loyalty point redemption?",
      "fields": [
        "loyalty_points_redemption"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_points_redemption FROM [BT]tabSales Invoice[BT] WHERE loyalty_points_redemption = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find POS invoices that applied loyalty point redemption.",
      "fields": [
        "is_pos",
        "loyalty_points_redemption"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, loyalty_points_redemption FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND loyalty_points_redemption = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List customer names where loyalty points were redeemed.",
      "fields": [
        "loyalty_points_redemption",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE loyalty_points_redemption = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoice IDs that applied loyalty redemption and have grand total over 1000.",
      "fields": [
        "loyalty_points_redemption",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE loyalty_points_redemption = 1 AND grand_total > 1000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which companies have used loyalty point redemption?",
      "fields": [
        "loyalty_points_redemption",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT company FROM [BT]tabSales Invoice[BT] WHERE loyalty_points_redemption = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Do any draft invoices apply loyalty points?",
      "fields": [
        "loyalty_points_redemption",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE loyalty_points_redemption = 1 AND status = 'Draft' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List return invoices with loyalty point redemptions.",
      "fields": [
        "loyalty_points_redemption",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND loyalty_points_redemption = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices where loyalty points used were more than 50.",
      "fields": [
        "loyalty_points"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_points FROM [BT]tabSales Invoice[BT] WHERE loyalty_points > 50''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices had zero loyalty points redeemed?",
      "fields": [
        "loyalty_points"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE loyalty_points = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all return invoices with loyalty points more than 100.",
      "fields": [
        "is_return",
        "loyalty_points"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, loyalty_points FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND loyalty_points > 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers redeemed over 200 loyalty points?",
      "fields": [
        "customer",
        "loyalty_points"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE loyalty_points > 200''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Fetch invoices using loyalty points and paid via cash.",
      "fields": [
        "loyalty_points",
        "mode_of_payment"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_points, mode_of_payment FROM [BT]tabSales Invoice[BT] WHERE loyalty_points > 0 AND mode_of_payment = 'Cash' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any POS invoices with loyalty points used?",
      "fields": [
        "loyalty_points",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_points FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND loyalty_points > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices in Q2 that used loyalty points.",
      "fields": [
        "loyalty_points",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_points, posting_date FROM [BT]tabSales Invoice[BT] WHERE loyalty_points > 0 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices had loyalty points but are not finalized yet?",
      "fields": [
        "loyalty_points",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_points, status FROM [BT]tabSales Invoice[BT] WHERE loyalty_points > 0 AND status != 'Paid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with loyalty amount over 200.",
      "fields": [
        "loyalty_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_amount FROM [BT]tabSales Invoice[BT] WHERE loyalty_amount > 200''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices used no loyalty amount?",
      "fields": [
        "loyalty_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE loyalty_amount = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices where loyalty amount was less than 100.",
      "fields": [
        "is_pos",
        "loyalty_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, loyalty_amount FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND loyalty_amount < 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find return invoices with loyalty amount above 300.",
      "fields": [
        "is_return",
        "loyalty_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, loyalty_amount FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND loyalty_amount > 300''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers received loyalty amount more than 500?",
      "fields": [
        "customer",
        "loyalty_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE loyalty_amount > 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices in Q4 that used loyalty amount above 100?",
      "fields": [
        "posting_date",
        "loyalty_amount",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, loyalty_amount, posting_date FROM [BT]tabSales Invoice[BT] WHERE loyalty_amount > 100 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all unique loyalty amount values used.",
      "fields": [
        "loyalty_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_amount FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any customer used loyalty points on today's invoices?",
      "fields": [
        "loyalty_points_redemption",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE loyalty_points_redemption = 1 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices this year included loyalty redemptions?",
      "fields": [
        "loyalty_points_redemption",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE loyalty_points_redemption = 1 AND YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export all loyalty points transactions this year.",
      "fields": [
        "loyalty_points",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('SELECT name, loyalty_points, posting_date FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE()) AND loyalty_points > 0', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices created today that include loyalty amount?",
      "fields": [
        "loyalty_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE loyalty_amount != 0 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What's the average loyalty amount for this year?",
      "fields": [
        "loyalty_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT AVG(loyalty_amount) as avg_loyalty FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give invoices where loyalty amount is not zero.",
      "fields": [
        "loyalty_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_amount FROM [BT]tabSales Invoice[BT] WHERE loyalty_amount != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices under the Silver loyalty program.",
      "fields": [
        "loyalty_program"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_program FROM [BT]tabSales Invoice[BT] WHERE loyalty_program = 'Silver' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices where no loyalty program was assigned.",
      "fields": [
        "loyalty_program"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_program FROM [BT]tabSales Invoice[BT] WHERE loyalty_program = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers belong to the Gold loyalty program?",
      "fields": [
        "loyalty_program",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE loyalty_program = 'Gold' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there return invoices with any loyalty program?",
      "fields": [
        "loyalty_program",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_program, is_return FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND loyalty_program != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices in Q4 under any loyalty program?",
      "fields": [
        "loyalty_program",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_program, posting_date FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND loyalty_program != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices had loyalty program changed?",
      "fields": [
        "loyalty_program",
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_program, amended_from FROM [BT]tabSales Invoice[BT] WHERE amended_from != '' AND loyalty_program != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices not linked to any loyalty program this quarter.",
      "fields": [
        "loyalty_program",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_program, posting_date FROM [BT]tabSales Invoice[BT] WHERE posting_date >= 'q_start' AND loyalty_program = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List distinct loyalty programs used.",
      "fields": [
        "loyalty_program"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_program FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices linked to the redemption account 'Loyalty Redemption - ERPG'.",
      "fields": [
        "loyalty_redemption_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_redemption_account FROM [BT]tabSales Invoice[BT] WHERE loyalty_redemption_account = 'Loyalty Redemption - ERPG' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all POS invoices with the loyalty redemption account set.",
      "fields": [
        "is_pos",
        "loyalty_redemption_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, loyalty_redemption_account FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND loyalty_redemption_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices used the loyalty redemption account 'Loyalty - GCC'?",
      "fields": [
        "loyalty_redemption_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE loyalty_redemption_account = 'Loyalty - GCC' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find all return invoices that used the 'Loyalty Adjust - ERPG' account.",
      "fields": [
        "name",
        "is_return",
        "loyalty_redemption_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_return, loyalty_redemption_account FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND loyalty_redemption_account = 'Loyalty Adjust - ERPG' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices from last month used a loyalty redemption account?",
      "fields": [
        "loyalty_redemption_account",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, loyalty_redemption_account, posting_date FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND loyalty_redemption_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all invoices where loyalty redemption account is blank.",
      "fields": [
        "loyalty_redemption_account",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, loyalty_redemption_account FROM [BT]tabSales Invoice[BT] WHERE loyalty_redemption_account = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List loyalty redemption accounts used in Q4.",
      "fields": [
        "loyalty_redemption_account",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_redemption_account FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all distinct loyalty redemption accounts applied on invoices with status 'Paid'.",
      "fields": [
        "status",
        "loyalty_redemption_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_redemption_account FROM [BT]tabSales Invoice[BT] WHERE status = 'Paid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices that used the loyalty redemption cost center 'South Zone'.",
      "fields": [
        "loyalty_redemption_cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_redemption_cost_center FROM [BT]tabSales Invoice[BT] WHERE loyalty_redemption_cost_center = 'South Zone' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count how many loyalty redemptions were tracked under cost center 'Retail Division'.",
      "fields": [
        "loyalty_redemption_cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE loyalty_redemption_cost_center = 'Retail Division' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get distinct loyalty redemption cost centers in July.",
      "fields": [
        "loyalty_redemption_cost_center",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_redemption_cost_center FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with loyalty redemptions allocated under any cost center this quarter.",
      "fields": [
        "loyalty_redemption_cost_center",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_redemption_cost_center FROM [BT]tabSales Invoice[BT] WHERE loyalty_redemption_cost_center != '' AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with loyalty redemption cost center set as 'Main Branch'.",
      "fields": [
        "loyalty_redemption_cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_redemption_cost_center FROM [BT]tabSales Invoice[BT] WHERE loyalty_redemption_cost_center = 'Main Branch' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices used 'Retail North' for loyalty redemption?",
      "fields": [
        "loyalty_redemption_cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE loyalty_redemption_cost_center = 'Retail North' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Fetch invoices where loyalty redemption was processed through any cost center.",
      "fields": [
        "loyalty_redemption_cost_center",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_redemption_cost_center, name FROM [BT]tabSales Invoice[BT] WHERE loyalty_redemption_cost_center != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get distinct loyalty redemption cost centers used in Q2.",
      "fields": [
        "loyalty_redemption_cost_center",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_redemption_cost_center FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices using loyalty cost centers that are not equal to 'General'.",
      "fields": [
        "loyalty_redemption_cost_center"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_redemption_cost_center FROM [BT]tabSales Invoice[BT] WHERE loyalty_redemption_cost_center != 'General' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where address and contact details were updated.",
      "fields": [
        "address_and_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT address_and_contact FROM [BT]tabSales Invoice[BT] WHERE address_and_contact = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices include address and contact section?",
      "fields": [
        "address_and_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE address_and_contact = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Fetch return invoices that have address and contact info.",
      "fields": [
        "is_return",
        "address_and_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, address_and_contact FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND address_and_contact = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers have invoices with address and contact added?",
      "fields": [
        "customer",
        "address_and_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE address_and_contact = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices with address and contact attached.",
      "fields": [
        "is_pos",
        "address_and_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, address_and_contact FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND address_and_contact = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there any invoices with contact section missing?",
      "fields": [
        "address_and_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT address_and_contact FROM [BT]tabSales Invoice[BT] WHERE address_and_contact = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export invoices including address and contact section.",
      "fields": [
        "address_and_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT address_and_contact FROM [BT]tabSales Invoice[BT] WHERE address_and_contact = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with address and contact from Q4?",
      "fields": [
        "address_and_contact",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT address_and_contact, posting_date FROM [BT]tabSales Invoice[BT] WHERE address_and_contact = 1 AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices were billed to the address 'Villa 23, Doha'?",
      "fields": [
        "customer_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer_address, name FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have a registered customer address?",
      "fields": [
        "customer_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE customer_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List POS invoices where a customer address was recorded.",
      "fields": [
        "is_pos",
        "customer_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, customer_address FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND customer_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with customer address that start with 'Street'.",
      "fields": [
        "customer_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_address FROM [BT]tabSales Invoice[BT] WHERE customer_address LIKE 'Street%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Return invoices with a specific customer address mentioned.",
      "fields": [
        "is_return",
        "customer_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, customer_address FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND customer_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices sent to 'Al Sadd, Doha'?",
      "fields": [
        "customer_address",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with no customer address recorded?",
      "fields": [
        "customer_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer_address, name FROM [BT]tabSales Invoice[BT] WHERE customer_address = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where contact person is mentioned.",
      "fields": [
        "contact_person",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT contact_person, name FROM [BT]tabSales Invoice[BT] WHERE contact_person != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices are linked to the contact person named 'Ahmed Saeed'?",
      "fields": [
        "contact_person"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE contact_person = 'Ahmed Saeed' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find POS invoices with a contact person recorded.",
      "fields": [
        "is_pos",
        "contact_person"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, contact_person FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND contact_person != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers have contact persons listed on their invoices?",
      "fields": [
        "customer",
        "contact_person"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE contact_person != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export invoices with contact person info from Q1.",
      "fields": [
        "contact_person",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, contact_person FROM [BT]tabSales Invoice[BT] WHERE contact_person != '' AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get return invoices with contact person details.",
      "fields": [
        "is_return",
        "contact_person"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, contact_person FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND contact_person != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices from this month where rounded total is not zero.",
      "fields": [
        "rounded_total",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, rounded_total, posting_date FROM [BT]tabSales Invoice[BT] WHERE rounded_total != 0 AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices created this month auto allocated advances?",
      "fields": [
        "allocate_advances_automatically",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE allocate_advances_automatically = 1 AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoices from last week used automatic advance allocation.",
      "fields": [
        "allocate_advances_automatically",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE allocate_advances_automatically = 1 AND posting_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE()''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with write-offs done this month.",
      "fields": [
        "write_off_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE write_off_amount > 0 AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices posted this month with automatic write off enabled?",
      "fields": [
        "posting_date",
        "write_off_outstanding_amount_automatically"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE write_off_outstanding_amount_automatically = 1 AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Do any invoices from this month include a write-off account?",
      "fields": [
        "write_off_account",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE write_off_account != '' AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoices this month used the Operations cost center for write-offs.",
      "fields": [
        "write_off_cost_center",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE write_off_cost_center = 'Operations' AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Average loyalty points used in this month’s invoices?",
      "fields": [
        "loyalty_points",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT AVG(loyalty_points) AS avg_loyalty_points FROM [BT]tabSales Invoice[BT] WHERE MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Fetch invoices with Platinum loyalty program this month.",
      "fields": [
        "loyalty_program",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_program, posting_date FROM [BT]tabSales Invoice[BT] WHERE loyalty_program = 'Platinum' AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices this month with customer address filled?",
      "fields": [
        "customer_address",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_address FROM [BT]tabSales Invoice[BT] WHERE customer_address != '' AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show me invoices where no contact person was filled.",
      "fields": [
        "contact_person"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, contact_person FROM [BT]tabSales Invoice[BT] WHERE contact_person = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices are tied to contact persons starting with 'Mohamed'?",
      "fields": [
        "contact_person"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, contact_person FROM [BT]tabSales Invoice[BT] WHERE contact_person LIKE 'Mohamed%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Give me all unique contact persons who appear in invoices.",
      "fields": [
        "contact_person"
      ]
    },
    "output": "frappe.db.sql('''SELECT contact_person FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have address displays starting with 'P.O. Box'?",
      "fields": [
        "address_display"
      ]
    },
    "output": "frappe.db.sql('''SELECT address_display FROM [BT]tabSales Invoice[BT] WHERE address_display LIKE 'P.O. Box%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with missing address display info.",
      "fields": [
        "address_display"
      ]
    },
    "output": "frappe.db.sql('''SELECT address_display FROM [BT]tabSales Invoice[BT] WHERE address_display = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many POS invoices contain address display data?",
      "fields": [
        "address_display"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND address_display != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices sent to addresses in Al Wakrah?",
      "fields": [
        "address_display"
      ]
    },
    "output": "frappe.db.sql('''SELECT address_display FROM [BT]tabSales Invoice[BT] WHERE address_display LIKE '%Al Wakrah%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Return invoices that include address display text.",
      "fields": [
        "address_display"
      ]
    },
    "output": "frappe.db.sql('''SELECT address_display FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND address_display != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export address display details from Q2 invoices.",
      "fields": [
        "address_display"
      ]
    },
    "output": "frappe.db.sql('''SELECT address_display FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoices include 'Lusail' in their address display.",
      "fields": [
        "address_display"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE address_display LIKE '%Lusail%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List customers who received invoices with address displays starting with 'Block A'.",
      "fields": [
        "address_display"
      ]
    },
    "output": "frappe.db.sql('''SELECT address_display FROM [BT]tabSales Invoice[BT] WHERE address_display LIKE 'Block A%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices show contact display info containing 'Ali Hussain'?",
      "fields": [
        "contact_display",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT contact_display, name FROM [BT]tabSales Invoice[BT] WHERE contact_display LIKE '%Ali Hussain%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show return invoices where contact display was recorded.",
      "fields": [
        "is_return",
        "contact_display"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, contact_display FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND contact_display != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Fetch POS invoices with non-empty contact display.",
      "fields": [
        "is_pos",
        "contact_display",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT contact_display, name FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND contact_display != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have no contact display?",
      "fields": [
        "contact_display"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE contact_display = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices sent with contact display starting 'Mr. Saad'?",
      "fields": [
        "contact_display",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, contact_display FROM [BT]tabSales Invoice[BT] WHERE contact_display LIKE 'Mr. Saad%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export invoices with contact display showing mobile numbers.",
      "fields": [
        "contact_display",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, contact_display FROM [BT]tabSales Invoice[BT] WHERE contact_display LIKE '%+974%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check for invoices that included contact display and were unpaid.",
      "fields": [
        "contact_display",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT contact_display, status FROM [BT]tabSales Invoice[BT] WHERE contact_display != '' AND status != 'Paid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with contact display updates?",
      "fields": [
        "contact_display",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE contact_display != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List Q3 invoices that had contact display included.",
      "fields": [
        "posting_date",
        "contact_display",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT contact_display, name FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND contact_display != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have contact emails ending with '@gmail.com'?",
      "fields": [
        "contact_email",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT contact_email, name FROM [BT]tabSales Invoice[BT] WHERE contact_email LIKE '%@gmail.com' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices with a contact email provided.",
      "fields": [
        "is_pos",
        "contact_email"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, contact_email FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND contact_email != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have no contact email listed?",
      "fields": [
        "contact_email"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE contact_email = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Return invoices with non-empty contact email fields.",
      "fields": [
        "is_return",
        "contact_email"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, contact_email FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND contact_email != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export contact email addresses from Q1 invoices.",
      "fields": [
        "posting_date",
        "contact_email",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, contact_email FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with contact emails including the domain 'htsqatar.com'?",
      "fields": [
        "contact_email",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, contact_email FROM [BT]tabSales Invoice[BT] WHERE contact_email LIKE '%@htsqatar.com' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check unpaid invoices that contain contact email details.",
      "fields": [
        "contact_email",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT contact_email, status FROM [BT]tabSales Invoice[BT] WHERE contact_email != '' AND status != 'Paid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with contact email values updated?",
      "fields": [
        "contact_email",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE contact_email != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Do Q3 invoices include contact email addresses with '.qa' domain?",
      "fields": [
        "posting_date",
        "contact_email",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT contact_email, name FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND contact_email LIKE '%.qa' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices associated with the Qatar territory.",
      "fields": [
        "territory",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT territory, name FROM [BT]tabSales Invoice[BT] WHERE territory = 'Qatar' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices are from the 'Doha' territory?",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE territory = 'Doha' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices where the territory name starts with 'West'.",
      "fields": [
        "territory",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT territory, name FROM [BT]tabSales Invoice[BT] WHERE territory LIKE 'West%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices that mention the territory.",
      "fields": [
        "is_pos",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, territory FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND territory != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices from territories that include 'Industrial' in their name?",
      "fields": [
        "territory",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT territory, name FROM [BT]tabSales Invoice[BT] WHERE territory LIKE '%Industrial%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export all distinct territories used in invoices.",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT territory FROM [BT]tabSales Invoice[BT] WHERE territory != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices created in Q2 are linked to any territory?",
      "fields": [
        "posting_date",
        "territory",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT territory, name FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND territory != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Do any return invoices have territory data?",
      "fields": [
        "is_return",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, territory FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND territory != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices are missing a territory?",
      "fields": [
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE territory = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices were shipped to 'ADN Shipping Center'?",
      "fields": [
        "shipping_address_name",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT shipping_address_name, name FROM [BT]tabSales Invoice[BT] WHERE shipping_address_name = 'ADN Shipping Center' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with shipping address names that start with 'Ship-'",
      "fields": [
        "name",
        "shipping_address_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, shipping_address_name FROM [BT]tabSales Invoice[BT] WHERE shipping_address_name LIKE 'Ship-%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices were shipped to any address?",
      "fields": [
        "shipping_address_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE shipping_address_name != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get Q1 invoices with a shipping address name recorded.",
      "fields": [
        "shipping_address_name",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT shipping_address_name, name FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND shipping_address_name != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List POS invoices with shipping address provided.",
      "fields": [
        "is_pos",
        "shipping_address_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, shipping_address_name FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND shipping_address_name != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices are missing the shipping address name?",
      "fields": [
        "shipping_address_name",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT shipping_address_name, name FROM [BT]tabSales Invoice[BT] WHERE shipping_address_name = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with shipping address containing 'Doha' in name.",
      "fields": [
        "name",
        "shipping_address_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, shipping_address_name FROM [BT]tabSales Invoice[BT] WHERE shipping_address_name LIKE '%Doha%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export all unique shipping address names used this year.",
      "fields": [
        "shipping_address_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT shipping_address_name FROM [BT]tabSales Invoice[BT] WHERE posting_date >= 'start' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Were any return invoices shipped to a named address?",
      "fields": [
        "is_return",
        "shipping_address_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, shipping_address_name FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND shipping_address_name != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Q4 invoices with specific shipping address names?",
      "fields": [
        "shipping_address_name",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT shipping_address_name, name FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND shipping_address_name != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all invoices shipped to address ID SHIP-0001.",
      "fields": [
        "shipping_address",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT shipping_address, name FROM [BT]tabSales Invoice[BT] WHERE shipping_address = 'SHIP-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices where shipping address starts with 'SHIP-'?",
      "fields": [
        "name",
        "shipping_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, shipping_address FROM [BT]tabSales Invoice[BT] WHERE shipping_address LIKE 'SHIP-%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have no shipping address set?",
      "fields": [
        "shipping_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE shipping_address = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with valid shipping addresses posted in June.",
      "fields": [
        "posting_date",
        "shipping_address",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT shipping_address, name FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND shipping_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "POS invoices with shipping addresses filled?",
      "fields": [
        "is_pos",
        "shipping_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_pos, shipping_address FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND shipping_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Return invoices that include shipping address?",
      "fields": [
        "is_return",
        "shipping_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, shipping_address FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND shipping_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers received shipments to SHIP-3002?",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE shipping_address = 'SHIP-3002' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices with shipping address containing 'Doha'.",
      "fields": [
        "name",
        "shipping_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, shipping_address FROM [BT]tabSales Invoice[BT] WHERE shipping_address LIKE '%Doha%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List unique shipping addresses used in Q2.",
      "fields": [
        "shipping_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT shipping_address FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Were any unpaid invoices shipped?",
      "fields": [
        "shipping_address",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT shipping_address, status FROM [BT]tabSales Invoice[BT] WHERE status != 'Paid' AND shipping_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices used dispatch address name DIS-ADDR-0003?",
      "fields": [
        "dispatch_address_name",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT dispatch_address_name, name FROM [BT]tabSales Invoice[BT] WHERE dispatch_address_name = 'DIS-ADDR-0003' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with dispatch address names starting with 'DIS-'?",
      "fields": [
        "name",
        "dispatch_address_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, dispatch_address_name FROM [BT]tabSales Invoice[BT] WHERE dispatch_address_name LIKE 'DIS-%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices lack dispatch address names?",
      "fields": []
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE dispatch_address_name = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which Q1 invoices had dispatch addresses filled?",
      "fields": [
        "dispatch_address_name",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT dispatch_address_name, name FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND dispatch_address_name != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Are there return invoices with dispatch address info?",
      "fields": [
        "is_return",
        "dispatch_address_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, dispatch_address_name FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND dispatch_address_name != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Dispatch address names used in POS invoices?",
      "fields": [
        "dispatch_address_name",
        "is_pos",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT dispatch_address_name, name FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND dispatch_address_name != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with dispatch to DIS-ADDR-0025?",
      "fields": [
        "customer",
        "dispatch_address_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE dispatch_address_name = 'DIS-ADDR-0025' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with dispatch address name containing 'Store-1'?",
      "fields": [
        "name",
        "dispatch_address_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, dispatch_address_name FROM [BT]tabSales Invoice[BT] WHERE dispatch_address_name LIKE '%Store-1%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Unpaid invoices that include dispatch address?",
      "fields": [
        "dispatch_address_name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT dispatch_address_name, status FROM [BT]tabSales Invoice[BT] WHERE status != 'Paid' AND dispatch_address_name != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List unique dispatch address names from invoices posted in May.",
      "fields": [
        "dispatch_address_name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT dispatch_address_name FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices were sent to the dispatch address 'Building 45, Doha'?",
      "fields": [
        "dispatch_address",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT dispatch_address, name FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with dispatch addresses containing the word 'Street'?",
      "fields": [
        "dispatch_address",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT dispatch_address, name FROM [BT]tabSales Invoice[BT] WHERE dispatch_address LIKE '%Street%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices do not have dispatch addresses filled?",
      "fields": [
        "dispatch_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE dispatch_address = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices in Q4 with dispatch addresses recorded?",
      "fields": [
        "dispatch_address",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT dispatch_address, name FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND dispatch_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which POS invoices used dispatch addresses?",
      "fields": [
        "dispatch_address",
        "is_pos",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT dispatch_address, name FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND dispatch_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Customers who received invoices at dispatch address containing 'Mall'?",
      "fields": [
        "customer",
        "dispatch_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE dispatch_address LIKE '%Mall%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any return invoices that had dispatch addresses?",
      "fields": [
        "is_return",
        "dispatch_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, dispatch_address FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND dispatch_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices where dispatch address starts with 'Industrial Area'?",
      "fields": [
        "name",
        "dispatch_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, dispatch_address FROM [BT]tabSales Invoice[BT] WHERE dispatch_address LIKE 'Industrial Area%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with dispatch addresses recorded this week.",
      "fields": [
        "dispatch_address",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT dispatch_address, name FROM [BT]tabSales Invoice[BT] WHERE posting_date >= 'start' AND dispatch_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices had dispatch addresses containing P.O. Box?",
      "fields": [
        "name",
        "dispatch_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, dispatch_address FROM [BT]tabSales Invoice[BT] WHERE dispatch_address LIKE '%P.O. Box%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices list the company address as 'Main Office - Doha'?",
      "fields": [
        "name",
        "company_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_address FROM [BT]tabSales Invoice[BT] WHERE company_address = 'Main Office - Doha' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with company addresses beginning with 'Block A'?",
      "fields": [
        "name",
        "company_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_address FROM [BT]tabSales Invoice[BT] WHERE company_address LIKE 'Block A%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices that don't have a company address listed.",
      "fields": [
        "name",
        "company_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_address FROM [BT]tabSales Invoice[BT] WHERE company_address = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all POS invoices with valid company addresses.",
      "fields": [
        "name",
        "company_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_address FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND company_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices in Q1 used company addresses with 'Doha'?",
      "fields": [
        "name",
        "posting_date",
        "company_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_address FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND company_address LIKE '%Doha%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Return invoices with filled company address field?",
      "fields": [
        "name",
        "company_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_address FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND company_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices from last month that include company addresses.",
      "fields": [
        "name",
        "company_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_address FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND company_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Fetch invoices using company addresses that contain 'Industrial Area'.",
      "fields": [
        "name",
        "company_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_address FROM [BT]tabSales Invoice[BT] WHERE company_address LIKE '%Industrial Area%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Customers billed from company address containing 'HQ Block C'?",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE company_address LIKE '%HQ Block C%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export invoices issued in Q2 that mention any company address.",
      "fields": [
        "name",
        "company_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_address FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND company_address != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have the company contact person listed as 'Sarah Al-Mansoori'?",
      "fields": [
        "company_contact_person",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_contact_person FROM [BT]tabSales Invoice[BT] WHERE company_contact_person = 'Sarah Al-Mansoori' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have the company contact person listed as 'Sarah Al-Mansoori'?",
      "fields": [
        "company_contact_person",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_contact_person FROM [BT]tabSales Invoice[BT] WHERE company_contact_person = 'Sarah Al-Mansoori' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with company contact persons starting with 'Mr.'",
      "fields": [
        "company_contact_person",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_contact_person FROM [BT]tabSales Invoice[BT] WHERE company_contact_person LIKE 'Mr.%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all invoices where company contact person is not recorded.",
      "fields": [
        "company_contact_person",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_contact_person FROM [BT]tabSales Invoice[BT] WHERE company_contact_person = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export invoices that contain a valid company contact person.",
      "fields": [
        "company_contact_person",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_contact_person FROM [BT]tabSales Invoice[BT] WHERE company_contact_person != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices in Q1 included a company contact person?",
      "fields": [
        "posting_date",
        "company_contact_person"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND company_contact_person != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Return all POS invoices with a company contact person set.",
      "fields": [
        "is_pos",
        "company_contact_person",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_contact_person FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND company_contact_person != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with contact person 'Mohammed Ameen' from the company?",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE company_contact_person = 'Mohammed Ameen' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices from Q2 where company contact person contains 'Khalid'",
      "fields": [
        "posting_date",
        "company_contact_person",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_contact_person FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND company_contact_person LIKE '%Khalid%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any return invoices with a company contact person listed?",
      "fields": [
        "is_return",
        "company_contact_person",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_contact_person FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND company_contact_person != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export all invoices this year with a filled company contact person field.",
      "fields": [
        "posting_date",
        "company_contact_person",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company_contact_person FROM [BT]tabSales Invoice[BT] WHERE posting_date >= 'start' AND company_contact_person != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices that ignored the default payment terms template.",
      "fields": [
        "ignore_default_payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, ignore_default_payment_terms_template FROM [BT]tabSales Invoice[BT] WHERE ignore_default_payment_terms_template = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices followed default payment terms?",
      "fields": [
        "ignore_default_payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, ignore_default_payment_terms_template FROM [BT]tabSales Invoice[BT] WHERE ignore_default_payment_terms_template = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Fetch POS invoices where default payment terms were ignored.",
      "fields": [
        "is_pos",
        "ignore_default_payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, ignore_default_payment_terms_template FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND ignore_default_payment_terms_template = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which return invoices applied custom payment terms?",
      "fields": [
        "is_return",
        "ignore_default_payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, ignore_default_payment_terms_template FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND ignore_default_payment_terms_template = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices from Q2 that ignored default payment terms.",
      "fields": [
        "posting_date",
        "ignore_default_payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, ignore_default_payment_terms_template FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND ignore_default_payment_terms_template = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find all invoices with default payment terms applied.",
      "fields": [
        "ignore_default_payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, ignore_default_payment_terms_template FROM [BT]tabSales Invoice[BT] WHERE ignore_default_payment_terms_template = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Return invoices issued today with custom payment terms.",
      "fields": [
        "posting_date",
        "ignore_default_payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, ignore_default_payment_terms_template FROM [BT]tabSales Invoice[BT] WHERE ignore_default_payment_terms_template = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all unpaid invoices where default terms were ignored.",
      "fields": [
        "status",
        "ignore_default_payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, ignore_default_payment_terms_template FROM [BT]tabSales Invoice[BT] WHERE status != 'Paid' AND ignore_default_payment_terms_template = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with overridden payment terms?",
      "fields": [
        "customer",
        "ignore_default_payment_terms_template"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE ignore_default_payment_terms_template = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices are linked to the 'Net 30' payment terms template?",
      "fields": [
        "payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_terms_template FROM [BT]tabSales Invoice[BT] WHERE payment_terms_template = 'Net 30' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show return invoices with specific payment terms applied.",
      "fields": [
        "is_return",
        "payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_terms_template FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND payment_terms_template != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Fetch POS invoices that used any payment terms template.",
      "fields": [
        "is_pos",
        "payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_terms_template FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND payment_terms_template != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices don't have any payment terms assigned?",
      "fields": [
        "payment_terms_template"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE payment_terms_template = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices from Q1 with a valid payment terms template.",
      "fields": [
        "posting_date",
        "payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_terms_template FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND payment_terms_template != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices linked to the 'Advance Only' payment template?",
      "fields": [
        "payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_terms_template FROM [BT]tabSales Invoice[BT] WHERE payment_terms_template = 'Advance Only' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers received invoices with the 'Partial 50%' terms?",
      "fields": [
        "customer",
        "payment_terms_template"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE payment_terms_template = 'Partial 50%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Today’s invoices that used any payment terms?",
      "fields": [
        "posting_date",
        "payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_terms_template FROM [BT]tabSales Invoice[BT] WHERE payment_terms_template != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export invoices with 'Net 60' payment terms this quarter.",
      "fields": [
        "posting_date",
        "payment_terms_template",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_terms_template FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND payment_terms_template = 'Net 60' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices include a payment schedule?",
      "fields": [
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_schedule FROM [BT]tabSales Invoice[BT] WHERE payment_schedule != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices that have payment schedules defined.",
      "fields": [
        "is_pos",
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_schedule FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND payment_schedule != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Return invoices from April with active payment schedules.",
      "fields": [
        "posting_date",
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_schedule FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND payment_schedule != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices without any payment schedule.",
      "fields": [
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_schedule FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many return invoices included payment schedules?",
      "fields": [
        "is_return",
        "payment_schedule"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND payment_schedule IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List customers who had invoices with payment schedules.",
      "fields": [
        "customer",
        "payment_schedule"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE payment_schedule != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with payment schedules and status Overdue?",
      "fields": [
        "status",
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_schedule FROM [BT]tabSales Invoice[BT] WHERE status = 'Overdue' AND payment_schedule != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export invoices using payment schedules for Q2.",
      "fields": [
        "posting_date",
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_schedule FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND payment_schedule != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Today’s invoices with defined payment schedules?",
      "fields": [
        "posting_date",
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_schedule FROM [BT]tabSales Invoice[BT] WHERE payment_schedule != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which companies used payment schedules in May?",
      "fields": [
        "company",
        "payment_schedule",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT company FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND payment_schedule != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices include a payment schedule?",
      "fields": [
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_schedule FROM [BT]tabSales Invoice[BT] WHERE payment_schedule != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices that have payment schedules defined.",
      "fields": [
        "is_pos",
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_schedule FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND payment_schedule != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Return invoices from April with active payment schedules.",
      "fields": [
        "posting_date",
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_schedule FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND payment_schedule != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices without any payment schedule.",
      "fields": [
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_schedule FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many return invoices included payment schedules?",
      "fields": [
        "is_return",
        "payment_schedule"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND payment_schedule IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List customers who had invoices with payment schedules.",
      "fields": [
        "customer",
        "payment_schedule"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE payment_schedule != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices with payment schedules and status Overdue?",
      "fields": [
        "status",
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_schedule FROM [BT]tabSales Invoice[BT] WHERE status = 'Overdue' AND payment_schedule != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export invoices using payment schedules for Q2.",
      "fields": [
        "posting_date",
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_schedule FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND payment_schedule != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Today’s invoices with defined payment schedules?",
      "fields": [
        "posting_date",
        "payment_schedule",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_schedule FROM [BT]tabSales Invoice[BT] WHERE payment_schedule != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which companies used payment schedules in May?",
      "fields": [
        "company",
        "payment_schedule",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT company FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND payment_schedule != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show me all invoices that contain terms mentioning 'advance payment'.",
      "fields": [
        "terms",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT terms, name FROM [BT]tabSales Invoice[BT] WHERE terms LIKE '%advance payment%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have blank terms field?",
      "fields": [
        "terms",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, terms FROM [BT]tabSales Invoice[BT] WHERE terms = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List Q1 invoices that included custom terms and conditions.",
      "fields": [
        "terms",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, terms FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND terms != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Fetch invoices with terms that reference 'net 30'.",
      "fields": [
        "terms",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT terms, name FROM [BT]tabSales Invoice[BT] WHERE terms LIKE '%net 30%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices do not have any terms specified?",
      "fields": [
        "terms"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE terms = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Contact"
      ],
      "question": "List all male contacts.",
      "fields": [
        "name",
        "full_name",
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, full_name, gender FROM [BT]tabContact[BT] WHERE gender = 'Male' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Contact"
      ],
      "question": "How many female contacts do we have?",
      "fields": [
        "name",
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) as count FROM [BT]tabContact[BT] WHERE gender = 'Female' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Contact"
      ],
      "question": "Show contacts grouped by gender.",
      "fields": [
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT gender, COUNT(*) as count FROM [BT]tabContact[BT] GROUP BY gender''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Contact"
      ],
      "question": "Which contacts don’t have gender specified?",
      "fields": [
        "name",
        "full_name",
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, full_name, gender FROM [BT]tabContact[BT] WHERE gender IS NULL OR gender = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Contact"
      ],
      "question": "List female contacts with their email IDs.",
      "fields": [
        "name",
        "full_name",
        "email_id",
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, full_name, email_id, gender FROM [BT]tabContact[BT] WHERE gender = 'Female' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Contact"
      ],
      "question": "Which departments have the highest number of male contacts?",
      "fields": [
        "department",
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT department, COUNT(*) as count FROM [BT]tabContact[BT] WHERE gender = 'Male' GROUP BY department ORDER BY count DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Contact"
      ],
      "question": "List primary contacts and their gender.",
      "fields": [
        "name",
        "full_name",
        "is_primary_contact",
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, full_name, is_primary_contact, gender FROM [BT]tabContact[BT] WHERE is_primary_contact = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List all female customers.",
      "fields": [
        "name",
        "customer_name",
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, gender FROM [BT]tabCustomer[BT] WHERE gender = 'Female' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "How many male customers do we have?",
      "fields": [
        "name",
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) as count FROM [BT]tabCustomer[BT] WHERE gender = 'Male' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show customer distribution by gender.",
      "fields": [
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT gender, COUNT(*) as count FROM [BT]tabCustomer[BT] GROUP BY gender''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers have no gender specified?",
      "fields": [
        "name",
        "customer_name",
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, gender FROM [BT]tabCustomer[BT] WHERE gender IS NULL OR gender = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List female customers by territory.",
      "fields": [
        "name",
        "customer_name",
        "territory",
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, territory, gender FROM [BT]tabCustomer[BT] WHERE gender = 'Female' ORDER BY territory''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customer groups have the highest number of male customers?",
      "fields": [
        "customer_group",
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer_group, COUNT(*) as count FROM [BT]tabCustomer[BT] WHERE gender = 'Male' GROUP BY customer_group ORDER BY count DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "User"
      ],
      "question": "List all female users in the system.",
      "fields": [
        "name",
        "full_name",
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, full_name, gender FROM [BT]tabUser[BT] WHERE gender = 'Female' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "User"
      ],
      "question": "How many male users have active accounts?",
      "fields": [
        "name",
        "enabled",
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) as count FROM [BT]tabUser[BT] WHERE gender = 'Male' AND enabled = 1 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "User"
      ],
      "question": "Show me gender distribution among all users.",
      "fields": [
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT gender, COUNT(*) as count FROM [BT]tabUser[BT] GROUP BY gender''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "User"
      ],
      "question": "Fetch names of users whose gender is not specified.",
      "fields": [
        "name",
        "full_name",
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, full_name, gender FROM [BT]tabUser[BT] WHERE gender IS NULL OR gender = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "User"
      ],
      "question": "Which roles have the highest number of female users?",
      "fields": [
        "roles",
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT roles, COUNT(*) as count FROM [BT]tabUser[BT] WHERE gender = 'Female' GROUP BY roles ORDER BY count DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "List all female employees in the company.",
      "fields": [
        "name",
        "employee_name",
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, gender FROM [BT]tabEmployee[BT] WHERE gender = 'Female' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "How many male employees are currently active?",
      "fields": [
        "name",
        "status",
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) as count FROM [BT]tabEmployee[BT] WHERE gender = 'Male' AND status = 'Active' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Show me the gender distribution of employees.",
      "fields": [
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT gender, COUNT(*) as count FROM [BT]tabEmployee[BT] GROUP BY gender''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Fetch names of employees whose gender is unspecified.",
      "fields": [
        "name",
        "employee_name",
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, gender FROM [BT]tabEmployee[BT] WHERE gender IS NULL OR gender = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which departments have the highest number of female employees?",
      "fields": [
        "department",
        "gender"
      ]
    },
    "output": "frappe.db.sql('''SELECT department, COUNT(*) as count FROM [BT]tabEmployee[BT] WHERE gender = 'Female' GROUP BY department ORDER BY count DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get return invoices with some terms content included.",
      "fields": [
        "is_return",
        "terms"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, terms FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND terms != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices that included terms this month?",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE()) AND terms IS NOT NULL AND terms != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices where terms field contains Arabic text.",
      "fields": [
        "terms",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, terms FROM [BT]tabSales Invoice[BT] WHERE terms LIKE '%مرحبا%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List POS invoices that had terms mentioned.",
      "fields": [
        "is_pos",
        "terms",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, terms FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND terms != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices created today include any terms?",
      "fields": [
        "posting_date",
        "terms",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, terms FROM [BT]tabSales Invoice[BT] WHERE terms != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices that include customer PO details mentioning 'PO-456'.",
      "fields": [
        "customer_po_details",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_po_details FROM [BT]tabSales Invoice[BT] WHERE customer_po_details LIKE '%PO-456%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices were submitted without any customer PO details?",
      "fields": [
        "customer_po_details",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_po_details FROM [BT]tabSales Invoice[BT] WHERE customer_po_details = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show Q2 invoices where customer PO info is present.",
      "fields": [
        "customer_po_details",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_po_details FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND customer_po_details != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get return invoices with filled-in customer PO details.",
      "fields": [
        "is_return",
        "customer_po_details"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, customer_po_details FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND customer_po_details != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many POS invoices had customer PO data?",
      "fields": [
        "customer_po_details"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND customer_po_details != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices where customer PO info includes 'QTR2025'.",
      "fields": [
        "customer_po_details",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_po_details FROM [BT]tabSales Invoice[BT] WHERE customer_po_details LIKE '%QTR2025%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices created this week with PO references.",
      "fields": [
        "po_no",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, po_no, posting_date FROM [BT]tabSales Invoice[BT] WHERE YEARWEEK(posting_date, 1) = YEARWEEK(CURDATE(), 1) AND po_no IS NOT NULL AND po_no != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with customer PO info this month?",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE posting_date >= DATE_FORMAT(CURDATE(), '%Y-%m-01') AND po_no IS NOT NULL AND po_no != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Do any invoices have PO details referencing 'Urgent'?",
      "fields": [
        "customer_po_details"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE customer_po_details LIKE '%Urgent%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices today with customer PO details not empty.",
      "fields": [
        "customer_po_details",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_po_details FROM [BT]tabSales Invoice[BT] WHERE customer_po_details != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with PO numbers starting with 'PO-100'.",
      "fields": [
        "po_no",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, po_no FROM [BT]tabSales Invoice[BT] WHERE po_no LIKE 'PO-100%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices were submitted without a PO number?",
      "fields": [
        "po_no",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, po_no FROM [BT]tabSales Invoice[BT] WHERE po_no = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices from this year with valid PO numbers?",
      "fields": [
        "po_no",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, po_no, posting_date FROM [BT]tabSales Invoice[BT] WHERE posting_date >= DATE_FORMAT(CURDATE(), '%Y-01-01') AND po_no IS NOT NULL AND po_no != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "POS invoices with PO number available?",
      "fields": [
        "is_pos",
        "po_no",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, po_no FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND po_no != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many return invoices contain a PO number?",
      "fields": [
        "is_return",
        "po_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND po_no != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Fetch invoices where PO number includes 'ORDER-5000'.",
      "fields": [
        "po_no",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, po_no FROM [BT]tabSales Invoice[BT] WHERE po_no LIKE '%ORDER-5000%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with missing or empty PO numbers.",
      "fields": [
        "po_no",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, po_no FROM [BT]tabSales Invoice[BT] WHERE po_no = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers had invoices with any PO number this month?",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE posting_date >= DATE_FORMAT(CURDATE(), '%Y-%m-01') AND po_no IS NOT NULL AND po_no != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices sent with PO numbers containing 'Urgent' label?",
      "fields": [
        "po_no",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, po_no FROM [BT]tabSales Invoice[BT] WHERE po_no LIKE '%Urgent%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices created today with PO number filled in.",
      "fields": [
        "po_no",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, po_no FROM [BT]tabSales Invoice[BT] WHERE po_no != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices include additional details mentioning 'urgent delivery'?",
      "fields": [
        "more_info",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, more_info FROM [BT]tabSales Invoice[BT] WHERE more_info LIKE '%urgent delivery%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices created this month with non-empty remarks fields.",
      "fields": [
        "remarks",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, remarks FROM [BT]tabSales Invoice[BT] WHERE posting_date >= DATE_FORMAT(CURDATE(), '%Y-%m-01') AND remarks IS NOT NULL AND remarks != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Return POS invoices with extra information recorded.",
      "fields": [
        "is_pos",
        "more_info",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, more_info FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND more_info != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices containing 'VAT exempt' in their more info section.",
      "fields": [
        "more_info",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, more_info FROM [BT]tabSales Invoice[BT] WHERE more_info LIKE '%VAT exempt%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show return invoices that included any more info notes.",
      "fields": [
        "is_return",
        "more_info"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, more_info FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND more_info != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices have no additional information mentioned?",
      "fields": [
        "more_info"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE more_info = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which Q4 invoices contained any note in more_info?",
      "fields": [
        "more_info",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, more_info FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND more_info != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Fetch invoices with 'Delivered by hand' mentioned in the more_info field.",
      "fields": [
        "more_info",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, more_info FROM [BT]tabSales Invoice[BT] WHERE more_info LIKE '%Delivered by hand%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices this week with notes in remarks?",
      "fields": [
        "remarks",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, remarks FROM [BT]tabSales Invoice[BT] WHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL WEEKDAY(CURDATE()) DAY) AND remarks IS NOT NULL AND remarks != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List customers who had invoices with anything mentioned in the more_info field.",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE more_info != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices posted to the 'Debtors - HTS' account.",
      "fields": [
        "name",
        "debit_to"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, debit_to FROM [BT]tabSales Invoice[BT] WHERE debit_to = 'Debtors - HTS' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices were posted to any account starting with 'Debtors'?",
      "fields": [
        "name",
        "debit_to"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, debit_to FROM [BT]tabSales Invoice[BT] WHERE debit_to LIKE 'Debtors%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show POS invoices where the debit_to account is set.",
      "fields": [
        "name",
        "debit_to"
      ]
    },
    "output": "frappe.db.sql('''SELECT debit_to, name FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND debit_to != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices where the debit account is not set.",
      "fields": [
        "name",
        "debit_to"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, debit_to FROM [BT]tabSales Invoice[BT] WHERE debit_to = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Fetch all invoices created this quarter with debit_to value filled.",
      "fields": [
        "name",
        "debit_to"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, debit_to FROM [BT]tabSales Invoice[BT] WHERE QUARTER(posting_date) = QUARTER(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE()) AND debit_to IS NOT NULL AND debit_to != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoices where debit_to account is 'Accounts Receivable - HTS'?",
      "fields": [
        "debit_to"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE debit_to = 'Accounts Receivable - HTS' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show return invoices with non-empty debit_to account.",
      "fields": [
        "is_return",
        "debit_to"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_return, debit_to FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND debit_to != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices this month use any debit_to account?",
      "fields": [
        "debit_to"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE()) AND debit_to IS NOT NULL AND debit_to != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which companies posted invoices to 'Receivables - HTS'?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT company FROM [BT]tabSales Invoice[BT] WHERE debit_to = 'Receivables - HTS' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices today with valid debit_to accounts?",
      "fields": [
        "name",
        "debit_to"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, debit_to FROM [BT]tabSales Invoice[BT] WHERE debit_to != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices made in QAR currency.",
      "fields": [
        "name",
        "party_account_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, party_account_currency FROM [BT]tabSales Invoice[BT] WHERE party_account_currency = 'QAR' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have party account currency set to USD?",
      "fields": [
        "name",
        "party_account_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, party_account_currency FROM [BT]tabSales Invoice[BT] WHERE party_account_currency = 'USD' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with non-empty party account currency field.",
      "fields": [
        "name",
        "party_account_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, party_account_currency FROM [BT]tabSales Invoice[BT] WHERE party_account_currency != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which POS invoices were recorded in foreign currency?",
      "fields": [
        "name",
        "party_account_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, party_account_currency FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND party_account_currency != 'QAR' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices created this month with party currency set.",
      "fields": [
        "name",
        "party_account_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, party_account_currency FROM [BT]tabSales Invoice[BT] WHERE MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE()) AND party_account_currency IS NOT NULL AND party_account_currency != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show return invoices using USD as party currency.",
      "fields": [
        "name",
        "party_account_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, party_account_currency FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND party_account_currency = 'USD' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any invoice using currency code like 'EUR%'?",
      "fields": [
        "party_account_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE party_account_currency LIKE 'EUR%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get list of companies who issued invoices in USD.",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT company FROM [BT]tabSales Invoice[BT] WHERE party_account_currency = 'USD' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count how many invoices were issued with no party currency.",
      "fields": [
        "party_account_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE party_account_currency = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices today in QAR currency?",
      "fields": [
        "name",
        "party_account_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, party_account_currency FROM [BT]tabSales Invoice[BT] WHERE party_account_currency = 'QAR' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices that are marked as opening balances.",
      "fields": [
        "name",
        "is_opening"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_opening FROM [BT]tabSales Invoice[BT] WHERE is_opening = 'Yes' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers have invoices flagged as opening?",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE is_opening = 'Yes' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices that are not marked as opening.",
      "fields": [
        "name",
        "is_opening"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_opening FROM [BT]tabSales Invoice[BT] WHERE is_opening = 'No' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any opening invoices created this month?",
      "fields": [
        "name",
        "is_opening"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_opening FROM [BT]tabSales Invoice[BT] WHERE is_opening = 'Yes' AND MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE()) ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all POS invoices that are opening invoices.",
      "fields": [
        "name",
        "is_opening"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_opening FROM [BT]tabSales Invoice[BT] WHERE is_opening = 'Yes' AND is_pos = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count opening invoices for customer 'Al Rawabi'.",
      "fields": [
        "is_opening",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_opening = 'Yes' AND customer = 'Al Rawabi' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Were any opening invoices posted today?",
      "fields": [
        "name",
        "is_opening"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_opening FROM [BT]tabSales Invoice[BT] WHERE is_opening = 'Yes' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which companies generated opening invoices in Q1?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT company FROM [BT]tabSales Invoice[BT] WHERE is_opening = 'Yes' AND posting_date between '[start, end]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Do any return invoices have is_opening marked?",
      "fields": [
        "name",
        "is_opening"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_opening FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND is_opening = 'Yes' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export names of invoices not marked as opening.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE is_opening = 'No' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices specify an unrealized profit/loss account?",
      "fields": [
        "name",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, unrealized_profit_loss_account FROM [BT]tabSales Invoice[BT] WHERE unrealized_profit_loss_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where unrealized profit/loss account is not set.",
      "fields": [
        "name",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE unrealized_profit_loss_account = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices posted this year with a specified unrealized P/L account?",
      "fields": [
        "name",
        "unrealized_profit_loss_account",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, unrealized_profit_loss_account, posting_date FROM [BT]tabSales Invoice[BT] WHERE posting_date >= DATE_FORMAT(CURDATE(), '%Y-01-01') AND unrealized_profit_loss_account IS NOT NULL AND unrealized_profit_loss_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Return invoices linked to 'Exchange Diff Account - UAE'.",
      "fields": [
        "name",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, unrealized_profit_loss_account FROM [BT]tabSales Invoice[BT] WHERE unrealized_profit_loss_account = 'Exchange Diff Account - UAE' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "POS invoices with unrealized profit/loss account recorded?",
      "fields": [
        "name",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, unrealized_profit_loss_account FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND unrealized_profit_loss_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many return invoices have non-empty unrealized P/L account?",
      "fields": [
        "is_return",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND unrealized_profit_loss_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export invoice numbers for Q2 with unrealized profit/loss account set.",
      "fields": [
        "name",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, unrealized_profit_loss_account FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND unrealized_profit_loss_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List companies with invoices referencing unrealized profit/loss accounts.",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT company FROM [BT]tabSales Invoice[BT] WHERE unrealized_profit_loss_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices tagged with any unrealized P/L account from last month.",
      "fields": [
        "name",
        "unrealized_profit_loss_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, unrealized_profit_loss_account FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND unrealized_profit_loss_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Do invoices from Al Maktoum Ltd. include unrealized profit/loss accounts?",
      "fields": [
        "name",
        "unrealized_profit_loss_account",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, unrealized_profit_loss_account FROM [BT]tabSales Invoice[BT] WHERE customer = 'Al Maktoum Ltd.' AND unrealized_profit_loss_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices mention an against income account?",
      "fields": [
        "name",
        "against_income_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, against_income_account FROM [BT]tabSales Invoice[BT] WHERE against_income_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with no against income account linked.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE against_income_account = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find all Q2 invoices using an against income account.",
      "fields": [
        "name",
        "against_income_account",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, against_income_account FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND against_income_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices are tagged with 'Sales - UAE' as the against income account?",
      "fields": [
        "name",
        "against_income_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, against_income_account FROM [BT]tabSales Invoice[BT] WHERE against_income_account = 'Sales - UAE' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Any return invoices having an against income account?",
      "fields": [
        "name",
        "against_income_account",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, against_income_account FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND against_income_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List POS invoices where against income account was assigned.",
      "fields": [
        "name",
        "against_income_account",
        "is_pos"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, against_income_account FROM [BT]tabSales Invoice[BT] WHERE is_pos = 1 AND against_income_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices from March had against income accounts?",
      "fields": [
        "against_income_account",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND against_income_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export customer list who had invoices with against income account set.",
      "fields": [
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer FROM [BT]tabSales Invoice[BT] WHERE against_income_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices using any income account starting with 'Sales%'?",
      "fields": [
        "name",
        "against_income_account"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, against_income_account FROM [BT]tabSales Invoice[BT] WHERE against_income_account LIKE 'Sales%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which companies posted invoices with against income accounts last month?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT company FROM [BT]tabSales Invoice[BT] WHERE posting_date between '[start, end]' AND against_income_account != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with sales partner assigned.",
      "fields": [
        "name",
        "sales_partner"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_partner FROM [BT]tabSales Invoice[BT] WHERE sales_partner != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices where the sales partner is not specified.",
      "fields": [
        "name",
        "sales_partner"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_partner FROM [BT]tabSales Invoice[BT] WHERE sales_partner = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have a specific sales partner 'Dapple & Ore Corp'?",
      "fields": [
        "name",
        "sales_partner"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_partner FROM [BT]tabSales Invoice[BT] WHERE sales_partner = 'Dapple & Ore Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices with sales partner and their posting dates.",
      "fields": [
        "name",
        "sales_partner",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_partner, posting_date FROM [BT]tabSales Invoice[BT] WHERE sales_partner != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Display invoices by sales partner for a particular company.",
      "fields": [
        "name",
        "sales_partner",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_partner, company FROM [BT]tabSales Invoice[BT] WHERE sales_partner != '' AND company = 'XYZ Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices that have any sales partner assigned.",
      "fields": [
        "sales_partner"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE sales_partner != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices and their customers for a Tin Lantern Syndicate.",
      "fields": [
        "name",
        "customer",
        "sales_partner"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, sales_partner FROM [BT]tabSales Invoice[BT] WHERE sales_partner = 'Tin Lantern Syndicate Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with sales partner, sorted by posting date.",
      "fields": [
        "name",
        "sales_partner",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_partner, posting_date FROM [BT]tabSales Invoice[BT] WHERE sales_partner != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouses are active and associated with 'ERPGulf LLC'?",
      "fields": [
        "warehouse_name",
        "disabled",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_name, disabled, company FROM [BT]tabWarehouse[BT] WHERE disabled = 0 AND company = 'ERPGulf LLC' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Give me all warehouses that store rejected goods.",
      "fields": [
        "warehouse_name",
        "is_rejected_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_name, is_rejected_warehouse FROM [BT]tabWarehouse[BT] WHERE is_rejected_warehouse = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Hey, can you show me the list of our main warehouses under Nimbus & Co Corp?",
      "fields": [
        "warehouse_name",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_name, company FROM [BT]tabWarehouse[BT] WHERE company = 'Nimbus & Co Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "List all non-group warehouses in Qatar with an email assigned.",
      "fields": [
        "warehouse_name",
        "is_group",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_name, is_group, email_id FROM [BT]tabWarehouse[BT] WHERE is_group = 0 AND email_id != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which company has the most number of warehouses?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT company, COUNT(*) as total FROM [BT]tabWarehouse[BT] GROUP BY company ORDER BY total DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouses were added this year?",
      "fields": [
        "warehouse_name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_name, creation FROM [BT]tabWarehouse[BT] WHERE YEAR(creation) = YEAR(CURDATE(), as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "List all warehouses with email and phone number details included.",
      "fields": [
        "warehouse_name",
        "email_id",
        "phone_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_name, email_id, phone_no FROM [BT]tabWarehouse[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouses in Qatar have both mobile and landline numbers?",
      "fields": [
        "warehouse_name",
        "country",
        "mobile_no",
        "phone_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_name, mobile_no, phone_no FROM [BT]tabarehouse[BT] WHERE mobile_no != '' AND phone_no != '' AND address_line_1 LIKE '%Qatar%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "What are the names and cities of all transit warehouses?",
      "fields": [
        "warehouse_name",
        "city",
        "default_in_transit_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_name, city FROM [BT]tabWarehouse[BT] WHERE default_in_transit_warehouse != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Find disabled group warehouses that belong to the company 'TechPro Inc.'",
      "fields": [
        "warehouse_name",
        "is_group",
        "disabled",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_name, company FROM [BT]tabWarehouse[BT] WHERE disabled = 1 AND is_group = 1 AND company = 'TechPro Inc.' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouses have no contact details and are marked as rejected warehouses?",
      "fields": [
        "warehouse_name",
        "is_rejected_warehouse",
        "email_id",
        "phone_no",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_name FROM [BT]tabWarehouse[BT]            WHERE is_rejected_warehouse = 1              AND (email_id IS NULL OR email_id =''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Show me all warehouses created this year for 'FutureTech Ltd.'",
      "fields": [
        "warehouse_name",
        "creation",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_name, creation, company FROM [BT]tabWarehouse[BT] WHERE company = 'FutureTech Ltd.' AND YEAR(creation) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which company operates the largest number of active warehouses?",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT company, COUNT(*) as total FROM [BT]tabWarehouse[BT]            WHERE disabled = 0 GROUP BY company ORDER BY total DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "List all warehouse addresses in Doha.",
      "fields": [
        "warehouse_name",
        "address_line_1",
        "address_line_2",
        "city"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_name, address_line_1, address_line_2, city FROM [BT]tabWarehouse[BT] WHERE city = 'Doha' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouses in Doha are currently disabled and linked to 'ZahraGate'?",
      "fields": [
        "city",
        "disabled",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, city, company, disabled FROM [BT]tabWarehouse[BT] WHERE city = 'Doha' AND disabled = 1 AND company = 'ZahraGate' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "List all rejected warehouses and their parent warehouse details.",
      "fields": [
        "is_rejected_warehouse",
        "parent_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_rejected_warehouse, parent_warehouse FROM [BT]tabWarehouse[BT] WHERE is_rejected_warehouse = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Give me the phone numbers of all warehouses that are not disabled.",
      "fields": [
        "disabled",
        "phone_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, phone_no FROM [BT]tabWarehouse[BT] WHERE disabled = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouse types have the highest number of active warehouses?",
      "fields": [
        "warehouse_type",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_type, COUNT(*) as total  FROM [BT]tabWarehouse[BT] WHERE disabled = 0 GROUP BY warehouse_type ORDER BY total DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Compare the count of group vs non-group warehouses for Company X.",
      "fields": [
        "is_group",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_group, COUNT(*) as count FROM [BT]tabWarehouse[BT] WHERE company = 'Company X' GROUP BY is_group''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "List all warehouses along with their city and pin code.",
      "fields": [
        "city",
        "pin"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, city, pin FROM [BT]tabWarehouse[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "What is the email and phone contact of 'Central Spare Warehouse'?",
      "fields": [
        "email_id",
        "phone_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT email_id, phone_no FROM [BT]tabWarehouse[BT] WHERE warehouse_name = 'Central Spare Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouse had the highest number of stock movements in the last quarter?",
      "fields": [
        "warehouse_name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse, COUNT(*) as movement_count FROM [BT]tabStock Ledger Entry[BT] WHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY warehouse ORDER BY movement_count DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "List all active warehouses that are not marked as groups and belong to 'RetailCo'.",
      "fields": [
        "warehouse_name",
        "disabled",
        "is_group",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_name, company FROM [BT]tabWarehouse[BT] WHERE disabled = 0 AND is_group = 0 AND company = 'RetailCo' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "What are the parent-child relationships among warehouses under 'Main Warehouse'?",
      "fields": [
        "warehouse_name",
        "parent_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_name, parent_warehouse FROM [BT]tabWarehouse[BT] WHERE parent_warehouse = 'Main Warehouse' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Compare the number of disabled vs enabled warehouses.",
      "fields": [
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT disabled, COUNT(*) as total FROM [BT]tabWarehouse[BT] GROUP BY disabled''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Show me warehouses grouped by type for company 'XYZ Ltd'.",
      "fields": [
        "warehouse_type",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_type, COUNT(*) as count FROM [BT]tabWarehouse[BT] WHERE company = 'XYZ Ltd' GROUP BY warehouse_type''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "List all warehouses that are not in transit or rejected warehouses.",
      "fields": [
        "warehouse_name",
        "default_in_transit_warehouse",
        "is_rejected_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_name FROM [BT]tabWarehouse[BT] WHERE (is_rejected_warehouse = 0 OR is_rejected_warehouse IS NULL) AND (default_in_transit_warehouse IS NULL OR default_in_transit_warehouse =''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which cities have the most warehouse branches?",
      "fields": [
        "city"
      ]
    },
    "output": "frappe.db.sql('''SELECT city, COUNT(*) as count FROM [BT]tabWarehouse[BT] WHERE city IS NOT NULL AND city != '' GROUP BY city ORDER BY count DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Show all warehouse names and their parent warehouses.",
      "fields": [
        "warehouse_name",
        "parent_warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT warehouse_name, parent_warehouse FROM [BT]tabWarehouse[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices where sales partner is not set and company is 'XYZ Ltd'.",
      "fields": [
        "name",
        "sales_partner",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_partner, company FROM [BT]tabSales Invoice[BT] WHERE sales_partner = '' AND company = 'XYZ Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all invoices with sales partner and their status.",
      "fields": [
        "name",
        "sales_partner",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_partner, status FROM [BT]tabSales Invoice[BT] WHERE sales_partner != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with non-zero amount eligible for commission.",
      "fields": [
        "name",
        "amount_eligible_for_commission"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, amount_eligible_for_commission FROM [BT]tabSales Invoice[BT] WHERE amount_eligible_for_commission > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices where amount eligible for commission is greater than $1000.",
      "fields": [
        "name",
        "amount_eligible_for_commission"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, amount_eligible_for_commission FROM [BT]tabSales Invoice[BT] WHERE amount_eligible_for_commission > 1000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have a specific amount eligible for commission, e.g., $500?",
      "fields": [
        "name",
        "amount_eligible_for_commission"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, amount_eligible_for_commission FROM [BT]tabSales Invoice[BT] WHERE amount_eligible_for_commission = 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices with their amount eligible for commission and posting date.",
      "fields": [
        "name",
        "amount_eligible_for_commission",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, amount_eligible_for_commission, posting_date FROM [BT]tabSales Invoice[BT] WHERE amount_eligible_for_commission > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Display invoices by sales partner and their amount eligible for commission.",
      "fields": [
        "name",
        "sales_partner",
        "amount_eligible_for_commission"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_partner, amount_eligible_for_commission FROM [BT]tabSales Invoice[BT] WHERE amount_eligible_for_commission > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices with amount eligible for commission above $1500.",
      "fields": [
        "amount_eligible_for_commission"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE amount_eligible_for_commission > 1500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices and their customer for invoices with amount eligible for commission between $200 and $1000.",
      "fields": [
        "name",
        "customer",
        "amount_eligible_for_commission"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, amount_eligible_for_commission FROM [BT]tabSales Invoice[BT] WHERE amount_eligible_for_commission between '[200, 1000]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with amount eligible for commission and their commission rate.",
      "fields": [
        "name",
        "amount_eligible_for_commission",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, amount_eligible_for_commission, commission_rate FROM [BT]tabSales Invoice[BT] WHERE amount_eligible_for_commission > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices where amount eligible for commission is non-zero and sales partner is 'Oman Corp'.",
      "fields": [
        "name",
        "sales_partner",
        "amount_eligible_for_commission"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_partner, amount_eligible_for_commission FROM [BT]tabSales Invoice[BT] WHERE amount_eligible_for_commission > 0 AND sales_partner = 'Oman Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all invoices with amount eligible for commission and their customer name.",
      "fields": [
        "name",
        "customer",
        "amount_eligible_for_commission"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, amount_eligible_for_commission FROM [BT]tabSales Invoice[BT] WHERE amount_eligible_for_commission > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with a commission rate set.",
      "fields": [
        "name",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, commission_rate FROM [BT]tabSales Invoice[BT] WHERE commission_rate != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with commission rate greater than 5%.",
      "fields": [
        "name",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, commission_rate FROM [BT]tabSales Invoice[BT] WHERE commission_rate > 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have a specific commission rate, e.g., 7%?",
      "fields": [
        "name",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, commission_rate FROM [BT]tabSales Invoice[BT] WHERE commission_rate = 7''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices with their commission rate and posting date.",
      "fields": [
        "name",
        "commission_rate",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, commission_rate, posting_date FROM [BT]tabSales Invoice[BT] WHERE commission_rate != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Display invoices by sales partner and their commission rate.",
      "fields": [
        "name",
        "sales_partner",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_partner, commission_rate FROM [BT]tabSales Invoice[BT] WHERE commission_rate != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices with commission rate above 10%.",
      "fields": [
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE commission_rate > 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices and their customer for invoices with commission rate between 3% and 8%.",
      "fields": [
        "name",
        "customer",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, commission_rate FROM [BT]tabSales Invoice[BT] WHERE commission_rate between '[3, 8]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with commission rate and their amount eligible for commission.",
      "fields": [
        "name",
        "commission_rate",
        "amount_eligible_for_commission"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, commission_rate, amount_eligible_for_commission FROM [BT]tabSales Invoice[BT] WHERE commission_rate != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices where commission rate is non-zero and sales partner is 'ABC Corp'.",
      "fields": [
        "name",
        "sales_partner",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_partner, commission_rate FROM [BT]tabSales Invoice[BT] WHERE commission_rate != 0 AND sales_partner = 'ABC Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all invoices with commission rate and their customer name.",
      "fields": [
        "name",
        "customer",
        "commission_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, commission_rate FROM [BT]tabSales Invoice[BT] WHERE commission_rate != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with a total commission set.",
      "fields": [
        "name",
        "total_commission"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_commission FROM [BT]tabSales Invoice[BT] WHERE total_commission != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with total commission greater than $200.",
      "fields": [
        "name",
        "total_commission"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_commission FROM [BT]tabSales Invoice[BT] WHERE total_commission > 200''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have a specific total commission, e.g., $500?",
      "fields": [
        "name",
        "total_commission"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_commission FROM [BT]tabSales Invoice[BT] WHERE total_commission = 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices with their total commission and sales partner.",
      "fields": [
        "name",
        "total_commission",
        "sales_partner"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_commission, sales_partner FROM [BT]tabSales Invoice[BT] WHERE total_commission != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Display invoices by sales partner and their total commission.",
      "fields": [
        "name",
        "sales_partner",
        "total_commission"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_partner, total_commission FROM [BT]tabSales Invoice[BT] WHERE total_commission != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices with total commission above $300.",
      "fields": [
        "total_commission"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE total_commission > 300''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices and their customer for invoices with total commission between $100 and $500.",
      "fields": [
        "name",
        "customer",
        "total_commission"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, total_commission FROM [BT]tabSales Invoice[BT] WHERE total_commission between '[100, 500]' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with total commission and their amount eligible for commission.",
      "fields": [
        "name",
        "total_commission",
        "amount_commission"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_commission, amount_eligible_for_commission FROM [BT]tabSales Invoice[BT] WHERE total_commission != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices where total commission is non-zero and sales partner is 'ABC Corp'.",
      "fields": [
        "name",
        "sales_partner",
        "total_commission"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_partner, total_commission FROM [BT]tabSales Invoice[BT] WHERE total_commission != 0 AND sales_partner = 'ABC Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all invoices with total commission and their customer name.",
      "fields": [
        "name",
        "customer",
        "total_commission"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, total_commission FROM [BT]tabSales Invoice[BT] WHERE total_commission != 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices assigned to any sales team.",
      "fields": [
        "name",
        "sales_team"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_team FROM [BT]tabSales Invoice[BT] WHERE sales_team != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices not assigned to any sales team.",
      "fields": [
        "name",
        "sales_team"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_team FROM [BT]tabSales Invoice[BT] WHERE sales_team = '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices are assigned to a specific sales team, e.g., 'West Region'?",
      "fields": [
        "name",
        "sales_team"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_team FROM [BT]tabSales Invoice[BT] WHERE sales_team = 'West Region' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices with their sales team and customer.",
      "fields": [
        "name",
        "sales_team",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_team, customer FROM [BT]tabSales Invoice[BT] WHERE sales_team != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Display invoices by sales team and their posting date.",
      "fields": [
        "name",
        "sales_team",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_team, posting_date FROM [BT]tabSales Invoice[BT] WHERE sales_team != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices assigned to any sales team.",
      "fields": [
        "sales_team"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE sales_team != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices and their status for a specific sales team.",
      "fields": [
        "name",
        "sales_team",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_team, status FROM [BT]tabSales Invoice[BT] WHERE sales_team = 'West Region' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with sales team and sales partner.",
      "fields": [
        "sales_team",
        "name",
        "sales_partner"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_team, sales_partner FROM [BT]tabSales Invoice[BT] WHERE sales_team != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices assigned to a specific sales team and customer.",
      "fields": [
        "sales_team",
        "name",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_team, customer FROM [BT]tabSales Invoice[BT] WHERE sales_team = 'West Region' AND customer = 'ABC Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all invoices with sales team and their posting date and status.",
      "fields": [
        "sales_team",
        "name",
        "posting_date",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_team, posting_date, status FROM [BT]tabSales Invoice[BT] WHERE sales_team != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where edit printing settings is enabled.",
      "fields": [
        "name",
        "edit_printing_settings"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, edit_printing_settings FROM [BT]tabSales Invoice[BT] WHERE edit_printing_settings = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices with edit printing settings enabled.",
      "fields": [
        "edit_printing_settings"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE edit_printing_settings = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice has edit printing settings enabled.",
      "fields": [
        "edit_printing_settings"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE edit_printing_settings = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the value of edit printing settings for a specific invoice.",
      "fields": [
        "edit_printing_settings"
      ]
    },
    "output": "frappe.db.sql('''SELECT edit_printing_settings FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices with edit printing settings enabled and their letter head.",
      "fields": [
        "name",
        "letter_head"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, letter_head FROM [BT]tabSales Invoice[BT] WHERE edit_printing_settings = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with edit printing settings enabled and their print heading.",
      "fields": [
        "name",
        "select_print_heading"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, select_print_heading FROM [BT]tabSales Invoice[BT] WHERE edit_printing_settings = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show a single invoice document with edit printing settings enabled.",
      "fields": [
        "name",
        "edit_printing_settings"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE edit_printing_settings = 1 AND name LIKE '%SINV%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with edit printing settings enabled and a specific status.",
      "fields": [
        "name",
        "status",
        "edit_printing_settings"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status FROM [BT]tabSales Invoice[BT] WHERE edit_printing_settings = 1 AND status = 'Submitted' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if a specific invoice has edit printing settings enabled.",
      "fields": [
        "edit_printing_settings"
      ]
    },
    "output": "frappe.db.sql('''SELECT edit_printing_settings FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with edit printing settings enabled and their customer.",
      "fields": [
        "name",
        "customer",
        "edit_printing_settings"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer FROM [BT]tabSales Invoice[BT] WHERE edit_printing_settings = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices using a specific letter head, e.g., 'Standard'.",
      "fields": [
        "name",
        "letter_head"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, letter_head FROM [BT]tabSales Invoice[BT] WHERE letter_head = 'Standard' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices using any letter head.",
      "fields": [
        "letter_head"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE letter_head != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice uses a specific letter head, e.g., 'Company'.",
      "fields": [
        "letter_head"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE letter_head = 'Company' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the value of letter head for a specific invoice.",
      "fields": [
        "letter_head"
      ]
    },
    "output": "frappe.db.sql('''SELECT letter_head FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices with their letter head and customer.",
      "fields": [
        "name",
        "letter_head",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, letter_head, customer FROM [BT]tabSales Invoice[BT] WHERE letter_head != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with a specific letter head and their status.",
      "fields": [
        "name",
        "letter_head",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, letter_head, status FROM [BT]tabSales Invoice[BT] WHERE letter_head = 'Standard' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show a single invoice document using a specific letter head.",
      "fields": [
        "name",
        "letter_head"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, letter_head FROM [BT]tabSales Invoice[BT] WHERE letter_head = 'Standard' AND name LIKE '%SINV%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with a specific letter head and a specific customer.",
      "fields": [
        "name",
        "letter_head",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, letter_head, customer FROM [BT]tabSales Invoice[BT] WHERE letter_head = 'Standard' AND customer = 'ABC Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with letter head and edit printing settings.",
      "fields": [
        "name",
        "letter_head",
        "edit_printing_settings"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, letter_head, edit_printing_settings FROM [BT]tabSales Invoice[BT] WHERE letter_head != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if a specific invoice uses a specific letter head.",
      "fields": [
        "letter_head"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, letter_head FROM [BT]tabSales Invoice[BT] WHERE letter_head = 'Standard' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where group same items is enabled.",
      "fields": [
        "name",
        "group_same_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, group_same_items FROM [BT]tabSales Invoice[BT] WHERE group_same_items = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices with group same items enabled.",
      "fields": [
        "group_same_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE group_same_items = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice has group same items enabled.",
      "fields": [
        "group_same_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE group_same_items = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the value of group same items for a specific invoice.",
      "fields": [
        "group_same_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT group_same_items FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices with group same items enabled and their customer.",
      "fields": [
        "name",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer FROM [BT]tabSales Invoice[BT] WHERE group_same_items = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with group same items enabled and their letter head.",
      "fields": [
        "name",
        "letter_head"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, letter_head FROM [BT]tabSales Invoice[BT] WHERE group_same_items = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show a single invoice document with group same items enabled.",
      "fields": [
        "name",
        "group_same_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE group_same_items = 1 AND name LIKE '%SINV%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with group same items enabled and a specific customer.",
      "fields": [
        "name",
        "customer",
        "group_same_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer FROM [BT]tabSales Invoice[BT] WHERE group_same_items = 1 AND customer = 'ABC Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with group same items enabled and their edit printing settings.",
      "fields": [
        "name",
        "edit_printing_settings"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, edit_printing_settings FROM [BT]tabSales Invoice[BT] WHERE group_same_items = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if a specific invoice has group same items enabled.",
      "fields": [
        "name",
        "group_same_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, group_same_items FROM [BT]tabSales Invoice[BT] WHERE group_same_items = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices using a specific print heading, e.g., 'Invoice'.",
      "fields": [
        "name",
        "select_print_heading"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, select_print_heading FROM [BT]tabSales Invoice[BT] WHERE select_print_heading = 'Invoice' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices using any print heading.",
      "fields": [
        "select_print_heading"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE select_print_heading != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice uses a specific print heading, e.g., 'Proforma'.",
      "fields": [
        "select_print_heading"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE select_print_heading = 'Proforma' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the value of select print heading for a specific invoice.",
      "fields": [
        "select_print_heading"
      ]
    },
    "output": "frappe.db.sql('''SELECT select_print_heading FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices with their select print heading and customer.",
      "fields": [
        "name",
        "select_print_heading",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, select_print_heading, customer FROM [BT]tabSales Invoice[BT] WHERE select_print_heading != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with a specific print heading and their group same items setting.",
      "fields": [
        "name",
        "select_print_heading",
        "group_same_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, select_print_heading, group_same_items FROM [BT]tabSales Invoice[BT] WHERE select_print_heading = 'Invoice' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show a single invoice document using a specific print heading.",
      "fields": [
        "name",
        "select_print_heading"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, select_print_heading FROM [BT]tabSales Invoice[BT] WHERE select_print_heading = 'Invoice' AND name LIKE '%SINV%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with a specific print heading and a specific customer.",
      "fields": [
        "name",
        "select_print_heading",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, select_print_heading, customer FROM [BT]tabSales Invoice[BT] WHERE select_print_heading = 'Invoice' AND customer = 'ABC Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with select print heading and edit printing settings.",
      "fields": [
        "name",
        "select_print_heading",
        "edit_printing_settings"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, select_print_heading, edit_printing_settings FROM [BT]tabSales Invoice[BT] WHERE select_print_heading != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if a specific invoice uses a specific print heading.",
      "fields": [
        "select_print_heading",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, select_print_heading FROM [BT]tabSales Invoice[BT] WHERE select_print_heading = 'Invoice' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices using a specific language, e.g., 'English'.",
      "fields": [
        "name",
        "language"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, language FROM [BT]tabSales Invoice[BT] WHERE language = 'English' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices using any language.",
      "fields": [
        "language"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE language != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice uses a specific language, e.g., 'French'.",
      "fields": [
        "language"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE language = 'French' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the value of language for a specific invoice.",
      "fields": [
        "language"
      ]
    },
    "output": "frappe.db.sql('''SELECT language FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices with their language and customer.",
      "fields": [
        "name",
        "language",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, language, customer FROM [BT]tabSales Invoice[BT] WHERE language != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with a specific language and their status.",
      "fields": [
        "name",
        "language",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, language, status FROM [BT]tabSales Invoice[BT] WHERE language = 'English' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show a single invoice document using a specific language.",
      "fields": [
        "name",
        "language"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, language FROM [BT]tabSales Invoice[BT] WHERE language = 'English' AND name LIKE '%SINV%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with a specific language and a specific customer.",
      "fields": [
        "name",
        "language",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, language, customer FROM [BT]tabSales Invoice[BT] WHERE language = 'English' AND customer = 'ABC Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with language and select print heading.",
      "fields": [
        "name",
        "language",
        "select_print_heading"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, language, select_print_heading FROM [BT]tabSales Invoice[BT] WHERE language != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if a specific invoice uses a specific language.",
      "fields": [
        "language",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, language FROM [BT]tabSales Invoice[BT] WHERE language = 'English' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with a subscription set.",
      "fields": [
        "name",
        "subscription"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, subscription FROM [BT]tabSales Invoice[BT] WHERE subscription != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices with a subscription.",
      "fields": [
        "subscription"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE subscription != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice has a specific subscription, e.g., 'SUB-0001'.",
      "fields": [
        "subscription"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE subscription = 'SUB-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the value of subscription for a specific invoice.",
      "fields": [
        "subscription"
      ]
    },
    "output": "frappe.db.sql('''SELECT subscription FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices with their subscription and customer.",
      "fields": [
        "name",
        "subscription",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, subscription, customer FROM [BT]tabSales Invoice[BT] WHERE subscription != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with a specific subscription and their status.",
      "fields": [
        "name",
        "subscription",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, subscription, status FROM [BT]tabSales Invoice[BT] WHERE subscription = 'SUB-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show a single invoice document with a subscription.",
      "fields": [
        "name",
        "subscription"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, subscription FROM [BT]tabSales Invoice[BT] WHERE subscription != '' AND name LIKE '%SINV%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with a specific subscription and a specific customer.",
      "fields": [
        "name",
        "subscription",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, subscription, customer FROM [BT]tabSales Invoice[BT] WHERE subscription = 'SUB-0001' AND customer = 'ABC Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with subscription and their language.",
      "fields": [
        "name",
        "subscription",
        "language"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, subscription, language FROM [BT]tabSales Invoice[BT] WHERE subscription != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if a specific invoice has a specific subscription.",
      "fields": [
        "subscription"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, subscription FROM [BT]tabSales Invoice[BT] WHERE subscription = 'SUB-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with a from date set.",
      "fields": [
        "name",
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, from_date FROM [BT]tabSales Invoice[BT] WHERE from_date != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices with a from date after 2023-01-01.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE from_date > '2023-01-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice has a specific from date, e.g., '2024-01-01'.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE from_date = '2024-01-01' AND from_date = '2024-01-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the value of from date for a specific invoice.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT from_date FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices with their from date and customer.",
      "fields": [
        "name",
        "from_date",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, from_date, customer FROM [BT]tabSales Invoice[BT] WHERE from_date != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with a from date within a specific range, e.g., between 2023-01-01 and 2023-12-31.",
      "fields": [
        "name",
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, from_date FROM [BT]tabSales Invoice[BT] WHERE from_date between '['2023-01-01', '2023-12-31']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show a single invoice document with a from date.",
      "fields": [
        "name",
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, from_date FROM [BT]tabSales Invoice[BT] WHERE from_date != 'None' AND name LIKE '%SINV%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with a specific from date and a specific customer.",
      "fields": [
        "name",
        "from_date",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, from_date, customer FROM [BT]tabSales Invoice[BT] WHERE from_date = '2024-01-01' AND customer = 'ABC Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with from date and subscription.",
      "fields": [
        "name",
        "from_date",
        "subscription"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, from_date, subscription FROM [BT]tabSales Invoice[BT] WHERE from_date != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if a specific invoice has a from date after 2023-01-01.",
      "fields": [
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, from_date FROM [BT]tabSales Invoice[BT] WHERE from_date > '2023-01-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with a to date set.",
      "fields": [
        "name",
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, to_date FROM [BT]tabSales Invoice[BT] WHERE to_date != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices with a to date before 2024-12-31.",
      "fields": [
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE to_date < '2024-12-31' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice has a specific to date, e.g., '2024-06-30'.",
      "fields": [
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE to_date = '2024-06-30' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the value of to date for a specific invoice.",
      "fields": [
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT to_date FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices with their to date and customer.",
      "fields": [
        "name",
        "to_date",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, to_date, customer FROM [BT]tabSales Invoice[BT] WHERE to_date != 'None' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with a to date within a specific range, e.g., between 2023-01-01 and 2023-12-31.",
      "fields": [
        "name",
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, to_date FROM [BT]tabSales Invoice[BT] WHERE to_date between '['2023-01-01', '2023-12-31']' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show a single invoice document with a to date.",
      "fields": [
        "name",
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, to_date FROM [BT]tabSales Invoice[BT] WHERE to_date != 'None' AND name LIKE '%SINV%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with to date and auto repeat.",
      "fields": [
        "name",
        "to_date",
        "auto_repeat"
      ]
    },
    "output": "frappe.db.sql('''SELECT * FROM [BT]tabSales Invoice[BT] WHERE to_date != 'None' AND fields name 'to_date', 'auto_repeat' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if a specific invoice has a to date before 2024-12-31.",
      "fields": [
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, to_date FROM [BT]tabSales Invoice[BT] WHERE to_date < '2024-12-31' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with more information set.",
      "fields": [
        "name",
        "more_information"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, more_information FROM [BT]tabSales Invoice[BT] WHERE more_information != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices with more information.",
      "fields": [
        "more_information"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE more_information != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice has more information set.",
      "fields": [
        "more_information"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE more_information != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the value of more information for a specific invoice.",
      "fields": [
        "more_information"
      ]
    },
    "output": "frappe.db.sql('''SELECT more_information FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices with more information and update auto repeat reference.",
      "fields": [
        "name",
        "more_information",
        "update_auto_repeat_reference"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, more_information, update_auto_repeat_reference FROM [BT]tabSales Invoice[BT] WHERE more_information != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with more information and their auto repeat.",
      "fields": [
        "name",
        "more_information",
        "auto_repeat"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, more_information, auto_repeat FROM [BT]tabSales Invoice[BT] WHERE more_information != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show a single invoice document with more information.",
      "fields": [
        "name",
        "more_information"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, more_information FROM [BT]tabSales Invoice[BT] WHERE more_information != '' AND name LIKE '%SINV%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with more information and a specific auto repeat.",
      "fields": [
        "name",
        "more_information",
        "auto_repeat"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, more_information, auto_repeat FROM [BT]tabSales Invoice[BT] WHERE more_information != '' AND auto_repeat = 'AUTOREP-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with more information and their to date.",
      "fields": [
        "name",
        "more_information",
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, more_information, to_date FROM [BT]tabSales Invoice[BT] WHERE more_information != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if a specific invoice has more information set.",
      "fields": [
        "more_information"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, more_information FROM [BT]tabSales Invoice[BT] WHERE more_information != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with a specific status, e.g., 'Submitted'.",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status FROM [BT]tabSales Invoice[BT] WHERE status = 'Submitted' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices with status 'Draft'.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE status = 'Draft' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice has status 'Cancelled'.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE status = 'Cancelled' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the value of status for a specific invoice.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT status FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices with status 'Submitted' and customer.",
      "fields": [
        "name",
        "status",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, customer FROM [BT]tabSales Invoice[BT] WHERE status = 'Submitted' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with status 'Paid' and their to date.",
      "fields": [
        "name",
        "status",
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, to_date FROM [BT]tabSales Invoice[BT] WHERE status = 'Paid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show a single invoice document with status 'Submitted'.",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status FROM [BT]tabSales Invoice[BT] WHERE status = 'Submitted' AND name LIKE '%SINV%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with status 'Submitted' and a specific auto repeat.",
      "fields": [
        "name",
        "status",
        "auto_repeat"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, auto_repeat FROM [BT]tabSales Invoice[BT] WHERE status = 'Submitted' AND auto_repeat = 'AUTOREP-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with status 'Paid' and more information.",
      "fields": [
        "name",
        "status",
        "more_information"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, more_information FROM [BT]tabSales Invoice[BT] WHERE status = 'Paid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if a specific invoice has status 'Submitted'.",
      "fields": [
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status FROM [BT]tabSales Invoice[BT] WHERE status = 'Submitted' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with an inter company invoice reference set.",
      "fields": [
        "name",
        "inter_company_invoice_reference"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, inter_company_invoice_reference FROM [BT]tabSales Invoice[BT] WHERE inter_company_invoice_reference != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices with an inter company invoice reference.",
      "fields": [
        "inter_company_invoice_reference"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE inter_company_invoice_reference != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice has a specific inter company invoice reference, e.g., 'PUR-0001'.",
      "fields": [
        "inter_company_invoice_reference"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE inter_company_invoice_reference = 'PUR-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the value of inter company invoice reference for a specific invoice.",
      "fields": [
        "inter_company_invoice_reference"
      ]
    },
    "output": "frappe.db.sql('''SELECT inter_company_invoice_reference FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices with inter company invoice reference and status.",
      "fields": [
        "name",
        "inter_company_invoice_reference",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, inter_company_invoice_reference, status FROM [BT]tabSales Invoice[BT] WHERE inter_company_invoice_reference != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with inter company invoice reference and more information.",
      "fields": [
        "name",
        "inter_company_invoice_reference",
        "more_information"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, inter_company_invoice_reference, more_information FROM [BT]tabSales Invoice[BT] WHERE inter_company_invoice_reference != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show a single invoice document with inter company invoice reference.",
      "fields": [
        "name",
        "inter_company_invoice_reference"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, inter_company_invoice_reference FROM [BT]tabSales Invoice[BT] WHERE inter_company_invoice_reference != '' AND name LIKE '%SINV%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with inter company invoice reference and a specific status.",
      "fields": [
        "name",
        "inter_company_invoice_reference",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, inter_company_invoice_reference, status FROM [BT]tabSales Invoice[BT] WHERE inter_company_invoice_reference != '' AND status = 'Submitted' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with inter company invoice reference and their update auto repeat reference.",
      "fields": [
        "name",
        "inter_company_invoice_reference",
        "update_auto_repeat_reference"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, inter_company_invoice_reference, update_auto_repeat_reference FROM [BT]tabSales Invoice[BT] WHERE inter_company_invoice_reference != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if a specific invoice has an inter company invoice reference.",
      "fields": [
        "inter_company_invoice_reference"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, inter_company_invoice_reference FROM [BT]tabSales Invoice[BT] WHERE inter_company_invoice_reference != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices linked to a specific campaign, e.g., 'CAM-0001'.",
      "fields": [
        "name",
        "campaign"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, campaign FROM [BT]tabSales Invoice[BT] WHERE campaign = 'CAM-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices associated with any campaign.",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE campaign != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice is linked to a specific campaign, e.g., 'CAM-0001'.",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE campaign = 'CAM-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the value of campaign for a specific invoice.",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.db.sql('''SELECT campaign FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices with campaign and status.",
      "fields": [
        "name",
        "campaign",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, campaign, status FROM [BT]tabSales Invoice[BT] WHERE campaign != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with campaign and inter company invoice reference.",
      "fields": [
        "name",
        "campaign",
        "inter_company_invoice_reference"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, campaign, inter_company_invoice_reference FROM [BT]tabSales Invoice[BT] WHERE campaign != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show a single invoice document linked to a campaign.",
      "fields": [
        "name",
        "campaign"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, campaign FROM [BT]tabSales Invoice[BT] WHERE campaign != '' AND name LIKE '%SINV%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with campaign and a specific status.",
      "fields": [
        "name",
        "campaign",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, campaign, status FROM [BT]tabSales Invoice[BT] WHERE campaign != '' AND status = 'Submitted' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with campaign and more information.",
      "fields": [
        "name",
        "campaign",
        "more_information"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, campaign, more_information FROM [BT]tabSales Invoice[BT] WHERE campaign != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if a specific invoice is linked to a campaign.",
      "fields": [
        "campaign"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, campaign FROM [BT]tabSales Invoice[BT] WHERE campaign != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices representing a specific company, e.g., 'ABC Corp'.",
      "fields": [
        "name",
        "represents_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, represents_company FROM [BT]tabSales Invoice[BT] WHERE represents_company = 'ABC Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices representing any company.",
      "fields": [
        "represents_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE represents_company != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice represents a specific company, e.g., 'ABC Corp'.",
      "fields": [
        "represents_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE represents_company = 'ABC Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the value of represents company for a specific invoice.",
      "fields": [
        "represents_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT represents_company FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices representing a company and their status.",
      "fields": [
        "name",
        "represents_company",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, represents_company, status FROM [BT]tabSales Invoice[BT] WHERE represents_company != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices representing a company and their campaign.",
      "fields": [
        "name",
        "represents_company",
        "campaign"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, represents_company, campaign FROM [BT]tabSales Invoice[BT] WHERE represents_company != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show a single invoice document representing a company.",
      "fields": [
        "name",
        "represents_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, represents_company FROM [BT]tabSales Invoice[BT] WHERE represents_company != '' AND name LIKE '%SINV%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices representing a company and a specific status.",
      "fields": [
        "name",
        "represents_company",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, represents_company, status FROM [BT]tabSales Invoice[BT] WHERE represents_company != '' AND status = 'Submitted' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices representing a company and their inter company invoice reference.",
      "fields": [
        "name",
        "represents_company",
        "inter_company_invoice_reference"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, represents_company, inter_company_invoice_reference FROM [BT]tabSales Invoice[BT] WHERE represents_company != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if a specific invoice represents a company.",
      "fields": [
        "represents_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, represents_company FROM [BT]tabSales Invoice[BT] WHERE represents_company != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices created from a specific source, e.g., 'Sales Order'.",
      "fields": [
        "name",
        "source"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, source FROM [BT]tabSales Invoice[BT] WHERE source = 'Sales Order' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices created from any source.",
      "fields": [
        "source"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE source != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice is created from a specific source, e.g., 'Delivery Note'.",
      "fields": [
        "source"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE source = 'Delivery Note' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the value of source for a specific invoice.",
      "fields": [
        "source"
      ]
    },
    "output": "frappe.db.sql('''SELECT source FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices with source and represents company.",
      "fields": [
        "name",
        "source",
        "represents_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, source, represents_company FROM [BT]tabSales Invoice[BT] WHERE source != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with source and campaign.",
      "fields": [
        "name",
        "source",
        "campaign"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, source, campaign FROM [BT]tabSales Invoice[BT] WHERE source != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show a single invoice document created from a specific source.",
      "fields": [
        "name",
        "source"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, source FROM [BT]tabSales Invoice[BT] WHERE source != '' AND name LIKE '%SINV%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with source and a specific status.",
      "fields": [
        "name",
        "source",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, source, status FROM [BT]tabSales Invoice[BT] WHERE source != '' AND status = 'Submitted' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with source and inter company invoice reference.",
      "fields": [
        "name",
        "source",
        "inter_company_invoice_reference"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, source, inter_company_invoice_reference FROM [BT]tabSales Invoice[BT] WHERE source != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if a specific invoice is created from a source.",
      "fields": [
        "source"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, source FROM [BT]tabSales Invoice[BT] WHERE source != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices for a specific customer group, e.g., 'Individual'.",
      "fields": [
        "name",
        "customer_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_group FROM [BT]tabSales Invoice[BT] WHERE customer_group = 'Individual' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices for any customer group.",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE customer_group != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice belongs to a specific customer group, e.g., 'Individual'.",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE customer_group = 'Individual' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices for a customer group and campaign.",
      "fields": [
        "name",
        "customer_group",
        "campaign"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_group, campaign FROM [BT]tabSales Invoice[BT] WHERE customer_group != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices for a customer group and source.",
      "fields": [
        "name",
        "customer_group",
        "source"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_group, source FROM [BT]tabSales Invoice[BT] WHERE customer_group != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show a single invoice document for a customer group.",
      "fields": [
        "name",
        "customer_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_group FROM [BT]tabSales Invoice[BT] WHERE customer_group != '' AND name LIKE '%SINV%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices for a customer group and a specific represents_company.",
      "fields": [
        "name",
        "customer_group",
        "represents_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_group, represents_company FROM [BT]tabSales Invoice[BT] WHERE customer_group != '' AND represents_company = 'ABC Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices for a customer group and their inter company invoice reference.",
      "fields": [
        "name",
        "customer_group",
        "inter_company_invoice_reference"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_group, inter_company_invoice_reference FROM [BT]tabSales Invoice[BT] WHERE customer_group != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where is_internal_customer is set to 1 (True).",
      "fields": [
        "name",
        "is_internal_customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_internal_customer FROM [BT]tabSales Invoice[BT] WHERE is_internal_customer = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices where is_internal_customer is set to 1 (True).",
      "fields": [
        "is_internal_customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_internal_customer = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice has is_internal_customer set to 1 (True).",
      "fields": [
        "is_internal_customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE is_internal_customer = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices where is_internal_customer is set and customer is specified.",
      "fields": [
        "name",
        "is_internal_customer",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_internal_customer, customer FROM [BT]tabSales Invoice[BT] WHERE is_internal_customer = 1 AND customer != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where is_internal_customer is set and customer_group is specified.",
      "fields": [
        "name",
        "is_internal_customer",
        "customer_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_internal_customer, customer_group FROM [BT]tabSales Invoice[BT] WHERE is_internal_customer = 1 AND customer_group != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show a single invoice document where is_internal_customer is set.",
      "fields": [
        "name",
        "is_internal_customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_internal_customer FROM [BT]tabSales Invoice[BT] WHERE is_internal_customer = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices where is_internal_customer is set and company is specified.",
      "fields": [
        "name",
        "is_internal_customer",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_internal_customer, company FROM [BT]tabSales Invoice[BT] WHERE is_internal_customer = 1 AND company != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where is_internal_customer is set and source is specified.",
      "fields": [
        "name",
        "is_internal_customer",
        "source"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_internal_customer, source FROM [BT]tabSales Invoice[BT] WHERE is_internal_customer = 1 AND source != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where is_discounted is set to 1 (True).",
      "fields": [
        "name",
        "is_discounted"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_discounted FROM [BT]tabSales Invoice[BT] WHERE is_discounted = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices where is_discounted is set to 1 (True).",
      "fields": [
        "is_discounted"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE is_discounted = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice has is_discounted set to 1 (True).",
      "fields": [
        "is_discounted"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE is_discounted = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices where is_discounted is set and customer is specified.",
      "fields": [
        "name",
        "is_discounted",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_discounted, customer FROM [BT]tabSales Invoice[BT] WHERE is_discounted = 1 AND customer != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where is_discounted is set and discount_amount is greater than 0.",
      "fields": [
        "name",
        "is_discounted",
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_discounted, discount_amount FROM [BT]tabSales Invoice[BT] WHERE is_discounted = 1 AND discount_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show a single invoice document where is_discounted is set.",
      "fields": [
        "name",
        "is_discounted"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_discounted FROM [BT]tabSales Invoice[BT] WHERE is_discounted = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices where is_discounted is set and grand_total is above a certain value, e.g., 1000.",
      "fields": [
        "name",
        "is_discounted",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_discounted, grand_total FROM [BT]tabSales Invoice[BT] WHERE is_discounted = 1 AND grand_total > 1000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where is_discounted is set and source is specified.",
      "fields": [
        "name",
        "is_discounted",
        "source"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_discounted, source FROM [BT]tabSales Invoice[BT] WHERE is_discounted = 1 AND source != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with update auto repeat reference set.",
      "fields": [
        "name",
        "update_auto_repeat_reference"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_auto_repeat_reference FROM [BT]tabSales Invoice[BT] WHERE update_auto_repeat_reference = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices with update auto repeat reference enabled.",
      "fields": [
        "update_auto_repeat_reference"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE update_auto_repeat_reference = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice has update auto repeat reference enabled.",
      "fields": [
        "update_auto_repeat_reference"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE update_auto_repeat_reference = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get the value of update auto repeat reference for a specific invoice.",
      "fields": [
        "update_auto_repeat_reference"
      ]
    },
    "output": "frappe.db.sql('''SELECT update_auto_repeat_reference FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices with update auto repeat reference and auto repeat.",
      "fields": [
        "name",
        "update_auto_repeat_reference",
        "auto_repeat"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_auto_repeat_reference, auto_repeat FROM [BT]tabSales Invoice[BT] WHERE update_auto_repeat_reference = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with update auto repeat reference and their from date.",
      "fields": [
        "name",
        "update_auto_repeat_reference",
        "from_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_auto_repeat_reference, from_date FROM [BT]tabSales Invoice[BT] WHERE update_auto_repeat_reference = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show a single invoice document with update auto repeat reference enabled.",
      "fields": [
        "name",
        "update_auto_repeat_reference"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_auto_repeat_reference FROM [BT]tabSales Invoice[BT] WHERE update_auto_repeat_reference = 1 AND name LIKE '%SINV%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with update auto repeat reference and a specific auto repeat.",
      "fields": [
        "name",
        "update_auto_repeat_reference",
        "auto_repeat"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_auto_repeat_reference, auto_repeat FROM [BT]tabSales Invoice[BT] WHERE update_auto_repeat_reference = 1 AND auto_repeat = 'AUTOREP-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices with update auto repeat reference and their to date.",
      "fields": [
        "name",
        "update_auto_repeat_reference",
        "to_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, update_auto_repeat_reference, to_date FROM [BT]tabSales Invoice[BT] WHERE update_auto_repeat_reference = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if a specific invoice has update auto repeat reference enabled.",
      "fields": [
        "update_auto_repeat_reference"
      ]
    },
    "output": "frappe.db.sql('''SELECT update_auto_repeat_reference FROM [BT]tabSales Invoice[BT] WHERE name = 'SINV-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices where remarks is not empty.",
      "fields": [
        "name",
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, remarks FROM [BT]tabSales Invoice[BT] WHERE remarks != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Count invoices where remarks is not empty.",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSales Invoice[BT] WHERE remarks != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Check if any invoice has remarks set.",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) > 0 as exists FROM [BT]tabSales Invoice[BT] WHERE remarks != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Retrieve invoices where remarks is not empty and customer is specified.",
      "fields": [
        "name",
        "remarks",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, remarks, customer FROM [BT]tabSales Invoice[BT] WHERE remarks != '' AND customer != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices where remarks is not empty and customer_name is specified.",
      "fields": [
        "name",
        "remarks",
        "customer_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, remarks, customer_name FROM [BT]tabSales Invoice[BT] WHERE remarks != '' AND customer_name != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show a single invoice document where remarks is not empty.",
      "fields": [
        "name",
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, remarks FROM [BT]tabSales Invoice[BT] WHERE remarks != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices where remarks are filled and the posting date is after '2023-01-01'.",
      "fields": [
        "name",
        "remarks",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, remarks, posting_date FROM [BT]tabSales Invoice[BT] WHERE remarks != '' AND posting_date > '2023-01-01' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices that have additional remarks and also mention a source of the order.",
      "fields": [
        "name",
        "remarks",
        "source"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, remarks, source FROM [BT]tabSales Invoice[BT] WHERE remarks != '' AND source != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all invoices linked with a project code.",
      "fields": [
        "name",
        "customer",
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, project FROM [BT]tabSales Invoice[BT] WHERE project IS NOT NULL AND project != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices where customers have given feedback in remarks.",
      "fields": [
        "name",
        "customer",
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, remarks FROM [BT]tabSales Invoice[BT] WHERE remarks != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with a due date that has already passed.",
      "fields": [
        "name",
        "customer",
        "due_date",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, due_date, status FROM [BT]tabSales Invoice[BT] WHERE due_date < CURDATE() AND status != 'Paid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with high total amounts, for example above 1,00,000.",
      "fields": [
        "name",
        "customer",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, grand_total FROM [BT]tabSales Invoice[BT] WHERE grand_total > 100000 ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices created by the Administrator user.",
      "fields": [
        "name",
        "owner",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, owner, posting_date FROM [BT]tabSales Invoice[BT] WHERE owner = 'Administrator' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices were last modified in the past 7 days?",
      "fields": [
        "name",
        "modified",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, modified, customer FROM [BT]tabSales Invoice[BT] WHERE modified >= DATE_SUB(CURDATE(), INTERVAL 7 DAY) ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices linked with a specific customer project, for example project 'PR-0001'.",
      "fields": [
        "name",
        "customer",
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, project FROM [BT]tabSales Invoice[BT] WHERE project = 'PR-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices generated during the blackout period.",
      "fields": [
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE 1=0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices where signature is in blue ink.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE 1=0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices marked with emotional tone like 'apology' or 'thank you'.",
      "fields": [
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSales Invoice[BT] WHERE 1=0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "List all quotations associated with project PROJ-001.",
      "fields": [
        "name",
        "supplier",
        "project",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, project, transaction_date FROM [BT]tabSupplier Quotation[BT] WHERE project = 'PROJ-001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Show all quotations with discount amount greater than 1000.",
      "fields": [
        "name",
        "discount_amount",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, discount_amount, grand_total FROM [BT]tabSupplier Quotation[BT] WHERE discount_amount > 1000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Get the buying price list and price list currency for quotation SQ-2025-0012.",
      "fields": [
        "buying_price_list",
        "price_list_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT buying_price_list, price_list_currency FROM [BT]tabSupplier Quotation[BT] WHERE name = 'SQ-2025-0012' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which quotations are using the letter head 'Main Company Header'?",
      "fields": [
        "name",
        "letter_head"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, letter_head FROM [BT]tabSupplier Quotation[BT] WHERE letter_head = 'Main Company Header' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "List all quotations with status 'Submitted' and grand total above 50,000.",
      "fields": [
        "name",
        "status",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, grand_total FROM [BT]tabSupplier Quotation[BT] WHERE status = 'Submitted' AND grand_total > 50000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which quotations were sent to address 'SUP-ADDR-002'?",
      "fields": [
        "name",
        "supplier_address"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_address FROM [BT]tabSupplier Quotation[BT] WHERE supplier_address = 'SUP-ADDR-002' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Get total quantity and total net weight of quotation SQ-2025-0067.",
      "fields": [
        "total_qty",
        "total_net_weight"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_qty, total_net_weight FROM [BT]tabSupplier Quotation[BT] WHERE name = 'SQ-2025-0067' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "List quotations where PLC conversion rate is less than 1.",
      "fields": [
        "name",
        "plc_conversion_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, plc_conversion_rate FROM [BT]tabSupplier Quotation[BT] WHERE plc_conversion_rate < 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which quotations follow payment terms 'Net 30'?",
      "fields": [
        "name",
        "tc_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tc_name FROM [BT]tabSupplier Quotation[BT] WHERE tc_name = 'Net 30' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customer purchased the most pens last month?",
      "fields": [
        "name",
        "customer_name",
        "total_qty",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT si.customer, sii.customer_name, SUM(sii.total_qty) AS total_qty FROM [BT]tabSales Invoice Item[BT] sii JOIN [BT]tabSales Invoice[BT] si ON sii.name = si.name WHERE sii.customer_name = 'Pen' AND si.posting_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE() GROUP BY si.customer ORDER BY total_qty DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which suppliers have submitted quotations where the net total exceeds 1 million?",
      "fields": [
        "supplier",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, net_total FROM [BT]tabSupplier Quotation[BT] WHERE net_total > 1000000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Contact"
      ],
      "question": "Find all contacts with both phone and mobile numbers.",
      "fields": [
        "name",
        "phone",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT phone, mobile_no FROM [BT]tabContact[BT] WHERE phone != '' AND mobile_no != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Contact"
      ],
      "question": "Find all contacts with middle name 'Hassan' and last name starting with 'Ali'.",
      "fields": [
        "name",
        "middle_name",
        "last_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, middle_name, last_name FROM [BT]tabContact[BT] WHERE middle_name LIKE '%Hassan%' AND last_name LIKE 'Ali%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Contact"
      ],
      "question": "List all contacts that have both email and phone details filled in.",
      "fields": [
        "name",
        "email_id",
        "phone"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, email_id, phone FROM [BT]tabContact[BT] WHERE email_id != '' AND phone != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Show employees whose first name starts with 'Mohd' and are part of the Sales department.",
      "fields": [
        "name",
        "first_name",
        "department"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, first_name, department FROM [BT]tabEmployee[BT] WHERE first_name LIKE 'Mohd%' AND department LIKE '%Sales%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Which purchase orders have a grand total greater than 50,000?",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total FROM [BT]tabPurchase Order[BT] WHERE grand_total > 50000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "List quotations where the PLC conversion rate is more than 1.2.",
      "fields": [
        "name",
        "plc_conversion_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, plc_conversion_rate FROM [BT]tabSupplier Quotation[BT] WHERE plc_conversion_rate > 1.2''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which quotations have additional discount percentages above 15%?",
      "fields": [
        "name",
        "additional_discount_percentage",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, additional_discount_percentage, supplier FROM [BT]tabSupplier Quotation[BT] WHERE additional_discount_percentage > 15''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Get quotations with shipping rules applied as 'Express Delivery'.",
      "fields": [
        "name",
        "shipping_rule"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, shipping_rule FROM [BT]tabSupplier Quotation[BT] WHERE shipping_rule = 'Express Delivery' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Show supplier quotations where language is set to French.",
      "fields": [
        "name",
        "language",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, language, supplier FROM [BT]tabSupplier Quotation[BT] WHERE language = 'fr' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which quotations were amended from a previous one?",
      "fields": [
        "name",
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, amended_from FROM [BT]tabSupplier Quotation[BT] WHERE amended_from != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "List quotations with incoterm specified as FOB.",
      "fields": [
        "name",
        "incoterm"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, incoterm FROM [BT]tabSupplier Quotation[BT] WHERE incoterm = 'FOB' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "How many quotations are grouped by items?",
      "fields": [
        "name",
        "group_same_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabSupplier Quotation[BT] WHERE group_same_items = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which quotations have tax category 'Import Duty'?",
      "fields": [
        "name",
        "tax_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_category FROM [BT]tabSupplier Quotation[BT] WHERE tax_category = 'Import Duty' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Find quotations where supplier email was provided as contact@example.com.",
      "fields": [
        "name",
        "contact_email"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, contact_email FROM [BT]tabSupplier Quotation[BT] WHERE contact_email = 'contact@example.com' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which supplier gave the highest quotation for mangoes this year?",
      "fields": [
        "supplier",
        "grand_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, grand_total, transaction_date FROM [BT]tabSupplier Quotation[BT] WHERE YEAR(transaction_date) = YEAR(CURDATE()) AND name IN (SELECT parent FROM [BT]tabSupplier Quotation Item[BT] WHERE item_name = 'Mango') ORDER BY grand_total DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "How many quotations were submitted per supplier in the last quarter?",
      "fields": [
        "supplier",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, COUNT(name) AS quotation_count FROM [BT]tabSupplier Quotation[BT] WHERE QUARTER(transaction_date) = QUARTER(CURDATE() - INTERVAL 1 QUARTER) AND YEAR(transaction_date) = YEAR(CURDATE()) GROUP BY supplier ORDER BY quotation_count DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "What is the average conversion rate for USD quotations this year?",
      "fields": [
        "conversion_rate",
        "currency",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT AVG(conversion_rate) AS avg_rate, transaction_date FROM [BT]tabSupplier Quotation[BT] WHERE currency = 'USD' AND YEAR(transaction_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which project received the most supplier quotations this year?",
      "fields": [
        "project",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT project, COUNT(name) AS quote_count FROM [BT]tabSupplier Quotation[BT] WHERE YEAR(transaction_date) = YEAR(CURDATE()) AND project IS NOT NULL GROUP BY project ORDER BY quote_count DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Compare grand total vs net total differences across all quotations this month.",
      "fields": [
        "name",
        "grand_total",
        "net_total",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, grand_total, net_total, transaction_date, (grand_total - net_total) AS difference FROM [BT]tabSupplier Quotation[BT] WHERE MONTH(transaction_date) = MONTH(CURDATE()) AND YEAR(transaction_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Find suppliers whose quotations exceeded 500,000 in total taxes and charges.",
      "fields": [
        "supplier",
        "total_taxes_and_charges"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, total_taxes_and_charges FROM [BT]tabSupplier Quotation[BT] WHERE total_taxes_and_charges > 500000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "List supplier quotations linked to Opportunity-2024-009 that are still open.",
      "fields": [
        "opportunity",
        "status",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, status FROM [BT]tabSupplier Quotation[BT] WHERE opportunity = 'Opportunity-2024-009' AND status = 'Draft' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "How many suppliers used a custom terms and conditions template?",
      "fields": [
        "tc_name",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(DISTINCT supplier) FROM [BT]tabSupplier Quotation[BT] WHERE tc_name IS NOT NULL AND tc_name != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Can you compare the gross profit for the last 8 quarters?",
      "fields": [
        "posting_date",
        "gross_profit"
      ]
    },
    "output": "frappe.db.sql('''SELECT CONCAT(YEAR(posting_date), '-Q', QUARTER(posting_date)) AS quarter, SUM(gross_profit) AS total_gp FROM [BT]tabSales Invoice[BT] WHERE docstatus = 1 GROUP BY quarter ORDER BY quarter DESC LIMIT 8''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Journal Entry"
      ],
      "question": "How much we lost due to exchange rate variation last year?",
      "fields": [
        "pay_to_recd_from",
        "total_debit",
        "total_credit",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(total_debit - total_credit) AS fx_loss FROM [BT]tabJournal Entry Account[BT] WHERE pay_to_recd_from LIKE '%Exchange Loss%' AND YEAR(posting_date) = YEAR(CURDATE()) - 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item Price"
      ],
      "question": "How much price increase happened for Mangos in the last 5 years?",
      "fields": [
        "item_code",
        "price_list_rate",
        "valid_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code, MIN(price_list_rate) AS min_price, MAX(price_list_rate) AS max_price, (MAX(price_list_rate) - MIN(price_list_rate)) AS difference FROM [BT]tabItem Price[BT] WHERE item_code = 'Mango' AND valid_from >= DATE_SUB(CURDATE(), INTERVAL 5 YEAR, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Which product had the highest return rate last quarter?",
      "fields": [
        "title",
        "total_qty",
        "0"
      ]
    },
    "output": "frappe.db.sql('''SELECT title, SUM(0)/SUM(total_qty) AS return_rate FROM [BT]tabSales Order Item[BT] WHERE posting_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 3 MONTH) AND CURDATE() GROUP BY title ORDER BY return_rate DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Compare monthly spending on imported raw materials over the last year.",
      "fields": [
        "supplier",
        "posting_date",
        "total",
        "supplier_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT DATE_FORMAT(posting_date, '%Y-%m''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "How much did we spend in cash vs bank in the last 6 months?",
      "fields": [
        "paid_from",
        "paid_amount",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT paid_from, SUM(paid_amount) AS total FROM [BT]tabPayment Entry[BT] WHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH) GROUP BY paid_from''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "What was the average delivery time for each supplier this year?",
      "fields": [
        "supplier",
        "transaction_date",
        "schedule_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, transaction_date, schedule_date, AVG(DATEDIFF(schedule_date, transaction_date)) AS avg_days FROM [BT]tabPurchase Order[BT] WHERE YEAR(transaction_date) = YEAR(CURDATE()) GROUP BY supplier''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Which customer placed the highest number of orders in Q2 this year?",
      "fields": [
        "customer",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer, transaction_date, COUNT(name) AS order_count FROM [BT]tabSales Order[BT] WHERE QUARTER(transaction_date) = 2 AND YEAR(transaction_date) = YEAR(CURDATE()) GROUP BY customer ORDER BY order_count DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "How much stock value was written off in the past 3 years?",
      "fields": [
        "item_code",
        "valuation_rate",
        "qty",
        "voucher_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(valuation_rate * qty) AS writeoff_value FROM [BT]tabStock Ledger Entry[BT] WHERE voucher_type = 'Stock Reconciliation' AND qty < 0 AND posting_date >= DATE_SUB(CURDATE(), INTERVAL 3 YEAR, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which quotations have a discount above 5% and a total greater than 5000?",
      "fields": [
        "name",
        "additional_discount_percentage",
        "total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, additional_discount_percentage, total FROM [BT]tabSupplier Quotation[BT] WHERE additional_discount_percentage > 5 AND total > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "List quotations where incoterm is 'FOB' and taxes and charges are defined.",
      "fields": [
        "name",
        "incoterm",
        "taxes_and_charges"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, incoterm, taxes_and_charges FROM [BT]tabSupplier Quotation[BT] WHERE incoterm = 'FOB' AND taxes_and_charges != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Fetch all quotations by supplier 'Alfa Traders' with cost center 'Main - C' and project 'Infra 2025'.",
      "fields": [
        "name",
        "supplier",
        "cost_center",
        "project"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, cost_center, project FROM [BT]tabSupplier Quotation[BT] WHERE supplier = 'Alfa Traders' AND cost_center = 'Main - C' AND project = 'Infra 2025' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Show quotations that were modified after creation and have a rounding adjustment.",
      "fields": [
        "name",
        "creation",
        "modified",
        "rounding_adjustment"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, creation, modified, rounding_adjustment FROM [BT]tabSupplier Quotation[BT] WHERE modified > creation AND rounding_adjustment IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Find quotations where currency is EUR but price list currency is USD.",
      "fields": [
        "name",
        "currency",
        "price_list_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, currency, price_list_currency FROM [BT]tabSupplier Quotation[BT] WHERE currency = 'EUR' AND price_list_currency = 'USD' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which quotations have address 'SUP-ADDR-001' and contact email provided?",
      "fields": [
        "name",
        "supplier_address",
        "contact_email"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_address, contact_email FROM [BT]tabSupplier Quotation[BT] WHERE supplier_address = 'SUP-ADDR-001' AND contact_email != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which quotations are linked to opportunity 'OPTY-0005' and have net total over 20000?",
      "fields": [
        "name",
        "opportunity",
        "net_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, opportunity, net_total FROM [BT]tabSupplier Quotation[BT] WHERE opportunity = 'OPTY-0005' AND net_total > 20000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Get contact email and phone number for quotation SQ-2025-0045.",
      "fields": [
        "contact_email",
        "contact_mobile"
      ]
    },
    "output": "frappe.db.sql('''SELECT contact_email, contact_mobile FROM [BT]tabSupplier Quotation[BT] WHERE name = 'SQ-2025-0045' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Find all quotations where the Incoterm is 'FOB' and named place is 'Dubai Port'.",
      "fields": [
        "name",
        "incoterm",
        "named_place"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, incoterm, named_place FROM [BT]tabSupplier Quotation[BT] WHERE incoterm = 'FOB' AND named_place = 'Dubai Port' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Show quotations that include taxes above 5000.",
      "fields": [
        "name",
        "total_taxes_and_charges"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, total_taxes_and_charges FROM [BT]tabSupplier Quotation[BT] WHERE total_taxes_and_charges > 5000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Retrieve address and shipping address for SQ-2025-0021.",
      "fields": [
        "address_display",
        "shipping_address_display"
      ]
    },
    "output": "frappe.db.sql('''SELECT address_display, shipping_address_display FROM [BT]tabSupplier Quotation[BT] WHERE name = 'SQ-2025-0021' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Count how many quotations have the status 'Expired'.",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) as count FROM [BT]tabSupplier Quotation[BT] WHERE status = 'Expired' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "What was the grand total of the latest quotation from Acme Corp?",
      "fields": [
        "grand_total",
        "supplier",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT grand_total FROM [BT]tabSupplier Quotation[BT] WHERE supplier = %s ORDER BY transaction_date DESC LIMIT 1\"\"\", ('Acme Corp',,as_dict=True),as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Get the total amount and discount applied on SQ-2025-0012.",
      "fields": [
        "name",
        "grand_total",
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT grand_total, discount_amount FROM [BT]tabSupplier Quotation[BT] WHERE name = 'SQ-2025-0012' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "List quotations with grand total above 100000 and not yet approved.",
      "fields": [
        "name",
        "supplier",
        "grand_total",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, grand_total, status FROM [BT]tabSupplier Quotation[BT] WHERE grand_total > 100000 AND status != 'Approved' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier Quotation"
      ],
      "question": "Which suppliers have submitted quotations for the Mango Supply Project?",
      "fields": [
        "supplier",
        "project"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT DISTINCT supplier FROM [BT]tabSupplier Quotation[BT] WHERE project = %s\"\"\", ('Mango Supply Project',,as_dict=True),as_dict=True)"
  },
  {
    "input": {
      "question": "List all active BOMs for item 'WIDGET-001'.",
      "doctype": [
        "BOM"
      ],
      "fields": [
        "name",
        "item",
        "item_name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item, item_name, creation FROM [BT]tabBOM[BT] WHERE item = 'WIDGET-001' AND is_active = 1 ORDER BY creation DESC''', as_dict=True)"
  },
  {
    "input": {
      "question": "What is the total raw material cost for each item with an active BOM?",
      "doctype": [
        "BOM"
      ],
      "fields": [
        "item",
        "item_name",
        "base_raw_material_cost"
      ]
    },
    "output": "frappe.db.sql('''SELECT item, item_name, SUM(base_raw_material_cost,as_dict=True) AS total_raw_material_cost FROM [BT]tabBOM[BT] WHERE is_active = 1 GROUP BY item, item_name ORDER BY total_raw_material_cost DESC''', as_dict=True)"
  },
  {
    "input": {
      "question": "List all BOMs created in the last 30 days, including their creation date and total cost.",
      "doctype": [
        "BOM"
      ],
      "fields": [
        "name",
        "item",
        "creation",
        "base_total_cost"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item, creation, base_total_cost FROM [BT]tabBOM[BT] WHERE creation >= DATE_SUB(CURDATE(,as_dict=True), INTERVAL 30 DAY,as_dict=True) ORDER BY creation DESC''', as_dict=True)"
  },
  {
    "input": {
      "question": "Which BOMs have more than 5 items in their items table?",
      "doctype": [
        "BOM"
      ],
      "fields": [
        "name",
        "item"
      ]
    },
    "output": "frappe.db.sql('''SELECT b.name, b.item FROM [BT]tabBOM[BT] b JOIN [BT]tabBOM Item[BT] bi ON bi.parent = b.name GROUP BY b.name, b.item HAVING COUNT(bi.name,as_dict=True) > 5 ORDER BY COUNT(bi.name,as_dict=True) DESC''', as_dict=True)"
  },
  {
    "input": {
      "question": "Which BOMs have a process loss percentage greater than 2%?",
      "doctype": [
        "BOM"
      ],
      "fields": [
        "name",
        "item",
        "process_loss_percentage"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item, process_loss_percentage FROM [BT]tabBOM[BT] WHERE process_loss_percentage > 2 ORDER BY process_loss_percentage DESC''', as_dict=True)"
  },
  {
    "input": {
      "question": "List all BOMs that are shown on the website along with their route.",
      "doctype": [
        "BOM"
      ],
      "fields": [
        "name",
        "item",
        "route"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item, route FROM [BT]tabBOM[BT] WHERE show_in_website = 1 ORDER BY item''', as_dict=True)"
  },
  {
    "input": {
      "question": "Which BOMs require quality inspection and what are their inspection templates?",
      "doctype": [
        "BOM"
      ],
      "fields": [
        "name",
        "item",
        "quality_inspection_template"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item, quality_inspection_template FROM [BT]tabBOM[BT] WHERE inspection_required = 1 AND quality_inspection_template IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "question": "What is the total operating cost for all BOMs created this year?",
      "doctype": [
        "BOM"
      ],
      "fields": [
        "name",
        "operating_cost"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(operating_cost) AS total_operating_cost FROM [BT]tabBOM[BT] WHERE YEAR(creation) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "question": "Which BOMs are not active and what is their last modified date?",
      "doctype": [
        "BOM"
      ],
      "fields": [
        "name",
        "item",
        "modified"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item, modified FROM [BT]tabBOM[BT] WHERE is_active = 0 ORDER BY modified DESC''', as_dict=True)"
  },
  {
    "input": {
      "question": "Which BOMs use a routing and what is the associated routing name?",
      "doctype": [
        "BOM"
      ],
      "fields": [
        "name",
        "item",
        "routing"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item, routing FROM [BT]tabBOM[BT] WHERE routing IS NOT NULL AND routing != '' ORDER BY routing''', as_dict=True)"
  },
  {
    "input": {
      "question": "List BOMs that have exploded items and show the count of exploded items per BOM.",
      "doctype": [
        "BOM"
      ],
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT parent AS bom_name, COUNT(*,as_dict=True) AS exploded_item_count FROM [BT]tabBOM Exploded Item[BT] GROUP BY parent ORDER BY exploded_item_count DESC''', as_dict=True)"
  },
  {
    "input": {
      "question": "Which BOMs have a process loss quantity greater than zero?",
      "doctype": [
        "BOM"
      ],
      "fields": [
        "name",
        "item",
        "process_loss_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item, process_loss_qty FROM [BT]tabBOM[BT] WHERE process_loss_qty > 0 ORDER BY process_loss_qty DESC''', as_dict=True)"
  },
  {
    "input": {
      "question": "What is the total scrap material cost for all BOMs in the system?",
      "doctype": [
        "BOM"
      ],
      "fields": [
        "scrap_material_cost"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(scrap_material_cost,as_dict=True) AS total_scrap_cost FROM [BT]tabBOM[BT]''', as_dict=True)"
  },
  {
    "input": {
      "question": "Which BOMs are set as default and marked active for each item?",
      "doctype": [
        "BOM"
      ],
      "fields": [
        "name",
        "item",
        "is_default",
        "is_active"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item, is_default, is_active FROM [BT]tabBOM[BT] WHERE is_default = 1 AND is_active = 1 ORDER BY item''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Which sales team members generated the highest revenue last quarter?",
      "fields": [
        "name",
        "total",
        "transaction_date",
        "docstatus",
        "sales_person"
      ]
    },
    "output": "frappe.db.sql('''SELECT st.sales_person, SUM(so.total) AS total_revenue FROM [BT]tabSales Order[BT] so JOIN [BT]tabSales Team[BT] st ON st.parent = so.name WHERE so.docstatus = 1  AND so.transaction_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH) GROUP BY st.sales_person ORDER BY total_revenue DESC LIMIT 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the monthly sales trend for the last year?",
      "fields": [
        "posting_date",
        "total",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT DATE_FORMAT(posting_date, '%Y-%m''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "List all customers with pending sales orders.",
      "fields": [
        "customer",
        "status",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT customer FROM [BT]tabSales Order[BT] WHERE docstatus = 1 AND status = 'To Deliver and Bill''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Which sales orders have the highest discount applied?",
      "fields": [
        "discount_amount",
        "additional_discount_percentage",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, discount_amount, additional_discount_percentage FROM [BT]tabSales Order[BT] WHERE docstatus = 1 ORDER BY discount_amount DESC, additional_discount_percentage DESC LIMIT 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "How many sales orders are delayed beyond expected delivery date?",
      "fields": [
        "delivery_date",
        "status",
        "transaction_date",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS delayed_orders_count FROM [BT]tabSales Order[BT] WHERE docstatus = 1 AND status != 'Completed' AND delivery_date < CURDATE(, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "What is the average delivery time for sales orders?",
      "fields": [
        "transaction_date",
        "delivery_date",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT AVG(DATEDIFF(delivery_date, transaction_date)) AS avg_delivery_days FROM [BT]tabSales Order[BT] WHERE docstatus = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List purchase orders with partial delivery.",
      "fields": [
        "per_received",
        "status",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, per_received, status FROM [BT]tabPurchase Order[BT] WHERE docstatus = 1 AND per_received > 0 AND per_received < 100''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What is the payment status of purchase invoices by supplier?",
      "fields": [
        "supplier",
        "is_paid",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier, is_paid FROM [BT]tabPurchase Invoice[BT] WHERE docstatus = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items have the longest supplier lead times?",
      "fields": [
        "item_code",
        "item_name",
        "lead_time_days",
        "supplier_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code, item_name, lead_time_days FROM [BT]tabItem[BT] ORDER BY lead_time_days DESC LIMIT 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What is the total purchase return value this year?",
      "fields": [
        "is_return",
        "total",
        "posting_date",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(total) AS total_purchase_return FROM [BT]tabPurchase Invoice[BT] WHERE docstatus = 1 AND is_return = 1 AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "List purchase orders pending receipt of goods.",
      "fields": [
        "name",
        "status",
        "per_received",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, per_received FROM [BT]tabPurchase Order[BT] WHERE docstatus = 1 AND (status = 'To Receive and Bill' OR per_received < 100, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "How many purchase invoices are overdue for payment?",
      "fields": [
        "due_date",
        "status",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS overdue_invoices_count FROM [BT]tabPurchase Invoice[BT] WHERE docstatus = 1 AND due_date < CURDATE() AND status != 'Paid''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Which suppliers have the best on-time delivery performance?",
      "fields": [
        "name",
        "supplier",
        "posting_date",
        "due_date",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, posting_date, due_date FROM [BT]tabPurchase Invoice[BT] WHERE docstatus = 1 ORDER BY CASE WHEN posting_date <= due_date THEN 0 ELSE 1 END, posting_date''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "What is the average purchase order value?",
      "fields": [
        "total",
        "base_total",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT AVG(total) AS avg_total, AVG(base_total) AS avg_base_total FROM [BT]tabPurchase Invoice[BT] WHERE docstatus = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "List warehouses with negative stock balances.",
      "fields": [
        "name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, disabled FROM [BT]tabWarehouse[BT] WHERE stock_balance < 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items have the highest holding cost?",
      "fields": [
        "name",
        "valuation_rate",
        "standard_rate"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, valuation_rate, standard_rate FROM [BT]tabItem[BT] ORDER BY standard_rate DESC, valuation_rate DESC LIMIT 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "How many stock reconciliation entries were made last month?",
      "fields": [
        "name",
        "posting_date",
        "is_adjustment_entry",
        "voucher_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS reconciliation_count FROM [BT]tabStock Ledger Entry[BT] WHERE is_adjustment_entry = 1 AND voucher_type = 'Stock Reconciliation' AND posting_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND posting_date < CURDATE() AND docstatus = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "What is the total quantity of damaged stock?",
      "fields": [
        "name",
        "actual_qty",
        "is_adjustment_entry",
        "posting_date",
        "voucher_type",
        "warehouse",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, actual_qty, is_adjustment_entry, posting_date, voucher_type, warehouse FROM [BT]tabStock Ledger Entry[BT] WHERE is_adjustment_entry = 1 AND docstatus = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "How many stock reconciliations were made in the last month?",
      "fields": [
        "name",
        "is_adjustment_entry",
        "voucher_type",
        "posting_date",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, COUNT(name) AS reconciliation_count FROM [BT]tabStock Ledger Entry[BT] WHERE is_adjustment_entry = 1 AND voucher_type = 'Stock Reconciliation' AND posting_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND posting_date < CURDATE() AND docstatus = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items with expiry dates within next X days.",
      "fields": [
        "name",
        "has_expiry_date",
        "end_of_life"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, has_expiry_date, end_of_life FROM [BT]tabItem[BT] WHERE has_expiry_date = 1 AND end_of_life <= DATE_ADD(CURDATE(), INTERVAL X DAY, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouses have the highest stock discrepancies?",
      "fields": [
        "name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT w.name, w.disabled, (COALESCE(b.actual_qty, 0) - COALESCE(b.projected_qty, 0)) AS stock_discrepancy FROM [BT]tabWarehouse[BT] w LEFT JOIN [BT]tabBin[BT] b ON b.warehouse = w.name ORDER BY stock_discrepancy DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "What is the turnover rate for key inventory items?",
      "fields": [
        "name",
        "item_code",
        "posting_date",
        "actual_qty",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code, warehouse, COUNT(name) AS transaction_count, SUM(actual_qty) AS total_qty, (SUM(actual_qty) / COUNT(DISTINCT posting_date)) AS turnover_rate FROM [BT]tabStock Ledger Entry[BT] GROUP BY item_code, warehouse ORDER BY turnover_rate DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List all unpaid vendor bills older than 60 days.",
      "fields": [
        "name",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, outstanding_amount FROM [BT]tabPurchase Invoice[BT] WHERE outstanding_amount > 0 AND due_date < CURDATE() - INTERVAL 60 DAY ORDER BY due_date ASC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items have the highest valuation rate in inventory?",
      "fields": [
        "valuation_rate",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT valuation_rate, name FROM [BT]tabItem[BT] ORDER BY valuation_rate DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse",
        "Stock Ledger Entry"
      ],
      "question": "What is the distribution of stock quantities across warehouses?",
      "fields": [
        "name",
        "warehouse"
      ]
    },
    "output": "frappe.db.sql('''SELECT w.name AS warehouse_name, SUM(sle.actual_qty) AS total_qty FROM [BT]tabWarehouse[BT] w LEFT JOIN [BT]tabStock Ledger Entry[BT] sle ON sle.warehouse = w.name GROUP BY w.name''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin",
        "Stock Ledger Entry"
      ],
      "question": "List items with stock discrepancies between physical and system counts.",
      "fields": [
        "item_code",
        "warehouse",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT b.item_code, b.warehouse, b.actual_qty AS system_qty, SUM(sle.actual_qty) AS ledger_qty FROM [BT]tabBin[BT] b LEFT JOIN [BT]tabStock Ledger Entry[BT] sle ON sle.item_code = b.item_code AND sle.warehouse = b.warehouse GROUP BY b.item_code, b.warehouse HAVING ABS(ledger_qty - system_qty) > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item",
        "Item Reorder"
      ],
      "question": "What is the average replenishment time for critical items?",
      "fields": [
        "name",
        "lead_time_days",
        "warehouse",
        "warehouse_reorder_level"
      ]
    },
    "output": "frappe.db.sql('''SELECT i.name, i.lead_time_days, ir.warehouse, ir.warehouse_reorder_level FROM [BT]tabItem[BT] i LEFT JOIN [BT]tabItem Reorder[BT] ir ON ir.parent = i.name WHERE ir.warehouse_reorder_level IS NOT NULL AND i.lead_time_days IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Ledger Entry"
      ],
      "question": "How many stock adjustments were made last month?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS total_adjustments FROM [BT]tabStock Ledger Entry[BT] WHERE posting_date >= DATE_FORMAT(CURDATE() - INTERVAL 1 MONTH, '%Y-%m-01''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item",
        "Stock Ledger Entry"
      ],
      "question": "Show items with expired batches or near expiry.",
      "fields": [
        "has_expiry_date",
        "batch_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT i.name, i.has_expiry_date, sle.batch_no FROM [BT]tabItem[BT] i JOIN [BT]tabStock Ledger Entry[BT] sle ON sle.item_code = i.item_code WHERE i.has_expiry_date = 1 AND sle.batch_no IS NOT NULL AND sle.expiry_date <= CURDATE() + INTERVAL 30 DAY''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items that require serial number tracking.",
      "fields": [
        "name",
        "has_serial_no",
        "serial_no_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, has_serial_no, serial_no_series FROM [BT]tabItem[BT] WHERE has_serial_no = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Find items tracked by batch numbers that have expiry dates.",
      "fields": [
        "name",
        "has_batch_no",
        "has_expiry_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, has_batch_no, has_expiry_date FROM [BT]tabItem[BT] WHERE has_batch_no = 1 AND has_expiry_date = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customer names and their primary contact numbers.",
      "fields": [
        "customer_name",
        "contact_phone",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer_name, contact_phone, name FROM [BT]tabCustomer[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with outstanding payment.",
      "fields": [
        "outstanding_amount",
        "status",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT outstanding_amount, status, name FROM [BT]tabSales Invoice[BT] WHERE outstanding_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Show all sales orders placed by customer Piosh Corp.",
      "fields": [
        "customer",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer, name FROM [BT]tabSales Order[BT] WHERE customer = 'Piosh Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Show contact details for employee EMP-0005.",
      "fields": [
        "personal_email",
        "cell_number",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT personal_email, cell_number, name FROM [BT]tabEmployee[BT] WHERE name = 'EMP-0005' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "List employees currently inactive.",
      "fields": [
        "status",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT status, name FROM [BT]tabEmployee[BT] WHERE status = 'Inactive' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List all stock items available.",
      "fields": [
        "item_code",
        "is_stock_item",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code, is_stock_item, name FROM [BT]tabItem[BT] WHERE is_stock_item = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items with low stock levels.",
      "fields": [
        "item_code",
        "reorder_levels",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code, reorder_levels, name FROM [BT]tabItem[BT] WHERE reorder_levels IS NOT NULL AND reorder_levels != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "List sales orders pending billing.",
      "fields": [
        "billing_status",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT billing_status, name FROM [BT]tabSales Order[BT] WHERE billing_status = 'Pending' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Which sales orders have been delivered?",
      "fields": [
        "delivery_status",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT delivery_status, name FROM [BT]tabSales Order[BT] WHERE delivery_status = 'Delivered' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Show all sales orders with discounts applied.",
      "fields": [
        "discount_amount",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT discount_amount, name FROM [BT]tabSales Order[BT] WHERE discount_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees have a CTC above 10 lakh?",
      "fields": [
        "ctc",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT ctc, name FROM [BT]tabEmployee[BT] WHERE ctc > 1000000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items belong to Electronics group?",
      "fields": [
        "name",
        "item_group",
        "item_code"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_group, item_code FROM [BT]tabItem[BT] WHERE item_group = 'Electronics' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items supplied by vendor XYZ.",
      "fields": [
        "name",
        "supplier_items",
        "item_code",
        "item_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_items, item_code, item_name FROM [BT]tabItem[BT] WHERE supplier_items = 'XYZ' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customer names and their primary contact numbers.",
      "fields": [
        "name",
        "customer_name",
        "contact_phone"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, contact_phone FROM [BT]tabCustomer[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show details of customer Jane Smith.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabCustomer[BT] WHERE customer_name = 'Jane Smith' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Show contact details for employee EMP-0005.",
      "fields": [
        "name",
        "personal_email",
        "cell_number"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, personal_email, cell_number FROM [BT]tabEmployee[BT] WHERE name = 'EMP-0005' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Who are employees in the Sales department?",
      "fields": [
        "name",
        "department",
        "employee_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, department, employee_name FROM [BT]tabEmployee[BT] WHERE department = 'Sales' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "List employees currently inactive.",
      "fields": [
        "name",
        "status",
        "employee"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, employee FROM [BT]tabEmployee[BT] WHERE status = 'Inactive' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the total tax collected from sales invoices this year?",
      "fields": [
        "total_taxes_and_charges"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(total_taxes_and_charges) AS total_taxes_and_charges FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices with outstanding payment.",
      "fields": [
        "name",
        "outstanding_amount",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, outstanding_amount, status FROM [BT]tabSales Invoice[BT] WHERE outstanding_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers have the highest invoice amounts?",
      "fields": [
        "customer",
        "total",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer, total, name FROM [BT]tabSales Invoice[BT] ORDER BY total DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all invoices created for a specific project.",
      "fields": [
        "name",
        "project",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, project, posting_date FROM [BT]tabSales Invoice[BT] WHERE project = 'PROJECT-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have discounts applied?",
      "fields": [
        "name",
        "discount_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, discount_amount FROM [BT]tabSales Invoice[BT] WHERE discount_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with payments pending.",
      "fields": [
        "name",
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, outstanding_amount FROM [BT]tabSales Invoice[BT] WHERE outstanding_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List all stock items available.",
      "fields": [
        "name",
        "item_code",
        "is_stock_item"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, is_stock_item FROM [BT]tabItem[BT] WHERE is_stock_item = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items with low stock levels.",
      "fields": [
        "name",
        "item_code",
        "reorder_levels"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, reorder_levels FROM [BT]tabItem[BT] WHERE reorder_levels IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items with last purchase rates above a specified amount.",
      "fields": [
        "name",
        "last_purchase_rate",
        "is_purchase_item"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, last_purchase_rate, is_purchase_item FROM [BT]tabItem[BT] WHERE last_purchase_rate > 1000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items are purchase items and who are their main suppliers?",
      "fields": [
        "name",
        "is_purchase_item",
        "supplier_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_purchase_item, supplier_items FROM [BT]tabItem[BT] WHERE is_purchase_item = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items that have specified minimum order quantities.",
      "fields": [
        "name",
        "min_order_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, min_order_qty FROM [BT]tabItem[BT] WHERE min_order_qty IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items that have supplier-specific item codes.",
      "fields": [
        "name",
        "supplier_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_items FROM [BT]tabItem[BT] WHERE supplier_items IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items are sales items and what are their sales units?",
      "fields": [
        "name",
        "is_sales_item",
        "sales_uom"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_sales_item, sales_uom FROM [BT]tabItem[BT] WHERE is_sales_item = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items with customer-specific item codes.",
      "fields": [
        "name",
        "customer_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_items FROM [BT]tabItem[BT] WHERE customer_items IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items that have maximum discount limits set.",
      "fields": [
        "name",
        "max_discount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, max_discount FROM [BT]tabItem[BT] WHERE max_discount IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees have a CTC above 10 lakh?",
      "fields": [
        "name",
        "ctc"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, ctc FROM [BT]tabEmployee[BT] WHERE ctc > 1000000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "List employees who joined in the last quarter.",
      "fields": [
        "name",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, date_of_joining FROM [BT]tabEmployee[BT] WHERE date_of_joining >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "How many items are currently stocked in inventory?",
      "fields": [
        "name",
        "opening_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, opening_stock FROM [BT]tabItem[BT] WHERE opening_stock > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List all items that have available opening stock.",
      "fields": [
        "name",
        "opening_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, opening_stock FROM [BT]tabItem[BT] WHERE opening_stock > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items have safety stock levels below their threshold?",
      "fields": [
        "name",
        "safety_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, safety_stock FROM [BT]tabItem[BT] WHERE safety_stock < threshold''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items that allow negatives stock in inventory.",
      "fields": [
        "name",
        "allow_negative_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, allow_negative_stock FROM [BT]tabItem[BT] WHERE allow_negative_stock = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items have product variants and on what basis?",
      "fields": [
        "name",
        "has_variants",
        "variant_based_on",
        "variant_of"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, has_variants, variant_based_on, variant_of FROM [BT]tabItem[BT] WHERE has_variants = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List all grouped asset items and their asset categories.",
      "fields": [
        "name",
        "is_grouped_asset",
        "asset_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_grouped_asset, asset_category FROM [BT]tabItem[BT] WHERE is_grouped_asset = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items are marked as fixed assets in the system?",
      "fields": [
        "name",
        "is_fixed_asset"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_fixed_asset FROM [BT]tabItem[BT] WHERE is_fixed_asset = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "What is the standard rate for all purchase items?",
      "fields": [
        "name",
        "standard_rate",
        "is_purchase_item"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, standard_rate, is_purchase_item FROM [BT]tabItem[BT] WHERE is_purchase_item = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show the valuation methods used for inventory items.",
      "fields": [
        "name",
        "valuation_method"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, valuation_method FROM [BT]tabItem[BT] ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List all customers enrolled in loyalty programs and their tiers.",
      "fields": [
        "name",
        "loyalty_program",
        "loyalty_program_tier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, loyalty_program, loyalty_program_tier FROM [BT]tabCustomer[BT] WHERE loyalty_program IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Who are the account managers assigned to our customers?",
      "fields": [
        "name",
        "account_manager"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, account_manager FROM [BT]tabCustomer[BT] WHERE account_manager IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show customers with frozen status and disabled accounts.",
      "fields": [
        "name",
        "is_frozen",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_frozen, disabled FROM [BT]tabCustomer[BT] WHERE is_frozen = 1 OR disabled = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers along with their primary contact details.",
      "fields": [
        "name",
        "customer_primary_contact",
        "mobile_no",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_primary_contact, mobile_no, email_id FROM [BT]tabCustomer[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers have specified tax IDs and tax categories?",
      "fields": [
        "name",
        "tax_id",
        "tax_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_id, tax_category FROM [BT]tabCustomer[BT] WHERE tax_id IS NOT NULL AND tax_category IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show customers with assigned default price lists and currency.",
      "fields": [
        "name",
        "default_price_list",
        "default_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_price_list, default_currency FROM [BT]tabCustomer[BT] WHERE default_price_list IS NOT NULL AND default_currency IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "List sales orders with remarks mentioning 'urgent'.",
      "fields": [
        "name",
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, remarks FROM [BT]tabSales Order[BT] WHERE remarks LIKE '%urgent%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items that include warranty periods for customers.",
      "fields": [
        "warranty_period",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT warranty_period, name FROM [BT]tabItem[BT] WHERE warranty_period IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items have deferred expense or deferred revenue enabled?",
      "fields": [
        "enable_deferred_expense",
        "enable_deferred_revenue",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT enable_deferred_expense, enable_deferred_revenue, name FROM [BT]tabItem[BT] WHERE enable_deferred_expense=1 OR enable_deferred_revenue=1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items that have a default bill of materials for manufacturing.",
      "fields": [
        "default_bom",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT default_bom, name FROM [BT]tabItem[BT] WHERE default_bom IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "What is the weight per unit and weight unit of measure for items?",
      "fields": [
        "weight_per_unit",
        "weight_uom",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT weight_per_unit, weight_uom, name FROM [BT]tabItem[BT] ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items that have shelf life and special storage conditions.",
      "fields": [
        "shelf_life_in_days",
        "description",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT shelf_life_in_days, description, name FROM [BT]tabItem[BT] WHERE shelf_life_in_days IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items that allow over-delivery or over-billing allowances.",
      "fields": [
        "over_delivery_receipt_allowance",
        "over_billing_allowance",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT over_delivery_receipt_allowance, over_billing_allowance, name FROM [BT]tabItem[BT] WHERE over_delivery_receipt_allowance IS NOT NULL OR over_billing_allowance IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items have taxes configured for compliance?",
      "fields": [
        "taxes",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT taxes, name FROM [BT]tabItem[BT] WHERE taxes IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items with customs tariff numbers and countries of origin.",
      "fields": [
        "customs_tariff_number",
        "country_of_origin",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT customs_tariff_number, country_of_origin, name FROM [BT]tabItem[BT] WHERE customs_tariff_number IS NOT NULL OR country_of_origin IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show customers with custom fields like website or industry.",
      "fields": [
        "name",
        "website",
        "industry"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, website, industry FROM [BT]tabCustomer[BT] WHERE website IS NOT NULL OR industry IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers have specific notes or special instructions?",
      "fields": [
        "name",
        "more_info"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, more_info FROM [BT]tabCustomer[BT] WHERE more_info IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Show sales orders that have loyalty points applied.",
      "fields": [
        "name",
        "loyalty_points",
        "loyalty_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, loyalty_points, loyalty_amount FROM [BT]tabSales Order[BT] WHERE loyalty_points IS NOT NULL OR loyalty_amount IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "How many customers belong to each customer group?",
      "fields": [
        "customer_group",
        "COUNT(name) as total_customers"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer_group, COUNT(name) as total_customers FROM [BT]tabCustomer[BT] GROUP BY customer_group''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items are purchase items and have a minimum order quantity?",
      "fields": [
        "is_purchase_item",
        "min_order_qty",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_purchase_item, min_order_qty, name FROM [BT]tabItem[BT] WHERE is_purchase_item = 1 AND min_order_qty > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items with customer provided flag enabled.",
      "fields": [
        "is_customer_provided_item",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_customer_provided_item, name FROM [BT]tabItem[BT] WHERE is_customer_provided_item = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items with a specified country of origin.",
      "fields": [
        "country_of_origin",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT country_of_origin, name FROM [BT]tabItem[BT] WHERE country_of_origin IS NOT NULL AND country_of_origin != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Find items that require quality inspection before purchase.",
      "fields": [
        "inspection_required_before_purchase",
        "quality_inspection_template",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT inspection_required_before_purchase, quality_inspection_template, name FROM [BT]tabItem[BT] WHERE inspection_required_before_purchase = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items have barcodes and allow alternative items?",
      "fields": [
        "barcodes",
        "allow_alternative_item",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT barcodes, allow_alternative_item, name FROM [BT]tabItem[BT] WHERE barcodes IS NOT NULL AND barcodes != '' AND allow_alternative_item = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Show sales orders with a specified incoterm.",
      "fields": [
        "incoterm",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT incoterm, name FROM [BT]tabSales Order[BT] WHERE incoterm IS NOT NULL AND incoterm != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Which sales orders have not been delivered yet?",
      "fields": [
        "delivery_status",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT delivery_status, name FROM [BT]tabSales Order[BT] WHERE delivery_status != 'Delivered' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Show sales orders where the order total exceeds $10,000.",
      "fields": [
        "total",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT total, name FROM [BT]tabSales Order[BT] WHERE total > 10000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "List sales orders with advance payments made.",
      "fields": [
        "advance_paid",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT advance_paid, name FROM [BT]tabSales Order[BT] WHERE advance_paid > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Get sales orders linked to campaign 'Holiday Sale'.",
      "fields": [
        "campaign",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT campaign, name FROM [BT]tabSales Order[BT] WHERE campaign = 'Holiday Sale' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Show sales orders created within the last 30 days.",
      "fields": [
        "creation",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT creation, name FROM [BT]tabSales Order[BT] WHERE creation >= DATE_SUB(CURDATE(), INTERVAL 30 DAY, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Which sales orders have a commission rate over 5%?",
      "fields": [
        "commission_rate",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT commission_rate, name FROM [BT]tabSales Order[BT] WHERE commission_rate > 5''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "List sales orders with a total net weight over 500 kg.",
      "fields": [
        "total_net_weight",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_net_weight, name FROM [BT]tabSales Order[BT] WHERE total_net_weight > 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Get sales orders that have been auto-repeated.",
      "fields": [
        "auto_repeat",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT auto_repeat, name FROM [BT]tabSales Order[BT] WHERE auto_repeat = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Show sales orders with grouped same items enabled.",
      "fields": [
        "group_same_items",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT group_same_items, name FROM [BT]tabSales Order[BT] WHERE group_same_items = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Which sales orders have their language set to French?",
      "fields": [
        "language",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT language, name FROM [BT]tabSales Order[BT] WHERE language = 'French' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the average invoice amount this month?",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT AVG(grand_total) AS average_amount FROM [BT]tabSales Invoice[BT] WHERE MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers flagged as internal or partner organizations.",
      "fields": [
        "name",
        "is_internal_customer",
        "represents_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_internal_customer, represents_company FROM [BT]tabCustomer[BT] WHERE is_internal_customer = 1 OR represents_company IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items have expiry dates within the next 3 months?",
      "fields": [
        "has_expiry_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT has_expiry_date, name FROM [BT]tabItem[BT] WHERE has_expiry_date = 1 AND expiry_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items that allow over-delivery or over-billing allowances",
      "fields": [
        "name",
        "over_delivery_receipt_allowance",
        "over_billing_allowance"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, over_delivery_receipt_allowance, over_billing_allowance FROM [BT]tabItem[BT] WHERE over_delivery_receipt_allowance IS NOT NULL OR over_billing_allowance IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items have taxes configured for compliance",
      "fields": [
        "name",
        "taxes"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, taxes FROM [BT]tabItem[BT] WHERE taxes IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items with customs tariff numbers and countries of origin",
      "fields": [
        "name",
        "customs_tariff_number",
        "country_of_origin"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customs_tariff_number, country_of_origin FROM [BT]tabItem[BT] WHERE customs_tariff_number IS NOT NULL AND country_of_origin IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Get sales orders created by the company 'CloudVista Tech Ltd'",
      "fields": [
        "name",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company FROM [BT]tabSales Order[BT] WHERE company = 'CloudVista Tech Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Which sales orders have been amended from previous orders",
      "fields": [
        "name",
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, amended_from FROM [BT]tabSales Order[BT] WHERE amended_from IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List all items with their item code and name",
      "fields": [
        "name",
        "item_code",
        "item_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, item_name FROM [BT]tabItem[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Get all stock items with a safety stock level defined",
      "fields": [
        "name",
        "is_stock_item",
        "safety_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_stock_item, safety_stock FROM [BT]tabItem[BT] WHERE is_stock_item = 1 AND safety_stock IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items that have variants based on attributes",
      "fields": [
        "name",
        "has_variants",
        "variant_based_on",
        "attributes"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, has_variants, variant_based_on, attributes FROM [BT]tabItem[BT] WHERE has_variants = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Find items with an expiry date and batch number series defined",
      "fields": [
        "name",
        "has_expiry_date",
        "batch_number_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, has_expiry_date, batch_number_series FROM [BT]tabItem[BT] WHERE has_expiry_date = 1 AND batch_number_series IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items with a warranty period longer than 1 year",
      "fields": [
        "name",
        "warranty_period"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warranty_period FROM [BT]tabItem[BT] WHERE warranty_period > 12''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "List sales orders with a total net weight over 500 kg.",
      "fields": [
        "total_net_weight",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT total_net_weight, name FROM [BT]tabSales Order[BT] WHERE total_net_weight > 500''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Get sales orders that have been auto-repeated.",
      "fields": [
        "auto_repeat",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT auto_repeat, name FROM [BT]tabSales Order[BT] WHERE auto_repeat = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Show sales orders with grouped same items enabled.",
      "fields": [
        "group_same_items",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT group_same_items, name FROM [BT]tabSales Order[BT] WHERE group_same_items = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Which sales orders have their language set to French?",
      "fields": [
        "language",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT language, name FROM [BT]tabSales Order[BT] WHERE language = 'French' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the average invoice amount this month?",
      "fields": [
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT AVG(grand_total) AS average_invoice_amount FROM [BT]tabSales Invoice[BT] WHERE MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers flagged as internal or partner organizations.",
      "fields": [
        "name",
        "is_internal_customer",
        "represents_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_internal_customer, represents_company FROM [BT]tabCustomer[BT] WHERE is_internal_customer = 1 OR represents_company IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items have expiry dates within the next 3 months?",
      "fields": [
        "has_expiry_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT has_expiry_date, name FROM [BT]tabItem[BT] WHERE has_expiry_date = 1 AND expiry_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 3 MONTH, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items have product variants and on what basis?",
      "fields": [
        "has_variants",
        "variant_based_on",
        "variant_of",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT has_variants, variant_based_on, variant_of, name FROM [BT]tabItem[BT] WHERE has_variants = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List all grouped asset items and their asset categories.",
      "fields": [
        "is_grouped_asset",
        "asset_category",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_grouped_asset, asset_category, name FROM [BT]tabItem[BT] WHERE is_grouped_asset = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items are marked as fixed assets in the system?",
      "fields": [
        "is_fixed_asset",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_fixed_asset, name FROM [BT]tabItem[BT] WHERE is_fixed_asset = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "What is the standard rate for all purchase items?",
      "fields": [
        "standard_rate",
        "is_purchase_item",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT standard_rate, is_purchase_item, name FROM [BT]tabItem[BT] WHERE is_purchase_item = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show the valuation methods used for inventory items.",
      "fields": [
        "valuation_method",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT valuation_method, name FROM [BT]tabItem[BT] WHERE valuation_method IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items with last purchase rates above a specified amount.",
      "fields": [
        "last_purchase_rate",
        "is_purchase_item",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT last_purchase_rate, is_purchase_item, name FROM [BT]tabItem[BT] WHERE is_purchase_item = 1 AND last_purchase_rate > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "How many items are currently stocked in inventory?",
      "fields": [
        "opening_stock",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT opening_stock, name FROM [BT]tabItem[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List all items that have available opening stock.",
      "fields": [
        "opening_stock",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT opening_stock, name FROM [BT]tabItem[BT] WHERE opening_stock > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items have safety stock levels below their threshold?",
      "fields": [
        "safety_stock",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT safety_stock, name FROM [BT]tabItem[BT] WHERE safety_stock < threshold_value''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items that allow negatives stock in inventory.",
      "fields": [
        "allow_negative_stock",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT allow_negative_stock, name FROM [BT]tabItem[BT] WHERE allow_negative_stock = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "How many customers belong to each customer group?",
      "fields": [
        "name: Unique identifier for Customer document.",
        "customer_group: Group classification of the customer."
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_group FROM [BT]tabCustomer[BT] GROUP BY customer_group''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List all customers enrolled in loyalty programs and their tiers.",
      "fields": [
        "name: Unique identifier for Customer document.",
        "loyalty_program: Loyalty program the customer is enrolled in.",
        "loyalty_program_tier: Tier level within the loyalty program."
      ]
    },
    "output": "frappe.db.sql('''SELECT name, loyalty_program, loyalty_program_tier FROM [BT]tabCustomer[BT] WHERE loyalty_program IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Who are the account managers assigned to our customers?",
      "fields": [
        "name: Unique identifier for Customer document.",
        "account_manager: Account manager responsible for the customer."
      ]
    },
    "output": "frappe.db.sql('''SELECT name, account_manager FROM [BT]tabCustomer[BT] WHERE account_manager IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show customers with frozen status and disabled accounts.",
      "fields": [
        "name: Unique identifier for Customer document.",
        "is_frozen: Whether the customer account is frozen.",
        "disabled: Whether the customer account is disabled."
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_frozen, disabled FROM [BT]tabCustomer[BT] WHERE is_frozen = 1 OR disabled = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers along with their primary contact details.",
      "fields": [
        "name: Unique identifier for Customer document.",
        "customer_primary_contact: Primary contact person for the customer.",
        "mobile_no: Mobile number of the customer.",
        "email_id: Email address of the customer."
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_primary_contact, mobile_no, email_id FROM [BT]tabCustomer[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers have specified tax IDs and tax categories?",
      "fields": [
        "name: Unique identifier for Customer document.",
        "tax_id: Tax identification number.",
        "tax_category: Tax category applied to the customer."
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_id, tax_category FROM [BT]tabCustomer[BT] WHERE tax_id IS NOT NULL OR tax_category IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show customers with assigned default price lists and currency.",
      "fields": [
        "name: Unique identifier for Customer document.",
        "default_price_list: Default price list assigned.",
        "default_currency: Default currency for transactions."
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_price_list, default_currency FROM [BT]tabCustomer[BT] WHERE default_price_list IS NOT NULL OR default_currency IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "List sales orders with remarks mentioning 'urgent'.",
      "fields": [
        "remarks: Additional remarks.",
        "name: Unique identifier for Sales Order document."
      ]
    },
    "output": "frappe.db.sql('''SELECT name, remarks FROM [BT]tabSales Order[BT] WHERE remarks LIKE '%urgent%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers have open opportunities or leads?",
      "fields": [
        "name",
        "opportunity_name",
        "lead_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, opportunity_name, lead_name FROM [BT]tabCustomer[BT] WHERE opportunity_name IS NOT NULL OR lead_name IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show customers with recent sales orders or purchase history.",
      "fields": [
        "name",
        "sales_team"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_team FROM [BT]tabCustomer[BT] WHERE name IN (SELECT customer FROM [BT]tabSales Order[BT] WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 30 DAY), as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers with specific marketing campaigns or promotions.",
      "fields": [
        "name",
        "campaign"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, campaign FROM [BT]tabCustomer[BT] WHERE campaign IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers flagged as internal or partner organizations.",
      "fields": [
        "is_internal_customer",
        "represents_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT is_internal_customer, represents_company FROM [BT]tabCustomer[BT] WHERE is_internal_customer = 1 OR represents_company IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show customers with custom fields like website or industry.",
      "fields": [
        "website",
        "industry"
      ]
    },
    "output": "frappe.db.sql('''SELECT website, industry FROM [BT]tabCustomer[BT] WHERE website IS NOT NULL OR industry IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers have specific notes or special instructions?",
      "fields": [
        "more_info"
      ]
    },
    "output": "frappe.db.sql('''SELECT more_info FROM [BT]tabCustomer[BT] WHERE more_info IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Show sales orders that have loyalty points applied.",
      "fields": [
        "loyalty_points",
        "loyalty_amount",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT loyalty_points, loyalty_amount, name FROM [BT]tabSales Order[BT] WHERE loyalty_points > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers based in the North region.",
      "fields": [
        "name",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, territory FROM [BT]tabCustomer[BT] WHERE territory = 'North' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Who are the contacts for each customer?",
      "fields": [
        "name",
        "customer_primary_contact",
        "primary_address_and_contact_detail"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_primary_contact, primary_address_and_contact_detail FROM [BT]tabCustomer[BT] WHERE customer_primary_contact IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Find customers who are currently inactive or disabled.",
      "fields": [
        "name",
        "disabled",
        "is_frozen"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, disabled, is_frozen FROM [BT]tabCustomer[BT] WHERE disabled = 1 OR is_frozen = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show customers with credit limits above $10,000.",
      "fields": [
        "name",
        "credit_limits"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, credit_limits FROM [BT]tabCustomer[BT] WHERE credit_limits > 10000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers enrolled in the loyalty program.",
      "fields": [
        "name",
        "loyalty_program"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, loyalty_program FROM [BT]tabCustomer[BT] WHERE loyalty_program IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Who manages the sales relationship for each customer?",
      "fields": [
        "name",
        "account_manager",
        "sales_team"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, account_manager, sales_team FROM [BT]tabCustomer[BT] WHERE account_manager IS NOT NULL OR sales_team IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers have outstanding payments?",
      "fields": [
        "name",
        "accounts"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, accounts FROM [BT]tabCustomer[BT] WHERE accounts IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Find customers who have a special tax exemption.",
      "fields": [
        "name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_withholding_category FROM [BT]tabCustomer[BT] WHERE tax_withholding_category IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "How many customers belong to each customer group?",
      "fields": [
        "customer_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer_group, COUNT(name) as count FROM [BT]tabCustomer[BT] GROUP BY customer_group''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List all customers classified under a specific market segment.",
      "fields": [
        "name",
        "market_segment"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, market_segment FROM [BT]tabCustomer[BT] WHERE market_segment IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show customers grouped by territory or region.",
      "fields": [
        "territory",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT territory, name FROM [BT]tabCustomer[BT] ORDER BY territory''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show all active customers and their current status.",
      "fields": [
        "name",
        "disabled",
        "is_frozen"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, disabled, is_frozen FROM [BT]tabCustomer[BT] WHERE disabled = 0 AND is_frozen = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers who have recently updated their profiles.",
      "fields": [
        "name",
        "modified",
        "modified_by"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, modified, modified_by FROM [BT]tabCustomer[BT] WHERE modified IS NOT NULL ORDER BY modified DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "What are the credit limits for each customer?",
      "fields": [
        "name",
        "credit_limits"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, credit_limits FROM [BT]tabCustomer[BT] WHERE credit_limits IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show customers with overdue payments or outstanding balances.",
      "fields": [
        "name",
        "accounts"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, accounts FROM [BT]tabCustomer[BT] WHERE accounts IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers by their preferred currency or payment terms.",
      "fields": [
        "name",
        "default_currency",
        "payment_terms"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_currency, payment_terms FROM [BT]tabCustomer[BT] WHERE default_currency IS NOT NULL OR payment_terms IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers are enrolled in loyalty programs and their tiers?",
      "fields": [
        "name",
        "loyalty_program",
        "loyalty_program_tier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, loyalty_program, loyalty_program_tier FROM [BT]tabCustomer[BT] WHERE loyalty_program IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers with the highest loyalty points earned.",
      "fields": [
        "name",
        "loyalty_program"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, loyalty_program FROM [BT]tabCustomer[BT] WHERE loyalty_program IS NOT NULL ORDER BY loyalty_points DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show customers associated with specific sales teams or account managers.",
      "fields": [
        "name",
        "sales_team",
        "account_manager"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, sales_team, account_manager FROM [BT]tabCustomer[BT] WHERE sales_team IS NOT NULL OR account_manager IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers have valid tax IDs and categories?",
      "fields": [
        "name",
        "tax_id",
        "tax_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_id, tax_category FROM [BT]tabCustomer[BT] WHERE tax_id IS NOT NULL AND tax_category IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show customers who are exempt from tax or have special tax conditions.",
      "fields": [
        "name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_withholding_category FROM [BT]tabCustomer[BT] WHERE tax_withholding_category IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers with specific withholding tax categories.",
      "fields": [
        "name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_withholding_category FROM [BT]tabCustomer[BT] WHERE tax_withholding_category IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices were submitted last week?",
      "fields": [
        "name",
        "posting_date",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) FROM [BT]tabSales Invoice[BT] WHERE posting_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 7 DAY) AND CURDATE() AND docstatus = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customer has the highest total invoice amount this year?",
      "fields": [
        "name",
        "customer",
        "grand_total",
        "posting_date",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer, MAX(grand_total) AS max_invoice_amount FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE()) AND docstatus = 1 GROUP BY customer ORDER BY max_invoice_amount DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all submitted Sales Invoices from this month.",
      "fields": [
        "name",
        "posting_date",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date FROM [BT]tabSales Invoice[BT] WHERE MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE()) AND docstatus = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show total invoice amount for each customer this year.",
      "fields": [
        "customer",
        "grand_total",
        "posting_date",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer, SUM(grand_total) AS total_amount FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE()) AND docstatus = 1 GROUP BY customer''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices created today.",
      "fields": [
        "name",
        "posting_date",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date FROM [BT]tabSales Invoice[BT] WHERE posting_date = CURDATE() AND docstatus = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many sales invoices marked as returns were recorded this quarter?",
      "fields": [
        "name",
        "is_return",
        "posting_date",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS return_count FROM [BT]tabSales Invoice[BT] WHERE is_return = 1 AND QUARTER(posting_date) = QUARTER(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE()) AND docstatus = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the total revenue from sales invoices this year?",
      "fields": [
        "name",
        "grand_total",
        "posting_date",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(grand_total) AS total_revenue FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE()) AND docstatus = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customer has the highest total invoice amount this year?",
      "fields": [
        "customer",
        "grand_total",
        "posting_date",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer, SUM(grand_total) AS total_amount FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE()) AND docstatus = 1 GROUP BY customer ORDER BY total_amount DESC LIMIT 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers enrolled in the loyalty program Gold tier.",
      "fields": [
        "name",
        "loyalty_program",
        "loyalty_program_tier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, loyalty_program, loyalty_program_tier FROM [BT]tabCustomer[BT] WHERE loyalty_program_tier = 'Gold' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers have registered websites?",
      "fields": [
        "name",
        "website"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, website FROM [BT]tabCustomer[BT] WHERE website IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Get all customers.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabCustomer[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List all customers in the database.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabCustomer[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show me the complete list of customers.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabCustomer[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Retrieve every customer record.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabCustomer[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Fetch all customers registered in the system.",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabCustomer[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show all customers who have opted out of marketing communications.",
      "fields": [
        "name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, disabled FROM [BT]tabCustomer[BT] WHERE disabled = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Find customers with credit limits exceeding $50,000.",
      "fields": [
        "name",
        "credit_limits"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, credit_limits FROM [BT]tabCustomer[BT] WHERE credit_limits > 50000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers linked to ongoing marketing campaigns.",
      "fields": [
        "name",
        "campaign"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, campaign FROM [BT]tabCustomer[BT] WHERE campaign IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers have multiple shipping addresses?",
      "fields": [
        "name",
        "address_contacts"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, address_contacts FROM [BT]tabCustomer[BT] WHERE address_contacts IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show customers who have a specific tax withholding category.",
      "fields": [
        "name",
        "tax_withholding_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_withholding_category FROM [BT]tabCustomer[BT] WHERE tax_withholding_category IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Find customers with a preferred language set.",
      "fields": [
        "name",
        "language"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, language FROM [BT]tabCustomer[BT] WHERE language IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers who represent other companies.",
      "fields": [
        "name",
        "represents_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, represents_company FROM [BT]tabCustomer[BT] WHERE represents_company = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Get a list of all customers in the database.",
      "fields": [
        "name",
        "customer_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name FROM [BT]tabCustomer[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show me all customers in the 'Retail' customer group.",
      "fields": [
        "name",
        "customer_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_group FROM [BT]tabCustomer[BT] WHERE customer_group = 'Retail' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Find items with an expiry date and batch number series defined.",
      "fields": [
        "name",
        "has_expiry_date",
        "batch_number_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, has_expiry_date, batch_number_series FROM [BT]tabItem[BT] WHERE has_expiry_date = 1 AND batch_number_series IS NOT NULL AND batch_number_series != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items with a warranty period longer than 1 year.",
      "fields": [
        "name",
        "warranty_period"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, warranty_period FROM [BT]tabItem[BT] WHERE warranty_period > 12''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items are purchase items and have a minimum order quantity?",
      "fields": [
        "name",
        "is_purchase_item",
        "min_order_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_purchase_item, min_order_qty FROM [BT]tabItem[BT] WHERE is_purchase_item = 1 AND min_order_qty > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Show sales orders with a specified incoterm.",
      "fields": [
        "name",
        "incoterm"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, incoterm FROM [BT]tabSales Order[BT] WHERE incoterm IS NOT NULL AND incoterm != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Which sales orders have not been delivered yet?",
      "fields": [
        "name",
        "delivery_status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, delivery_status FROM [BT]tabSales Order[BT] WHERE delivery_status != 'Delivered' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the average invoice amount this month?",
      "fields": [
        "name",
        "grand_total",
        "posting_date",
        "docstatus"
      ]
    },
    "output": "frappe.db.sql('''SELECT AVG(grand_total) AS average_invoice_amount FROM [BT]tabSales Invoice[BT] WHERE MONTH(posting_date) = MONTH(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE()) AND docstatus = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items are sales items and what are their sales units?",
      "fields": [
        "name",
        "is_sales_item",
        "sales_uom"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_sales_item, sales_uom FROM [BT]tabItem[BT] WHERE is_sales_item = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items with customer-specific item codes.",
      "fields": [
        "name",
        "customer_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_items FROM [BT]tabItem[BT] WHERE customer_items IS NOT NULL AND customer_items != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items that have maximum discount limits set.",
      "fields": [
        "name",
        "max_discount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, max_discount FROM [BT]tabItem[BT] WHERE max_discount IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Find items tracked by batch numbers that have expiry dates.",
      "fields": [
        "name",
        "has_batch_no",
        "has_expiry_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, has_batch_no, has_expiry_date FROM [BT]tabItem[BT] WHERE has_batch_no = 1 AND has_expiry_date = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items that require serial number tracking.",
      "fields": [
        "name",
        "has_serial_no",
        "serial_no_series"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, has_serial_no, serial_no_series FROM [BT]tabItem[BT] WHERE has_serial_no = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Get sales orders created by the company 'CloudVista Tech Ltd'.",
      "fields": [
        "name",
        "company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, company FROM [BT]tabSales Order[BT] WHERE company = 'CloudVista Tech Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Which sales orders have been amended from previous orders?",
      "fields": [
        "name",
        "amended_from"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, amended_from FROM [BT]tabSales Order[BT] WHERE amended_from IS NOT NULL AND amended_from != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List all items with their item code and name.",
      "fields": [
        "name",
        "item_code",
        "item_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, item_name FROM [BT]tabItem[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Get all stock items with a safety stock level defined.",
      "fields": [
        "name",
        "is_stock_item",
        "safety_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_stock_item, safety_stock FROM [BT]tabItem[BT] WHERE is_stock_item = 1 AND safety_stock IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items that have variants based on attributes.",
      "fields": [
        "name",
        "has_variants",
        "variant_based_on",
        "attributes"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, has_variants, variant_based_on, attributes FROM [BT]tabItem[BT] WHERE has_variants = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers with specific marketing campaigns or promotions.",
      "fields": [
        "name",
        "campaign"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, campaign FROM [BT]tabCustomer[BT] WHERE campaign IS NOT NULL AND campaign != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers flagged as internal or partner organizations.",
      "fields": [
        "name",
        "is_internal_customer",
        "represents_company"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_internal_customer, represents_company FROM [BT]tabCustomer[BT] WHERE is_internal_customer = 1 OR represents_company IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show customers with custom fields like website or industry.",
      "fields": [
        "name",
        "website",
        "industry"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, website, industry FROM [BT]tabCustomer[BT] WHERE website IS NOT NULL OR industry IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers have specific notes or special instructions?",
      "fields": [
        "name",
        "more_info"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, more_info FROM [BT]tabCustomer[BT] WHERE more_info IS NOT NULL AND more_info != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Show sales orders that have loyalty points applied.",
      "fields": [
        "name",
        "loyalty_points",
        "loyalty_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, loyalty_points, loyalty_amount FROM [BT]tabSales Order[BT] WHERE loyalty_points > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "How many customers belong to each customer group?",
      "fields": [
        "customer_group",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer_group, COUNT(name) AS customer_count FROM [BT]tabCustomer[BT] GROUP BY customer_group''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List all customers enrolled in loyalty programs and their tiers.",
      "fields": [
        "name",
        "loyalty_program",
        "loyalty_program_tier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, loyalty_program, loyalty_program_tier FROM [BT]tabCustomer[BT] WHERE loyalty_program IS NOT NULL AND loyalty_program != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Who are the account managers assigned to our customers?",
      "fields": [
        "name",
        "account_manager"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, account_manager FROM [BT]tabCustomer[BT] WHERE account_manager IS NOT NULL AND account_manager != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show customers with frozen status and disabled accounts.",
      "fields": [
        "name",
        "is_frozen",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_frozen, disabled FROM [BT]tabCustomer[BT] WHERE is_frozen = 1 OR disabled = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers along with their primary contact details.",
      "fields": [
        "name",
        "customer_primary_contact",
        "mobile_no",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_primary_contact, mobile_no, email_id FROM [BT]tabCustomer[BT] WHERE customer_primary_contact IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Which customers have specified tax IDs and tax categories?",
      "fields": [
        "name",
        "tax_id",
        "tax_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, tax_id, tax_category FROM [BT]tabCustomer[BT] WHERE tax_id IS NOT NULL AND tax_category IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show customers with assigned default price lists and currency.",
      "fields": [
        "name",
        "default_price_list",
        "default_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, default_price_list, default_currency FROM [BT]tabCustomer[BT] WHERE default_price_list IS NOT NULL AND default_currency IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "List sales orders with remarks mentioning 'urgent'.",
      "fields": [
        "name",
        "remarks"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, remarks FROM [BT]tabSales Order[BT] WHERE remarks LIKE '%urgent%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "How many items are currently stocked in inventory?",
      "fields": [
        "name",
        "opening_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, opening_stock FROM [BT]tabItem[BT] WHERE opening_stock > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List all items that have available opening stock.",
      "fields": [
        "name",
        "opening_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, opening_stock FROM [BT]tabItem[BT] WHERE opening_stock > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items have safety stock levels below their threshold?",
      "fields": [
        "name",
        "safety_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, safety_stock FROM [BT]tabItem[BT] WHERE safety_stock < threshold''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items that allow negatives stock in inventory.",
      "fields": [
        "name",
        "allow_negative_stock"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, allow_negative_stock FROM [BT]tabItem[BT] WHERE allow_negative_stock = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items have product variants and on what basis?",
      "fields": [
        "name",
        "has_variants",
        "variant_based_on",
        "variant_of"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, has_variants, variant_based_on, variant_of FROM [BT]tabItem[BT] WHERE has_variants = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List all grouped asset items and their asset categories.",
      "fields": [
        "name",
        "is_grouped_asset",
        "asset_category"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_grouped_asset, asset_category FROM [BT]tabItem[BT] WHERE is_grouped_asset = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items are marked as fixed assets in the system?",
      "fields": [
        "name",
        "is_fixed_asset"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_fixed_asset FROM [BT]tabItem[BT] WHERE is_fixed_asset = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "What is the standard rate for all purchase items?",
      "fields": [
        "name",
        "standard_rate",
        "is_purchase_item"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, standard_rate, is_purchase_item FROM [BT]tabItem[BT] WHERE is_purchase_item = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show the valuation methods used for inventory items.",
      "fields": [
        "name",
        "valuation_method"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, valuation_method FROM [BT]tabItem[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items with last purchase rates above a specified amount.",
      "fields": [
        "name",
        "last_purchase_rate",
        "is_purchase_item"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT name, last_purchase_rate, is_purchase_item FROM [BT]tabItem[BT] WHERE last_purchase_rate > %s AND is_purchase_item = 1\"\"\", (amount,), as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items are purchase items and who are their main suppliers?",
      "fields": [
        "name",
        "is_purchase_item",
        "supplier_items"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, is_purchase_item, supplier_items FROM [BT]tabItem[BT] WHERE is_purchase_item = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers with a credit limit set.",
      "fields": [
        "name",
        "credit_limit"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, credit_limit FROM [BT]tabCustomer[BT] WHERE credit_limit > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all paid sales invoices.",
      "fields": [
        "name",
        "status",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, grand_total FROM [BT]tabSales Invoice[BT] WHERE status = 'Paid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers with approved status.",
      "fields": [
        "name",
        "supplier_name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_name, status FROM [BT]tabSupplier[BT] WHERE status = 'Approved' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items available for purchase.",
      "fields": [
        "name",
        "item_code",
        "is_purchase_item"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, is_purchase_item FROM [BT]tabItem[BT] WHERE is_purchase_item = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get list of all sales invoices.",
      "fields": [
        "name",
        "customer",
        "posting_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, posting_date, grand_total FROM [BT]tabSales Invoice[BT] ORDER BY posting_date DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Get list of all purchase invoices.",
      "fields": [
        "name",
        "supplier",
        "posting_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, posting_date, grand_total FROM [BT]tabPurchase Invoice[BT] ORDER BY posting_date DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Get list of all sales orders.",
      "fields": [
        "name",
        "customer",
        "transaction_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, transaction_date, grand_total FROM [BT]tabSales Order[BT] ORDER BY transaction_date DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "Get list of all purchase orders.",
      "fields": [
        "name",
        "supplier",
        "transaction_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier, transaction_date, grand_total FROM [BT]tabPurchase Order[BT] ORDER BY transaction_date DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "Get list of all payment entries.",
      "fields": [
        "name",
        "party_type",
        "party",
        "posting_date",
        "paid_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, party_type, party, posting_date, paid_amount FROM [BT]tabPayment Entry[BT] ORDER BY posting_date DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Delivery Note"
      ],
      "question": "Get list of all delivery notes.",
      "fields": [
        "name",
        "customer",
        "posting_date",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, posting_date, grand_total FROM [BT]tabDelivery Note[BT] ORDER BY posting_date DESC''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all sales invoices.",
      "fields": [
        "name",
        "customer",
        "posting_date",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, posting_date, status FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show all customer names.",
      "fields": [
        "name",
        "customer_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name FROM [BT]tabCustomer[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the status of sales invoice SI-0001?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status FROM [BT]tabSales Invoice[BT] WHERE name = 'SI-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Show details of employee EMP-0001.",
      "fields": [
        "name",
        "employee_name",
        "designation",
        "department"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, designation, department FROM [BT]tabEmployee[BT] WHERE name = 'EMP-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "List all employees and their employee numbers.",
      "fields": [
        "name",
        "employee_number",
        "employee_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_number, employee_name FROM [BT]tabEmployee[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all sales invoices with their status.",
      "fields": [
        "name",
        "status",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, customer FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the total outstanding amount for all sales invoices?",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(outstanding_amount) as total_outstanding FROM [BT]tabSales Invoice[BT] WHERE status != 'Paid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "What is the sum of all employee salaries?",
      "fields": [
        "salary"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(salary) as total_salary FROM [BT]tabEmployee[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show details of customer Jane Smith.",
      "fields": [
        "name",
        "customer_name",
        "customer_group",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, customer_group, territory FROM [BT]tabCustomer[BT] WHERE customer_name = 'Jane Smith' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the total invoiced amount for last month?",
      "fields": [
        "base_grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(base_grand_total) as total_invoiced FROM [BT]tabSales Invoice[BT] WHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all invoices for a specific project.",
      "fields": [
        "name",
        "project",
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT name, project, customer, posting_date FROM [BT]tabSales Invoice[BT] WHERE project = %s\"\"\", (project_name,), as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all invoices created by a specific sales team member.",
      "fields": [
        "name",
        "owner",
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT name, owner, customer, posting_date FROM [BT]tabSales Invoice[BT] WHERE owner = %s\"\"\", (sales_member,), as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which invoices have discounts applied?",
      "fields": [
        "name",
        "discount_amount",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, discount_amount, customer FROM [BT]tabSales Invoice[BT] WHERE discount_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show invoices with payments pending.",
      "fields": [
        "name",
        "outstanding_amount",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, outstanding_amount, customer FROM [BT]tabSales Invoice[BT] WHERE outstanding_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Who are employees in the Sales department?",
      "fields": [
        "name",
        "employee_name",
        "department"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, department FROM [BT]tabEmployee[BT] WHERE department = 'Sales' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "List employees with their designations.",
      "fields": [
        "name",
        "employee_name",
        "designation"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, designation FROM [BT]tabEmployee[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees joined in the last quarter?",
      "fields": [
        "name",
        "employee_name",
        "date_of_joining"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, date_of_joining FROM [BT]tabEmployee[BT] WHERE date_of_joining >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Show contact details for employee EMP-0002.",
      "fields": [
        "name",
        "employee_name",
        "mobile_no",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, mobile_no, email_id FROM [BT]tabEmployee[BT] WHERE name = 'EMP-0002' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "List employees who are currently inactive.",
      "fields": [
        "name",
        "employee_name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, status FROM [BT]tabEmployee[BT] WHERE status = 'Inactive' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "List all sales orders placed by customer ABC Corp.",
      "fields": [
        "name",
        "customer",
        "transaction_date",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, transaction_date, status FROM [BT]tabSales Order[BT] WHERE customer = 'ABC Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Show total quantity ordered this month.",
      "fields": [
        "total_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(total_qty) AS total_quantity FROM [BT]tabSales Order[BT] WHERE transaction_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Which sales orders have been delivered?",
      "fields": [
        "name",
        "delivery_status",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, delivery_status, customer FROM [BT]tabSales Order[BT] WHERE delivery_status = 'Delivered' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "Show all sales orders with discounts applied.",
      "fields": [
        "name",
        "discount_amount",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, discount_amount, customer FROM [BT]tabSales Order[BT] WHERE discount_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "List sales orders pending billing.",
      "fields": [
        "name",
        "billing_status",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, billing_status, customer FROM [BT]tabSales Order[BT] WHERE billing_status != 'Billed' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items with variants.",
      "fields": [
        "name",
        "item_name",
        "has_variants"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_name, has_variants FROM [BT]tabItem[BT] WHERE has_variants = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items are classified under Electronics group?",
      "fields": [
        "name",
        "item_name",
        "item_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_name, item_group FROM [BT]tabItem[BT] WHERE item_group = 'Electronics' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items supplied by vendor XYZ.",
      "fields": [
        "name",
        "item_name",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_name, supplier FROM [BT]tabItem[BT] WHERE supplier = 'XYZ' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which sales invoices are marked as 'Paid' but have pending deliveries?",
      "fields": [
        "name",
        "status",
        "delivery_status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, delivery_status FROM [BT]tabSales Invoice[BT] WHERE status = 'Paid' AND delivery_status != 'Delivered' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the average invoice amount for sales invoices in the last 6 months?",
      "fields": [
        "base_grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT AVG(base_grand_total) as avg_invoice_amount FROM [BT]tabSales Invoice[BT] WHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 6 MONTH, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List sales invoices with partial payments received.",
      "fields": [
        "name",
        "outstanding_amount",
        "paid_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, outstanding_amount, paid_amount FROM [BT]tabSales Invoice[BT] WHERE outstanding_amount > 0 AND paid_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many sales invoices were issued for the Electronics product category last quarter?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) as invoice_count FROM [BT]tabSales Invoice[BT] WHERE item_group = 'Electronics' AND posting_date >= DATE_SUB(CURDATE(), INTERVAL 3 MONTH, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show sales invoices with payment terms exceeding 30 days.",
      "fields": [
        "name",
        "payment_terms",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_terms, customer FROM [BT]tabSales Invoice[BT] WHERE payment_terms > 30''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which customers have the highest number of sales invoices this year?",
      "fields": [
        "customer",
        "COUNT(name) as invoice_count"
      ]
    },
    "output": "frappe.db.sql('''SELECT customer, COUNT(name) AS invoice_count FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE()) GROUP BY customer ORDER BY invoice_count DESC LIMIT 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show sales invoices with multiple items exceeding 10 units per item.",
      "fields": [
        "name",
        "item_code",
        "qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, item_code, qty FROM [BT]tabSales Invoice Item[BT] WHERE qty > 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all sales invoices.",
      "fields": [
        "name",
        "customer",
        "posting_date",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer, posting_date, status FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show all customer names.",
      "fields": [
        "name",
        "customer_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name FROM [BT]tabCustomer[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the status of sales invoice SI-0001?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status FROM [BT]tabSales Invoice[BT] WHERE name = 'SI-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Show details of employee EMP-0001.",
      "fields": [
        "name",
        "employee_name",
        "designation",
        "department"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, designation, department FROM [BT]tabEmployee[BT] WHERE name = 'EMP-0001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "List all employees and their employee numbers.",
      "fields": [
        "name",
        "employee_number",
        "employee_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_number, employee_name FROM [BT]tabEmployee[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all sales invoices with their status.",
      "fields": [
        "name",
        "status",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, status, customer FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the total outstanding amount for all sales invoices?",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(outstanding_amount) as total_outstanding FROM [BT]tabSales Invoice[BT] WHERE status != 'Paid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "What is the sum of all employee salaries?",
      "fields": [
        "salary"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(salary) as total_salary FROM [BT]tabEmployee[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Show details of customer Jane Smith.",
      "fields": [
        "name",
        "customer_name",
        "customer_group",
        "territory"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, customer_name, customer_group, territory FROM [BT]tabCustomer[BT] WHERE customer_name = 'Jane Smith' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the total invoiced amount for last month?",
      "fields": [
        "SUM(base_grand_total) as total_invoiced"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(base_grand_total) as total_invoiced FROM [BT]tabSales Invoice[BT] WHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List sales invoices with a discount applied.",
      "fields": [
        "name",
        "discount_amount",
        "grand_total"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, discount_amount, grand_total FROM [BT]tabSales Invoice[BT] WHERE discount_amount > 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List sales invoices that include free shipping.",
      "fields": [
        "name",
        "free_shipping",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, free_shipping, customer FROM [BT]tabSales Invoice[BT] WHERE free_shipping = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What is the total outstanding amount across all sales invoices?",
      "fields": [
        "outstanding_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT SUM(outstanding_amount) AS total_outstanding FROM [BT]tabSales Invoice[BT] WHERE status != 'Paid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show sales invoices created by the sales team in Mumbai office.",
      "fields": [
        "name",
        "owner",
        "customer",
        "posting_date",
        "sales_office"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, owner, customer, posting_date FROM [BT]tabSales Invoice[BT] WHERE sales_office = 'Mumbai' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which sales invoices were modified in the last 7 days?",
      "fields": [
        "name",
        "modified",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, modified, customer FROM [BT]tabSales Invoice[BT] WHERE modified >= DATE_SUB(CURDATE(), INTERVAL 7 DAY, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List sales invoices that include items from the Furniture category.",
      "fields": [
        "name",
        "customer",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT si.name, si.customer, si.posting_date FROM [BT]tabSales Invoice[BT] si JOIN [BT]tabSales Invoice Item[BT] sii ON si.name = sii.parent WHERE sii.item_group = 'Furniture' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many sales invoices have zero tax applied?",
      "fields": [
        "name",
        "tax_amount"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS zero_tax_invoices FROM [BT]tabSales Invoice[BT] WHERE tax_amount = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show sales invoices with due dates in the next 15 days.",
      "fields": [
        "name",
        "due_date",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, due_date, customer FROM [BT]tabSales Invoice[BT] WHERE due_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 15 DAY, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which sales invoices were generated during last holiday season?",
      "fields": [
        "name",
        "posting_date",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, posting_date, customer FROM [BT]tabSales Invoice[BT] WHERE posting_date BETWEEN '2023-12-20' AND '2024-01-05' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List sales invoices with payment modes as 'Credit Card'.",
      "fields": [
        "name",
        "payment_mode",
        "customer"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, payment_mode, customer FROM [BT]tabSales Invoice[BT] WHERE payment_mode = 'Credit Card' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many Sales Invoices we have?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS total_invoices FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "What is the customer's email for INV-001?",
      "fields": [
        "name",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT c.name, c.email_id AS customer_email FROM [BT]tabCustomer[BT] c JOIN [BT]tabSales Invoice[BT] si ON si.customer = c.name WHERE si.name = 'INV-001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "How many invoices are marked as unpaid?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS unpaid_invoices FROM [BT]tabSales Invoice[BT] WHERE status != 'Paid' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Job Card"
      ],
      "question": "How many job cards are marked as completed?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS completed_job_cards FROM [BT]tabJob Card[BT] WHERE status = 'Completed' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "How many leads came from the website?",
      "fields": [
        "name",
        "lead_source"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS website_leads FROM [BT]tabLead[BT] WHERE lead_source = 'Website' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "How many customers belong to the “Retail” group?",
      "fields": [
        "name",
        "customer_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS retail_customers FROM [BT]tabCustomer[BT] WHERE customer_group = 'Retail' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Receipt"
      ],
      "question": "How many purchase receipts were made this month?",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS receipts_this_month FROM [BT]tabPurchase Receipt[BT] WHERE posting_date >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "What’s the total number of sales invoices?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS total_sales_invoices FROM [BT]tabSales Invoice[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Designation"
      ],
      "question": "How many designations have descriptions?",
      "fields": [
        "name",
        "description"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS designations_with_description FROM [BT]tabDesignation[BT] WHERE description IS NOT NULL AND description != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Receipt"
      ],
      "question": "How many receipts are returns?",
      "fields": [
        "name",
        "is_return"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS return_receipts FROM [BT]tabPurchase Receipt[BT] WHERE is_return = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "How many customers have loyalty points assigned?",
      "fields": [
        "name",
        "loyalty_program"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS customers_with_loyalty FROM [BT]tabCustomer[BT] WHERE loyalty_program IS NOT NULL AND loyalty_program != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Issue"
      ],
      "question": "How many issues are unresolved?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS unresolved_issues FROM [BT]tabIssue[BT] WHERE status != 'Resolved' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "How many items are listed in our catalog?",
      "fields": [
        "name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS total_items FROM [BT]tabItem[BT] WHERE disabled = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "How many orders were placed by internal customers?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS internal_customer_orders FROM [BT]tabSales Order[BT] WHERE customer IN (SELECT name FROM [BT]tabCustomer[BT] WHERE is_internal_customer = 1, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "How many bins show a negative projected quantity?",
      "fields": [
        "name",
        "projected_qty"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS negative_projected_bins FROM [BT]tabBin[BT] WHERE projected_qty < 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Timesheet"
      ],
      "question": "How many timesheets were submitted today?",
      "fields": [
        "name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS timesheets_today FROM [BT]tabTimesheet[BT] WHERE creation >= CURDATE(, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Department"
      ],
      "question": "How many departments are there in total?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS total_departments FROM [BT]tabDepartment[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Opportunity"
      ],
      "question": "List all open sales opportunities from the UAE region.",
      "fields": [
        "opportunity_type",
        "status",
        "territory",
        "customer_name"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT opportunity_type, customer_name FROM [BT]tabOpportunity[BT] WHERE status = 'Open' AND territory = 'UAE'\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Lead"
      ],
      "question": "Can you show me all qualified leads with an email address?",
      "fields": [
        "lead_name",
        "email_id",
        "status"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT lead_name, email_id FROM [BT]tabLead[BT] WHERE status = 'Qualified' AND email_id != ''\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Get the name and stock unit of all active items used in manufacturing.",
      "fields": [
        "item_code",
        "item_name",
        "stock_uom",
        "include_item_in_manufacturing"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT item_code, item_name, stock_uom FROM [BT]tabItem[BT] WHERE disabled = 0 AND include_item_in_manufacturing = 1\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item Group"
      ],
      "question": "List all item groups currently in use for selling purposes.",
      "fields": [
        "name",
        "is_group"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT name FROM [BT]tabItem Group[BT] WHERE is_group = 0\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Show me all bins with negative stock quantity in the system.",
      "fields": [
        "item_code",
        "warehouse",
        "actual_qty"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT item_code, warehouse, actual_qty FROM [BT]tabBin[BT] WHERE actual_qty < 0\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Bin"
      ],
      "question": "Which items have more than 100 units reserved for production?",
      "fields": [
        "item_code",
        "reserved_qty_for_production"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT item_code, reserved_qty_for_production FROM [BT]tabBin[BT] WHERE reserved_qty_for_production > 100\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Batch"
      ],
      "question": "List batches produced by supplier 'FreshChem Ltd'.",
      "fields": [
        "batch_id",
        "supplier",
        "item"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT batch_id, item FROM [BT]tabBatch[BT] WHERE supplier = 'FreshChem Ltd'\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "List all warehouses under company 'HTS Trading Co'.",
      "fields": [
        "company"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT warehouse_name FROM [BT]tabWarehouse[BT] WHERE company = 'HTS Trading Co'\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Warehouse"
      ],
      "question": "Which warehouses in Doha are disabled?",
      "fields": [
        "name",
        "city",
        "disabled"
      ]
    },
    "output": "frappe.db.sql(\"\"\"SELECT name FROM [BT]tabWarehouse[BT] WHERE city = 'Doha' AND disabled = 1\"\"\", as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Task"
      ],
      "question": "How many tasks are overdue?",
      "fields": [
        "name",
        "status",
        "due_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS overdue_tasks FROM [BT]tabTask[BT] WHERE status != 'Completed' AND due_date < CURDATE(, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "How many sales orders are still pending delivery?",
      "fields": [
        "name",
        "delivery_status"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS pending_delivery_orders FROM [BT]tabSales Order[BT] WHERE delivery_status != 'Delivered' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "How many suppliers are disabled?",
      "fields": [
        "name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS disabled_suppliers FROM [BT]tabSupplier[BT] WHERE disabled = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "How many items are below their reorder levels?",
      "fields": [
        "name",
        "projected_qty",
        "reorder_level"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS items_below_reorder FROM [BT]tabItem[BT] WHERE projected_qty < reorder_level''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Stock Entry"
      ],
      "question": "How many stock entries are for material transfer?",
      "fields": [
        "name",
        "purpose"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS material_transfer_entries FROM [BT]tabStock Entry[BT] WHERE purpose = 'Material Transfer' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Account"
      ],
      "question": "How many accounts are marked as groups?",
      "fields": [
        "name",
        "is_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS group_accounts FROM [BT]tabAccount[BT] WHERE is_group = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "How many employees are linked to a user ID?",
      "fields": [
        "name",
        "user_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS employees_with_user_id FROM [BT]tabEmployee[BT] WHERE user_id IS NOT NULL AND user_id != '' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "How many items are currently disabled?",
      "fields": [
        "name",
        "disabled"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS disabled_items FROM [BT]tabItem[BT] WHERE disabled = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Payment Entry"
      ],
      "question": "How many payment entries were made today?",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS payments_today FROM [BT]tabPayment Entry[BT] WHERE posting_date = CURDATE(, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Opportunity"
      ],
      "question": "How many opportunities are in “Open” stage?",
      "fields": [
        "name",
        "status"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS open_opportunities FROM [BT]tabOpportunity[BT] WHERE status = 'Open' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "How many suppliers are internal?",
      "fields": [
        "name",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS internal_suppliers FROM [BT]tabSupplier[BT] WHERE is_internal_supplier = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Task"
      ],
      "question": "How many tasks were created this week?",
      "fields": [
        "name",
        "creation"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS tasks_created_this_week FROM [BT]tabTask[BT] WHERE creation >= DATE_SUB(CURDATE(), INTERVAL 7 DAY)''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List all suppliers.",
      "fields": [
        "name",
        "supplier_name",
        "supplier_group",
        "country",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_name, supplier_group, country, supplier_primary_contact FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Who are the employees in the sales department?",
      "fields": [
        "name",
        "employee_name",
        "department"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, department FROM [BT]tabEmployee[BT] WHERE department = 'Sales' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "What is the annual CTC for employee EMP-0012?",
      "fields": [
        "name",
        "employee_name",
        "ctc"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, ctc FROM [BT]tabEmployee[BT] WHERE name = 'EMP-0012' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Show the monthly salary for all employees.",
      "fields": [
        "name",
        "employee_name",
        "ctc"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, ctc / 12 AS monthly_salary FROM [BT]tabEmployee[BT] WHERE ctc IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "List employees with a salary greater than ₹50,000.",
      "fields": [
        "name",
        "employee_name",
        "ctc"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, ctc FROM [BT]tabEmployee[BT] WHERE ctc > 50000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees have received a salary increase this year?",
      "fields": [
        "name",
        "employee_name",
        "ctc",
        "modified"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, ctc, modified FROM [BT]tabEmployee[BT] WHERE YEAR(modified) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Show the salary mode (e.g., bank transfer, cheque) for employees.",
      "fields": [
        "name",
        "employee_name",
        "salary_mode"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, salary_mode FROM [BT]tabEmployee[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "List employees whose CTC is below ₹30,000.",
      "fields": [
        "name",
        "employee_name",
        "ctc"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, ctc FROM [BT]tabEmployee[BT] WHERE ctc < 30000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show details of supplier SUP-001.",
      "fields": [
        "name",
        "supplier_name",
        "country",
        "supplier_primary_contact",
        "mobile_no",
        "email_id",
        "payment_terms",
        "supplier_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_name, country, supplier_primary_contact, mobile_no, email_id, payment_terms, supplier_group FROM [BT]tabSupplier[BT] WHERE name = 'SUP-001' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "What is the contact information for supplier ABC Corp?",
      "fields": [
        "supplier_primary_contact",
        "mobile_no",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_primary_contact, mobile_no, email_id FROM [BT]tabSupplier[BT] WHERE supplier_name = 'ABC Corp' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers from India.",
      "fields": [
        "name",
        "supplier_name",
        "country"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_name, country FROM [BT]tabSupplier[BT] WHERE country = 'India' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show supplier addresses.",
      "fields": [
        "supplier_primary_address",
        "address_contacts",
        "address_html"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_primary_address, address_contacts, address_html FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "How many suppliers are currently active?",
      "fields": [
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS active_suppliers FROM [BT]tabSupplier[BT] WHERE disabled = 0''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers with pending purchase orders.",
      "fields": [
        "name",
        "supplier_name",
        "supplier_primary_contact"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT s.name, s.supplier_name, s.supplier_primary_contact FROM [BT]tabSupplier[BT] s JOIN [BT]tabPurchase Order[BT] po ON s.name = po.supplier WHERE po.status = 'To Receive' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show suppliers with the highest rating.",
      "fields": [
        "name",
        "supplier_name",
        "supplier_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_name, supplier_group FROM [BT]tabSupplier[BT] ORDER BY rating DESC LIMIT 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "What are the payment terms for supplier XYZ Ltd?",
      "fields": [
        "name",
        "supplier_name",
        "payment_terms"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_name, payment_terms FROM [BT]tabSupplier[BT] WHERE supplier_name = 'XYZ Ltd' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers by industry type.",
      "fields": [
        "name",
        "supplier_name",
        "supplier_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_name, supplier_group FROM [BT]tabSupplier[BT] ORDER BY supplier_group''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers provide electronic components?",
      "fields": [
        "name",
        "supplier_name",
        "supplier_group"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_name, supplier_group FROM [BT]tabSupplier[BT] WHERE supplier_group LIKE '%Electronic Components%' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers with credit limits above ₹1,00,000.",
      "fields": [
        "name",
        "supplier_name",
        "credit_limit"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_name, credit_limit FROM [BT]tabSupplier[BT] WHERE credit_limit > 100000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Order"
      ],
      "question": "How many purchase orders were made to supplier ABC Corp last month?",
      "fields": [
        "name",
        "supplier",
        "transaction_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) AS po_count FROM [BT]tabPurchase Order[BT] WHERE supplier = 'ABC Corp' AND transaction_date BETWEEN DATE_SUB(CURDATE(), INTERVAL 1 MONTH) AND CURDATE(, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show supplier contact person and phone number.",
      "fields": [
        "name",
        "supplier_name",
        "supplier_primary_contact",
        "mobile_no"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_name, supplier_primary_contact, mobile_no FROM [BT]tabSupplier[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers have been blacklisted?",
      "fields": [
        "name",
        "supplier_name",
        "is_frozen"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_name FROM [BT]tabSupplier[BT] WHERE is_frozen = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Show suppliers associated with purchase invoices this quarter.",
      "fields": [
        "name",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT DISTINCT supplier AS name, supplier AS supplier_name FROM [BT]tabPurchase Invoice[BT] WHERE QUARTER(posting_date) = QUARTER(CURDATE()) AND YEAR(posting_date) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "List suppliers based on their delivery performance.",
      "fields": [
        "name",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier AS name, AVG(DATEDIFF(received_date, expected_delivery_date)) AS avg_delivery_delay FROM [BT]tabPurchase Receipt[BT] WHERE supplier IS NOT NULL GROUP BY supplier''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Supplier"
      ],
      "question": "Which suppliers have contracts expiring soon?",
      "fields": [
        "name",
        "supplier_name",
        "release_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_name, release_date FROM [BT]tabSupplier[BT] WHERE release_date BETWEEN CURDATE() AND DATE_ADD(CURDATE(), INTERVAL 30 DAY, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items that are flagged as fixed assets and have auto asset creation enabled.",
      "fields": [
        "is_fixed_asset",
        "auto_create_assets",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabItem[BT] WHERE is_fixed_asset = 1 AND auto_create_assets = 1''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items with a specified standard purchase rate and last purchase rate.",
      "fields": [
        "standard_rate",
        "last_purchase_rate",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, standard_rate, last_purchase_rate FROM [BT]tabItem[BT] WHERE standard_rate IS NOT NULL AND last_purchase_rate IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Find stock items that allow negatives stock and have reorder levels set.",
      "fields": [
        "is_stock_item",
        "allow_negative_stock",
        "reorder_levels",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabItem[BT] WHERE is_stock_item = 1 AND allow_negative_stock = 1 AND reorder_levels IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Which items have a specified sales unit of measure and maximum discount allowed?",
      "fields": [
        "sales_uom",
        "max_discount",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name FROM [BT]tabItem[BT] WHERE sales_uom IS NOT NULL AND max_discount IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Show items grouped by item group with their total projected quantity.",
      "fields": [
        "item_group",
        "total_projected_qty",
        "name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name,item_group, SUM(total_projected_qty) AS total_projected_qty FROM [BT]tabItem[BT] GROUP BY item_group''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "What is the breakdown of sales orders by region or territory?",
      "fields": [
        "territory",
        "name",
        "total"
      ]
    },
    "output": "frappe.db.sql('''SELECT territory, COUNT(name) AS order_count, SUM(total) AS total_sales FROM [BT]tabSales Order[BT] GROUP BY territory''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "List the top 10 products by sales revenue this quarter.",
      "fields": [
        "item_code",
        "total_revenue"
      ]
    },
    "output": "frappe.db.sql('''SELECT item_code, SUM(amount) AS total_revenue FROM [BT]tabSales Order Item[BT] WHERE QUARTER(transaction_date) = QUARTER(CURDATE()) AND YEAR(transaction_date) = YEAR(CURDATE()) GROUP BY item_code ORDER BY total_revenue DESC LIMIT 10''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "How many sales orders were amended or updated last month?",
      "fields": [
        "name",
        "amended_from",
        "modified"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(name) FROM [BT]tabSales Order[BT] WHERE amended_from IS NOT NULL AND MONTH(modified) = MONTH(CURDATE() - INTERVAL 1 MONTH) AND YEAR(modified) = YEAR(CURDATE() - INTERVAL 1 MONTH, as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Order"
      ],
      "question": "What is the average time between sales order creation and delivery?",
      "fields": [
        "transaction_date",
        "delivery_date"
      ]
    },
    "output": "frappe.db.sql('''SELECT AVG(DATEDIFF(delivery_date, transaction_date)) AS avg_days FROM [BT]tabSales Order[BT] WHERE delivery_date IS NOT NULL''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "What is the annual CTC for employee EMP-0012?",
      "fields": [
        "name",
        "employee_name",
        "ctc"
      ]
    },
    "output": "frappe.db.sql('''SELECT ctc FROM [BT]tabEmployee[BT] WHERE name = \"EMP-0012''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Show the monthly salary for all employees.",
      "fields": [
        "name",
        "employee_name",
        "ctc",
        "salary_currency"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, ctc, salary_currency FROM [BT]tabEmployee[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "List employees with a salary greater than ₹50,000.",
      "fields": [
        "name",
        "employee_name",
        "ctc"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, ctc FROM [BT]tabEmployee[BT] WHERE ctc > 50000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees have received a salary increase this year?",
      "fields": [
        "name",
        "employee_name",
        "ctc",
        "modified"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, ctc, modified FROM [BT]tabEmployee[BT] WHERE YEAR(modified) = YEAR(CURDATE())''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Show the salary mode (e.g., bank transfer, cheque) for employees.",
      "fields": [
        "name",
        "employee_name",
        "salary_mode"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, salary_mode FROM [BT]tabEmployee[BT]''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "List employees whose CTC is below ₹30,000.",
      "fields": [
        "name",
        "employee_name",
        "ctc"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name, ctc FROM [BT]tabEmployee[BT] WHERE ctc < 30000''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Which employees are currently inactive?",
      "fields": [
        "name",
        "employee_name"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, employee_name FROM [BT]tabEmployee[BT] WHERE status = 'Inactive' ''', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List all sales invoices for customer 'Organs Ltd'.",
      "fields": [
        "name",
        "customer"
      ]
    },
    "output": "frappe.db.sql('SELECT name,customer FROM [BT]tabSales Invoice[BT] WHERE customer = \"Organs Ltd\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with total greater than 1000.",
      "fields": [
        "name",
        "total"
      ]
    },
    "output": "frappe.db.sql('SELECT name,total FROM [BT]tabSales Invoice[BT] WHERE total > 1000', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "List invoices for supplier 'XYZ Pvt Ltd'.",
      "fields": [
        "name",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('SELECT name,supplier FROM [BT]tabPurchase Invoice[BT] WHERE supplier = \"XYZ Pvt Ltd\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List all customers in 'Retail' group.",
      "fields": [
        "name",
        "customer_group"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM [BT]tabCustomer[BT] WHERE customer_group = \"Retail\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Find customers in territory 'North'.",
      "fields": [
        "name",
        "territory"
      ]
    },
    "output": "frappe.db.sql('SELECT name, territory FROM [BT]tabCustomer[BT] WHERE territory = \"North\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "List employees in department 'Sales'.",
      "fields": [
        "name",
        "department"
      ]
    },
    "output": "frappe.db.sql('SELECT name, department FROM [BT]tabEmployee[BT] WHERE department = \"Sales\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Find employees with designation 'Manager'.",
      "fields": [
        "name",
        "designation"
      ]
    },
    "output": "frappe.db.sql('SELECT name, designation FROM [BT]tabEmployee[BT] WHERE designation = \"Manager\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items in item group 'Electronics'.",
      "fields": [
        "name",
        "item_group"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_group FROM [BT]tabItem[BT] WHERE item_group = \"Electronics\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Find items with valuation rate above 5000.",
      "fields": [
        "name",
        "valuation_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, valuation_rate FROM [BT]tabItem[BT] WHERE valuation_rate > 5000', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all sales invoices for customer 'Pivot Ltd'.",
      "fields": [
        "name",
        "customer"
      ]
    },
    "output": "frappe.db.sql('SELECT name,customer FROM [BT]tabSales Invoice[BT] WHERE customer = \"Pivot Ltd\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Find invoices with total more than 1000.",
      "fields": [
        "name",
        "total"
      ]
    },
    "output": "frappe.db.sql('SELECT name,total FROM [BT]tabSales Invoice[BT] WHERE total > 1000', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Get all purchase invoices for supplier 'XYZ Pvt Ltd'.",
      "fields": [
        "name",
        "supplier"
      ]
    },
    "output": "frappe.db.sql('SELECT name,supplier FROM [BT]tabPurchase Invoice[BT] WHERE supplier = \"XYZ Pvt Ltd\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Purchase Invoice"
      ],
      "question": "Show invoices posted in July 2025.",
      "fields": [
        "name",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name,posting_date FROM [BT]tabPurchase Invoice[BT] WHERE posting_date LIKE \"2025-07-%\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "List customers in group 'Retail'.",
      "fields": [
        "name",
        "customer_group"
      ]
    },
    "output": "frappe.db.sql('SELECT name FROM [BT]tabCustomer[BT] WHERE customer_group = \"Retail\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Customer"
      ],
      "question": "Find customers in 'North' territory.",
      "fields": [
        "name",
        "territory"
      ]
    },
    "output": "frappe.db.sql('SELECT name, territory FROM [BT]tabCustomer[BT] WHERE territory = \"North\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "List employees in 'Sales' department.",
      "fields": [
        "name",
        "employee_name",
        "department"
      ]
    },
    "output": "frappe.db.sql('SELECT name, employee_name, department FROM [BT]tabEmployee[BT] WHERE department = \"Sales\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Employee"
      ],
      "question": "Find employees with designation 'Manager'.",
      "fields": [
        "name",
        "designation"
      ]
    },
    "output": "frappe.db.sql('SELECT name, designation FROM [BT]tabEmployee[BT] WHERE designation = \"Manager\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "List items in group 'Electronics'.",
      "fields": [
        "name",
        "item_group"
      ]
    },
    "output": "frappe.db.sql('SELECT name, item_group FROM [BT]tabItem[BT] WHERE item_group = \"Electronics\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Item"
      ],
      "question": "Find items with price above 5000.",
      "fields": [
        "name",
        "valuation_rate"
      ]
    },
    "output": "frappe.db.sql('SELECT name, valuation_rate FROM [BT]tabItem[BT] WHERE valuation_rate > 5000', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export loyalty program activity for this year.",
      "fields": [
        "loyalty_program",
        "posting_date",
        "name"
      ]
    },
    "output": "frappe.db.sql('SELECT loyalty_program, posting_date, name FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE()) AND loyalty_program != \"\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export loyalty redemption account details for invoices this year.",
      "fields": [
        "name",
        "loyalty_redemption_account",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, loyalty_redemption_account FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Which cost centers were used for loyalty redemption this year?",
      "fields": [
        "loyalty_redemption_cost_center",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT loyalty_redemption_cost_center FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "List invoices created this year with address and contact info.",
      "fields": [
        "address_and_contact",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT address_and_contact FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE()) AND address_and_contact = 1', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Invoices where address and contact was added today?",
      "fields": [
        "address_and_contact",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT address_and_contact FROM [BT]tabSales Invoice[BT] WHERE address_and_contact = 1 AND posting_date = CURDATE()', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get invoices created this year where customer address was updated.",
      "fields": [
        "customer_address",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, customer_address FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE()) AND customer_address != \"\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Export customer addresses from all invoices this year.",
      "fields": [
        "customer_address",
        "posting_date"
      ]
    },
    "output": "frappe.db.sql('SELECT name, customer_address FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE())', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Show all invoices created this year with valid address display.",
      "fields": [
        "address_display"
      ]
    },
    "output": "frappe.db.sql('SELECT address_display FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE()) AND address_display != \"\"', as_dict=True)"
  },
  {
    "input": {
      "doctype": [
        "Sales Invoice"
      ],
      "question": "Get all invoices with territory information this year.",
      "fields": [
        "posting_date",
        "territory",
        "name"
      ]
    },
    "output": "frappe.db.sql('SELECT territory, name FROM [BT]tabSales Invoice[BT] WHERE YEAR(posting_date) = YEAR(CURDATE()) AND territory != \"\"', as_dict=True)"
  }
]