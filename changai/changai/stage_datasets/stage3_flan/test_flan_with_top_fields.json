[
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Who is the sales partner named 'BrightEdge Corp'?",
      "top fields": [
        "partner_name",
        "partner_type",
        "territory",
        "commission_rate",
        "referral_code",
        "website"
      ]
    },
    "output": "frappe.get_doc('Sales Partner', 'BrightEdge Corp')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give name , website link of  partner who referred 'NovaTech'?",
      "top fields": [
        "partner_name",
        "website",
        "referral_code",
        "territory",
        "partner_type",
        "show_in_website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'referral_code': 'NovaTech'}, fields = ['partner_name', 'website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all sales partners along with their names and commission percentages.",
      "top fields": [
        "partner_name",
        "commission_rate",
        "partner_type",
        "territory",
        "show_in_website",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields = ['partner_name', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Identify the distributor with the partner name 'QatarSuppliers Ltd.'",
      "top fields": [
        "partner_name",
        "partner_type",
        "territory",
        "commission_rate",
        "show_in_website",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'QatarSuppliers Ltd.'}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show me the names and types of all sales partners listed on the website.",
      "top fields": [
        "partner_name",
        "partner_type",
        "show_in_website",
        "territory",
        "website",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'show_in_website': 1}, fields = ['partner_name', 'partner_type'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partner with the name 'Omega Resale' has a commission rate above 10%?",
      "top fields": [
        "partner_name",
        "commission_rate",
        "partner_type",
        "territory",
        "website",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'Omega Resale', 'commission_rate': ['>', 10]}, fields = ['partner_name', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find all partners where the name contains the word 'Global'.",
      "top fields": [
        "partner_name",
        "territory",
        "partner_type",
        "website",
        "commission_rate",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': ['like', '%Global%']}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me a list of partner names and referral codes for email marketing.",
      "top fields": [
        "partner_name",
        "referral_code",
        "territory",
        "partner_type",
        "show_in_website",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields = ['partner_name', 'referral_code'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What is the partner name and their introduction text for 'MavenConnect'?",
      "top fields": [
        "partner_name",
        "introduction",
        "partner_type",
        "territory",
        "referral_code",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'MavenConnect'}, fields = ['partner_name', 'introduction'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What type of sales partner is 'EliteMark Inc.'â€”a distributor or a reseller?",
      "top fields": [
        "partner_name",
        "partner_type",
        "territory",
        "commission_rate",
        "website",
        "referral_code"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'partner_name': 'EliteMark Inc.'}, 'partner_type')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show me all partners who are listed as commission agents.",
      "top fields": [
        "partner_type",
        "partner_name",
        "territory",
        "commission_rate",
        "website",
        "show_in_website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Commission Agent'}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which sales partners have the partner type set as affiliate?",
      "top fields": [
        "partner_type",
        "partner_name",
        "territory",
        "website",
        "show_in_website",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate'}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find all dealer-type partners operating in the 'GCC' territory.",
      "top fields": [
        "partner_type",
        "territory",
        "partner_name",
        "website",
        "show_in_website",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Dealer', 'territory': 'GCC'}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What is the partner type associated with 'ResellXperts Pvt Ltd'?",
      "top fields": [
        "partner_name",
        "partner_type",
        "territory",
        "website",
        "referral_code",
        "show_in_website"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'partner_name': 'ResellXperts Pvt Ltd'}, 'partner_type')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do we have any affiliates who referred new customers this quarter?",
      "top fields": [
        "partner_type",
        "referral_code",
        "territory",
        "partner_name",
        "website",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate'}, fields = ['referral_code'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all resellers whose websites are publicly visible on our portal.",
      "top fields": [
        "partner_type",
        "show_in_website",
        "partner_name",
        "territory",
        "commission_rate",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Reseller', 'show_in_website': 1}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partner types do we currently work with across all operational territories?",
      "top fields": [
        "partner_type",
        "territory",
        "commission_rate",
        "partner_name",
        "show_in_website",
        "address_desc"
      ]
    },
    "output": "frappe.db.get_list('Sales Partner', distinct=True, fields = ['partner_type', 'territory'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me the names and partner types of every partner earning over 10% commission.",
      "top fields": [
        "partner_name",
        "partner_type",
        "commission_rate",
        "territory",
        "website",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'commission_rate': ['>', 10]}, fields = ['partner_name', 'partner_type'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Between resellers and distributors, which type has the higher count in our system?",
      "top fields": [
        "partner_type",
        "commission_rate",
        "territory",
        "partner_name",
        "referral_code",
        "show_in_website"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_type, COUNT(*) as total FROM `tabSales Partner` WHERE partner_type IN ('Reseller', 'Distributor') GROUP BY partner_type ORDER BY total DESC''')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which region is 'Alpha Distributors' assigned to?",
      "top fields": [
        "territory",
        "partner_name",
        "partner_type",
        "commission_rate",
        "website",
        "address_desc"
      ]
    },
    "output": "frappe.get_value('Sales Partner', 'Alpha Distributors', 'territory')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me the territory and commission rate for 'Skyline Partners'.",
      "top fields": [
        "territory",
        "commission_rate",
        "partner_name",
        "partner_type",
        "website",
        "referral_code"
      ]
    },
    "output": "frappe.get_value('Sales Partner', 'Skyline Partners', ['territory', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "In which markets are our affiliate partners most active?",
      "top fields": [
        "territory",
        "partner_type",
        "partner_name",
        "commission_rate",
        "show_in_website",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate'}, fields = ['territory'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List partners operating in 'Southeast Asia' and show their partner type.",
      "top fields": [
        "territory",
        "partner_name",
        "partner_type",
        "commission_rate",
        "website",
        "address_desc"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'Southeast Asia'}, fields = ['partner_name', 'partner_type'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find all sales partners assigned to the 'GCC' territory.",
      "top fields": [
        "partner_name",
        "territory",
        "partner_type",
        "website",
        "referral_code",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'GCC'}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "How many partners are listed under the 'Europe' territory?",
      "top fields": [
        "territory",
        "partner_name",
        "partner_type",
        "commission_rate",
        "website",
        "referral_code"
      ]
    },
    "output": "frappe.db.count('Sales Partner', {'territory': 'Europe'})"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which regions have the most commission agents listed?",
      "top fields": [
        "territory",
        "partner_type",
        "partner_name",
        "commission_rate",
        "website",
        "show_in_website"
      ]
    },
    "output": "frappe.db.sql('''SELECT territory, COUNT(*) as total FROM `tabSales Partner` WHERE partner_type = 'Commission Agent' GROUP BY territory ORDER BY total DESC''')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List the names and territories of all partners visible on our website.",
      "top fields": [
        "partner_name",
        "territory",
        "show_in_website",
        "website",
        "partner_type",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'show_in_website': 1}, fields = ['partner_name', 'territory'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Whatâ€™s the combined list of regions covered by our resellers and distributors?",
      "top fields": [
        "territory",
        "partner_type",
        "partner_name",
        "commission_rate",
        "show_in_website",
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': ['in', ['Reseller', 'Distributor']]}, fields = ['territory'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do we have any sales partners working in both Europe and Asia?",
      "top fields": [
        "partner_name",
        "territory",
        "commission_rate",
        "partner_type",
        "referral_code",
        "website"
      ]
    },
    "output": "frappe.db.sql('''SELECT partner_name FROM `tabSales Partner` WHERE territory IN ('Europe', 'Asia') GROUP BY partner_name HAVING COUNT(DISTINCT territory) = 2''')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What is the commission rate set for 'ResellXperts Pvt Ltd'?",
      "top fields": [
        "commission_rate",
        "partner_name",
        "partner_type",
        "territory",
        "website",
        "referral_code"
      ]
    },
    "output": "frappe.get_value('Sales Partner', 'ResellXperts Pvt Ltd', 'commission_rate')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all sales partners with a commission rate above 12%.",
      "top fields": [
        "commission_rate",
        "partner_name",
        "partner_type",
        "territory",
        "show_in_website",
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'commission_rate': ['>', 12]}, fields = ['name','commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Who are the partners with a commission rate of exactly 10.5%?",
      "top fields": [
        "commission_rate",
        "partner_name",
        "partner_type",
        "territory",
        "referral_code",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'commission_rate': 10.5}, fields = ['name', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me names and commission rates of partners who are resellers.",
      "top fields": [
        "commission_rate",
        "partner_type",
        "partner_name",
        "territory",
        "website",
        "show_in_website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'reseller'}, fields = ['partner_name', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show partners with commission rates above 8% operating in 'South Asia'.",
      "top fields": [
        "partner_name",
        "commission_rate",
        "territory",
        "partner_type",
        "website",
        "show_in_website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'commission_rate': ['>', 8], 'territory': 'South Asia'}, fields = ['partner_name', 'commission_rate', 'territory'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Is there a partner with 0% commission rate in the system?",
      "top fields": [
        "commission_rate",
        "partner_name",
        "partner_type",
        "territory",
        "website",
        "description"
      ]
    },
    "output": "frappe.db.exists('Sales Partner', {'commission_rate': 0})"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find all distributors with commission rates between 5% and 15%.",
      "top fields": [
        "partner_name",
        "partner_type",
        "commission_rate",
        "territory",
        "referral_code",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'distributor', 'commission_rate': ['between', [5, 15]]}, fields = ['partner_name', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partner offers the highest commission?",
      "top fields": [
        "commission_rate",
        "partner_name",
        "partner_type",
        "territory",
        "referral_code",
        "website"
      ]
    },
    "output": "frappe.db.sql('''SELECT name, commission_rate FROM `tabSales Partner` ORDER BY commission_rate DESC LIMIT 1''')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do any of the top-performing partners have a commission rate below 5%?",
      "top fields": [
        "commission_rate",
        "partner_name",
        "partner_type",
        "targets",
        "territory",
        "website"
      ]
    },
    "output": "frappe.db.exists('Sales Partner', {'commission_rate': ['<', 5]})"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show partner names, types, and commission rates for website-visible partners.",
      "top fields": [
        "partner_name",
        "partner_type",
        "show_in_website",
        "commission_rate",
        "territory",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'show_in_website': 1}, fields = ['partner_name', 'partner_type', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Can you show the address and contact details linked to 'SummitTrade Inc.'?",
      "top fields": [
        "address_contacts",
        "partner_name",
        "contact_desc",
        "address_desc",
        "territory",
        "contact_html"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'SummitTrade Inc.'}, fields = ['address_contacts'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which sales partners have more than one address or contact entry associated with them?",
      "top fields": [
        "address_contacts",
        "partner_name",
        "address_desc",
        "contact_desc",
        "territory",
        "partner_type"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'address_contacts': ['!=', []] }, fields = ['address_contacts'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all contact entries found under sales partners based in the UAE.",
      "top fields": [
        "address_contacts",
        "territory",
        "partner_name",
        "address_desc",
        "partner_type",
        "contact_html"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'UAE'}, fields = ['address_contacts'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Are there any partners without any contact or address entries listed?",
      "top fields": [
        "address_contacts",
        "partner_name",
        "address_desc",
        "contact_desc",
        "territory",
        "partner_type"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'address_contacts': []}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Fetch the partner name, type, and all contact records for resellers in North America.",
      "top fields": [
        "partner_name",
        "partner_type",
        "territory",
        "address_contacts",
        "address_desc",
        "contact_desc"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Reseller', 'territory': 'North America'}, fields = ['partner_name', 'partner_type', 'address_contacts'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "How many contact records are stored for the partner 'GreenLink Pvt Ltd'?",
      "top fields": [
        "address_contacts",
        "partner_name",
        "address_desc",
        "contact_desc",
        "contact_html",
        "territory"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'GreenLink Pvt Ltd'}, fields = ['address_contacts'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me a breakdown of sales partners and their total number of linked contact entries.",
      "top fields": [
        "address_contacts",
        "partner_name",
        "address_desc",
        "contact_desc",
        "territory",
        "partner_type"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields = ['partner_name', 'address_contacts'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do we have any distributors that havenâ€™t added address contacts yet?",
      "top fields": [
        "partner_type",
        "address_contacts",
        "partner_name",
        "territory",
        "address_desc",
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Distributor', 'address_contacts': []}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners donâ€™t have any address_desc provided?",
      "top fields": [
        "partner_name",
        "address_desc",
        "territory",
        "partner_type",
        "description",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'address_desc': ['is', '']}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Count the number of partners with 'No. 14' in their address description.",
      "top fields": [
        "address_desc",
        "partner_name",
        "territory",
        "partner_type",
        "description",
        "logo"
      ]
    },
    "output": "frappe.db.count('Sales Partner', {'address_desc': ['like', '%No. 14%']})"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Export the partner name and address_desc of all affiliates in the system.",
      "top fields": [
        "partner_name",
        "address_desc",
        "partner_type",
        "territory",
        "website",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate'}, fields = ['partner_name', 'address_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show the address_desc field for all listed partners.",
      "top fields": [
        "address_desc",
        "partner_name",
        "territory",
        "partner_type",
        "referral_code",
        "contact_html"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields = ['address_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Can I get the address description for every distributor we work with?",
      "top fields": [
        "address_desc",
        "partner_type",
        "territory",
        "partner_name",
        "description",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Distributor'}, fields = ['address_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which sales partners have their address_desc starting with 'Suite 3A'?",
      "top fields": [
        "address_desc",
        "partner_name",
        "territory",
        "partner_type",
        "website",
        "contact_desc"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'address_desc': ['like', 'Suite 3A%']}, fields = ['address_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List names and short address descriptions of partners based in Europe.",
      "top fields": [
        "partner_name",
        "territory",
        "address_desc",
        "partner_type",
        "referral_code",
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'Europe'}, fields = ['partner_name', 'address_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get me address_desc and territory for all commission agents.",
      "top fields": [
        "address_desc",
        "territory",
        "partner_type",
        "partner_name",
        "website",
        "targets"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Commission Agent'}, fields = ['address_desc', 'territory'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Does 'MarketWide Inc.' have an address description stored?",
      "top fields": [
        "address_desc",
        "partner_name",
        "partner_type",
        "territory",
        "contact_desc",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'MarketWide Inc.'}, fields = ['address_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners donâ€™t have any address_desc provided?",
      "top fields": [
        "address_desc",
        "partner_name",
        "territory",
        "partner_type",
        "contact_html",
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'address_desc': ['is', 'null']}, fields = ['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Count the number of partners with 'No. 14' in their address description.",
      "top fields": [
        "address_desc",
        "partner_name",
        "territory",
        "partner_type",
        "route",
        "referral_code"
      ]
    },
    "output": "frappe.db.count('Sales Partner', filters={'address_desc': ['like', '%No. 14%']})"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners donâ€™t have any address_desc provided?",
      "top fields": [
        "partner_name",
        "address_desc",
        "territory",
        "partner_type",
        "description",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'address_desc': ['is', '']}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Count the number of partners with 'No. 14' in their address description.",
      "top fields": [
        "address_desc",
        "partner_name",
        "territory",
        "partner_type",
        "description",
        "logo"
      ]
    },
    "output": "frappe.db.count('Sales Partner', {'address_desc': ['like', '%No. 14%']})"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Export the partner name and address_desc of all affiliates in the system.",
      "top fields": [
        "partner_name",
        "address_desc",
        "partner_type",
        "territory",
        "website",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate'}, fields = ['partner_name', 'address_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show the address_desc field for all listed partners.",
      "top fields": [
        "address_desc",
        "partner_name",
        "territory",
        "partner_type",
        "referral_code",
        "contact_html"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields = ['address_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Can I get the address description for every distributor we work with?",
      "top fields": [
        "address_desc",
        "partner_type",
        "territory",
        "partner_name",
        "description",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Distributor'}, fields = ['address_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which sales partners have their address_desc starting with 'Suite 3A'?",
      "top fields": [
        "address_desc",
        "partner_name",
        "territory",
        "partner_type",
        "website",
        "contact_desc"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'address_desc': ['like', 'Suite 3A%']}, fields = ['address_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List names and short address descriptions of partners based in Europe.",
      "top fields": [
        "partner_name",
        "territory",
        "address_desc",
        "partner_type",
        "referral_code",
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'Europe'}, fields = ['partner_name', 'address_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get me address_desc and territory for all commission agents.",
      "top fields": [
        "address_desc",
        "territory",
        "partner_type",
        "partner_name",
        "website",
        "targets"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Commission Agent'}, fields = ['address_desc', 'territory'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Does 'MarketWide Inc.' have an address description stored?",
      "top fields": [
        "address_desc",
        "partner_name",
        "partner_type",
        "territory",
        "contact_desc",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'MarketWide Inc.'}, fields = ['address_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners donâ€™t have any address_desc provided?",
      "top fields": [
        "address_desc",
        "partner_name",
        "territory",
        "partner_type",
        "contact_html",
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'address_desc': ['is', 'null']}, fields = ['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Count the number of partners with 'No. 14' in their address description.",
      "top fields": [
        "address_desc",
        "partner_name",
        "territory",
        "partner_type",
        "route",
        "referral_code"
      ]
    },
    "output": "frappe.db.count('Sales Partner', filters={'address_desc': ['like', '%No. 14%']})"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Export the partner name and address_desc of all affiliates in the system.",
      "top fields": [
        "partner_name",
        "partner_type",
        "address_desc",
        "territory",
        "description",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate'}, fields = ['partner_name', 'address_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "How much commission does 'TradeSphere Global' earn?",
      "top fields": [
        "commission_rate",
        "partner_name",
        "partner_type",
        "territory",
        "targets",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'TradeSphere Global'}, fields = ['commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all sales partners earning more than 10% commission.",
      "top fields": [
        "commission_rate",
        "partner_name",
        "partner_type",
        "territory",
        "description",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'commission_rate': ['>', 10]}, fields = ['commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Whatâ€™s the commission rate for our distributor 'BrightWave Solutions'?",
      "top fields": [
        "commission_rate",
        "partner_name",
        "partner_type",
        "territory",
        "description",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'BrightWave Solutions', 'partner_type': 'Distributor'}, fields = ['commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show names and commission percentages of all commission agents.",
      "top fields": [
        "partner_name",
        "partner_type",
        "commission_rate",
        "territory",
        "referral_code",
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Commission Agent'}, fields = ['partner_name', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find partners earning less than or equal to 5% commission.",
      "top fields": [
        "commission_rate",
        "partner_type",
        "partner_name",
        "territory",
        "targets",
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'commission_rate': ['<=', 5]}, fields = ['commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Is there any partner with exactly 12% commission?",
      "top fields": [
        "commission_rate",
        "partner_name",
        "partner_type",
        "territory",
        "description",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'commission_rate': 12}, fields = ['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me the partner name, website, and commission percentage for all resellers.",
      "top fields": [
        "partner_name",
        "website",
        "commission_rate",
        "partner_type",
        "territory",
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Reseller'}, fields = ['partner_name', 'website', 'commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Compare the commission rates between 'TradeWing Pvt Ltd' and 'GlobalReach Partners'.",
      "top fields": ["partner_name", "commission_rate", "territory", "partner_type", "description", "targets"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': ['in', ['TradeWing Pvt Ltd', 'GlobalReach Partners']]}, fields = ['commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What are the commission rates for all partners based in 'MENA' region?",
      "top fields": ["territory", "commission_rate", "partner_name", "partner_type", "description", "referral_code"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'MENA'}, fields = ['commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Are distributors earning more commission than affiliates?",
      "top fields": ["partner_type", "commission_rate", "targets", "partner_name", "territory", "description"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': ['in', ['Distributor', 'Affiliate']]}, fields = ['commission_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Can I see the contact description for 'FusionTrade Ltd'?",
      "top fields": ["partner_name", "contact_desc", "territory", "website", "contact_html", "address_desc"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'FusionTrade Ltd'}, fields = ['contact_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all partners and their contact_desc top fields.",
      "top fields": ["partner_name", "contact_desc", "contact_html", "territory", "description", "address_desc"]
    },
    "output": "frappe.get_all('Sales Partner', fields = ['partner_name', 'contact_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners have contact descriptions starting with 'Call'?",
      "top fields": ["partner_name", "contact_desc", "description", "contact_html", "territory", "address_desc"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'contact_desc': ['like', 'Call%']}, fields = ['partner_name', 'contact_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get contact_desc and website for all distributor-type partners.",
      "top fields": ["partner_type", "contact_desc", "website", "partner_name", "territory", "contact_html"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Distributor'}, fields = ['contact_desc', 'website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show contact_desc and address_desc for affiliates in our system.",
      "top fields": ["partner_type", "contact_desc", "address_desc", "territory", "partner_name", "description"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate'}, fields = ['contact_desc', 'address_desc'])"
  },
  {
  "input": {
    "doctype": "Sales Partner",
    "question": "Get me the description and partner type for affiliates in our list.",
    "top fields": ["partner_type", "description", "partner_name", "territory", "referral_code", "contact_desc"]
  },
  "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate'}, fields = ['description', 'partner_type'])"
},
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Whatâ€™s the contact description for partners located in Asia?",
      "top fields": ["contact_desc", "territory", "partner_name", "partner_type", "description", "website"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'Asia'}, fields = ['partner_name', 'contact_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find all partners where contact_desc contains a phone number.",
      "top fields": ["contact_desc", "partner_name", "territory", "referral_code", "description", "website"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'contact_desc': ['like', '%+%']}, fields = ['partner_name', 'contact_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Count how many partners have no contact_desc set.",
      "top fields": ["contact_desc", "partner_name", "territory", "partner_type", "description", "route"]
    },
    "output": "frappe.db.count('Sales Partner', filters={'contact_desc': ['in', ['', null]]})"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Export the partner name and contact description of all resellers.",
      "top fields": ["contact_desc", "partner_name", "partner_type", "territory", "description", "route"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Reseller'}, fields = ['partner_name', 'contact_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partner has the contact_desc 'Email support@globex.com for queries'?",
      "top fields": ["contact_desc", "partner_name", "description", "website", "territory", "referral_code"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'contact_desc': 'Email support@globex.com for queries'}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What is the description given for 'Orbit Trade Solutions' in our partner records?",
      "top fields": ["description", "partner_name", "contact_desc", "territory", "referral_code", "route"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'Orbit Trade Solutions'}, fields = ['description'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all partners along with their descriptions.",
      "top fields": ["description", "partner_name", "territory", "partner_type", "referral_code", "contact_desc"]
    },
    "output": "frappe.get_all('Sales Partner', fields = ['partner_name', 'description'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners include the word 'logistics' in their description?",
      "top fields": ["description", "partner_name", "contact_desc", "territory", "referral_code", "route"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'description': ['like', '%logistics%']}, fields = ['partner_name', 'description'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Can you show the name and description of each partner based in Asia?",
      "top fields": ["partner_name", "description", "territory", "partner_type", "referral_code", "route"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'Asia'}, fields = ['partner_name', 'description'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get me the description and partner type for affiliates in our list.",
      "top fields": ["description", "partner_type", "partner_name", "website", "territory", "referral_code"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'affiliate'}, fields = ['description', 'partner_type'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do we have a partner with 'ecommerce' mentioned in the description?",
      "top fields": ["description", "partner_name", "referral_code", "website", "partner_type", "introduction"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'description': ['like', '%ecommerce%']}, fields = ['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Compare the descriptions of 'BrightLeaf Group' and 'CoreBridge Alliance'.",
      "top fields": ["description", "partner_name", "introduction", "referral_code", "partner_type", "website"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': ['in', ['BrightLeaf Group', 'CoreBridge Alliance']]}, fields = ['partner_name', 'description'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show me names and descriptions of all partners who earn over 15% commission.",
      "top fields": ["partner_name", "description", "commission_rate", "referral_code", "website", "partner_type"]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'commission_rate': ['>', 15] }, fields = ['partner_name', 'description'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Whatâ€™s the official description of our partner 'LogiMax Pvt Ltd'?",
      "top fields": ["description", "partner_name", "partner_type", "website", "introduction", "route"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'LogiMax Pvt Ltd'}, fields = ['description'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find all partners who have empty or missing descriptions.",
      "top fields": ["description", "partner_name", "website", "introduction", "route", "partner_type"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'description': ['in', ['', null]]}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show me the contact details displayed for 'Orbit Connect Pvt Ltd'.",
      "top fields": ["contact_html", "partner_name", "website", "territory", "route", "referral_code"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'Orbit Connect Pvt Ltd'}, fields = ['contact_html'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which sales partners have formatted contact information available?",
      "top fields": ["contact_html", "partner_name", "website", "referral_code", "territory", "route"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'contact_html': ['!=', '']}, fields = ['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do we store contact HTML for each partner profile?",
      "top fields": ["contact_html", "partner_name", "website", "introduction", "referral_code", "partner_type"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'contact_html': ['!=', '']}, fields = ['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get a list of all partners with their HTML-based contact blocks.",
      "top fields": ["contact_html", "partner_name", "website", "territory", "referral_code", "introduction"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'contact_html': ['!=', '']}, fields = ['partner_name', 'contact_html'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners have both their formatted contacts and website links listed?",
      "top fields": ["contact_html", "website", "partner_name", "route", "referral_code", "territory"]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'contact_html': ['!=', ''], 'website': ['!=', ''] }, fields = ['partner_name', 'contact_html', 'website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me the contact block and territory for all resellers.",
      "top fields": ["contact_html", "territory", "partner_type", "partner_name", "referral_code", "introduction"]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Reseller'}, fields = ['contact_html', 'territory'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find partners who have provided both contact HTML and introduction.",
      "top fields": ["contact_html", "introduction", "partner_name", "referral_code", "website", "partner_type"]
    },
    "output": "frappe.get_all('Sales Partner', filters={ 'contact_html': ['!=', ''], 'introduction': ['!=', ''] }, fields = ['partner_name', 'contact_html', 'introduction'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What are the targets set for each of our sales partners?",
      "top fields": ["targets", "partner_name", "partner_type", "territory", "referral_code", "commission_rate"]
    },
    "output": "frappe.get_all('Sales Partner', fields = ['targets'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me the list of all partners along with their sales targets.",
      "top fields": ["partner_name", "targets", "partner_type", "territory", "commission_rate", "referral_code"]
    },
    "output": "frappe.get_all('Sales Partner', fields = ['partner_name', 'targets'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show targets assigned to distributor-type partners across all territories.",
      "top fields": [
        "partner_type",
        "targets",
        "territory",
        "partner_name",
        "commission_rate",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Distributor'}, fields = ['partner_name', 'partner_type', 'targets', 'territory'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partner has the highest sales target set for this year?",
      "top fields": [
        "partner_name",
        "targets",
        "partner_type",
        "territory",
        "commission_rate",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields = ['partner_name', 'targets'], order_by='targets desc', limit=1)"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List partner names and their targets who operate in the UAE region.",
      "top fields": [
        "partner_name",
        "targets",
        "territory",
        "partner_type",
        "referral_code",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'UAE'}, fields = ['partner_name', 'targets'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Can you show me partner types and the targets they are expected to meet?",
      "top fields": [
        "partner_type",
        "targets",
        "partner_name",
        "territory",
        "referral_code",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields = ['partner_type', 'targets'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me all partners marked as affiliates with targets above QAR 500,000.",
      "top fields": [
        "partner_type",
        "targets",
        "partner_name",
        "territory",
        "commission_rate",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate', 'targets': ['>', 500000]}, fields = ['partner_name', 'partner_type', 'targets'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which of our resellers have sales targets for the upcoming quarter?",
      "top fields": [
        "partner_type",
        "targets",
        "partner_name",
        "territory",
        "website",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Reseller'}, fields = ['partner_name', 'partner_type', 'targets'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Compare sales targets across partner types and list the top performers.",
      "top fields": [
        "partner_type",
        "targets",
        "partner_name",
        "territory",
        "commission_rate",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields = ['partner_name', 'partner_type', 'targets'], order_by='targets desc')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do we have any partners without any assigned sales targets?",
      "top fields": [
        "targets",
        "name",
        "partner_name",
        "partner_type",
        "territory",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'targets': ''}, fields = ['name', 'partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What is the official website of 'Torotta Avlaye'?",
      "top fields": [
        "partner_name",
        "website",
        "referral_code",
        "route",
        "contact_desc",
        "show_in_website"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'partner_name': 'Torotta Avlaye'}, 'website')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all partners whose websites end with '.com.qa'.",
      "top fields": [
        "website",
        "name",
        "partner_name",
        "route",
        "partner_website",
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'website': ['like', '%.com.qa']}, fields = ['name', 'website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do any of our reseller partners have websites listed?",
      "top fields": [
        "partner_type",
        "website",
        "name",
        "partner_name",
        "referral_code",
        "show_in_website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Reseller', 'website': ['!=', '']}, fields = ['name', 'website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show partner names and their websites for those visible to the public.",
      "top fields": [
        "partner_name",
        "website",
        "show_in_website",
        "partner_website",
        "referral_code",
        "territory"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'show_in_website': 1}, fields = ['partner_name', 'website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners have no website provided in their records?",
      "top fields": [
        "website",
        "name",
        "partner_name",
        "show_in_website",
        "referral_code",
        "route"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'website': ''}, fields = ['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get me a list of partner websites containing the word 'global'.",
      "top fields": [
        "website",
        "partner_name",
        "route",
        "referral_code",
        "description",
        "partner_website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'website': ['like', '%global%']}, fields = ['partner_name', 'website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Can you find all distributor partners and display their website URLs?",
      "top fields": [
        "partner_type",
        "website",
        "partner_name",
        "territory",
        "referral_code",
        "route"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Distributor'}, fields = ['website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do we have any affiliate partners with websites ending in '.org'?",
      "top fields": [
        "partner_type",
        "website",
        "partner_name",
        "referral_code",
        "introduction",
        "territory"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate', 'website': ['like', '%.org']}, fields = ['name', 'website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Between 'Resell360' and 'OmniPartners', which one has a listed website?",
      "top fields": [
        "partner_name",
        "website",
        "referral_code",
        "show_in_website",
        "contact_desc",
        "partner_type"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': ['in', ['Resell360', 'OmniPartners']], 'website': ['!=', '']}, fields = ['partner_name', 'website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partner has the website 'www.synergylink.com'?",
      "top fields": [
        "website",
        "partner_name",
        "name",
        "partner_website",
        "route",
        "referral_code"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'website': 'www.synergylink.com'}, 'partner_name')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What is the referral code assigned to 'Altura Traders'?",
      "top fields": [
        "partner_name",
        "referral_code",
        "partner_type",
        "website",
        "route",
        "description"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'partner_name': 'Altura Traders'}, 'referral_code')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all partners along with their referral_code values.",
      "top fields": [
        "name",
        "referral_code",
        "partner_name",
        "partner_type",
        "commission_rate",
        "territory"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields = ['name', 'referral_code'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners donâ€™t have any referral_code provided in their records?",
      "top fields": [
        "name",
        "referral_code",
        "partner_name",
        "route",
        "logo",
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'referral_code': ''}, fields = ['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Find partners who have referral codes starting with 'AFF-'.",
      "top fields": [
        "name",
        "referral_code",
        "partner_name",
        "partner_type",
        "route",
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'referral_code': ['like', 'AFF-%']}, fields = ['name', 'referral_code'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Does 'Zenith Connect' have a referral_code assigned?",
      "top fields": [
        "partner_name",
        "referral_code",
        "show_in_website",
        "introduction",
        "name",
        "website"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'partner_name': 'Zenith Connect'}, 'referral_code')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get the referral_code and website for all affiliate-type partners.",
      "top fields": [
        "partner_type",
        "referral_code",
        "website",
        "partner_name",
        "route",
        "territory"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate'}, fields = ['referral_code', 'website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which sales partners use 'REF-9082-XP' as their referral code?",
      "top fields": [
        "referral_code",
        "name",
        "partner_name",
        "route",
        "contact_desc",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'referral_code': 'REF-9082-XP'}, fields = ['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Export partner_name and referral_code for all partners in Qatar.",
      "top fields": [
        "partner_name",
        "referral_code",
        "territory",
        "country",
        "website",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'Qatar'}, fields = ['partner_name', 'referral_code'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Count how many partners have valid referral codes stored.",
      "top fields": [
        "referral_code",
        "name",
        "partner_name",
        "show_in_website",
        "description",
        "route"
      ]
    },
    "output": "frappe.db.count('Sales Partner', {'referral_code': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which referral_code corresponds to the partner 'BridgeGlobal Inc.'?",
      "top fields": [
        "partner_name",
        "referral_code",
        "partner_type",
        "introduction",
        "territory",
        "name"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'partner_name': 'BridgeGlobal Inc.'}, 'referral_code')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What is the route path assigned to 'GlobalLink Solutions' on our website?",
      "top fields": [
        "partner_name",
        "route",
        "website",
        "referral_code",
        "partner_website",
        "name"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'partner_name': 'GlobalLink Solutions'}, 'route')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all sales partners whose route starts with '/partners/'.",
      "top fields": [
        "name",
        "route",
        "partner_name",
        "show_in_website",
        "referral_code",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'route': ['like', '/partners/%']}, fields=['name', 'route'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show me the partner names and their corresponding web route paths.",
      "top fields": [
        "partner_name",
        "route",
        "partner_website",
        "referral_code",
        "show_in_website",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields=['partner_name', 'route'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners have unique route entries configured for the site?",
      "top fields": [
        "route",
        "name",
        "partner_name",
        "partner_website",
        "referral_code",
        "show_in_website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'route': ['!=', '']}, fields=['name', 'route'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do we have any partners using the default route value or an empty one?",
      "top fields": [
        "route",
        "name",
        "partner_name",
        "partner_website",
        "show_in_website",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'route': ''}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Between 'TradeBridge' and 'MarketScope', who has a custom route defined?",
      "top fields": [
        "partner_name",
        "route",
        "referral_code",
        "partner_website",
        "name",
        "show_in_website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': ['in', ['TradeBridge', 'MarketScope']], 'route': ['!=', '']}, fields=['partner_name', 'route'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me all route entries that contain the word 'exclusive'.",
      "top fields": [
        "route",
        "partner_name",
        "partner_website",
        "referral_code",
        "website",
        "show_in_website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'route': ['like', '%exclusive%']}, fields=['route'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which sales partner has the URL route '/partner-profile/gcc-distributor'?",
      "top fields": [
        "route",
        "partner_name",
        "referral_code",
        "website",
        "contact_display",
        "partner_website"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'route': '/partner-profile/gcc-distributor'}, 'partner_name')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Export all visible partners on the website along with their route links.",
      "top fields": [
        "show_in_website",
        "partner_name",
        "route",
        "website",
        "partner_website",
        "contact_desc"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'show_in_website': 1}, fields=['partner_name', 'route'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Are there any route top fields duplicated across different partners?",
      "top fields": [
        "route",
        "partner_name",
        "name",
        "referral_code",
        "website",
        "partner_website"
      ]
    },
    "output": "frappe.db.sql('SELECT route, COUNT(*) FROM `tabSales Partner` GROUP BY route HAVING COUNT(*) > 1')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What is the external website link provided for 'BlueOcean Vendors'?",
      "top fields": [
        "partner_name",
        "partner_website",
        "route",
        "logo",
        "referral_code",
        "website"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'partner_name': 'BlueOcean Vendors'}, 'partner_website')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List the partner_website URLs of all partners visible to customers.",
      "top fields": [
        "partner_website",
        "show_in_website",
        "website",
        "contact_desc",
        "partner_name",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'show_in_website': 1}, fields=['partner_website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Can I view the official external sites for all commission agents?",
      "top fields": [
        "partner_website",
        "commission_rate",
        "referral_code",
        "website",
        "partner_type",
        "route"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'commission_rate': ['!=', 0]}, fields=['partner_website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Get partner names and partner_website links for reseller-type entries.",
      "top fields": [
        "partner_name",
        "partner_website",
        "partner_type",
        "referral_code",
        "route",
        "territory"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Reseller'}, fields=['partner_name', 'partner_website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners do not have a partner_website listed yet?",
      "top fields": [
        "partner_website",
        "description",
        "contact_html",
        "logo",
        "name",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_website': ''}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Are there any affiliate partners whose websites contain 'tradehub'?",
      "top fields": [
        "partner_type",
        "partner_website",
        "website",
        "route",
        "partner_name",
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate', 'partner_website': ['like', '%tradehub%']}, fields=['partner_website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Between 'NetBridge Ltd' and 'MarketSpark', who has a valid partner_website?",
      "top fields": [
        "partner_name",
        "partner_website",
        "introduction",
        "route",
        "referral_code",
        "description"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': ['in', ['NetBridge Ltd', 'MarketSpark']], 'partner_website': ['!=', '']}, fields=['partner_name', 'partner_website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show all partner_website URLs that end in '.tech' domain.",
      "top fields": [
        "partner_website",
        "route",
        "website",
        "referral_code",
        "partner_name",
        "contact_desc"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_website': ['like', '%.tech']}, fields=['partner_website'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Do any of the partners have a link to 'https://affiliateworld.org' in their records?",
      "top fields": [
        "partner_website",
        "website",
        "route",
        "description",
        "partner_name",
        "territory"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_website': 'https://affiliateworld.org'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Fetch the partner_website and contact description for partners in South America.",
      "top fields": [
        "partner_website",
        "contact_desc",
        "territory",
        "route",
        "partner_name",
        "introduction"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'South America'}, fields=['partner_website', 'contact_desc'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "What is the introduction note for 'Orbit Traders' in our sales partner list?",
      "top fields": [
        "introduction",
        "partner_name",
        "name",
        "territory",
        "partner_type",
        "commission_rate"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'partner_name': 'Orbit Traders'}, 'introduction')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show me all partners along with their introduction texts.",
      "top fields": [
        "name",
        "introduction",
        "partner_name",
        "territory",
        "partner_type",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields=['name', 'introduction'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which sales partners have introduction messages starting with 'Leading exporter'?",
      "top fields": [
        "name",
        "introduction",
        "partner_name",
        "territory",
        "country",
        "contact_display"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'introduction': ['like', 'Leading exporter%']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List the name and introduction for every commission agent.",
      "top fields": [
        "partner_type",
        "partner_name",
        "introduction",
        "territory",
        "commission_rate",
        "name"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Commission Agent'}, fields=['partner_name', 'introduction'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which partners don't have any introduction filled in?",
      "top fields": [
        "name",
        "introduction",
        "partner_name",
        "territory",
        "partner_type",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'introduction': ''}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Provide all introductions for partners in the European region.",
      "top fields": [
        "territory",
        "introduction",
        "partner_name",
        "country",
        "name",
        "contact_display"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'Europe'}, fields=['introduction'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Export a list of reseller-type partners and their introduction top fields.",
      "top fields": [
        "partner_type",
        "introduction",
        "partner_name",
        "territory",
        "commission_rate",
        "tax_id"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Reseller'}, fields=['introduction'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Check if 'GlobeX Trade Corp' has an introduction field entered.",
      "top fields": [
        "partner_name",
        "introduction",
        "country",
        "commission_rate",
        "contact_display",
        "tax_id"
      ]
    },
    "output": "frappe.get_value('Sales Partner', {'partner_name': 'GlobeX Trade Corp'}, 'introduction')"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "How many sales partners have included an introduction message?",
      "top fields": [
        "introduction",
        "partner_name",
        "country",
        "commission_rate",
        "contact_display",
        "tax_id"
      ]
    },
    "output": "frappe.db.count('Sales Partner', {'introduction': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List all partners whose introductions contain the word 'global'.",
      "top fields": [
        "name",
        "introduction",
        "partner_name",
        "country",
        "commission_rate",
        "contact_display"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'introduction': ['like', '%global%']}, fields = ['name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "What is the naming pattern used to generate supplier IDs?",
      "top fields": [
        "naming_series",
        "supplier_name",
        "supplier_type",
        "country",
        "supplier_group",
        "default_currency"
      ]
    },
    "output": "frappe.get_single_value('Supplier', 'naming_series')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Can you show me how supplier codes are automatically generated?",
      "top fields": [
        "naming_series",
        "tax_id",
        "supplier_group",
        "language",
        "supplier_type",
        "default_price_list"
      ]
    },
    "output": "frappe.get_single_value('Supplier', 'naming_series')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which document controls the prefix used for new supplier entries?",
      "top fields": [
        "naming_series",
        "default_currency",
        "supplier_name",
        "image",
        "supplier_group",
        "supplier_type"
      ]
    },
    "output": "frappe.get_single_value('Supplier', 'naming_series')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find out how supplier numbers are structured in the system.",
      "top fields": [
        "naming_series",
        "default_price_list",
        "is_internal_supplier",
        "supplier_group",
        "supplier_name",
        "supplier_type"
      ]
    },
    "output": "frappe.get_single_value('Supplier', 'naming_series')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Where is the supplier ID format like 'SUP-.YYYY.-' defined?",
      "top fields": [
        "naming_series",
        "tax_id",
        "email_id",
        "supplier_type",
        "default_currency",
        "supplier_group"
      ]
    },
    "output": "frappe.get_single_value('Supplier', 'naming_series')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How are suppliers named when records are created?",
      "top fields": [
        "naming_series",
        "is_transporter",
        "default_currency",
        "supplier_name",
        "supplier_group",
        "email_id"
      ]
    },
    "output": "frappe.get_single_value('Supplier', 'naming_series')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "What format is used for supplier auto-generated names?",
      "top fields": [
        "naming_series",
        "supplier_type",
        "default_currency",
        "supplier_group",
        "email_id",
        "supplier_name"
      ]
    },
    "output": "frappe.get_single_value('Supplier', 'naming_series')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Is there a setting that defines how new supplier records are named?",
      "top fields": [
        "naming_series",
        "payment_terms",
        "default_bank_account",
        "represents_company",
        "supplier_type",
        "disabled"
      ]
    },
    "output": "frappe.get_single_value('Supplier', 'naming_series')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which doctype includes the naming_series for vendors?",
      "top fields": [
        "naming_series",
        "supplier_name",
        "supplier_group",
        "country",
        "email_id",
        "supplier_type"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['naming_series'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "What is the naming pattern for the vendors?",
      "top fields": [
        "naming_series",
        "supplier_group",
        "default_currency",
        "supplier_type",
        "email_id",
        "disabled"
      ]
    },
    "output": "frappe.get_single_value('Supplier', 'naming_series')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who is the vendor with code SUP-00015? I need their registered name for invoicing.",
      "top fields": [
        "supplier_name",
        "email_id",
        "supplier_type",
        "supplier_group",
        "country",
        "disabled"
      ]
    },
    "output": "frappe.get_value('Supplier', {'name': 'SUP-00015'}, 'supplier_name')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Pull up a list of suppliers based in Germany for vendor negotiations.",
      "top fields": [
        "supplier_name",
        "country",
        "supplier_group",
        "email_id",
        "supplier_type",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'Germany'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me the supplier name for internal transport services. We need to update the contract.",
      "top fields": [
        "supplier_name",
        "is_transporter",
        "supplier_type",
        "disabled",
        "supplier_group",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the supplier name and mobile number for 'Metallic Edge Corp'.",
      "top fields": [
        "supplier_name",
        "mobile_no",
        "email_id",
        "supplier_type",
        "country",
        "default_currency"
      ]
    },
    "output": "frappe.get_value('Supplier', {'supplier_name': 'Metallic Edge Corp'}, ['supplier_name', 'mobile_no'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find the supplier that uses the email 'supplies@techlink.io'.",
      "top fields": [
        "supplier_name",
        "email_id",
        "country",
        "supplier_group",
        "disabled",
        "default_currency"
      ]
    },
    "output": "frappe.get_value('Supplier', {'email_id': 'supplies@techlink.io'}, 'supplier_name')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get me the supplier name and default currency for vendors that are marked frozen in the system.",
      "top fields": [
        "supplier_name",
        "default_currency",
        "is_frozen",
        "supplier_group",
        "email_id",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_frozen': 1}, fields=['supplier_name', 'default_currency'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Check the supplier name and primary contact for vendor ID SUP-00021.",
      "top fields": [
        "supplier_name",
        "supplier_primary_contact",
        "email_id",
        "supplier_group",
        "country",
        "supplier_type"
      ]
    },
    "output": "frappe.get_value('Supplier', {'name': 'SUP-00021'}, ['supplier_name', 'supplier_primary_contact'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all active suppliers under the 'Raw Material' group.",
      "top fields": [
        "supplier_name",
        "supplier_group",
        "disabled",
        "supplier_type",
        "is_transporter",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_group': 'Raw Material', 'disabled': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "I need supplier names and email IDs for transport service providers.",
      "top fields": [
        "supplier_name",
        "email_id",
        "is_transporter",
        "supplier_type",
        "country",
        "supplier_group"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields=['supplier_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which country is 'Atlantic Trade Co.' registered in?",
      "top fields": [
        "supplier_name",
        "country",
        "supplier_group",
        "supplier_type",
        "disabled",
        "is_transporter"
      ]
    },
    "output": "frappe.get_value('Supplier', 'Atlantic Trade Co.', 'country')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers located in the United Arab Emirates.",
      "top fields": [
        "supplier_name",
        "country",
        "supplier_group",
        "supplier_type",
        "disabled",
        "is_transporter"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'United Arab Emirates'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get suppliers from India and Bangladesh for textile sourcing.",
      "top fields": [
        "country",
        "supplier_name",
        "supplier_type",
        "supplier_group",
        "disabled",
        "default_currency"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': ['in', ['India', 'Bangladesh']]}, fields=['supplier_name', 'country'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me vendors registered in countries outside the EU.",
      "top fields": [
        "country",
        "supplier_name",
        "supplier_type",
        "supplier_group",
        "disabled",
        "tax_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': ['not in', ['Germany', 'France', 'Italy', 'Spain', 'Poland', 'Sweden']]}, fields=['supplier_name', 'country'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do we have any suppliers from South Korea?",
      "top fields": [
        "supplier_name",
        "country",
        "supplier_group",
        "supplier_type",
        "disabled",
        "is_transporter"
      ]
    },
    "output": "frappe.db.count('Supplier', {'country': 'South Korea'})"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Filter all supplier entries that mention 'Germany' as their country.",
      "top fields": [
        "country",
        "supplier_name",
        "supplier_group",
        "supplier_type",
        "disabled",
        "is_transporter"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'Germany'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How many suppliers are currently registered in China?",
      "top fields": [
        "country",
        "supplier_name",
        "supplier_group",
        "supplier_type",
        "disabled",
        "default_currency"
      ]
    },
    "output": "frappe.db.count('Supplier', {'country': 'China'})"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Export list of suppliers along with their country of operation.",
      "top fields": [
        "supplier_name",
        "country",
        "supplier_group",
        "supplier_type",
        "disabled",
        "default_currency"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'country'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which vendors are based in Australia and New Zealand?",
      "top fields": [
        "supplier_name",
        "country",
        "supplier_type",
        "supplier_group",
        "disabled",
        "is_transporter"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': ['in', ['Australia', 'New Zealand']]}, fields=['supplier_name', 'country'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who are our suppliers from Latin American countries?",
      "top fields": [
        "supplier_name",
        "country",
        "supplier_group",
        "supplier_type",
        "disabled",
        "is_transporter"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': ['in', ['Brazil', 'Mexico', 'Argentina', 'Colombia', 'Chile']]}, fields=['supplier_name', 'country'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which supplier group does 'Fresh Agro Supplies' fall under?",
      "top fields": [
        "supplier_group",
        "supplier_name",
        "disabled",
        "supplier_type",
        "country",
        "is_transporter"
      ]
    },
    "output": "frappe.get_value('Supplier', 'Fresh Agro Supplies', 'supplier_group')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers categorized under 'Raw Material Vendors'.",
      "top fields": [
        "supplier_name",
        "supplier_group",
        "disabled",
        "supplier_type",
        "country",
        "is_transporter"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_group': 'Raw Material Vendors'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How many suppliers do we have in the 'Importers' group?",
      "top fields": [
        "supplier_group",
        "email_id",
        "is_internal_supplier",
        "disabled",
        "country",
        "supplier_type"
      ]
    },
    "output": "frappe.db.count('Supplier', {'supplier_group': 'Importers'})"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the supplier names and their groups for all active vendors from India.",
      "top fields": [
        "supplier_name",
        "supplier_group",
        "disabled",
        "country",
        "supplier_type",
        "is_transporter"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 0, 'country': 'India'}, fields=['supplier_name', 'supplier_group'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show the group classification for suppliers that are transport service providers.",
      "top fields": [
        "supplier_name",
        "supplier_group",
        "is_transporter",
        "supplier_type",
        "disabled",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields=['supplier_name', 'supplier_group'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do we have any local suppliers under the 'Capital Equipment' group?",
      "top fields": [
        "supplier_group",
        "country",
        "supplier_name",
        "supplier_type",
        "disabled",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_group': 'Capital Equipment', 'country': 'India'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Pull all supplier records under the 'Utilities & Services' group with payment terms set.",
      "top fields": [
        "supplier_group",
        "payment_terms",
        "supplier_name",
        "disabled",
        "supplier_type",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_group': 'Utilities & Services', 'payment_terms': ['!=', '']}, fields=['supplier_name', 'payment_terms'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "For each supplier group, show the default currency and the number of associated suppliers.",
      "top fields": [
        "supplier_group",
        "default_currency",
        "supplier_type",
        "country",
        "disabled",
        "supplier_name"
      ]
    },
    "output": "frappe.db.sql('SELECT supplier_group, default_currency, COUNT(*) as count FROM `tabSupplier` GROUP BY supplier_group, default_currency')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any suppliers who also handle transportation services for us?",
      "top fields": [
        "is_transporter",
        "supplier_name",
        "supplier_group",
        "supplier_type",
        "disabled",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which vendors are marked as transport providers for our delivery operations?",
      "top fields": [
        "supplier_name",
        "is_transporter",
        "supplier_type",
        "supplier_group",
        "disabled",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields=['supplier_name', 'is_transporter'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Pull up supplier names along with their transport service status for audit purposes.",
      "top fields": [
        "supplier_name",
        "is_transporter",
        "supplier_type",
        "supplier_group",
        "disabled",
        "default_currency"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'is_transporter'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show transport status and type for all active vendors.",
      "top fields": [
        "supplier_name",
        "is_transporter",
        "supplier_type",
        "disabled",
        "supplier_group",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 0}, fields=['supplier_name', 'supplier_type', 'is_transporter'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers in our system provide transport services along with their products?",
      "top fields": [
        "supplier_name",
        "is_transporter",
        "supplier_type",
        "supplier_group",
        "disabled",
        "default_currency"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields=['supplier_name', 'is_transporter'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List supplier name, group, and transport status for review.",
      "top fields": [
        "supplier_name",
        "supplier_group",
        "is_transporter",
        "disabled",
        "supplier_type",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'supplier_group', 'is_transporter'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which vendors donâ€™t provide transport services but outsource deliveries?",
      "top fields": [
        "is_transporter",
        "supplier_name",
        "supplier_type",
        "supplier_group",
        "disabled",
        "remarks"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 0}, fields=['supplier_name', 'is_transporter'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me all suppliers with their names and whether they handle transportation.",
      "top fields": [
        "supplier_name",
        "is_transporter",
        "supplier_type",
        "supplier_group",
        "disabled",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'is_transporter'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the supplier name, type, and transport capability status for construction vendors.",
      "top fields": [
        "supplier_name",
        "supplier_type",
        "is_transporter",
        "supplier_group",
        "disabled",
        "image"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_type': 'Construction'}, fields=['supplier_name', 'supplier_type', 'is_transporter'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which of our suppliers also operate as logistics partners?",
      "top fields": [
        "supplier_name",
        "is_transporter",
        "supplier_type",
        "supplier_group",
        "disabled",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields=['supplier_name', 'is_transporter'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers who haven't uploaded their business image yet.",
      "top fields": [
        "image",
        "supplier_name",
        "disabled",
        "supplier_type",
        "is_transporter",
        "supplier_group"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'image': ['is', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Pull the image and default currency info for active suppliers.",
      "top fields": [
        "image",
        "default_currency",
        "supplier_name",
        "disabled",
        "supplier_type",
        "is_transporter"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 0}, fields=['supplier_name', 'image', 'default_currency'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which vendors have uploaded a profile image in the system?",
      "top fields": [
        "image",
        "supplier_name",
        "supplier_type",
        "disabled",
        "is_transporter",
        "supplier_group"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'image': ['!=', '']}, fields=['supplier_name', 'image'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me the supplier name and image for all internal suppliers.",
      "top fields": [
        "supplier_name",
        "image",
        "is_internal_supplier",
        "supplier_type",
        "disabled",
        "default_currency"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1}, fields=['supplier_name', 'image'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers along with their logos for catalog publishing.",
      "top fields": [
        "supplier_name",
        "image",
        "supplier_group",
        "disabled",
        "supplier_type",
        "default_currency"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'image'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which vendors have uploaded a profile image in the system?",
      "top fields": [
        "image",
        "supplier_name",
        "supplier_type",
        "disabled",
        "is_transporter",
        "supplier_group"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'image': ['!=', '']}, fields=['supplier_name', 'image'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me the supplier name and image for all internal suppliers.",
      "top fields": [
        "supplier_name",
        "image",
        "is_internal_supplier",
        "supplier_type",
        "disabled",
        "default_currency"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1}, fields=['supplier_name', 'image'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers along with their logos for catalog publishing.",
      "top fields": [
        "supplier_name",
        "image",
        "supplier_group",
        "disabled",
        "supplier_type",
        "default_currency"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'image'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do we have image records for vendors categorized as 'Transport Services'?",
      "top fields": [
        "image",
        "supplier_type",
        "supplier_name",
        "supplier_group",
        "is_transporter",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_type': 'Transport Services', 'image': ['!=', '']}, fields=['supplier_name', 'image'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the name, type, and image of all disabled suppliers.",
      "top fields": [
        "supplier_name",
        "supplier_type",
        "image",
        "disabled",
        "is_internal_supplier",
        "default_currency"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1}, fields=['supplier_name', 'supplier_type', 'image'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers with a configured default bank account.",
      "top fields": [
        "default_bank_account",
        "supplier_name",
        "supplier_type",
        "disabled",
        "default_currency",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['!=', '']}, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers don't have any default bank account set?",
      "top fields": [
        "default_bank_account",
        "supplier_name",
        "disabled",
        "supplier_type",
        "is_internal_supplier",
        "default_currency"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['is', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the names and default bank accounts of all internal suppliers.",
      "top fields": [
        "supplier_name",
        "default_bank_account",
        "is_internal_supplier",
        "disabled",
        "supplier_type",
        "default_currency"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1}, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Pull all disabled suppliers who still have default bank accounts linked.",
      "top fields": [
        "disabled",
        "default_bank_account",
        "supplier_name",
        "supplier_type",
        "default_currency",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1, 'default_bank_account': ['!=', '']}, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which vendors use 'HSBC Main' as their default bank?",
      "top fields": [
        "default_bank_account",
        "supplier_name",
        "supplier_type",
        "disabled",
        "default_currency",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': 'HSBC Main'}, fields = ['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Retrieve the supplier name, currency, and bank account for international suppliers.",
      "top fields": [
        "supplier_name",
        "default_currency",
        "default_bank_account",
        "country",
        "supplier_type",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': ['!=', 'India']}, fields=['supplier_name', 'default_currency', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get all suppliers with both a default bank account and a tax ID.",
      "top fields": [
        "default_bank_account",
        "tax_id",
        "supplier_name",
        "disabled",
        "supplier_type",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['!=', ''], 'tax_id': ['!=', '']}, fields=['supplier_name', 'default_bank_account', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me a list of all vendors and their bank accounts for payment processing.",
      "top fields": [
        "supplier_name",
        "default_bank_account",
        "supplier_type",
        "disabled",
        "default_currency",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['is', ''], 'default_price_list': ['is', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any suppliers with missing bank and price list setup?",
      "top fields": [
        "default_bank_account",
        "default_price_list",
        "supplier_name",
        "disabled",
        "supplier_type",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['is', ''], 'default_price_list': ['is', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List internal suppliers who have a bank account but no tax ID.",
      "top fields": [
        "is_internal_supplier",
        "default_bank_account",
        "supplier_name",
        "tax_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={ 'is_internal_supplier': 1, 'default_bank_account': ['!=', ''], 'tax_id': '' }, fields = ['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers with a configured default bank account.",
      "top fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['isnot', '']}, fields = ['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers don't have any default bank account set?",
      "top fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['=', '']}, fields = ['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the names and default bank accounts of all internal suppliers.",
      "top fields": [
        "supplier_name",
        "default_bank_account",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1}, fields = ['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Pull all disabled suppliers who still have default bank accounts linked.",
      "top fields": [
        "supplier_name",
        "default_bank_account",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1, 'default_bank_account': ['isnot', '']}, fields = ['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which vendors use 'HSBC Main' as their default bank?",
      "top fields": [
        "default_bank_account",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': 'HSBC Main'}, fields = ['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Retrieve the supplier name, currency, and bank account for international suppliers.",
      "top fields": [
        "supplier_name",
        "default_currency",
        "default_bank_account",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': ['!=', 'Local']}, fields = ['supplier_name', 'default_currency', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get all suppliers with both a default bank account and a tax ID.",
      "top fields": [
        "default_bank_account",
        "tax_id",
        "supplier_name"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['isnot', ''], 'tax_id': ['isnot', '']}, fields = ['supplier_name', 'default_bank_account', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me a list of all vendors and their bank accounts for payment processing.",
      "top fields": [
        "supplier_name",
        "default_bank_account"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['isnot', '']}, fields = ['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any suppliers with missing bank and price list setup?",
      "top fields": [
        "default_bank_account",
        "default_price_list",
        "supplier_name",
        "disabled",
        "supplier_type",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': '', 'default_price_list': ''}, fields = ['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List internal suppliers who have a bank account but no tax ID.",
      "top fields": [
        "is_internal_supplier",
        "default_bank_account",
        "tax_id",
        "supplier_name",
        "supplier_type",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'default_bank_account': ['!=', ''], 'tax_id': ['is', '']}, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "What is the default bank account associated with each supplier?",
      "top fields": [
        "is_internal_supplier",
        "default_bank_account",
        "tax_id",
        "supplier_name",
        "supplier_type",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'default_bank_account': ['!=', ''], 'tax_id': ['is', '']}, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get supplier names along with their default bank accounts.",
      "top fields": [
        "supplier_name",
        "default_bank_account",
        "disabled",
        "supplier_type",
        "default_currency",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which internal suppliers have a default bank account listed?",
      "top fields": [
        "is_internal_supplier",
        "default_bank_account",
        "supplier_name",
        "disabled",
        "supplier_type",
        "default_currency"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'default_bank_account': ['!=', '']}, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me the name, currency, and default bank account for all active suppliers.",
      "top fields": [
        "supplier_name",
        "default_currency",
        "default_bank_account",
        "disabled",
        "is_frozen",
        "supplier_type"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 0}, fields=['supplier_name', 'default_currency', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers who have no default bank account setup but are not frozen.",
      "top fields": [
        "default_bank_account",
        "is_frozen",
        "supplier_name",
        "disabled",
        "supplier_type",
        "default_currency"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['is', ''], 'is_frozen': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Pull suppliers with both a valid default bank account and price list.",
      "top fields": [
        "default_bank_account",
        "default_price_list",
        "supplier_name",
        "default_currency",
        "supplier_type",
        "disabled"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['!=', ''], 'default_price_list': ['!=', '']}, fields=['supplier_name', 'default_bank_account', 'default_price_list'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers that are not disabled and have bank details set for default transactions.",
      "top fields": [
        "disabled",
        "default_bank_account",
        "supplier_name",
        "allow_purchase_invoice_creation_without_purchase_order",
        "default_currency",
        "is_frozen"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 0, 'default_bank_account': ['!=', '']}, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me the suppliers who represent companies and have default bank accounts set.",
      "top fields": [
        "represents_company",
        "default_bank_account",
        "supplier_name",
        "supplier_type",
        "supplier_group",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'represents_company': ['!=', ''], 'default_bank_account': ['!=', '']}, fields=['supplier_name', 'represents_company', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Export supplier names and their bank accounts used for automatic payments.",
      "top fields": [
        "supplier_name",
        "default_bank_account",
        "is_internal_supplier",
        "default_currency",
        "supplier_type",
        "companies"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do any vendors lack a default bank account for incoming payment setups?",
      "top fields": [
        "default_bank_account",
        "is_internal_supplier",
        "supplier_name",
        "supplier_group",
        "supplier_type",
        "default_currency"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['is', '']}, fields=['supplier_name', 'supplier_type'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which sales partners have 'Standard Selling' as their default price list?",
      "top fields": [
        "default_price_list",
        "partner_name",
        "partner_type",
        "territory",
        "commission_rate",
        "show_in_website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'default_price_list': 'Standard Selling'}, fields = ['default_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Show me all partners and their assigned default price lists.",
      "top fields": [
        "partner_name",
        "default_price_list",
        "partner_type",
        "territory",
        "commission_rate",
        "referral_code"
      ]
    },
    "output": "frappe.get_all('Sales Partner', fields = ['partner_name', 'default_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Are there any partners that havenâ€™t selected a default price list yet?",
      "top fields": [
        "partner_name",
        "default_price_list",
        "partner_type",
        "territory",
        "address_contacts",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'default_price_list': ['is', 'null']}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Give me the names of partners in Europe using 'Retail Prices' as their default list.",
      "top fields": [
        "partner_name",
        "territory",
        "default_price_list",
        "partner_type",
        "commission_rate",
        "show_in_website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'territory': 'Europe', 'default_price_list': 'Retail Prices'}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Who is using 'Wholesale Rates' as the default price list and is also a reseller?",
      "top fields": [
        "partner_name",
        "partner_type",
        "default_price_list",
        "territory",
        "referral_code",
        "show_in_website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Reseller', 'default_price_list': 'Wholesale Rates'}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "List distributors with missing default price list configuration.",
      "top fields": [
        "partner_name",
        "partner_type",
        "default_price_list",
        "territory",
        "contact_html",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Distributor', 'default_price_list': ['is', 'null']}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Can I see which default price list 'SkyTrade Ltd' is using?",
      "top fields": [
        "partner_name",
        "default_price_list",
        "territory",
        "commission_rate",
        "partner_type",
        "address_contacts"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_name': 'SkyTrade Ltd'}, fields = ['default_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "Which affiliates are assigned 'International Pricing' as their default price list?",
      "top fields": [
        "partner_type",
        "default_price_list",
        "partner_name",
        "territory",
        "referral_code",
        "commission_rate"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'partner_type': 'Affiliate', 'default_price_list': 'International Pricing'}, fields = ['partner_name'])"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "How many sales partners use the 'Qatar Discounted List' by default?",
      "top fields": [
        "default_price_list",
        "partner_name",
        "territory",
        "partner_type",
        "referral_code",
        "commission_rate"
      ]
    },
    "output": "frappe.db.count('Sales Partner', {'default_price_list': 'Qatar Discounted List'})"
  },
  {
    "input": {
      "doctype": "Sales Partner",
      "question": "I want to audit all partners that use a price list starting with 'North America'.",
      "top fields": [
        "default_price_list",
        "partner_name",
        "territory",
        "partner_type",
        "address_contacts",
        "website"
      ]
    },
    "output": "frappe.get_all('Sales Partner', filters={'default_price_list': ['like', 'North America%']}, fields = ['partner_name', 'default_price_list'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have set a default bank account?",
      "top fields": [
        "supplier_name",
        "default_bank_account",
        "supplier_type",
        "country",
        "is_internal_supplier",
        "supplier_group"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['!=', '']}, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers whose default bank account is 'HSBC - 987654'.",
      "top fields": [
        "default_bank_account",
        "supplier_name",
        "supplier_group",
        "country",
        "supplier_type",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': 'HSBC - 987654'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "I want the list of suppliers and their default bank accounts.",
      "top fields": [
        "supplier_name",
        "default_bank_account",
        "supplier_type",
        "supplier_group",
        "country",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show all suppliers that have not configured a default bank account.",
      "top fields": [
        "supplier_name",
        "default_bank_account",
        "country",
        "supplier_group",
        "supplier_type",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['is', 'null']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Does 'Pacific Traders' have a default bank account set?",
      "top fields": [
        "default_bank_account",
        "supplier_name",
        "country",
        "supplier_type",
        "supplier_group",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_value('Supplier', 'Pacific Traders', 'default_bank_account')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find internal suppliers using 'Standard Chartered - 112233' as their bank.",
      "top fields": [
        "default_bank_account",
        "is_internal_supplier",
        "supplier_name",
        "supplier_group",
        "supplier_type",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'default_bank_account': 'Standard Chartered - 112233'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who are the UAE suppliers that use 'Mashreq Bank - 4455' by default?",
      "top fields": [
        "country",
        "default_bank_account",
        "supplier_name",
        "supplier_type",
        "supplier_group",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'United Arab Emirates', 'default_bank_account': 'Mashreq Bank - 4455'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How many suppliers have specified any default bank account?",
      "top fields": [
        "default_bank_account",
        "supplier_name",
        "supplier_type",
        "country",
        "is_internal_supplier",
        "supplier_group"
      ]
    },
    "output": "frappe.db.count('Supplier', {'default_bank_account': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me all suppliers using a bank account that starts with 'Doha Bank'.",
      "top fields": [
        "supplier_name",
        "default_bank_account",
        "country",
        "supplier_group",
        "supplier_type",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'default_bank_account': ['like', 'Doha Bank%']}, fields=['supplier_name', 'default_bank_account'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Check the default bank account of 'Yuhi Supplies' if available.",
      "top fields": [
        "default_bank_account",
        "supplier_name",
        "supplier_group",
        "supplier_type",
        "country",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.get_value('Supplier', 'Yuhi Supplies', 'default_bank_account')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers represent HTS Qatar?",
      "top fields": [
        "represents_company",
        "supplier_name",
        "country",
        "supplier_group",
        "supplier_type",
        "default_currency"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'represents_company': 'HTS Qatar'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List the suppliers and companies they represent.",
      "top fields": [
        "represents_company",
        "supplier_name",
        "country",
        "supplier_group",
        "default_currency",
        "language"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'represents_company'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do we have any suppliers that do not represent a company?",
      "top fields": [
        "represents_company",
        "supplier_name",
        "supplier_type",
        "is_internal_supplier",
        "email_id",
        "country"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'represents_company': ['is', 'null']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How many suppliers are linked to 'Global Traders Inc.'?",
      "top fields": [
        "represents_company",
        "supplier_name",
        "country",
        "supplier_group",
        "default_price_list",
        "tax_id"
      ]
    },
    "output": "frappe.db.count('Supplier', {'represents_company': 'Global Traders Inc.'})"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Check which company 'BrightSource LLC' represents.",
      "top fields": [
        "supplier_name",
        "represents_company",
        "supplier_group",
        "email_id",
        "tax_category",
        "supplier_type"
      ]
    },
    "output": "frappe.get_value('Supplier', 'BrightSource LLC', 'represents_company')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who are the suppliers from India representing a company?",
      "top fields": [
        "country",
        "represents_company",
        "supplier_name",
        "supplier_group",
        "default_currency",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'represents_company': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me suppliers who represent 'Vertex Technologies' and are internal vendors.",
      "top fields": [
        "represents_company",
        "is_internal_supplier",
        "supplier_name",
        "supplier_type",
        "default_currency",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'represents_company': 'Vertex Technologies', 'is_internal_supplier': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which company does 'Delta Logistics' represent and what is their email?",
      "top fields": [
        "supplier_name",
        "represents_company",
        "email_id",
        "country",
        "supplier_group",
        "language"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_name': 'Delta Logistics'}, fields=['represents_company', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers that represent companies starting with 'Qatar'.",
      "top fields": [
        "represents_company",
        "supplier_name",
        "country",
        "email_id",
        "supplier_type",
        "supplier_group"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'represents_company': ['like', 'Qatar%']}, fields=['supplier_name', 'represents_company'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there suppliers that represent different companies across territories?",
      "top fields": [
        "represents_company",
        "supplier_name",
        "country",
        "territory",
        "supplier_group",
        "supplier_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT represents_company, COUNT(DISTINCT country) as territories FROM `tabSupplier` WHERE represents_company IS NOT NULL GROUP BY represents_company HAVING territories > 1''')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which companies is 'Max Traders Ltd' associated with as a supplier?",
      "top fields": [
        "supplier_name",
        "companies",
        "supplier_type",
        "country",
        "is_internal_supplier",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_name': 'Max Traders Ltd'}, fields=['companies'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers and their linked companies.",
      "top fields": [
        "supplier_name",
        "companies",
        "supplier_group",
        "country",
        "supplier_type",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'companies'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there suppliers associated with more than one company?",
      "top fields": [
        "supplier_name",
        "companies",
        "country",
        "supplier_type",
        "is_internal_supplier",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM `tabSupplier` WHERE JSON_LENGTH(companies) > 1''')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How many suppliers are linked with 'Qatar Oil Co' as their company?",
      "top fields": [
        "companies",
        "supplier_name",
        "country",
        "is_internal_supplier",
        "supplier_type",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT COUNT(*) FROM `tabSupplier` WHERE JSON_CONTAINS(companies, ''Qatar Oil Co'')''')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Fetch the companies for supplier 'BrightLogix LLC'.",
      "top fields": [
        "companies",
        "supplier_name",
        "default_currency",
        "country",
        "email_id",
        "supplier_group"
      ]
    },
    "output": "frappe.get_value('Supplier', 'BrightLogix LLC', 'companies')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do we have any suppliers not linked to any company?",
      "top fields": [
        "supplier_name",
        "companies",
        "country",
        "supplier_group",
        "is_internal_supplier",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'companies': ['is', 'null']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give the names of suppliers in India connected to multiple companies.",
      "top fields": [
        "supplier_name",
        "companies",
        "country",
        "supplier_type",
        "email_id",
        "is_internal_supplier"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM `tabSupplier` WHERE country = 'India' AND JSON_LENGTH(companies) > 1''')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers grouped by the company they represent.",
      "top fields": [
        "supplier_name",
        "companies",
        "supplier_type",
        "supplier_group",
        "country",
        "email_id"
      ]
    },
    "output": "frappe.db.sql('''SELECT JSON_UNQUOTE(JSON_EXTRACT(companies, '$[0]')) AS company, COUNT(*) as total_suppliers FROM `tabSupplier` GROUP BY company''')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get a list of internal suppliers and their companies.",
      "top fields": [
        "supplier_name",
        "is_internal_supplier",
        "companies",
        "supplier_type",
        "country",
        "email_id"
      ]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1}, fields=['supplier_name', 'companies'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are linked with 'HTS Qatar' and listed under 'International Vendors' group?",
      "top fields": [
        "supplier_name",
        "supplier_group",
        "companies",
        "country",
        "email_id",
        "supplier_type"
      ]
    },
    "output": "frappe.db.sql('''SELECT supplier_name FROM `tabSupplier` WHERE supplier_group = 'International Vendors' AND JSON_CONTAINS(companies, ''HTS Qatar'')''')"
  },
  
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me all suppliers along with their business background or description.",
      "top fields": ["supplier_name", "supplier_details", "supplier_type", "supplier_group", "country", "website"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'supplier_details'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Whatâ€™s written in the profile section of 'GulfSteel Ltd'?",
      "top fields": ["supplier_details","supplier_name", "supplier_group", "is_internal_supplier", "language", "country"]
    },
    "output": "frappe.get_value('Supplier', 'GulfSteel Ltd', 'supplier_details')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers that have 'construction materials' mentioned in their business description.",
      "top fields": ["supplier_details", "supplier_name", "supplier_type", "country", "website", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_details': ['like', '%construction materials%']}, fields=['supplier_name', 'supplier_details'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any suppliers whose profile mentions both logistics and warehousing?",
      "top fields": ["supplier_details", "supplier_name", "supplier_type", "supplier_group", "country", "language"]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabSupplier` WHERE supplier_details LIKE '%logistics%' AND supplier_details LIKE '%warehousing%'''')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Retrieve details of internal suppliers describing supply chain services.",
      "top fields": ["supplier_details", "supplier_name", "is_internal_supplier", "supplier_type", "supplier_group", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'supplier_details': ['like', '%supply chain%']}, fields=['supplier_name', 'supplier_details'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have not provided any business description yet?",
      "top fields": ["supplier_details", "supplier_name", "supplier_type", "country", "email_id", "website"]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_details': ['is', 'null']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get supplier names and details for those in the 'Raw Materials' group.",
      "top fields": ["supplier_group", "supplier_details", "supplier_name", "country", "language", "default_currency"]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_group': 'Raw Materials'}, fields=['supplier_name', 'supplier_details'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers with 'Retailer' type have lengthy descriptions in their profile?",
      "top fields": ["supplier_type", "supplier_details", "supplier_name", "language", "supplier_group", "country"]
    },
    "output": "frappe.db.sql('''SELECT name, supplier_details FROM `tabSupplier` WHERE supplier_type = 'Retailer' AND LENGTH(supplier_details) > 200''')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Tell me about the description and background of â€˜Oceanic Trade Coâ€™.",
      "top fields": ["supplier_details","supplier_name","country", "language", "supplier_group", "supplier_type"]
    },
    "output": "frappe.get_value('Supplier', 'Oceanic Trade Co', 'supplier_details')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "I want to find suppliers whose details mention 'eco-friendly' or 'green'.",
      "top fields": ["supplier_details", "supplier_name", "supplier_type", "website", "country", "language"]
    },
    "output": "frappe.db.sql('''SELECT name FROM `tabSupplier` WHERE supplier_details LIKE '%eco-friendly%' OR supplier_details LIKE '%green%'''')"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have a website listed in their records?",
      "top fields": ["supplier_name", "website", "email_id", "country", "supplier_group", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'website': ['!=', '']}, fields = ['supplier_name', 'website'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List the supplier names and their website links.",
      "top fields": ["supplier_name", "website", "email_id", "country", "supplier_type", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', fields = ['supplier_name', 'website'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who is the supplier using 'https://supplynow.com' as their website?",
      "top fields": ["supplier_name", "website", "country", "email_id", "tax_id", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'website': 'https://supplynow.com'}, fields = ['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find all suppliers whose website domain includes the word 'global'.",
      "top fields": ["supplier_name", "website", "language", "supplier_group", "email_id", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'website': ['like', '%global%']}, fields = ['supplier_name', 'website'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me supplier groups and their website URLs.",
      "top fields": ["supplier_group", "website", "supplier_name", "country", "email_id", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', fields = ['supplier_group', 'website'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any internal suppliers who maintain an official website?",
      "top fields": ["is_internal_supplier", "website", "supplier_name", "supplier_group", "email_id", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'website': ['!=', '']}, fields = ['supplier_name', 'website'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers do not have any website information provided?",
      "top fields": ["website", "supplier_name", "email_id", "supplier_group", "country", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'website': ['is', 'null']}, fields = ['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Can I get a list of transporters along with their websites?",
      "top fields": ["is_transporter", "website", "supplier_name", "supplier_group", "country", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields = ['supplier_name', 'website'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers from India have websites ending in '.in'?",
      "top fields": ["country", "website", "supplier_name", "email_id", "supplier_group", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'website': ['like', '%.in']}, fields = ['supplier_name', 'website'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers along with their email and website info.",
      "top fields": ["email_id", "website", "supplier_name", "supplier_group", "mobile_no", "country"]
    },
    "output": "frappe.get_all('Supplier', fields = ['supplier_name', 'email_id', 'website'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have specified their preferred communication language?",
      "top fields": ["supplier_name", "language", "country", "email_id", "supplier_group", "default_currency"]
    },
    "output": "frappe.get_all('Supplier', filters={'language': ['!=', '']}, fields=['supplier_name', 'language'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers along with their language preferences.",
      "top fields": ["supplier_name", "language", "country", "email_id", "supplier_type", "default_price_list"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'language'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who are the suppliers using Arabic as their preferred language?",
      "top fields": ["supplier_name", "language", "country", "supplier_group", "email_id", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'language': 'Arabic'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers from Qatar who prefer to communicate in English.",
      "top fields": ["supplier_name", "language", "country", "email_id", "supplier_group", "default_currency"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'Qatar', 'language': 'English'}, fields=['supplier_name', 'language'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do any internal suppliers use Spanish as their language setting?",
      "top fields": ["supplier_name", "language", "is_internal_supplier", "email_id", "supplier_group", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'language': 'Spanish'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List the languages used by suppliers marked as transporters.",
      "top fields": ["supplier_name", "language", "is_transporter", "supplier_group", "email_id", "default_currency"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields=['supplier_name', 'language'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Can I see which language 'Elite Logistics' prefers for communication?",
      "top fields": ["supplier_name", "language", "email_id", "supplier_type", "country", "default_currency"]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_name': 'Elite Logistics'}, fields=['language'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have not set any language preference?",
      "top fields": ["supplier_name", "language", "email_id", "country", "supplier_group", "default_price_list"]
    },
    "output": "frappe.get_all('Supplier', filters={'language': ['is', 'null']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How many suppliers are using French as their communication language?",
      "top fields": ["language"]
    },
    "output": "frappe.db.count('Supplier', {'language': 'French'})"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me a list of suppliers using any language setting starting with 'En'.",
      "top fields": ["supplier_name", "language", "country", "email_id", "supplier_group", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'language': ['like', 'En%']}, fields=['supplier_name', 'language'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have a valid Tax ID on file?",
      "top fields": ["tax_id", "supplier_name", "country", "supplier_group", "email_id", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'tax_id': ['!=', '']}, fields=['supplier_name', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers and their registered tax IDs.",
      "top fields": ["supplier_name", "tax_id", "supplier_group", "email_id", "country", "language"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who uses 'QA-77890' as their Tax ID?",
      "top fields": ["supplier_name", "tax_id", "country", "supplier_type", "email_id", "represents_company"]
    },
    "output": "frappe.get_all('Supplier', filters={'tax_id': 'QA-77890'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers in the UAE with a Tax ID starting with 'AE'.",
      "top fields": ["country", "tax_id", "supplier_name", "email_id", "language", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'UAE', 'tax_id': ['like', 'AE%']}, fields=['supplier_name', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which internal suppliers have no tax ID provided?",
      "top fields": ["is_internal_supplier", "tax_id", "supplier_name", "supplier_group", "email_id", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'tax_id': ['is', 'null']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me the tax ID of 'PrimeSteel Ltd'.",
      "top fields": ["supplier_name", "tax_id", "country", "email_id", "supplier_type", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_name': 'PrimeSteel Ltd'}, fields=['tax_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List transporters along with their tax identification numbers.",
      "top fields": ["is_transporter", "tax_id", "supplier_name", "supplier_group", "country", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields=['supplier_name', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "How many suppliers have a Tax ID containing 'VAT'?",
      "top fields": ["tax_id", "supplier_name", "country", "supplier_type", "language", "email_id"]
    },
    "output": "frappe.db.count('Supplier', {'tax_id': ['like', '%VAT%']})"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me the suppliers and tax IDs for those using 'Retail Group'.",
      "top fields": ["supplier_group", "supplier_name", "tax_id", "email_id", "country", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_group': 'Retail Group'}, fields=['supplier_name', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have tax IDs that end with '99'?",
      "top fields": ["supplier_name", "tax_id", "email_id", "supplier_group", "language", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'tax_id': ['like', '%99']}, fields=['supplier_name', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers along with their tax categories.",
      "top fields": ["supplier_name", "tax_category", "country", "supplier_group", "tax_id", "language"]
    },
    "output": "frappe.get_all('Supplier', fields = ['supplier_name', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers fall under the 'Goods and Services' tax category?",
      "top fields": ["supplier_name", "tax_category", "supplier_type", "country", "tax_id", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'tax_category': 'Goods and Services'}, fields = ['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any suppliers without a defined tax category?",
      "top fields": ["supplier_name", "tax_category", "tax_id", "country", "email_id", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'tax_category': ['is', 'null']}, fields = ['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me suppliers categorized under 'Zero Tax'.",
      "top fields": ["supplier_name", "tax_category", "tax_id", "supplier_group", "country", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'tax_category': 'Zero Tax'}, fields = ['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which supplier named 'Al Jazeera Supplies' has what tax category?",
      "top fields": ["supplier_name", "tax_category", "tax_id", "country", "supplier_type", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_name': 'Al Jazeera Supplies'}, fields = ['tax_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Fetch all tax categories of internal suppliers.",
      "top fields": ["supplier_name", "is_internal_supplier", "tax_category", "tax_id", "country", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1}, fields = ['supplier_name', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find all Indian suppliers in the 'Export Category' for tax.",
      "top fields": ["supplier_name", "country", "tax_category", "supplier_group", "tax_id", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'tax_category': 'Export Category'}, fields = ['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List names and tax categories for transporters.",
      "top fields": ["supplier_name", "is_transporter", "tax_category", "country", "tax_id", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields = ['supplier_name', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are any disabled suppliers assigned a tax category?",
      "top fields": ["supplier_name", "disabled", "tax_category", "tax_id", "supplier_group", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1, 'tax_category': ['!=', '']}, fields = ['supplier_name', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me the tax categories of suppliers having VAT in their tax ID.",
      "top fields": ["supplier_name", "tax_id", "tax_category", "country", "supplier_type", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'tax_id': ['like', '%VAT%']}, fields = ['supplier_name', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers with their tax withholding categories.",
      "top fields": ["supplier_name", "tax_withholding_category", "supplier_group", "tax_id", "country", "language"]
    },
    "output": "frappe.get_all('Supplier', fields = ['supplier_name', 'tax_withholding_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are associated with the 'Professional Services' tax withholding category?",
      "top fields": ["supplier_name", "tax_withholding_category", "supplier_group", "supplier_type", "country", "tax_category"]
    },
    "output": "frappe.get_all('Supplier', filters={'tax_withholding_category': 'Professional Services'}, fields = ['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do any internal suppliers fall under a tax withholding category?",
      "top fields": ["is_internal_supplier", "tax_withholding_category", "supplier_name", "supplier_group", "tax_id", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1}, fields = ['supplier_name', 'tax_withholding_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "What is the withholding category for the supplier named 'Oceanic Traders'?",
      "top fields": ["supplier_name", "tax_withholding_category", "country", "tax_id", "supplier_group", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_name': 'Oceanic Traders'}, fields = ['tax_withholding_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me names and withholding categories for all transporters.",
      "top fields": ["is_transporter", "supplier_name", "tax_withholding_category", "supplier_group", "supplier_type", "tax_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1}, fields = ['supplier_name', 'tax_withholding_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers do not have any tax withholding category assigned?",
      "top fields": ["supplier_name", "tax_withholding_category", "country", "tax_id", "language", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'tax_withholding_category': ['is', 'null']}, fields = ['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Can you get me suppliers from Qatar with tax withholding category labeled 'Consulting'?",
      "top fields": ["country", "tax_withholding_category", "supplier_name", "supplier_type", "tax_id", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'Qatar', 'tax_withholding_category': 'Consulting'}, fields = ['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any disabled suppliers linked to a withholding category?",
      "top fields": ["disabled", "supplier_name", "tax_withholding_category", "supplier_type", "tax_category", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1, 'tax_withholding_category': ['!=', '']}, fields = ['supplier_name', 'tax_withholding_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "I need a breakdown of withholding tax categories used by all suppliers.",
      "top fields": ["tax_withholding_category", "supplier_name", "supplier_group", "tax_category", "tax_id", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', fields = ['supplier_name', 'tax_withholding_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Fetch suppliers with tax ID containing 'VAT' and show their tax withholding categories.",
      "top fields": ["tax_id", "supplier_name", "tax_withholding_category", "tax_category", "supplier_group", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'tax_id': ['like', '%VAT%']}, fields = ['supplier_name', 'tax_withholding_category'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have saved address contact records?",
      "top fields": ["supplier_name", "address_contacts", "primary_address", "country", "email_id", "mobile_no"]
    },
    "output": "frappe.get_all('Supplier', filters={'address_contacts': ['!=', '']}, fields=['supplier_name', 'address_contacts'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get names and contact blocks of suppliers.",
      "top fields": ["supplier_name", "address_contacts", "supplier_primary_contact", "mobile_no", "email_id", "country"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'address_contacts'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show supplier names with missing address contacts.",
      "top fields": ["supplier_name", "address_contacts", "email_id", "supplier_primary_address", "primary_address", "mobile_no"]
    },
    "output": "frappe.get_all('Supplier', filters={'address_contacts': ['is', 'null']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which internal suppliers have filled in address contacts?",
      "top fields": ["supplier_name", "is_internal_supplier", "address_contacts", "supplier_group", "country", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'address_contacts': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give address contact details of suppliers from Qatar.",
      "top fields": ["supplier_name", "country", "address_contacts", "language", "email_id", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'Qatar'}, fields=['supplier_name', 'address_contacts'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do any transporters have address contact information listed?",
      "top fields": ["supplier_name", "is_transporter", "address_contacts", "email_id", "supplier_type", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1, 'address_contacts': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get email and address contact fields for suppliers.",
      "top fields": ["supplier_name", "email_id", "address_contacts", "mobile_no", "country", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'email_id', 'address_contacts'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List the address contact info and mobile numbers of all suppliers.",
      "top fields": ["supplier_name", "mobile_no", "address_contacts", "supplier_primary_contact", "email_id", "country"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'mobile_no', 'address_contacts'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Can you find suppliers with address contacts containing more than one line?",
      "top fields": ["supplier_name", "address_contacts", "address_html", "primary_address", "supplier_primary_address", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'address_contacts': ['like', '%\\n%']}, fields=['supplier_name', 'address_contacts'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Fetch address contact and hold status for all suppliers.",
      "top fields": ["supplier_name", "address_contacts", "on_hold", "hold_type", "email_id", "country"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'address_contacts', 'on_hold'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have a primary address saved?",
      "top fields": ["supplier_name", "supplier_primary_address", "country", "primary_address", "email_id", "mobile_no"]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_primary_address': ['!=', '']}, fields=['supplier_name', 'supplier_primary_address'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List the suppliers and their registered primary addresses.",
      "top fields": ["supplier_name", "supplier_primary_address", "address_contacts", "email_id", "country", "language"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'supplier_primary_address'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show all suppliers that do not have a primary address assigned.",
      "top fields": ["supplier_name", "supplier_primary_address", "country", "email_id", "supplier_group", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_primary_address': ['is', 'null']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do any Indian suppliers have a registered primary address?",
      "top fields": ["supplier_name", "country", "supplier_primary_address", "language", "email_id", "address_contacts"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'supplier_primary_address': ['!=', '']}, fields=['supplier_name', 'supplier_primary_address'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which internal suppliers have a specified primary address?",
      "top fields": ["supplier_name", "is_internal_supplier", "supplier_primary_address", "email_id", "supplier_group", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'supplier_primary_address': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get suppliers with both primary address and contact person set.",
      "top fields": ["supplier_name", "supplier_primary_address", "supplier_primary_contact", "email_id", "mobile_no", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_primary_address': ['!=', ''], 'supplier_primary_contact': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find primary address and email for each supplier.",
      "top fields": ["supplier_name", "supplier_primary_address", "email_id", "mobile_no", "country", "language"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'supplier_primary_address', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have the same primary and billing address?",
      "top fields": ["supplier_name", "supplier_primary_address", "primary_address", "country", "email_id", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_primary_address': ['=', 'primary_address']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there suppliers with a defined primary address and website?",
      "top fields": ["supplier_name", "supplier_primary_address", "website", "country", "email_id", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_primary_address': ['!=', ''], 'website': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers along with their names, emails, and primary addresses.",
      "top fields": ["supplier_name", "supplier_primary_address", "email_id", "country", "mobile_no", "language"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'email_id', 'supplier_primary_address'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have a billing address listed as their primary address?",
      "top fields": ["supplier_name", "primary_address", "supplier_primary_address", "country", "email_id", "mobile_no"]
    },
    "output": "frappe.get_all('Supplier', filters={'primary_address': ['!=', '']}, fields=['supplier_name', 'primary_address'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me the primary billing addresses for all suppliers.",
      "top fields": ["supplier_name", "primary_address", "supplier_group", "email_id", "language", "country"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'primary_address'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers that donâ€™t have any billing address saved.",
      "top fields": ["supplier_name", "primary_address", "supplier_type", "email_id", "country", "mobile_no"]
    },
    "output": "frappe.get_all('Supplier', filters={'primary_address': ['is', 'null']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do suppliers from the UAE have a defined billing address?",
      "top fields": ["supplier_name", "country", "primary_address", "email_id", "supplier_group", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'UAE', 'primary_address': ['!=', '']}, fields=['supplier_name', 'primary_address'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which transporters have a recorded primary address?",
      "top fields": ["supplier_name", "is_transporter", "primary_address", "email_id", "supplier_type", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1, 'primary_address': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me suppliers with matching primary and main addresses.",
      "top fields": ["supplier_name", "primary_address", "supplier_primary_address", "country", "email_id", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'primary_address': ['=', 'supplier_primary_address']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers and their contact details including billing address.",
      "top fields": ["supplier_name", "primary_address", "email_id", "mobile_no", "supplier_type", "language"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'email_id', 'primary_address'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which internal suppliers have a primary address mentioned?",
      "top fields": ["supplier_name", "is_internal_supplier", "primary_address", "country", "email_id", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'primary_address': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find out suppliers with websites and billing addresses both filled.",
      "top fields": ["supplier_name", "primary_address", "website", "email_id", "supplier_group", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'primary_address': ['!=', ''], 'website': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers list email and billing address together?",
      "top fields": ["supplier_name", "primary_address", "email_id", "supplier_type", "language", "mobile_no"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'email_id', 'primary_address'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who is listed as the primary contact for each supplier?",
      "top fields": ["supplier_name", "supplier_primary_contact", "email_id", "mobile_no", "country", "website"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'supplier_primary_contact'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers along with their main contact persons.",
      "top fields": ["supplier_name", "supplier_primary_contact", "supplier_group", "language", "email_id", "country"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'supplier_primary_contact'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find all suppliers without a primary contact assigned.",
      "top fields": ["supplier_name", "supplier_primary_contact", "email_id", "country", "supplier_group", "mobile_no"]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_primary_contact': ['is', 'null']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do any internal suppliers have a primary contact defined?",
      "top fields": ["is_internal_supplier", "supplier_primary_contact", "supplier_name", "email_id", "mobile_no", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'supplier_primary_contact': ['!=', '']}, fields=['supplier_name', 'supplier_primary_contact'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers from India have listed their primary contact person?",
      "top fields": ["country", "supplier_primary_contact", "supplier_name", "email_id", "supplier_group", "mobile_no"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'supplier_primary_contact': ['!=', '']}, fields=['supplier_name', 'supplier_primary_contact'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me suppliers that have both primary contact and address information.",
      "top fields": ["supplier_name", "supplier_primary_contact", "supplier_primary_address", "email_id", "mobile_no", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_primary_contact': ['!=', ''], 'supplier_primary_address': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all primary contacts and their email for every supplier.",
      "top fields": ["supplier_primary_contact", "email_id", "supplier_name", "mobile_no", "supplier_group", "country"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'supplier_primary_contact', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me suppliers whose primary contact name includes the word 'Manager'.",
      "top fields": ["supplier_name", "supplier_primary_contact", "email_id", "language", "country", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_primary_contact': ['like', '%Manager%']}, fields=['supplier_name', 'supplier_primary_contact'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any suppliers without email but with a contact person listed?",
      "top fields": ["supplier_name", "email_id", "supplier_primary_contact", "country", "mobile_no", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'email_id': ['is', 'null'], 'supplier_primary_contact': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me a list of supplier names with mobile and contact details.",
      "top fields": ["supplier_name", "mobile_no", "supplier_primary_contact", "email_id", "country", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'mobile_no', 'supplier_primary_contact'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers along with their mobile numbers.",
      "top fields": ["supplier_name", "mobile_no", "email_id", "country", "supplier_primary_contact", "language"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'mobile_no'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have not provided a mobile number?",
      "top fields": ["supplier_name", "mobile_no", "email_id", "country", "supplier_group", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'mobile_no': ['is', 'null']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me suppliers with a mobile number starting with '+974'.",
      "top fields": ["supplier_name", "mobile_no", "country", "email_id", "language", "supplier_primary_contact"]
    },
    "output": "frappe.get_all('Supplier', filters={'mobile_no': ['like', '+974%']}, fields=['supplier_name', 'mobile_no'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get names and mobile contacts of all internal suppliers.",
      "top fields": ["supplier_name", "mobile_no", "is_internal_supplier", "supplier_group", "email_id", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1}, fields=['supplier_name', 'mobile_no'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers whose mobile numbers are longer than 10 digits.",
      "top fields": ["supplier_name", "mobile_no", "email_id", "country", "supplier_group", "supplier_primary_contact"]
    },
    "output": "frappe.get_all('Supplier', filters={'mobile_no': ['regexp', '^.{11,}$']}, fields=['supplier_name', 'mobile_no'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers with mobile numbers and email addresses.",
      "top fields": ["supplier_name", "mobile_no", "email_id", "country", "supplier_group", "language"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'mobile_no', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers listed from India have valid mobile numbers?",
      "top fields": ["supplier_name", "mobile_no", "country", "email_id", "language", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'mobile_no': ['!=', '']}, fields=['supplier_name', 'mobile_no'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers where the mobile number and email are both missing.",
      "top fields": ["supplier_name", "mobile_no", "email_id", "supplier_group", "supplier_type", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'mobile_no': ['is', 'null'], 'email_id': ['is', 'null']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do any suppliers use a mobile number containing the digits '999'?",
      "top fields": ["supplier_name", "mobile_no", "email_id", "supplier_group", "country", "supplier_primary_contact"]
    },
    "output": "frappe.get_all('Supplier', filters={'mobile_no': ['like', '%999%']}, fields=['supplier_name', 'mobile_no'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers with both contact person and mobile number available.",
      "top fields": ["supplier_name", "supplier_primary_contact", "mobile_no", "email_id", "country", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'supplier_primary_contact': ['!=', ''], 'mobile_no': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me all suppliers with their email addresses.",
      "top fields": ["supplier_name", "email_id", "mobile_no", "country", "supplier_group", "language"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have not provided an email address?",
      "top fields": ["supplier_name", "email_id", "country", "mobile_no", "supplier_group", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'email_id': ['is', 'null']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers whose email contains 'procure'.",
      "top fields": ["supplier_name", "email_id", "country", "language", "supplier_type", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'email_id': ['like', '%procure%']}, fields=['supplier_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get internal suppliers and their email contacts.",
      "top fields": ["supplier_name", "is_internal_supplier", "email_id", "mobile_no", "supplier_group", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1}, fields=['supplier_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers whose email ends with '@gmail.com'.",
      "top fields": ["supplier_name", "email_id", "mobile_no", "country", "supplier_type", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'email_id': ['like', '%@gmail.com']}, fields=['supplier_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers from Qatar have their email ID registered?",
      "top fields": ["supplier_name", "email_id", "country", "mobile_no", "supplier_type", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'Qatar', 'email_id': ['!=', '']}, fields=['supplier_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers with both email and website available.",
      "top fields": ["supplier_name", "email_id", "website", "country", "mobile_no", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'email_id': ['!=', ''], 'website': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do any suppliers use a common domain in their email addresses?",
      "top fields": ["supplier_name", "email_id", "website", "language", "supplier_group", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'email_id': ['like', '%@%']}, fields=['supplier_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers where both mobile number and email are missing.",
      "top fields": ["supplier_name", "mobile_no", "email_id", "supplier_group", "supplier_type", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'mobile_no': ['is', 'null'], 'email_id': ['is', 'null']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have the same email as their contact person?",
      "top fields": ["supplier_name", "email_id", "supplier_primary_contact", "mobile_no", "country", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'email_id': ['=', 'supplier_primary_contact']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers with their assigned payment terms.",
      "top fields": ["supplier_name", "payment_terms", "supplier_group", "supplier_type", "email_id", "country"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'payment_terms'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers do not have any payment terms specified?",
      "top fields": ["supplier_name", "payment_terms", "country", "supplier_type", "email_id", "is_internal_supplier"]
    },
    "output": "frappe.get_all('Supplier', filters={'payment_terms': ['is', 'null']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any suppliers who follow Net 30 payment terms?",
      "top fields": ["supplier_name", "payment_terms", "email_id", "supplier_group", "country", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'payment_terms': 'Net 30'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me the list of internal suppliers and their payment terms.",
      "top fields": ["supplier_name", "is_internal_supplier", "payment_terms", "supplier_group", "email_id", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1}, fields=['supplier_name', 'payment_terms'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers from the US use immediate payment terms?",
      "top fields": ["supplier_name", "country", "payment_terms", "supplier_group", "email_id", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'United States', 'payment_terms': 'Immediate'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Can I get the payment terms and contact email for each supplier?",
      "top fields": ["supplier_name", "payment_terms", "email_id", "mobile_no", "supplier_group", "language"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'payment_terms', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have both payment terms and a price list defined?",
      "top fields": ["supplier_name", "payment_terms", "default_price_list", "supplier_group", "email_id", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'payment_terms': ['!=', ''], 'default_price_list': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me suppliers where payment terms are missing but price list is available.",
      "top fields": ["supplier_name", "payment_terms", "default_price_list", "email_id", "supplier_group", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'payment_terms': ['is', 'null'], 'default_price_list': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get suppliers with Net 15 terms and based in Qatar.",
      "top fields": ["supplier_name", "payment_terms", "country", "email_id", "supplier_group", "is_internal_supplier"]
    },
    "output": "frappe.get_all('Supplier', filters={'payment_terms': 'Net 15', 'country': 'Qatar'}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List the names, payment terms, and groups of all suppliers.",
      "top fields": ["supplier_name", "payment_terms", "supplier_group", "supplier_type", "email_id", "country"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'payment_terms', 'supplier_group'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers and their linked account settings.",
      "top fields": ["supplier_name", "accounts", "email_id", "supplier_group", "payment_terms", "country"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'accounts'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers do not have any account details configured?",
      "top fields": ["supplier_name", "accounts", "is_internal_supplier", "email_id", "supplier_group", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'accounts': ['is', 'null']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me internal suppliers with defined accounts.",
      "top fields": ["supplier_name", "is_internal_supplier", "accounts", "email_id", "country", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'accounts': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the account records of suppliers from India.",
      "top fields": ["supplier_name", "country", "accounts", "supplier_group", "email_id", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India'}, fields=['supplier_name', 'accounts'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any suppliers whose accounts section is empty?",
      "top fields": ["supplier_name", "accounts", "email_id", "supplier_group", "country", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'accounts': ['=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers from the US have account records?",
      "top fields": ["supplier_name", "country", "accounts", "supplier_group", "email_id", "payment_terms"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'United States', 'accounts': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Provide a list of supplier names with their accounts and emails.",
      "top fields": ["supplier_name", "accounts", "email_id", "country", "supplier_group", "language"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'accounts', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers with both accounts and payment terms specified.",
      "top fields": ["supplier_name", "accounts", "payment_terms", "email_id", "supplier_group", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'accounts': ['!=', ''], 'payment_terms': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers whose accounts section includes more than one record.",
      "top fields": ["supplier_name", "accounts", "email_id", "country", "supplier_group", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'accounts': ['!=', '']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Can I get supplier groups with their accounts info?",
      "top fields": ["supplier_group", "accounts", "supplier_name", "email_id", "country", "default_currency"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_group', 'accounts'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers allow creating purchase invoices without a purchase order?",
      "top fields": ["supplier_name", "allow_purchase_invoice_creation_without_purchase_order", "supplier_group", "email_id", "country", "is_internal_supplier"]
    },
    "output": "frappe.get_all('Supplier', filters={'allow_purchase_invoice_creation_without_purchase_order': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers who require a purchase order for creating invoices.",
      "top fields": ["supplier_name", "allow_purchase_invoice_creation_without_purchase_order", "supplier_group", "supplier_type", "country", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'allow_purchase_invoice_creation_without_purchase_order': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the setting status for creating invoices without purchase orders for each supplier.",
      "top fields": ["supplier_name", "allow_purchase_invoice_creation_without_purchase_order", "email_id", "supplier_group", "country", "language"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'allow_purchase_invoice_creation_without_purchase_order'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me suppliers from India who allow invoices without POs.",
      "top fields": ["supplier_name", "country", "allow_purchase_invoice_creation_without_purchase_order", "supplier_type", "email_id", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'allow_purchase_invoice_creation_without_purchase_order': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there internal suppliers who allow bypassing purchase orders?",
      "top fields": ["supplier_name", "is_internal_supplier", "allow_purchase_invoice_creation_without_purchase_order", "country", "email_id", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'allow_purchase_invoice_creation_without_purchase_order': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers with email addresses allow skipping POs for invoices?",
      "top fields": ["supplier_name", "email_id", "allow_purchase_invoice_creation_without_purchase_order", "supplier_group", "country", "payment_terms"]
    },
    "output": "frappe.get_all('Supplier', filters={'allow_purchase_invoice_creation_without_purchase_order': 1}, fields=['supplier_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Fetch supplier names and invoice policy flags regarding POs.",
      "top fields": ["supplier_name", "allow_purchase_invoice_creation_without_purchase_order", "supplier_type", "country", "email_id", "payment_terms"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'allow_purchase_invoice_creation_without_purchase_order'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers grouped by supplier type who allow invoice creation without POs.",
      "top fields": ["supplier_type", "allow_purchase_invoice_creation_without_purchase_order", "supplier_name", "supplier_group", "country", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'allow_purchase_invoice_creation_without_purchase_order': 1}, fields=['supplier_name', 'supplier_type'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers do not allow creating invoices before purchase orders?",
      "top fields": ["supplier_name", "allow_purchase_invoice_creation_without_purchase_order", "supplier_type", "email_id", "supplier_group", "is_internal_supplier"]
    },
    "output": "frappe.get_all('Supplier', filters={'allow_purchase_invoice_creation_without_purchase_order': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Can you show suppliers and their PO invoice policy side by side?",
      "top fields": ["supplier_name", "allow_purchase_invoice_creation_without_purchase_order", "supplier_group", "email_id", "payment_terms", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'allow_purchase_invoice_creation_without_purchase_order'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers allow creating invoices without a purchase receipt?",
      "top fields": ["supplier_name", "allow_purchase_invoice_creation_without_purchase_receipt", "supplier_type", "country", "email_id", "is_internal_supplier"]
    },
    "output": "frappe.get_all('Supplier', filters={'allow_purchase_invoice_creation_without_purchase_receipt': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers who require a receipt before invoicing.",
      "top fields": ["supplier_name", "allow_purchase_invoice_creation_without_purchase_receipt", "supplier_group", "country", "supplier_type", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'allow_purchase_invoice_creation_without_purchase_receipt': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get supplier names and their invoice creation policy with respect to receipts.",
      "top fields": ["supplier_name", "allow_purchase_invoice_creation_without_purchase_receipt", "email_id", "supplier_group", "country", "language"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'allow_purchase_invoice_creation_without_purchase_receipt'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show internal suppliers who can skip purchase receipts while invoicing.",
      "top fields": ["supplier_name", "is_internal_supplier", "allow_purchase_invoice_creation_without_purchase_receipt", "country", "email_id", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'allow_purchase_invoice_creation_without_purchase_receipt': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which Indian suppliers allow invoice creation without purchase receipts?",
      "top fields": ["supplier_name", "country", "allow_purchase_invoice_creation_without_purchase_receipt", "email_id", "supplier_group", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'allow_purchase_invoice_creation_without_purchase_receipt': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers and whether they allow skipping receipts for invoices.",
      "top fields": ["supplier_name", "allow_purchase_invoice_creation_without_purchase_receipt", "supplier_type", "email_id", "country", "language"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'allow_purchase_invoice_creation_without_purchase_receipt'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Can you show suppliers with their country and invoice receipt policy?",
      "top fields": ["supplier_name", "allow_purchase_invoice_creation_without_purchase_receipt", "country", "email_id", "supplier_type", "is_internal_supplier"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'country', 'allow_purchase_invoice_creation_without_purchase_receipt'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Suppliers who donâ€™t allow invoices without receipts?",
      "top fields": ["supplier_name", "allow_purchase_invoice_creation_without_purchase_receipt", "email_id", "country", "supplier_group", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'allow_purchase_invoice_creation_without_purchase_receipt': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers and their invoice policy on receipts?",
      "top fields": ["supplier_name", "allow_purchase_invoice_creation_without_purchase_receipt", "email_id", "country", "supplier_type", "is_transporter"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'allow_purchase_invoice_creation_without_purchase_receipt'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers with their invoice without receipt setting and emails.",
      "top fields": ["supplier_name", "allow_purchase_invoice_creation_without_purchase_receipt", "email_id", "country", "language", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'email_id', 'allow_purchase_invoice_creation_without_purchase_receipt'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are currently frozen and inactive?",
      "top fields": ["supplier_name", "is_frozen", "disabled", "country", "supplier_group", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_frozen': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List frozen suppliers along with their email and group.",
      "top fields": ["supplier_name", "is_frozen", "email_id", "supplier_group", "country", "mobile_no"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_frozen': 1}, fields=['supplier_name', 'email_id', 'supplier_group'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers that are not frozen.",
      "top fields": ["supplier_name", "is_frozen", "email_id", "supplier_group", "disabled", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_frozen': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get a list of suppliers and whether they are frozen or not.",
      "top fields": ["supplier_name", "is_frozen", "email_id", "country", "supplier_group", "language"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'is_frozen'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which internal suppliers are marked as frozen?",
      "top fields": ["supplier_name", "is_frozen", "is_internal_supplier", "supplier_group", "email_id", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'is_frozen': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Suppliers from India who are frozen?",
      "top fields": ["supplier_name", "is_frozen", "country", "email_id", "supplier_group", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'is_frozen': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers and their frozen status along with email ID.",
      "top fields": ["supplier_name", "is_frozen", "email_id", "country", "mobile_no", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'is_frozen', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who are the frozen suppliers that also have pending RFQs?",
      "top fields": ["supplier_name", "is_frozen", "warn_rfqs", "email_id", "supplier_group", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_frozen': 1, 'warn_rfqs': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get frozen suppliers and check their payment terms.",
      "top fields": ["supplier_name", "is_frozen", "payment_terms", "country", "supplier_group", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_frozen': 1}, fields=['supplier_name', 'payment_terms'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Provide a list of all suppliers with frozen status and country.",
      "top fields": ["supplier_name", "is_frozen", "country", "email_id", "language", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'is_frozen', 'country'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have been disabled in the system?",
      "top fields": ["supplier_name", "disabled", "email_id", "supplier_group", "country", "mobile_no"]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1}, fields=['supplier_name', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all disabled suppliers along with their emails.",
      "top fields": ["supplier_name", "disabled", "email_id", "language", "supplier_group", "tax_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1}, fields=['supplier_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get supplier names and whether they are disabled or active.",
      "top fields": ["supplier_name", "disabled", "supplier_group", "is_frozen", "is_internal_supplier", "email_id"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which Indian suppliers have been disabled?",
      "top fields": ["supplier_name", "disabled", "country", "email_id", "language", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'disabled': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find disabled suppliers and their group classification.",
      "top fields": ["supplier_name", "disabled", "supplier_group", "supplier_type", "country", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1}, fields=['supplier_name', 'supplier_group'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show all suppliers that are not disabled.",
      "top fields": ["supplier_name", "disabled", "email_id", "country", "supplier_type", "mobile_no"]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List names and disabled status of suppliers from USA.",
      "top fields": ["supplier_name", "disabled", "country", "email_id", "supplier_group", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'USA'}, fields=['supplier_name', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which disabled suppliers are also frozen?",
      "top fields": ["supplier_name", "disabled", "is_frozen", "email_id", "supplier_group", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1, 'is_frozen': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give the names, emails, and disabled status of suppliers.",
      "top fields": ["supplier_name", "disabled", "email_id", "mobile_no", "supplier_group", "language"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'email_id', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Retrieve all suppliers with their disabled status and tax ID.",
      "top fields": ["supplier_name", "disabled", "tax_id", "email_id", "supplier_group", "country"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'disabled', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are marked with a warning for RFQs?",
      "top fields": ["supplier_name", "warn_rfqs", "supplier_group", "disabled", "country", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_rfqs': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the list of suppliers and whether they trigger RFQ warnings.",
      "top fields": ["supplier_name", "warn_rfqs", "email_id", "supplier_type", "country", "mobile_no"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'warn_rfqs'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List Indian suppliers with RFQ warnings enabled.",
      "top fields": ["supplier_name", "warn_rfqs", "country", "language", "supplier_group", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'warn_rfqs': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who are the suppliers that are not flagged for RFQs?",
      "top fields": ["supplier_name", "warn_rfqs", "disabled", "country", "supplier_type", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_rfqs': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which disabled suppliers also have RFQ warnings turned on?",
      "top fields": ["supplier_name", "warn_rfqs", "disabled", "is_frozen", "supplier_group", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1, 'warn_rfqs': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers with RFQ warning flags and their emails.",
      "top fields": ["supplier_name", "warn_rfqs", "email_id", "mobile_no", "country", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_rfqs': 1}, fields=['supplier_name', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find the supplier group of all those with RFQ warnings active.",
      "top fields": ["supplier_name", "warn_rfqs", "supplier_group", "country", "email_id", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_rfqs': 1}, fields=['supplier_name', 'supplier_group'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there suppliers flagged for RFQs but not frozen?",
      "top fields": ["supplier_name", "warn_rfqs", "is_frozen", "disabled", "country", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_rfqs': 1, 'is_frozen': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Retrieve suppliers with RFQ warnings and their primary contacts.",
      "top fields": ["supplier_name", "warn_rfqs", "supplier_primary_contact", "email_id", "mobile_no", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_rfqs': 1}, fields=['supplier_name', 'supplier_primary_contact'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers from Qatar who are warned for RFQs.",
      "top fields": ["supplier_name", "warn_rfqs", "country", "email_id", "supplier_type", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'Qatar', 'warn_rfqs': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are marked with a warning for POS?",
      "top fields": ["supplier_name", "warn_pos", "country", "supplier_group", "disabled", "is_frozen"]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_pos': 1}, fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the list of suppliers and whether they trigger POS warnings.",
      "top fields": ["supplier_name", "warn_pos", "email_id", "supplier_type", "supplier_group", "is_transporter"]
    },
    "output": "frappe.get_all('Supplier', fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List Indian suppliers with POS warnings enabled.",
      "top fields": ["country", "warn_pos", "supplier_name", "email_id", "supplier_group", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'warn_pos': 1}, fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who are the suppliers that are not flagged for POS?",
      "top fields": ["warn_pos", "supplier_name", "email_id", "supplier_type", "supplier_group", "disabled"]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_pos': 0}, fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which disabled suppliers also have POS warnings turned on?",
      "top fields": ["warn_pos", "disabled", "supplier_name", "email_id", "supplier_type", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1, 'warn_pos': 1}, fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers with POS warning flags and their emails.",
      "top fields": ["warn_pos", "email_id", "supplier_name", "supplier_group", "language", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_pos': 1}, fields=['warn_pos', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find the supplier group of all those with POS warnings active.",
      "top fields": ["warn_pos", "supplier_group", "supplier_name", "country", "email_id", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_pos': 1}, fields=['warn_pos', 'supplier_group'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there suppliers flagged for POS but not frozen?",
      "top fields": ["warn_pos", "is_frozen", "supplier_name", "disabled", "email_id", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_pos': 1, 'is_frozen': 0}, fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Retrieve suppliers with POS warnings and their primary contacts.",
      "top fields": ["warn_pos", "supplier_primary_contact", "supplier_name", "email_id", "mobile_no", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_pos': 1}, fields=['warn_pos', 'supplier_primary_contact'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers from Qatar who are warned for POS.",
      "top fields": ["warn_pos", "country", "supplier_name", "email_id", "supplier_group", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'Qatar', 'warn_pos': 1}, fields=['warn_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are blocked from receiving RFQs?",
      "top fields": ["supplier_name", "prevent_rfqs", "disabled", "supplier_group", "email_id", "is_frozen"]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_rfqs': 1}, fields=['prevent_rfqs'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List the suppliers with the RFQ restriction enabled.",
      "top fields": ["supplier_name", "prevent_rfqs", "email_id", "country", "supplier_type", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_rfqs': 1}, fields=['prevent_rfqs'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any Indian suppliers who are prevented from receiving RFQs?",
      "top fields": ["supplier_name", "prevent_rfqs", "country", "email_id", "supplier_group", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'prevent_rfqs': 1}, fields=['prevent_rfqs'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are eligible to receive RFQs?",
      "top fields": ["supplier_name", "prevent_rfqs", "email_id", "supplier_group", "supplier_type", "is_frozen"]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_rfqs': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get all suppliers that are not blocked from RFQs and are active.",
      "top fields": ["prevent_rfqs", "disabled", "supplier_name", "country", "email_id", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_rfqs': 0, 'disabled': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers with RFQ restriction are also frozen?",
      "top fields": ["prevent_rfqs", "is_frozen", "supplier_name", "email_id", "country", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_rfqs': 1, 'is_frozen': 1}, fields=['prevent_rfqs'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Retrieve suppliers with RFQ prevention and their email contacts.",
      "top fields": ["prevent_rfqs", "email_id", "supplier_name", "supplier_group", "language", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_rfqs': 1}, fields=['prevent_rfqs', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers marked to prevent RFQs, along with their types.",
      "top fields": ["prevent_rfqs", "supplier_type", "supplier_name", "email_id", "supplier_group", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_rfqs': 1}, fields=['prevent_rfqs', 'supplier_type'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who are the internal suppliers blocked from RFQs?",
      "top fields": ["prevent_rfqs", "is_internal_supplier", "supplier_name", "email_id", "country", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_rfqs': 1, 'is_internal_supplier': 1}, fields=['prevent_rfqs'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers restricted from RFQs with their status and country.",
      "top fields": ["prevent_rfqs", "disabled", "country", "supplier_name", "supplier_group", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_rfqs': 1}, fields=['prevent_rfqs', 'country'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are blocked from making POS transactions?",
      "top fields": ["prevent_pos", "supplier_name", "disabled", "is_frozen", "supplier_type", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_pos': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show me the list of suppliers who have POS restrictions.",
      "top fields": ["prevent_pos", "supplier_name", "supplier_group", "disabled", "warn_pos", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_pos': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are any internal suppliers blocked from POS operations?",
      "top fields": ["prevent_pos", "is_internal_supplier", "supplier_name", "supplier_type", "country", "disabled"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'prevent_pos': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers from India who are prevented from POS transactions.",
      "top fields": ["prevent_pos", "country", "supplier_name", "language", "supplier_group", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India', 'prevent_pos': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are allowed to use POS features?",
      "top fields": ["prevent_pos", "supplier_name", "disabled", "is_internal_supplier", "country", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_pos': 0}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the supplier names and their POS restriction status.",
      "top fields": ["prevent_pos", "supplier_name", "is_frozen", "warn_pos", "disabled", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'prevent_pos'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Can you show suppliers with both RFQ and POS restrictions?",
      "top fields": ["prevent_pos", "warn_pos", "prevent_rfqs", "warn_rfqs", "supplier_name", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_pos': 1, 'prevent_rfqs': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers that are disabled and cannot access POS.",
      "top fields": ["prevent_pos", "disabled", "supplier_name", "is_frozen", "supplier_type", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_pos': 1, 'disabled': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who among the transporters are barred from POS usage?",
      "top fields": ["prevent_pos", "is_transporter", "supplier_name", "country", "supplier_group", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1, 'prevent_pos': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers with POS restrictions and alert flags.",
      "top fields": ["prevent_pos", "warn_pos", "supplier_name", "supplier_group", "disabled", "is_frozen"]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_pos': 1, 'warn_pos': 1}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are currently on hold?",
      "top fields": ["supplier_name", "on_hold", "hold_type", "release_date", "disabled", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1}, fields=['supplier_name', 'on_hold'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers that are not on hold.",
      "top fields": ["supplier_name", "on_hold", "email_id", "country", "supplier_group", "disabled"]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 0}, fields=['supplier_name', 'on_hold'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers with a hold status flag.",
      "top fields": ["supplier_name", "on_hold", "supplier_type", "release_date", "warn_rfqs", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1}, fields=['supplier_name', 'on_hold'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get names of internal suppliers that are on hold.",
      "top fields": ["supplier_name", "is_internal_supplier", "on_hold", "supplier_group", "country", "tax_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1, 'is_internal_supplier': 1}, fields=['supplier_name', 'on_hold', 'is_internal_supplier'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are any Indian suppliers on hold?",
      "top fields": ["supplier_name", "country", "on_hold", "release_date", "email_id", "tax_category"]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1, 'country': 'India'}, fields=['supplier_name', 'on_hold', 'country'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are on hold and also disabled?",
      "top fields": ["supplier_name", "on_hold", "disabled", "supplier_group", "warn_pos", "is_transporter"]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1, 'disabled': 1}, fields=['supplier_name', 'on_hold', 'disabled'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers who are both transporters and are on hold.",
      "top fields": ["supplier_name", "on_hold", "is_transporter", "country", "email_id", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1, 'is_transporter': 1}, fields=['supplier_name', 'on_hold', 'is_transporter'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me the list of suppliers on hold and also warned for RFQs.",
      "top fields": ["supplier_name", "on_hold", "warn_rfqs", "prevent_rfqs", "disabled", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1, 'warn_rfqs': 1}, fields=['supplier_name', 'on_hold', 'warn_rfqs'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers with hold flag and a release date set.",
      "top fields": ["supplier_name", "on_hold", "release_date", "hold_type", "warn_pos", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1, 'release_date': ['!=', '']}, fields=['supplier_name', 'on_hold', 'release_date'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Retrieve all supplier names and their on-hold status.",
      "top fields": ["supplier_name", "on_hold", "email_id", "supplier_group", "supplier_type", "country"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'on_hold'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers are on hold due to a specific hold type?",
      "top fields": ["supplier_name", "on_hold", "hold_type", "release_date", "supplier_group", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1, 'hold_type': ['!=', '']}, fields=['supplier_name', 'hold_type'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the list of suppliers along with their hold type.",
      "top fields": ["supplier_name", "hold_type", "on_hold", "release_date", "email_id", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'hold_type'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers where the hold type is 'Credit Limit Exceeded'.",
      "top fields": ["supplier_name", "hold_type", "on_hold", "supplier_group", "email_id", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'hold_type': 'Credit Limit Exceeded'}, fields=['supplier_name', 'hold_type'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have both a hold type and release date defined?",
      "top fields": ["supplier_name", "hold_type", "release_date", "on_hold", "email_id", "tax_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'hold_type': ['!=', ''], 'release_date': ['!=', '']}, fields=['supplier_name', 'hold_type', 'release_date'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List the suppliers who are on hold due to overdue payments.",
      "top fields": ["supplier_name", "hold_type", "on_hold", "supplier_group", "country", "tax_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1, 'hold_type': 'Overdue Payments'}, fields=['supplier_name', 'hold_type'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Are there any internal suppliers with a hold type assigned?",
      "top fields": ["supplier_name", "is_internal_supplier", "hold_type", "on_hold", "email_id", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'hold_type': ['!=', '']}, fields=['supplier_name', 'hold_type'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Give me the hold types for transporters on hold.",
      "top fields": ["supplier_name", "is_transporter", "hold_type", "on_hold", "email_id", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_transporter': 1, 'on_hold': 1}, fields=['supplier_name', 'hold_type'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the names and hold types of disabled suppliers.",
      "top fields": ["supplier_name", "disabled", "hold_type", "on_hold", "email_id", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1, 'hold_type': ['!=', '']}, fields=['supplier_name', 'hold_type'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers on hold with unknown hold type values.",
      "top fields": ["supplier_name", "hold_type", "on_hold", "email_id", "country", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1, 'hold_type': ['is', 'null']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all supplier names and their current hold type.",
      "top fields": ["supplier_name", "hold_type", "on_hold", "supplier_group", "email_id", "tax_id"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'hold_type'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have a release date assigned?",
      "top fields": ["supplier_name", "release_date", "on_hold", "hold_type", "country", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'release_date': ['!=', '']}, fields=['supplier_name', 'release_date'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List suppliers with release dates after January 1st, 2025.",
      "top fields": ["supplier_name", "release_date", "email_id", "is_internal_supplier", "country", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'release_date': ['>', '2025-01-01']}, fields=['supplier_name', 'release_date'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Find suppliers who are on hold and have a scheduled release date.",
      "top fields": ["supplier_name", "on_hold", "release_date", "hold_type", "country", "email_id"]
    },
    "output": "frappe.get_all('Supplier', filters={'on_hold': 1, 'release_date': ['!=', '']}, fields=['supplier_name', 'release_date'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers whose release date is in March 2025.",
      "top fields": ["supplier_name", "release_date", "country", "supplier_type", "email_id", "is_frozen"]
    },
    "output": "frappe.get_all('Supplier', filters={'release_date': ['like', '2025-03-%']}, fields=['supplier_name', 'release_date'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which internal suppliers have a release date defined?",
      "top fields": ["supplier_name", "is_internal_supplier", "release_date", "email_id", "supplier_group", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'release_date': ['!=', '']}, fields=['supplier_name', 'release_date'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the supplier names and their release dates.",
      "top fields": ["supplier_name", "release_date", "email_id", "mobile_no", "language", "website"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'release_date'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Who are the disabled suppliers with a release date scheduled?",
      "top fields": ["supplier_name", "disabled", "release_date", "is_transporter", "language", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 1, 'release_date': ['!=', '']}, fields=['supplier_name', 'release_date'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Can you list suppliers that are blocked from POS but have a release date?",
      "top fields": ["supplier_name", "prevent_pos", "release_date", "is_internal_supplier", "email_id", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'prevent_pos': 1, 'release_date': ['!=', '']}, fields=['supplier_name', 'release_date'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have no release date set?",
      "top fields": ["supplier_name", "release_date", "email_id", "supplier_group", "website", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'release_date': ['is', 'null']}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers with release dates and hold types together.",
      "top fields": ["supplier_name", "release_date", "hold_type", "on_hold", "disabled", "is_frozen"]
    },
    "output": "frappe.get_all('Supplier', filters={'release_date': ['!=', '']}, fields=['supplier_name', 'release_date', 'hold_type'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers have associated portal users?",
      "top fields": ["supplier_name", "portal_users", "email_id", "country", "language", "is_internal_supplier"]
    },
    "output": "frappe.get_all('Supplier', filters={'portal_users': ['!=', []]}, fields=['supplier_name', 'portal_users'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "List all suppliers that don't have any portal users assigned.",
      "top fields": ["supplier_name", "portal_users", "email_id", "supplier_group", "disabled", "country"]
    },
    "output": "frappe.get_all('Supplier', filters={'portal_users': []}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get names and portal user details for each supplier.",
      "top fields": ["supplier_name", "portal_users", "email_id", "supplier_type", "language", "website"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'portal_users'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show suppliers with more than one portal user configured.",
      "top fields": ["supplier_name", "portal_users", "language", "mobile_no", "country", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'portal_users': ['!=', []]}, fields=['supplier_name', 'portal_users'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which internal suppliers have portal users added?",
      "top fields": ["supplier_name", "is_internal_supplier", "portal_users", "country", "email_id", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'is_internal_supplier': 1, 'portal_users': ['!=', []]}, fields=['supplier_name', 'portal_users'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Get the list of all suppliers who are not disabled and have portal users.",
      "top fields": ["supplier_name", "portal_users", "disabled", "email_id", "country", "supplier_group"]
    },
    "output": "frappe.get_all('Supplier', filters={'disabled': 0, 'portal_users': ['!=', []]}, fields=['supplier_name', 'portal_users'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show portal users for Indian suppliers.",
      "top fields": ["supplier_name", "country", "portal_users", "email_id", "language", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'India'}, fields=['supplier_name', 'portal_users'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Do any suppliers from the USA have portal users configured?",
      "top fields": ["supplier_name", "country", "portal_users", "supplier_group", "email_id", "website"]
    },
    "output": "frappe.get_all('Supplier', filters={'country': 'USA', 'portal_users': ['!=', []]}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Which suppliers with warning flags have portal users?",
      "top fields": ["supplier_name", "portal_users", "warn_pos", "warn_rfqs", "country", "language"]
    },
    "output": "frappe.get_all('Supplier', filters={'warn_pos': 1, 'portal_users': ['!=', []]}, fields=['supplier_name'])"
  },
  {
    "input": {
      "doctype": "Supplier",
      "question": "Show the list of supplier portal users along with their names and emails.",
      "top fields": ["supplier_name", "portal_users", "email_id", "country", "language", "supplier_type"]
    },
    "output": "frappe.get_all('Supplier', fields=['supplier_name', 'portal_users', 'email_id'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me all sales invoices with a title assigned.",
      "top fields": ["name", "title", "customer", "posting_date", "is_pos", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'title': ['!=', '']}, fields=['name', 'title'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoice numbers and their titles.",
      "top fields": ["name", "title", "posting_date", "customer_name", "rounded_total", "is_return"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'title'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which sales invoices are missing the title?",
      "top fields": ["name", "title", "posting_date", "customer", "status", "total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'title': ['is', 'null']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all invoices for the customer John Enterprises along with their titles.",
      "top fields": ["name", "title", "customer", "customer_name", "territory", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'John Enterprises'}, fields=['name', 'customer', 'title'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices titled 'March Sales' were posted after March 1st, 2025?",
      "top fields": ["name", "title", "posting_date", "customer", "is_pos", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'title': 'March Sales', 'posting_date': ['>', '2025-03-01']}, fields=['name', 'title', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do we have any consolidated sales invoices with a title?",
      "top fields": ["name", "title", "is_consolidated", "grand_total", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_consolidated': 1, 'title': ['!=', '']}, fields=['name', 'title', 'is_consolidated'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List the titles of all POS sales invoices.",
      "top fields": ["name", "title", "is_pos", "pos_profile", "customer", "rounded_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1}, fields=['name', 'title'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me sales invoice titles, customer names, and their posting dates.",
      "top fields": ["name", "title", "customer", "customer_name", "posting_date", "net_total"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'title', 'customer', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have the same value in both title and customer_name fields?",
      "top fields": ["name", "title", "customer_name", "customer", "posting_date", "territory"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'title': ['=', 'customer_name']}, fields=['name', 'title', 'customer_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get titles of sales invoices created for customers in Qatar.",
      "top fields": ["name", "title", "customer", "territory", "posting_date", "is_return"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': ['like', '%Qatar%']}, fields=['name', 'title', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which sales invoices use a naming series starting with INV-?",
      "top fields": ["name", "naming_series", "posting_date", "customer", "is_pos", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'naming_series': ['like', 'INV-%']}, fields=['name', 'naming_series'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoice numbers with their naming series values.",
      "top fields": ["name", "naming_series", "posting_date", "customer_name", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'naming_series'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices that don't have any naming series set.",
      "top fields": ["name", "naming_series", "customer", "company", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'naming_series': ['is', 'null']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which sales invoices from March 2025 used the naming series INV-2025?",
      "top fields": ["name", "naming_series", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['like', '2025-03-%'], 'naming_series': 'INV-2025'}, fields=['name', 'naming_series', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices with a naming series that starts with POS-2025.",
      "top fields": ["name", "naming_series", "is_pos", "posting_date", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'naming_series': ['like', 'POS-2025%']}, fields=['name', 'naming_series'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoice titles, customers, and their naming series.",
      "top fields": ["name", "title", "customer", "naming_series", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'title', 'customer', 'naming_series'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with naming series 'INV-2024' for the company Alpha Corp.",
      "top fields": ["name", "naming_series", "company", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'naming_series': 'INV-2024', 'company': 'Alpha Corp'}, fields=['name', 'naming_series', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the naming series of return invoices.",
      "top fields": ["name", "naming_series", "is_return", "return_against", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1}, fields=['name', 'naming_series', 'return_against'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have the naming series same as their title?",
      "top fields": ["name", "naming_series", "title", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'naming_series': ['=', 'title']}, fields=['name', 'naming_series', 'title'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me the naming series and customer names for invoices from India.",
      "top fields": ["name", "naming_series", "customer", "territory", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'territory': 'India'}, fields=['name', 'naming_series', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all sales invoices along with their customer names.",
      "top fields": ["name", "customer", "customer_name", "posting_date", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices are made for the customer Gulf Tech Solutions?",
      "top fields": ["name", "customer", "customer_name", "posting_date", "tax_id", "territory"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Gulf Tech Solutions'}, fields=['name', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all invoices where the customer field is empty.",
      "top fields": ["name", "customer", "posting_date", "status", "customer_name", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': ['is', 'null']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices with grand total above 10,000?",
      "top fields": ["name", "customer", "grand_total", "posting_date", "currency", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'grand_total': ['>', 10000]}, fields=['name', 'customer', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all POS invoices with customer details.",
      "top fields": ["name", "customer", "is_pos", "customer_name", "posting_date", "pos_profile"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1}, fields=['name', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List customers with invoices dated after April 1st, 2025.",
      "top fields": ["name", "customer", "posting_date", "due_date", "company", "territory"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['>', '2025-04-01']}, fields=['name', 'customer', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do any customers have more than one invoice posted today?",
      "top fields": ["customer", "posting_date", "name", "grand_total", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': frappe.utils.today()}, fields=['customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the customer and company for each sales invoice.",
      "top fields": ["name", "customer", "company", "customer_name", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'customer', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have customers from the Qatar region?",
      "top fields": ["name", "customer", "territory", "customer_name", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': ['like', '%Qatar%']}, fields=['name', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the customer and customer_name are different.",
      "top fields": ["name", "customer", "customer_name", "posting_date", "territory", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': ['!=', 'customer_name']}, fields=['name', 'customer', 'customer_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all sales invoices that have a tax ID assigned.",
      "top fields": ["name", "tax_id", "customer", "company", "posting_date", "tax_category"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tax_id': ['!=', '']}, fields=['name', 'tax_id', 'customer', 'company', 'posting_date', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which sales invoices are missing a tax ID?",
      "top fields": ["name", "tax_id", "customer", "company", "due_date", "is_pos"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tax_id': ['is', 'null']}, fields=['name', 'tax_id', 'customer', 'company', 'due_date', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get tax IDs and customer names from all invoices.",
      "top fields": ["tax_id", "customer", "name", "posting_date", "company", "currency"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['tax_id', 'customer', 'name', 'posting_date', 'company', 'currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices for Gulf Contracting that include a tax ID.",
      "top fields": ["name", "tax_id", "customer", "company", "posting_date", "territory"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Gulf Contracting', 'tax_id': ['!=', '']}, fields=['name', 'tax_id', 'customer', 'company', 'posting_date', 'territory'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where the tax ID matches 'QA-4567'.",
      "top fields": ["name", "tax_id", "company", "customer", "posting_date", "is_pos"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tax_id': 'QA-4567'}, fields=['name', 'tax_id', 'company', 'customer', 'posting_date', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have the same value in both tax ID and company tax ID?",
      "top fields": ["name", "tax_id", "company_tax_id", "customer", "posting_date", "represents_company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tax_id': ['=', 'company_tax_id']}, fields=['name', 'tax_id', 'company_tax_id', 'customer', 'posting_date', 'represents_company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show tax IDs for invoices posted after May 1st, 2025.",
      "top fields": ["name", "tax_id", "posting_date", "company", "customer", "due_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['>', '2025-05-01']}, fields=['name', 'tax_id', 'posting_date', 'company', 'customer', 'due_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List tax IDs for all POS sales invoices.",
      "top fields": ["name", "tax_id", "is_pos", "pos_profile", "company", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1}, fields=['name', 'tax_id', 'is_pos', 'pos_profile', 'company', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get tax ID and tax category for all sales invoices.",
      "top fields": ["name", "tax_id", "tax_category", "company", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'tax_id', 'tax_category', 'company', 'customer', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with tax ID starting with 'QA' and issued by 'Qatar Trading Co'.",
      "top fields": ["name", "tax_id", "company", "customer", "posting_date", "territory"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tax_id': ['like', 'QA%'], 'company': 'Qatar Trading Co'}, fields=['name', 'tax_id', 'company', 'customer', 'posting_date', 'territory'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all sales invoices created by Gulf Engineering Company.",
      "top fields": ["name", "company", "posting_date", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company': 'Gulf Engineering Company'}, fields=['name', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which companies issued sales invoices in 2025?",
      "top fields": ["name", "company", "posting_date", "currency", "customer", "tax_id"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['like', '2025%']}, fields=['name', 'company', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices where the company is not 'ABC Corporation'.",
      "top fields": ["name", "company", "status", "grand_total", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company': ['!=', 'ABC Corporation']}, fields=['name', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices for the company 'Global Tech' with status 'Unpaid'.",
      "top fields": ["name", "company", "status", "due_date", "outstanding_amount", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company': 'Global Tech', 'status': 'Unpaid'}, fields=['name', 'company', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all invoices from companies whose name contains 'Qatar'.",
      "top fields": ["name", "company", "posting_date", "currency", "net_total", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company': ['like', '%Qatar%']}, fields=['name', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which companies issued invoices to customer 'Universal Steel'?",
      "top fields": ["name", "company", "customer", "customer_group", "territory", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Universal Steel'}, fields=['name', 'company', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give the posting dates and companies for all sales invoices.",
      "top fields": ["name", "company", "posting_date", "currency", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'company', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices where the company tax ID matches the company name.",
      "top fields": ["name", "company", "company_tax_id", "tax_id", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_tax_id': ['=', 'company']}, fields=['name', 'company', 'company_tax_id'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which internal customers were invoiced by Gulf Enterprises?",
      "top fields": ["name", "company", "is_internal_customer", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company': 'Gulf Enterprises', 'is_internal_customer': 1}, fields=['name', 'company', 'is_internal_customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices posted by each company along with the currency used.",
      "top fields": ["name", "company", "currency", "posting_date", "conversion_rate", "net_total"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'company', 'currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all sales invoices where the company's tax ID is filled.",
      "top fields": ["name", "company_tax_id", "company", "posting_date", "status", "tax_id"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_tax_id': ['!=', '']}, fields=['name', 'company_tax_id'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoice numbers and company tax IDs.",
      "top fields": ["name", "company_tax_id", "company", "currency", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'company_tax_id'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices are missing the company tax ID?",
      "top fields": ["name", "company_tax_id", "company", "status", "net_total", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_tax_id': ['is', 'null']}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices for company 'SmartTech Ltd' that have a tax ID on record.",
      "top fields": ["name", "company", "company_tax_id", "posting_date", "customer", "tax_id"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company': 'SmartTech Ltd', 'company_tax_id': ['!=', '']}, fields=['name', 'company', 'company_tax_id'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show company tax ID details for invoices posted after Jan 1, 2025.",
      "top fields": ["name", "company_tax_id", "posting_date", "company", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['>', '2025-01-01']}, fields=['name', 'company_tax_id', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find sales invoices where company and tax ID are both defined.",
      "top fields": ["name", "company", "company_tax_id", "tax_id", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company': ['!=', ''], 'company_tax_id': ['!=', '']}, fields=['name', 'company', 'company_tax_id'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which internal customer invoices also have company tax IDs?",
      "top fields": ["name", "company_tax_id", "is_internal_customer", "customer", "company", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_internal_customer': 1, 'company_tax_id': ['!=', '']}, fields=['name', 'company_tax_id', 'is_internal_customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get company tax IDs for invoices with grand total over 10,000.",
      "top fields": ["name", "company_tax_id", "grand_total", "company", "currency", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'grand_total': ['>', 10000]}, fields=['name', 'company_tax_id', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where company tax ID matches the customerâ€™s tax ID.",
      "top fields": ["name", "company_tax_id", "tax_id", "company", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_tax_id': ['=', 'tax_id']}, fields=['name', 'company_tax_id', 'tax_id'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me company tax ID and status for each invoice created this year.",
      "top fields": ["name", "company_tax_id", "posting_date", "status", "company", "currency"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['like', '2025%']}, fields=['name', 'company_tax_id', 'status'])"
  },

  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all sales invoices created after January 1st, 2025.",
      "top fields": ["name", "customer", "company", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['>', '2025-01-01']}, fields=['name', 'customer', 'company', 'posting_date', 'grand_total', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoice numbers with their customers and posting dates.",
      "top fields": ["name", "customer", "posting_date", "currency", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'customer', 'posting_date', 'currency', 'grand_total', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were posted in March 2025?",
      "top fields": ["name", "posting_date", "customer", "company", "is_pos", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['like', '2025-03-%']}, fields=['name', 'posting_date', 'customer', 'company', 'is_pos', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the POS invoices along with their posting dates.",
      "top fields": ["name", "posting_date", "is_pos", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1}, fields=['name', 'posting_date', 'is_pos', 'customer', 'grand_total', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find Smart Electronics invoices posted in Q1 2025.",
      "top fields": ["name", "customer", "posting_date", "grand_total", "territory", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Smart Electronics', 'posting_date': ['between', ['2025-01-01', '2025-03-31']]}, fields=['name', 'customer', 'posting_date', 'grand_total', 'territory', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were posted before 2024 and belong to TechCorp?",
      "top fields": ["name", "posting_date", "company", "customer", "grand_total", "currency"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company': 'TechCorp', 'posting_date': ['<', '2024-01-01']}, fields=['name', 'posting_date', 'company', 'customer', 'grand_total', 'currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List internal customer invoices from February 2025.",
      "top fields": ["name", "posting_date", "is_internal_customer", "customer", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_internal_customer': 1, 'posting_date': ['like', '2025-02-%']}, fields=['name', 'posting_date', 'is_internal_customer', 'customer', 'company', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices posted on June 10th, 2025 with their total.",
      "top fields": ["name", "posting_date", "grand_total", "customer", "currency", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': '2025-06-10'}, fields=['name', 'posting_date', 'grand_total', 'customer', 'currency', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show today's posted sales invoices.",
      "top fields": ["name", "posting_date", "customer", "grand_total", "is_pos", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': frappe.utils.today()}, fields=['name', 'posting_date', 'customer', 'grand_total', 'is_pos', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices posted in 2025 are still outstanding?",
      "top fields": ["name", "posting_date", "outstanding_amount", "customer", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['like', '2025%'], 'status': 'Unpaid'}, fields=['name', 'posting_date', 'outstanding_amount', 'customer', 'company', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which sales invoices were posted exactly at 09:00 AM?",
      "top fields": ["name", "posting_time", "posting_date", "customer", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_time': '09:00:00'}, fields=['name', 'posting_time', 'posting_date', 'customer', 'company', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices created during evening hours (after 6 PM).",
      "top fields": ["name", "posting_time", "customer", "posting_date", "is_pos", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_time': ['>', '18:00:00']}, fields=['name', 'posting_time', 'customer', 'posting_date', 'is_pos', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get a list of POS invoices posted before 08:00 AM.",
      "top fields": ["name", "posting_time", "is_pos", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'posting_time': ['<', '08:00:00']}, fields=['name', 'posting_time', 'is_pos', 'posting_date', 'customer', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices posted today between 10 AM and 12 PM.",
      "top fields": ["name", "posting_time", "posting_date", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': frappe.utils.today(), 'posting_time': ['between', ['10:00:00', '12:00:00']]}, fields=['name', 'posting_time', 'posting_date', 'customer', 'grand_total', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find sales invoices for John Enterprises posted after 5 PM.",
      "top fields": ["name", "posting_time", "customer", "posting_date", "company", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'John Enterprises', 'posting_time': ['>', '17:00:00']}, fields=['name', 'posting_time', 'customer', 'posting_date', 'company', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices posted at 3 PM are still unpaid?",
      "top fields": ["name", "posting_time", "status", "customer", "posting_date", "outstanding_amount"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_time': '15:00:00', 'status': 'Unpaid'}, fields=['name', 'posting_time', 'status', 'customer', 'posting_date', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show the posting time for all invoices issued to Tech Solutions.",
      "top fields": ["name", "customer", "posting_time", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Tech Solutions'}, fields=['name', 'customer', 'posting_time', 'posting_date', 'status', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all consolidated invoices with their posting time.",
      "top fields": ["name", "posting_time", "is_consolidated", "posting_date", "company", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_consolidated': 1}, fields=['name', 'posting_time', 'is_consolidated', 'posting_date', 'company', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices posted between 2 PM and 4 PM on March 12th, 2025?",
      "top fields": ["name", "posting_date", "posting_time", "customer", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': '2025-03-12', 'posting_time': ['between', ['14:00:00', '16:00:00']]}, fields=['name', 'posting_date', 'posting_time', 'customer', 'company', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me the posting time and customer for all invoices today.",
      "top fields": ["name", "posting_time", "customer", "posting_date", "is_pos", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': frappe.utils.today()}, fields=['name', 'posting_time', 'customer', 'posting_date', 'is_pos', 'grand_total'])"
  },
    {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices had manually set posting times?",
      "top fields": ["name", "set_posting_time", "posting_date", "posting_time", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'set_posting_time': 1}, fields=['name', 'set_posting_time'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the posting time was not manually set.",
      "top fields": ["name", "set_posting_time", "posting_time", "posting_date", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'set_posting_time': 0}, fields=['name', 'set_posting_time'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoice numbers and whether their posting time was manually configured.",
      "top fields": ["name", "set_posting_time", "posting_time", "posting_date", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['name', 'set_posting_time'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me manually set posting times for invoices from Qatar Industries.",
      "top fields": ["name", "customer", "set_posting_time", "posting_time", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Qatar Industries', 'set_posting_time': 1}, fields=['name', 'customer', 'set_posting_time'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which POS invoices had custom posting times?",
      "top fields": ["name", "is_pos", "set_posting_time", "posting_time", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'set_posting_time': 1}, fields=['name', 'is_pos', 'set_posting_time'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all consolidated invoices with a manually set posting time.",
      "top fields": ["name", "is_consolidated", "set_posting_time", "posting_date", "posting_time", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_consolidated': 1, 'set_posting_time': 1}, fields=['name', 'is_consolidated', 'set_posting_time'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices created after April 1st have manual posting times?",
      "top fields": ["name", "set_posting_time", "posting_date", "posting_time", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['>', '2025-04-01'], 'set_posting_time': 1}, fields=['name', 'set_posting_time', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do any invoices for internal customers have set posting times?",
      "top fields": ["name", "is_internal_customer", "set_posting_time", "posting_time", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_internal_customer': 1, 'set_posting_time': 1}, fields=['name', 'is_internal_customer', 'set_posting_time'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with both custom posting time and debit note enabled.",
      "top fields": ["name", "set_posting_time", "is_debit_note", "posting_time", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'set_posting_time': 1, 'is_debit_note': 1}, fields=['name', 'set_posting_time', 'is_debit_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the posting time setting and company for all unpaid invoices.",
      "top fields": ["name", "set_posting_time", "company", "posting_time", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': 'Unpaid'}, fields=['name', 'set_posting_time', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that are due tomorrow.",
      "top fields": ["due_date", "name", "posting_date", "grand_total", "customer", "status"]
    },
    "output": "import datetime\n\ntomorrow = datetime.date.today() + datetime.timedelta(days=1)\n\nfrappe.get_all('Sales Invoice',filters={'due_date': tomorrow},fields=['name', 'due_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices which have a due date set for this week.",
      "top fields": ["due_date", "name", "posting_date", "company", "customer", "status"]
    },
    "output": "import datetime\n\nstart_of_week = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend_of_week = start_of_week + datetime.timedelta(days=6)\n\nfrappe.get_all('Sales Invoice',filters={'due_date': ['between', [start_of_week, end_of_week]]},fields=['name', 'due_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me all pending invoices due on 2025-06-30.",
      "top fields": ["due_date", "status", "name", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice',filters={'due_date': datetime.date(2025, 6, 30),'status': 'Unpaid'},fields=['name', 'due_date', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the due dates and companies for all invoices created today.",
      "top fields": ["posting_date", "due_date", "company", "name", "customer", "status"]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice',filters={'posting_date': datetime.date.today()},fields=['name', 'due_date', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices are due after June 15, 2025?",
      "top fields": ["due_date", "name", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'due_date': ['>', datetime.date(2025, 6, 15)]}, fields=['name', 'due_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me invoices from Niyon Corp that are due next month.",
      "top fields": ["customer", "due_date", "name", "posting_date", "grand_total", "status"]
    },
    "output": "from frappe.utils import get_first_day, get_last_day, add_months\nimport datetime\n\nstart_date = get_first_day(add_months(datetime.date.today(), 1))\nend_date = get_last_day(add_months(datetime.date.today(), 1))\n\nfrappe.get_all('Sales Invoice', filters={'customer': 'Niyon Corp', 'due_date': ['between', [start_date, end_date]]}, fields=['name', 'due_date', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show overdue invoices as of today.",
      "top fields": ["due_date", "status", "name", "posting_date", "grand_total", "customer"]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'due_date': ['<', datetime.date.today()], 'status': 'Unpaid'}, fields=['name', 'due_date', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find the invoices that were due yesterday but are still unpaid.",
      "top fields": ["due_date", "status", "name", "customer", "posting_date", "grand_total"]
    },
    "output": "import datetime\n\nyesterday = datetime.date.today() - datetime.timedelta(days=1)\n\nfrappe.get_all('Sales Invoice', filters={'due_date': yesterday, 'status': 'Unpaid'}, fields=['name', 'due_date', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the list of invoices with due date in the past 7 days.",
      "top fields": ["due_date", "name", "posting_date", "customer", "status", "grand_total"]
    },
    "output": "import datetime\n\nend_date = datetime.date.today()\nstart_date = end_date - datetime.timedelta(days=7)\n\nfrappe.get_all('Sales Invoice', filters={'due_date': ['between', [start_date, end_date]]}, fields=['name', 'due_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices are due after today and belong to Goochi Ltd?",
      "top fields": ["customer", "due_date", "name", "posting_date", "grand_total", "status"]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'customer': 'Goochi Ltd', 'due_date': ['>', datetime.date.today()]}, fields=['name', 'due_date', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were done through Point of Sale?",
      "top fields": ["is_pos", "name", "posting_date", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1}, fields=['name', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were made using POS?",
      "top fields": ["is_pos", "posting_date", "name", "company", "customer", "status"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_pos': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices for the customer named 'Retail World'.",
      "top fields": ["is_pos", "customer", "name", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'customer': 'Retail World'}, fields=['name', 'customer', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get non-POS invoices generated before today.",
      "top fields": ["is_pos", "posting_date", "name", "due_date", "status", "customer"]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'is_pos': 0, 'posting_date': ['<', datetime.date.today()]}, fields=['name', 'posting_date', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices created this week.",
      "top fields": ["is_pos", "posting_date", "name", "company", "grand_total", "customer"]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\n\nfrappe.get_all('Sales Invoice', filters={'is_pos': 1, 'posting_date': ['between', [start, end]]}, fields=['name', 'posting_date', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any POS invoices created today?",
      "top fields": ["is_pos", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'is_pos': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch the total number of invoices that are not POS-based.",
      "top fields": ["is_pos", "name", "customer", "posting_date", "status", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_pos': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which POS invoices are also returns?",
      "top fields": ["is_pos", "is_return", "name", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'is_return': 1}, fields=['name', 'is_pos', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices made via POS with totals above 3000.",
      "top fields": ["is_pos", "grand_total", "name", "customer", "posting_date", "currency"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'grand_total': ['>', 3000]}, fields=['name', 'is_pos', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me a list of customers who have POS invoices.",
      "top fields": ["is_pos", "customer", "name", "grand_total", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were created using the POS profile 'Counter A'?",
      "top fields": ["pos_profile", "name", "customer", "is_pos", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pos_profile': 'Counter A'}, fields=['name', 'pos_profile'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all POS profiles used in today's invoices.",
      "top fields": ["pos_profile", "posting_date", "is_pos", "name", "company", "customer"]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today()}, fields=['pos_profile'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were linked to the 'Main Hall POS' profile?",
      "top fields": ["pos_profile", "customer", "posting_date", "company", "name", "is_pos"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'pos_profile': 'Main Hall POS'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices where POS profile was set but the invoice was not submitted.",
      "top fields": ["pos_profile", "docstatus", "is_pos", "posting_date", "status", "name"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pos_profile': ['!=', ''], 'docstatus': 0}, fields=['name', 'pos_profile'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS profile and grand total for all POS invoices above 5000.",
      "top fields": ["pos_profile", "grand_total", "is_pos", "name", "company", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'grand_total': ['>', 5000]}, fields=['pos_profile', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with missing POS profile but marked as POS transactions.",
      "top fields": ["pos_profile", "is_pos", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pos_profile': ['in', [None, '']], 'is_pos': 1}, fields=['name', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers used the POS profile 'Retail POS' this week?",
      "top fields": ["pos_profile", "customer", "posting_date", "is_pos", "name", "company"]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\n\nfrappe.get_all('Sales Invoice', filters={'pos_profile': 'Retail POS', 'posting_date': ['between', [start, end]]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count the number of invoices without any POS profile assigned.",
      "top fields": ["pos_profile", "name", "company", "is_pos", "posting_date", "status"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'pos_profile': ['in', [None, '']]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get a list of invoices made using different POS profiles and their amounts.",
      "top fields": ["pos_profile", "name", "grand_total", "is_pos", "company", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pos_profile': ['!=', '']}, fields=['name', 'pos_profile', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which POS profiles were used for return invoices?",
      "top fields": ["pos_profile", "is_return", "name", "company", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1}, fields=['pos_profile'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any consolidated invoices?",
      "top fields": ["name", "is_consolidated", "posting_date", "customer", "company", "status"]
    },
    "output": "frappe.db.exists('Sales Invoice', {'is_consolidated': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that were not consolidated.",
      "top fields": ["name", "is_consolidated", "posting_date", "customer", "due_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_consolidated': 0}, fields=['name', 'is_consolidated'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many consolidated invoices were issued this year?",
      "top fields": ["is_consolidated", "posting_date", "name", "company", "customer", "status"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\n\nfrappe.db.count('Sales Invoice', filters={'is_consolidated': 1, 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received consolidated invoices last month?",
      "top fields": ["customer", "is_consolidated", "posting_date", "name", "company", "grand_total"]
    },
    "output": "from frappe.utils import get_first_day, get_last_day, add_months\nimport datetime\n\nstart = get_first_day(add_months(datetime.date.today(), -1))\nend = get_last_day(add_months(datetime.date.today(), -1))\n\nfrappe.get_all('Sales Invoice', filters={'is_consolidated': 1, 'posting_date': ['between', [start, end]]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me consolidated invoices from Tech World Ltd.",
      "top fields": ["customer", "is_consolidated", "name", "posting_date", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Tech World Ltd.', 'is_consolidated': 1}, fields=['name', 'customer', 'is_consolidated'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List consolidated invoices with grand total above 25,000.",
      "top fields": ["is_consolidated", "grand_total", "name", "customer", "posting_date", "currency"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_consolidated': 1, 'grand_total': ['>', 25000]}, fields=['name', 'grand_total', 'is_consolidated'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which consolidated invoices are still unpaid?",
      "top fields": ["is_consolidated", "status", "name", "due_date", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_consolidated': 1, 'status': 'Unpaid'}, fields=['name', 'is_consolidated', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get a list of consolidated invoices created today.",
      "top fields": ["is_consolidated", "posting_date", "name", "customer", "grand_total", "company"]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'is_consolidated': 1, 'posting_date': datetime.date.today()}, fields=['name', 'is_consolidated', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which consolidated invoices are marked as returns?",
      "top fields": ["is_consolidated", "is_return", "name", "customer", "grand_total", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_consolidated': 1, 'is_return': 1}, fields=['name', 'is_consolidated', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many consolidated invoices were submitted this week?",
      "top fields": ["is_consolidated", "posting_date", "name", "status", "company", "customer"]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\n\nfrappe.db.count('Sales Invoice', filters={'is_consolidated': 1, 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices are returns?",
      "top fields": ["is_return", "name", "customer", "posting_date", "status", "return_against"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1}, fields=['name', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were marked as returns?",
      "top fields": ["is_return", "posting_date", "status", "customer", "grand_total", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all non-return invoices posted today.",
      "top fields": ["is_return", "posting_date", "name", "status", "customer", "due_date"]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'is_return': 0, 'posting_date': datetime.date.today()}, fields=['name', 'is_return', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch return invoices submitted by 'Ocean Traders'.",
      "top fields": ["customer", "is_return", "name", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'customer': 'Ocean Traders'}, fields=['name', 'customer', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the list of return invoices with a grand total above 5000.",
      "top fields": ["is_return", "grand_total", "name", "customer", "company", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'grand_total': ['>', 5000]}, fields=['name', 'grand_total', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many returns were created last month?",
      "top fields": ["is_return", "posting_date", "name", "status", "customer", "grand_total"]
    },
    "output": "from frappe.utils import get_first_day, get_last_day, add_months\nimport datetime\n\nstart = get_first_day(add_months(datetime.date.today(), -1))\nend = get_last_day(add_months(datetime.date.today(), -1))\n\nfrappe.db.count('Sales Invoice', filters={'is_return': 1, 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all return invoices along with their return reference.",
      "top fields": ["is_return", "return_against", "name", "posting_date", "status", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1}, fields=['name', 'is_return', 'return_against'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which return invoices were created this week?",
      "top fields": ["is_return", "posting_date", "name", "status", "customer", "due_date"]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\n\nfrappe.get_all('Sales Invoice', filters={'is_return': 1, 'posting_date': ['between', [start, end]]}, fields=['name', 'posting_date', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices from 'Global Supplies' with outstanding amounts?",
      "top fields": ["is_return", "customer", "outstanding_amount", "name", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'customer': 'Global Supplies', 'outstanding_amount': ['>', 0]}, fields=['name', 'customer', 'outstanding_amount', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices created after June 1, 2025.",
      "top fields": ["is_return", "posting_date", "name", "status", "due_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'posting_date': ['>', datetime.date(2025, 6, 1)]}, fields=['name', 'posting_date', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that are returns and mention their original invoice reference.",
      "top fields": ["is_return", "return_against", "name", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1}, fields=['name', 'return_against'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which return invoice refers to INV-2025-0012?",
      "top fields": ["is_return", "return_against", "name", "status", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'return_against': 'INV-2025-0012'}, fields=['name', 'return_against'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give all returns linked to any original invoice.",
      "top fields": ["is_return", "return_against", "name", "status", "grand_total", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'return_against': ['!=', '']}, fields=['name', 'return_against'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices are linked to original invoices?",
      "top fields": ["is_return", "return_against", "posting_date", "status", "customer", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'return_against': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices that reference original invoice INV-3056 as returns.",
      "top fields": ["return_against", "is_return", "name", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'return_against': 'INV-3056'}, fields=['name', 'return_against', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices and the corresponding invoice they are linked to.",
      "top fields": ["is_return", "return_against", "name", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1}, fields=['name', 'is_return', 'return_against'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices linked to 'Retail Hub' with original invoice numbers.",
      "top fields": ["is_return", "return_against", "customer", "name", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'customer': 'Retail Hub'}, fields=['name', 'return_against', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any returns not linked to any invoice?",
      "top fields": ["is_return", "return_against", "name", "posting_date", "status", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'return_against': ['=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What is the original invoice for return INV-2025-089?",
      "top fields": ["return_against", "name", "is_return", "posting_date", "status", "customer"]
    },
    "output": "frappe.get_value('Sales Invoice', 'INV-2025-089', 'return_against')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all returns issued last month along with their original invoice references.",
      "top fields": ["is_return", "return_against", "posting_date", "name", "grand_total", "customer"]
    },
    "output": "from frappe.utils import get_first_day, get_last_day, add_months\nimport datetime\n\nstart = get_first_day(add_months(datetime.date.today(), -1))\nend = get_last_day(add_months(datetime.date.today(), -1))\n\nfrappe.get_all('Sales Invoice', filters={'is_return': 1, 'posting_date': ['between', [start, end]]}, fields=['name', 'return_against'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have the 'update outstanding for self' option enabled?",
      "top fields": ["name", "update_outstanding_for_self", "posting_date", "customer", "grand_total", "is_pos"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_outstanding_for_self': 1}, fields=['name', 'update_outstanding_for_self'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices where the update outstanding flag is turned off.",
      "top fields": ["update_outstanding_for_self", "posting_date", "name", "company", "is_return", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'update_outstanding_for_self': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoice names with update outstanding set to true.",
      "top fields": ["name", "update_outstanding_for_self", "status", "company", "customer", "due_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_outstanding_for_self': 1}, fields=['name', 'update_outstanding_for_self'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices for 'Krypton LLC' that have update outstanding enabled.",
      "top fields": ["name", "customer", "update_outstanding_for_self", "grand_total", "due_date", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Krypton LLC', 'update_outstanding_for_self': 1}, fields=['name', 'customer', 'update_outstanding_for_self'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any invoices with update outstanding disabled created this month?",
      "top fields": ["posting_date", "update_outstanding_for_self", "name", "company", "customer", "is_return"]
    },
    "output": "from frappe.utils import get_first_day, get_last_day\nimport datetime\n\nstart = get_first_day(datetime.date.today())\nend = get_last_day(datetime.date.today())\n\nfrappe.db.exists('Sales Invoice', {'update_outstanding_for_self': 0, 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get recent POS invoices where update outstanding is active.",
      "top fields": ["name", "is_pos", "update_outstanding_for_self", "posting_date", "grand_total", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'update_outstanding_for_self': 1}, fields=['name', 'is_pos', 'update_outstanding_for_self'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which sales partnerâ€™s invoices have update outstanding for self set?",
      "top fields": ["name", "sales_partner", "update_outstanding_for_self", "grand_total", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_outstanding_for_self': 1}, fields=['name', 'sales_partner', 'update_outstanding_for_self'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with high grand total and update outstanding enabled.",
      "top fields": ["name", "grand_total", "update_outstanding_for_self", "posting_date", "customer", "currency"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'grand_total': ['>', 5000], 'update_outstanding_for_self': 1}, fields=['name', 'grand_total', 'update_outstanding_for_self'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where both update stock and update outstanding are enabled.",
      "top fields": ["name", "update_stock", "update_outstanding_for_self", "posting_date", "company", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_stock': 1, 'update_outstanding_for_self': 1}, fields=['name', 'update_stock', 'update_outstanding_for_self'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices in June 2025 had update outstanding for self turned on?",
      "top fields": ["posting_date", "update_outstanding_for_self", "name", "customer", "company", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'update_outstanding_for_self': 1, 'posting_date': ['between', [datetime.date(2025, 6, 1), datetime.date(2025, 6, 30)]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have updated the billed amount in the linked Sales Order?",
      "top fields": ["name", "update_billed_amount_in_sales_order", "sales_order", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_sales_order': 1}, fields=['name', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have not updated the billed amount in Sales Orders?",
      "top fields": ["update_billed_amount_in_sales_order", "sales_order", "posting_date", "customer", "is_return", "status"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'update_billed_amount_in_sales_order': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices from 'Acme Inc.' that updated billed amount in the Sales Order.",
      "top fields": ["name", "customer", "update_billed_amount_in_sales_order", "grand_total", "posting_date", "sales_order"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Acme Inc.', 'update_billed_amount_in_sales_order': 1}, fields=['name', 'customer', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the invoices created this month that didn't affect the billed amount in Sales Orders.",
      "top fields": ["name", "posting_date", "update_billed_amount_in_sales_order", "customer", "status", "company"]
    },
    "output": "from frappe.utils import get_first_day, get_last_day\nimport datetime\nstart = get_first_day(datetime.date.today())\nend = get_last_day(datetime.date.today())\nfrappe.get_all('Sales Invoice', filters={'update_billed_amount_in_sales_order': 0, 'posting_date': ['between', [start, end]]}, fields=['name', 'posting_date', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there POS invoices that also update billed amount in Sales Orders?",
      "top fields": ["name", "is_pos", "update_billed_amount_in_sales_order", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'update_billed_amount_in_sales_order': 1}, fields=['name', 'is_pos', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all returned invoices that update billed amount in Sales Orders.",
      "top fields": ["name", "is_return", "update_billed_amount_in_sales_order", "customer", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'update_billed_amount_in_sales_order': 1}, fields=['name', 'is_return', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me the invoices that updated Sales Order billing in June 2025.",
      "top fields": ["name", "update_billed_amount_in_sales_order", "posting_date", "sales_order", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_sales_order': 1, 'posting_date': ['between', [datetime.date(2025, 6, 1), datetime.date(2025, 6, 30)]]}, fields=['name', 'update_billed_amount_in_sales_order', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices for 'Gadget Co.' that did not update billed amount in SO.",
      "top fields": ["name", "customer", "update_billed_amount_in_sales_order", "posting_date", "sales_order", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Gadget Co.', 'update_billed_amount_in_sales_order': 0}, fields=['name', 'customer', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices with total above 10,000 updated Sales Order billing?",
      "top fields": ["name", "grand_total", "update_billed_amount_in_sales_order", "posting_date", "customer", "sales_order"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'grand_total': ['>', 10000], 'update_billed_amount_in_sales_order': 1}, fields=['name', 'grand_total', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do we have invoices with both stock update and billed amount update in SO?",
      "top fields": ["name", "update_stock", "update_billed_amount_in_sales_order", "posting_date", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_stock': 1, 'update_billed_amount_in_sales_order': 1}, fields=['name', 'update_stock', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have updated the billed amount in the linked Delivery Note?",
      "top fields": ["name", "update_billed_amount_in_delivery_note", "posting_date", "customer", "company", "is_pos"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_delivery_note': 1}, fields=['name', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count the invoices that did not update billed amount in Delivery Notes.",
      "top fields": ["update_billed_amount_in_delivery_note", "company", "posting_date", "naming_series", "is_return", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'update_billed_amount_in_delivery_note': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices from 'SpeedyMart' that updated billed amount in Delivery Notes.",
      "top fields": ["name", "customer", "update_billed_amount_in_delivery_note", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'SpeedyMart', 'update_billed_amount_in_delivery_note': 1}, fields=['name', 'customer', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get non-updated Delivery Note invoices created last month.",
      "top fields": ["name", "posting_date", "update_billed_amount_in_delivery_note", "customer", "company", "currency"]
    },
    "output": "from frappe.utils import add_months, get_first_day, get_last_day\nimport datetime\nstart = get_first_day(add_months(datetime.date.today(), -1))\nend = get_last_day(add_months(datetime.date.today(), -1))\nfrappe.get_all('Sales Invoice', filters={'update_billed_amount_in_delivery_note': 0, 'posting_date': ['between', [start, end]]}, fields=['name', 'posting_date', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do any POS invoices also update the Delivery Note billing?",
      "top fields": ["name", "is_pos", "update_billed_amount_in_delivery_note", "posting_date", "status", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'update_billed_amount_in_delivery_note': 1}, fields=['name', 'is_pos', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with both stock and delivery note billing updates.",
      "top fields": ["name", "update_stock", "update_billed_amount_in_delivery_note", "posting_date", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_stock': 1, 'update_billed_amount_in_delivery_note': 1}, fields=['name', 'update_stock', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices with return status updated Delivery Note billing?",
      "top fields": ["name", "is_return", "update_billed_amount_in_delivery_note", "posting_date", "status", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'update_billed_amount_in_delivery_note': 1}, fields=['name', 'is_return', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where billed amount wasn't updated in DN but grand total exceeded 5000.",
      "top fields": ["name", "update_billed_amount_in_delivery_note", "grand_total", "posting_date", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_delivery_note': 0, 'grand_total': ['>', 5000]}, fields=['name', 'update_billed_amount_in_delivery_note', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoices for 'TechNova' with DN billing updated in June 2025.",
      "top fields": ["name", "customer", "update_billed_amount_in_delivery_note", "posting_date", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'TechNova', 'update_billed_amount_in_delivery_note': 1, 'posting_date': ['between', [datetime.date(2025, 6, 1), datetime.date(2025, 6, 30)]]}, fields=['name', 'customer', 'update_billed_amount_in_delivery_note', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if there's any Delivery Note billing update in today's invoices.",
      "top fields": ["update_billed_amount_in_delivery_note", "posting_date", "name", "customer", "is_pos", "status"]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'update_billed_amount_in_delivery_note': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices updated the billed amount in their sales orders?",
      "top fields": ["name", "update_billed_amount_in_sales_order", "customer", "posting_date", "items", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_sales_order': 1}, fields=['name', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me invoices that didnâ€™t update billed amount in sales orders.",
      "top fields": ["name", "update_billed_amount_in_sales_order", "posting_date", "status", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_sales_order': 0}, fields=['name', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have their sales order billing status updated?",
      "top fields": ["update_billed_amount_in_sales_order", "name", "status", "posting_date", "customer", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'update_billed_amount_in_sales_order': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List customer names for invoices where sales order billing was updated.",
      "top fields": ["customer", "update_billed_amount_in_sales_order", "name", "posting_date", "territory", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_sales_order': 1}, fields=['customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices from 'Sun Traders' have billing updates in their sales orders?",
      "top fields": ["name", "customer", "update_billed_amount_in_sales_order", "posting_date", "company", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Sun Traders', 'update_billed_amount_in_sales_order': 1}, fields=['name', 'customer', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch POS invoices that also update the billed amount in the sales order.",
      "top fields": ["name", "is_pos", "update_billed_amount_in_sales_order", "grand_total", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'update_billed_amount_in_sales_order': 1}, fields=['name', 'is_pos', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Did any invoices created this month update the billed amount in sales orders?",
      "top fields": ["name", "posting_date", "update_billed_amount_in_sales_order", "customer", "due_date", "company"]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nend = datetime.date.today()\nfrappe.get_all('Sales Invoice', filters={'update_billed_amount_in_sales_order': 1, 'posting_date': ['between', [start, end]]}, fields=['name', 'posting_date', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where billed amounts werenâ€™t synced back to sales orders.",
      "top fields": ["name", "update_billed_amount_in_sales_order", "posting_date", "status", "grand_total", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_sales_order': 0}, fields=['name', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices that both return items and update sales order billing.",
      "top fields": ["name", "is_return", "update_billed_amount_in_sales_order", "return_against", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'update_billed_amount_in_sales_order': 1}, fields=['name', 'is_return', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show the posting dates of invoices that have updated their sales order billing.",
      "top fields": ["name", "posting_date", "update_billed_amount_in_sales_order", "customer", "company", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_sales_order': 1}, fields=['name', 'posting_date', 'update_billed_amount_in_sales_order'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices updated the billed amount in their delivery notes?",
      "top fields": ["update_billed_amount_in_delivery_note", "name", "posting_date", "customer", "is_return", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_delivery_note': 1}, fields=['name', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices that did not sync billed amounts back to delivery notes.",
      "top fields": ["update_billed_amount_in_delivery_note", "name", "customer", "posting_date", "grand_total", "is_pos"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_delivery_note': 0}, fields=['name', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices with delivery note billing update enabled.",
      "top fields": ["update_billed_amount_in_delivery_note", "name", "posting_date", "status", "is_pos", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'update_billed_amount_in_delivery_note': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices where 'Gadget House' has updated billing in delivery notes.",
      "top fields": ["update_billed_amount_in_delivery_note", "customer", "name", "grand_total", "posting_date", "is_return"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Gadget House', 'update_billed_amount_in_delivery_note': 1}, fields=['name', 'customer', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List the posting dates of invoices with delivery note billing updates.",
      "top fields": ["update_billed_amount_in_delivery_note", "posting_date", "name", "company", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_delivery_note': 1}, fields=['name', 'posting_date', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Did any POS invoices update their delivery note billing?",
      "top fields": ["update_billed_amount_in_delivery_note", "is_pos", "name", "posting_date", "customer", "is_return"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'update_billed_amount_in_delivery_note': 1}, fields=['name', 'is_pos', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with both delivery note billing updates and returns.",
      "top fields": ["update_billed_amount_in_delivery_note", "is_return", "name", "grand_total", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'update_billed_amount_in_delivery_note': 1}, fields=['name', 'is_return', 'update_billed_amount_in_delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many non-return invoices update delivery note billing?",
      "top fields": ["update_billed_amount_in_delivery_note", "is_return", "posting_date", "name", "customer", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 0, 'update_billed_amount_in_delivery_note': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices with delivery billing update and amount over 5000.",
      "top fields": ["update_billed_amount_in_delivery_note", "grand_total", "name", "posting_date", "customer", "is_pos"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_billed_amount_in_delivery_note': 1, 'grand_total': ['>', 5000]}, fields=['name', 'update_billed_amount_in_delivery_note', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers updated billing info in delivery notes this week?",
      "top fields": ["update_billed_amount_in_delivery_note", "customer", "posting_date", "name", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\nfrappe.get_all('Sales Invoice', filters={'update_billed_amount_in_delivery_note': 1, 'posting_date': ['between', [start, end]]}, fields=['customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices are marked as debit notes?",
      "top fields": ["is_debit_note", "name", "customer", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_debit_note': 1}, fields=['name', 'is_debit_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many debit notes were issued to customers?",
      "top fields": ["is_debit_note", "customer", "posting_date", "grand_total", "status", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_debit_note': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all debit notes created last month.",
      "top fields": ["is_debit_note", "posting_date", "name", "customer", "grand_total", "company"]
    },
    "output": "from frappe.utils import add_months, get_first_day, get_last_day\nimport datetime\nstart_date = get_first_day(add_months(datetime.date.today(), -1))\nend_date = get_last_day(add_months(datetime.date.today(), -1))\nfrappe.get_all('Sales Invoice', filters={'is_debit_note': 1, 'posting_date': ['between', [start_date, end_date]]}, fields=['name', 'posting_date', 'is_debit_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find debit notes issued by the company 'RetailX Corp'.",
      "top fields": ["is_debit_note", "company", "name", "posting_date", "grand_total", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_debit_note': 1, 'company': 'RetailX Corp'}, fields=['name', 'company', 'is_debit_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any debit notes with a grand total exceeding 10,000?",
      "top fields": ["is_debit_note", "grand_total", "name", "posting_date", "status", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_debit_note': 1, 'grand_total': ['>', 10000]}, fields=['name', 'grand_total', 'is_debit_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received debit notes this week?",
      "top fields": ["is_debit_note", "customer", "posting_date", "name", "company", "status"]
    },
    "output": "import datetime\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\nfrappe.get_all('Sales Invoice', filters={'is_debit_note': 1, 'posting_date': ['between', [start, end]]}, fields=['customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me debit notes that are still unpaid.",
      "top fields": ["is_debit_note", "status", "name", "posting_date", "outstanding_amount", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_debit_note': 1, 'status': 'Unpaid'}, fields=['name', 'status', 'is_debit_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List debit notes for 'Acme Ltd' with posting date after June 1, 2025.",
      "top fields": ["is_debit_note", "customer", "posting_date", "name", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_debit_note': 1, 'customer': 'Acme Ltd', 'posting_date': ['>', datetime.date(2025, 6, 1)]}, fields=['name', 'customer', 'posting_date', 'is_debit_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which debit notes were created today?",
      "top fields": ["is_debit_note", "posting_date", "name", "customer", "status", "company"]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'is_debit_note': 1, 'posting_date': datetime.date.today()}, fields=['name', 'posting_date', 'is_debit_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find debit notes that are returns as well.",
      "top fields": ["is_debit_note", "is_return", "name", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_debit_note': 1, 'is_return': 1}, fields=['name', 'is_debit_note', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were amended from a previous one?",
      "top fields": ["name", "amended_from", "posting_date", "customer", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'amended_from': ['!=', '']}, fields=['name', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that are modifications of others.",
      "top fields": ["name", "amended_from", "is_return", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'amended_from': ['!=', '']}, fields=['name', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices that have been amended more than once.",
      "top fields": ["amended_from", "name", "posting_date", "company", "status", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'amended_from': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give all invoices that were amended from invoice SI-0001.",
      "top fields": ["name", "amended_from", "posting_date", "status", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'amended_from': 'SI-0001'}, fields=['name', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all revised invoices for 'Retail Corp'.",
      "top fields": ["name", "customer", "amended_from", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Retail Corp', 'amended_from': ['!=', '']}, fields=['name', 'customer', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices amended today?",
      "top fields": ["amended_from", "posting_date", "name", "status", "customer", "company"]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'posting_date': datetime.date.today(), 'amended_from': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show amended invoices that are also debit notes.",
      "top fields": ["name", "is_debit_note", "amended_from", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_debit_note': 1, 'amended_from': ['!=', '']}, fields=['name', 'is_debit_note', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have not been amended?",
      "top fields": ["name", "amended_from", "posting_date", "customer", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'amended_from': ['=', '']}, fields=['name', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices amended from another invoice this week.",
      "top fields": ["name", "amended_from", "posting_date", "company", "status", "customer"]
    },
    "output": "import datetime\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\nfrappe.get_all('Sales Invoice', filters={'amended_from': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['name', 'amended_from', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many amended invoices were created for company 'Tradelink Ltd'?",
      "top fields": ["amended_from", "company", "posting_date", "name", "status", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'amended_from': ['!=', ''], 'company': 'Tradelink Ltd'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices linked to the cost center 'Main - Gulf'.",
      "top fields": ["name", "cost_center", "posting_date", "customer", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'cost_center': 'Main - Gulf'}, fields=['name', 'cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices are assigned to the cost center 'Retail - Gulf'?",
      "top fields": ["cost_center", "name", "company", "posting_date", "project", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'cost_center': 'Retail - Gulf'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices that have no cost center assigned.",
      "top fields": ["name", "cost_center", "company", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'cost_center': ''}, fields=['name', 'cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices under cost center 'Sales - Gulf' with total above 10000.",
      "top fields": ["name", "cost_center", "grand_total", "customer", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'cost_center': 'Sales - Gulf', 'grand_total': ['>', 10000]}, fields=['name', 'cost_center', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices that were recorded under 'Warehouse - East'.",
      "top fields": ["name", "cost_center", "is_pos", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'cost_center': 'Warehouse - East', 'is_pos': 1}, fields=['name', 'cost_center', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get a list of cost centers used in sales invoices.",
      "top fields": ["cost_center", "company", "name", "posting_date", "project", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['cost_center'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices from 'Gulf Corp' used the cost center 'Admin - Gulf'?",
      "top fields": ["name", "cost_center", "customer", "company", "grand_total", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'cost_center': 'Admin - Gulf', 'customer': 'Gulf Corp'}, fields=['name', 'cost_center', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve invoices with cost center containing 'East'.",
      "top fields": ["name", "cost_center", "company", "project", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'cost_center': ['like', '%East%']}, fields=['name', 'cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show the number of return invoices from cost center 'Returns - Central'.",
      "top fields": ["cost_center", "is_return", "name", "posting_date", "customer", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'cost_center': 'Returns - Central', 'is_return': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoices from 'Marketing - West' created after June 1st, 2025.",
      "top fields": ["name", "cost_center", "posting_date", "company", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'cost_center': 'Marketing - West', 'posting_date': ['>', datetime.date(2025, 6, 1)]}, fields=['name', 'cost_center', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices associated with project code 'PRJ-2025-001'.",
      "top fields": ["name", "project", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'project': 'PRJ-2025-001'}, fields=['name', 'project'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices are linked to the project 'Alpha Expansion'?",
      "top fields": ["project", "name", "posting_date", "grand_total", "company", "status"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'project': 'Alpha Expansion'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices that are not linked to any project.",
      "top fields": ["name", "project", "status", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'project': ''}, fields=['name', 'project'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices for 'Apollo Infra' project posted after 2025-05-01.",
      "top fields": ["name", "project", "posting_date", "status", "grand_total", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'project': 'Apollo Infra', 'posting_date': ['>', datetime.date(2025, 5, 1)]}, fields=['name', 'project', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices linked to project 'Green Energy'?",
      "top fields": ["customer", "project", "name", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'project': 'Green Energy'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices under the project 'Legacy Tower'.",
      "top fields": ["name", "project", "is_return", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'project': 'Legacy Tower', 'is_return': 1}, fields=['name', 'project', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get POS invoices linked to project 'Retail 360'.",
      "top fields": ["name", "project", "is_pos", "grand_total", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'project': 'Retail 360', 'is_pos': 1}, fields=['name', 'project', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices for the 'Urban Smart Homes' project with total exceeding 50000.",
      "top fields": ["name", "project", "grand_total", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'project': 'Urban Smart Homes', 'grand_total': ['>', 50000]}, fields=['name', 'project', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which projects were billed in June 2025?",
      "top fields": ["project", "posting_date", "name", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'posting_date': ['between', [datetime.date(2025, 6, 1), datetime.date(2025, 6, 30)] ]}, fields=['project'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any invoices for project 'Skyline Mega Mall' billed today?",
      "top fields": ["project", "posting_date", "name", "status", "grand_total", "company"]
    },
    "output": "frappe.db.exists('Sales Invoice', {'project': 'Skyline Mega Mall', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where currency and price list settings were changed manually.",
      "top fields": ["currency_and_price_list", "name", "currency", "selling_price_list", "price_list_currency", "plc_conversion_rate"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'currency_and_price_list': 1}, fields=['name', 'currency_and_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that have custom currency and price list configurations.",
      "top fields": ["name", "currency_and_price_list", "posting_date", "currency", "selling_price_list", "price_list_currency"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'currency_and_price_list': 1}, fields=['name', 'currency_and_price_list', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices did not use the default price list setting?",
      "top fields": ["currency_and_price_list", "selling_price_list", "price_list_currency", "plc_conversion_rate", "currency", "name"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'currency_and_price_list': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get a list of invoices where price list selection was overridden.",
      "top fields": ["name", "currency_and_price_list", "selling_price_list", "price_list_currency", "currency", "plc_conversion_rate"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'currency_and_price_list': 1}, fields=['name', 'currency_and_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices with modified price list settings?",
      "top fields": ["customer", "currency_and_price_list", "customer_group", "currency", "selling_price_list", "territory"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'currency_and_price_list': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all POS invoices that used a non-standard currency and price list setup.",
      "top fields": ["name", "currency_and_price_list", "is_pos", "currency", "selling_price_list", "price_list_currency"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'currency_and_price_list': 1, 'is_pos': 1}, fields=['name', 'currency_and_price_list', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices with custom currency and price list settings.",
      "top fields": ["name", "currency_and_price_list", "is_return", "return_against", "currency", "price_list_currency"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'currency_and_price_list': 1, 'is_return': 1}, fields=['name', 'currency_and_price_list', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with updated currency and price list made this month.",
      "top fields": ["name", "posting_date", "currency_and_price_list", "currency", "selling_price_list", "price_list_currency"]
    },
    "output": "import datetime\n\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'currency_and_price_list': 1, 'posting_date': ['>=', start]}, fields=['name', 'currency_and_price_list', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any invoices with overridden currency settings created today?",
      "top fields": ["currency_and_price_list", "posting_date", "currency", "selling_price_list", "price_list_currency", "plc_conversion_rate"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'currency_and_price_list': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices this year have changed currency and price list?",
      "top fields": ["currency_and_price_list", "posting_date", "currency", "selling_price_list", "price_list_currency", "conversion_rate"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\nfrappe.db.count('Sales Invoice', filters={'currency_and_price_list': 1, 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices where the currency conversion rate is greater than 1.5.",
      "top fields": ["name", "conversion_rate", "currency", "plc_conversion_rate", "price_list_currency", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'conversion_rate': ['>', 1.5]}, fields=['name', 'conversion_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have a conversion rate less than the base rate of 1?",
      "top fields": ["name", "conversion_rate", "currency", "price_list_currency", "plc_conversion_rate", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'conversion_rate': ['<', 1]}, fields=['name', 'conversion_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were posted with a currency conversion rate exactly equal to 1?",
      "top fields": ["conversion_rate", "posting_date", "currency", "price_list_currency", "plc_conversion_rate", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'conversion_rate': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices with conversion rates modified manually by users.",
      "top fields": ["name", "conversion_rate", "currency_and_price_list", "price_list_currency", "posting_date", "is_pos"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'currency_and_price_list': 1, 'conversion_rate': ['!=', 1]}, fields=['name', 'conversion_rate', 'currency_and_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with conversion rates higher than 2.0.",
      "top fields": ["name", "conversion_rate", "is_return", "currency", "price_list_currency", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'conversion_rate': ['>', 2.0], 'is_return': 1}, fields=['name', 'conversion_rate', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there invoices created today with a different conversion rate than the default?",
      "top fields": ["conversion_rate", "posting_date", "currency", "price_list_currency", "plc_conversion_rate", "customer"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'conversion_rate': ['!=', 1], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices with conversion rate below 0.9.",
      "top fields": ["name", "is_pos", "conversion_rate", "posting_date", "currency", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'conversion_rate': ['<', 0.9]}, fields=['name', 'is_pos', 'conversion_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices in April 2025 with conversion rates above 1.2.",
      "top fields": ["name", "conversion_rate", "posting_date", "currency", "price_list_currency", "company"]
    },
    "output": "import datetime\n\nstart = datetime.date(2025, 4, 1)\nend = datetime.date(2025, 4, 30)\nfrappe.get_all('Sales Invoice', filters={'conversion_rate': ['>', 1.2], 'posting_date': ['between', [start, end]]}, fields=['name', 'conversion_rate', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many customer invoices were billed with a conversion rate above 1?",
      "top fields": ["customer", "conversion_rate", "posting_date", "price_list_currency", "currency", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'conversion_rate': ['>', 1]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me invoices from 'Acme Corp' where conversion rate was not 1.",
      "top fields": ["name", "conversion_rate", "customer", "posting_date", "currency", "plc_conversion_rate"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Acme Corp', 'conversion_rate': ['!=', 1]}, fields=['name', 'conversion_rate', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the selling price list used was 'Standard Selling'.",
      "top fields": ["name", "selling_price_list", "posting_date", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'selling_price_list': 'Standard Selling'}, fields=['name', 'selling_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were made using the 'Retail Selling' price list?",
      "top fields": ["selling_price_list", "name", "posting_date", "customer", "grand_total", "status"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'selling_price_list': 'Retail Selling'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices that used 'POS Price List'.",
      "top fields": ["name", "is_pos", "selling_price_list", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'selling_price_list': 'POS Price List'}, fields=['name', 'is_pos', 'selling_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices from 'Tech Supplies' where 'Premium Pricing' was applied.",
      "top fields": ["name", "customer", "selling_price_list", "grand_total", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Tech Supplies', 'selling_price_list': 'Premium Pricing'}, fields=['name', 'customer', 'selling_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all return invoices that used the 'Wholesale Selling' price list.",
      "top fields": ["name", "is_return", "selling_price_list", "grand_total", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'selling_price_list': 'Wholesale Selling'}, fields=['name', 'is_return', 'selling_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices created today using 'Special Rates' price list?",
      "top fields": ["selling_price_list", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'selling_price_list': 'Special Rates', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me invoices using any price list other than 'Standard Selling'.",
      "top fields": ["name", "selling_price_list", "customer", "grand_total", "status", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'selling_price_list': ['!=', 'Standard Selling']}, fields=['name', 'selling_price_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices this quarter with the price list set as 'Seasonal Offer'.",
      "top fields": ["name", "selling_price_list", "posting_date", "customer", "grand_total", "status"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\nfrappe.get_all('Sales Invoice', filters={'selling_price_list': 'Seasonal Offer', 'posting_date': ['>=', start]}, fields=['name', 'selling_price_list', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List distinct price lists used by 'Global Traders' in their invoices.",
      "top fields": ["customer", "selling_price_list", "name", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Global Traders'}, fields=['selling_price_list'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with 'Holiday Deal' selling price list?",
      "top fields": ["customer", "selling_price_list", "name", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'selling_price_list': 'Holiday Deal'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the price list currency is USD.",
      "top fields": ["name", "price_list_currency", "customer", "posting_date", "grand_total", "currency"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'price_list_currency': 'USD'}, fields=['name', 'price_list_currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have price list currency as EUR?",
      "top fields": ["price_list_currency", "name", "currency", "grand_total", "customer", "status"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'price_list_currency': 'EUR'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices where the price list currency was INR.",
      "top fields": ["name", "is_return", "price_list_currency", "posting_date", "grand_total", "currency"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'price_list_currency': 'INR'}, fields=['name', 'is_return', 'price_list_currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices from 'Acme Corp' where the price list currency is GBP.",
      "top fields": ["name", "customer", "price_list_currency", "currency", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Acme Corp', 'price_list_currency': 'GBP'}, fields=['name', 'customer', 'price_list_currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices using AED as the price list currency.",
      "top fields": ["name", "is_pos", "price_list_currency", "currency", "grand_total", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'price_list_currency': 'AED'}, fields=['name', 'is_pos', 'price_list_currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices posted today in CAD as price list currency?",
      "top fields": ["price_list_currency", "posting_date", "name", "currency", "grand_total", "customer"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'price_list_currency': 'CAD', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with price list currency other than USD.",
      "top fields": ["name", "price_list_currency", "customer", "currency", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'price_list_currency': ['!=', 'USD']}, fields=['name', 'price_list_currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me invoices this year with price list currency as QAR.",
      "top fields": ["name", "price_list_currency", "posting_date", "grand_total", "currency", "customer"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\nfrappe.get_all('Sales Invoice', filters={'price_list_currency': 'QAR', 'posting_date': ['between', [start, end]]}, fields=['name', 'price_list_currency', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices in SGD as the price list currency?",
      "top fields": ["customer", "price_list_currency", "currency", "posting_date", "name", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'price_list_currency': 'SGD'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with 'Holiday Promo' price list and currency set to JPY.",
      "top fields": ["name", "selling_price_list", "price_list_currency", "posting_date", "currency", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'selling_price_list': 'Holiday Promo', 'price_list_currency': 'JPY'}, fields=['name', 'selling_price_list', 'price_list_currency'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where the price list currency conversion rate is greater than 1.5.",
      "top fields": ["name", "plc_conversion_rate", "posting_date", "currency", "selling_price_list", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'plc_conversion_rate': ['>', 1.5]}, fields=['name', 'plc_conversion_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have a plc conversion rate less than 1?",
      "top fields": ["plc_conversion_rate", "posting_date", "currency", "selling_price_list", "company", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'plc_conversion_rate': ['<', 1]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices with plc conversion rate over 2.0.",
      "top fields": ["name", "is_return", "plc_conversion_rate", "posting_date", "currency", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'plc_conversion_rate': ['>', 2.0]}, fields=['name', 'is_return', 'plc_conversion_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices where the plc conversion rate is exactly 1.0.",
      "top fields": ["name", "is_pos", "plc_conversion_rate", "posting_date", "company", "selling_price_list"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'plc_conversion_rate': 1.0}, fields=['name', 'is_pos', 'plc_conversion_rate'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices created today with plc conversion rate between 1 and 2.",
      "top fields": ["name", "plc_conversion_rate", "posting_date", "currency", "customer", "company"]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'plc_conversion_rate': ['between', [1, 2]]}, fields=['name', 'plc_conversion_rate', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with a conversion rate under 0.9?",
      "top fields": ["customer", "plc_conversion_rate", "name", "posting_date", "currency", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'plc_conversion_rate': ['<', 0.9]}, fields=['customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show distinct conversion rates used in return invoices.",
      "top fields": ["is_return", "plc_conversion_rate", "name", "posting_date", "currency", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1}, fields=['plc_conversion_rate'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices this month where plc conversion rate is not 1.",
      "top fields": ["name", "plc_conversion_rate", "posting_date", "currency", "customer", "company"]
    },
    "output": "import datetime\n\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'plc_conversion_rate': ['!=', 1]}, fields=['name', 'plc_conversion_rate', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if there are any invoices with plc conversion rate above 3 today.",
      "top fields": ["plc_conversion_rate", "posting_date", "name", "currency", "company", "customer"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'posting_date': datetime.date.today(), 'plc_conversion_rate': ['>', 3]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices this year had a plc conversion rate below 0.5?",
      "top fields": ["plc_conversion_rate", "posting_date", "name", "currency", "company", "customer"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\nfrappe.db.count('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'plc_conversion_rate': ['<', 0.5]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where pricing rules were explicitly ignored.",
      "top fields": ["name", "ignore_pricing_rule", "customer", "posting_date", "is_pos", "selling_price_list"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'ignore_pricing_rule': 1}, fields=['name', 'ignore_pricing_rule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices do not follow any pricing rules?",
      "top fields": ["ignore_pricing_rule", "customer", "name", "posting_date", "selling_price_list", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'ignore_pricing_rule': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices that skipped pricing rules.",
      "top fields": ["name", "is_return", "ignore_pricing_rule", "posting_date", "customer", "selling_price_list"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'ignore_pricing_rule': 1}, fields=['name', 'is_return', 'ignore_pricing_rule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where pricing rules were ignored.",
      "top fields": ["name", "is_pos", "ignore_pricing_rule", "posting_date", "customer", "selling_price_list"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'ignore_pricing_rule': 1}, fields=['name', 'is_pos', 'ignore_pricing_rule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices created today that did not apply pricing rules.",
      "top fields": ["name", "ignore_pricing_rule", "posting_date", "customer", "is_pos", "grand_total"]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'ignore_pricing_rule': 1, 'posting_date': datetime.date.today()}, fields=['name', 'ignore_pricing_rule', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices that skipped pricing rules?",
      "top fields": ["customer", "ignore_pricing_rule", "name", "posting_date", "selling_price_list", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'ignore_pricing_rule': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices this quarter where pricing rules were not used.",
      "top fields": ["name", "ignore_pricing_rule", "posting_date", "customer", "selling_price_list", "grand_total"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\nfrappe.get_all('Sales Invoice', filters={'ignore_pricing_rule': 1, 'posting_date': ['>=', start]}, fields=['name', 'ignore_pricing_rule', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices where pricing rules were applied.",
      "top fields": ["name", "ignore_pricing_rule", "customer", "posting_date", "selling_price_list", "is_pos"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'ignore_pricing_rule': 0}, fields=['name', 'ignore_pricing_rule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoices today ignored pricing rules.",
      "top fields": ["ignore_pricing_rule", "posting_date", "name", "is_pos", "customer", "selling_price_list"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'ignore_pricing_rule': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices this year that were created without pricing rules.",
      "top fields": ["ignore_pricing_rule", "posting_date", "name", "customer", "is_return", "grand_total"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\nfrappe.db.count('Sales Invoice', filters={'ignore_pricing_rule': 1, 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where barcode scanning was enabled.",
      "top fields": ["name", "scan_barcode", "is_pos", "customer", "items", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'scan_barcode': 1}, fields=['name', 'scan_barcode'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices used barcode scanning?",
      "top fields": ["scan_barcode", "name", "posting_date", "customer", "is_pos", "items"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'scan_barcode': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices where barcode scanning was active.",
      "top fields": ["name", "is_return", "scan_barcode", "posting_date", "customer", "items"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'scan_barcode': 1}, fields=['name', 'is_return', 'scan_barcode'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which POS invoices had barcode scanning enabled?",
      "top fields": ["name", "is_pos", "scan_barcode", "customer", "items", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'scan_barcode': 1}, fields=['name', 'is_pos', 'scan_barcode'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show today's invoices that involved barcode scanning.",
      "top fields": ["name", "scan_barcode", "posting_date", "customer", "items", "is_pos"]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'scan_barcode': 1, 'posting_date': datetime.date.today()}, fields=['name', 'scan_barcode', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers used barcode scanning in their invoices?",
      "top fields": ["customer", "scan_barcode", "name", "posting_date", "items", "is_pos"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'scan_barcode': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give all invoices from this quarter with barcode scanning turned on.",
      "top fields": ["name", "scan_barcode", "posting_date", "customer", "is_pos", "items"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\nfrappe.get_all('Sales Invoice', filters={'scan_barcode': 1, 'posting_date': ['>=', start]}, fields=['name', 'scan_barcode', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where barcode scanning was not used.",
      "top fields": ["name", "scan_barcode", "customer", "posting_date", "items", "is_pos"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'scan_barcode': 0}, fields=['name', 'scan_barcode'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices created today that used barcode scanning?",
      "top fields": ["scan_barcode", "posting_date", "name", "customer", "is_pos", "items"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'scan_barcode': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices this year had barcode scanning enabled?",
      "top fields": ["scan_barcode", "posting_date", "name", "customer", "items", "is_return"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\nfrappe.db.count('Sales Invoice', filters={'scan_barcode': 1, 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where stock was updated.",
      "top fields": ["update_stock", "name", "posting_date", "is_pos", "customer", "is_return"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_stock': 1}, fields=['name', 'update_stock'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices involved stock updates?",
      "top fields": ["update_stock", "name", "posting_date", "is_pos", "customer", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'update_stock': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices that updated stock.",
      "top fields": ["name", "is_return", "update_stock", "posting_date", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'update_stock': 1}, fields=['name', 'is_return', 'update_stock'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where stock was also updated.",
      "top fields": ["name", "is_pos", "update_stock", "customer", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'update_stock': 1}, fields=['name', 'is_pos', 'update_stock'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices from this week that included stock updates.",
      "top fields": ["name", "update_stock", "posting_date", "is_pos", "customer", "company"]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\nfrappe.get_all('Sales Invoice', filters={'update_stock': 1, 'posting_date': ['between', [start, end]]}, fields=['name', 'update_stock', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices that updated stock?",
      "top fields": ["customer", "update_stock", "name", "posting_date", "company", "territory"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_stock': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoices from 'SuperMart' that updated stock.",
      "top fields": ["name", "customer", "update_stock", "posting_date", "is_pos", "is_return"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'SuperMart', 'update_stock': 1}, fields=['name', 'customer', 'update_stock'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with no stock update applied.",
      "top fields": ["name", "update_stock", "posting_date", "customer", "is_return", "is_pos"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'update_stock': 0}, fields=['name', 'update_stock'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Did any invoices update stock today?",
      "top fields": ["update_stock", "posting_date", "name", "is_pos", "customer", "company"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'update_stock': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices this year triggered stock updates?",
      "top fields": ["update_stock", "posting_date", "name", "customer", "is_return", "company"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\nfrappe.db.count('Sales Invoice', filters={'update_stock': 1, 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that used 'Main Warehouse' as the default warehouse.",
      "top fields": ["name", "set_warehouse", "posting_date", "customer", "is_pos", "items"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'set_warehouse': 'Main Warehouse'}, fields=['name', 'set_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were assigned to 'Retail Warehouse'?",
      "top fields": ["set_warehouse", "posting_date", "customer", "name", "is_pos", "items"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'set_warehouse': 'Retail Warehouse'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which POS invoices were fulfilled from 'Outlet Warehouse'?",
      "top fields": ["name", "is_pos", "set_warehouse", "posting_date", "items", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'set_warehouse': 'Outlet Warehouse'}, fields=['name', 'is_pos', 'set_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices from customer 'SuperMart' using 'Store Warehouse'.",
      "top fields": ["name", "customer", "set_warehouse", "grand_total", "posting_date", "is_pos"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'SuperMart', 'set_warehouse': 'Store Warehouse'}, fields=['name', 'customer', 'set_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices assigned to 'Returns Warehouse'.",
      "top fields": ["name", "is_return", "set_warehouse", "posting_date", "items", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'set_warehouse': 'Returns Warehouse'}, fields=['name', 'is_return', 'set_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Did any invoices use 'Warehouse A' today?",
      "top fields": ["set_warehouse", "posting_date", "name", "customer", "is_pos", "grand_total"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'set_warehouse': 'Warehouse A', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices from this quarter that used 'Seasonal Warehouse'.",
      "top fields": ["name", "set_warehouse", "posting_date", "customer", "is_pos", "grand_total"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\nfrappe.get_all('Sales Invoice', filters={'set_warehouse': 'Seasonal Warehouse', 'posting_date': ['>=', start]}, fields=['name', 'set_warehouse', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List distinct warehouses used in Sales Invoices.",
      "top fields": ["set_warehouse", "posting_date", "customer", "is_pos", "items", "name"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['set_warehouse'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all invoices that did not use the default warehouse.",
      "top fields": ["name", "set_warehouse", "posting_date", "is_pos", "customer", "items"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'set_warehouse': ['!=', 'Main Warehouse']}, fields=['name', 'set_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers used 'Express Warehouse' for fulfillment?",
      "top fields": ["customer", "set_warehouse", "name", "posting_date", "is_pos", "items"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'set_warehouse': 'Express Warehouse'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that had 'Target Warehouse 1' selected as their target warehouse.",
      "top fields": ["name", "set_target_warehouse", "posting_date", "customer", "company", "items"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'set_target_warehouse': 'Target Warehouse 1'}, fields=['name', 'set_target_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were assigned to 'Outlet Target Warehouse'?",
      "top fields": ["set_target_warehouse", "posting_date", "customer", "name", "company", "is_pos"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'set_target_warehouse': 'Outlet Target Warehouse'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which POS invoices used 'Retail Target Warehouse'?",
      "top fields": ["name", "is_pos", "set_target_warehouse", "customer", "posting_date", "items"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'set_target_warehouse': 'Retail Target Warehouse'}, fields=['name', 'is_pos', 'set_target_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices for customer 'ElectroMart' with 'Main Target Warehouse'.",
      "top fields": ["name", "customer", "set_target_warehouse", "posting_date", "company", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'ElectroMart', 'set_target_warehouse': 'Main Target Warehouse'}, fields=['name', 'customer', 'set_target_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices that used 'Returns Target Warehouse'.",
      "top fields": ["name", "is_return", "set_target_warehouse", "posting_date", "customer", "items"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'set_target_warehouse': 'Returns Target Warehouse'}, fields=['name', 'is_return', 'set_target_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices created today with 'Express Target Warehouse'?",
      "top fields": ["set_target_warehouse", "posting_date", "name", "is_pos", "company", "customer"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'set_target_warehouse': 'Express Target Warehouse', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices from this quarter with 'Seasonal Target Warehouse' assigned.",
      "top fields": ["name", "set_target_warehouse", "posting_date", "company", "currency", "items"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\nfrappe.get_all('Sales Invoice', filters={'set_target_warehouse': 'Seasonal Target Warehouse', 'posting_date': ['>=', start]}, fields=['name', 'set_target_warehouse', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List distinct target warehouses used in invoices.",
      "top fields": ["set_target_warehouse", "name", "posting_date", "company", "customer", "is_pos"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['set_target_warehouse'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices that did not use 'Central Target Warehouse'.",
      "top fields": ["name", "set_target_warehouse", "customer", "posting_date", "grand_total", "items"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'set_target_warehouse': ['!=', 'Central Target Warehouse']}, fields=['name', 'set_target_warehouse'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers used 'City Target Warehouse' in their invoices?",
      "top fields": ["customer", "set_target_warehouse", "posting_date", "name", "company", "territory"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'set_target_warehouse': 'City Target Warehouse'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices that include items in the invoice lines.",
      "top fields": ["items", "name", "customer", "posting_date", "is_pos", "total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'items': ['!=', '']}, fields=['name', 'items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where 'Laptop Pro 15' is one of the items.",
      "top fields": ["items", "item_code", "name", "customer", "posting_date", "net_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'items.item_code': 'Laptop Pro 15'}, fields=['name', 'items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices include the item 'USB Cable'?",
      "top fields": ["items", "item_code", "name", "is_pos", "posting_date", "net_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'items.item_code': 'USB Cable'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices where any of the items have quantity more than 10.",
      "top fields": ["items", "qty", "name", "posting_date", "net_total", "is_pos"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'items.qty': ['>', 10]}, fields=['name', 'items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that include both 'Mouse' and 'Keyboard' in the items.",
      "top fields": ["items", "item_code", "name", "posting_date", "net_total", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'items.item_code': ['in', ['Mouse', 'Keyboard']]}, fields=['name', 'items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices with at least one item quantity above 5.",
      "top fields": ["is_pos", "items", "qty", "name", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'items.qty': ['>', 5]}, fields=['name', 'is_pos', 'items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers bought the item 'HDMI Cable'?",
      "top fields": ["customer", "items", "item_code", "posting_date", "name", "net_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'items.item_code': 'HDMI Cable'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices that included 'SSD Drive' as an item.",
      "top fields": ["is_return", "items", "item_code", "name", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'items.item_code': 'SSD Drive'}, fields=['name', 'is_return', 'items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any invoices today that include 'Monitor 27 inch'?",
      "top fields": ["items", "item_code", "posting_date", "name", "net_total", "customer"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'items.item_code': 'Monitor 27 inch', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices this year included 'Bluetooth Speaker'?",
      "top fields": ["items", "item_code", "posting_date", "name", "net_total", "customer"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\nfrappe.db.count('Sales Invoice', filters={'items.item_code': 'Bluetooth Speaker', 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices where the total quantity exceeds 100.",
      "top fields": ["name", "total_qty", "customer", "posting_date", "grand_total", "items"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_qty': ['>', 100]}, fields=['name', 'total_qty'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had a total quantity of zero?",
      "top fields": ["total_qty", "posting_date", "name", "customer", "is_return", "status"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'total_qty': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices where the total quantity is more than 20.",
      "top fields": ["is_pos", "total_qty", "name", "posting_date", "customer", "net_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'total_qty': ['>', 20]}, fields=['name', 'is_pos', 'total_qty'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get return invoices with total quantity less than 10.",
      "top fields": ["is_return", "total_qty", "name", "posting_date", "customer", "items"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'total_qty': ['<', 10]}, fields=['name', 'is_return', 'total_qty'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices this month with total quantity above 50.",
      "top fields": ["total_qty", "posting_date", "name", "customer", "items", "grand_total"]
    },
    "output": "import datetime\n\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'total_qty': ['>', 50], 'posting_date': ['>=', start]}, fields=['name', 'total_qty', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices today with total quantity exactly 1?",
      "top fields": ["total_qty", "posting_date", "name", "customer", "status", "items"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'total_qty': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices where total quantity is not equal to 0.",
      "top fields": ["total_qty", "name", "posting_date", "customer", "items", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_qty': ['!=', 0]}, fields=['name', 'total_qty'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices with total quantity above 200?",
      "top fields": ["customer", "total_qty", "name", "posting_date", "items", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_qty': ['>', 200]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the average total quantity of all invoices created this year.",
      "top fields": ["total_qty", "posting_date", "name", "items", "customer", "grand_total"]
    },
    "output": "import datetime\n\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\ninvoices = frappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['total_qty'])\navg_qty = sum(flt(inv.total_qty) for inv in invoices) / len(invoices) if invoices else 0\nprint('Average Total Qty:', avg_qty)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices were made with zero total quantity?",
      "top fields": ["is_return", "total_qty", "name", "posting_date", "status", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'total_qty': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the total net weight exceeds 500 kg.",
      "top fields": ["name", "total_net_weight", "customer", "posting_date", "grand_total", "total_qty"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_net_weight': ['>', 500]}, fields=['name', 'total_net_weight'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have zero total net weight?",
      "top fields": ["total_net_weight", "name", "posting_date", "is_return", "status", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'total_net_weight': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with a total net weight below 100 kg.",
      "top fields": ["name", "total_net_weight", "is_pos", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'total_net_weight': ['<', 100]}, fields=['name', 'is_pos', 'total_net_weight'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where the total net weight is over 250 kg.",
      "top fields": ["name", "is_return", "total_net_weight", "customer", "grand_total", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'total_net_weight': ['>', 250]}, fields=['name', 'is_return', 'total_net_weight'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices this week with a total net weight over 1000 kg?",
      "top fields": ["name", "total_net_weight", "posting_date", "customer", "status", "grand_total"]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\nfrappe.get_all('Sales Invoice', filters={'total_net_weight': ['>', 1000], 'posting_date': ['between', [start, end]]}, fields=['name', 'total_net_weight', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if there are any invoices with net weight exactly 300 kg created today.",
      "top fields": ["total_net_weight", "posting_date", "name", "customer", "is_pos", "grand_total"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'total_net_weight': 300, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give a list of invoices with non-zero net weight.",
      "top fields": ["name", "total_net_weight", "customer", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_net_weight': ['!=', 0]}, fields=['name', 'total_net_weight'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with a total net weight greater than 800 kg?",
      "top fields": ["customer", "total_net_weight", "posting_date", "name", "grand_total", "territory"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_net_weight': ['>', 800]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the average total net weight of invoices from this year.",
      "top fields": ["total_net_weight", "posting_date", "name", "grand_total", "customer", "status"]
    },
    "output": "import datetime\n\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['total_net_weight'])\navg = sum(flt(d.total_net_weight) for d in data) / len(data) if data else 0\nprint('Average Total Net Weight:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices had no net weight?",
      "top fields": ["is_return", "total_net_weight", "name", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'total_net_weight': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the base net total is more than 12,000.",
      "top fields": ["name", "base_net_total", "posting_date", "customer", "grand_total", "currency"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_net_total': ['>', 12000]}, fields=['name', 'base_net_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have zero base net total?",
      "top fields": ["base_net_total", "status", "name", "posting_date", "is_return", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'base_net_total': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices with a base net total below 1,000.",
      "top fields": ["name", "is_return", "base_net_total", "posting_date", "grand_total", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'base_net_total': ['<', 1000]}, fields=['name', 'is_return', 'base_net_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices having base net total less than 500.",
      "top fields": ["name", "is_pos", "base_net_total", "grand_total", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'base_net_total': ['<', 500]}, fields=['name', 'is_pos', 'base_net_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with base net total over 25,000?",
      "top fields": ["customer", "base_net_total", "grand_total", "posting_date", "territory", "name"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_net_total': ['>', 25000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with base net total below 300 created today.",
      "top fields": ["base_net_total", "posting_date", "name", "is_pos", "status", "customer"]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'base_net_total': ['<', 300]}, fields=['base_net_total', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the base net total is not zero.",
      "top fields": ["name", "base_net_total", "posting_date", "grand_total", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_net_total': ['!=', 0]}, fields=['name', 'base_net_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What is the average base net total for invoices this quarter?",
      "top fields": ["base_net_total", "posting_date", "name", "grand_total", "company", "currency"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['base_net_total'])\navg = sum(d.base_net_total for d in data) / len(data) if data else 0\nprint('Average Base Net Total:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if 'Global Retail' has any invoice with base net total under 1000.",
      "top fields": ["base_net_total", "customer", "posting_date", "name", "territory", "grand_total"]
    },
    "output": "frappe.db.exists('Sales Invoice', {'customer': 'Global Retail', 'base_net_total': ['<', 1000]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices have base net total above 10,000?",
      "top fields": ["is_return", "base_net_total", "name", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'base_net_total': ['>', 10000]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with total amount greater than 10,000.",
      "top fields": ["name", "total", "customer", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total': ['>', 10000]}, fields=['name', 'total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have a total value of exactly 0?",
      "top fields": ["total", "name", "posting_date", "status", "is_return", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'total': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices where the total is below 500.",
      "top fields": ["name", "total", "is_pos", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'total': ['<', 500]}, fields=['name', 'total', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices totaling over 20,000?",
      "top fields": ["customer", "total", "posting_date", "name", "grand_total", "territory"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total': ['>', 20000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices with total value less than 2,000.",
      "top fields": ["name", "is_return", "total", "posting_date", "grand_total", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'total': ['<', 2000]}, fields=['name', 'is_return', 'total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with total value over 15,000 created today.",
      "top fields": ["name", "total", "posting_date", "customer", "is_pos", "grand_total"]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'total': ['>', 15000], 'posting_date': datetime.date.today()}, fields=['name', 'total', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices with non-zero total values.",
      "top fields": ["name", "total", "customer", "grand_total", "status", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total': ['!=', 0]}, fields=['name', 'total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Average total value of invoices created this quarter?",
      "top fields": ["total", "posting_date", "grand_total", "status", "name", "customer"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['total'])\navg = sum(d.total for d in data) / len(data) if data else 0\nprint('Average Total:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if 'TechCorp' has any invoice with total over 30,000.",
      "top fields": ["customer", "total", "name", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.db.exists('Sales Invoice', {'customer': 'TechCorp', 'total': ['>', 30000]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices this year had a total below 1,000?",
      "top fields": ["total", "posting_date", "status", "is_return", "grand_total", "name"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\nfrappe.db.count('Sales Invoice', filters={'total': ['<', 1000], 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the net total is more than 25,000.",
      "top fields": ["name", "net_total", "customer", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'net_total': ['>', 25000]}, fields=['name', 'net_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have a net total exactly equal to zero?",
      "top fields": ["net_total", "name", "posting_date", "is_return", "status", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'net_total': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices where the net total is less than 1,000.",
      "top fields": ["name", "net_total", "is_pos", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'net_total': ['<', 1000]}, fields=['name', 'net_total', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with a net total greater than 50,000?",
      "top fields": ["customer", "net_total", "posting_date", "name", "territory", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'net_total': ['>', 50000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices with a net total less than 5,000.",
      "top fields": ["name", "net_total", "is_return", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'net_total': ['<', 5000]}, fields=['name', 'is_return', 'net_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with net total over 10,000 created today?",
      "top fields": ["net_total", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'net_total': ['>', 10000], 'posting_date': datetime.date.today()}, fields=['name', 'net_total', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices where net total is not zero.",
      "top fields": ["name", "net_total", "status", "grand_total", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'net_total': ['!=', 0]}, fields=['name', 'net_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Average net total of invoices created this year?",
      "top fields": ["net_total", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\n\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date.today()\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['net_total'])\navg = sum(flt(d.net_total) for d in data) / len(data) if data else 0\nprint('Average Net Total:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice from 'Acme Corp' has net total above 40,000.",
      "top fields": ["customer", "net_total", "name", "posting_date", "territory", "status"]
    },
    "output": "frappe.db.exists('Sales Invoice', {'customer': 'Acme Corp', 'net_total': ['>', 40000]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count of invoices in Q2 where net total is below 3,000.",
      "top fields": ["net_total", "posting_date", "name", "status", "is_pos", "grand_total"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 4, 1)\nend = datetime.date(today.year, 6, 30)\nfrappe.db.count('Sales Invoice', filters={'net_total': ['<', 3000], 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with 'Export' as their tax category.",
      "top fields": ["name", "tax_category", "posting_date", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tax_category': 'Export'}, fields=['name', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices used the 'Domestic' tax category?",
      "top fields": ["tax_category", "posting_date", "name", "grand_total", "customer", "status"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'tax_category': 'Domestic'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with tax category not equal to 'Zero Rated'.",
      "top fields": ["tax_category", "name", "posting_date", "customer", "net_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tax_category': ['!=', 'Zero Rated']}, fields=['name', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with 'Deemed Export' tax category?",
      "top fields": ["customer", "tax_category", "posting_date", "name", "territory", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tax_category': 'Deemed Export'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices categorized as 'SEZ'.",
      "top fields": ["name", "is_return", "tax_category", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'tax_category': 'SEZ'}, fields=['name', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices marked as POS and having tax category as 'Special Rate'.",
      "top fields": ["name", "is_pos", "tax_category", "customer", "posting_date", "net_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'tax_category': 'Special Rate'}, fields=['name', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices this month marked under the 'Nil Rated' tax category?",
      "top fields": ["name", "tax_category", "posting_date", "customer", "grand_total", "status"]
    },
    "output": "import datetime\n\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'tax_category': 'Nil Rated', 'posting_date': ['>=', start]}, fields=['name', 'tax_category', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check for invoices created today using the 'Exempt' tax category.",
      "top fields": ["tax_category", "posting_date", "name", "is_pos", "grand_total", "customer"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'tax_category': 'Exempt', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices this year with any tax category specified.",
      "top fields": ["tax_category", "posting_date", "name", "customer", "grand_total", "status"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'tax_category': ['!=', '']}, fields=['name', 'tax_category'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get a distinct list of tax categories used in sales invoices.",
      "top fields": ["tax_category", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['tax_category'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that used 'Standard GST' in taxes and charges.",
      "top fields": ["taxes_and_charges", "name", "posting_date", "customer", "grand_total", "is_pos"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'taxes_and_charges': 'Standard GST'}, fields=['taxes_and_charges', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices applied 'Export Tax Template' as taxes and charges?",
      "top fields": ["taxes_and_charges", "name", "posting_date", "grand_total", "customer", "status"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'taxes_and_charges': 'Export Tax Template'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with taxes and charges set to 'Retail Scheme Tax'.",
      "top fields": ["is_pos", "taxes_and_charges", "name", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'taxes_and_charges': 'Retail Scheme Tax'}, fields=['is_pos', 'taxes_and_charges', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where the taxes and charges template was 'Return Tax'.",
      "top fields": ["is_return", "taxes_and_charges", "name", "posting_date", "grand_total", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'taxes_and_charges': 'Return Tax'}, fields=['is_return', 'taxes_and_charges', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices created today with 'Holiday Tax Plan' as taxes and charges?",
      "top fields": ["taxes_and_charges", "posting_date", "name", "grand_total", "customer", "status"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'taxes_and_charges': 'Holiday Tax Plan', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices using any tax template other than 'Zero Tax'.",
      "top fields": ["taxes_and_charges", "name", "customer", "grand_total", "posting_date", "is_pos"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'taxes_and_charges': ['!=', 'Zero Tax']}, fields=['taxes_and_charges', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers used the 'State GST Plan' tax template?",
      "top fields": ["taxes_and_charges", "customer", "posting_date", "name", "grand_total", "territory"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'taxes_and_charges': 'State GST Plan'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me invoices from Q1 where 'VAT Template' was used.",
      "top fields": ["taxes_and_charges", "posting_date", "name", "grand_total", "status", "customer"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 1, 1)\nend = datetime.date(today.year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'taxes_and_charges': 'VAT Template', 'posting_date': ['between', [start, end]]}, fields=['taxes_and_charges', 'posting_date', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices this year that used any taxes and charges template.",
      "top fields": ["taxes_and_charges", "posting_date", "name", "grand_total", "customer", "status"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'taxes_and_charges': ['!=', '']}, fields=['taxes_and_charges', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List distinct taxes and charges templates applied in sales invoices.",
      "top fields": ["taxes_and_charges", "name", "customer", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['taxes_and_charges'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that used the 'Standard Shipping' rule.",
      "top fields": ["shipping_rule", "name", "posting_date", "customer", "grand_total", "is_pos"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_rule': 'Standard Shipping'}, fields=['shipping_rule', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices applied the 'Express Delivery' shipping rule?",
      "top fields": ["shipping_rule", "name", "grand_total", "is_return", "customer", "status"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'shipping_rule': 'Express Delivery'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where the shipping rule was set to 'POS Free Shipping'.",
      "top fields": ["is_pos", "shipping_rule", "name", "grand_total", "posting_date", "taxes_and_charges"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'shipping_rule': 'POS Free Shipping'}, fields=['is_pos', 'shipping_rule', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where 'Return Shipping Rule' was used.",
      "top fields": ["is_return", "shipping_rule", "name", "grand_total", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'shipping_rule': 'Return Shipping Rule'}, fields=['is_return', 'shipping_rule', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices today created using the 'Holiday Delivery' shipping rule?",
      "top fields": ["shipping_rule", "posting_date", "name", "is_pos", "grand_total", "customer"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'shipping_rule': 'Holiday Delivery', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices using any shipping rule other than 'No Shipping'.",
      "top fields": ["shipping_rule", "name", "customer", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_rule': ['!=', 'No Shipping']}, fields=['shipping_rule', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received shipments under 'Premium Shipping' rule?",
      "top fields": ["shipping_rule", "customer", "grand_total", "name", "territory", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_rule': 'Premium Shipping'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices from last quarter using the 'Seasonal Shipping' rule.",
      "top fields": ["shipping_rule", "posting_date", "name", "customer", "grand_total", "is_return"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nq = (today.month - 1) // 3 + 1\nstart = datetime.date(today.year, 3 * (q - 2) + 1, 1)\nend = datetime.date(today.year, 3 * (q - 1), 1) - datetime.timedelta(days=1)\nfrappe.get_all('Sales Invoice', filters={'shipping_rule': 'Seasonal Shipping', 'posting_date': ['between', [start, end]]}, fields=['shipping_rule', 'posting_date', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices this year where shipping rule was defined.",
      "top fields": ["shipping_rule", "posting_date", "name", "grand_total", "status", "customer"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'shipping_rule': ['!=', '']}, fields=['shipping_rule', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List distinct shipping rules used in all sales invoices.",
      "top fields": ["shipping_rule", "name", "customer", "grand_total", "posting_date", "taxes_and_charges"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['shipping_rule'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the Incoterm was set to 'FOB'.",
      "top fields": ["incoterm", "name", "customer", "posting_date", "grand_total", "taxes_and_charges"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'incoterm': 'FOB'}, fields=['incoterm', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices used 'CIF' as their incoterm?",
      "top fields": ["incoterm", "posting_date", "name", "is_return", "status", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'incoterm': 'CIF'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with 'DAP' incoterm.",
      "top fields": ["is_pos", "incoterm", "name", "customer", "grand_total", "taxes_and_charges"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'incoterm': 'DAP'}, fields=['is_pos', 'incoterm', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where incoterm used was 'DDP'.",
      "top fields": ["is_return", "incoterm", "name", "grand_total", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'incoterm': 'DDP'}, fields=['is_return', 'incoterm', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices created today using 'EXW' incoterm?",
      "top fields": ["incoterm", "posting_date", "name", "customer", "is_pos", "grand_total"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'incoterm': 'EXW', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices using any incoterm other than 'FOB'.",
      "top fields": ["incoterm", "name", "posting_date", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'incoterm': ['!=', 'FOB']}, fields=['incoterm', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with 'CFR' incoterm?",
      "top fields": ["customer", "incoterm", "posting_date", "grand_total", "name", "territory"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'incoterm': 'CFR'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices from Q2 using 'DDU' incoterm.",
      "top fields": ["incoterm", "posting_date", "name", "customer", "grand_total", "status"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 4, 1)\nend = datetime.date(today.year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'incoterm': 'DDU', 'posting_date': ['between', [start, end]]}, fields=['incoterm', 'posting_date', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices this year with any incoterm value set.",
      "top fields": ["incoterm", "posting_date", "name", "grand_total", "customer", "status"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'incoterm': ['!=', '']}, fields=['incoterm', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all unique incoterms used in invoices.",
      "top fields": ["incoterm", "name", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['incoterm'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the named place is set to 'Doha Port'.",
      "top fields": ["name", "named_place", "customer", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'named_place': 'Doha Port'}, fields=['name', 'named_place'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were shipped from 'Jebel Ali Free Zone'?",
      "top fields": ["named_place", "name", "posting_date", "is_return", "territory", "status"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'named_place': 'Jebel Ali Free Zone'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices delivered from 'Dubai Airport'.",
      "top fields": ["named_place", "is_pos", "name", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'named_place': 'Dubai Airport'}, fields=['name', 'is_pos', 'named_place'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices where goods were delivered to 'Salwa Road Warehouse'.",
      "top fields": ["named_place", "is_return", "name", "posting_date", "grand_total", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'named_place': 'Salwa Road Warehouse'}, fields=['name', 'is_return', 'named_place'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices issued today from 'Qatar Industrial Area'?",
      "top fields": ["named_place", "posting_date", "name", "status", "customer", "grand_total"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'named_place': 'Qatar Industrial Area', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me all invoices shipped from places other than 'Hamad Port'.",
      "top fields": ["name", "named_place", "posting_date", "customer", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'named_place': ['!=', 'Hamad Port']}, fields=['name', 'named_place'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received shipments from 'Al Wakrah Facility'?",
      "top fields": ["customer", "named_place", "posting_date", "territory", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'named_place': 'Al Wakrah Facility'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all invoices from Q2 where goods were dispatched from 'Ras Laffan Hub'.",
      "top fields": ["name", "named_place", "posting_date", "customer", "grand_total", "status"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 4, 1)\nend = datetime.date(today.year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'named_place': 'Ras Laffan Hub', 'posting_date': ['between', [start, end]]}, fields=['name', 'named_place', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices used a named place this year?",
      "top fields": ["named_place", "posting_date", "name", "grand_total", "customer", "is_pos"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.db.count('Sales Invoice', filters={'posting_date': ['>=', start], 'named_place': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all unique named places used in sales invoices.",
      "top fields": ["named_place", "name", "posting_date", "customer", "status", "territory"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['named_place'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that include tax records.",
      "top fields": ["name", "taxes", "customer", "posting_date", "grand_total", "taxes_and_charges"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'taxes': ['!=', '']}, fields=['name', 'taxes'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have no tax information?",
      "top fields": ["taxes", "name", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'taxes': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with non-empty taxes field created today.",
      "top fields": ["name", "taxes", "posting_date", "customer", "status"]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'taxes': ['!=', ''], 'posting_date': datetime.date.today()}, fields=['name', 'taxes'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many POS invoices have tax records?",
      "top fields": ["taxes", "is_pos", "name", "grand_total", "posting_date"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_pos': 1, 'taxes': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices that have tax entries.",
      "top fields": ["name", "taxes", "is_return", "grand_total", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'taxes': ['!=', '']}, fields=['name', 'taxes'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show distinct customers from invoices that include tax details.",
      "top fields": ["customer", "taxes", "grand_total", "posting_date", "name"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'taxes': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with tax data from this fiscal year.",
      "top fields": ["name", "taxes", "posting_date", "customer", "status"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'taxes': ['!=', ''], 'posting_date': ['>=', start]}, fields=['name', 'taxes'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices posted this week contain tax entries?",
      "top fields": ["name", "posting_date", "taxes", "customer", "grand_total"]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\nfrappe.get_all('Sales Invoice', filters={'taxes': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['name', 'taxes'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice created today has a taxes field filled.",
      "top fields": ["taxes", "posting_date", "name", "grand_total"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'taxes': ['!=', ''], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where tax information was updated from default.",
      "top fields": ["name", "taxes", "customer", "taxes_and_charges", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'taxes': ['!=', '']}, fields=['name', 'taxes'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the base total taxes and charges exceed 500.",
      "top fields": ["name", "base_total_taxes_and_charges", "customer", "posting_date", "grand_total", "is_pos"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_total_taxes_and_charges': ['>', 500]}, fields=['name', 'base_total_taxes_and_charges'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have zero base total taxes and charges?",
      "top fields": ["base_total_taxes_and_charges", "is_return", "posting_date", "status", "grand_total", "name"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'base_total_taxes_and_charges': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with base total taxes and charges greater than 300.",
      "top fields": ["name", "is_pos", "base_total_taxes_and_charges", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'base_total_taxes_and_charges': ['>', 300]}, fields=['name', 'is_pos', 'base_total_taxes_and_charges'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where the base total taxes and charges is under 200.",
      "top fields": ["name", "is_return", "base_total_taxes_and_charges", "posting_date", "grand_total", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'base_total_taxes_and_charges': ['<', 200]}, fields=['name', 'is_return', 'base_total_taxes_and_charges'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices created today with base total taxes and charges above 100?",
      "top fields": ["base_total_taxes_and_charges", "posting_date", "name", "customer", "grand_total", "territory"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'base_total_taxes_and_charges': ['>', 100], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices where base total taxes and charges exceeded 750?",
      "top fields": ["customer", "base_total_taxes_and_charges", "name", "territory", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_total_taxes_and_charges': ['>', 750]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices this year with non-zero base total taxes and charges.",
      "top fields": ["name", "base_total_taxes_and_charges", "posting_date", "grand_total", "customer", "status"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'base_total_taxes_and_charges': ['!=', 0], 'posting_date': ['>=', start]}, fields=['name', 'base_total_taxes_and_charges'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice created this week has base total taxes and charges below 250.",
      "top fields": ["base_total_taxes_and_charges", "posting_date", "name", "is_pos", "customer"]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\nfrappe.db.exists('Sales Invoice', {'base_total_taxes_and_charges': ['<', 250], 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with base total taxes and charges not equal to zero.",
      "top fields": ["name", "base_total_taxes_and_charges", "customer", "status", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_total_taxes_and_charges': ['!=', 0]}, fields=['name', 'base_total_taxes_and_charges'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices had base total taxes and charges equal to 150?",
      "top fields": ["is_return", "base_total_taxes_and_charges", "posting_date", "name"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'base_total_taxes_and_charges': 150})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where total taxes and charges exceed 1000.",
      "top fields": ["name", "total_taxes_and_charges", "customer", "grand_total", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_taxes_and_charges': ['>', 1000]}, fields=['name', 'total_taxes_and_charges'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had zero total taxes and charges?",
      "top fields": ["total_taxes_and_charges", "name", "posting_date", "is_return", "status", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'total_taxes_and_charges': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where taxes and charges were less than 500.",
      "top fields": ["name", "total_taxes_and_charges", "is_pos", "grand_total", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'total_taxes_and_charges': ['<', 500]}, fields=['name', 'is_pos', 'total_taxes_and_charges'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices with total taxes and charges exactly 200.",
      "top fields": ["name", "is_return", "total_taxes_and_charges", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'total_taxes_and_charges': 200}, fields=['name', 'is_return', 'total_taxes_and_charges'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices created today with more than 300 in total taxes and charges?",
      "top fields": ["name", "posting_date", "total_taxes_and_charges", "customer", "is_pos"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'total_taxes_and_charges': ['>', 300], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List customers with invoices that had taxes and charges over 1500.",
      "top fields": ["customer", "total_taxes_and_charges", "name", "grand_total", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_taxes_and_charges': ['>', 1500]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices this fiscal year with any non-zero taxes and charges.",
      "top fields": ["name", "total_taxes_and_charges", "posting_date", "grand_total", "status"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'total_taxes_and_charges': ['!=', 0], 'posting_date': ['>=', start]}, fields=['name', 'total_taxes_and_charges'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoice this week with taxes and charges less than 100?",
      "top fields": ["total_taxes_and_charges", "posting_date", "name", "is_pos", "status"]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nend = start + datetime.timedelta(days=6)\nfrappe.db.exists('Sales Invoice', {'total_taxes_and_charges': ['<', 100], 'posting_date': ['between', [start, end]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where total taxes and charges is not zero.",
      "top fields": ["name", "total_taxes_and_charges", "customer", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_taxes_and_charges': ['!=', 0]}, fields=['name', 'total_taxes_and_charges'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count return invoices with taxes and charges equal to 350.",
      "top fields": ["is_return", "total_taxes_and_charges", "posting_date", "name", "status"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'total_taxes_and_charges': 350})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the totals field is not empty.",
      "top fields": ["name", "totals", "grand_total", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'totals': ['!=', '']}, fields=['name', 'totals'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have totals mentioned?",
      "top fields": ["totals", "name", "grand_total", "status", "posting_date", "is_pos"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'totals': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where the totals section is filled in.",
      "top fields": ["name", "is_pos", "totals", "grand_total", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'totals': ['!=', '']}, fields=['name', 'is_pos', 'totals'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with total information present.",
      "top fields": ["name", "is_return", "totals", "grand_total", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'totals': ['!=', '']}, fields=['name', 'is_return', 'totals'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice created today contains totals.",
      "top fields": ["totals", "posting_date", "name", "grand_total", "customer", "is_pos"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'totals': ['!=', ''], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with filled totals field?",
      "top fields": ["customer", "totals", "posting_date", "grand_total", "name", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'totals': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct totals values used in all sales invoices.",
      "top fields": ["totals", "name", "grand_total", "customer", "is_return", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['totals'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices this quarter where totals are recorded.",
      "top fields": ["name", "posting_date", "totals", "grand_total", "customer", "status"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\nfrappe.get_all('Sales Invoice', filters={'totals': ['!=', ''], 'posting_date': ['>=', start]}, fields=['name', 'totals', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me invoices where the totals match 'Subtotal + Tax'.",
      "top fields": ["name", "totals", "grand_total", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'totals': 'Subtotal + Tax'}, fields=['name', 'totals'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices with totals set to 'Final Amount'?",
      "top fields": ["is_return", "totals", "name", "posting_date", "grand_total", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'totals': 'Final Amount'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the base grand total is more than 10,000.",
      "top fields": ["name", "base_grand_total", "customer", "posting_date", "currency", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_grand_total': ['>', 10000]}, fields=['name', 'base_grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices had a base grand total under 5,000?",
      "top fields": ["is_return", "base_grand_total", "name", "posting_date", "grand_total", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'base_grand_total': ['<', 5000]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with a base grand total exactly 7500.",
      "top fields": ["is_pos", "base_grand_total", "name", "grand_total", "currency", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'base_grand_total': 7500}, fields=['name', 'is_pos', 'base_grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoices created today where base grand total is recorded.",
      "top fields": ["base_grand_total", "posting_date", "name", "customer", "status", "currency"]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'base_grand_total': ['!=', 0], 'posting_date': datetime.date.today()}, fields=['name', 'base_grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with a base grand total above 50,000?",
      "top fields": ["customer", "base_grand_total", "posting_date", "territory", "name", "currency"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_grand_total': ['>', 50000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices this quarter with high base grand totals.",
      "top fields": ["name", "posting_date", "base_grand_total", "customer", "status", "grand_total"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\nfrappe.get_all('Sales Invoice', filters={'base_grand_total': ['>', 0], 'posting_date': ['>=', start]}, fields=['name', 'base_grand_total', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any invoices where base grand total is not zero?",
      "top fields": ["base_grand_total", "name", "status", "posting_date", "customer", "is_pos"]
    },
    "output": "frappe.db.exists('Sales Invoice', {'base_grand_total': ['!=', 0]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get average base grand total for invoices in 2025.",
      "top fields": ["base_grand_total", "posting_date", "name", "status", "customer", "currency"]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date(2025, 1, 1)\nend = datetime.date(2025, 12, 31)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['base_grand_total'])\navg = sum(flt(d.base_grand_total) for d in data) / len(data) if data else 0\nprint('Average Base Grand Total:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show distinct base grand total values used in sales invoices.",
      "top fields": ["base_grand_total", "grand_total", "name", "currency", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['base_grand_total'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices had a base grand total of exactly 9999.99?",
      "top fields": ["base_grand_total", "name", "posting_date", "customer", "is_return", "currency"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_grand_total': 9999.99}, fields=['name', 'base_grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where base rounding adjustment was applied.",
      "top fields": ["name", "base_rounding_adjustment", "grand_total", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_rounding_adjustment': ['!=', 0]}, fields=['name', 'base_rounding_adjustment'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have zero base rounding adjustment?",
      "top fields": ["base_rounding_adjustment", "name", "posting_date", "status", "grand_total", "is_return"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'base_rounding_adjustment': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices with any base rounding applied.",
      "top fields": ["name", "is_return", "base_rounding_adjustment", "grand_total", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'base_rounding_adjustment': ['!=', 0]}, fields=['name', 'is_return', 'base_rounding_adjustment'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices created today with rounding differences?",
      "top fields": ["base_rounding_adjustment", "posting_date", "name", "status", "customer", "grand_total"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'base_rounding_adjustment': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the total base rounding adjustments made this month.",
      "top fields": ["base_rounding_adjustment", "posting_date", "name", "grand_total", "customer", "status"]
    },
    "output": "import datetime\n\nstart = datetime.date.today().replace(day=1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['base_rounding_adjustment'])\ntotal = sum(d.base_rounding_adjustment for d in data)\nprint('Total base rounding adjustments:', total)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with base rounding of more than 2 units?",
      "top fields": ["customer", "base_rounding_adjustment", "name", "grand_total", "posting_date", "territory"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_rounding_adjustment': ['>', 2]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the base rounded total is greater than 1000.",
      "top fields": ["name", "base_rounded_total", "grand_total", "currency", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_rounded_total': ['>', 1000]}, fields=['name', 'base_rounded_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have base_rounded_total equal to zero?",
      "top fields": ["base_rounded_total", "name", "status", "is_return", "customer", "posting_date"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'base_rounded_total': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where the base_rounded_total exceeds 5000.",
      "top fields": ["name", "is_return", "base_rounded_total", "grand_total", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'base_rounded_total': ['>', 5000]}, fields=['name', 'is_return', 'base_rounded_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any invoices created today with base_rounded_total over 2000?",
      "top fields": ["base_rounded_total", "posting_date", "name", "grand_total", "customer", "is_pos"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'base_rounded_total': ['>', 2000], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the sum of base_rounded_total for invoices posted this month.",
      "top fields": ["base_rounded_total", "posting_date", "name", "grand_total", "currency", "customer"]
    },
    "output": "import datetime\n\nstart = datetime.date.today().replace(day=1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['base_rounded_total'])\ntotal = sum(d.base_rounded_total for d in data)\nprint('Total base_rounded_total:', total)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with base_rounded_total less than 300?",
      "top fields": ["customer", "base_rounded_total", "name", "posting_date", "territory", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_rounded_total': ['<', 300]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the base total in words includes 'thousand'.",
      "top fields": ["name", "base_in_words", "base_rounded_total", "grand_total", "posting_date", "currency"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_in_words': ['like', '%thousand%']}, fields=['name', 'base_in_words'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where the base_in_words field is not empty.",
      "top fields": ["name", "is_pos", "base_in_words", "base_rounded_total", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'base_in_words': ['!=', '']}, fields=['name', 'is_pos', 'base_in_words'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if thereâ€™s any invoice today that includes 'rupees' in base_in_words.",
      "top fields": ["posting_date", "base_in_words", "name", "base_rounded_total", "customer", "status"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'posting_date': datetime.date.today(), 'base_in_words': ['like', '%rupees%']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices have the base amount in words field filled?",
      "top fields": ["is_return", "base_in_words", "name", "posting_date", "status", "base_rounded_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'base_in_words': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoices with base_in_words exactly 'One Thousand Only'.",
      "top fields": ["name", "base_in_words", "posting_date", "currency", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_in_words': 'One Thousand Only'}, fields=['name', 'base_in_words'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with base_in_words containing 'lakh'?",
      "top fields": ["customer", "base_in_words", "posting_date", "name", "territory", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_in_words': ['like', '%lakh%']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the grand total is greater than 10,000.",
      "top fields": ["name", "grand_total", "posting_date", "customer", "status", "total_qty"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'grand_total': ['>', 10000]}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have grand total exactly 0?",
      "top fields": ["grand_total", "name", "posting_date", "is_return", "status", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'grand_total': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices with grand total less than 500.",
      "top fields": ["name", "is_return", "grand_total", "posting_date", "customer", "taxes_and_charges"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'grand_total': ['<', 500]}, fields=['name', 'is_return', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoices were made today with grand total over 20,000.",
      "top fields": ["grand_total", "posting_date", "name", "customer", "status", "is_pos"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'posting_date': datetime.date.today(), 'grand_total': ['>', 20000]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices where the grand total is not equal to 0.",
      "top fields": ["name", "is_pos", "grand_total", "customer", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'grand_total': ['!=', 0]}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with grand total between 1000 and 5000.",
      "top fields": ["name", "grand_total", "posting_date", "customer", "company", "currency"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'grand_total': ['between', [1000, 5000]]}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What is the average grand total of all invoices from last month?",
      "top fields": ["grand_total", "posting_date", "customer", "company", "name", "status"]
    },
    "output": "import datetime\n\nfrom frappe.utils import flt\n\nfirst_day = datetime.date.today().replace(day=1) - datetime.timedelta(days=1)\nstart = first_day.replace(day=1)\nend = first_day\ninvoices = frappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['grand_total'])\navg = sum(flt(i.grand_total) for i in invoices) / len(invoices) if invoices else 0\nprint('Average Grand Total:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with a grand total above 25,000?",
      "top fields": ["customer", "grand_total", "name", "posting_date", "territory", "currency"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'grand_total': ['>', 25000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoices for 'Tech Distributors' where the grand total exceeds 40,000.",
      "top fields": ["name", "customer", "grand_total", "posting_date", "status", "taxes_and_charges"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer': 'Tech Distributors', 'grand_total': ['>', 40000]}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct grand total values used in invoices.",
      "top fields": ["grand_total", "posting_date", "customer", "company", "name", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['grand_total'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where rounding adjustment is greater than 1.",
      "top fields": ["name", "rounding_adjustment", "grand_total", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'rounding_adjustment': ['>', 1]}, fields=['name', 'rounding_adjustment'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had no rounding adjustment applied?",
      "top fields": ["rounding_adjustment", "name", "posting_date", "is_return", "grand_total", "status"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'rounding_adjustment': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices where rounding adjustment was negative.",
      "top fields": ["name", "is_return", "rounding_adjustment", "grand_total", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'rounding_adjustment': ['<', 0]}, fields=['name', 'is_return', 'rounding_adjustment'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice today has a rounding adjustment.",
      "top fields": ["rounding_adjustment", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'rounding_adjustment': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me POS invoices with a rounding adjustment less than 0.5.",
      "top fields": ["name", "is_pos", "rounding_adjustment", "grand_total", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'rounding_adjustment': ['<', 0.5]}, fields=['name', 'is_pos', 'rounding_adjustment'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with a rounding adjustment above 2?",
      "top fields": ["customer", "rounding_adjustment", "posting_date", "name", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'rounding_adjustment': ['>', 2]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices this year with rounding adjustment of at least 1.",
      "top fields": ["name", "posting_date", "rounding_adjustment", "customer", "grand_total", "status"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'rounding_adjustment': ['>=', 1]}, fields=['name', 'rounding_adjustment', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find distinct rounding adjustment values used in invoices.",
      "top fields": ["rounding_adjustment", "name", "posting_date", "grand_total", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['rounding_adjustment'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with a rounding adjustment between -1 and 1.",
      "top fields": ["name", "rounding_adjustment", "posting_date", "grand_total", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'rounding_adjustment': ['between', [-1, 1]]}, fields=['name', 'rounding_adjustment'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any return invoices with rounding adjustment over 3.5?",
      "top fields": ["is_return", "rounding_adjustment", "name", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'rounding_adjustment': ['>', 3.5]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the company roundoff cost center was used.",
      "top_fields": ["name", "use_company_roundoff_cost_center", "rounding_adjustment", "base_grand_total", "grand_total", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'use_company_roundoff_cost_center': 1}, fields=['name', 'use_company_roundoff_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices did not apply the company roundoff cost center?",
      "top_fields": ["use_company_roundoff_cost_center", "name", "posting_date", "grand_total", "company", "is_pos"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'use_company_roundoff_cost_center': 0}, fields=['name', 'use_company_roundoff_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices enabled the use of the company roundoff cost center?",
      "top_fields": ["use_company_roundoff_cost_center", "name", "rounding_adjustment", "base_rounded_total", "grand_total", "is_return"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'use_company_roundoff_cost_center': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices that used the company roundoff cost center.",
      "top_fields": ["is_pos", "use_company_roundoff_cost_center", "name", "grand_total", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'use_company_roundoff_cost_center': 1}, fields=['name', 'is_pos', 'use_company_roundoff_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were there any return invoices where the roundoff cost center was not used?",
      "top_fields": ["is_return", "use_company_roundoff_cost_center", "name", "grand_total", "posting_date", "company"]
    },
    "output": "frappe.db.exists('Sales Invoice', {'is_return': 1, 'use_company_roundoff_cost_center': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List today's invoices with the company roundoff cost center enabled.",
      "top_fields": ["use_company_roundoff_cost_center", "posting_date", "name", "grand_total", "rounding_adjustment", "company"]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'use_company_roundoff_cost_center': 1}, fields=['name', 'use_company_roundoff_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with the roundoff cost center enabled?",
      "top_fields": ["customer", "use_company_roundoff_cost_center", "grand_total", "company", "name", "territory"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'use_company_roundoff_cost_center': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices this year that disabled the company roundoff cost center?",
      "top_fields": ["use_company_roundoff_cost_center", "posting_date", "name", "grand_total", "company", "status"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'use_company_roundoff_cost_center': 0, 'posting_date': ['>=', start]}, fields=['name', 'use_company_roundoff_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all invoices grouped by whether they used the company roundoff cost center.",
      "top_fields": ["use_company_roundoff_cost_center", "name", "grand_total", "company", "is_return", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['use_company_roundoff_cost_center'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices did not use the roundoff cost center?",
      "top_fields": ["is_return", "use_company_roundoff_cost_center", "name", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'use_company_roundoff_cost_center': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the rounded total is greater than 10,000.",
      "top_fields": ["name", "rounded_total", "grand_total", "customer", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'rounded_total': ['>', 10000]}, fields=['name', 'rounded_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have a rounded total of zero?",
      "top_fields": ["rounded_total", "name", "posting_date", "status", "grand_total", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'rounded_total': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me POS invoices with a rounded total below 500.",
      "top_fields": ["is_pos", "rounded_total", "name", "grand_total", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'rounded_total': ['<', 500]}, fields=['name', 'is_pos', 'rounded_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where the rounded total is over 2500.",
      "top_fields": ["is_return", "rounded_total", "name", "grand_total", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'rounded_total': ['>', 2500]}, fields=['name', 'is_return', 'rounded_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices created today with a rounded total of 1500?",
      "top_fields": ["rounded_total", "posting_date", "name", "grand_total", "customer", "status"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'rounded_total': 1500, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with a rounded total more than 5,000?",
      "top_fields": ["customer", "rounded_total", "grand_total", "name", "posting_date", "territory"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'rounded_total': ['>', 5000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct rounded total values from invoices.",
      "top_fields": ["rounded_total", "grand_total", "name", "customer", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['rounded_total'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices from this month where rounded total is not zero.",
      "top_fields": ["rounded_total", "posting_date", "name", "customer", "grand_total", "company"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = today.replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'rounded_total': ['!=', 0], 'posting_date': ['>=', start]}, fields=['name', 'rounded_total', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices had no rounding applied?",
      "top_fields": ["is_return", "rounded_total", "rounding_adjustment", "name", "grand_total", "posting_date"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'rounded_total': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where rounded total equals grand total.",
      "top_fields": ["rounded_total", "grand_total", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'rounded_total': ['=', 'grand_total']}, fields=['name', 'rounded_total', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the amount in words is not empty.",
      "top_fields": ["name", "in_words", "grand_total", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'in_words': ['!=', '']}, fields=['name', 'in_words'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have 'Rupees One Thousand Only' written as the amount in words?",
      "top_fields": ["in_words", "name", "grand_total", "customer", "posting_date", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'in_words': 'Rupees One Thousand Only'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where the in_words field is filled.",
      "top_fields": ["is_pos", "in_words", "name", "grand_total", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'in_words': ['!=', '']}, fields=['name', 'is_pos', 'in_words'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with amount in words stating 'Rupees Five Hundred Only'.",
      "top_fields": ["is_return", "in_words", "name", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'in_words': 'Rupees Five Hundred Only'}, fields=['name', 'is_return', 'in_words'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice created today has a non-empty in_words field.",
      "top_fields": ["in_words", "posting_date", "name", "customer", "grand_total", "company"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'in_words': ['!=', ''], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct amount descriptions used in words for all sales invoices.",
      "top_fields": ["in_words", "name", "grand_total", "customer", "status", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['in_words'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices in the last 30 days included amounts in words?",
      "top_fields": ["in_words", "posting_date", "name", "status", "grand_total", "is_return"]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=30)\nfrappe.db.count('Sales Invoice', filters={'posting_date': ['>=', start], 'in_words': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where in_words contains the word 'Thousand'.",
      "top_fields": ["name", "in_words", "customer", "grand_total", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'in_words': ['like', '%Thousand%']}, fields=['name', 'in_words'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any return invoices where the in_words field is left empty?",
      "top_fields": ["is_return", "in_words", "name", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.db.exists('Sales Invoice', {'is_return': 1, 'in_words': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with the amount written as 'Zero Rupees Only'.",
      "top_fields": ["name", "in_words", "grand_total", "posting_date", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'in_words': 'Zero Rupees Only'}, fields=['name', 'in_words'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the total advance paid is more than 1000.",
      "top_fields": ["name", "total_advance", "customer", "grand_total", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_advance': ['>', 1000]}, fields=['name', 'total_advance'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have total advance equal to zero?",
      "top_fields": ["total_advance", "status", "name", "posting_date", "grand_total", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'total_advance': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with a total advance below 500.",
      "top_fields": ["is_pos", "total_advance", "name", "posting_date", "grand_total", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'total_advance': ['<', 500]}, fields=['name', 'total_advance'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where total advance was more than 200.",
      "top_fields": ["is_return", "total_advance", "name", "grand_total", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'total_advance': ['>', 200]}, fields=['name', 'total_advance'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice created today has a total advance greater than 100.",
      "top_fields": ["posting_date", "total_advance", "name", "status", "customer", "grand_total"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'total_advance': ['>', 100], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers made an advance of over 3000 in their invoices?",
      "top_fields": ["customer", "total_advance", "grand_total", "name", "posting_date", "territory"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_advance': ['>', 3000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with any non-zero total advance in the past 15 days.",
      "top_fields": ["posting_date", "total_advance", "name", "status", "grand_total", "customer"]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=15)\nfrappe.get_all('Sales Invoice', filters={'total_advance': ['!=', 0], 'posting_date': ['>=', start]}, fields=['name', 'total_advance'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me invoices where the advance amount was exactly 750.",
      "top_fields": ["total_advance", "name", "posting_date", "status", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_advance': 750}, fields=['name', 'total_advance'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any return invoices with zero advance payment?",
      "top_fields": ["is_return", "total_advance", "name", "status", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'total_advance': 0}, fields=['name', 'total_advance'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show distinct total advance values used in sales invoices.",
      "top_fields": ["total_advance", "name", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['total_advance'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where the total advance paid is more than 1000.",
      "top_fields": ["name", "total_advance", "grand_total", "customer", "posting_date", "outstanding_amount"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_advance': ['>', 1000]}, fields=['name', 'total_advance'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have total advance equal to zero?",
      "top_fields": ["total_advance", "name", "posting_date", "grand_total", "is_return", "status"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'total_advance': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with a total advance below 500.",
      "top_fields": ["is_pos", "total_advance", "name", "grand_total", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'total_advance': ['<', 500]}, fields=['name', 'total_advance'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where total advance was more than 200.",
      "top_fields": ["is_return", "total_advance", "name", "grand_total", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'total_advance': ['>', 200]}, fields=['name', 'is_return', 'total_advance'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice created today has a total advance greater than 100.",
      "top_fields": ["total_advance", "posting_date", "name", "customer", "grand_total", "status"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'total_advance': ['>', 100], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers made an advance of over 3000 in their invoices?",
      "top_fields": ["customer", "total_advance", "grand_total", "name", "posting_date", "territory"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_advance': ['>', 3000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with any non-zero total advance in the past 15 days.",
      "top_fields": ["total_advance", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=15)\nfrappe.get_all('Sales Invoice', filters={'total_advance': ['!=', 0], 'posting_date': ['>=', start]}, fields=['name', 'total_advance'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me invoices where the advance amount was exactly 750.",
      "top_fields": ["total_advance", "name", "grand_total", "customer", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_advance': 750}, fields=['name', 'total_advance'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any return invoices with zero advance payment?",
      "top_fields": ["is_return", "total_advance", "name", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'total_advance': 0}, fields=['name', 'is_return', 'total_advance'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show distinct total advance values used in sales invoices.",
      "top_fields": ["total_advance", "grand_total", "name", "posting_date", "customer", "outstanding_amount"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['total_advance'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with an outstanding amount greater than 5000.",
      "top_fields": ["name", "outstanding_amount", "grand_total", "customer", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'outstanding_amount': ['>', 5000]}, fields=['name', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have zero outstanding balance?",
      "top_fields": ["outstanding_amount", "name", "posting_date", "status", "grand_total", "due_date"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'outstanding_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where the outstanding amount is under 100.",
      "top_fields": ["is_pos", "outstanding_amount", "name", "grand_total", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'outstanding_amount': ['<', 100]}, fields=['name', 'is_pos', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with unpaid amounts more than 2000.",
      "top_fields": ["is_return", "outstanding_amount", "name", "grand_total", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'outstanding_amount': ['>', 2000]}, fields=['name', 'is_return', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any invoices created today with outstanding dues?",
      "top_fields": ["outstanding_amount", "posting_date", "name", "customer", "grand_total", "status"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'outstanding_amount': ['>', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers still owe more than 10,000?",
      "top_fields": ["customer", "outstanding_amount", "grand_total", "name", "posting_date", "territory"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'outstanding_amount': ['>', 10000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with non-zero outstanding amount in the last 7 days?",
      "top_fields": ["outstanding_amount", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\n\nstart = datetime.date.today() - datetime.timedelta(days=7)\nfrappe.get_all('Sales Invoice', filters={'outstanding_amount': ['!=', 0], 'posting_date': ['>=', start]}, fields=['name', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me invoices where outstanding is exactly 2750.",
      "top_fields": ["outstanding_amount", "name", "grand_total", "customer", "posting_date", "due_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'outstanding_amount': 2750}, fields=['name', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all return invoices with no outstanding balance.",
      "top_fields": ["is_return", "outstanding_amount", "name", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'outstanding_amount': 0}, fields=['name', 'is_return', 'outstanding_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List distinct outstanding amounts from invoices.",
      "top_fields": ["outstanding_amount", "name", "grand_total", "customer", "posting_date", "due_date"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['outstanding_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where rounding total is disabled.",
      "top_fields": ["name", "disable_rounded_total", "posting_date", "grand_total", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'disable_rounded_total': 1}, fields=['name', 'disable_rounded_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have disabled the rounded total option?",
      "top_fields": ["disable_rounded_total", "name", "grand_total", "status", "customer", "posting_date"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'disable_rounded_total': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all POS invoices where rounded total was not applied.",
      "top_fields": ["name", "is_pos", "disable_rounded_total", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'disable_rounded_total': 1}, fields=['name', 'is_pos', 'disable_rounded_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which return invoices had the rounding disabled?",
      "top_fields": ["name", "is_return", "disable_rounded_total", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'disable_rounded_total': 1}, fields=['name', 'is_return', 'disable_rounded_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices created today with rounding disabled?",
      "top_fields": ["disable_rounded_total", "posting_date", "name", "grand_total", "customer", "status"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'disable_rounded_total': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List distinct customers who have invoices with rounding off turned off.",
      "top_fields": ["customer", "disable_rounded_total", "name", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'disable_rounded_total': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where discounts were applied on Net Total.",
      "top_fields": ["apply_discount_on", "name", "posting_date", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'apply_discount_on': 'Net Total'}, fields=['name', 'apply_discount_on'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have discount applied on Grand Total?",
      "top_fields": ["apply_discount_on", "name", "grand_total", "status", "customer", "posting_date"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'apply_discount_on': 'Grand Total'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where discount was applied on Net Total.",
      "top_fields": ["is_pos", "apply_discount_on", "name", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'apply_discount_on': 'Net Total'}, fields=['name', 'is_pos', 'apply_discount_on'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with discount applied on Grand Total.",
      "top_fields": ["is_return", "apply_discount_on", "name", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'apply_discount_on': 'Grand Total'}, fields=['name', 'is_return', 'apply_discount_on'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices today where discount was on Net Total?",
      "top_fields": ["apply_discount_on", "posting_date", "name", "customer", "grand_total", "status"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'apply_discount_on': 'Net Total', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices not using Net Total for discount application.",
      "top_fields": ["apply_discount_on", "name", "grand_total", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'apply_discount_on': ['!=', 'Net Total']}, fields=['name', 'apply_discount_on'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had discounts applied on Grand Total?",
      "top_fields": ["customer", "apply_discount_on", "posting_date", "grand_total", "name", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'apply_discount_on': 'Grand Total'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices from Q2 where discount was on Net Total.",
      "top_fields": ["apply_discount_on", "posting_date", "name", "grand_total", "customer", "status"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 4, 1)\nend = datetime.date(today.year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'apply_discount_on': 'Net Total', 'posting_date': ['between', [start, end]]}, fields=['name', 'apply_discount_on', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices didnâ€™t apply discount on Net Total?",
      "top_fields": ["is_return", "apply_discount_on", "posting_date", "grand_total", "name", "status"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'apply_discount_on': ['!=', 'Net Total']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all distinct values for the apply discount on field.",
      "top_fields": ["apply_discount_on", "name", "posting_date", "status", "grand_total", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['apply_discount_on'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with a base discount amount above 500.",
      "top_fields": ["name", "base_discount_amount", "grand_total", "posting_date", "customer", "base_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_discount_amount': ['>', 500]}, fields=['name', 'base_discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have zero base discount amount?",
      "top_fields": ["base_discount_amount", "name", "posting_date", "status", "grand_total", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'base_discount_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with base discount amount less than 100.",
      "top_fields": ["is_pos", "base_discount_amount", "name", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'base_discount_amount': ['<', 100]}, fields=['is_pos', 'base_discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with base discount over 250.",
      "top_fields": ["is_return", "base_discount_amount", "name", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'base_discount_amount': ['>', 250]}, fields=['is_return', 'base_discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices today with a base discount amount?",
      "top_fields": ["base_discount_amount", "posting_date", "name", "customer", "grand_total", "company"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'base_discount_amount': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where base discount was not applied.",
      "top_fields": ["name", "base_discount_amount", "grand_total", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_discount_amount': 0}, fields=['name', 'base_discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received base discounts over 1,000?",
      "top_fields": ["customer", "base_discount_amount", "name", "grand_total", "territory", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_discount_amount': ['>', 1000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices in Q1 with base discount amounts above 200?",
      "top_fields": ["base_discount_amount", "posting_date", "name", "grand_total", "customer", "company"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'base_discount_amount': ['>', 200], 'posting_date': ['between', [start, end]]}, fields=['base_discount_amount', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Average base discount amount in this year's invoices?",
      "top_fields": ["base_discount_amount", "posting_date", "name", "grand_total", "company", "status"]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['base_discount_amount'])\navg = sum(flt(d.base_discount_amount) for d in data) / len(data) if data else 0\nprint('Average Base Discount Amount:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct base discount amounts applied.",
      "top_fields": ["base_discount_amount", "name", "posting_date", "grand_total", "customer", "territory"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['base_discount_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with a base discount amount greater than 500.",
      "top_fields": ["name", "base_discount_amount", "customer", "grand_total", "posting_date", "discount_amount"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_discount_amount': ['>', 500]}, fields=['name', 'base_discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had no base discount amount applied?",
      "top_fields": ["base_discount_amount", "name", "status", "grand_total", "is_pos", "posting_date"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'base_discount_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with low base discount amount under 100.",
      "top_fields": ["name", "is_pos", "base_discount_amount", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'base_discount_amount': ['<', 100]}, fields=['name', 'is_pos', 'base_discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with base discount more than 250.",
      "top_fields": ["name", "is_return", "base_discount_amount", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'base_discount_amount': ['>', 250]}, fields=['name', 'is_return', 'base_discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoices created today include a base discount.",
      "top_fields": ["base_discount_amount", "posting_date", "name", "customer", "is_pos", "status"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'base_discount_amount': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received large base discounts over 1000?",
      "top_fields": ["customer", "base_discount_amount", "grand_total", "posting_date", "territory", "name"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_discount_amount': ['>', 1000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me invoices in Q1 with base discount more than 200.",
      "top_fields": ["name", "base_discount_amount", "posting_date", "customer", "is_return", "grand_total"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'base_discount_amount': ['>', 200], 'posting_date': ['between', [start, end]]}, fields=['name', 'base_discount_amount', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct base discount amounts used in invoices.",
      "top_fields": ["base_discount_amount", "name", "posting_date", "discount_amount", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['base_discount_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Average base discount amount in all invoices this year?",
      "top_fields": ["base_discount_amount", "posting_date", "grand_total", "name", "discount_amount", "customer"]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['base_discount_amount'])\navg = sum(flt(d.base_discount_amount) for d in data) / len(data) if data else 0\nprint('Average Base Discount Amount:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where base discount amount was not zero.",
      "top_fields": ["name", "base_discount_amount", "customer", "grand_total", "status", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_discount_amount': ['!=', 0]}, fields=['name', 'base_discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where cash or non-trade discount is applied.",
      "top_fields": ["name", "is_cash_or_non_trade_discount", "posting_date", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_cash_or_non_trade_discount': 1}, fields=['is_cash_or_non_trade_discount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices do not have a non-trade or cash discount?",
      "top_fields": ["is_cash_or_non_trade_discount", "name", "status", "customer", "posting_date", "is_pos"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_cash_or_non_trade_discount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where cash or non-trade discount was applied.",
      "top_fields": ["is_cash_or_non_trade_discount", "is_pos", "name", "customer", "grand_total", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'is_cash_or_non_trade_discount': 1}, fields=['is_pos', 'is_cash_or_non_trade_discount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with non-trade discount enabled.",
      "top_fields": ["is_cash_or_non_trade_discount", "is_return", "name", "status", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'is_cash_or_non_trade_discount': 1}, fields=['is_return', 'is_cash_or_non_trade_discount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any invoices from today with a cash or non-trade discount?",
      "top_fields": ["is_cash_or_non_trade_discount", "posting_date", "name", "status", "customer", "grand_total"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'is_cash_or_non_trade_discount': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received invoices with cash/non-trade discount?",
      "top_fields": ["customer", "is_cash_or_non_trade_discount", "name", "grand_total", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_cash_or_non_trade_discount': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices created this year with non-trade discount applied.",
      "top_fields": ["is_cash_or_non_trade_discount", "posting_date", "name", "grand_total", "customer", "status"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'is_cash_or_non_trade_discount': 1, 'posting_date': ['>=', start]}, fields=['is_cash_or_non_trade_discount', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that applied both cash/non-trade discount and have a status of Paid.",
      "top_fields": ["status", "is_cash_or_non_trade_discount", "name", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_cash_or_non_trade_discount': 1, 'status': 'Paid'}, fields=['is_cash_or_non_trade_discount', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return POS invoices from this quarter where cash/non-trade discount was used.",
      "top_fields": ["is_cash_or_non_trade_discount", "is_return", "is_pos", "posting_date", "name", "status"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 3 * ((today.month - 1) // 3) + 1, 1)\nfrappe.get_all('Sales Invoice', filters={'is_cash_or_non_trade_discount': 1, 'is_pos': 1, 'is_return': 1, 'posting_date': ['>=', start]}, fields=['is_cash_or_non_trade_discount', 'is_pos', 'is_return', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct combinations of customer and non-trade discount usage.",
      "top_fields": ["customer", "is_cash_or_non_trade_discount", "name", "grand_total", "status", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['customer', 'is_cash_or_non_trade_discount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the additional discount account is 'Sales Discount'.",
      "top_fields": ["name", "additional_discount_account", "customer", "grand_total", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'additional_discount_account': 'Sales Discount'}, fields=['name', 'additional_discount_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices applied the 'Promotional Discount Account'?",
      "top_fields": ["additional_discount_account", "posting_date", "name", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'additional_discount_account': 'Promotional Discount Account'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where the additional discount account is not empty.",
      "top_fields": ["name", "additional_discount_account", "grand_total", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'additional_discount_account': ['!=', '']}, fields=['name', 'additional_discount_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices using the 'Return Discount' account.",
      "top_fields": ["is_return", "additional_discount_account", "name", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'additional_discount_account': 'Return Discount'}, fields=['is_return', 'additional_discount_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any POS invoices using additional discount account named 'Seasonal Discount'?",
      "top_fields": ["is_pos", "additional_discount_account", "grand_total", "name", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'additional_discount_account': 'Seasonal Discount'}, fields=['is_pos', 'additional_discount_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice today used the 'Clearance Discount' account.",
      "top_fields": ["additional_discount_account", "posting_date", "name", "status"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'posting_date': datetime.date.today(), 'additional_discount_account': 'Clearance Discount'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers used the 'Loyalty Discount Account'?",
      "top_fields": ["customer", "additional_discount_account", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'additional_discount_account': 'Loyalty Discount Account'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices in Q1 using the 'New Year Discount' account.",
      "top_fields": ["additional_discount_account", "posting_date", "name", "customer", "status"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'additional_discount_account': 'New Year Discount', 'posting_date': ['between', [start, end]]}, fields=['additional_discount_account', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show distinct additional discount accounts used in invoices.",
      "top_fields": ["additional_discount_account", "name", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['additional_discount_account'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices this year where any additional discount account was set.",
      "top_fields": ["posting_date", "additional_discount_account", "name", "customer", "status"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'additional_discount_account': ['!=', '']}, fields=['additional_discount_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with additional discount percentage above 15%.",
      "top_fields": ["additional_discount_percentage", "name", "grand_total", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'additional_discount_percentage': ['>', 15]}, fields=['name', 'additional_discount_percentage'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had zero additional discount percentage?",
      "top_fields": ["additional_discount_percentage", "posting_date", "name", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'additional_discount_percentage': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with an additional discount percentage applied.",
      "top_fields": ["is_pos", "additional_discount_percentage", "grand_total", "name", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'additional_discount_percentage': ['>', 0]}, fields=['name', 'additional_discount_percentage'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with over 10% additional discount.",
      "top_fields": ["is_return", "additional_discount_percentage", "name", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'additional_discount_percentage': ['>', 10]}, fields=['name', 'additional_discount_percentage'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice created today had additional discount set.",
      "top_fields": ["posting_date", "additional_discount_percentage", "name", "customer"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'posting_date': datetime.date.today(), 'additional_discount_percentage': ['>', 0]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received more than 20% additional discount?",
      "top_fields": ["customer", "additional_discount_percentage", "posting_date", "grand_total", "name"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'additional_discount_percentage': ['>', 20]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices in Q2 with a discount percentage above 12%.",
      "top_fields": ["additional_discount_percentage", "posting_date", "name", "customer", "grand_total"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 4, 1)\nend = datetime.date(today.year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'additional_discount_percentage': ['>', 12], 'posting_date': ['between', [start, end]]}, fields=['name', 'additional_discount_percentage'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct values of additional discount percentage applied.",
      "top_fields": ["additional_discount_percentage", "name", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['additional_discount_percentage'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices used exactly 5% additional discount?",
      "top_fields": ["additional_discount_percentage", "name", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'additional_discount_percentage': 5}, fields=['name', 'additional_discount_percentage'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices this year with additional discount percentage not equal to zero.",
      "top_fields": ["posting_date", "additional_discount_percentage", "name", "customer", "status"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'additional_discount_percentage': ['!=', 0]}, fields=['additional_discount_percentage'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with discount amount greater than 500.",
      "top_fields": ["discount_amount", "name", "grand_total", "customer", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'discount_amount': ['>', 500]}, fields=['discount_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had zero discount amount?",
      "top_fields": ["discount_amount", "status", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'discount_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with a discount amount under 100.",
      "top_fields": ["is_pos", "discount_amount", "name", "customer", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'discount_amount': ['<', 100]}, fields=['is_pos', 'discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with discount amount more than 250.",
      "top_fields": ["is_return", "discount_amount", "name", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'discount_amount': ['>', 250]}, fields=['is_return', 'discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoices created today include discount amount.",
      "top_fields": ["discount_amount", "posting_date", "name", "customer", "grand_total", "status"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'discount_amount': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received invoices with discount amount over 1000?",
      "top_fields": ["discount_amount", "customer", "name", "posting_date", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'discount_amount': ['>', 1000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me invoices in Q3 with discount amount more than 200.",
      "top_fields": ["discount_amount", "posting_date", "name", "customer", "grand_total", "status"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 7, 1)\nend = datetime.date(today.year, 9, 30)\nfrappe.get_all('Sales Invoice', filters={'discount_amount': ['>', 200], 'posting_date': ['between', [start, end]]}, fields=['discount_amount', 'name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct discount amounts used in invoices.",
      "top_fields": ["discount_amount", "name", "grand_total", "customer", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['discount_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What is the average discount amount in invoices this year?",
      "top_fields": ["discount_amount", "posting_date", "name", "grand_total", "company", "status"]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['discount_amount'])\navg = sum(flt(d.discount_amount) for d in data) / len(data) if data else 0\nprint('Average Discount Amount:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where discount amount was not zero.",
      "top_fields": ["discount_amount", "name", "customer", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'discount_amount': ['!=', 0]}, fields=['discount_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show the secondary tax breakup values in all invoices.",
      "top_fields": ["sec_tax_breakup", "name", "posting_date", "taxes", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['sec_tax_breakup'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where secondary tax breakup is not empty.",
      "top_fields": ["sec_tax_breakup", "name", "posting_date", "grand_total", "status", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sec_tax_breakup': ['!=', '']}, fields=['sec_tax_breakup'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices include any secondary tax breakup details?",
      "top_fields": ["sec_tax_breakup", "posting_date", "name", "customer", "taxes", "company"]
    },
    "output": "frappe.db.exists('Sales Invoice', {'sec_tax_breakup': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices with non-empty secondary tax breakup.",
      "top_fields": ["is_pos", "sec_tax_breakup", "name", "grand_total", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'sec_tax_breakup': ['!=', '']}, fields=['is_pos', 'sec_tax_breakup'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices have a secondary tax breakup?",
      "top_fields": ["is_return", "sec_tax_breakup", "name", "posting_date", "taxes", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'sec_tax_breakup': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with both tax and secondary tax breakup details.",
      "top_fields": ["sec_tax_breakup", "taxes_and_charges", "taxes", "posting_date", "grand_total", "name"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'taxes_and_charges': ['!=', ''], 'sec_tax_breakup': ['!=', '']}, fields=['taxes_and_charges', 'sec_tax_breakup'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get recent invoices with secondary tax breakup present.",
      "top_fields": ["sec_tax_breakup", "posting_date", "name", "grand_total", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sec_tax_breakup': ['!=', '']}, fields=['sec_tax_breakup', 'posting_date'], order_by='posting_date desc')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with secondary tax details?",
      "top_fields": ["sec_tax_breakup", "customer", "name", "company", "posting_date", "taxes"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sec_tax_breakup': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoice IDs and dates with secondary tax breakup filled.",
      "top_fields": ["sec_tax_breakup", "name", "posting_date", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sec_tax_breakup': ['!=', '']}, fields=['name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any invoices today with a secondary tax breakup?",
      "top_fields": ["sec_tax_breakup", "posting_date", "name", "status", "company", "customer"]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'sec_tax_breakup': ['!=', ''], 'posting_date': datetime.date.today()})"
  },

  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show the secondary tax breakup values in all invoices.",
      "top_fields": ["sec_tax_breakup", "name", "grand_total", "taxes", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['sec_tax_breakup'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where secondary tax breakup is not empty.",
      "top_fields": ["sec_tax_breakup", "posting_date", "name", "customer", "company", "taxes"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sec_tax_breakup': ['!=', '']}, fields=['sec_tax_breakup'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices include any secondary tax breakup details?",
      "top_fields": ["sec_tax_breakup", "name", "status", "posting_date", "taxes", "customer"]
    },
    "output": "frappe.db.exists('Sales Invoice', {'sec_tax_breakup': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices with non-empty secondary tax breakup.",
      "top_fields": ["is_pos", "sec_tax_breakup", "name", "posting_date", "taxes", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'sec_tax_breakup': ['!=', '']}, fields=['is_pos', 'sec_tax_breakup'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices have a secondary tax breakup?",
      "top_fields": ["is_return", "sec_tax_breakup", "name", "taxes", "posting_date", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'sec_tax_breakup': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with both tax and secondary tax breakup details.",
      "top_fields": ["taxes_and_charges", "sec_tax_breakup", "taxes", "name", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'taxes_and_charges': ['!=', ''], 'sec_tax_breakup': ['!=', '']}, fields=['taxes_and_charges', 'sec_tax_breakup'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get recent invoices with secondary tax breakup present.",
      "top_fields": ["sec_tax_breakup", "posting_date", "name", "taxes", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sec_tax_breakup': ['!=', '']}, fields=['sec_tax_breakup', 'posting_date'], order_by='posting_date desc')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with secondary tax details?",
      "top_fields": ["sec_tax_breakup", "customer", "name", "taxes", "company", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sec_tax_breakup': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoice IDs and dates with secondary tax breakup filled.",
      "top_fields": ["sec_tax_breakup", "name", "posting_date", "taxes", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'sec_tax_breakup': ['!=', '']}, fields=['name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any invoices today with a secondary tax breakup?",
      "top_fields": ["sec_tax_breakup", "posting_date", "name", "customer", "taxes", "grand_total"]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'sec_tax_breakup': ['!=', ''], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that contain pricing rule details.",
      "top_fields": ["pricing_rule_details", "name", "customer", "grand_total", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rule_details': ['!=', '']}, fields=['pricing_rule_details', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices do not have any pricing rule details set?",
      "top_fields": ["pricing_rule_details", "status", "name", "posting_date", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rule_details': ''}, fields=['pricing_rule_details', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices contain pricing rule detail entries?",
      "top_fields": ["pricing_rule_details", "status", "name", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'pricing_rule_details': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices that used pricing rule details.",
      "top_fields": ["is_pos", "pricing_rule_details", "customer", "name", "grand_total", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'pricing_rule_details': ['!=', '']}, fields=['is_pos', 'pricing_rule_details'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any return invoices have pricing rule details.",
      "top_fields": ["is_return", "pricing_rule_details", "customer", "name", "posting_date", "grand_total"]
    },
    "output": "frappe.db.exists('Sales Invoice', {'is_return': 1, 'pricing_rule_details': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give recent invoices with pricing rule detail values filled.",
      "top_fields": ["pricing_rule_details", "posting_date", "name", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rule_details': ['!=', '']}, fields=['pricing_rule_details', 'posting_date'], order_by='posting_date desc')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received pricing rule benefits?",
      "top_fields": ["customer", "pricing_rule_details", "grand_total", "name", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rule_details': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoice names and their pricing rule info.",
      "top_fields": ["pricing_rule_details", "name", "posting_date", "status", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rule_details': ['!=', '']}, fields=['name', 'pricing_rule_details'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices today that used pricing rules?",
      "top_fields": ["pricing_rule_details", "posting_date", "name", "grand_total", "status", "company"]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'pricing_rule_details': ['!=', ''], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where pricing rule details and taxes were both present.",
      "top_fields": ["pricing_rule_details", "taxes", "name", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rule_details': ['!=', ''], 'taxes': ['!=', '']}, fields=['pricing_rule_details', 'taxes'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that applied any pricing rules.",
      "top_fields": ["pricing_rules", "name", "customer", "grand_total", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rules': ['!=', '']}, fields=['pricing_rules', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were submitted without any pricing rules?",
      "top_fields": ["pricing_rules", "status", "name", "posting_date", "customer", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'pricing_rules': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me invoices where pricing rules were defined and status is Paid.",
      "top_fields": ["pricing_rules", "status", "name", "customer", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rules': ['!=', ''], 'status': 'Paid'}, fields=['pricing_rules', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with pricing rules used in Q2.",
      "top_fields": ["pricing_rules", "posting_date", "name", "customer", "grand_total", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'pricing_rules': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['pricing_rules', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do any invoices from today include pricing rules?",
      "top_fields": ["pricing_rules", "posting_date", "name", "customer", "grand_total", "status"]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'pricing_rules': ['!=', ''], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices that used pricing rules over 1000 grand total?",
      "top_fields": ["pricing_rules", "customer", "grand_total", "name", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rules': ['!=', ''], 'grand_total': ['>', 1000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoice entries where pricing rules were present.",
      "top_fields": ["pricing_rules", "is_return", "name", "grand_total", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'pricing_rules': ['!=', '']}, fields=['pricing_rules', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show names and applied pricing rules for each invoice.",
      "top_fields": ["pricing_rules", "name", "posting_date", "customer", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rules': ['!=', '']}, fields=['name', 'pricing_rules'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which pricing rules have been most frequently applied?",
      "top_fields": ["pricing_rules", "name", "company", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['pricing_rules'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with both pricing rules and taxes defined?",
      "top_fields": ["pricing_rules", "taxes", "name", "customer", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'pricing_rules': ['!=', ''], 'taxes': ['!=', '']}, fields=['pricing_rules', 'taxes'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that have a packing list attached.",
      "top_fields": ["packing_list", "name", "customer", "grand_total", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packing_list': ['!=', '']}, fields=['packing_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices do not have any packing list?",
      "top_fields": ["packing_list", "name", "status", "posting_date", "customer", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'packing_list': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices created today that have packing lists.",
      "top_fields": ["packing_list", "posting_date", "name", "status", "customer", "grand_total"]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'packing_list': ['!=', '']}, fields=['packing_list', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices where packing list is available.",
      "top_fields": ["packing_list", "is_return", "customer", "name", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'packing_list': ['!=', '']}, fields=['packing_list', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received invoices with packing lists?",
      "top_fields": ["packing_list", "customer", "name", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packing_list': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me invoices with packing list and discount applied.",
      "top_fields": ["packing_list", "discount_amount", "name", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packing_list': ['!=', ''], 'discount_amount': ['>', 0]}, fields=['packing_list', 'discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices where both packing list and pricing rules exist.",
      "top_fields": ["packing_list", "pricing_rules", "name", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packing_list': ['!=', ''], 'pricing_rules': ['!=', '']}, fields=['packing_list', 'pricing_rules'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices from July with a packing list included?",
      "top_fields": ["packing_list", "posting_date", "name", "customer", "grand_total", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 7, 1)\nend = datetime.date(datetime.date.today().year, 7, 31)\nfrappe.get_all('Sales Invoice', filters={'packing_list': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['packing_list', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Is there any invoice with packing list and total above 5000?",
      "top_fields": ["packing_list", "grand_total", "name", "customer", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packing_list': ['!=', ''], 'grand_total': ['>', 5000]}, fields=['packing_list', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show names and packing lists of all such invoices.",
      "top_fields": ["packing_list", "name", "customer", "grand_total", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packing_list': ['!=', '']}, fields=['name', 'packing_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that have packed items included.",
      "top_fields": ["packed_items", "name", "customer", "grand_total", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packed_items': ['!=', '']}, fields=['packed_items'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices do not include any packed items?",
      "top_fields": ["packed_items", "status", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'packed_items': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices where packed items were recorded.",
      "top_fields": ["packed_items", "is_return", "name", "customer", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'packed_items': ['!=', '']}, fields=['packed_items', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices with any packed items.",
      "top_fields": ["packed_items", "is_pos", "name", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'packed_items': ['!=', '']}, fields=['packed_items', 'is_pos'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices issued today with packed items?",
      "top_fields": ["packed_items", "posting_date", "name", "customer", "grand_total", "status"]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'packed_items': ['!=', '']}, fields=['packed_items', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give customer names for invoices with packed items above â‚¹10,000.",
      "top_fields": ["packed_items", "grand_total", "customer", "name", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packed_items': ['!=', ''], 'grand_total': ['>', 10000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices in Q2 contain packed items?",
      "top_fields": ["packed_items", "posting_date", "name", "status", "customer", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'packed_items': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['packed_items', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with packed items and additional discounts?",
      "top_fields": ["packed_items", "additional_discount_percentage", "name", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packed_items': ['!=', ''], 'additional_discount_percentage': ['>', 0]}, fields=['packed_items', 'additional_discount_percentage'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices having both packed items and delivery note?",
      "top_fields": ["packed_items", "delivery_note", "name", "posting_date", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packed_items': ['!=', ''], 'delivery_note': ['!=', '']}, fields=['packed_items', 'delivery_note'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Just show the packed items of all valid invoices.",
      "top_fields": ["packed_items", "name", "posting_date", "customer", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'packed_items': ['!=', '']}, fields=['packed_items'])"
  },
 {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that contain product bundle help notes.",
      "top_fields": ["product_bundle_help", "name", "posting_date", "customer", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'product_bundle_help': ['!=', '']}, fields=['product_bundle_help', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices lack any product bundle help?",
      "top_fields": ["product_bundle_help", "name", "posting_date", "status", "company", "discount_amount"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'product_bundle_help': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with filled product bundle help info.",
      "top_fields": ["product_bundle_help", "is_pos", "posting_date", "name", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'product_bundle_help': ['!=', '']}, fields=['product_bundle_help', 'is_pos', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which return invoices include product bundle help descriptions?",
      "top_fields": ["product_bundle_help", "is_return", "posting_date", "name", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'product_bundle_help': ['!=', '']}, fields=['product_bundle_help', 'is_return', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices from today that have product bundle help filled?",
      "top_fields": ["product_bundle_help", "posting_date", "customer", "name", "status", "company"]
    },
    "output": "import datetime\n\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'product_bundle_help': ['!=', '']}, fields=['product_bundle_help', 'posting_date', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices from Q4 include product bundle help comments?",
      "top_fields": ["product_bundle_help", "posting_date", "customer", "name", "grand_total", "status"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 10, 1)\nend = datetime.date(datetime.date.today().year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'product_bundle_help': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['product_bundle_help', 'posting_date', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get product bundle help content along with customer name.",
      "top_fields": ["product_bundle_help", "customer", "posting_date", "name", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'product_bundle_help': ['!=', '']}, fields=['product_bundle_help', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with product bundle help and discount applied?",
      "top_fields": ["product_bundle_help", "discount_amount", "posting_date", "customer", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'product_bundle_help': ['!=', ''], 'discount_amount': ['>', 0]}, fields=['product_bundle_help', 'discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where product bundle help was recorded and paid online.",
      "top_fields": ["product_bundle_help", "is_online", "posting_date", "customer", "name", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'product_bundle_help': ['!=', ''], 'is_online': 1}, fields=['product_bundle_help', 'is_online'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Only show product bundle help text if available.",
      "top_fields": ["product_bundle_help", "name", "customer", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'product_bundle_help': ['!=', '']}, fields=['product_bundle_help'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that have associated timesheet entries.",
      "top_fields": ["time_sheet_list", "name", "customer", "posting_date", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'time_sheet_list': ['!=', '']}, fields=['time_sheet_list', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were linked with timesheet list?",
      "top_fields": ["time_sheet_list", "posting_date", "name", "status", "company", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'time_sheet_list': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all POS invoices that include time sheet list.",
      "top_fields": ["is_pos", "time_sheet_list", "name", "customer", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'time_sheet_list': ['!=', '']}, fields=['is_pos', 'time_sheet_list', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices in Q2 used time sheet list data?",
      "top_fields": ["time_sheet_list", "posting_date", "name", "company", "status", "customer"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'time_sheet_list': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['time_sheet_list', 'name', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where timesheet list was manually updated.",
      "top_fields": ["time_sheet_list", "modified_by", "name", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'time_sheet_list': ['!=', '']}, fields=['time_sheet_list', 'modified_by', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with both time sheet entries and discounts.",
      "top_fields": ["time_sheet_list", "discount_amount", "name", "customer", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'time_sheet_list': ['!=', ''], 'discount_amount': ['>', 0]}, fields=['time_sheet_list', 'discount_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices from today that include timesheet list.",
      "top_fields": ["time_sheet_list", "posting_date", "name", "status", "company", "customer"]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'time_sheet_list': ['!=', '']}, fields=['time_sheet_list', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with time sheet list and grand total over 10,000.",
      "top_fields": ["time_sheet_list", "grand_total", "posting_date", "name", "status", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'time_sheet_list': ['!=', ''], 'grand_total': ['>', 10000]}, fields=['time_sheet_list', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers submitted invoices with timesheet entries?",
      "top_fields": ["time_sheet_list", "customer", "posting_date", "name", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'time_sheet_list': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Only show timesheet list content if available.",
      "top_fields": ["time_sheet_list", "name", "customer", "posting_date", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'time_sheet_list': ['!=', '']}, fields=['time_sheet_list'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that contain timesheet entries.",
      "top_fields": ["timesheets", "name", "posting_date", "customer", "grand_total", "is_pos"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'timesheets': ['!=', '']}, fields=['timesheets'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many sales invoices include timesheets?",
      "top_fields": ["timesheets", "posting_date", "status", "name", "company", "is_return"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'timesheets': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices from July that include timesheets.",
      "top_fields": ["posting_date", "timesheets", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 7, 1)\nend = datetime.date(datetime.date.today().year, 7, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'timesheets': ['!=', '']}, fields=['posting_date', 'timesheets'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices where timesheets are used.",
      "top_fields": ["is_return", "timesheets", "posting_date", "name", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'timesheets': ['!=', '']}, fields=['is_return', 'timesheets'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any timesheet-based invoices created today?",
      "top_fields": ["posting_date", "timesheets", "status", "name", "discount_amount", "grand_total"]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'timesheets': ['!=', ''], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List customers linked to invoices using timesheets.",
      "top_fields": ["customer", "timesheets", "name", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'timesheets': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with timesheets and total above 5000.",
      "top_fields": ["timesheets", "grand_total", "customer", "posting_date", "status", "name"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'timesheets': ['!=', ''], 'grand_total': ['>', 5000]}, fields=['timesheets', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get the full list of timesheet values in invoices.",
      "top_fields": ["timesheets", "name", "grand_total", "posting_date", "is_pos", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'timesheets': ['!=', '']}, fields=['timesheets'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices that include timesheets.",
      "top_fields": ["is_pos", "timesheets", "posting_date", "name", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'timesheets': ['!=', '']}, fields=['is_pos', 'timesheets'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices where timesheets were manually added and discount exists.",
      "top_fields": ["timesheets", "discount_amount", "posting_date", "customer", "name", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'timesheets': ['!=', ''], 'discount_amount': ['>', 0]}, fields=['timesheets', 'discount_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with total billing hours greater than 20.",
      "top_fields": ["total_billing_hours", "name", "customer", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_billing_hours': ['>', 20]}, fields=['total_billing_hours', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had no total billing hours?",
      "top_fields": ["total_billing_hours", "status", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'total_billing_hours': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where total billing hours is under 10.",
      "top_fields": ["is_pos", "total_billing_hours", "name", "customer", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'total_billing_hours': ['<', 10]}, fields=['is_pos', 'total_billing_hours', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with more than 15 billing hours.",
      "top_fields": ["is_return", "total_billing_hours", "name", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'total_billing_hours': ['>', 15]}, fields=['is_return', 'total_billing_hours', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice today includes total billing hours.",
      "top_fields": ["total_billing_hours", "posting_date", "name", "customer", "grand_total", "status"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'total_billing_hours': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with total billing hours above 30?",
      "top_fields": ["customer", "total_billing_hours", "name", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_billing_hours': ['>', 30]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices from last month with over 10 billing hours.",
      "top_fields": ["total_billing_hours", "posting_date", "name", "customer", "grand_total", "company"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nfirst = today.replace(day=1)\nlast_month_end = first - datetime.timedelta(days=1)\nlast_month_start = last_month_end.replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'total_billing_hours': ['>', 10], 'posting_date': ['between', [last_month_start, last_month_end]]}, fields=['total_billing_hours', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What are the distinct total billing hour values recorded?",
      "top_fields": ["total_billing_hours", "name", "grand_total", "customer", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['total_billing_hours'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give average total billing hours this year.",
      "top_fields": ["total_billing_hours", "posting_date", "name", "grand_total", "company", "status"]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['total_billing_hours'])\navg = sum(flt(d.total_billing_hours) for d in data) / len(data) if data else 0\nprint('Average Total Billing Hours:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where total billing hours is not zero.",
      "top_fields": ["total_billing_hours", "name", "customer", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_billing_hours': ['!=', 0]}, fields=['total_billing_hours', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with total billing amount greater than 1000.",
      "top_fields": ["total_billing_amount", "name", "customer", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_billing_amount': ['>', 1000]}, fields=['total_billing_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had zero total billing amount?",
      "top_fields": ["total_billing_amount", "status", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'total_billing_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where the total billing amount is under 300.",
      "top_fields": ["is_pos", "total_billing_amount", "name", "customer", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'total_billing_amount': ['<', 300]}, fields=['is_pos', 'total_billing_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with total billing amount more than 1500.",
      "top_fields": ["is_return", "total_billing_amount", "name", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'total_billing_amount': ['>', 1500]}, fields=['is_return', 'total_billing_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoice today includes total billing amount.",
      "top_fields": ["total_billing_amount", "posting_date", "name", "customer", "grand_total", "status"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'total_billing_amount': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with total billing amount above 2000?",
      "top_fields": ["customer", "total_billing_amount", "name", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_billing_amount': ['>', 2000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices from this quarter with total billing amount over 800.",
      "top_fields": ["total_billing_amount", "posting_date", "name", "customer", "grand_total", "company"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nquarter = (today.month - 1) // 3 + 1\nstart = datetime.date(today.year, 3 * quarter - 2, 1)\nend = datetime.date(today.year, 3 * quarter + 1, 1) - datetime.timedelta(days=1)\nfrappe.get_all('Sales Invoice', filters={'total_billing_amount': ['>', 800], 'posting_date': ['between', [start, end]]}, fields=['total_billing_amount', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What are the distinct total billing amounts recorded?",
      "top_fields": ["total_billing_amount", "name", "grand_total", "customer", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['total_billing_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give average total billing amount in invoices this year.",
      "top_fields": ["total_billing_amount", "posting_date", "name", "grand_total", "company", "status"]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['total_billing_amount'])\navg = sum(flt(d.total_billing_amount) for d in data) / len(data) if data else 0\nprint('Average Total Billing Amount:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where total billing amount was not zero.",
      "top_fields": ["total_billing_amount", "name", "customer", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'total_billing_amount': ['!=', 0]}, fields=['total_billing_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that used the cash bank account 'HDFC Bank - ERPGulf'.",
      "top_fields": ["cash_bank_account", "name", "customer", "posting_date", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'cash_bank_account': 'HDFC Bank - ERPGulf'}, fields=['cash_bank_account', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices do not specify any cash bank account?",
      "top_fields": ["cash_bank_account", "status", "name", "posting_date", "company", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'cash_bank_account': ['is', 'null']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices linked to the cash bank account 'Cash - Main'.",
      "top_fields": ["is_pos", "cash_bank_account", "customer", "posting_date", "grand_total", "name"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'cash_bank_account': 'Cash - Main'}, fields=['is_pos', 'cash_bank_account', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices where the cash bank account was 'Petty Cash - HO'.",
      "top_fields": ["is_return", "cash_bank_account", "posting_date", "customer", "company", "name"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'cash_bank_account': 'Petty Cash - HO'}, fields=['is_return', 'cash_bank_account', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Did any invoice today use the cash bank account 'ICICI Bank - HO'?",
      "top_fields": ["cash_bank_account", "posting_date", "name", "status", "company", "customer"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'cash_bank_account': 'ICICI Bank - HO', 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers paid via 'SBI - Corporate' cash bank account?",
      "top_fields": ["cash_bank_account", "customer", "name", "grand_total", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'cash_bank_account': 'SBI - Corporate'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices from last quarter that used 'Cash - HO'.",
      "top_fields": ["cash_bank_account", "posting_date", "name", "customer", "grand_total", "company"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nquarter = (today.month - 1) // 3\nstart = datetime.date(today.year, quarter * 3 + 1, 1)\nend = datetime.date(today.year, quarter * 3 + 3, 1) - datetime.timedelta(days=1)\nfrappe.get_all('Sales Invoice', filters={'cash_bank_account': 'Cash - HO', 'posting_date': ['between', [start, end]]}, fields=['cash_bank_account', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What are the unique cash bank accounts used in invoices?",
      "top_fields": ["cash_bank_account", "name", "company", "grand_total", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['cash_bank_account'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoices where cash bank account was not empty.",
      "top_fields": ["cash_bank_account", "name", "customer", "posting_date", "company", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'cash_bank_account': ['!=', '']}, fields=['cash_bank_account', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices this year used 'Axis Bank - ERPGulf'?",
      "top_fields": ["cash_bank_account", "posting_date", "status", "name", "company", "customer"]
    },
    "output": "import datetime\n\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.db.count('Sales Invoice', filters={'cash_bank_account': 'Axis Bank - ERPGulf', 'posting_date': ['>=', start]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices that have any payments recorded.",
      "top_fields": ["payments", "name", "customer", "posting_date", "grand_total", "status"]
    },
    "output": "invoices = frappe.get_all('Sales Invoice', fields=['name'])\nresults = []\nfor inv in invoices:\n  doc = frappe.get_doc('Sales Invoice', inv.name)\n  if doc.payments:\n    results.append({'invoice': inv.name, 'payments': doc.payments})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices used cash for payment?",
      "top_fields": ["payments", "mode_of_payment", "name", "customer", "posting_date", "status"]
    },
    "output": "invoices = frappe.get_all('Sales Invoice', fields=['name'])\ncash_invoices = []\nfor inv in invoices:\n  doc = frappe.get_doc('Sales Invoice', inv.name)\n  for pay in doc.payments:\n    if pay.mode_of_payment == 'Cash':\n      cash_invoices.append(inv.name)\n      break"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check the payment breakdown for INV-0020.",
      "top_fields": ["payments", "mode_of_payment", "amount", "name", "posting_date", "customer"]
    },
    "output": "frappe.get_doc('Sales Invoice', 'INV-0020').payments"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices where total payments include any mode with amount over 5000.",
      "top_fields": ["payments", "amount", "mode_of_payment", "name", "customer", "company"]
    },
    "output": "matches = []\ninvoices = frappe.get_all('Sales Invoice', fields=['name'])\nfor inv in invoices:\n  doc = frappe.get_doc('Sales Invoice', inv.name)\n  for pay in doc.payments:\n    if pay.amount > 5000:\n      matches.append(inv.name)\n      break"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices include at least one payment entry?",
      "top_fields": ["payments", "name", "customer", "status", "posting_date", "grand_total"]
    },
    "output": "count = 0\ninvoices = frappe.get_all('Sales Invoice', fields=['name'])\nfor inv in invoices:\n  doc = frappe.get_doc('Sales Invoice', inv.name)\n  if doc.payments:\n    count += 1\nprint('Count with payments:', count)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with more than one payment method used.",
      "top_fields": ["payments", "mode_of_payment", "name", "posting_date", "grand_total", "company"]
    },
    "output": "multi_method = []\ninvoices = frappe.get_all('Sales Invoice', fields=['name'])\nfor inv in invoices:\n  doc = frappe.get_doc('Sales Invoice', inv.name)\n  if len(set(p.mode_of_payment for p in doc.payments)) > 1:\n    multi_method.append(inv.name)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with payment remarks containing the word 'advance'.",
      "top_fields": ["payments", "remarks", "name", "posting_date", "customer", "status"]
    },
    "output": "matches = []\ninvoices = frappe.get_all('Sales Invoice', fields=['name'])\nfor inv in invoices:\n  doc = frappe.get_doc('Sales Invoice', inv.name)\n  for pay in doc.payments:\n    if 'advance' in (pay.remarks or '').lower():\n      matches.append({'invoice': inv.name, 'remark': pay.remarks})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices received any card payment?",
      "top_fields": ["payments", "mode_of_payment", "amount", "name", "customer", "status"]
    },
    "output": "count = 0\ninvoices = frappe.get_all('Sales Invoice', fields=['name'])\nfor inv in invoices:\n  doc = frappe.get_doc('Sales Invoice', inv.name)\n  if any(p.mode_of_payment == 'Card' for p in doc.payments):\n    count += 1\nprint('Invoices with card payment:', count)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Retrieve all payment entries from invoice INV-1001.",
      "top_fields": ["payments", "mode_of_payment", "amount", "remarks", "name", "company"]
    },
    "output": "frappe.get_doc('Sales Invoice', 'INV-1001').payments"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get names of invoices that include both cash and credit card payments.",
      "top_fields": ["payments", "mode_of_payment", "name", "posting_date", "grand_total", "status"]
    },
    "output": "invoices = frappe.get_all('Sales Invoice', fields=['name'])\nmatches = []\nfor inv in invoices:\n  doc = frappe.get_doc('Sales Invoice', inv.name)\n  methods = set(p.mode_of_payment for p in doc.payments)\n  if 'Cash' in methods and 'Credit Card' in methods:\n    matches.append(inv.name)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with base paid amount greater than 2000.",
      "top_fields": ["base_paid_amount", "name", "customer", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_paid_amount': ['>', 2000]}, fields=['base_paid_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have base paid amount equal to zero?",
      "top_fields": ["base_paid_amount", "name", "posting_date", "customer", "status", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'base_paid_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with any base paid amount.",
      "top_fields": ["is_pos", "base_paid_amount", "name", "grand_total", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'base_paid_amount': ['>', 0]}, fields=['is_pos', 'base_paid_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with base paid amount below 500.",
      "top_fields": ["is_return", "base_paid_amount", "name", "grand_total", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'base_paid_amount': ['<', 500]}, fields=['is_return', 'base_paid_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices posted today with base paid amount recorded.",
      "top_fields": ["base_paid_amount", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'base_paid_amount': ['>', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers made large payments over 10,000 base amount?",
      "top_fields": ["base_paid_amount", "customer", "name", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_paid_amount': ['>', 10000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices from Q4 with base paid amount over 1000?",
      "top_fields": ["base_paid_amount", "posting_date", "name", "customer", "company", "status"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 10, 1)\nend = datetime.date(today.year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'base_paid_amount': ['>', 1000], 'posting_date': ['between', [start, end]]}, fields=['base_paid_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct base paid amounts used across invoices.",
      "top_fields": ["base_paid_amount", "name", "grand_total", "customer", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['base_paid_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Average base paid amount in current fiscal year invoices?",
      "top_fields": ["base_paid_amount", "posting_date", "name", "grand_total", "customer", "status"]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['base_paid_amount'])\navg = sum(flt(d.base_paid_amount) for d in data) / len(data) if data else 0\nprint('Average Base Paid Amount:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with non-zero base paid amount.",
      "top_fields": ["base_paid_amount", "name", "customer", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_paid_amount': ['!=', 0]}, fields=['base_paid_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with paid amount greater than 3000.",
      "top_fields": ["paid_amount", "name", "customer", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'paid_amount': ['>', 3000]}, fields=['paid_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were paid zero?",
      "top_fields": ["paid_amount", "posting_date", "name", "company", "customer", "status"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'paid_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices with any paid amount recorded.",
      "top_fields": ["is_pos", "paid_amount", "name", "grand_total", "company", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'paid_amount': ['>', 0]}, fields=['is_pos', 'paid_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices with paid amount less than 1000.",
      "top_fields": ["is_return", "paid_amount", "name", "customer", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'paid_amount': ['<', 1000]}, fields=['is_return', 'paid_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices posted today with paid amount?",
      "top_fields": ["paid_amount", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'paid_amount': ['>', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers paid more than 8000?",
      "top_fields": ["paid_amount", "customer", "name", "grand_total", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'paid_amount': ['>', 8000]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices from Q2 with paid amount over 1500?",
      "top_fields": ["paid_amount", "posting_date", "name", "company", "customer", "status"]
    },
    "output": "import datetime\n\ntoday = datetime.date.today()\nstart = datetime.date(today.year, 4, 1)\nend = datetime.date(today.year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'paid_amount': ['>', 1500], 'posting_date': ['between', [start, end]]}, fields=['paid_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all distinct paid amounts.",
      "top_fields": ["paid_amount", "name", "grand_total", "posting_date", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['paid_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What is the average paid amount this year?",
      "top_fields": ["paid_amount", "posting_date", "name", "company", "status", "customer"]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['paid_amount'])\navg = sum(flt(d.paid_amount) for d in data) / len(data) if data else 0\nprint('Average Paid Amount:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with non-zero paid amount.",
      "top_fields": ["paid_amount", "name", "customer", "grand_total", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'paid_amount': ['!=', 0]}, fields=['paid_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where the base change amount exceeds 200.",
      "top_fields": ["base_change_amount", "name", "customer", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_change_amount': ['>', 200]}, fields=['base_change_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had zero base change amount?",
      "top_fields": ["base_change_amount", "name", "posting_date", "company", "status", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'base_change_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices that had some base change amount.",
      "top_fields": ["is_pos", "base_change_amount", "name", "customer", "company", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'base_change_amount': ['!=', 0]}, fields=['is_pos', 'base_change_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices created today with any base change amount.",
      "top_fields": ["base_change_amount", "posting_date", "name", "customer", "company", "status"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'base_change_amount': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with base change amount less than 100 and customer is ABC Corp.",
      "top_fields": ["base_change_amount", "customer", "name", "grand_total", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_change_amount': ['<', 100], 'customer': 'ABC Corp'}, fields=['base_change_amount', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct base change amounts used this year.",
      "top_fields": ["base_change_amount", "posting_date", "name", "status", "company", "customer"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['base_change_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What is the average base change amount across all invoices?",
      "top_fields": ["base_change_amount", "name", "customer", "posting_date", "company", "status"]
    },
    "output": "data = frappe.get_all('Sales Invoice', fields=['base_change_amount'])\ntotal = sum(f.base_change_amount for f in data)\navg = total / len(data) if data else 0\nprint('Average Base Change Amount:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices in Q4 with base change amount above 500?",
      "top_fields": ["base_change_amount", "posting_date", "name", "customer", "company", "status"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 10, 1)\nend = datetime.date(datetime.date.today().year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'base_change_amount': ['>', 500], 'posting_date': ['between', [start, end]]}, fields=['base_change_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which return invoices had any base change amount?",
      "top_fields": ["is_return", "base_change_amount", "name", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'base_change_amount': ['!=', 0]}, fields=['is_return', 'base_change_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with non-zero base change amount and customer name.",
      "top_fields": ["base_change_amount", "customer", "name", "status", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_change_amount': ['!=', 0]}, fields=['base_change_amount', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the change amount is more than 100.",
      "top_fields": ["change_amount", "name", "posting_date", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'change_amount': ['>', 100]}, fields=['change_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had no change amount?",
      "top_fields": ["change_amount", "posting_date", "company", "status", "name", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'change_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with change amount not equal to zero.",
      "top_fields": ["is_return", "change_amount", "name", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'change_amount': ['!=', 0]}, fields=['is_return', 'change_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices with any change amount.",
      "top_fields": ["is_pos", "change_amount", "name", "company", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'change_amount': ['!=', 0]}, fields=['is_pos', 'change_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices created today with change amount present?",
      "top_fields": ["change_amount", "posting_date", "name", "customer", "grand_total", "status"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'change_amount': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give distinct change amounts from sales invoices.",
      "top_fields": ["change_amount", "name", "company", "status", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['change_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices with change amount under 50 for company Acme Ltd.",
      "top_fields": ["change_amount", "company", "name", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'change_amount': ['<', 50], 'company': 'Acme Ltd.'}, fields=['change_amount', 'company'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Whatâ€™s the average change amount for the current month?",
      "top_fields": ["change_amount", "posting_date", "name", "customer", "company", "status"]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['change_amount'])\nfrom frappe.utils import flt\navg = sum(flt(d.change_amount) for d in data) / len(data) if data else 0\nprint('Average Change Amount:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check invoices with customer and change amount not zero.",
      "top_fields": ["change_amount", "customer", "name", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'change_amount': ['!=', 0]}, fields=['change_amount', 'customer', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices in Q1 with a change amount greater than 75.",
      "top_fields": ["change_amount", "posting_date", "name", "grand_total", "company", "status"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'change_amount': ['>', 75], 'posting_date': ['between', [start, end]]}, fields=['change_amount', 'posting_date', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices where change amount was recorded in a specific account.",
      "top_fields": ["account_for_change_amount", "name", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'account_for_change_amount': ['!=', '']}, fields=['account_for_change_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have a change amount account specified?",
      "top_fields": ["account_for_change_amount", "status", "name", "posting_date", "company", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'account_for_change_amount': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that use 'Cash - TEST' for change amount accounting.",
      "top_fields": ["account_for_change_amount", "name", "company", "customer", "status", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'account_for_change_amount': 'Cash - TEST'}, fields=['account_for_change_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with a change amount account used.",
      "top_fields": ["is_pos", "account_for_change_amount", "name", "posting_date", "status", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'account_for_change_amount': ['!=', '']}, fields=['is_pos', 'account_for_change_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices from today where change amount was tracked to an account?",
      "top_fields": ["posting_date", "account_for_change_amount", "name", "status", "company", "customer"]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'account_for_change_amount': ['!=', ''], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all return invoices that recorded a change amount account.",
      "top_fields": ["is_return", "account_for_change_amount", "name", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'account_for_change_amount': ['!=', '']}, fields=['is_return', 'account_for_change_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find distinct accounts used to record change amounts.",
      "top_fields": ["account_for_change_amount", "name", "posting_date", "status", "company", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['account_for_change_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices with a change amount account?",
      "top_fields": ["account_for_change_amount", "customer", "name", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'account_for_change_amount': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices using a specific account for change amount in Q2.",
      "top_fields": ["account_for_change_amount", "posting_date", "name", "status", "company", "customer"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'account_for_change_amount': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['account_for_change_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do any draft invoices include an account for change amount?",
      "top_fields": ["account_for_change_amount", "status", "name", "company", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': 'Draft', 'account_for_change_amount': ['!=', '']}, fields=['account_for_change_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices that have automatic advance allocation enabled.",
      "top_fields": ["allocate_advances_automatically", "name", "customer", "posting_date", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'allocate_advances_automatically': 1}, fields=['allocate_advances_automatically', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where advances were not allocated automatically.",
      "top_fields": ["allocate_advances_automatically", "posting_date", "name", "customer", "is_pos", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'allocate_advances_automatically': 0}, fields=['allocate_advances_automatically', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices used automatic allocation of advances?",
      "top_fields": ["allocate_advances_automatically", "status", "posting_date", "company", "customer", "name"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'allocate_advances_automatically': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any POS invoices with automatic advance allocation enabled?",
      "top_fields": ["allocate_advances_automatically", "is_pos", "name", "posting_date", "grand_total", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'allocate_advances_automatically': 1}, fields=['is_pos', 'allocate_advances_automatically', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with advance allocation turned on and payment already made.",
      "top_fields": ["allocate_advances_automatically", "paid_amount", "name", "status", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'allocate_advances_automatically': 1, 'paid_amount': ['>', 0]}, fields=['paid_amount', 'allocate_advances_automatically', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices created this month auto allocated advances?",
      "top_fields": ["allocate_advances_automatically", "posting_date", "name", "status", "company", "customer"]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'allocate_advances_automatically': 1, 'posting_date': ['>=', start]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoices from last week used automatic advance allocation.",
      "top_fields": ["allocate_advances_automatically", "posting_date", "name", "customer", "grand_total", "company"]
    },
    "output": "import datetime\ntoday = datetime.date.today()\nstart = today - datetime.timedelta(days=7)\nfrappe.db.exists('Sales Invoice', {'allocate_advances_automatically': 1, 'posting_date': ['between', [start, today]]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give total count of invoices with advance allocation off.",
      "top_fields": ["allocate_advances_automatically", "posting_date", "name", "company", "status", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'allocate_advances_automatically': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export names of invoices with advance allocation turned on.",
      "top_fields": ["allocate_advances_automatically", "name", "customer", "posting_date", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'allocate_advances_automatically': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get a list of invoices with auto allocation and company is Qatcom.",
      "top_fields": ["allocate_advances_automatically", "company", "name", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'allocate_advances_automatically': 1, 'company': 'Qatcom'}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where only allocated payments were included.",
      "top_fields": ["only_include_allocated_payments", "name", "posting_date", "status", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'only_include_allocated_payments': 1}, fields=['only_include_allocated_payments', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices that excluded unallocated payments.",
      "top_fields": ["only_include_allocated_payments", "name", "status", "posting_date", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'only_include_allocated_payments': 1}, fields=['only_include_allocated_payments', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices don't include only allocated payments?",
      "top_fields": ["only_include_allocated_payments", "status", "name", "posting_date", "company", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'only_include_allocated_payments': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices from last month with only allocated payments.",
      "top_fields": ["only_include_allocated_payments", "posting_date", "name", "status", "customer", "company"]
    },
    "output": "import datetime\nfrom frappe.utils import add_months\nstart = add_months(datetime.date.today().replace(day=1), -1)\nend = datetime.date.today().replace(day=1) - datetime.timedelta(days=1)\nfrappe.get_all('Sales Invoice', filters={'only_include_allocated_payments': 1, 'posting_date': ['between', [start, end]]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoices created today use only allocated payments.",
      "top_fields": ["only_include_allocated_payments", "posting_date", "name", "customer", "status", "company"]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'only_include_allocated_payments': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get names of invoices that included only allocated payments.",
      "top_fields": ["only_include_allocated_payments", "name", "status", "customer", "company", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'only_include_allocated_payments': 1}, fields=['only_include_allocated_payments', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices that included only allocated payments?",
      "top_fields": ["only_include_allocated_payments", "customer", "name", "status", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'only_include_allocated_payments': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices using only allocated payments.",
      "top_fields": ["only_include_allocated_payments", "is_pos", "name", "posting_date", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'only_include_allocated_payments': 1}, fields=['is_pos', 'only_include_allocated_payments', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give return invoices that donâ€™t use only allocated payments.",
      "top_fields": ["only_include_allocated_payments", "is_return", "name", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'only_include_allocated_payments': 0}, fields=['is_return', 'only_include_allocated_payments', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices that did not include only allocated payments.",
      "top_fields": ["only_include_allocated_payments", "name", "posting_date", "status", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'only_include_allocated_payments': 0}, fields=['only_include_allocated_payments', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where advances were fetched.",
      "top_fields": ["get_advances", "name", "posting_date", "status", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'get_advances': 1}, fields=['get_advances', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have not fetched any advances?",
      "top_fields": ["get_advances", "status", "name", "customer", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'get_advances': 0}, fields=['get_advances', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have advances pulled in?",
      "top_fields": ["get_advances", "status", "name", "company", "customer", "posting_date"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'get_advances': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices that fetched advances.",
      "top_fields": ["get_advances", "is_return", "name", "status", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'get_advances': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any POS invoices fetched advances.",
      "top_fields": ["get_advances", "is_pos", "name", "status", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'get_advances': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices created today where advances were fetched.",
      "top_fields": ["get_advances", "posting_date", "name", "status", "company", "customer"]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'get_advances': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices with fetched advances and customer data.",
      "top_fields": ["get_advances", "customer", "name", "company", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'get_advances': 1}, fields=['name', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoices with fetched advances and grand total above 1000.",
      "top_fields": ["get_advances", "grand_total", "name", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'get_advances': 1, 'grand_total': ['>', 1000]}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which companies had invoices with fetched advances?",
      "top_fields": ["get_advances", "company", "name", "status", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'get_advances': 1}, fields=['company'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with advances fetched and status as Paid.",
      "top_fields": ["get_advances", "status", "name", "posting_date", "company", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'get_advances': 1, 'status': 'Paid'}, fields=['name', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices that have advance payments linked.",
      "top_fields": ["advances", "name", "posting_date", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': ['!=', None]}, fields=['advances'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices donâ€™t have any advances?",
      "top_fields": ["advances", "name", "status", "posting_date", "company", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': None}, fields=['advances'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoice numbers and their advances if available.",
      "top_fields": ["advances", "name", "customer", "grand_total", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': ['!=', None]}, fields=['name', 'advances'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all return invoices that had advances linked.",
      "top_fields": ["advances", "is_return", "name", "customer", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'advances': ['!=', None]}, fields=['name', 'advances'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have any advances attached?",
      "top_fields": ["advances", "posting_date", "name", "customer", "grand_total", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'advances': ['!=', None]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices with advances and customer info.",
      "top_fields": ["advances", "customer", "name", "status", "company", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': ['!=', None]}, fields=['name', 'customer', 'advances'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices with advances and status marked as Paid.",
      "top_fields": ["advances", "status", "name", "grand_total", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': ['!=', None], 'status': 'Paid'}, fields=['name', 'status', 'advances'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices that include advances?",
      "top_fields": ["advances", "customer", "name", "company", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': ['!=', None]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoices with more than 2 advance entries.",
      "top_fields": ["advances", "name", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={}, fields=['name', 'advances'])  # Post-process: len(invoice.advances) > 2"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with advances and their grand total.",
      "top_fields": ["advances", "grand_total", "name", "company", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': ['!=', None]}, fields=['name', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me invoices that include advance payments.",
      "top_fields": ["advances", "name", "customer", "grand_total", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': ['!=', []]}, fields=['name', 'advances'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices with non-empty advances.",
      "top_fields": ["advances", "name", "posting_date", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': ['!=', []]}, fields=['name', 'advances'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have advance payments from customer 'ABC Corp'?",
      "top_fields": ["advances", "customer", "name", "status", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': ['!=', []], 'customer': 'ABC Corp'}, fields=['name', 'customer'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if invoice INV-0005 has any advances.",
      "top_fields": ["advances", "name", "customer", "grand_total", "status", "company"]
    },
    "output": "frappe.db.exists('Sales Invoice', {'name': 'INV-0005', 'advances': ['!=', []]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices that applied advances and are marked Paid.",
      "top_fields": ["advances", "status", "name", "customer", "company", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': 'Paid', 'advances': ['!=', []]}, fields=['name', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export customer and grand total where advances are used.",
      "top_fields": ["advances", "customer", "grand_total", "name", "company", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': ['!=', []]}, fields=['customer', 'grand_total'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do we have any advances applied today?",
      "top_fields": ["advances", "posting_date", "name", "customer", "status", "company"]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'posting_date': datetime.date.today(), 'advances': ['!=', []]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with both advances and return status.",
      "top_fields": ["advances", "is_return", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'advances': ['!=', []]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices using advance payments and POS checked.",
      "top_fields": ["advances", "is_pos", "name", "status", "customer", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'advances': ['!=', []]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which companies had invoices with applied advances?",
      "top_fields": ["advances", "company", "name", "status", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': ['!=', []]}, fields=['company'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices with a write-off amount above 200.",
      "top_fields": ["write_off_amount", "name", "posting_date", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_amount': ['>', 200]}, fields=['write_off_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have zero write-off amount?",
      "top_fields": ["write_off_amount", "name", "status", "customer", "company", "posting_date"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'write_off_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with non-zero write-off amounts for customer John Doe.",
      "top_fields": ["write_off_amount", "customer", "name", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_amount': ['!=', 0], 'customer': 'John Doe'}, fields=['name', 'write_off_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where write-off amount was manually added.",
      "top_fields": ["write_off_amount", "write_off_outstanding_amount_automatically", "name", "status", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_outstanding_amount_automatically': 0, 'write_off_amount': ['>', 0]}, fields=['name', 'write_off_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check invoices that have both advances and write-offs.",
      "top_fields": ["write_off_amount", "advances", "name", "customer", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'advances': ['!=', []], 'write_off_amount': ['>', 0]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any POS invoices with write-off amounts?",
      "top_fields": ["write_off_amount", "is_pos", "name", "customer", "status", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'write_off_amount': ['>', 0]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with write-offs done this month.",
      "top_fields": ["write_off_amount", "posting_date", "name", "company", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'write_off_amount': ['>', 0], 'posting_date': ['>=', start]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many companies applied write-offs last year?",
      "top_fields": ["write_off_amount", "posting_date", "company", "name", "customer", "status"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year - 1, 1, 1)\nend = datetime.date(datetime.date.today().year - 1, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'write_off_amount': ['>', 0], 'posting_date': ['between', [start, end]]}, fields=['company'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Average write-off amount for returned invoices?",
      "top_fields": ["write_off_amount", "is_return", "name", "posting_date", "status", "customer"]
    },
    "output": "data = frappe.get_all('Sales Invoice', filters={'is_return': 1}, fields=['write_off_amount'])\navg = sum(d.write_off_amount for d in data) / len(data) if data else 0\nprint('Avg Write-Off:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with write-offs greater than 50 and less than 200.",
      "top_fields": ["write_off_amount", "name", "posting_date", "company", "status", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_amount': ['between', [50, 200]]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with base write-off amount above 100.",
      "top_fields": ["base_write_off_amount", "name", "posting_date", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_write_off_amount': ['>', 100]}, fields=['base_write_off_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices with no base write-off amount.",
      "top_fields": ["base_write_off_amount", "name", "status", "customer", "company", "posting_date"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'base_write_off_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where base write-off amount is between 50 and 150.",
      "top_fields": ["base_write_off_amount", "name", "posting_date", "status", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_write_off_amount': ['between', [50, 150]]}, fields=['base_write_off_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices with base write-off amount more than 200.",
      "top_fields": ["base_write_off_amount", "is_return", "name", "customer", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'base_write_off_amount': ['>', 200]}, fields=['name', 'base_write_off_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with both base and normal write-off amount over 50.",
      "top_fields": ["base_write_off_amount", "write_off_amount", "name", "posting_date", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'base_write_off_amount': ['>', 50], 'write_off_amount': ['>', 50]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices for company 'HTS Qatar' with base write-off above 75.",
      "top_fields": ["base_write_off_amount", "company", "name", "posting_date", "status", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company': 'HTS Qatar', 'base_write_off_amount': ['>', 75]}, fields=['name', 'base_write_off_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Is there any POS invoice with base write-off amount?",
      "top_fields": ["is_pos", "base_write_off_amount", "name", "posting_date", "status", "company"]
    },
    "output": "frappe.db.exists('Sales Invoice', {'is_pos': 1, 'base_write_off_amount': ['>', 0]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Average base write-off amount this quarter?",
      "top_fields": ["base_write_off_amount", "posting_date", "name", "company", "status", "customer"]
    },
    "output": "import datetime\nnow = datetime.date.today()\nq_start = datetime.date(now.year, 4, 1) if now.month <= 6 else datetime.date(now.year, 7, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', q_start]}, fields=['base_write_off_amount'])\navg = sum(d.base_write_off_amount for d in data) / len(data) if data else 0\nprint('Avg Base Write-Off:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct base write-off values used in invoices.",
      "top_fields": ["base_write_off_amount", "name", "posting_date", "company", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['base_write_off_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices created this year with non-zero base write-off.",
      "top_fields": ["base_write_off_amount", "posting_date", "name", "status", "company", "customer"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'base_write_off_amount': ['!=', 0], 'posting_date': ['>=', start]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where write off outstanding amount automatically is enabled.",
      "top_fields": ["write_off_outstanding_amount_automatically", "name", "posting_date", "customer", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_outstanding_amount_automatically': 1}, fields=['write_off_outstanding_amount_automatically'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have automatic write off disabled?",
      "top_fields": ["write_off_outstanding_amount_automatically", "name", "status", "posting_date", "company", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'write_off_outstanding_amount_automatically': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get names of invoices with auto write off enabled.",
      "top_fields": ["write_off_outstanding_amount_automatically", "name", "customer", "status", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_outstanding_amount_automatically': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices where auto write off is applied.",
      "top_fields": ["write_off_outstanding_amount_automatically", "is_return", "name", "posting_date", "status", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'write_off_outstanding_amount_automatically': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoices auto write off is applied for a POS sale.",
      "top_fields": ["is_pos", "write_off_outstanding_amount_automatically", "name", "status", "company", "posting_date"]
    },
    "output": "frappe.db.exists('Sales Invoice', {'is_pos': 1, 'write_off_outstanding_amount_automatically': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find distinct values used in write off auto mode.",
      "top_fields": ["write_off_outstanding_amount_automatically", "name", "status", "company", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['write_off_outstanding_amount_automatically'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices posted this month with automatic write off enabled?",
      "top_fields": ["write_off_outstanding_amount_automatically", "posting_date", "name", "company", "status", "customer"]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'write_off_outstanding_amount_automatically': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List customers where invoices had write off auto mode.",
      "top_fields": ["write_off_outstanding_amount_automatically", "customer", "name", "company", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_outstanding_amount_automatically': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where auto write off is not used.",
      "top_fields": ["write_off_outstanding_amount_automatically", "name", "status", "posting_date", "company", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_outstanding_amount_automatically': 0}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Total invoices with write off auto mode set either way?",
      "top_fields": ["write_off_outstanding_amount_automatically", "name", "posting_date", "status", "company", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices used 'Bad Debts' as their write-off account?",
      "top_fields": ["write_off_account", "name", "customer", "grand_total", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_account': 'Bad Debts'}, fields=['write_off_account', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices written off through the 'Loss Reserve' account this quarter.",
      "top_fields": ["write_off_account", "posting_date", "name", "grand_total", "company", "customer"]
    },
    "output": "import datetime\nnow = datetime.date.today()\nq_start = datetime.date(now.year, 1 if now.month <= 3 else 4 if now.month <= 6 else 7 if now.month <= 9 else 10, 1)\nfrappe.get_all('Sales Invoice', filters={'write_off_account': 'Loss Reserve', 'posting_date': ['>=', q_start]}, fields=['write_off_account', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices from 2024 had 'Bad Debts' as write-off account?",
      "top_fields": ["write_off_account", "posting_date", "name", "grand_total", "status", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'write_off_account': 'Bad Debts', 'posting_date': ['between', ['2024-01-01', '2024-12-31']]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct write-off accounts used across all invoices.",
      "top_fields": ["write_off_account", "company", "customer", "grand_total", "status", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['write_off_account'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any return invoices that used a write-off account?",
      "top_fields": ["write_off_account", "is_return", "name", "posting_date", "company", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'write_off_account': ['!=', '']}, fields=['write_off_account', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices where write-off account is not blank.",
      "fields": ["write_off_account"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_account': ['!=', '']}, fields=['write_off_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count invoices that used 'Misc Adjustments' as write-off account.",
      "fields": ["write_off_account"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'write_off_account': 'Misc Adjustments'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return POS invoices using the write-off account 'Loss Reserve'.",
      "fields": ["is_return", "is_pos", "write_off_account"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'is_pos': 1, 'write_off_account': 'Loss Reserve'}, fields=['is_return', 'is_pos', 'write_off_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which write-off accounts were used in January invoices?",
      "fields": ["write_off_account", "posting_date"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 1, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['write_off_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct write-off accounts used in paid invoices.",
      "fields": ["write_off_account", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': 'Paid'}, fields=['write_off_account'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where the write-off account is filled.",
      "top_fields": ["write_off_account", "name", "customer", "status", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_account': ['!=', '']}, fields=['write_off_account', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices used 'Write Off Expenses' as the write-off account?",
      "top_fields": ["write_off_account", "is_return", "posting_date", "name", "status", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'write_off_account': 'Write Off Expenses', 'is_return': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices from Q2 that have a write-off account assigned.",
      "top_fields": ["write_off_account", "is_pos", "posting_date", "name", "customer", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'is_pos': 1, 'posting_date': ['between', [start, end]], 'write_off_account': ['!=', '']}, fields=['write_off_account', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which write-off accounts were used by Company XYZ?",
      "top_fields": ["write_off_account", "company", "name", "status", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company': 'Company XYZ'}, fields=['write_off_account'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices with status 'Cancelled' and non-empty write-off account.",
      "top_fields": ["write_off_account", "status", "name", "company", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': 'Cancelled', 'write_off_account': ['!=', '']}, fields=['write_off_account', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices linked to the write-off cost center named 'Main Operations'.",
      "top_fields": ["write_off_cost_center", "customer", "posting_date", "name", "company", "outstanding_amount"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_cost_center': 'Main Operations'}, fields=['write_off_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where the write-off cost center is missing.",
      "top_fields": ["write_off_cost_center", "name", "grand_total", "status", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_cost_center': ''}, fields=['write_off_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices used the Finance write-off cost center?",
      "top_fields": ["write_off_cost_center", "posting_date", "customer", "status", "name", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'write_off_cost_center': 'Finance'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with write-off cost center set to 'General'.",
      "top_fields": ["write_off_cost_center", "name", "customer", "company", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_cost_center': 'General'}, fields=['write_off_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct write-off cost centers from all invoices.",
      "top_fields": ["write_off_cost_center", "name", "posting_date", "company", "status", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['write_off_cost_center'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have write-off cost center as 'Corporate Overhead'?",
      "top_fields": ["write_off_cost_center", "name", "posting_date", "grand_total", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_cost_center': 'Corporate Overhead'}, fields=['write_off_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with write-off cost center not equal to 'Admin'.",
      "top_fields": ["write_off_cost_center", "customer", "name", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'write_off_cost_center': ['!=', 'Admin']}, fields=['write_off_cost_center'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What are the most used write-off cost centers this year?",
      "top_fields": ["write_off_cost_center", "posting_date", "name", "company", "status", "customer"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['write_off_cost_center'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoices this month used the Operations cost center for write-offs.",
      "top_fields": ["write_off_cost_center", "posting_date", "name", "customer", "grand_total", "company"]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.db.exists('Sales Invoice', {'write_off_cost_center': 'Operations', 'posting_date': ['>=', start]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices grouped by write-off cost center.",
      "top_fields": ["write_off_cost_center", "name", "company", "posting_date", "status", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['write_off_cost_center'], group_by='write_off_cost_center')"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where loyalty points were redeemed.",
      "top_fields": ["loyalty_points_redemption", "name", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_points_redemption': 1}, fields=['loyalty_points_redemption', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices did not involve loyalty point redemption?",
      "top_fields": ["loyalty_points_redemption", "name", "company", "customer", "status", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_points_redemption': 0}, fields=['loyalty_points_redemption', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices that applied loyalty point redemption.",
      "top_fields": ["is_pos", "loyalty_points_redemption", "grand_total", "name", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'loyalty_points_redemption': 1}, fields=['is_pos', 'loyalty_points_redemption', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any customer used loyalty points on today's invoices?",
      "top_fields": ["loyalty_points_redemption", "posting_date", "customer", "name", "company", "status"]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'loyalty_points_redemption': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List customer names where loyalty points were redeemed.",
      "top_fields": ["loyalty_points_redemption", "customer", "posting_date", "company", "name", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_points_redemption': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices this year included loyalty redemptions?",
      "top_fields": ["loyalty_points_redemption", "posting_date", "status", "customer", "name", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.db.count('Sales Invoice', filters={'loyalty_points_redemption': 1, 'posting_date': ['>=', start]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoice IDs that applied loyalty redemption and have grand total over 1000.",
      "top_fields": ["loyalty_points_redemption", "grand_total", "name", "posting_date", "company", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_points_redemption': 1, 'grand_total': ['>', 1000]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which companies have used loyalty point redemption?",
      "top_fields": ["loyalty_points_redemption", "company", "posting_date", "customer", "status", "name"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_points_redemption': 1}, fields=['company'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do any draft invoices apply loyalty points?",
      "top_fields": ["loyalty_points_redemption", "status", "name", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.db.exists('Sales Invoice', {'loyalty_points_redemption': 1, 'status': 'Draft'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List return invoices with loyalty point redemptions.",
      "top_fields": ["loyalty_points_redemption", "is_return", "name", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'loyalty_points_redemption': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where loyalty points were requested for redemption.",
      "top_fields": ["redeem_loyalty_points", "name", "customer", "grand_total", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'redeem_loyalty_points': 1}, fields=['redeem_loyalty_points', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices did not request loyalty point redemption?",
      "top_fields": ["redeem_loyalty_points", "customer", "name", "status", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'redeem_loyalty_points': 0}, fields=['redeem_loyalty_points', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where loyalty points were set to redeem.",
      "top_fields": ["is_pos", "redeem_loyalty_points", "name", "grand_total", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'redeem_loyalty_points': 1}, fields=['is_pos', 'redeem_loyalty_points'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check today's invoices that used loyalty redemption option.",
      "top_fields": ["redeem_loyalty_points", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nfrappe.db.exists('Sales Invoice', {'redeem_loyalty_points': 1, 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices this month have loyalty redemption applied?",
      "top_fields": ["redeem_loyalty_points", "posting_date", "name", "company", "customer", "status"]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.db.count('Sales Invoice', filters={'redeem_loyalty_points': 1, 'posting_date': ['>=', start]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List customers whose invoices had redeem_loyalty_points enabled.",
      "top_fields": ["redeem_loyalty_points", "customer", "posting_date", "status", "name", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'redeem_loyalty_points': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices that requested loyalty point redemption.",
      "top_fields": ["redeem_loyalty_points", "is_return", "name", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'redeem_loyalty_points': 1}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many submitted invoices requested loyalty point redemption?",
      "top_fields": ["redeem_loyalty_points", "docstatus", "name", "customer", "status", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'redeem_loyalty_points': 1, 'docstatus': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoice IDs that used loyalty redemption and had total over 1000.",
      "top_fields": ["redeem_loyalty_points", "grand_total", "name", "company", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'redeem_loyalty_points': 1, 'grand_total': ['>', 1000]}, fields=['name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which companies enabled loyalty redemption in invoices?",
      "top_fields": ["redeem_loyalty_points", "company", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'redeem_loyalty_points': 1}, fields=['company'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where loyalty points used were more than 50.",
      "top_fields": ["loyalty_points", "name", "customer", "status", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_points': ['>', 50]}, fields=['loyalty_points', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had zero loyalty points redeemed?",
      "top_fields": ["loyalty_points", "status", "posting_date", "customer", "company", "name"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'loyalty_points': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all return invoices with loyalty points more than 100.",
      "top_fields": ["loyalty_points", "is_return", "customer", "name", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'loyalty_points': ['>', 100]}, fields=['is_return', 'loyalty_points'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers redeemed over 200 loyalty points?",
      "top_fields": ["loyalty_points", "customer", "posting_date", "grand_total", "name", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_points': ['>', 200]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Average loyalty points used in this monthâ€™s invoices?",
      "top_fields": ["loyalty_points", "posting_date", "name", "customer", "grand_total", "status"]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date.today().replace(day=1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['loyalty_points'])\navg = sum(flt(d.loyalty_points) for d in data) / len(data) if data else 0\nprint('Average Loyalty Points:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices using loyalty points and paid via cash.",
      "top_fields": ["loyalty_points", "mode_of_payment", "customer", "posting_date", "status", "name"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_points': ['>', 0], 'mode_of_payment': 'Cash'}, fields=['loyalty_points', 'mode_of_payment'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any POS invoices with loyalty points used?",
      "top_fields": ["loyalty_points", "is_pos", "posting_date", "status", "name", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'loyalty_points': ['>', 0]}, fields=['loyalty_points'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices in Q2 that used loyalty points.",
      "top_fields": ["loyalty_points", "posting_date", "customer", "name", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'loyalty_points': ['>', 0], 'posting_date': ['between', [start, end]]}, fields=['loyalty_points', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices had loyalty points but are not finalized yet?",
      "top_fields": ["loyalty_points", "status", "name", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_points': ['>', 0], 'status': ['!=', 'Paid']}, fields=['loyalty_points', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export all loyalty points transactions this year.",
      "top_fields": ["loyalty_points", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'loyalty_points': ['>', 0]}, fields=['name', 'loyalty_points', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where loyalty amount is more than 200.",
      "top_fields": ["loyalty_amount", "name", "customer", "grand_total", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_amount': ['>', 200]}, fields=['loyalty_amount', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices had zero loyalty amount?",
      "top_fields": ["loyalty_amount", "status", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'loyalty_amount': 0})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices where loyalty amount was under 100.",
      "top_fields": ["is_pos", "loyalty_amount", "name", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'loyalty_amount': ['<', 100]}, fields=['is_pos', 'loyalty_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find return invoices with loyalty amount over 300.",
      "top_fields": ["is_return", "loyalty_amount", "name", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'loyalty_amount': ['>', 300]}, fields=['is_return', 'loyalty_amount'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check invoices created today with loyalty amount used.",
      "top_fields": ["loyalty_amount", "posting_date", "name", "customer", "grand_total", "status"]
    },
    "output": "import datetime\n\nfrappe.db.exists('Sales Invoice', {'loyalty_amount': ['!=', 0], 'posting_date': datetime.date.today()})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers used loyalty amount more than 500?",
      "top_fields": ["loyalty_amount", "customer", "name", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_amount': ['>', 500]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give invoices in Q4 using loyalty amount over 100.",
      "top_fields": ["loyalty_amount", "posting_date", "name", "customer", "grand_total", "status"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 10, 1)\nend = datetime.date(datetime.date.today().year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'loyalty_amount': ['>', 100], 'posting_date': ['between', [start, end]]}, fields=['name', 'loyalty_amount', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all distinct loyalty amounts used.",
      "top_fields": ["loyalty_amount", "name", "customer", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['loyalty_amount'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What's the average loyalty amount this year?",
      "top_fields": ["loyalty_amount", "posting_date", "name", "grand_total", "company", "status"]
    },
    "output": "import datetime\nfrom frappe.utils import flt\nstart = datetime.date(datetime.date.today().year, 1, 1)\ndata = frappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['loyalty_amount'])\navg = sum(flt(d.loyalty_amount) for d in data) / len(data) if data else 0\nprint('Average Loyalty Amount:', avg)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where loyalty amount is not zero.",
      "top_fields": ["loyalty_amount", "name", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_amount': ['!=', 0]}, fields=['loyalty_amount', 'name'])"
  },

  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices under the Silver loyalty program.",
      "top_fields": ["loyalty_program", "name", "customer", "status", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_program': 'Silver'}, fields=['loyalty_program', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where no loyalty program was assigned.",
      "top_fields": ["loyalty_program", "status", "posting_date", "customer", "company", "name"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_program': ['is', 'null']}, fields=['loyalty_program', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices with Platinum loyalty program this month.",
      "top_fields": ["loyalty_program", "posting_date", "name", "customer", "grand_total", "status"]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'loyalty_program': 'Platinum', 'posting_date': ['>=', start]}, fields=['loyalty_program', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers belong to the Gold loyalty program?",
      "top_fields": ["loyalty_program", "customer", "posting_date", "name", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_program': 'Gold'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there return invoices with any loyalty program?",
      "top_fields": ["loyalty_program", "is_return", "customer", "name", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'loyalty_program': ['!=', '']}, fields=['loyalty_program', 'is_return'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices in Q4 under any loyalty program?",
      "top_fields": ["loyalty_program", "posting_date", "name", "customer", "grand_total", "status"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 10, 1)\nend = datetime.date(datetime.date.today().year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'loyalty_program': ['!=', '']}, fields=['loyalty_program', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices had loyalty program changed?",
      "top_fields": ["loyalty_program", "amended_from", "status", "posting_date", "name", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'amended_from': ['!=', ''], 'loyalty_program': ['!=', '']}, fields=['loyalty_program', 'amended_from'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export loyalty program activity for this year.",
      "top_fields": ["loyalty_program", "posting_date", "name", "customer", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'loyalty_program': ['!=', '']}, fields=['loyalty_program', 'posting_date', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices not linked to any loyalty program this quarter.",
      "top_fields": ["loyalty_program", "posting_date", "name", "status", "grand_total", "customer"]
    },
    "output": "import datetime\ntoday = datetime.date.today()\nq_start = datetime.date(today.year, 1 + 3 * ((today.month - 1) // 3), 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', q_start], 'loyalty_program': ['is', 'null']}, fields=['loyalty_program', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List distinct loyalty programs used.",
      "top_fields": ["loyalty_program", "name", "company", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['loyalty_program'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all return invoices that used the 'Loyalty Adjust - ERPG' account.",
      "top_fields": ["is_return", "loyalty_redemption_account", "name", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'loyalty_redemption_account': 'Loyalty Adjust - ERPG'}, fields=['is_return', 'loyalty_redemption_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices from last month used a loyalty redemption account?",
      "top_fields": ["loyalty_redemption_account", "posting_date", "name", "grand_total", "customer", "company"]
    },
    "output": "import datetime\nfrom dateutil.relativedelta import relativedelta\ntoday = datetime.date.today()\nstart = (today.replace(day=1) - relativedelta(months=1))\nend = today.replace(day=1) - datetime.timedelta(days=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'loyalty_redemption_account': ['!=', '']}, fields=['name', 'loyalty_redemption_account', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices where loyalty redemption account is blank.",
      "top_fields": ["loyalty_redemption_account", "name", "posting_date", "customer", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_redemption_account': ''}, fields=['name', 'loyalty_redemption_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List loyalty redemption accounts used in Q4.",
      "top_fields": ["loyalty_redemption_account", "posting_date", "name", "company", "customer", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 10, 1)\nend = datetime.date(datetime.date.today().year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['loyalty_redemption_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all distinct loyalty redemption accounts applied on invoices with status 'Paid'.",
      "top_fields": ["loyalty_redemption_account", "status", "name", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': 'Paid'}, fields=['loyalty_redemption_account'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with loyalty redemption account set to 'Loyalty Adjustment - HQL'.",
      "top_fields": ["loyalty_redemption_account", "name", "posting_date", "customer", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_redemption_account': 'Loyalty Adjustment - HQL'}, fields=['loyalty_redemption_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices do not have any loyalty redemption account applied?",
      "top_fields": ["loyalty_redemption_account", "name", "grand_total", "customer", "posting_date", "status"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'loyalty_redemption_account': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices using the 'Rewards - ERPG' loyalty redemption account.",
      "top_fields": ["loyalty_redemption_account", "customer", "name", "company", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_redemption_account': 'Rewards - ERPG'}, fields=['loyalty_redemption_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all invoices where loyalty redemption account is not null.",
      "top_fields": ["loyalty_redemption_account", "name", "status", "posting_date", "company", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_redemption_account': ['!=', '']}, fields=['loyalty_redemption_account'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct loyalty redemption accounts used this year.",
      "top_fields": ["loyalty_redemption_account", "posting_date", "customer", "name", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['loyalty_redemption_account'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with loyalty redemption cost center set as 'Main Branch'.",
      "top_fields": ["loyalty_redemption_cost_center", "name", "customer", "posting_date", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_redemption_cost_center': 'Main Branch'}, fields=['loyalty_redemption_cost_center', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which cost centers were used for loyalty redemption this year?",
      "top_fields": ["loyalty_redemption_cost_center", "posting_date", "company", "name", "status", "customer"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['loyalty_redemption_cost_center'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices used 'Retail North' for loyalty redemption?",
      "top_fields": ["loyalty_redemption_cost_center", "company", "name", "customer", "status", "posting_date"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'loyalty_redemption_cost_center': 'Retail North'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices where loyalty redemption was processed through any cost center.",
      "top_fields": ["loyalty_redemption_cost_center", "name", "posting_date", "status", "company", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_redemption_cost_center': ['!=', '']}, fields=['loyalty_redemption_cost_center', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct loyalty redemption cost centers used in Q2.",
      "top_fields": ["loyalty_redemption_cost_center", "posting_date", "company", "status", "name", "customer"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['loyalty_redemption_cost_center'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that used the loyalty redemption cost center 'South Zone'.",
      "top_fields": ["loyalty_redemption_cost_center", "customer", "posting_date", "name", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_redemption_cost_center': 'South Zone'}, fields=['loyalty_redemption_cost_center', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Count how many loyalty redemptions were tracked under cost center 'Retail Division'.",
      "top_fields": ["loyalty_redemption_cost_center", "name", "posting_date", "company", "status", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'loyalty_redemption_cost_center': 'Retail Division'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get distinct loyalty redemption cost centers in July.",
      "top_fields": ["loyalty_redemption_cost_center", "posting_date", "name", "company", "customer", "status"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 7, 1)\nend = datetime.date(datetime.date.today().year, 7, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['loyalty_redemption_cost_center'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with loyalty redemptions allocated under any cost center this quarter.",
      "top_fields": ["loyalty_redemption_cost_center", "posting_date", "name", "status", "customer", "company"]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(month=4, day=1)\nend = datetime.date.today().replace(month=6, day=30)\nfrappe.get_all('Sales Invoice', filters={'loyalty_redemption_cost_center': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['loyalty_redemption_cost_center', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices using loyalty cost centers that are not equal to 'General'.",
      "top_fields": ["loyalty_redemption_cost_center", "name", "company", "status", "posting_date", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'loyalty_redemption_cost_center': ['!=', 'General']}, fields=['loyalty_redemption_cost_center', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where address and contact details were updated.",
      "top_fields": ["address_and_contact", "name", "customer", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'address_and_contact': 1}, fields=['address_and_contact', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices include address and contact section?",
      "top_fields": ["address_and_contact", "name", "customer", "status", "posting_date", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'address_and_contact': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch return invoices that have address and contact info.",
      "top_fields": ["is_return", "address_and_contact", "name", "customer", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'address_and_contact': 1}, fields=['is_return', 'address_and_contact'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have invoices with address and contact added?",
      "top_fields": ["customer", "address_and_contact", "name", "posting_date", "grand_total", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'address_and_contact': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with address and contact attached.",
      "top_fields": ["is_pos", "address_and_contact", "name", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'address_and_contact': 1}, fields=['is_pos', 'address_and_contact'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices created this year with address and contact info.",
      "top_fields": ["address_and_contact", "posting_date", "name", "customer", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'address_and_contact': 1}, fields=['name', 'address_and_contact'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there any invoices with contact section missing?",
      "top_fields": ["address_and_contact", "name", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'address_and_contact': 0}, fields=['address_and_contact', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices including address and contact section.",
      "top_fields": ["address_and_contact", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'address_and_contact': 1}, fields=['name', 'address_and_contact'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with address and contact from Q4?",
      "top_fields": ["address_and_contact", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 10, 1)\nend = datetime.date(datetime.date.today().year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'address_and_contact': 1, 'posting_date': ['between', [start, end]]}, fields=['address_and_contact', 'posting_date'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices where address and contact was added today?",
      "top_fields": ["address_and_contact", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'address_and_contact': 1, 'posting_date': datetime.date.today()}, fields=['address_and_contact', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were billed to the address 'Villa 23, Doha'?",
      "top_fields": ["customer_address", "customer", "name", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer_address': 'Villa 23, Doha'}, fields=['customer_address', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have a registered customer address?",
      "top_fields": ["customer_address", "customer", "posting_date", "name", "status", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'customer_address': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices created this year where customer address was updated.",
      "top_fields": ["customer_address", "posting_date", "customer", "name", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'customer_address': ['!=', '']}, fields=['name', 'customer_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices where a customer address was recorded.",
      "top_fields": ["is_pos", "customer_address", "name", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'customer_address': ['!=', '']}, fields=['is_pos', 'customer_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with customer address that start with 'Street'.",
      "top_fields": ["customer_address", "name", "customer", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer_address': ['like', 'Street%']}, fields=['name', 'customer_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices with a specific customer address mentioned.",
      "top_fields": ["is_return", "customer_address", "name", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'customer_address': ['!=', '']}, fields=['is_return', 'customer_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices sent to 'Al Sadd, Doha'?",
      "top_fields": ["customer", "customer_address", "posting_date", "name", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer_address': 'Al Sadd, Doha'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices this month with customer address filled?",
      "top_fields": ["customer_address", "posting_date", "name", "customer", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'customer_address': ['!=', '']}, fields=['name', 'customer_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with no customer address recorded?",
      "top_fields": ["customer_address", "name", "customer", "status", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer_address': ['=', '']}, fields=['customer_address', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export customer addresses from all invoices this year.",
      "top_fields": ["customer_address", "posting_date", "name", "customer", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['name', 'customer_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices where contact person is mentioned.",
      "top_fields": ["contact_person", "customer", "name", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_person': ['!=', '']}, fields=['contact_person', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices are linked to the contact person named 'Ahmed Saeed'?",
      "top_fields": ["contact_person", "customer", "name", "status", "posting_date", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'contact_person': 'Ahmed Saeed'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find POS invoices with a contact person recorded.",
      "top_fields": ["contact_person", "is_pos", "posting_date", "customer", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'contact_person': ['!=', '']}, fields=['is_pos', 'contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers have contact persons listed on their invoices?",
      "top_fields": ["contact_person", "customer", "posting_date", "name", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_person': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices with contact person info from Q1.",
      "top_fields": ["contact_person", "posting_date", "name", "customer", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'contact_person': ['!=', ''], 'posting_date': ['between', [start, end]]}, fields=['name', 'contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get return invoices with contact person details.",
      "top_fields": ["contact_person", "is_return", "posting_date", "name", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'contact_person': ['!=', '']}, fields=['is_return', 'contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices created this month that mention contact persons?",
      "top_fields": ["contact_person", "posting_date", "customer", "name", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'contact_person': ['!=', '']}, fields=['contact_person', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me invoices where no contact person was filled.",
      "top_fields": ["contact_person", "customer", "name", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_person': ''}, fields=['name', 'contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices are tied to contact persons starting with 'Mohamed'?",
      "top_fields": ["contact_person", "name", "posting_date", "customer", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_person': ['like', 'Mohamed%']}, fields=['name', 'contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Give me all unique contact persons who appear in invoices.",
      "top_fields": ["contact_person", "customer", "name", "status", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', fields=['contact_person'], filters={'contact_person': ['!=', '']}, distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have address displays starting with 'P.O. Box'?",
      "top_fields": ["address_display", "name", "customer", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'address_display': ['like', 'P.O. Box%']}, fields=['name', 'address_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with missing address display info.",
      "top_fields": ["address_display", "name", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'address_display': ''}, fields=['name', 'address_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices created this year with valid address display.",
      "top_fields": ["address_display", "posting_date", "customer", "name", "company", "status"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'address_display': ['!=', '']}, fields=['name', 'address_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many POS invoices contain address display data?",
      "top_fields": ["is_pos", "address_display", "name", "posting_date", "customer", "status"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_pos': 1, 'address_display': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices sent to addresses in Al Wakrah?",
      "top_fields": ["address_display", "name", "customer", "status", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'address_display': ['like', '%Al Wakrah%']}, fields=['name', 'address_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices that include address display text.",
      "top_fields": ["is_return", "address_display", "name", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'address_display': ['!=', '']}, fields=['is_return', 'address_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export address display details from Q2 invoices.",
      "top_fields": ["address_display", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['address_display', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "What invoices had address displays modified today?",
      "top_fields": ["address_display", "posting_date", "name", "customer", "status", "company"]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'address_display': ['!=', '']}, fields=['address_display', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check if any invoices include 'Lusail' in their address display.",
      "top_fields": ["address_display", "name", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.db.exists('Sales Invoice', {'address_display': ['like', '%Lusail%']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List customers who received invoices with address displays starting with 'Block A'.",
      "top_fields": ["customer", "address_display", "posting_date", "name", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'address_display': ['like', 'Block A%']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices show contact display info containing 'Ali Hussain'?",
      "top_fields": ["contact_display", "customer", "name", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_display': ['like', '%Ali Hussain%']}, fields=['contact_display', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices created this month with valid contact displays?",
      "top_fields": ["contact_display", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'contact_display': ['!=', '']}, fields=['name', 'contact_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices where contact display was recorded.",
      "top_fields": ["is_return", "contact_display", "name", "customer", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'contact_display': ['!=', '']}, fields=['is_return', 'contact_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch POS invoices with non-empty contact display.",
      "top_fields": ["is_pos", "contact_display", "name", "posting_date", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'contact_display': ['!=', '']}, fields=['contact_display', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have no contact display?",
      "top_fields": ["contact_display", "name", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'contact_display': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices sent with contact display starting 'Mr. Saad'?",
      "top_fields": ["contact_display", "name", "posting_date", "customer", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_display': ['like', 'Mr. Saad%']}, fields=['name', 'contact_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices with contact display showing mobile numbers.",
      "top_fields": ["contact_display", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_display': ['like', '%+974%']}, fields=['name', 'contact_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check for invoices that included contact display and were unpaid.",
      "top_fields": ["contact_display", "status", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_display': ['!=', ''], 'status': ['!=', 'Paid']}, fields=['contact_display', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with contact display updates?",
      "top_fields": ["customer", "contact_display", "posting_date", "name", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_display': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List Q3 invoices that had contact display included.",
      "top_fields": ["contact_display", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 7, 1)\nend = datetime.date(datetime.date.today().year, 9, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'contact_display': ['!=', '']}, fields=['contact_display', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices show contact display info containing 'Ali Hussain'?",
      "top_fields": ["contact_display", "customer", "name", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_display': ['like', '%Ali Hussain%']}, fields=['contact_display', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices created this month with valid contact displays?",
      "top_fields": ["contact_display", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'contact_display': ['!=', '']}, fields=['name', 'contact_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices where contact display was recorded.",
      "top_fields": ["is_return", "contact_display", "name", "customer", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'contact_display': ['!=', '']}, fields=['is_return', 'contact_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch POS invoices with non-empty contact display.",
      "top_fields": ["is_pos", "contact_display", "name", "posting_date", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'contact_display': ['!=', '']}, fields=['contact_display', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have no contact display?",
      "top_fields": ["contact_display", "name", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'contact_display': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any invoices sent with contact display starting 'Mr. Saad'?",
      "top_fields": ["contact_display", "name", "posting_date", "customer", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_display': ['like', 'Mr. Saad%']}, fields=['name', 'contact_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices with contact display showing mobile numbers.",
      "top_fields": ["contact_display", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_display': ['like', '%+974%']}, fields=['name', 'contact_display'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check for invoices that included contact display and were unpaid.",
      "top_fields": ["contact_display", "status", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_display': ['!=', ''], 'status': ['!=', 'Paid']}, fields=['contact_display', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with contact display updates?",
      "top_fields": ["customer", "contact_display", "posting_date", "name", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_display': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List Q3 invoices that had contact display included.",
      "top_fields": ["contact_display", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 7, 1)\nend = datetime.date(datetime.date.today().year, 9, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'contact_display': ['!=', '']}, fields=['contact_display', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have the contact mobile number starting with '+974'?",
      "top_fields": ["contact_mobile", "name", "customer", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_mobile': ['like', '+974%']}, fields=['name', 'contact_mobile'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices this month where contact mobile was recorded.",
      "top_fields": ["contact_mobile", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'contact_mobile': ['!=', '']}, fields=['name', 'contact_mobile'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices where contact mobile is present.",
      "top_fields": ["is_pos", "contact_mobile", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'contact_mobile': ['!=', '']}, fields=['is_pos', 'contact_mobile'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices do not have contact mobile numbers?",
      "top_fields": ["contact_mobile", "name", "posting_date", "customer", "status", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'contact_mobile': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which return invoices had contact mobile filled in?",
      "top_fields": ["is_return", "contact_mobile", "name", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'contact_mobile': ['!=', '']}, fields=['is_return', 'contact_mobile'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export contact mobile numbers from all Q1 invoices.",
      "top_fields": ["contact_mobile", "posting_date", "name", "customer", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['name', 'contact_mobile'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices sent to contacts whose mobile contains '3300'?",
      "top_fields": ["contact_mobile", "name", "posting_date", "customer", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_mobile': ['like', '%3300%']}, fields=['name', 'contact_mobile'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check for unpaid invoices that include contact mobile numbers.",
      "top_fields": ["contact_mobile", "status", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_mobile': ['!=', ''], 'status': ['!=', 'Paid']}, fields=['contact_mobile', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with updated contact mobile values?",
      "top_fields": ["customer", "contact_mobile", "posting_date", "name", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_mobile': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do any Q4 invoices have contact mobile starting with '55'?",
      "top_fields": ["contact_mobile", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 10, 1)\nend = datetime.date(datetime.date.today().year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'contact_mobile': ['like', '55%']}, fields=['contact_mobile', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have contact emails ending with '@gmail.com'?",
      "top_fields": ["contact_email", "name", "customer", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_email': ['like', '%@gmail.com']}, fields=['name', 'contact_email'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices created this month with valid contact email addresses?",
      "top_fields": ["contact_email", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'contact_email': ['!=', '']}, fields=['name', 'contact_email'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices with a contact email provided.",
      "top_fields": ["is_pos", "contact_email", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'contact_email': ['!=', '']}, fields=['is_pos', 'contact_email'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have no contact email listed?",
      "top_fields": ["contact_email", "name", "posting_date", "customer", "status", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'contact_email': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices with non-empty contact email fields.",
      "top_fields": ["is_return", "contact_email", "name", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'contact_email': ['!=', '']}, fields=['is_return', 'contact_email'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export contact email addresses from Q1 invoices.",
      "top_fields": ["contact_email", "posting_date", "name", "customer", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['name', 'contact_email'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with contact emails including the domain 'htsqatar.com'?",
      "top_fields": ["contact_email", "name", "posting_date", "customer", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_email': ['like', '%@htsqatar.com']}, fields=['name', 'contact_email'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Check unpaid invoices that contain contact email details.",
      "top_fields": ["contact_email", "status", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_email': ['!=', ''], 'status': ['!=', 'Paid']}, fields=['contact_email', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with contact email values updated?",
      "top_fields": ["customer", "contact_email", "posting_date", "name", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'contact_email': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do Q3 invoices include contact email addresses with '.qa' domain?",
      "top_fields": ["contact_email", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 7, 1)\nend = datetime.date(datetime.date.today().year, 9, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'contact_email': ['like', '%.qa']}, fields=['contact_email', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices associated with the Qatar territory.",
      "top_fields": ["territory", "name", "customer", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'territory': 'Qatar'}, fields=['territory', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices are from the 'Doha' territory?",
      "top_fields": ["territory", "name", "posting_date", "status", "grand_total", "customer"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'territory': 'Doha'})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices where the territory name starts with 'West'.",
      "top_fields": ["territory", "name", "customer", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'territory': ['like', 'West%']}, fields=['territory', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get all invoices with territory information this year.",
      "top_fields": ["territory", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'territory': ['!=', '']}, fields=['territory', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices that mention the territory.",
      "top_fields": ["is_pos", "territory", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'territory': ['!=', '']}, fields=['is_pos', 'territory'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices from territories that include 'Industrial' in their name?",
      "top_fields": ["territory", "name", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'territory': ['like', '%Industrial%']}, fields=['territory', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export all distinct territories used in invoices.",
      "top_fields": ["territory", "customer", "company", "name", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'territory': ['!=', '']}, fields=['territory'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices created in Q2 are linked to any territory?",
      "top_fields": ["territory", "posting_date", "name", "customer", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'territory': ['!=', '']}, fields=['territory', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do any return invoices have territory data?",
      "top_fields": ["is_return", "territory", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'territory': ['!=', '']}, fields=['is_return', 'territory'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices are missing a territory?",
      "top_fields": ["territory", "name", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'territory': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were shipped to 'ADN Shipping Center'?",
      "top_fields": ["shipping_address_name", "customer", "name", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_address_name': 'ADN Shipping Center'}, fields=['shipping_address_name', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with shipping address names that start with 'Ship-'",
      "top_fields": ["shipping_address_name", "name", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_address_name': ['like', 'Ship-%']}, fields=['name', 'shipping_address_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices were shipped to any address?",
      "top_fields": ["shipping_address_name", "customer", "posting_date", "name", "status", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'shipping_address_name': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get Q1 invoices with a shipping address name recorded.",
      "top_fields": ["shipping_address_name", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'shipping_address_name': ['!=', '']}, fields=['shipping_address_name', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices with shipping address provided.",
      "top_fields": ["is_pos", "shipping_address_name", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'shipping_address_name': ['!=', '']}, fields=['is_pos', 'shipping_address_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices are missing the shipping address name?",
      "top_fields": ["shipping_address_name", "name", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_address_name': ''}, fields=['shipping_address_name', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with shipping address containing 'Doha' in name.",
      "top_fields": ["shipping_address_name", "name", "customer", "status", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_address_name': ['like', '%Doha%']}, fields=['name', 'shipping_address_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export all unique shipping address names used this year.",
      "top_fields": ["shipping_address_name", "customer", "posting_date", "name", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start]}, fields=['shipping_address_name'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any return invoices shipped to a named address?",
      "top_fields": ["is_return", "shipping_address_name", "posting_date", "name", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'shipping_address_name': ['!=', '']}, fields=['is_return', 'shipping_address_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Q4 invoices with specific shipping address names?",
      "top_fields": ["shipping_address_name", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 10, 1)\nend = datetime.date(datetime.date.today().year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'shipping_address_name': ['!=', '']}, fields=['shipping_address_name', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices shipped to address ID SHIP-0001.",
      "top_fields": ["shipping_address", "name", "customer", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_address': 'SHIP-0001'}, fields=['shipping_address', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices where shipping address starts with 'SHIP-'?",
      "top_fields": ["shipping_address", "name", "customer", "posting_date", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_address': ['like', 'SHIP-%']}, fields=['name', 'shipping_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices have no shipping address set?",
      "top_fields": ["shipping_address", "customer", "name", "posting_date", "status", "is_pos"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'shipping_address': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with valid shipping addresses posted in June.",
      "top_fields": ["shipping_address", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 6, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'shipping_address': ['!=', '']}, fields=['shipping_address', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "POS invoices with shipping addresses filled?",
      "top_fields": ["is_pos", "shipping_address", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'shipping_address': ['!=', '']}, fields=['is_pos', 'shipping_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices that include shipping address?",
      "top_fields": ["is_return", "shipping_address", "posting_date", "name", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'shipping_address': ['!=', '']}, fields=['is_return', 'shipping_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received shipments to SHIP-3002?",
      "top_fields": ["customer", "shipping_address", "posting_date", "name", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_address': 'SHIP-3002'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices with shipping address containing 'Doha'.",
      "top_fields": ["shipping_address", "name", "customer", "status", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'shipping_address': ['like', '%Doha%']}, fields=['name', 'shipping_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List unique shipping addresses used in Q2.",
      "top_fields": ["shipping_address", "name", "posting_date", "customer", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['shipping_address'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Were any unpaid invoices shipped?",
      "top_fields": ["shipping_address", "status", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': ['!=', 'Paid'], 'shipping_address': ['!=', '']}, fields=['shipping_address', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices used dispatch address name DIS-ADDR-0003?",
      "top_fields": ["dispatch_address_name", "name", "customer", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'dispatch_address_name': 'DIS-ADDR-0003'}, fields=['dispatch_address_name', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with dispatch address names starting with 'DIS-'?",
      "top_fields": ["dispatch_address_name", "name", "customer", "posting_date", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'dispatch_address_name': ['like', 'DIS-%']}, fields=['name', 'dispatch_address_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices lack dispatch address names?",
      "top_fields": ["dispatch_address_name", "customer", "name", "posting_date", "status", "is_pos"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'dispatch_address_name': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which Q1 invoices had dispatch addresses filled?",
      "top_fields": ["dispatch_address_name", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'dispatch_address_name': ['!=', '']}, fields=['dispatch_address_name', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Are there return invoices with dispatch address info?",
      "top_fields": ["is_return", "dispatch_address_name", "name", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'dispatch_address_name': ['!=', '']}, fields=['is_return', 'dispatch_address_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Dispatch address names used in POS invoices?",
      "top_fields": ["is_pos", "dispatch_address_name", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'dispatch_address_name': ['!=', '']}, fields=['dispatch_address_name', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with dispatch to DIS-ADDR-0025?",
      "top_fields": ["customer", "dispatch_address_name", "posting_date", "name", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'dispatch_address_name': 'DIS-ADDR-0025'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with dispatch address name containing 'Store-1'?",
      "top_fields": ["dispatch_address_name", "name", "customer", "status", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'dispatch_address_name': ['like', '%Store-1%']}, fields=['name', 'dispatch_address_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Unpaid invoices that include dispatch address?",
      "top_fields": ["dispatch_address_name", "status", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': ['!=', 'Paid'], 'dispatch_address_name': ['!=', '']}, fields=['dispatch_address_name', 'status'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List unique dispatch address names from invoices posted in May.",
      "top_fields": ["dispatch_address_name", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 5, 1)\nend = datetime.date(datetime.date.today().year, 5, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]]}, fields=['dispatch_address_name'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were sent to the dispatch address 'Building 45, Doha'?",
      "top_fields": ["dispatch_address", "customer", "posting_date", "name", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'dispatch_address': 'Building 45, Doha'}, fields=['dispatch_address', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with dispatch addresses containing the word 'Street'?",
      "top_fields": ["dispatch_address", "name", "customer", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'dispatch_address': ['like', '%Street%']}, fields=['dispatch_address', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices do not have dispatch addresses filled?",
      "top_fields": ["dispatch_address", "name", "posting_date", "customer", "status", "is_return"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'dispatch_address': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices in Q4 with dispatch addresses recorded?",
      "top_fields": ["dispatch_address", "posting_date", "name", "customer", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 10, 1)\nend = datetime.date(datetime.date.today().year, 12, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'dispatch_address': ['!=', '']}, fields=['dispatch_address', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which POS invoices used dispatch addresses?",
      "top_fields": ["is_pos", "dispatch_address", "posting_date", "name", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'dispatch_address': ['!=', '']}, fields=['dispatch_address', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Customers who received invoices at dispatch address containing 'Mall'?",
      "top_fields": ["customer", "dispatch_address", "name", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'dispatch_address': ['like', '%Mall%']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any return invoices that had dispatch addresses?",
      "top_fields": ["is_return", "dispatch_address", "name", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'dispatch_address': ['!=', '']}, fields=['is_return', 'dispatch_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices where dispatch address starts with 'Industrial Area'?",
      "top_fields": ["dispatch_address", "name", "posting_date", "customer", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'dispatch_address': ['like', 'Industrial Area%']}, fields=['name', 'dispatch_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices with dispatch addresses recorded this week.",
      "top_fields": ["dispatch_address", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date.today() - datetime.timedelta(days=datetime.date.today().weekday())\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'dispatch_address': ['!=', '']}, fields=['dispatch_address', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices had dispatch addresses containing P.O. Box?",
      "top_fields": ["dispatch_address", "name", "posting_date", "customer", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'dispatch_address': ['like', '%P.O. Box%']}, fields=['name', 'dispatch_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices list the company address as 'Main Office - Doha'?",
      "top_fields": ["company_address", "name", "customer", "posting_date", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_address': 'Main Office - Doha'}, fields=['name', 'company_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with company addresses beginning with 'Block A'?",
      "top_fields": ["company_address", "name", "posting_date", "customer", "company", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_address': ['like', 'Block A%']}, fields=['name', 'company_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices that don't have a company address listed.",
      "top_fields": ["company_address", "name", "posting_date", "status", "is_return", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_address': ''}, fields=['name', 'company_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all POS invoices with valid company addresses.",
      "top_fields": ["is_pos", "company_address", "name", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'company_address': ['!=', '']}, fields=['name', 'company_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices in Q1 used company addresses with 'Doha'?",
      "top_fields": ["company_address", "posting_date", "name", "customer", "company", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'company_address': ['like', '%Doha%']}, fields=['name', 'company_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices with filled company address field?",
      "top_fields": ["is_return", "company_address", "name", "customer", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'company_address': ['!=', '']}, fields=['name', 'company_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices from last month that include company addresses.",
      "top_fields": ["company_address", "posting_date", "name", "status", "customer", "grand_total"]
    },
    "output": "import datetime\nstart = (datetime.date.today().replace(day=1) - datetime.timedelta(days=1)).replace(day=1)\nend = datetime.date.today().replace(day=1) - datetime.timedelta(days=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'company_address': ['!=', '']}, fields=['name', 'company_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices using company addresses that contain 'Industrial Area'.",
      "top_fields": ["company_address", "name", "posting_date", "customer", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_address': ['like', '%Industrial Area%']}, fields=['name', 'company_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Customers billed from company address containing 'HQ Block C'?",
      "top_fields": ["customer", "company_address", "name", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_address': ['like', '%HQ Block C%']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices issued in Q2 that mention any company address.",
      "top_fields": ["company_address", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'company_address': ['!=', '']}, fields=['name', 'company_address'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have the company contact person listed as 'Sarah Al-Mansoori'?",
      "top_fields": ["company_contact_person", "customer", "name", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_contact_person': 'Sarah Al-Mansoori'}, fields=['name', 'company_contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices with company contact persons starting with 'Mr.'",
      "top_fields": ["company_contact_person", "name", "customer", "posting_date", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_contact_person': ['like', 'Mr.%']}, fields=['name', 'company_contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all invoices where company contact person is not recorded.",
      "top_fields": ["company_contact_person", "name", "status", "posting_date", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_contact_person': ''}, fields=['name', 'company_contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices that contain a valid company contact person.",
      "top_fields": ["company_contact_person", "posting_date", "customer", "name", "company", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_contact_person': ['!=', '']}, fields=['name', 'company_contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices in Q1 included a company contact person?",
      "top_fields": ["posting_date", "company_contact_person", "name", "status", "customer", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.db.count('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'company_contact_person': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return all POS invoices with a company contact person set.",
      "top_fields": ["is_pos", "company_contact_person", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'company_contact_person': ['!=', '']}, fields=['name', 'company_contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with contact person 'Mohammed Ameen' from the company?",
      "top_fields": ["customer", "company_contact_person", "posting_date", "name", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'company_contact_person': 'Mohammed Ameen'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices from Q2 where company contact person contains 'Khalid'",
      "top_fields": ["company_contact_person", "posting_date", "name", "customer", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'company_contact_person': ['like', '%Khalid%']}, fields=['name', 'company_contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Any return invoices with a company contact person listed?",
      "top_fields": ["is_return", "company_contact_person", "name", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'company_contact_person': ['!=', '']}, fields=['name', 'company_contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export all invoices this year with a filled company contact person field.",
      "top_fields": ["company_contact_person", "posting_date", "name", "customer", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'company_contact_person': ['!=', '']}, fields=['name', 'company_contact_person'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices that ignored the default payment terms template.",
      "top_fields": ["ignore_default_payment_terms_template", "name", "posting_date", "customer", "status", "due_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'ignore_default_payment_terms_template': 1}, fields=['name', 'ignore_default_payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices followed default payment terms?",
      "top_fields": ["ignore_default_payment_terms_template", "name", "posting_date", "customer", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'ignore_default_payment_terms_template': 0}, fields=['name', 'ignore_default_payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices bypassed default payment terms this month?",
      "top_fields": ["posting_date", "ignore_default_payment_terms_template", "name", "customer", "status", "due_date"]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.db.count('Sales Invoice', filters={'posting_date': ['>=', start], 'ignore_default_payment_terms_template': 1})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch POS invoices where default payment terms were ignored.",
      "top_fields": ["is_pos", "ignore_default_payment_terms_template", "name", "customer", "posting_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'ignore_default_payment_terms_template': 1}, fields=['name', 'ignore_default_payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which return invoices applied custom payment terms?",
      "top_fields": ["is_return", "ignore_default_payment_terms_template", "name", "customer", "status", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'ignore_default_payment_terms_template': 1}, fields=['name', 'ignore_default_payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices from Q2 that ignored default payment terms.",
      "top_fields": ["posting_date", "ignore_default_payment_terms_template", "name", "status", "customer", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'ignore_default_payment_terms_template': 1}, fields=['name', 'ignore_default_payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find all invoices with default payment terms applied.",
      "top_fields": ["ignore_default_payment_terms_template", "name", "customer", "posting_date", "due_date", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'ignore_default_payment_terms_template': 0}, fields=['name', 'ignore_default_payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices issued today with custom payment terms.",
      "top_fields": ["posting_date", "ignore_default_payment_terms_template", "name", "customer", "status", "company"]
    },
    "output": "import datetime\ntoday = datetime.date.today()\nfrappe.get_all('Sales Invoice', filters={'posting_date': today, 'ignore_default_payment_terms_template': 1}, fields=['name', 'ignore_default_payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show all unpaid invoices where default terms were ignored.",
      "top_fields": ["status", "ignore_default_payment_terms_template", "name", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': ['!=', 'Paid'], 'ignore_default_payment_terms_template': 1}, fields=['name', 'ignore_default_payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with overridden payment terms?",
      "top_fields": ["customer", "ignore_default_payment_terms_template", "name", "status", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'ignore_default_payment_terms_template': 1}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices are linked to the 'Net 30' payment terms template?",
      "top_fields": ["payment_terms_template", "name", "customer", "posting_date", "status", "due_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'payment_terms_template': 'Net 30'}, fields=['name', 'payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices created this month that used a payment terms template.",
      "top_fields": ["payment_terms_template", "posting_date", "name", "customer", "grand_total", "status"]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'payment_terms_template': ['!=', '']}, fields=['name', 'payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show return invoices with specific payment terms applied.",
      "top_fields": ["is_return", "payment_terms_template", "name", "customer", "status", "posting_date"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'payment_terms_template': ['!=', '']}, fields=['name', 'payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch POS invoices that used any payment terms template.",
      "top_fields": ["is_pos", "payment_terms_template", "name", "posting_date", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'payment_terms_template': ['!=', '']}, fields=['name', 'payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices don't have any payment terms assigned?",
      "top_fields": ["payment_terms_template", "name", "posting_date", "status", "customer", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'payment_terms_template': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get invoices from Q1 with a valid payment terms template.",
      "top_fields": ["payment_terms_template", "posting_date", "name", "status", "customer", "due_date"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'payment_terms_template': ['!=', '']}, fields=['name', 'payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices linked to the 'Advance Only' payment template?",
      "top_fields": ["payment_terms_template", "name", "customer", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'payment_terms_template': 'Advance Only'}, fields=['name', 'payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers received invoices with the 'Partial 50%' terms?",
      "top_fields": ["customer", "payment_terms_template", "name", "status", "grand_total", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'payment_terms_template': 'Partial 50%'}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Todayâ€™s invoices that used any payment terms?",
      "top_fields": ["payment_terms_template", "name", "posting_date", "customer", "grand_total", "status"]
    },
    "output": "import datetime\ntoday = datetime.date.today()\nfrappe.get_all('Sales Invoice', filters={'posting_date': today, 'payment_terms_template': ['!=', '']}, fields=['name', 'payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices with 'Net 60' payment terms this quarter.",
      "top_fields": ["payment_terms_template", "posting_date", "name", "customer", "company", "status"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'payment_terms_template': 'Net 60'}, fields=['name', 'payment_terms_template'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices include a payment schedule?",
      "top_fields": ["payment_schedule", "name", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'payment_schedule': ['!=', None]}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices that have payment schedules defined.",
      "top_fields": ["is_pos", "payment_schedule", "name", "customer", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'payment_schedule': ['!=', None]}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Return invoices from April with active payment schedules.",
      "top_fields": ["posting_date", "payment_schedule", "name", "status", "customer", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 4, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'payment_schedule': ['!=', None]}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices without any payment schedule.",
      "top_fields": ["payment_schedule", "name", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'payment_schedule': None}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices included payment schedules?",
      "top_fields": ["is_return", "payment_schedule", "name", "status", "posting_date", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'payment_schedule': ['!=', None]})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List customers who had invoices with payment schedules.",
      "top_fields": ["customer", "payment_schedule", "name", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'payment_schedule': ['!=', None]}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices with payment schedules and status Overdue?",
      "top_fields": ["payment_schedule", "status", "name", "customer", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'status': 'Overdue', 'payment_schedule': ['!=', None]}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices using payment schedules for Q2.",
      "top_fields": ["posting_date", "payment_schedule", "name", "customer", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'payment_schedule': ['!=', None]}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Todayâ€™s invoices with defined payment schedules?",
      "top_fields": ["posting_date", "payment_schedule", "name", "customer", "status", "company"]
    },
    "output": "import datetime\ntoday = datetime.date.today()\nfrappe.get_all('Sales Invoice', filters={'posting_date': today, 'payment_schedule': ['!=', None]}, fields=['name', 'payment_schedule'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which companies used payment schedules in May?",
      "top_fields": ["company", "payment_schedule", "posting_date", "name", "customer", "status"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 5, 1)\nend = datetime.date(datetime.date.today().year, 5, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'payment_schedule': ['!=', None]}, fields=['company'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices use terms and conditions labeled 'Standard T&C'?",
      "top_fields": ["tc_name", "name", "customer", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tc_name': 'Standard T&C'}, fields=['name', 'tc_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show POS invoices that had a tc_name assigned.",
      "top_fields": ["is_pos", "tc_name", "name", "posting_date", "customer", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'tc_name': ['!=', '']}, fields=['name', 'tc_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices created in March with any tc_name info?",
      "top_fields": ["posting_date", "tc_name", "name", "customer", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 3, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'tc_name': ['!=', '']}, fields=['name', 'tc_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices that donâ€™t have a tc_name.",
      "top_fields": ["tc_name", "name", "posting_date", "customer", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tc_name': ''}, fields=['name', 'tc_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices have valid tc_name entries?",
      "top_fields": ["is_return", "tc_name", "name", "customer", "status", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'tc_name': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all distinct tc_name values used in Sales Invoices.",
      "top_fields": ["tc_name", "name", "posting_date", "company", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tc_name': ['!=', '']}, fields=['tc_name'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Export invoices that use any tc_name with 'International' in it.",
      "top_fields": ["tc_name", "name", "posting_date", "customer", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tc_name': ['like', '%International%']}, fields=['name', 'tc_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which companies issued invoices with T&C applied?",
      "top_fields": ["company", "tc_name", "name", "posting_date", "status", "customer"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'tc_name': ['!=', '']}, fields=['company'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Today's invoices where tc_name was used?",
      "top_fields": ["tc_name", "posting_date", "name", "customer", "status", "company"]
    },
    "output": "import datetime\ntoday = datetime.date.today()\nfrappe.get_all('Sales Invoice', filters={'posting_date': today, 'tc_name': ['!=', '']}, fields=['name', 'tc_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices created in Q1 that reference any T&C document?",
      "top_fields": ["tc_name", "posting_date", "name", "customer", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'tc_name': ['!=', '']}, fields=['name', 'tc_name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show me all invoices that contain terms mentioning 'advance payment'.",
      "top_fields": ["terms", "name", "customer", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'terms': ['like', '%advance payment%']}, fields=['terms', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices have blank terms field?",
      "top_fields": ["terms", "name", "customer", "status", "posting_date", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'terms': ''}, fields=['name', 'terms'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List Q1 invoices that included custom terms and conditions.",
      "top_fields": ["terms", "posting_date", "name", "customer", "company", "status"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nend = datetime.date(datetime.date.today().year, 3, 31)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'terms': ['!=', '']}, fields=['name', 'terms'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices with terms that reference 'net 30'.",
      "top_fields": ["terms", "name", "customer", "status", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'terms': ['like', '%net 30%']}, fields=['terms', 'name'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many invoices do not have any terms specified?",
      "top_fields": ["terms", "name", "posting_date", "customer", "status", "grand_total"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'terms': ''})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get return invoices with some terms content included.",
      "top_fields": ["is_return", "terms", "name", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'terms': ['!=', '']}, fields=['is_return', 'terms'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices that included terms this month?",
      "top_fields": ["customer", "terms", "posting_date", "name", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'terms': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where terms field contains Arabic text.",
      "top_fields": ["terms", "name", "posting_date", "customer", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'terms': ['like', '%Ù…Ø±Ø­Ø¨Ø§%']}, fields=['name', 'terms'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List POS invoices that had terms mentioned.",
      "top_fields": ["is_pos", "terms", "name", "posting_date", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'terms': ['!=', '']}, fields=['name', 'terms'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices created today include any terms?",
      "top_fields": ["terms", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'terms': ['!=', '']}, fields=['name', 'terms'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices that include customer PO details mentioning 'PO-456'.",
      "top_fields": ["customer_po_details", "name", "customer", "posting_date", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer_po_details': ['like', '%PO-456%']}, fields=['name', 'customer_po_details'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were submitted without any customer PO details?",
      "top_fields": ["customer_po_details", "name", "customer", "status", "posting_date", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer_po_details': ''}, fields=['name', 'customer_po_details'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show Q2 invoices where customer PO info is present.",
      "top_fields": ["customer_po_details", "posting_date", "name", "customer", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 4, 1)\nend = datetime.date(datetime.date.today().year, 6, 30)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['between', [start, end]], 'customer_po_details': ['!=', '']}, fields=['name', 'customer_po_details'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Get return invoices with filled-in customer PO details.",
      "top_fields": ["is_return", "customer_po_details", "name", "posting_date", "customer", "status"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_return': 1, 'customer_po_details': ['!=', '']}, fields=['is_return', 'customer_po_details'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many POS invoices had customer PO data?",
      "top_fields": ["is_pos", "customer_po_details", "name", "posting_date", "customer", "company"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_pos': 1, 'customer_po_details': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices where customer PO info includes 'QTR2025'.",
      "top_fields": ["customer_po_details", "name", "posting_date", "customer", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'customer_po_details': ['like', '%QTR2025%']}, fields=['name', 'customer_po_details'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices created this week with PO references.",
      "top_fields": ["customer_po_details", "posting_date", "name", "customer", "status", "company"]
    },
    "output": "import datetime\ntoday = datetime.date.today()\nstart = today - datetime.timedelta(days=today.weekday())\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'customer_po_details': ['!=', '']}, fields=['name', 'customer_po_details'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with customer PO info this month?",
      "top_fields": ["customer", "customer_po_details", "posting_date", "name", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'customer_po_details': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Do any invoices have PO details referencing 'Urgent'?",
      "top_fields": ["customer_po_details", "name", "posting_date", "customer", "status", "grand_total"]
    },
    "output": "frappe.db.exists('Sales Invoice', {'customer_po_details': ['like', '%Urgent%']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List invoices today with customer PO details not empty.",
      "top_fields": ["customer_po_details", "posting_date", "name", "customer", "company", "status"]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'customer_po_details': ['!=', '']}, fields=['name', 'customer_po_details'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "List all invoices with PO numbers starting with 'PO-100'.",
      "top_fields": ["po_no", "name", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'po_no': ['like', 'PO-100%']}, fields=['name', 'po_no'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which invoices were submitted without a PO number?",
      "top_fields": ["po_no", "name", "posting_date", "customer", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'po_no': ''}, fields=['name', 'po_no'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices from this year with valid PO numbers?",
      "top_fields": ["po_no", "posting_date", "name", "customer", "status", "grand_total"]
    },
    "output": "import datetime\nstart = datetime.date(datetime.date.today().year, 1, 1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'po_no': ['!=', '']}, fields=['name', 'po_no'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "POS invoices with PO number available?",
      "top_fields": ["is_pos", "po_no", "name", "posting_date", "customer", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'is_pos': 1, 'po_no': ['!=', '']}, fields=['name', 'po_no'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "How many return invoices contain a PO number?",
      "top_fields": ["is_return", "po_no", "name", "customer", "posting_date", "status"]
    },
    "output": "frappe.db.count('Sales Invoice', filters={'is_return': 1, 'po_no': ['!=', '']})"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Fetch invoices where PO number includes 'ORDER-5000'.",
      "top_fields": ["po_no", "name", "posting_date", "customer", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'po_no': ['like', '%ORDER-5000%']}, fields=['name', 'po_no'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Find invoices with missing or empty PO numbers.",
      "top_fields": ["po_no", "name", "customer", "posting_date", "status", "grand_total"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'po_no': ''}, fields=['name', 'po_no'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Which customers had invoices with any PO number this month?",
      "top_fields": ["customer", "po_no", "posting_date", "name", "status", "company"]
    },
    "output": "import datetime\nstart = datetime.date.today().replace(day=1)\nfrappe.get_all('Sales Invoice', filters={'posting_date': ['>=', start], 'po_no': ['!=', '']}, fields=['customer'], distinct=True)"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Invoices sent with PO numbers containing 'Urgent' label?",
      "top_fields": ["po_no", "name", "posting_date", "customer", "status", "company"]
    },
    "output": "frappe.get_all('Sales Invoice', filters={'po_no': ['like', '%Urgent%']}, fields=['name', 'po_no'])"
  },
  {
    "input": {
      "doctype": "Sales Invoice",
      "question": "Show invoices created today with PO number filled in.",
      "top_fields": ["po_no", "name", "posting_date", "customer", "status", "company"]
    },
    "output": "import datetime\nfrappe.get_all('Sales Invoice', filters={'posting_date': datetime.date.today(), 'po_no': ['!=', '']}, fields=['name', 'po_no'])"
  }
]